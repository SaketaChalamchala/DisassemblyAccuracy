; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\7z\7zIn.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?DeleteByteStream@CInArchive@N7z@NArchive@@AAEX_N@Z ; NArchive::N7z::CInArchive::DeleteByteStream
PUBLIC	?GetRem@CInByte2@N7z@NArchive@@QBEIXZ		; NArchive::N7z::CInByte2::GetRem
PUBLIC	?Remove@CStreamSwitch@N7z@NArchive@@QAEXXZ	; NArchive::N7z::CStreamSwitch::Remove
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Remove@CStreamSwitch@N7z@NArchive@@QAEXXZ PROC		; NArchive::N7z::CStreamSwitch::Remove
; _this$ = ecx
; Line 66
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+4]
	test	ecx, ecx
	je	SHORT $LN3@Remove
; Line 69
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetRem@CInByte2@N7z@NArchive@@QBEIXZ	; NArchive::N7z::CInByte2::GetRem
	test	eax, eax
	je	SHORT $LN1@Remove
; Line 70
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx+60], 1
$LN1@Remove:
; Line 71
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+5]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx]
	call	?DeleteByteStream@CInArchive@N7z@NArchive@@AAEX_N@Z ; NArchive::N7z::CInArchive::DeleteByteStream
; Line 72
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0
$LN3@Remove:
; Line 74
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Remove@CStreamSwitch@N7z@NArchive@@QAEXXZ ENDP		; NArchive::N7z::CStreamSwitch::Remove
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetRem@CInByte2@N7z@NArchive@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRem@CInByte2@N7z@NArchive@@QBEIXZ PROC		; NArchive::N7z::CInByte2::GetRem, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 296
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	sub	eax, DWORD PTR [ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRem@CInByte2@N7z@NArchive@@QBEIXZ ENDP		; NArchive::N7z::CInByte2::GetRem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?DeleteByteStream@CInArchive@N7z@NArchive@@AAEX_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_needUpdatePos$ = 8					; size = 1
?DeleteByteStream@CInArchive@N7z@NArchive@@AAEX_N@Z PROC ; NArchive::N7z::CInArchive::DeleteByteStream, COMDAT
; _this$ = ecx
; Line 347
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 348
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 349
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jbe	SHORT $LN3@DeleteByte
; Line 351
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, 1
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], ecx
; Line 352
	movzx	eax, BYTE PTR _needUpdatePos$[ebp]
	test	eax, eax
	je	SHORT $LN3@DeleteByte
; Line 353
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 12					; 0000000cH
	mov	edx, DWORD PTR [edx+8]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+ecx+16]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+56]
	mov	DWORD PTR [eax+8], edx
$LN3@DeleteByte:
; Line 355
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteByteStream@CInArchive@N7z@NArchive@@AAEX_N@Z ENDP ; NArchive::N7z::CInArchive::DeleteByteStream
_TEXT	ENDS
PUBLIC	?AddByteStream@CInArchive@N7z@NArchive@@AAEXPBEI@Z ; NArchive::N7z::CInArchive::AddByteStream
PUBLIC	?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBEI_N@Z ; NArchive::N7z::CStreamSwitch::Set
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_archive$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_needUpdatePos$ = 20					; size = 1
?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBEI_N@Z PROC ; NArchive::N7z::CStreamSwitch::Set
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.cpp
; Line 77
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 78
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove@CStreamSwitch@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CStreamSwitch::Remove
; Line 79
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _archive$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 80
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	?AddByteStream@CInArchive@N7z@NArchive@@AAEXPBEI@Z ; NArchive::N7z::CInArchive::AddByteStream
; Line 81
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+4], 1
; Line 82
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR _needUpdatePos$[ebp]
	mov	BYTE PTR [eax+5], cl
; Line 83
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBEI_N@Z ENDP ; NArchive::N7z::CStreamSwitch::Set
_TEXT	ENDS
PUBLIC	??B?$CBuffer@E@@QBEPBEXZ			; CBuffer<unsigned char>::operator unsigned char const *
PUBLIC	?Size@?$CBuffer@E@@QBEIXZ			; CBuffer<unsigned char>::Size
PUBLIC	?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@ABV?$CBuffer@E@@@Z ; NArchive::N7z::CStreamSwitch::Set
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_archive$ = 8						; size = 4
_byteBuffer$ = 12					; size = 4
?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@ABV?$CBuffer@E@@@Z PROC ; NArchive::N7z::CStreamSwitch::Set
; _this$ = ecx
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 87
	push	0
	mov	ecx, DWORD PTR _byteBuffer$[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	push	eax
	mov	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	push	eax
	mov	eax, DWORD PTR _archive$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBEI_N@Z ; NArchive::N7z::CStreamSwitch::Set
; Line 88
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@ABV?$CBuffer@E@@@Z ENDP ; NArchive::N7z::CStreamSwitch::Set
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
PUBLIC	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ	; CObjectVector<CBuffer<unsigned char> >::Size
PUBLIC	?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ	; NArchive::N7z::CInArchive::ReadNum
PUBLIC	?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ	; NArchive::N7z::CInArchive::ReadByte
PUBLIC	?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBV?$CObjectVector@V?$CBuffer@E@@@@@Z ; NArchive::N7z::CStreamSwitch::Set
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dataIndex$73209 = -12					; size = 4
_external$ = -5						; size = 1
_this$ = -4						; size = 4
_archive$ = 8						; size = 4
_dataVector$ = 12					; size = 4
?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBV?$CObjectVector@V?$CBuffer@E@@@@@Z PROC ; NArchive::N7z::CStreamSwitch::Set
; _this$ = ecx
; Line 91
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 92
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove@CStreamSwitch@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CStreamSwitch::Remove
; Line 93
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ ; NArchive::N7z::CInArchive::ReadByte
	mov	BYTE PTR _external$[ebp], al
; Line 94
	movzx	eax, BYTE PTR _external$[ebp]
	test	eax, eax
	je	SHORT $LN3@Set
; Line 96
	mov	ecx, DWORD PTR _archive$[ebp]
	call	?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadNum
	mov	DWORD PTR _dataIndex$73209[ebp], eax
; Line 97
	mov	ecx, DWORD PTR _dataVector$[ebp]
	call	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<unsigned char> >::Size
	cmp	DWORD PTR _dataIndex$73209[ebp], eax
	jb	SHORT $LN1@Set
; Line 98
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN1@Set:
; Line 99
	mov	ecx, DWORD PTR _dataIndex$73209[ebp]
	push	ecx
	mov	ecx, DWORD PTR _dataVector$[ebp]
	call	??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
	push	eax
	mov	edx, DWORD PTR _archive$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@ABV?$CBuffer@E@@@Z ; NArchive::N7z::CStreamSwitch::Set
$LN3@Set:
; Line 101
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBV?$CObjectVector@V?$CBuffer@E@@@@@Z ENDP ; NArchive::N7z::CStreamSwitch::Set
_TEXT	ENDS
PUBLIC	?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ		; NArchive::N7z::CInByte2::ReadByte
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ PROC		; NArchive::N7z::CInArchive::ReadByte, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 360
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ	; NArchive::N7z::CInByte2::ReadByte
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ ENDP		; NArchive::N7z::CInArchive::ReadByte
_TEXT	ENDS
PUBLIC	?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ		; NArchive::N7z::CInByte2::ReadNum
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ PROC		; NArchive::N7z::CInArchive::ReadNum, COMDAT
; _this$ = ecx
; Line 362
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ	; NArchive::N7z::CInByte2::ReadNum
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ENDP		; NArchive::N7z::CInArchive::ReadNum
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
?ThrowIncorrect@N7z@NArchive@@YGXXZ PROC		; NArchive::N7z::ThrowIncorrect
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.cpp
; Line 49
	push	ebp
	mov	ebp, esp
	call	?ThrowException@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowException
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?ThrowIncorrect@N7z@NArchive@@YGXXZ ENDP		; NArchive::N7z::ThrowIncorrect
_TEXT	ENDS
PUBLIC	__TI1?AVCInArchiveException@N7z@NArchive@@
PUBLIC	__CTA1?AVCInArchiveException@N7z@NArchive@@
PUBLIC	__CT??_R0?AVCInArchiveException@N7z@NArchive@@@81
PUBLIC	??_R0?AVCInArchiveException@N7z@NArchive@@@8	; NArchive::N7z::CInArchiveException `RTTI Type Descriptor'
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0?AVCInArchiveException@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCInArchiveException@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CInArchiveException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCInArchiveException@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVCInArchiveException@N7z@NArchive@@@81
xdata$x	SEGMENT
__CT??_R0?AVCInArchiveException@N7z@NArchive@@@81 DD 00H
	DD	FLAT:??_R0?AVCInArchiveException@N7z@NArchive@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1?AVCInArchiveException@N7z@NArchive@@
xdata$x	SEGMENT
__CTA1?AVCInArchiveException@N7z@NArchive@@ DD 01H
	DD	FLAT:__CT??_R0?AVCInArchiveException@N7z@NArchive@@@81
xdata$x	ENDS
;	COMDAT __TI1?AVCInArchiveException@N7z@NArchive@@
xdata$x	SEGMENT
__TI1?AVCInArchiveException@N7z@NArchive@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVCInArchiveException@N7z@NArchive@@
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T75277 = -2						; size = 1
$T75276 = -1						; size = 1
?ThrowException@N7z@NArchive@@YGXXZ PROC		; NArchive::N7z::ThrowException
; Line 46
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	xor	eax, eax
	mov	BYTE PTR $T75277[ebp], al
	mov	cl, BYTE PTR $T75277[ebp]
	mov	BYTE PTR $T75276[ebp], cl
	push	OFFSET __TI1?AVCInArchiveException@N7z@NArchive@@
	lea	edx, DWORD PTR $T75276[ebp]
	push	edx
	call	__CxxThrowException@8
$LN2@ThrowExcep:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ThrowException@N7z@NArchive@@YGXXZ ENDP		; NArchive::N7z::ThrowException
_TEXT	ENDS
PUBLIC	?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z		; NArchive::N7z::CInByte2::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buf$ = 8						; size = 4
_size$ = 12						; size = 4
?AddByteStream@CInArchive@N7z@NArchive@@AAEXPBEI@Z PROC	; NArchive::N7z::CInArchive::AddByteStream
; _this$ = ecx
; Line 104
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 105
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 4
	jne	SHORT $LN1@AddByteStr
; Line 106
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN1@AddByteStr:
; Line 107
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	imul	edx, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	lea	ecx, DWORD PTR [eax+edx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 108
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z	; NArchive::N7z::CInByte2::Init
; Line 109
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddByteStream@CInArchive@N7z@NArchive@@AAEXPBEI@Z ENDP	; NArchive::N7z::CInArchive::AddByteStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z PROC		; NArchive::N7z::CInByte2::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 299
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 300
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 301
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 302
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 303
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z ENDP		; NArchive::N7z::CInByte2::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
tv72 = -5						; size = 1
_this$ = -4						; size = 4
?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ PROC		; NArchive::N7z::CInByte2::ReadByte
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.cpp
; Line 113
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 114
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jb	SHORT $LN1@ReadByte
; Line 115
	call	?ThrowEndOfData@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowEndOfData
$LN1@ReadByte:
; Line 116
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	cl, BYTE PTR [ecx+eax]
	mov	BYTE PTR tv72[ebp], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	al, BYTE PTR tv72[ebp]
; Line 117
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ ENDP		; NArchive::N7z::CInByte2::ReadByte
; Function compile flags: /Odtp /RTCsu
?ThrowEndOfData@N7z@NArchive@@YGXXZ PROC		; NArchive::N7z::ThrowEndOfData
; Line 47
	push	ebp
	mov	ebp, esp
	call	?ThrowException@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowException
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?ThrowEndOfData@N7z@NArchive@@YGXXZ ENDP		; NArchive::N7z::ThrowEndOfData
_TEXT	ENDS
PUBLIC	?ReadBytes@CInByte2@N7z@NArchive@@QAEXPAEI@Z	; NArchive::N7z::CInByte2::ReadBytes
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?ReadBytes@CInByte2@N7z@NArchive@@QAEXPAEI@Z PROC	; NArchive::N7z::CInByte2::ReadBytes
; _this$ = ecx
; Line 120
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 121
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN2@ReadBytes
; Line 122
	jmp	SHORT $LN3@ReadBytes
$LN2@ReadBytes:
; Line 123
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR _size$[ebp], edx
	jbe	SHORT $LN1@ReadBytes
; Line 124
	call	?ThrowEndOfData@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowEndOfData
$LN1@ReadBytes:
; Line 125
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 126
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN3@ReadBytes:
; Line 127
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ReadBytes@CInByte2@N7z@NArchive@@QAEXPAEI@Z ENDP	; NArchive::N7z::CInByte2::ReadBytes
_TEXT	ENDS
PUBLIC	?SkipData@CInByte2@N7z@NArchive@@QAEX_K@Z	; NArchive::N7z::CInByte2::SkipData
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -12						; size = 8
_this$ = -4						; size = 4
_size$ = 8						; size = 8
?SkipData@CInByte2@N7z@NArchive@@QAEX_K@Z PROC		; NArchive::N7z::CInByte2::SkipData
; _this$ = ecx
; Line 130
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 131
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+8]
	xor	eax, eax
	mov	DWORD PTR tv79[ebp], edx
	mov	DWORD PTR tv79[ebp+4], eax
	mov	ecx, DWORD PTR _size$[ebp+4]
	cmp	ecx, DWORD PTR tv79[ebp+4]
	jb	SHORT $LN1@SkipData
	ja	SHORT $LN4@SkipData
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR tv79[ebp]
	jbe	SHORT $LN1@SkipData
$LN4@SkipData:
; Line 132
	call	?ThrowEndOfData@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowEndOfData
$LN1@SkipData:
; Line 133
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
; Line 134
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SkipData@CInByte2@N7z@NArchive@@QAEX_K@Z ENDP		; NArchive::N7z::CInByte2::SkipData
_TEXT	ENDS
PUBLIC	?ReadNumber@CInByte2@N7z@NArchive@@QAE_KXZ	; NArchive::N7z::CInByte2::ReadNumber
PUBLIC	?SkipData@CInByte2@N7z@NArchive@@QAEXXZ		; NArchive::N7z::CInByte2::SkipData
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SkipData@CInByte2@N7z@NArchive@@QAEXXZ PROC		; NArchive::N7z::CInByte2::SkipData
; _this$ = ecx
; Line 137
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 138
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNumber@CInByte2@N7z@NArchive@@QAE_KXZ ; NArchive::N7z::CInByte2::ReadNumber
	push	edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkipData@CInByte2@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CInByte2::SkipData
; Line 139
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SkipData@CInByte2@N7z@NArchive@@QAEXXZ ENDP		; NArchive::N7z::CInByte2::SkipData
_TEXT	ENDS
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_res$ = -24						; size = 8
_processed$ = -12					; size = 4
_this$ = -4						; size = 4
?ReadNumber@CInByte2@N7z@NArchive@@QAE_KXZ PROC		; NArchive::N7z::CInByte2::ReadNumber
; _this$ = ecx
; Line 195
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 197
	lea	eax, DWORD PTR _processed$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	sub	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+8]
	push	edx
	call	?ReadNumberSpec@N7z@NArchive@@YG_KPBEIAAI@Z ; NArchive::N7z::ReadNumberSpec
	mov	DWORD PTR _res$[ebp], eax
	mov	DWORD PTR _res$[ebp+4], edx
; Line 198
	cmp	DWORD PTR _processed$[ebp], 0
	jne	SHORT $LN1@ReadNumber
; Line 199
	call	?ThrowEndOfData@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowEndOfData
$LN1@ReadNumber:
; Line 200
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, DWORD PTR _processed$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 201
	mov	eax, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _res$[ebp+4]
; Line 202
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ReadNumber
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN6@ReadNumber:
	DD	1
	DD	$LN5@ReadNumber
$LN5@ReadNumber:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN4@ReadNumber
$LN4@ReadNumber:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?ReadNumber@CInByte2@N7z@NArchive@@QAE_KXZ ENDP		; NArchive::N7z::CInByte2::ReadNumber
_TEXT	ENDS
EXTRN	__allshl:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_high$73319 = -28					; size = 8
_mask$73316 = -20					; size = 4
_i$73312 = -16						; size = 4
_value$ = -12						; size = 8
_b$ = -4						; size = 4
_p$ = 8							; size = 4
_size$ = 12						; size = 4
_processed$ = 16					; size = 4
?ReadNumberSpec@N7z@NArchive@@YG_KPBEIAAI@Z PROC	; NArchive::N7z::ReadNumberSpec
; Line 142
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 143
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN8@ReadNumber@2
; Line 145
	mov	eax, DWORD PTR _processed$[ebp]
	mov	DWORD PTR [eax], 0
; Line 146
	xor	eax, eax
	xor	edx, edx
	jmp	$LN9@ReadNumber@2
$LN8@ReadNumber@2:
; Line 149
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	mov	DWORD PTR _b$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 150
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx
; Line 152
	mov	edx, DWORD PTR _b$[ebp]
	and	edx, 128				; 00000080H
	jne	SHORT $LN7@ReadNumber@2
; Line 154
	mov	eax, DWORD PTR _processed$[ebp]
	mov	DWORD PTR [eax], 1
; Line 155
	mov	eax, DWORD PTR _b$[ebp]
	xor	edx, edx
	jmp	$LN9@ReadNumber@2
$LN7@ReadNumber@2:
; Line 158
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN6@ReadNumber@2
; Line 160
	mov	ecx, DWORD PTR _processed$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 161
	xor	eax, eax
	xor	edx, edx
	jmp	$LN9@ReadNumber@2
$LN6@ReadNumber@2:
; Line 164
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	cdq
	mov	DWORD PTR _value$[ebp], eax
	mov	DWORD PTR _value$[ebp+4], edx
; Line 165
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
; Line 166
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx
; Line 168
	mov	DWORD PTR _i$73312[ebp], 1
	jmp	SHORT $LN5@ReadNumber@2
$LN4@ReadNumber@2:
	mov	edx, DWORD PTR _i$73312[ebp]
	add	edx, 1
	mov	DWORD PTR _i$73312[ebp], edx
$LN5@ReadNumber@2:
	cmp	DWORD PTR _i$73312[ebp], 8
	jae	$LN3@ReadNumber@2
; Line 170
	mov	eax, 128				; 00000080H
	mov	ecx, DWORD PTR _i$73312[ebp]
	shr	eax, cl
	mov	DWORD PTR _mask$73316[ebp], eax
; Line 171
	mov	ecx, DWORD PTR _b$[ebp]
	and	ecx, DWORD PTR _mask$73316[ebp]
	jne	SHORT $LN2@ReadNumber@2
; Line 173
	mov	edx, DWORD PTR _mask$73316[ebp]
	sub	edx, 1
	and	edx, DWORD PTR _b$[ebp]
	xor	eax, eax
	mov	DWORD PTR _high$73319[ebp], edx
	mov	DWORD PTR _high$73319[ebp+4], eax
; Line 174
	mov	ecx, DWORD PTR _i$73312[ebp]
	shl	ecx, 3
	mov	eax, DWORD PTR _high$73319[ebp]
	mov	edx, DWORD PTR _high$73319[ebp+4]
	call	__allshl
	or	eax, DWORD PTR _value$[ebp]
	or	edx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR _value$[ebp], eax
	mov	DWORD PTR _value$[ebp+4], edx
; Line 175
	mov	ecx, DWORD PTR _i$73312[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _processed$[ebp]
	mov	DWORD PTR [edx], ecx
; Line 176
	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	jmp	SHORT $LN9@ReadNumber@2
$LN2@ReadNumber@2:
; Line 179
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN1@ReadNumber@2
; Line 181
	mov	eax, DWORD PTR _processed$[ebp]
	mov	DWORD PTR [eax], 0
; Line 182
	xor	eax, eax
	xor	edx, edx
	jmp	SHORT $LN9@ReadNumber@2
$LN1@ReadNumber@2:
; Line 185
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [ecx]
	cdq
	mov	ecx, DWORD PTR _i$73312[ebp]
	shl	ecx, 3
	call	__allshl
	or	eax, DWORD PTR _value$[ebp]
	or	edx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR _value$[ebp], eax
	mov	DWORD PTR _value$[ebp+4], edx
; Line 186
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
; Line 187
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _size$[ebp], eax
; Line 188
	jmp	$LN4@ReadNumber@2
$LN3@ReadNumber@2:
; Line 190
	mov	ecx, DWORD PTR _processed$[ebp]
	mov	DWORD PTR [ecx], 9
; Line 191
	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
$LN9@ReadNumber@2:
; Line 192
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ReadNumberSpec@N7z@NArchive@@YG_KPBEIAAI@Z ENDP	; NArchive::N7z::ReadNumberSpec
; Function compile flags: /Odtp /RTCsu
_value$ = -12						; size = 8
_this$ = -4						; size = 4
?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ PROC		; NArchive::N7z::CInByte2::ReadNum
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 217
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNumber@CInByte2@N7z@NArchive@@QAE_KXZ ; NArchive::N7z::CInByte2::ReadNumber
	mov	DWORD PTR _value$[ebp], eax
	mov	DWORD PTR _value$[ebp+4], edx
; Line 218
	cmp	DWORD PTR _value$[ebp+4], 0
	ja	SHORT $LN4@ReadNum
	cmp	DWORD PTR _value$[ebp], 2147483647	; 7fffffffH
	jbe	SHORT $LN1@ReadNum
$LN4@ReadNum:
; Line 219
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN1@ReadNum:
; Line 220
	mov	eax, DWORD PTR _value$[ebp]
; Line 221
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ ENDP		; NArchive::N7z::CInByte2::ReadNum
_TEXT	ENDS
PUBLIC	__TI2?AVCUnsupportedFeatureException@N7z@NArchive@@
PUBLIC	__CTA2?AVCUnsupportedFeatureException@N7z@NArchive@@
PUBLIC	__CT??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@81
PUBLIC	??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@8 ; NArchive::N7z::CUnsupportedFeatureException `RTTI Type Descriptor'
;	COMDAT ??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::N7z::CUnsupportedFeatureException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCUnsupportedFeatureException@N7z@NArchive@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@81
xdata$x	SEGMENT
__CT??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@81 DD 00H
	DD	FLAT:??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA2?AVCUnsupportedFeatureException@N7z@NArchive@@
xdata$x	SEGMENT
__CTA2?AVCUnsupportedFeatureException@N7z@NArchive@@ DD 02H
	DD	FLAT:__CT??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@81
	DD	FLAT:__CT??_R0?AVCInArchiveException@N7z@NArchive@@@81
xdata$x	ENDS
;	COMDAT __TI2?AVCUnsupportedFeatureException@N7z@NArchive@@
xdata$x	SEGMENT
__TI2?AVCUnsupportedFeatureException@N7z@NArchive@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA2?AVCUnsupportedFeatureException@N7z@NArchive@@
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T75299 = -2						; size = 1
$T75298 = -1						; size = 1
?ThrowUnsupported@N7z@NArchive@@YGXXZ PROC		; NArchive::N7z::ThrowUnsupported
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	al, BYTE PTR $T75299[ebp]
	mov	BYTE PTR $T75298[ebp], al
	push	OFFSET __TI2?AVCUnsupportedFeatureException@N7z@NArchive@@
	lea	ecx, DWORD PTR $T75298[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN2@ThrowUnsup:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ThrowUnsupported@N7z@NArchive@@YGXXZ ENDP		; NArchive::N7z::ThrowUnsupported
_TEXT	ENDS
PUBLIC	?ReadUInt32@CInByte2@N7z@NArchive@@QAEIXZ	; NArchive::N7z::CInByte2::ReadUInt32
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_res$ = -8						; size = 4
_this$ = -4						; size = 4
?ReadUInt32@CInByte2@N7z@NArchive@@QAEIXZ PROC		; NArchive::N7z::CInByte2::ReadUInt32
; _this$ = ecx
; Line 224
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 225
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+4]
	jbe	SHORT $LN1@ReadUInt32
; Line 226
	call	?ThrowEndOfData@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowEndOfData
$LN1@ReadUInt32:
; Line 227
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	ecx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _res$[ebp], ecx
; Line 228
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
; Line 229
	mov	eax, DWORD PTR _res$[ebp]
; Line 230
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadUInt32@CInByte2@N7z@NArchive@@QAEIXZ ENDP		; NArchive::N7z::CInByte2::ReadUInt32
_TEXT	ENDS
PUBLIC	?ReadUInt64@CInByte2@N7z@NArchive@@QAE_KXZ	; NArchive::N7z::CInByte2::ReadUInt64
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_res$ = -12						; size = 8
_this$ = -4						; size = 4
?ReadUInt64@CInByte2@N7z@NArchive@@QAE_KXZ PROC		; NArchive::N7z::CInByte2::ReadUInt64
; _this$ = ecx
; Line 233
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 234
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	cmp	ecx, DWORD PTR [edx+4]
	jbe	SHORT $LN1@ReadUInt64
; Line 235
	call	?ThrowEndOfData@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowEndOfData
$LN1@ReadUInt64:
; Line 236
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	edx, DWORD PTR [ecx+eax]
	mov	DWORD PTR _res$[ebp], edx
	mov	eax, DWORD PTR [ecx+eax+4]
	mov	DWORD PTR _res$[ebp+4], eax
; Line 237
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 8
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
; Line 238
	mov	eax, DWORD PTR _res$[ebp]
	mov	edx, DWORD PTR _res$[ebp+4]
; Line 239
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadUInt64@CInByte2@N7z@NArchive@@QAE_KXZ ENDP		; NArchive::N7z::CInByte2::ReadUInt64
_TEXT	ENDS
PUBLIC	??1?$CObjArray@E@@QAE@XZ			; CObjArray<unsigned char>::~CObjArray<unsigned char>
PUBLIC	??B?$CObjArray@E@@QAEPAEXZ			; CObjArray<unsigned char>::operator unsigned char *
PUBLIC	??0?$CObjArray@E@@QAE@I@Z			; CObjArray<unsigned char>::CObjArray<unsigned char>
PUBLIC	?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z ; NArchive::N7z::CInArchive::FindAndReadSignature
EXTRN	__imp__memmove:PROC
EXTRN	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:PROC ; ReadStream_FALSE
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__unwindtable$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z$0
__ehfuncinfo$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv236 = -112						; size = 8
tv218 = -104						; size = 4
$T75306 = -100						; size = 4
$T75305 = -96						; size = 4
$T75304 = -92						; size = 4
$T75303 = -88						; size = 4
_lim$73405 = -84					; size = 4
_p$73404 = -80						; size = 4
_pos$73400 = -76					; size = 4
___result__$73394 = -72					; size = 4
_processed$73393 = -64					; size = 4
_rem$73387 = -56					; size = 8
_readSize$73385 = -48					; size = 4
_offset$ = -44						; size = 8
_buf$ = -32						; size = 4
_kBufSize$ = -24					; size = 4
___result__$73373 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_searchHeaderSizeLimit$ = 12				; size = 4
?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z PROC ; NArchive::N7z::CInArchive::FindAndReadSignature
; _this$ = ecx
; Line 265
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 100				; 00000064H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 266
	push	32					; 00000020H
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 80					; 00000050H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE
	mov	DWORD PTR ___result__$73373[ebp], eax
	cmp	DWORD PTR ___result__$73373[ebp], 0
	je	SHORT $LN21@FindAndRea
	mov	eax, DWORD PTR ___result__$73373[ebp]
	jmp	$LN22@FindAndRea
$LN21@FindAndRea:
; Line 268
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 80					; 00000050H
	push	edx
	call	?TestSignature2@N7z@NArchive@@YG_NPBE@Z	; NArchive::N7z::TestSignature2
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@FindAndRea
; Line 269
	xor	eax, eax
	jmp	$LN22@FindAndRea
$LN20@FindAndRea:
; Line 270
	cmp	DWORD PTR _searchHeaderSizeLimit$[ebp], 0
	je	SHORT $LN19@FindAndRea
	mov	ecx, DWORD PTR _searchHeaderSizeLimit$[ebp]
	mov	DWORD PTR tv218[ebp], ecx
	mov	edx, DWORD PTR tv218[ebp]
	mov	eax, DWORD PTR tv218[ebp]
	mov	ecx, DWORD PTR [edx]
	or	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN19@FindAndRea
; Line 271
	mov	eax, 1
	jmp	$LN22@FindAndRea
$LN19@FindAndRea:
; Line 273
	mov	DWORD PTR _kBufSize$[ebp], 32768	; 00008000H
; Line 274
	push	32768					; 00008000H
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??0?$CObjArray@E@@QAE@I@Z		; CObjArray<unsigned char>::CObjArray<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 275
	push	32					; 00000020H
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 80					; 00000050H
	push	edx
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 276
	mov	DWORD PTR _offset$[ebp], 0
	mov	DWORD PTR _offset$[ebp+4], 0
$LN18@FindAndRea:
; Line 280
	mov	DWORD PTR _readSize$73385[ebp], 32736	; 00007fe0H
; Line 281
	cmp	DWORD PTR _searchHeaderSizeLimit$[ebp], 0
	je	SHORT $LN16@FindAndRea
; Line 283
	mov	eax, DWORD PTR _searchHeaderSizeLimit$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, DWORD PTR _offset$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sbb	edx, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR _rem$73387[ebp], ecx
	mov	DWORD PTR _rem$73387[ebp+4], edx
; Line 284
	mov	eax, DWORD PTR _readSize$73385[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv236[ebp], eax
	mov	DWORD PTR tv236[ebp+4], ecx
	mov	edx, DWORD PTR tv236[ebp+4]
	cmp	edx, DWORD PTR _rem$73387[ebp+4]
	jb	SHORT $LN15@FindAndRea
	ja	SHORT $LN25@FindAndRea
	mov	eax, DWORD PTR tv236[ebp]
	cmp	eax, DWORD PTR _rem$73387[ebp]
	jbe	SHORT $LN15@FindAndRea
$LN25@FindAndRea:
; Line 285
	mov	ecx, DWORD PTR _rem$73387[ebp]
	mov	DWORD PTR _readSize$73385[ebp], ecx
$LN15@FindAndRea:
; Line 286
	cmp	DWORD PTR _readSize$73385[ebp], 0
	jne	SHORT $LN16@FindAndRea
; Line 287
	mov	DWORD PTR $T75303[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T75303[ebp]
	jmp	$LN22@FindAndRea
$LN16@FindAndRea:
; Line 290
	mov	DWORD PTR _processed$73393[ebp], 0
; Line 291
	mov	esi, esp
	lea	edx, DWORD PTR _processed$73393[ebp]
	push	edx
	mov	eax, DWORD PTR _readSize$73385[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73394[ebp], eax
	cmp	DWORD PTR ___result__$73394[ebp], 0
	je	SHORT $LN13@FindAndRea
	mov	edx, DWORD PTR ___result__$73394[ebp]
	mov	DWORD PTR $T75304[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T75304[ebp]
	jmp	$LN22@FindAndRea
$LN13@FindAndRea:
; Line 292
	cmp	DWORD PTR _processed$73393[ebp], 0
	jne	SHORT $LN12@FindAndRea
; Line 293
	mov	DWORD PTR $T75305[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T75305[ebp]
	jmp	$LN22@FindAndRea
$LN12@FindAndRea:
; Line 295
	mov	DWORD PTR _pos$73400[ebp], 0
$LN11@FindAndRea:
; Line 297
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	mov	ecx, DWORD PTR _pos$73400[ebp]
	lea	edx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _p$73404[ebp], edx
; Line 298
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	add	eax, DWORD PTR _processed$73393[ebp]
	mov	DWORD PTR _lim$73405[ebp], eax
; Line 299
	jmp	SHORT $LN9@FindAndRea
$LN8@FindAndRea:
	mov	eax, DWORD PTR _p$73404[ebp]
	add	eax, 4
	mov	DWORD PTR _p$73404[ebp], eax
$LN9@FindAndRea:
	mov	ecx, DWORD PTR _p$73404[ebp]
	cmp	ecx, DWORD PTR _lim$73405[ebp]
	ja	SHORT $LN7@FindAndRea
; Line 301
	mov	edx, DWORD PTR _p$73404[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 55					; 00000037H
	jne	SHORT $LN6@FindAndRea
	jmp	SHORT $LN7@FindAndRea
$LN6@FindAndRea:
; Line 302
	mov	ecx, DWORD PTR _p$73404[ebp]
	movzx	edx, BYTE PTR [ecx+1]
	cmp	edx, 55					; 00000037H
	jne	SHORT $LN5@FindAndRea
	mov	eax, DWORD PTR _p$73404[ebp]
	add	eax, 1
	mov	DWORD PTR _p$73404[ebp], eax
	jmp	SHORT $LN7@FindAndRea
$LN5@FindAndRea:
; Line 303
	mov	ecx, DWORD PTR _p$73404[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	cmp	edx, 55					; 00000037H
	jne	SHORT $LN4@FindAndRea
	mov	eax, DWORD PTR _p$73404[ebp]
	add	eax, 2
	mov	DWORD PTR _p$73404[ebp], eax
	jmp	SHORT $LN7@FindAndRea
$LN4@FindAndRea:
; Line 304
	mov	ecx, DWORD PTR _p$73404[ebp]
	movzx	edx, BYTE PTR [ecx+3]
	cmp	edx, 55					; 00000037H
	jne	SHORT $LN3@FindAndRea
	mov	eax, DWORD PTR _p$73404[ebp]
	add	eax, 3
	mov	DWORD PTR _p$73404[ebp], eax
	jmp	SHORT $LN7@FindAndRea
$LN3@FindAndRea:
; Line 305
	jmp	SHORT $LN8@FindAndRea
$LN7@FindAndRea:
; Line 306
	mov	ecx, DWORD PTR _p$73404[ebp]
	cmp	ecx, DWORD PTR _lim$73405[ebp]
	jbe	SHORT $LN2@FindAndRea
; Line 307
	jmp	$LN10@FindAndRea
$LN2@FindAndRea:
; Line 308
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	mov	edx, DWORD PTR _p$73404[ebp]
	sub	edx, eax
	mov	DWORD PTR _pos$73400[ebp], edx
; Line 309
	mov	eax, DWORD PTR _p$73404[ebp]
	push	eax
	call	?TestSignature@N7z@NArchive@@YG_NPBE@Z	; NArchive::N7z::TestSignature
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@FindAndRea
; Line 311
	push	32					; 00000020H
	mov	edx, DWORD PTR _p$73404[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 80					; 00000050H
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 312
	mov	ecx, DWORD PTR _pos$73400[ebp]
	xor	edx, edx
	add	ecx, DWORD PTR _offset$[ebp]
	adc	edx, DWORD PTR _offset$[ebp+4]
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+64]
	adc	edx, DWORD PTR [eax+68]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	DWORD PTR [eax+68], edx
; Line 313
	mov	esi, esp
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	add	edx, 32					; 00000020H
	mov	eax, DWORD PTR [ecx+68]
	adc	eax, 0
	push	eax
	push	edx
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR $T75306[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T75306[ebp]
	jmp	SHORT $LN22@FindAndRea
$LN1@FindAndRea:
; Line 315
	jmp	$LN11@FindAndRea
$LN10@FindAndRea:
; Line 317
	mov	edx, DWORD PTR _processed$73393[ebp]
	xor	eax, eax
	add	edx, DWORD PTR _offset$[ebp]
	adc	eax, DWORD PTR _offset$[ebp+4]
	mov	DWORD PTR _offset$[ebp], edx
	mov	DWORD PTR _offset$[ebp+4], eax
; Line 318
	mov	esi, esp
	push	32					; 00000020H
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	add	eax, DWORD PTR _processed$73393[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 319
	jmp	$LN18@FindAndRea
; Line 320
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buf$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
$LN22@FindAndRea:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN30@FindAndRea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN30@FindAndRea:
	DD	2
	DD	$LN29@FindAndRea
$LN29@FindAndRea:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN26@FindAndRea
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN27@FindAndRea
$LN27@FindAndRea:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN26@FindAndRea:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z$0:
	lea	ecx, DWORD PTR _buf$[ebp]
	jmp	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
__ehhandler$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z ENDP ; NArchive::N7z::CInArchive::FindAndReadSignature
EXTRN	@CrcCalc@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
?TestSignature@N7z@NArchive@@YG_NPBE@Z PROC		; NArchive::N7z::TestSignature
; Line 244
	push	ebp
	mov	ebp, esp
; Line 245
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 55					; 00000037H
	jne	SHORT $LN1@TestSignat
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	eax, 122				; 0000007aH
	jne	SHORT $LN1@TestSignat
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	cmp	edx, 188				; 000000bcH
	jne	SHORT $LN1@TestSignat
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	cmp	ecx, 175				; 000000afH
	jne	SHORT $LN1@TestSignat
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	cmp	eax, 39					; 00000027H
	jne	SHORT $LN1@TestSignat
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+5]
	cmp	edx, 28					; 0000001cH
	je	SHORT $LN2@TestSignat
$LN1@TestSignat:
	xor	al, al
	jmp	SHORT $LN3@TestSignat
$LN2@TestSignat:
; Line 246
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, 20					; 00000014H
	call	@CrcCalc@8
	mov	ecx, DWORD PTR _p$[ebp]
	xor	edx, edx
	cmp	eax, DWORD PTR [ecx+8]
	sete	dl
	mov	al, dl
$LN3@TestSignat:
; Line 247
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?TestSignature@N7z@NArchive@@YG_NPBE@Z ENDP		; NArchive::N7z::TestSignature
; Function compile flags: /Odtp /RTCsu
tv130 = -8						; size = 4
_i$73363 = -4						; size = 4
_p$ = 8							; size = 4
?TestSignature2@N7z@NArchive@@YG_NPBE@Z PROC		; NArchive::N7z::TestSignature2
; Line 251
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 252
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 55					; 00000037H
	jne	SHORT $LN6@TestSignat@2
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	eax, 122				; 0000007aH
	jne	SHORT $LN6@TestSignat@2
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+2]
	cmp	edx, 188				; 000000bcH
	jne	SHORT $LN6@TestSignat@2
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	cmp	ecx, 175				; 000000afH
	jne	SHORT $LN6@TestSignat@2
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+4]
	cmp	eax, 39					; 00000027H
	jne	SHORT $LN6@TestSignat@2
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+5]
	cmp	edx, 28					; 0000001cH
	je	SHORT $LN7@TestSignat@2
$LN6@TestSignat@2:
	xor	al, al
	jmp	SHORT $LN8@TestSignat@2
$LN7@TestSignat@2:
; Line 253
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 12					; 0000000cH
	mov	edx, 20					; 00000014H
	call	@CrcCalc@8
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR [ecx+8]
	jne	SHORT $LN5@TestSignat@2
; Line 254
	mov	al, 1
	jmp	SHORT $LN8@TestSignat@2
$LN5@TestSignat@2:
; Line 255
	mov	DWORD PTR _i$73363[ebp], 8
	jmp	SHORT $LN4@TestSignat@2
$LN3@TestSignat@2:
	mov	edx, DWORD PTR _i$73363[ebp]
	add	edx, 1
	mov	DWORD PTR _i$73363[ebp], edx
$LN4@TestSignat@2:
	cmp	DWORD PTR _i$73363[ebp], 32		; 00000020H
	jae	SHORT $LN2@TestSignat@2
; Line 256
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _i$73363[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@TestSignat@2
; Line 257
	xor	al, al
	jmp	SHORT $LN8@TestSignat@2
$LN1@TestSignat@2:
; Line 258
	jmp	SHORT $LN3@TestSignat@2
$LN2@TestSignat@2:
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+6]
	test	eax, eax
	jne	SHORT $LN10@TestSignat@2
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+7]
	test	edx, edx
	jne	SHORT $LN10@TestSignat@2
	mov	DWORD PTR tv130[ebp], 0
	jmp	SHORT $LN11@TestSignat@2
$LN10@TestSignat@2:
	mov	DWORD PTR tv130[ebp], 1
$LN11@TestSignat@2:
	mov	al, BYTE PTR tv130[ebp]
$LN8@TestSignat@2:
; Line 259
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?TestSignature2@N7z@NArchive@@YG_NPBE@Z ENDP		; NArchive::N7z::TestSignature2
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
PUBLIC	?Close@CInArchive@N7z@NArchive@@QAEXXZ		; NArchive::N7z::CInArchive::Close
PUBLIC	?Open@CInArchive@N7z@NArchive@@QAEJPAUIInStream@@PB_K@Z ; NArchive::N7z::CInArchive::Open
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$73428 = -20					; size = 4
___result__$73426 = -16					; size = 4
___result__$73424 = -12					; size = 4
___result__$73422 = -8					; size = 4
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
_searchHeaderSizeLimit$ = 12				; size = 4
?Open@CInArchive@N7z@NArchive@@QAEJPAUIInStream@@PB_K@Z PROC ; NArchive::N7z::CInArchive::Open
; _this$ = ecx
; Line 324
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 325
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+112], 0
	mov	DWORD PTR [eax+116], 0
; Line 326
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CInArchive@N7z@NArchive@@QAEXXZ	; NArchive::N7z::CInArchive::Close
; Line 327
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	mov	esi, esp
	push	ecx
	push	1
	push	0
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73422[ebp], eax
	cmp	DWORD PTR ___result__$73422[ebp], 0
	je	SHORT $LN4@Open
	mov	eax, DWORD PTR ___result__$73422[ebp]
	jmp	$LN5@Open
$LN4@Open:
; Line 328
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 72					; 00000048H
	mov	esi, esp
	push	eax
	push	2
	push	0
	push	0
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73424[ebp], eax
	cmp	DWORD PTR ___result__$73424[ebp], 0
	je	SHORT $LN3@Open
	mov	eax, DWORD PTR ___result__$73424[ebp]
	jmp	SHORT $LN5@Open
$LN3@Open:
; Line 329
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR [edx+64]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$73426[ebp], eax
	cmp	DWORD PTR ___result__$73426[ebp], 0
	je	SHORT $LN2@Open
	mov	eax, DWORD PTR ___result__$73426[ebp]
	jmp	SHORT $LN5@Open
$LN2@Open:
; Line 330
	mov	eax, DWORD PTR _searchHeaderSizeLimit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindAndReadSignature@CInArchive@N7z@NArchive@@AAEJPAUIInStream@@PB_K@Z ; NArchive::N7z::CInArchive::FindAndReadSignature
	mov	DWORD PTR ___result__$73428[ebp], eax
	cmp	DWORD PTR ___result__$73428[ebp], 0
	je	SHORT $LN1@Open
	mov	eax, DWORD PTR ___result__$73428[ebp]
	jmp	SHORT $LN5@Open
$LN1@Open:
; Line 331
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 332
	xor	eax, eax
$LN5@Open:
; Line 333
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Open@CInArchive@N7z@NArchive@@QAEJPAUIInStream@@PB_K@Z ENDP ; NArchive::N7z::CInArchive::Open
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ	; CMyComPtr<IInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CInArchive@N7z@NArchive@@QAEXXZ PROC		; NArchive::N7z::CInArchive::Close
; _this$ = ecx
; Line 336
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 337
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 338
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release
; Line 339
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+60], 0
; Line 340
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CInArchive@N7z@NArchive@@QAEXXZ ENDP		; NArchive::N7z::CInArchive::Close
_TEXT	ENDS
PUBLIC	?SkipData@CInArchive@N7z@NArchive@@AAEXXZ	; NArchive::N7z::CInArchive::SkipData
PUBLIC	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ	; NArchive::N7z::CInArchive::ReadID
PUBLIC	?ReadArchiveProperties@CInArchive@N7z@NArchive@@AAEXAAUCInArchiveInfo@23@@Z ; NArchive::N7z::CInArchive::ReadArchiveProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv73 = -12						; size = 8
_this$ = -4						; size = 4
___formal$ = 8						; size = 4
?ReadArchiveProperties@CInArchive@N7z@NArchive@@AAEXAAUCInArchiveInfo@23@@Z PROC ; NArchive::N7z::CInArchive::ReadArchiveProperties
; _this$ = ecx
; Line 343
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN3@ReadArchiv:
; Line 346
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR tv73[ebp], eax
	mov	DWORD PTR tv73[ebp+4], edx
	mov	eax, DWORD PTR tv73[ebp]
	or	eax, DWORD PTR tv73[ebp+4]
	jne	SHORT $LN1@ReadArchiv
; Line 347
	jmp	SHORT $LN4@ReadArchiv
$LN1@ReadArchiv:
; Line 348
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkipData@CInArchive@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CInArchive::SkipData
; Line 349
	jmp	SHORT $LN3@ReadArchiv
$LN4@ReadArchiv:
; Line 350
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReadArchiveProperties@CInArchive@N7z@NArchive@@AAEXAAUCInArchiveInfo@23@@Z ENDP ; NArchive::N7z::CInArchive::ReadArchiveProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ PROC		; NArchive::N7z::CInArchive::ReadID, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 363
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ReadNumber@CInByte2@N7z@NArchive@@QAE_KXZ ; NArchive::N7z::CInByte2::ReadNumber
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ENDP		; NArchive::N7z::CInArchive::ReadID
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SkipData@CInArchive@N7z@NArchive@@AAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SkipData@CInArchive@N7z@NArchive@@AAEXXZ PROC		; NArchive::N7z::CInArchive::SkipData, COMDAT
; _this$ = ecx
; Line 367
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?SkipData@CInByte2@N7z@NArchive@@QAEXXZ	; NArchive::N7z::CInByte2::SkipData
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?SkipData@CInArchive@N7z@NArchive@@AAEXXZ ENDP		; NArchive::N7z::CInArchive::SkipData
_TEXT	ENDS
PUBLIC	??B?$CObjArray2@I@@QAEPAIXZ			; CObjArray2<unsigned int>::operator unsigned int *
PUBLIC	?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z ; NArchive::N7z::CFolder::FindBond_for_PackStream
PUBLIC	?SetSize@?$CObjArray2@I@@QAEXI@Z		; CObjArray2<unsigned int>::SetSize
PUBLIC	??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *
PUBLIC	?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z ; CObjArray2<NArchive::N7z::CBond>::SetSize
PUBLIC	?Free@?$CBuffer@E@@QAEXXZ			; CBuffer<unsigned char>::Free
PUBLIC	??B?$CBuffer@E@@QAEPAEXZ			; CBuffer<unsigned char>::operator unsigned char *
PUBLIC	?Alloc@?$CBuffer@E@@QAEXI@Z			; CBuffer<unsigned char>::Alloc
PUBLIC	?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CInByte2::SkipDataNoCheck
PUBLIC	?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ		; NArchive::N7z::CInByte2::GetPtr
PUBLIC	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *
PUBLIC	?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z ; CObjArray2<NArchive::N7z::CCoderInfo>::SetSize
PUBLIC	?ParseFolder@CInByte2@N7z@NArchive@@QAEXAAUCFolder@23@@Z ; NArchive::N7z::CInByte2::ParseFolder
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_numPackStreams$ = -60					; size = 4
_bp$73477 = -56						; size = 4
_numBonds$ = -52					; size = 4
_propsSize$73468 = -48					; size = 4
_j$73461 = -44						; size = 4
_id$73460 = -40						; size = 8
_longID$73459 = -32					; size = 4
_idSize$73456 = -28					; size = 4
_mainByte$73454 = -21					; size = 1
_coder$73453 = -20					; size = 4
_i$ = -16						; size = 4
_numInStreams$ = -12					; size = 4
_numCoders$ = -8					; size = 4
_this$ = -4						; size = 4
_folder$ = 8						; size = 4
?ParseFolder@CInByte2@N7z@NArchive@@QAEXAAUCFolder@23@@Z PROC ; NArchive::N7z::CInByte2::ParseFolder
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.cpp
; Line 355
	push	ebp
	mov	ebp, esp
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 356
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ	; NArchive::N7z::CInByte2::ReadNum
	mov	DWORD PTR _numCoders$[ebp], eax
; Line 358
	cmp	DWORD PTR _numCoders$[ebp], 0
	jne	SHORT $LN28@ParseFolde
; Line 359
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN28@ParseFolde:
; Line 361
	mov	eax, DWORD PTR _numCoders$[ebp]
	push	eax
	mov	ecx, DWORD PTR _folder$[ebp]
	call	?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z ; CObjArray2<NArchive::N7z::CCoderInfo>::SetSize
; Line 363
	mov	DWORD PTR _numInStreams$[ebp], 0
; Line 365
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN27@ParseFolde
$LN26@ParseFolde:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN27@ParseFolde:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numCoders$[ebp]
	jae	$LN25@ParseFolde
; Line 367
	mov	ecx, DWORD PTR _folder$[ebp]
	call	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	eax, ecx
	mov	DWORD PTR _coder$73453[ebp], eax
; Line 369
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ	; NArchive::N7z::CInByte2::ReadByte
	mov	BYTE PTR _mainByte$73454[ebp], al
; Line 370
	movzx	edx, BYTE PTR _mainByte$73454[ebp]
	and	edx, 192				; 000000c0H
	je	SHORT $LN24@ParseFolde
; Line 371
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN24@ParseFolde:
; Line 372
	movzx	eax, BYTE PTR _mainByte$73454[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _idSize$73456[ebp], eax
; Line 373
	cmp	DWORD PTR _idSize$73456[ebp], 8
	ja	SHORT $LN22@ParseFolde
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetRem@CInByte2@N7z@NArchive@@QBEIXZ	; NArchive::N7z::CInByte2::GetRem
	cmp	DWORD PTR _idSize$73456[ebp], eax
	jbe	SHORT $LN23@ParseFolde
$LN22@ParseFolde:
; Line 374
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN23@ParseFolde:
; Line 375
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ	; NArchive::N7z::CInByte2::GetPtr
	mov	DWORD PTR _longID$73459[ebp], eax
; Line 376
	mov	DWORD PTR _id$73460[ebp], 0
	mov	DWORD PTR _id$73460[ebp+4], 0
; Line 377
	mov	DWORD PTR _j$73461[ebp], 0
	jmp	SHORT $LN21@ParseFolde
$LN20@ParseFolde:
	mov	ecx, DWORD PTR _j$73461[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$73461[ebp], ecx
$LN21@ParseFolde:
	mov	edx, DWORD PTR _j$73461[ebp]
	cmp	edx, DWORD PTR _idSize$73456[ebp]
	jae	SHORT $LN19@ParseFolde
; Line 378
	mov	eax, DWORD PTR _id$73460[ebp]
	mov	edx, DWORD PTR _id$73460[ebp+4]
	mov	cl, 8
	call	__allshl
	mov	ecx, eax
	mov	esi, edx
	mov	edx, DWORD PTR _longID$73459[ebp]
	add	edx, DWORD PTR _j$73461[ebp]
	movzx	eax, BYTE PTR [edx]
	cdq
	or	ecx, eax
	or	esi, edx
	mov	DWORD PTR _id$73460[ebp], ecx
	mov	DWORD PTR _id$73460[ebp+4], esi
	jmp	SHORT $LN20@ParseFolde
$LN19@ParseFolde:
; Line 379
	mov	eax, DWORD PTR _idSize$73456[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CInByte2::SkipDataNoCheck
; Line 380
	mov	edx, DWORD PTR _coder$73453[ebp]
	mov	eax, DWORD PTR _id$73460[ebp]
	mov	DWORD PTR [edx], eax
	mov	ecx, DWORD PTR _id$73460[ebp+4]
	mov	DWORD PTR [edx+4], ecx
; Line 382
	movzx	edx, BYTE PTR _mainByte$73454[ebp]
	and	edx, 16					; 00000010H
	je	SHORT $LN18@ParseFolde
; Line 384
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ	; NArchive::N7z::CInByte2::ReadNum
	mov	ecx, DWORD PTR _coder$73453[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 385
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ	; NArchive::N7z::CInByte2::ReadNum
; Line 387
	jmp	SHORT $LN17@ParseFolde
$LN18@ParseFolde:
; Line 389
	mov	edx, DWORD PTR _coder$73453[ebp]
	mov	DWORD PTR [edx+16], 1
$LN17@ParseFolde:
; Line 392
	movzx	eax, BYTE PTR _mainByte$73454[ebp]
	and	eax, 32					; 00000020H
	je	SHORT $LN16@ParseFolde
; Line 394
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ	; NArchive::N7z::CInByte2::ReadNum
	mov	DWORD PTR _propsSize$73468[ebp], eax
; Line 395
	mov	ecx, DWORD PTR _propsSize$73468[ebp]
	push	ecx
	mov	ecx, DWORD PTR _coder$73453[ebp]
	add	ecx, 8
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 396
	mov	edx, DWORD PTR _propsSize$73468[ebp]
	push	edx
	mov	ecx, DWORD PTR _coder$73453[ebp]
	add	ecx, 8
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBytes@CInByte2@N7z@NArchive@@QAEXPAEI@Z ; NArchive::N7z::CInByte2::ReadBytes
; Line 398
	jmp	SHORT $LN15@ParseFolde
$LN16@ParseFolde:
; Line 399
	mov	ecx, DWORD PTR _coder$73453[ebp]
	add	ecx, 8
	call	?Free@?$CBuffer@E@@QAEXXZ		; CBuffer<unsigned char>::Free
$LN15@ParseFolde:
; Line 401
	mov	eax, DWORD PTR _coder$73453[ebp]
	mov	ecx, DWORD PTR _numInStreams$[ebp]
	add	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR _numInStreams$[ebp], ecx
; Line 402
	jmp	$LN26@ParseFolde
$LN25@ParseFolde:
; Line 404
	mov	edx, DWORD PTR _numCoders$[ebp]
	sub	edx, 1
	mov	DWORD PTR _numBonds$[ebp], edx
; Line 405
	mov	eax, DWORD PTR _numBonds$[ebp]
	push	eax
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 8
	call	?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z ; CObjArray2<NArchive::N7z::CBond>::SetSize
; Line 406
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN14@ParseFolde
$LN13@ParseFolde:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN14@ParseFolde:
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numBonds$[ebp]
	jae	SHORT $LN12@ParseFolde
; Line 408
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 8
	call	??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _bp$73477[ebp], edx
; Line 409
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ	; NArchive::N7z::CInByte2::ReadNum
	mov	ecx, DWORD PTR _bp$73477[ebp]
	mov	DWORD PTR [ecx], eax
; Line 410
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ	; NArchive::N7z::CInByte2::ReadNum
	mov	edx, DWORD PTR _bp$73477[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 411
	jmp	SHORT $LN13@ParseFolde
$LN12@ParseFolde:
; Line 413
	mov	eax, DWORD PTR _numInStreams$[ebp]
	cmp	eax, DWORD PTR _numBonds$[ebp]
	jae	SHORT $LN11@ParseFolde
; Line 414
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN11@ParseFolde:
; Line 415
	mov	ecx, DWORD PTR _numInStreams$[ebp]
	sub	ecx, DWORD PTR _numBonds$[ebp]
	mov	DWORD PTR _numPackStreams$[ebp], ecx
; Line 416
	mov	edx, DWORD PTR _numPackStreams$[ebp]
	push	edx
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 16					; 00000010H
	call	?SetSize@?$CObjArray2@I@@QAEXI@Z	; CObjArray2<unsigned int>::SetSize
; Line 418
	cmp	DWORD PTR _numPackStreams$[ebp], 1
	jne	SHORT $LN10@ParseFolde
; Line 420
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@ParseFolde
$LN8@ParseFolde:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@ParseFolde:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numInStreams$[ebp]
	jae	SHORT $LN7@ParseFolde
; Line 421
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _folder$[ebp]
	call	?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z ; NArchive::N7z::CFolder::FindBond_for_PackStream
	test	eax, eax
	jge	SHORT $LN6@ParseFolde
; Line 423
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 16					; 00000010H
	call	??B?$CObjArray2@I@@QAEPAIXZ		; CObjArray2<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 424
	jmp	SHORT $LN7@ParseFolde
$LN6@ParseFolde:
; Line 425
	jmp	SHORT $LN8@ParseFolde
$LN7@ParseFolde:
; Line 426
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR _numInStreams$[ebp]
	jne	SHORT $LN5@ParseFolde
; Line 427
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN5@ParseFolde:
; Line 429
	jmp	SHORT $LN29@ParseFolde
$LN10@ParseFolde:
; Line 430
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@ParseFolde
$LN2@ParseFolde:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@ParseFolde:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _numPackStreams$[ebp]
	jae	SHORT $LN29@ParseFolde
; Line 431
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ	; NArchive::N7z::CInByte2::ReadNum
	mov	esi, eax
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 16					; 00000010H
	call	??B?$CObjArray2@I@@QAEPAIXZ		; CObjArray2<unsigned int>::operator unsigned int *
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*4], esi
	jmp	SHORT $LN2@ParseFolde
$LN29@ParseFolde:
; Line 432
	pop	edi
	pop	esi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ParseFolder@CInByte2@N7z@NArchive@@QAEXAAUCFolder@23@@Z ENDP ; NArchive::N7z::CInByte2::ParseFolder
_TEXT	ENDS
PUBLIC	??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *
PUBLIC	?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CBond>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z
_TEXT	SEGMENT
_i$72395 = -8						; size = 4
_this$ = -4						; size = 4
_packStream$ = 8					; size = 4
?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z PROC ; NArchive::N7z::CFolder::FindBond_for_PackStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 57
	mov	DWORD PTR _i$72395[ebp], 0
	jmp	SHORT $LN4@FindBond_f
$LN3@FindBond_f:
	mov	eax, DWORD PTR _i$72395[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72395[ebp], eax
$LN4@FindBond_f:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CBond>::Size
	cmp	DWORD PTR _i$72395[ebp], eax
	jae	SHORT $LN2@FindBond_f
; Line 58
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *
	mov	ecx, DWORD PTR _i$72395[ebp]
	mov	edx, DWORD PTR [eax+ecx*8]
	cmp	edx, DWORD PTR _packStream$[ebp]
	jne	SHORT $LN1@FindBond_f
; Line 59
	mov	eax, DWORD PTR _i$72395[ebp]
	jmp	SHORT $LN5@FindBond_f
$LN1@FindBond_f:
; Line 60
	jmp	SHORT $LN3@FindBond_f
$LN2@FindBond_f:
	or	eax, -1
$LN5@FindBond_f:
; Line 61
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?FindBond_for_PackStream@CFolder@N7z@NArchive@@QBEHI@Z ENDP ; NArchive::N7z::CFolder::FindBond_for_PackStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ PROC		; NArchive::N7z::CInByte2::GetPtr, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 297
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ ENDP		; NArchive::N7z::CInByte2::GetPtr
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_size$ = 8						; size = 8
?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z PROC	; NArchive::N7z::CInByte2::SkipDataNoCheck, COMDAT
; _this$ = ecx
; Line 306
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+8]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	esp, ebp
	pop	ebp
	ret	8
?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z ENDP	; NArchive::N7z::CInByte2::SkipDataNoCheck
_TEXT	ENDS
PUBLIC	__TI1H
PUBLIC	??B?$CObjArray@I@@QBEPBIXZ			; CObjArray<unsigned int>::operator unsigned int const *
PUBLIC	?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z ; NArchive::N7z::CFolders::ParseFolderInfo
PUBLIC	__CTA1H
PUBLIC	__CT??_R0H@84
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
;	COMDAT ??_R0H@8
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.cpp
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T75341 = -32						; size = 4
_inByte$ = -24						; size = 12
_startPos$ = -8						; size = 4
_this$ = -4						; size = 4
_folderIndex$ = 8					; size = 4
_folder$ = 12						; size = 4
?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z PROC ; NArchive::N7z::CFolders::ParseFolderInfo
; _this$ = ecx
; Line 435
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 436
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _startPos$[ebp], edx
; Line 438
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+4]
	sub	edx, DWORD PTR _startPos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	add	eax, DWORD PTR _startPos$[ebp]
	push	eax
	lea	ecx, DWORD PTR _inByte$[ebp]
	call	?Init@CInByte2@N7z@NArchive@@QAEXPBEI@Z	; NArchive::N7z::CInByte2::Init
; Line 439
	mov	eax, DWORD PTR _folder$[ebp]
	push	eax
	lea	ecx, DWORD PTR _inByte$[ebp]
	call	?ParseFolder@CInByte2@N7z@NArchive@@QAEXAAUCFolder@23@@Z ; NArchive::N7z::CInByte2::ParseFolder
; Line 440
	lea	ecx, DWORD PTR _inByte$[ebp]
	call	?GetRem@CInByte2@N7z@NArchive@@QBEIXZ	; NArchive::N7z::CInByte2::GetRem
	test	eax, eax
	je	SHORT $LN3@ParseFolde@2
; Line 441
	mov	DWORD PTR $T75341[ebp], 20120424	; 01330368H
	push	OFFSET __TI1H
	lea	ecx, DWORD PTR $T75341[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN3@ParseFolde@2:
; Line 442
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@ParseFolde@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN6@ParseFolde@2:
	DD	1
	DD	$LN5@ParseFolde@2
$LN5@ParseFolde@2:
	DD	-24					; ffffffe8H
	DD	12					; 0000000cH
	DD	$LN4@ParseFolde@2
$LN4@ParseFolde@2:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	66					; 00000042H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	0
?ParseFolderInfo@CFolders@N7z@NArchive@@QBEXIAAUCFolder@23@@Z ENDP ; NArchive::N7z::CFolders::ParseFolderInfo
_TEXT	ENDS
PUBLIC	?ReleaseBuf_SetLen@UString@@QAEXI@Z		; UString::ReleaseBuf_SetLen
PUBLIC	_wmemcpy
PUBLIC	?GetBuf@UString@@QAEPA_WI@Z			; UString::GetBuf
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
PUBLIC	?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z ; NArchive::N7z::CDatabase::GetPath
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -20						; size = 4
_s$ = -16						; size = 4
_size$ = -12						; size = 4
_offset$ = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_path$ = 12						; size = 4
?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z PROC ; NArchive::N7z::CDatabase::GetPath
; _this$ = ecx
; Line 446
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 447
	mov	ecx, DWORD PTR _path$[ebp]
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 448
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	test	eax, eax
	je	SHORT $LN2@GetPath
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	test	eax, eax
	jne	SHORT $LN3@GetPath
$LN2@GetPath:
; Line 449
	jmp	$LN4@GetPath
$LN3@GetPath:
; Line 451
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _offset$[ebp], edx
; Line 452
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+4]
	sub	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _size$[ebp], edx
; Line 454
	cmp	DWORD PTR _size$[ebp], 268435456	; 10000000H
	jb	SHORT $LN1@GetPath
; Line 455
	jmp	SHORT $LN4@GetPath
$LN1@GetPath:
; Line 457
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _path$[ebp]
	call	?GetBuf@UString@@QAEPA_WI@Z		; UString::GetBuf
	mov	DWORD PTR _s$[ebp], eax
; Line 459
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	mov	ecx, DWORD PTR _offset$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _p$[ebp], edx
; Line 463
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 476
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _path$[ebp]
	call	?ReleaseBuf_SetLen@UString@@QAEXI@Z	; UString::ReleaseBuf_SetLen
$LN4@GetPath:
; Line 477
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetPath@CDatabase@N7z@NArchive@@QBEXIAAVUString@@@Z ENDP ; NArchive::N7z::CDatabase::GetPath
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\wchar.h
; Line 1210
	push	ebp
	mov	ebp, esp
; Line 1213
	mov	eax, DWORD PTR __N$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR __S2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __S1$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1215
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_wmemcpy ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
_TEXT	ENDS
EXTRN	?ReAlloc2@UString@@AAEXI@Z:PROC			; UString::ReAlloc2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetBuf@UString@@QAEPA_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minLen$ = 8						; size = 4
?GetBuf@UString@@QAEPA_WI@Z PROC			; UString::GetBuf, COMDAT
; _this$ = ecx
; Line 485
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 486
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _minLen$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN1@GetBuf
; Line 487
	mov	edx, DWORD PTR _minLen$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReAlloc2@UString@@AAEXI@Z		; UString::ReAlloc2
$LN1@GetBuf:
; Line 488
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 489
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBuf@UString@@QAEPA_WI@Z ENDP			; UString::GetBuf
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReleaseBuf_SetLen@UString@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newLen$ = 8						; size = 4
?ReleaseBuf_SetLen@UString@@QAEXI@Z PROC		; UString::ReleaseBuf_SetLen, COMDAT
; _this$ = ecx
; Line 500
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newLen$[ebp]
	mov	DWORD PTR [eax+4], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?ReleaseBuf_SetLen@UString@@QAEXI@Z ENDP		; UString::ReleaseBuf_SetLen
_TEXT	ENDS
PUBLIC	?GetPath_Prop@CDatabase@N7z@NArchive@@QBEJIPAUtagPROPVARIANT@@@Z ; NArchive::N7z::CDatabase::GetPath_Prop
EXTRN	?PropVarEm_Alloc_Bstr@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@I@Z:PROC ; NWindows::NCOM::PropVarEm_Alloc_Bstr
EXTRN	?PropVariant_Clear@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@@Z:PROC ; NWindows::NCOM::PropVariant_Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$73541 = -32						; size = 2
_i$73537 = -28						; size = 4
_p$ = -24						; size = 4
_s$ = -20						; size = 4
___result__$73531 = -16					; size = 4
_size$ = -12						; size = 4
_offset$ = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_path$ = 12						; size = 4
?GetPath_Prop@CDatabase@N7z@NArchive@@QBEJIPAUtagPROPVARIANT@@@Z PROC ; NArchive::N7z::CDatabase::GetPath_Prop
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.cpp
; Line 480
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 481
	mov	eax, DWORD PTR _path$[ebp]
	push	eax
	call	?PropVariant_Clear@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::PropVariant_Clear
; Line 482
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	test	eax, eax
	je	SHORT $LN7@GetPath_Pr
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	test	eax, eax
	jne	SHORT $LN8@GetPath_Pr
$LN7@GetPath_Pr:
; Line 483
	xor	eax, eax
	jmp	$LN9@GetPath_Pr
$LN8@GetPath_Pr:
; Line 485
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _offset$[ebp], edx
; Line 486
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4+4]
	sub	edx, DWORD PTR _offset$[ebp]
	mov	DWORD PTR _size$[ebp], edx
; Line 488
	cmp	DWORD PTR _size$[ebp], 16384		; 00004000H
	jb	SHORT $LN6@GetPath_Pr
; Line 489
	xor	eax, eax
	jmp	$LN9@GetPath_Pr
$LN6@GetPath_Pr:
; Line 491
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _path$[ebp]
	push	ecx
	call	?PropVarEm_Alloc_Bstr@NCOM@NWindows@@YGJPAUtagPROPVARIANT@@I@Z ; NWindows::NCOM::PropVarEm_Alloc_Bstr
	mov	DWORD PTR ___result__$73531[ebp], eax
	cmp	DWORD PTR ___result__$73531[ebp], 0
	je	SHORT $LN5@GetPath_Pr
	mov	eax, DWORD PTR ___result__$73531[ebp]
	jmp	SHORT $LN9@GetPath_Pr
$LN5@GetPath_Pr:
; Line 492
	mov	edx, DWORD PTR _path$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR _s$[ebp], eax
; Line 494
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	mov	ecx, DWORD PTR _offset$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	mov	DWORD PTR _p$[ebp], edx
; Line 496
	mov	DWORD PTR _i$73537[ebp], 0
	jmp	SHORT $LN4@GetPath_Pr
$LN3@GetPath_Pr:
	mov	eax, DWORD PTR _i$73537[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73537[ebp], eax
$LN4@GetPath_Pr:
	mov	ecx, DWORD PTR _i$73537[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN2@GetPath_Pr
; Line 498
	mov	edx, DWORD PTR _p$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR _c$73541[ebp], ax
; Line 499
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
; Line 501
	movzx	edx, WORD PTR _c$73541[ebp]
	cmp	edx, 47					; 0000002fH
	jne	SHORT $LN1@GetPath_Pr
; Line 502
	mov	eax, 92					; 0000005cH
	mov	WORD PTR _c$73541[ebp], ax
$LN1@GetPath_Pr:
; Line 504
	mov	ecx, DWORD PTR _s$[ebp]
	mov	dx, WORD PTR _c$73541[ebp]
	mov	WORD PTR [ecx], dx
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, 2
	mov	DWORD PTR _s$[ebp], eax
; Line 505
	jmp	SHORT $LN3@GetPath_Pr
$LN2@GetPath_Pr:
; Line 507
	xor	eax, eax
$LN9@GetPath_Pr:
; Line 552
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetPath_Prop@CDatabase@N7z@NArchive@@QBEJIPAUtagPROPVARIANT@@@Z ENDP ; NArchive::N7z::CDatabase::GetPath_Prop
_TEXT	ENDS
PUBLIC	?WaitId@CInArchive@N7z@NArchive@@AAEX_K@Z	; NArchive::N7z::CInArchive::WaitId
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_type$73553 = -12					; size = 8
_this$ = -4						; size = 4
_id$ = 8						; size = 8
?WaitId@CInArchive@N7z@NArchive@@AAEX_K@Z PROC		; NArchive::N7z::CInArchive::WaitId
; _this$ = ecx
; Line 555
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN4@WaitId:
; Line 558
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$73553[ebp], eax
	mov	DWORD PTR _type$73553[ebp+4], edx
; Line 559
	mov	eax, DWORD PTR _type$73553[ebp]
	cmp	eax, DWORD PTR _id$[ebp]
	jne	SHORT $LN2@WaitId
	mov	ecx, DWORD PTR _type$73553[ebp+4]
	cmp	ecx, DWORD PTR _id$[ebp+4]
	jne	SHORT $LN2@WaitId
; Line 560
	jmp	SHORT $LN5@WaitId
$LN2@WaitId:
; Line 561
	mov	edx, DWORD PTR _type$73553[ebp]
	or	edx, DWORD PTR _type$73553[ebp+4]
	jne	SHORT $LN1@WaitId
; Line 562
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN1@WaitId:
; Line 563
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkipData@CInArchive@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CInArchive::SkipData
; Line 564
	jmp	SHORT $LN4@WaitId
$LN5@WaitId:
; Line 565
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?WaitId@CInArchive@N7z@NArchive@@AAEX_K@Z ENDP		; NArchive::N7z::CInArchive::WaitId
_TEXT	ENDS
PUBLIC	?ReadUInt32@CInArchive@N7z@NArchive@@AAEIXZ	; NArchive::N7z::CInArchive::ReadUInt32
PUBLIC	??A?$CRecordVector@_N@@QAEAA_NI@Z		; CRecordVector<bool>::operator[]
PUBLIC	??A?$CRecordVector@I@@QAEAAII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z	; CRecordVector<unsigned int>::ClearAndSetSize
PUBLIC	?ReadBoolVector2@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector2
PUBLIC	?ReadHashDigests@CInArchive@N7z@NArchive@@AAEXIAAUCUInt32DefVector@23@@Z ; NArchive::N7z::CInArchive::ReadHashDigests
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_crc$73567 = -20					; size = 4
_i$73563 = -16						; size = 4
_defs$ = -12						; size = 4
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_numItems$ = 8						; size = 4
_crcs$ = 12						; size = 4
?ReadHashDigests@CInArchive@N7z@NArchive@@AAEXIAAUCUInt32DefVector@23@@Z PROC ; NArchive::N7z::CInArchive::ReadHashDigests
; _this$ = ecx
; Line 568
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 569
	mov	eax, DWORD PTR _crcs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numItems$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBoolVector2@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector2
; Line 570
	mov	edx, DWORD PTR _numItems$[ebp]
	push	edx
	mov	ecx, DWORD PTR _crcs$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<unsigned int>::ClearAndSetSize
; Line 571
	push	0
	mov	ecx, DWORD PTR _crcs$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	DWORD PTR _p$[ebp], eax
; Line 572
	push	0
	mov	ecx, DWORD PTR _crcs$[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	DWORD PTR _defs$[ebp], eax
; Line 573
	mov	DWORD PTR _i$73563[ebp], 0
	jmp	SHORT $LN4@ReadHashDi
$LN3@ReadHashDi:
	mov	eax, DWORD PTR _i$73563[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73563[ebp], eax
$LN4@ReadHashDi:
	mov	ecx, DWORD PTR _i$73563[ebp]
	cmp	ecx, DWORD PTR _numItems$[ebp]
	jae	SHORT $LN5@ReadHashDi
; Line 575
	mov	DWORD PTR _crc$73567[ebp], 0
; Line 576
	mov	edx, DWORD PTR _defs$[ebp]
	add	edx, DWORD PTR _i$73563[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN1@ReadHashDi
; Line 577
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadUInt32
	mov	DWORD PTR _crc$73567[ebp], eax
$LN1@ReadHashDi:
; Line 578
	mov	ecx, DWORD PTR _i$73563[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _crc$73567[ebp]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 579
	jmp	SHORT $LN3@ReadHashDi
$LN5@ReadHashDi:
; Line 580
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ReadHashDigests@CInArchive@N7z@NArchive@@AAEXIAAUCUInt32DefVector@23@@Z ENDP ; NArchive::N7z::CInArchive::ReadHashDigests
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReadUInt32@CInArchive@N7z@NArchive@@AAEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReadUInt32@CInArchive@N7z@NArchive@@AAEIXZ PROC	; NArchive::N7z::CInArchive::ReadUInt32, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 364
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ReadUInt32@CInByte2@N7z@NArchive@@QAEIXZ ; NArchive::N7z::CInByte2::ReadUInt32
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadUInt32@CInArchive@N7z@NArchive@@AAEIXZ ENDP	; NArchive::N7z::CInArchive::ReadUInt32
_TEXT	ENDS
PUBLIC	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector
PUBLIC	??0CUInt32DefVector@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CUInt32DefVector::CUInt32DefVector
PUBLIC	?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ	; NArchive::N7z::CInArchive::ReadNumber
PUBLIC	??B?$CObjArray@_K@@QAEPA_KXZ			; CObjArray<unsigned __int64>::operator unsigned __int64 *
PUBLIC	?Alloc@?$CObjArray@_K@@QAEXI@Z			; CObjArray<unsigned __int64>::Alloc
PUBLIC	?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z ; NArchive::N7z::CInArchive::ReadPackInfo
xdata$x	SEGMENT
__unwindtable$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z$0
__ehfuncinfo$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_PackCRCs$73587 = -76					; size = 24
_type$ = -48						; size = 8
_packSize$73579 = -40					; size = 8
_i$73575 = -32						; size = 4
_sum$ = -28						; size = 8
_numPackStreams$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_f$ = 8							; size = 4
?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z PROC ; NArchive::N7z::CInArchive::ReadPackInfo
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.cpp
; Line 586
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 587
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadNum
	mov	DWORD PTR _numPackStreams$[ebp], eax
; Line 589
	push	0
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WaitId@CInArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::CInArchive::WaitId
; Line 590
	mov	eax, DWORD PTR _numPackStreams$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _f$[ebp]
	add	ecx, 8
	call	?Alloc@?$CObjArray@_K@@QAEXI@Z		; CObjArray<unsigned __int64>::Alloc
; Line 591
	mov	ecx, DWORD PTR _f$[ebp]
	mov	edx, DWORD PTR _numPackStreams$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 592
	mov	DWORD PTR _sum$[ebp], 0
	mov	DWORD PTR _sum$[ebp+4], 0
; Line 593
	mov	DWORD PTR _i$73575[ebp], 0
	jmp	SHORT $LN8@ReadPackIn
$LN7@ReadPackIn:
	mov	eax, DWORD PTR _i$73575[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73575[ebp], eax
$LN8@ReadPackIn:
	mov	ecx, DWORD PTR _i$73575[ebp]
	cmp	ecx, DWORD PTR _numPackStreams$[ebp]
	jae	SHORT $LN6@ReadPackIn
; Line 595
	mov	ecx, DWORD PTR _f$[ebp]
	add	ecx, 8
	call	??B?$CObjArray@_K@@QAEPA_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 *
	mov	edx, DWORD PTR _i$73575[ebp]
	mov	ecx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [eax+edx*8], ecx
	mov	ecx, DWORD PTR _sum$[ebp+4]
	mov	DWORD PTR [eax+edx*8+4], ecx
; Line 596
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadNumber
	mov	DWORD PTR _packSize$73579[ebp], eax
	mov	DWORD PTR _packSize$73579[ebp+4], edx
; Line 597
	mov	edx, DWORD PTR _sum$[ebp]
	add	edx, DWORD PTR _packSize$73579[ebp]
	mov	eax, DWORD PTR _sum$[ebp+4]
	adc	eax, DWORD PTR _packSize$73579[ebp+4]
	mov	DWORD PTR _sum$[ebp], edx
	mov	DWORD PTR _sum$[ebp+4], eax
; Line 598
	mov	ecx, DWORD PTR _sum$[ebp+4]
	cmp	ecx, DWORD PTR _packSize$73579[ebp+4]
	ja	SHORT $LN5@ReadPackIn
	jb	SHORT $LN13@ReadPackIn
	mov	edx, DWORD PTR _sum$[ebp]
	cmp	edx, DWORD PTR _packSize$73579[ebp]
	jae	SHORT $LN5@ReadPackIn
$LN13@ReadPackIn:
; Line 599
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN5@ReadPackIn:
; Line 600
	jmp	SHORT $LN7@ReadPackIn
$LN6@ReadPackIn:
; Line 601
	mov	ecx, DWORD PTR _f$[ebp]
	add	ecx, 8
	call	??B?$CObjArray@_K@@QAEPA_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 *
	mov	ecx, DWORD PTR _numPackStreams$[ebp]
	mov	edx, DWORD PTR _sum$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _sum$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
$LN4@ReadPackIn:
; Line 606
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$[ebp], eax
	mov	DWORD PTR _type$[ebp+4], edx
; Line 607
	mov	eax, DWORD PTR _type$[ebp]
	or	eax, DWORD PTR _type$[ebp+4]
	jne	SHORT $LN2@ReadPackIn
; Line 608
	jmp	SHORT $LN9@ReadPackIn
$LN2@ReadPackIn:
; Line 609
	cmp	DWORD PTR _type$[ebp], 10		; 0000000aH
	jne	SHORT $LN1@ReadPackIn
	cmp	DWORD PTR _type$[ebp+4], 0
	jne	SHORT $LN1@ReadPackIn
; Line 611
	lea	ecx, DWORD PTR _PackCRCs$73587[ebp]
	call	??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 612
	lea	ecx, DWORD PTR _PackCRCs$73587[ebp]
	push	ecx
	mov	edx, DWORD PTR _numPackStreams$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadHashDigests@CInArchive@N7z@NArchive@@AAEXIAAUCUInt32DefVector@23@@Z ; NArchive::N7z::CInArchive::ReadHashDigests
; Line 613
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _PackCRCs$73587[ebp]
	call	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	jmp	SHORT $LN4@ReadPackIn
$LN1@ReadPackIn:
; Line 615
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkipData@CInArchive@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CInArchive::SkipData
; Line 616
	jmp	SHORT $LN4@ReadPackIn
$LN9@ReadPackIn:
; Line 617
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN17@ReadPackIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN17@ReadPackIn:
	DD	1
	DD	$LN16@ReadPackIn
$LN16@ReadPackIn:
	DD	-76					; ffffffb4H
	DD	24					; 00000018H
	DD	$LN14@ReadPackIn
$LN14@ReadPackIn:
	DB	80					; 00000050H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	67					; 00000043H
	DB	82					; 00000052H
	DB	67					; 00000043H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z$0:
	lea	ecx, DWORD PTR _PackCRCs$73587[ebp]
	jmp	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
__ehhandler$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z ENDP ; NArchive::N7z::CInArchive::ReadPackInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ PROC	; NArchive::N7z::CInArchive::ReadNumber, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 361
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ReadNumber@CInByte2@N7z@NArchive@@QAE_KXZ ; NArchive::N7z::CInByte2::ReadNumber
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ ENDP	; NArchive::N7z::CInArchive::ReadNumber
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::~CRecordVector<bool>
PUBLIC	??0?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
PUBLIC	??0?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::CRecordVector<bool>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CUInt32DefVector@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CUInt32DefVector::CUInt32DefVector, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CUInt32DefVector@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CUInt32DefVector::CUInt32DefVector
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CUInt32DefVector@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector
PUBLIC	??1CStreamSwitch@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CStreamSwitch::~CStreamSwitch
PUBLIC	?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z		; CBuffer<unsigned char>::CopyFrom
PUBLIC	?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::AddToUniqueSorted
PUBLIC	?Size@?$CRecordVector@_K@@QBEIXZ		; CRecordVector<unsigned __int64>::Size
PUBLIC	??B?$CObjArray@I@@QAEPAIXZ			; CObjArray<unsigned int>::operator unsigned int *
PUBLIC	?Alloc@?$CObjArray@E@@QAEXI@Z			; CObjArray<unsigned char>::Alloc
PUBLIC	?Alloc@?$CObjArray@I@@QAEXI@Z			; CObjArray<unsigned int>::Alloc
PUBLIC	??0CStreamSwitch@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CStreamSwitch::CStreamSwitch
PUBLIC	?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z ; NArchive::N7z::CInArchive::ReadUnpackInfo
xdata$x	SEGMENT
__unwindtable$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$2
__ehfuncinfo$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_type$73684 = -188					; size = 8
_i$73677 = -180						; size = 4
_dataSize$73676 = -176					; size = 4
_index$73667 = -172					; size = 4
_index$73658 = -168					; size = 4
_numBonds$73653 = -164					; size = 4
_i$73652 = -160						; size = 4
_dicSize$73645 = -156					; size = 4
_v$73641 = -149						; size = 1
_propsSize$73638 = -148					; size = 4
_coderInStreams$73632 = -144				; size = 4
_j$73627 = -140						; size = 4
_id$73626 = -136					; size = 8
_longID$73625 = -128					; size = 4
_idSize$73622 = -124					; size = 4
_mainByte$73620 = -117					; size = 1
_ci$73616 = -116					; size = 4
_numCoders$73613 = -112					; size = 4
_numInStreams$73612 = -108				; size = 4
_numPackStreams$73611 = -104				; size = 4
_indexOfMainStream$73610 = -100				; size = 4
_inByte$73606 = -96					; size = 4
_fo$73605 = -92						; size = 4
_packStreamIndex$73604 = -88				; size = 4
_CoderUsed$73603 = -80					; size = 12
_StreamUsed$73602 = -60					; size = 12
_startBufPtr$73601 = -44				; size = 4
_streamSwitch$73600 = -36				; size = 8
_numCodersOutStreams$ = -24				; size = 4
_numFolders$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dataVector$ = 8					; size = 4
_folders$ = 12						; size = 4
?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z PROC ; NArchive::N7z::CInArchive::ReadUnpackInfo
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.cpp
; Line 622
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 176				; 000000b0H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-188]
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 623
	push	0
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WaitId@CInArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::CInArchive::WaitId
; Line 624
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadNum
	mov	DWORD PTR _numFolders$[ebp], eax
; Line 626
	mov	DWORD PTR _numCodersOutStreams$[ebp], 0
; Line 628
	lea	ecx, DWORD PTR _streamSwitch$73600[ebp]
	call	??0CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::CStreamSwitch
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 629
	mov	eax, DWORD PTR _dataVector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _streamSwitch$73600[ebp]
	call	?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBV?$CObjectVector@V?$CBuffer@E@@@@@Z ; NArchive::N7z::CStreamSwitch::Set
; Line 630
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ	; NArchive::N7z::CInByte2::GetPtr
	mov	DWORD PTR _startBufPtr$73601[ebp], eax
; Line 631
	mov	eax, DWORD PTR _folders$[ebp]
	mov	ecx, DWORD PTR _numFolders$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 633
	mov	edx, DWORD PTR _numFolders$[ebp]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 48					; 00000030H
	call	?Alloc@?$CObjArray@I@@QAEXI@Z		; CObjArray<unsigned int>::Alloc
; Line 634
	mov	eax, DWORD PTR _numFolders$[ebp]
	push	eax
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 52					; 00000034H
	call	?Alloc@?$CObjArray@E@@QAEXI@Z		; CObjArray<unsigned char>::Alloc
; Line 635
	mov	ecx, DWORD PTR _numFolders$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 56					; 00000038H
	call	?Alloc@?$CObjArray@I@@QAEXI@Z		; CObjArray<unsigned int>::Alloc
; Line 636
	mov	edx, DWORD PTR _numFolders$[ebp]
	add	edx, 1
	push	edx
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Alloc@?$CObjArray@I@@QAEXI@Z		; CObjArray<unsigned int>::Alloc
; Line 638
	lea	ecx, DWORD PTR _StreamUsed$73602[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 639
	lea	ecx, DWORD PTR _CoderUsed$73603[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 641
	mov	DWORD PTR _packStreamIndex$73604[ebp], 0
; Line 643
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	mov	DWORD PTR _inByte$73606[ebp], ecx
; Line 645
	mov	DWORD PTR _fo$73605[ebp], 0
	jmp	SHORT $LN54@ReadUnpack
$LN53@ReadUnpack:
	mov	edx, DWORD PTR _fo$73605[ebp]
	add	edx, 1
	mov	DWORD PTR _fo$73605[ebp], edx
$LN54@ReadUnpack:
	mov	eax, DWORD PTR _fo$73605[ebp]
	cmp	eax, DWORD PTR _numFolders$[ebp]
	jae	$LN52@ReadUnpack
; Line 647
	mov	DWORD PTR _indexOfMainStream$73610[ebp], 0
; Line 648
	mov	DWORD PTR _numPackStreams$73611[ebp], 0
; Line 649
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ	; NArchive::N7z::CInByte2::GetPtr
	mov	esi, eax
	sub	esi, DWORD PTR _startBufPtr$73601[ebp]
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 56					; 00000038H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	edx, DWORD PTR _fo$73605[ebp]
	mov	DWORD PTR [eax+edx*4], esi
; Line 651
	mov	DWORD PTR _numInStreams$73612[ebp], 0
; Line 652
	mov	ecx, DWORD PTR _inByte$73606[ebp]
	call	?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ	; NArchive::N7z::CInByte2::ReadNum
	mov	DWORD PTR _numCoders$73613[ebp], eax
; Line 654
	cmp	DWORD PTR _numCoders$73613[ebp], 0
	je	SHORT $LN50@ReadUnpack
	cmp	DWORD PTR _numCoders$73613[ebp], 64	; 00000040H
	jbe	SHORT $LN51@ReadUnpack
$LN50@ReadUnpack:
; Line 655
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN51@ReadUnpack:
; Line 657
	mov	DWORD PTR _ci$73616[ebp], 0
	jmp	SHORT $LN49@ReadUnpack
$LN48@ReadUnpack:
	mov	eax, DWORD PTR _ci$73616[ebp]
	add	eax, 1
	mov	DWORD PTR _ci$73616[ebp], eax
$LN49@ReadUnpack:
	mov	ecx, DWORD PTR _ci$73616[ebp]
	cmp	ecx, DWORD PTR _numCoders$73613[ebp]
	jae	$LN47@ReadUnpack
; Line 659
	mov	ecx, DWORD PTR _inByte$73606[ebp]
	call	?ReadByte@CInByte2@N7z@NArchive@@QAEEXZ	; NArchive::N7z::CInByte2::ReadByte
	mov	BYTE PTR _mainByte$73620[ebp], al
; Line 660
	movzx	edx, BYTE PTR _mainByte$73620[ebp]
	and	edx, 192				; 000000c0H
	je	SHORT $LN46@ReadUnpack
; Line 661
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN46@ReadUnpack:
; Line 663
	movzx	eax, BYTE PTR _mainByte$73620[ebp]
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _idSize$73622[ebp], eax
; Line 664
	cmp	DWORD PTR _idSize$73622[ebp], 8
	jbe	SHORT $LN45@ReadUnpack
; Line 665
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN45@ReadUnpack:
; Line 666
	mov	ecx, DWORD PTR _inByte$73606[ebp]
	call	?GetRem@CInByte2@N7z@NArchive@@QBEIXZ	; NArchive::N7z::CInByte2::GetRem
	cmp	DWORD PTR _idSize$73622[ebp], eax
	jbe	SHORT $LN44@ReadUnpack
; Line 667
	call	?ThrowEndOfData@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowEndOfData
$LN44@ReadUnpack:
; Line 668
	mov	ecx, DWORD PTR _inByte$73606[ebp]
	call	?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ	; NArchive::N7z::CInByte2::GetPtr
	mov	DWORD PTR _longID$73625[ebp], eax
; Line 669
	mov	DWORD PTR _id$73626[ebp], 0
	mov	DWORD PTR _id$73626[ebp+4], 0
; Line 670
	mov	DWORD PTR _j$73627[ebp], 0
	jmp	SHORT $LN43@ReadUnpack
$LN42@ReadUnpack:
	mov	ecx, DWORD PTR _j$73627[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$73627[ebp], ecx
$LN43@ReadUnpack:
	mov	edx, DWORD PTR _j$73627[ebp]
	cmp	edx, DWORD PTR _idSize$73622[ebp]
	jae	SHORT $LN41@ReadUnpack
; Line 671
	mov	eax, DWORD PTR _id$73626[ebp]
	mov	edx, DWORD PTR _id$73626[ebp+4]
	mov	cl, 8
	call	__allshl
	mov	ecx, eax
	mov	esi, edx
	mov	edx, DWORD PTR _longID$73625[ebp]
	add	edx, DWORD PTR _j$73627[ebp]
	movzx	eax, BYTE PTR [edx]
	cdq
	or	ecx, eax
	or	esi, edx
	mov	DWORD PTR _id$73626[ebp], ecx
	mov	DWORD PTR _id$73626[ebp+4], esi
	jmp	SHORT $LN42@ReadUnpack
$LN41@ReadUnpack:
; Line 672
	mov	eax, DWORD PTR _idSize$73622[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	ecx, DWORD PTR _inByte$73606[ebp]
	call	?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CInByte2::SkipDataNoCheck
; Line 673
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 76					; 0000004cH
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	eax, 128				; 00000080H
	jae	SHORT $LN40@ReadUnpack
; Line 674
	mov	edx, DWORD PTR _id$73626[ebp+4]
	push	edx
	mov	eax, DWORD PTR _id$73626[ebp]
	push	eax
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 76					; 0000004cH
	call	?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z ; CRecordVector<unsigned __int64>::AddToUniqueSorted
$LN40@ReadUnpack:
; Line 676
	mov	DWORD PTR _coderInStreams$73632[ebp], 1
; Line 677
	movzx	ecx, BYTE PTR _mainByte$73620[ebp]
	and	ecx, 16					; 00000010H
	je	SHORT $LN39@ReadUnpack
; Line 679
	mov	ecx, DWORD PTR _inByte$73606[ebp]
	call	?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ	; NArchive::N7z::CInByte2::ReadNum
	mov	DWORD PTR _coderInStreams$73632[ebp], eax
; Line 680
	cmp	DWORD PTR _coderInStreams$73632[ebp], 64 ; 00000040H
	jbe	SHORT $LN38@ReadUnpack
; Line 681
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN38@ReadUnpack:
; Line 682
	mov	ecx, DWORD PTR _inByte$73606[ebp]
	call	?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ	; NArchive::N7z::CInByte2::ReadNum
	cmp	eax, 1
	je	SHORT $LN39@ReadUnpack
; Line 683
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN39@ReadUnpack:
; Line 686
	mov	edx, DWORD PTR _numInStreams$73612[ebp]
	add	edx, DWORD PTR _coderInStreams$73632[ebp]
	mov	DWORD PTR _numInStreams$73612[ebp], edx
; Line 687
	cmp	DWORD PTR _numInStreams$73612[ebp], 64	; 00000040H
	jbe	SHORT $LN36@ReadUnpack
; Line 688
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN36@ReadUnpack:
; Line 690
	movzx	eax, BYTE PTR _mainByte$73620[ebp]
	and	eax, 32					; 00000020H
	je	$LN35@ReadUnpack
; Line 692
	mov	ecx, DWORD PTR _inByte$73606[ebp]
	call	?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ	; NArchive::N7z::CInByte2::ReadNum
	mov	DWORD PTR _propsSize$73638[ebp], eax
; Line 693
	mov	ecx, DWORD PTR _inByte$73606[ebp]
	call	?GetRem@CInByte2@N7z@NArchive@@QBEIXZ	; NArchive::N7z::CInByte2::GetRem
	cmp	DWORD PTR _propsSize$73638[ebp], eax
	jbe	SHORT $LN34@ReadUnpack
; Line 694
	call	?ThrowEndOfData@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowEndOfData
$LN34@ReadUnpack:
; Line 695
	cmp	DWORD PTR _id$73626[ebp], 33		; 00000021H
	jne	SHORT $LN33@ReadUnpack
	cmp	DWORD PTR _id$73626[ebp+4], 0
	jne	SHORT $LN33@ReadUnpack
	cmp	DWORD PTR _propsSize$73638[ebp], 1
	jne	SHORT $LN33@ReadUnpack
; Line 697
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ	; NArchive::N7z::CInByte2::GetPtr
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR _v$73641[ebp], dl
; Line 698
	mov	eax, DWORD PTR _folders$[ebp]
	movzx	ecx, BYTE PTR [eax+68]
	movzx	edx, BYTE PTR _v$73641[ebp]
	cmp	ecx, edx
	jge	SHORT $LN32@ReadUnpack
; Line 699
	mov	eax, DWORD PTR _folders$[ebp]
	mov	cl, BYTE PTR _v$73641[ebp]
	mov	BYTE PTR [eax+68], cl
$LN32@ReadUnpack:
; Line 700
	jmp	SHORT $LN31@ReadUnpack
$LN33@ReadUnpack:
; Line 701
	cmp	DWORD PTR _id$73626[ebp], 196865	; 00030101H
	jne	SHORT $LN31@ReadUnpack
	cmp	DWORD PTR _id$73626[ebp+4], 0
	jne	SHORT $LN31@ReadUnpack
	cmp	DWORD PTR _propsSize$73638[ebp], 5
	jne	SHORT $LN31@ReadUnpack
; Line 703
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ	; NArchive::N7z::CInByte2::GetPtr
	mov	eax, DWORD PTR [eax+1]
	mov	DWORD PTR _dicSize$73645[ebp], eax
; Line 704
	mov	ecx, DWORD PTR _folders$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	cmp	edx, DWORD PTR _dicSize$73645[ebp]
	jae	SHORT $LN31@ReadUnpack
; Line 705
	mov	eax, DWORD PTR _folders$[ebp]
	mov	ecx, DWORD PTR _dicSize$73645[ebp]
	mov	DWORD PTR [eax+72], ecx
$LN31@ReadUnpack:
; Line 707
	mov	edx, DWORD PTR _propsSize$73638[ebp]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _inByte$73606[ebp]
	call	?SkipDataNoCheck@CInByte2@N7z@NArchive@@QAEX_K@Z ; NArchive::N7z::CInByte2::SkipDataNoCheck
$LN35@ReadUnpack:
; Line 709
	jmp	$LN48@ReadUnpack
$LN47@ReadUnpack:
; Line 711
	cmp	DWORD PTR _numCoders$73613[ebp], 1
	jne	SHORT $LN28@ReadUnpack
	cmp	DWORD PTR _numInStreams$73612[ebp], 1
	jne	SHORT $LN28@ReadUnpack
; Line 713
	mov	DWORD PTR _indexOfMainStream$73610[ebp], 0
; Line 714
	mov	DWORD PTR _numPackStreams$73611[ebp], 1
; Line 716
	jmp	$LN27@ReadUnpack
$LN28@ReadUnpack:
; Line 719
	mov	ecx, DWORD PTR _numCoders$73613[ebp]
	sub	ecx, 1
	mov	DWORD PTR _numBonds$73653[ebp], ecx
; Line 720
	mov	edx, DWORD PTR _numInStreams$73612[ebp]
	cmp	edx, DWORD PTR _numBonds$73653[ebp]
	jae	SHORT $LN26@ReadUnpack
; Line 721
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN26@ReadUnpack:
; Line 723
	mov	eax, DWORD PTR _numInStreams$73612[ebp]
	push	eax
	lea	ecx, DWORD PTR _StreamUsed$73602[ebp]
	push	ecx
	call	?BoolVector_Fill_False@N7z@NArchive@@YGXAAV?$CRecordVector@_N@@I@Z ; NArchive::N7z::BoolVector_Fill_False
; Line 724
	mov	edx, DWORD PTR _numCoders$73613[ebp]
	push	edx
	lea	eax, DWORD PTR _CoderUsed$73603[ebp]
	push	eax
	call	?BoolVector_Fill_False@N7z@NArchive@@YGXAAV?$CRecordVector@_N@@I@Z ; NArchive::N7z::BoolVector_Fill_False
; Line 726
	mov	DWORD PTR _i$73652[ebp], 0
	jmp	SHORT $LN25@ReadUnpack
$LN24@ReadUnpack:
	mov	ecx, DWORD PTR _i$73652[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$73652[ebp], ecx
$LN25@ReadUnpack:
	mov	edx, DWORD PTR _i$73652[ebp]
	cmp	edx, DWORD PTR _numBonds$73653[ebp]
	jae	$LN23@ReadUnpack
; Line 728
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadNum
	mov	DWORD PTR _index$73658[ebp], eax
; Line 729
	mov	eax, DWORD PTR _index$73658[ebp]
	cmp	eax, DWORD PTR _numInStreams$73612[ebp]
	jae	SHORT $LN21@ReadUnpack
	mov	ecx, DWORD PTR _index$73658[ebp]
	push	ecx
	lea	ecx, DWORD PTR _StreamUsed$73602[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN22@ReadUnpack
$LN21@ReadUnpack:
; Line 730
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN22@ReadUnpack:
; Line 731
	mov	eax, DWORD PTR _index$73658[ebp]
	push	eax
	lea	ecx, DWORD PTR _StreamUsed$73602[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	BYTE PTR [eax], 1
; Line 733
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadNum
	mov	DWORD PTR _index$73658[ebp], eax
; Line 734
	mov	ecx, DWORD PTR _index$73658[ebp]
	cmp	ecx, DWORD PTR _numCoders$73613[ebp]
	jae	SHORT $LN19@ReadUnpack
	mov	edx, DWORD PTR _index$73658[ebp]
	push	edx
	lea	ecx, DWORD PTR _CoderUsed$73603[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN20@ReadUnpack
$LN19@ReadUnpack:
; Line 735
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN20@ReadUnpack:
; Line 736
	mov	ecx, DWORD PTR _index$73658[ebp]
	push	ecx
	lea	ecx, DWORD PTR _CoderUsed$73603[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	BYTE PTR [eax], 1
; Line 737
	jmp	$LN24@ReadUnpack
$LN23@ReadUnpack:
; Line 739
	mov	edx, DWORD PTR _numInStreams$73612[ebp]
	sub	edx, DWORD PTR _numBonds$73653[ebp]
	mov	DWORD PTR _numPackStreams$73611[ebp], edx
; Line 741
	cmp	DWORD PTR _numPackStreams$73611[ebp], 1
	je	SHORT $LN18@ReadUnpack
; Line 742
	mov	DWORD PTR _i$73652[ebp], 0
	jmp	SHORT $LN17@ReadUnpack
$LN16@ReadUnpack:
	mov	eax, DWORD PTR _i$73652[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73652[ebp], eax
$LN17@ReadUnpack:
	mov	ecx, DWORD PTR _i$73652[ebp]
	cmp	ecx, DWORD PTR _numPackStreams$73611[ebp]
	jae	SHORT $LN18@ReadUnpack
; Line 744
	mov	ecx, DWORD PTR _inByte$73606[ebp]
	call	?ReadNum@CInByte2@N7z@NArchive@@QAEIXZ	; NArchive::N7z::CInByte2::ReadNum
	mov	DWORD PTR _index$73667[ebp], eax
; Line 745
	mov	edx, DWORD PTR _index$73667[ebp]
	cmp	edx, DWORD PTR _numInStreams$73612[ebp]
	jae	SHORT $LN13@ReadUnpack
	mov	eax, DWORD PTR _index$73667[ebp]
	push	eax
	lea	ecx, DWORD PTR _StreamUsed$73602[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN14@ReadUnpack
$LN13@ReadUnpack:
; Line 746
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN14@ReadUnpack:
; Line 747
	mov	edx, DWORD PTR _index$73667[ebp]
	push	edx
	lea	ecx, DWORD PTR _StreamUsed$73602[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	BYTE PTR [eax], 1
; Line 748
	jmp	SHORT $LN16@ReadUnpack
$LN18@ReadUnpack:
; Line 750
	mov	DWORD PTR _i$73652[ebp], 0
	jmp	SHORT $LN12@ReadUnpack
$LN11@ReadUnpack:
	mov	eax, DWORD PTR _i$73652[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73652[ebp], eax
$LN12@ReadUnpack:
	mov	ecx, DWORD PTR _i$73652[ebp]
	cmp	ecx, DWORD PTR _numCoders$73613[ebp]
	jae	SHORT $LN10@ReadUnpack
; Line 751
	mov	edx, DWORD PTR _i$73652[ebp]
	push	edx
	lea	ecx, DWORD PTR _CoderUsed$73603[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	jne	SHORT $LN9@ReadUnpack
; Line 753
	mov	ecx, DWORD PTR _i$73652[ebp]
	mov	DWORD PTR _indexOfMainStream$73610[ebp], ecx
; Line 754
	jmp	SHORT $LN10@ReadUnpack
$LN9@ReadUnpack:
; Line 755
	jmp	SHORT $LN11@ReadUnpack
$LN10@ReadUnpack:
; Line 757
	mov	edx, DWORD PTR _i$73652[ebp]
	cmp	edx, DWORD PTR _numCoders$73613[ebp]
	jne	SHORT $LN27@ReadUnpack
; Line 758
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN27@ReadUnpack:
; Line 761
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 44					; 0000002cH
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _fo$73605[ebp]
	mov	edx, DWORD PTR _numCodersOutStreams$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 762
	mov	eax, DWORD PTR _numCodersOutStreams$[ebp]
	add	eax, DWORD PTR _numCoders$73613[ebp]
	mov	DWORD PTR _numCodersOutStreams$[ebp], eax
; Line 763
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 48					; 00000030H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _fo$73605[ebp]
	mov	edx, DWORD PTR _packStreamIndex$73604[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 764
	mov	eax, DWORD PTR _packStreamIndex$73604[ebp]
	add	eax, DWORD PTR _numPackStreams$73611[ebp]
	mov	DWORD PTR _packStreamIndex$73604[ebp], eax
; Line 765
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 52					; 00000034H
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	mov	ecx, DWORD PTR _fo$73605[ebp]
	mov	dl, BYTE PTR _indexOfMainStream$73610[ebp]
	mov	BYTE PTR [eax+ecx], dl
; Line 766
	jmp	$LN53@ReadUnpack
$LN52@ReadUnpack:
; Line 768
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ	; NArchive::N7z::CInByte2::GetPtr
	sub	eax, DWORD PTR _startBufPtr$73601[ebp]
	mov	DWORD PTR _dataSize$73676[ebp], eax
; Line 769
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 44					; 0000002cH
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _fo$73605[ebp]
	mov	edx, DWORD PTR _numCodersOutStreams$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 770
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 48					; 00000030H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _fo$73605[ebp]
	mov	edx, DWORD PTR _packStreamIndex$73604[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 771
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ	; NArchive::N7z::CInByte2::GetPtr
	mov	esi, eax
	sub	esi, DWORD PTR _startBufPtr$73601[ebp]
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 56					; 00000038H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _fo$73605[ebp]
	mov	DWORD PTR [eax+ecx*4], esi
; Line 772
	mov	edx, DWORD PTR _dataSize$73676[ebp]
	push	edx
	mov	eax, DWORD PTR _startBufPtr$73601[ebp]
	push	eax
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 60					; 0000003cH
	call	?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z	; CBuffer<unsigned char>::CopyFrom
; Line 773
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _CoderUsed$73603[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _StreamUsed$73602[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _streamSwitch$73600[ebp]
	call	??1CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::~CStreamSwitch
; Line 775
	push	0
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WaitId@CInArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::CInArchive::WaitId
; Line 776
	mov	ecx, DWORD PTR _numCodersOutStreams$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 40					; 00000028H
	call	?Alloc@?$CObjArray@_K@@QAEXI@Z		; CObjArray<unsigned __int64>::Alloc
; Line 777
	mov	DWORD PTR _i$73677[ebp], 0
	jmp	SHORT $LN7@ReadUnpack
$LN6@ReadUnpack:
	mov	edx, DWORD PTR _i$73677[ebp]
	add	edx, 1
	mov	DWORD PTR _i$73677[ebp], edx
$LN7@ReadUnpack:
	mov	eax, DWORD PTR _i$73677[ebp]
	cmp	eax, DWORD PTR _numCodersOutStreams$[ebp]
	jae	SHORT $LN4@ReadUnpack
; Line 778
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadNumber
	mov	esi, eax
	mov	edi, edx
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 40					; 00000028H
	call	??B?$CObjArray@_K@@QAEPA_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 *
	mov	ecx, DWORD PTR _i$73677[ebp]
	mov	DWORD PTR [eax+ecx*8], esi
	mov	DWORD PTR [eax+ecx*8+4], edi
	jmp	SHORT $LN6@ReadUnpack
$LN4@ReadUnpack:
; Line 782
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$73684[ebp], eax
	mov	DWORD PTR _type$73684[ebp+4], edx
; Line 783
	mov	edx, DWORD PTR _type$73684[ebp]
	or	edx, DWORD PTR _type$73684[ebp+4]
	jne	SHORT $LN2@ReadUnpack
; Line 784
	jmp	SHORT $LN55@ReadUnpack
$LN2@ReadUnpack:
; Line 785
	cmp	DWORD PTR _type$73684[ebp], 10		; 0000000aH
	jne	SHORT $LN1@ReadUnpack
	cmp	DWORD PTR _type$73684[ebp+4], 0
	jne	SHORT $LN1@ReadUnpack
; Line 787
	mov	eax, DWORD PTR _folders$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _numFolders$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadHashDigests@CInArchive@N7z@NArchive@@AAEXIAAUCUInt32DefVector@23@@Z ; NArchive::N7z::CInArchive::ReadHashDigests
; Line 788
	jmp	SHORT $LN4@ReadUnpack
$LN1@ReadUnpack:
; Line 790
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkipData@CInArchive@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CInArchive::SkipData
; Line 791
	jmp	SHORT $LN4@ReadUnpack
$LN55@ReadUnpack:
; Line 792
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN66@ReadUnpack
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 188				; 000000bcH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN66@ReadUnpack:
	DD	3
	DD	$LN65@ReadUnpack
$LN65@ReadUnpack:
	DD	-36					; ffffffdcH
	DD	8
	DD	$LN61@ReadUnpack
	DD	-60					; ffffffc4H
	DD	12					; 0000000cH
	DD	$LN62@ReadUnpack
	DD	-80					; ffffffb0H
	DD	12					; 0000000cH
	DD	$LN63@ReadUnpack
$LN63@ReadUnpack:
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	85					; 00000055H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN62@ReadUnpack:
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	85					; 00000055H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN61@ReadUnpack:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$0:
	lea	ecx, DWORD PTR _streamSwitch$73600[ebp]
	jmp	??1CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::~CStreamSwitch
__unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$1:
	lea	ecx, DWORD PTR _StreamUsed$73602[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__unwindfunclet$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z$2:
	lea	ecx, DWORD PTR _CoderUsed$73603[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-188]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z ENDP ; NArchive::N7z::CInArchive::ReadUnpackInfo
PUBLIC	?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z	; CRecordVector<bool>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$73114 = -8						; size = 4
_p$ = -4						; size = 4
_v$ = 8							; size = 4
_size$ = 12						; size = 4
?BoolVector_Fill_False@N7z@NArchive@@YGXAAV?$CRecordVector@_N@@I@Z PROC ; NArchive::N7z::BoolVector_Fill_False
; Line 36
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 37
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize
; Line 38
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	DWORD PTR _p$[ebp], eax
; Line 39
	mov	DWORD PTR _i$73114[ebp], 0
	jmp	SHORT $LN3@BoolVector
$LN2@BoolVector:
	mov	ecx, DWORD PTR _i$73114[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$73114[ebp], ecx
$LN3@BoolVector:
	mov	edx, DWORD PTR _i$73114[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@BoolVector
; Line 40
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _i$73114[ebp]
	mov	BYTE PTR [eax], 0
	jmp	SHORT $LN2@BoolVector
$LN4@BoolVector:
; Line 41
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?BoolVector_Fill_False@N7z@NArchive@@YGXAAV?$CRecordVector@_N@@I@Z ENDP ; NArchive::N7z::BoolVector_Fill_False
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CStreamSwitch@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CStreamSwitch@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CStreamSwitch::CStreamSwitch, COMDAT
; _this$ = ecx
; Line 57
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+5], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CStreamSwitch@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CStreamSwitch::CStreamSwitch
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CStreamSwitch@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CStreamSwitch@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CStreamSwitch::~CStreamSwitch, COMDAT
; _this$ = ecx
; Line 58
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Remove@CStreamSwitch@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CStreamSwitch::Remove
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CStreamSwitch@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CStreamSwitch::~CStreamSwitch
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@_N@@QBEIXZ		; CRecordVector<bool>::Size
PUBLIC	?ClearAndSetSize@CUInt32DefVector@N7z@NArchive@@QAEXI@Z ; NArchive::N7z::CUInt32DefVector::ClearAndSetSize
PUBLIC	?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt32DefVector::ValidAndDefined
PUBLIC	?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetFolderUnpackSize
PUBLIC	?Add@?$CRecordVector@_K@@QAEI_K@Z		; CRecordVector<unsigned __int64>::Add
PUBLIC	?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z ; NArchive::N7z::CInArchive::ReadSubStreamsInfo
xdata$x	SEGMENT
__unwindtable$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z$0
__ehfuncinfo$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv228 = -132						; size = 4
_j$73767 = -128						; size = 4
_numSubstreams$73764 = -124				; size = 4
_k$73760 = -120						; size = 4
_crc$73756 = -116					; size = 4
_defined$73755 = -109					; size = 1
_j$73751 = -108						; size = 4
_numSubstreams$73748 = -104				; size = 4
_k2$73744 = -100					; size = 4
_k$73743 = -96						; size = 4
_digests2$73742 = -88					; size = 12
_numSubstreams$73734 = -72				; size = 4
_numDigests$ = -68					; size = 4
_val$73727 = -64					; size = 4
_folderUnpackSize$73721 = -60				; size = 8
_size$73719 = -52					; size = 8
_j$73715 = -44						; size = 4
_sum$73714 = -40					; size = 8
_numSubstreams$73712 = -32				; size = 4
_type$ = -28						; size = 8
_i$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_folders$ = 8						; size = 4
_unpackSizes$ = 12					; size = 4
_digests$ = 16						; size = 4
?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z PROC ; NArchive::N7z::CInArchive::ReadSubStreamsInfo
; _this$ = ecx
; Line 798
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 120				; 00000078H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-132]
	mov	ecx, 30					; 0000001eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 799
	mov	eax, DWORD PTR _folders$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 36					; 00000024H
	call	?Alloc@?$CObjArray@I@@QAEXI@Z		; CObjArray<unsigned int>::Alloc
; Line 801
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN55@ReadSubStr
$LN54@ReadSubStr:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN55@ReadSubStr:
	mov	eax, DWORD PTR _folders$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN52@ReadSubStr
; Line 802
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+edx*4], 1
	jmp	SHORT $LN54@ReadSubStr
$LN52@ReadSubStr:
; Line 808
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$[ebp], eax
	mov	DWORD PTR _type$[ebp+4], edx
; Line 809
	cmp	DWORD PTR _type$[ebp], 13		; 0000000dH
	jne	SHORT $LN50@ReadSubStr
	cmp	DWORD PTR _type$[ebp+4], 0
	jne	SHORT $LN50@ReadSubStr
; Line 811
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN49@ReadSubStr
$LN48@ReadSubStr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN49@ReadSubStr:
	mov	ecx, DWORD PTR _folders$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN47@ReadSubStr
; Line 812
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadNum
	mov	esi, eax
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], esi
	jmp	SHORT $LN48@ReadSubStr
$LN47@ReadSubStr:
; Line 813
	jmp	SHORT $LN52@ReadSubStr
$LN50@ReadSubStr:
; Line 815
	cmp	DWORD PTR _type$[ebp], 10		; 0000000aH
	jne	SHORT $LN60@ReadSubStr
	cmp	DWORD PTR _type$[ebp+4], 0
	je	SHORT $LN45@ReadSubStr
$LN60@ReadSubStr:
	cmp	DWORD PTR _type$[ebp], 9
	jne	SHORT $LN61@ReadSubStr
	cmp	DWORD PTR _type$[ebp+4], 0
	je	SHORT $LN45@ReadSubStr
$LN61@ReadSubStr:
	mov	edx, DWORD PTR _type$[ebp]
	or	edx, DWORD PTR _type$[ebp+4]
	jne	SHORT $LN46@ReadSubStr
$LN45@ReadSubStr:
; Line 816
	jmp	SHORT $LN51@ReadSubStr
$LN46@ReadSubStr:
; Line 817
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkipData@CInArchive@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CInArchive::SkipData
; Line 818
	jmp	$LN52@ReadSubStr
$LN51@ReadSubStr:
; Line 820
	cmp	DWORD PTR _type$[ebp], 9
	jne	$LN44@ReadSubStr
	cmp	DWORD PTR _type$[ebp+4], 0
	jne	$LN44@ReadSubStr
; Line 822
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN43@ReadSubStr
$LN42@ReadSubStr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN43@ReadSubStr:
	mov	ecx, DWORD PTR _folders$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	$LN41@ReadSubStr
; Line 826
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _numSubstreams$73712[ebp], edx
; Line 827
	cmp	DWORD PTR _numSubstreams$73712[ebp], 0
	jne	SHORT $LN40@ReadSubStr
; Line 828
	jmp	SHORT $LN42@ReadSubStr
$LN40@ReadSubStr:
; Line 829
	mov	DWORD PTR _sum$73714[ebp], 0
	mov	DWORD PTR _sum$73714[ebp+4], 0
; Line 830
	mov	DWORD PTR _j$73715[ebp], 1
	jmp	SHORT $LN39@ReadSubStr
$LN38@ReadSubStr:
	mov	eax, DWORD PTR _j$73715[ebp]
	add	eax, 1
	mov	DWORD PTR _j$73715[ebp], eax
$LN39@ReadSubStr:
	mov	ecx, DWORD PTR _j$73715[ebp]
	cmp	ecx, DWORD PTR _numSubstreams$73712[ebp]
	jae	SHORT $LN37@ReadSubStr
; Line 832
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadNumber
	mov	DWORD PTR _size$73719[ebp], eax
	mov	DWORD PTR _size$73719[ebp+4], edx
; Line 833
	mov	edx, DWORD PTR _size$73719[ebp+4]
	push	edx
	mov	eax, DWORD PTR _size$73719[ebp]
	push	eax
	mov	ecx, DWORD PTR _unpackSizes$[ebp]
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 834
	mov	ecx, DWORD PTR _sum$73714[ebp]
	add	ecx, DWORD PTR _size$73719[ebp]
	mov	edx, DWORD PTR _sum$73714[ebp+4]
	adc	edx, DWORD PTR _size$73719[ebp+4]
	mov	DWORD PTR _sum$73714[ebp], ecx
	mov	DWORD PTR _sum$73714[ebp+4], edx
; Line 835
	mov	eax, DWORD PTR _sum$73714[ebp+4]
	cmp	eax, DWORD PTR _size$73719[ebp+4]
	ja	SHORT $LN36@ReadSubStr
	jb	SHORT $LN62@ReadSubStr
	mov	ecx, DWORD PTR _sum$73714[ebp]
	cmp	ecx, DWORD PTR _size$73719[ebp]
	jae	SHORT $LN36@ReadSubStr
$LN62@ReadSubStr:
; Line 836
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN36@ReadSubStr:
; Line 837
	jmp	SHORT $LN38@ReadSubStr
$LN37@ReadSubStr:
; Line 838
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _folders$[ebp]
	call	?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetFolderUnpackSize
	mov	DWORD PTR _folderUnpackSize$73721[ebp], eax
	mov	DWORD PTR _folderUnpackSize$73721[ebp+4], edx
; Line 839
	mov	eax, DWORD PTR _folderUnpackSize$73721[ebp+4]
	cmp	eax, DWORD PTR _sum$73714[ebp+4]
	ja	SHORT $LN35@ReadSubStr
	jb	SHORT $LN63@ReadSubStr
	mov	ecx, DWORD PTR _folderUnpackSize$73721[ebp]
	cmp	ecx, DWORD PTR _sum$73714[ebp]
	jae	SHORT $LN35@ReadSubStr
$LN63@ReadSubStr:
; Line 840
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN35@ReadSubStr:
; Line 841
	mov	edx, DWORD PTR _folderUnpackSize$73721[ebp]
	sub	edx, DWORD PTR _sum$73714[ebp]
	mov	eax, DWORD PTR _folderUnpackSize$73721[ebp+4]
	sbb	eax, DWORD PTR _sum$73714[ebp+4]
	push	eax
	push	edx
	mov	ecx, DWORD PTR _unpackSizes$[ebp]
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 842
	jmp	$LN42@ReadSubStr
$LN41@ReadSubStr:
; Line 843
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$[ebp], eax
	mov	DWORD PTR _type$[ebp+4], edx
; Line 845
	jmp	SHORT $LN34@ReadSubStr
$LN44@ReadSubStr:
; Line 847
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN33@ReadSubStr
$LN32@ReadSubStr:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN33@ReadSubStr:
	mov	edx, DWORD PTR _folders$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	SHORT $LN34@ReadSubStr
; Line 851
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _val$73727[ebp], edx
; Line 852
	cmp	DWORD PTR _val$73727[ebp], 1
	jbe	SHORT $LN30@ReadSubStr
; Line 853
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN30@ReadSubStr:
; Line 854
	cmp	DWORD PTR _val$73727[ebp], 1
	jne	SHORT $LN29@ReadSubStr
; Line 855
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _folders$[ebp]
	call	?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetFolderUnpackSize
	push	edx
	push	eax
	mov	ecx, DWORD PTR _unpackSizes$[ebp]
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
$LN29@ReadSubStr:
; Line 856
	jmp	SHORT $LN32@ReadSubStr
$LN34@ReadSubStr:
; Line 859
	mov	DWORD PTR _numDigests$[ebp], 0
; Line 860
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN28@ReadSubStr
$LN27@ReadSubStr:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN28@ReadSubStr:
	mov	edx, DWORD PTR _folders$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	SHORT $LN23@ReadSubStr
; Line 862
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _numSubstreams$73734[ebp], edx
; Line 863
	cmp	DWORD PTR _numSubstreams$73734[ebp], 1
	jne	SHORT $LN24@ReadSubStr
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt32DefVector::ValidAndDefined
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN25@ReadSubStr
$LN24@ReadSubStr:
; Line 864
	mov	edx, DWORD PTR _numDigests$[ebp]
	add	edx, DWORD PTR _numSubstreams$73734[ebp]
	mov	DWORD PTR _numDigests$[ebp], edx
$LN25@ReadSubStr:
; Line 865
	jmp	SHORT $LN27@ReadSubStr
$LN23@ReadSubStr:
; Line 869
	mov	eax, DWORD PTR _type$[ebp]
	or	eax, DWORD PTR _type$[ebp+4]
	jne	SHORT $LN21@ReadSubStr
; Line 870
	jmp	$LN22@ReadSubStr
$LN21@ReadSubStr:
; Line 871
	cmp	DWORD PTR _type$[ebp], 10		; 0000000aH
	jne	$LN20@ReadSubStr
	cmp	DWORD PTR _type$[ebp+4], 0
	jne	$LN20@ReadSubStr
; Line 875
	lea	ecx, DWORD PTR _digests2$73742[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 876
	lea	ecx, DWORD PTR _digests2$73742[ebp]
	push	ecx
	mov	edx, DWORD PTR _numDigests$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBoolVector2@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector2
; Line 878
	mov	ecx, DWORD PTR _unpackSizes$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	push	eax
	mov	ecx, DWORD PTR _digests$[ebp]
	call	?ClearAndSetSize@CUInt32DefVector@N7z@NArchive@@QAEXI@Z ; NArchive::N7z::CUInt32DefVector::ClearAndSetSize
; Line 880
	mov	DWORD PTR _k$73743[ebp], 0
; Line 881
	mov	DWORD PTR _k2$73744[ebp], 0
; Line 883
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@ReadSubStr
$LN18@ReadSubStr:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN19@ReadSubStr:
	mov	ecx, DWORD PTR _folders$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	$LN17@ReadSubStr
; Line 885
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _numSubstreams$73748[ebp], edx
; Line 886
	cmp	DWORD PTR _numSubstreams$73748[ebp], 1
	jne	SHORT $LN16@ReadSubStr
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt32DefVector::ValidAndDefined
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN16@ReadSubStr
; Line 888
	mov	edx, DWORD PTR _k$73743[ebp]
	push	edx
	mov	ecx, DWORD PTR _digests$[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	BYTE PTR [eax], 1
; Line 889
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _k$73743[ebp]
	push	ecx
	mov	ecx, DWORD PTR _digests$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
; Line 890
	mov	eax, DWORD PTR _k$73743[ebp]
	add	eax, 1
	mov	DWORD PTR _k$73743[ebp], eax
	jmp	$LN15@ReadSubStr
$LN16@ReadSubStr:
; Line 892
	mov	DWORD PTR _j$73751[ebp], 0
	jmp	SHORT $LN14@ReadSubStr
$LN13@ReadSubStr:
	mov	ecx, DWORD PTR _j$73751[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$73751[ebp], ecx
$LN14@ReadSubStr:
	mov	edx, DWORD PTR _j$73751[ebp]
	cmp	edx, DWORD PTR _numSubstreams$73748[ebp]
	jae	SHORT $LN15@ReadSubStr
; Line 894
	mov	eax, DWORD PTR _k2$73744[ebp]
	mov	DWORD PTR tv228[ebp], eax
	mov	ecx, DWORD PTR _k2$73744[ebp]
	add	ecx, 1
	mov	DWORD PTR _k2$73744[ebp], ecx
	mov	edx, DWORD PTR tv228[ebp]
	push	edx
	lea	ecx, DWORD PTR _digests2$73742[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR _defined$73755[ebp], al
; Line 895
	mov	ecx, DWORD PTR _k$73743[ebp]
	push	ecx
	mov	ecx, DWORD PTR _digests$[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	dl, BYTE PTR _defined$73755[ebp]
	mov	BYTE PTR [eax], dl
; Line 896
	mov	DWORD PTR _crc$73756[ebp], 0
; Line 897
	movzx	eax, BYTE PTR _defined$73755[ebp]
	test	eax, eax
	je	SHORT $LN11@ReadSubStr
; Line 898
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadUInt32
	mov	DWORD PTR _crc$73756[ebp], eax
$LN11@ReadSubStr:
; Line 899
	mov	ecx, DWORD PTR _k$73743[ebp]
	push	ecx
	mov	ecx, DWORD PTR _digests$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR _crc$73756[ebp]
	mov	DWORD PTR [eax], edx
; Line 900
	mov	eax, DWORD PTR _k$73743[ebp]
	add	eax, 1
	mov	DWORD PTR _k$73743[ebp], eax
; Line 901
	jmp	$LN13@ReadSubStr
$LN15@ReadSubStr:
; Line 902
	jmp	$LN18@ReadSubStr
$LN17@ReadSubStr:
; Line 904
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _digests2$73742[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
; Line 905
	jmp	SHORT $LN10@ReadSubStr
$LN20@ReadSubStr:
; Line 906
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkipData@CInArchive@N7z@NArchive@@AAEXXZ ; NArchive::N7z::CInArchive::SkipData
$LN10@ReadSubStr:
; Line 908
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$[ebp], eax
	mov	DWORD PTR _type$[ebp+4], edx
; Line 909
	jmp	$LN23@ReadSubStr
$LN22@ReadSubStr:
; Line 911
	mov	ecx, DWORD PTR _digests$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	mov	esi, eax
	mov	ecx, DWORD PTR _unpackSizes$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	esi, eax
	je	$LN56@ReadSubStr
; Line 913
	mov	ecx, DWORD PTR _unpackSizes$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	push	eax
	mov	ecx, DWORD PTR _digests$[ebp]
	call	?ClearAndSetSize@CUInt32DefVector@N7z@NArchive@@QAEXI@Z ; NArchive::N7z::CUInt32DefVector::ClearAndSetSize
; Line 914
	mov	DWORD PTR _k$73760[ebp], 0
; Line 915
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@ReadSubStr
$LN7@ReadSubStr:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN8@ReadSubStr:
	mov	edx, DWORD PTR _folders$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	$LN56@ReadSubStr
; Line 917
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _numSubstreams$73764[ebp], edx
; Line 918
	cmp	DWORD PTR _numSubstreams$73764[ebp], 1
	jne	SHORT $LN5@ReadSubStr
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt32DefVector::ValidAndDefined
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN5@ReadSubStr
; Line 920
	mov	edx, DWORD PTR _k$73760[ebp]
	push	edx
	mov	ecx, DWORD PTR _digests$[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	BYTE PTR [eax], 1
; Line 921
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	esi, eax
	mov	ecx, DWORD PTR _k$73760[ebp]
	push	ecx
	mov	ecx, DWORD PTR _digests$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [esi]
	mov	DWORD PTR [eax], edx
; Line 922
	mov	eax, DWORD PTR _k$73760[ebp]
	add	eax, 1
	mov	DWORD PTR _k$73760[ebp], eax
	jmp	SHORT $LN4@ReadSubStr
$LN5@ReadSubStr:
; Line 924
	mov	DWORD PTR _j$73767[ebp], 0
	jmp	SHORT $LN3@ReadSubStr
$LN2@ReadSubStr:
	mov	ecx, DWORD PTR _j$73767[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$73767[ebp], ecx
$LN3@ReadSubStr:
	mov	edx, DWORD PTR _j$73767[ebp]
	cmp	edx, DWORD PTR _numSubstreams$73764[ebp]
	jae	SHORT $LN4@ReadSubStr
; Line 926
	mov	eax, DWORD PTR _k$73760[ebp]
	push	eax
	mov	ecx, DWORD PTR _digests$[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	BYTE PTR [eax], 0
; Line 927
	mov	ecx, DWORD PTR _k$73760[ebp]
	push	ecx
	mov	ecx, DWORD PTR _digests$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	DWORD PTR [eax], 0
; Line 928
	mov	edx, DWORD PTR _k$73760[ebp]
	add	edx, 1
	mov	DWORD PTR _k$73760[ebp], edx
; Line 929
	jmp	SHORT $LN2@ReadSubStr
$LN4@ReadSubStr:
; Line 930
	jmp	$LN7@ReadSubStr
$LN56@ReadSubStr:
; Line 932
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN67@ReadSubStr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 132				; 00000084H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN67@ReadSubStr:
	DD	1
	DD	$LN66@ReadSubStr
$LN66@ReadSubStr:
	DD	-88					; ffffffa8H
	DD	12					; 0000000cH
	DD	$LN64@ReadSubStr
$LN64@ReadSubStr:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z$0:
	lea	ecx, DWORD PTR _digests2$73742[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-132]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z ENDP ; NArchive::N7z::CInArchive::ReadSubStreamsInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@CUInt32DefVector@N7z@NArchive@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@CUInt32DefVector@N7z@NArchive@@QAEXI@Z PROC ; NArchive::N7z::CUInt32DefVector::ClearAndSetSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 96
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 97
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize
; Line 98
	mov	ecx, DWORD PTR _newSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<unsigned int>::ClearAndSetSize
; Line 99
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@CUInt32DefVector@N7z@NArchive@@QAEXI@Z ENDP ; NArchive::N7z::CUInt32DefVector::ClearAndSetSize
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@_N@@QBEAB_NI@Z		; CRecordVector<bool>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z PROC ; NArchive::N7z::CUInt32DefVector::ValidAndDefined, COMDAT
; _this$ = ecx
; Line 113
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN3@ValidAndDe
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@ValidAndDe
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@ValidAndDe
$LN3@ValidAndDe:
	mov	DWORD PTR tv72[ebp], 0
$LN4@ValidAndDe:
	mov	al, BYTE PTR tv72[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ENDP ; NArchive::N7z::CUInt32DefVector::ValidAndDefined
_TEXT	ENDS
PUBLIC	??B?$CObjArray@E@@QBEPBEXZ			; CObjArray<unsigned char>::operator unsigned char const *
PUBLIC	??B?$CObjArray@_K@@QBEPB_KXZ			; CObjArray<unsigned __int64>::operator unsigned __int64 const *
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_folderIndex$ = 8					; size = 4
?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z PROC ; NArchive::N7z::CFolders::GetFolderUnpackSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 81
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 82
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??B?$CObjArray@_K@@QBEPB_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 const *
	mov	esi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??B?$CObjArray@I@@QBEPBIXZ		; CObjArray<unsigned int>::operator unsigned int const *
	mov	edi, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??B?$CObjArray@E@@QBEPBEXZ		; CObjArray<unsigned char>::operator unsigned char const *
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	mov	eax, DWORD PTR _folderIndex$[ebp]
	add	edx, DWORD PTR [edi+eax*4]
	mov	eax, DWORD PTR [esi+edx*8]
	mov	edx, DWORD PTR [esi+edx*8+4]
; Line 83
	pop	edi
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z ENDP ; NArchive::N7z::CFolders::GetFolderUnpackSize
_TEXT	ENDS
PUBLIC	?ReadStreamsInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AA_KAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z ; NArchive::N7z::CInArchive::ReadStreamsInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$73787 = -16						; size = 4
_type$ = -12						; size = 8
_this$ = -4						; size = 4
_dataVector$ = 8					; size = 4
_dataOffset$ = 12					; size = 4
_folders$ = 16						; size = 4
_unpackSizes$ = 20					; size = 4
_digests$ = 24						; size = 4
?ReadStreamsInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AA_KAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z PROC ; NArchive::N7z::CInArchive::ReadStreamsInfo
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.cpp
; Line 940
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 941
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$[ebp], eax
	mov	DWORD PTR _type$[ebp+4], edx
; Line 943
	cmp	DWORD PTR _type$[ebp], 6
	jne	SHORT $LN9@ReadStream
	cmp	DWORD PTR _type$[ebp+4], 0
	jne	SHORT $LN9@ReadStream
; Line 945
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadNumber
	mov	ecx, DWORD PTR _dataOffset$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 946
	mov	edx, DWORD PTR _folders$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadPackInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@@Z ; NArchive::N7z::CInArchive::ReadPackInfo
; Line 947
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$[ebp], eax
	mov	DWORD PTR _type$[ebp+4], edx
$LN9@ReadStream:
; Line 950
	cmp	DWORD PTR _type$[ebp], 7
	jne	SHORT $LN8@ReadStream
	cmp	DWORD PTR _type$[ebp+4], 0
	jne	SHORT $LN8@ReadStream
; Line 952
	mov	eax, DWORD PTR _folders$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataVector$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUnpackInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AAUCFolders@23@@Z ; NArchive::N7z::CInArchive::ReadUnpackInfo
; Line 953
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$[ebp], eax
	mov	DWORD PTR _type$[ebp+4], edx
$LN8@ReadStream:
; Line 956
	mov	edx, DWORD PTR _folders$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN7@ReadStream
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 8
	call	??B?$CObjArray@_K@@QAEPA_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 *
	test	eax, eax
	jne	SHORT $LN7@ReadStream
; Line 959
	push	1
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 8
	call	?Alloc@?$CObjArray@_K@@QAEXI@Z		; CObjArray<unsigned __int64>::Alloc
; Line 960
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 8
	call	??B?$CObjArray@_K@@QAEPA_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 *
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
$LN7@ReadStream:
; Line 963
	cmp	DWORD PTR _type$[ebp], 8
	jne	SHORT $LN6@ReadStream
	cmp	DWORD PTR _type$[ebp+4], 0
	jne	SHORT $LN6@ReadStream
; Line 965
	mov	eax, DWORD PTR _digests$[ebp]
	push	eax
	mov	ecx, DWORD PTR _unpackSizes$[ebp]
	push	ecx
	mov	edx, DWORD PTR _folders$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadSubStreamsInfo@CInArchive@N7z@NArchive@@AAEXAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z ; NArchive::N7z::CInArchive::ReadSubStreamsInfo
; Line 966
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$[ebp], eax
	mov	DWORD PTR _type$[ebp+4], edx
; Line 968
	jmp	SHORT $LN5@ReadStream
$LN6@ReadStream:
; Line 970
	mov	eax, DWORD PTR _folders$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 36					; 00000024H
	call	?Alloc@?$CObjArray@I@@QAEXI@Z		; CObjArray<unsigned int>::Alloc
; Line 975
	mov	DWORD PTR _i$73787[ebp], 0
	jmp	SHORT $LN4@ReadStream
$LN3@ReadStream:
	mov	edx, DWORD PTR _i$73787[ebp]
	add	edx, 1
	mov	DWORD PTR _i$73787[ebp], edx
$LN4@ReadStream:
	mov	eax, DWORD PTR _folders$[ebp]
	mov	ecx, DWORD PTR _i$73787[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jae	SHORT $LN5@ReadStream
; Line 977
	mov	ecx, DWORD PTR _folders$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	edx, DWORD PTR _i$73787[ebp]
	mov	DWORD PTR [eax+edx*4], 1
; Line 978
	mov	eax, DWORD PTR _i$73787[ebp]
	push	eax
	mov	ecx, DWORD PTR _folders$[ebp]
	call	?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetFolderUnpackSize
	push	edx
	push	eax
	mov	ecx, DWORD PTR _unpackSizes$[ebp]
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 980
	jmp	SHORT $LN3@ReadStream
$LN5@ReadStream:
; Line 983
	mov	ecx, DWORD PTR _type$[ebp]
	or	ecx, DWORD PTR _type$[ebp+4]
	je	SHORT $LN10@ReadStream
; Line 984
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN10@ReadStream:
; Line 985
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
?ReadStreamsInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AA_KAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z ENDP ; NArchive::N7z::CInArchive::ReadStreamsInfo
_TEXT	ENDS
PUBLIC	?ReadBoolVector@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$73800 = -16						; size = 4
_p$ = -12						; size = 4
_mask$ = -6						; size = 1
_b$ = -5						; size = 1
_this$ = -4						; size = 4
_numItems$ = 8						; size = 4
_v$ = 12						; size = 4
?ReadBoolVector@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z PROC ; NArchive::N7z::CInArchive::ReadBoolVector
; _this$ = ecx
; Line 988
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 989
	mov	eax, DWORD PTR _numItems$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize
; Line 990
	mov	BYTE PTR _b$[ebp], 0
; Line 991
	mov	BYTE PTR _mask$[ebp], 0
; Line 992
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	DWORD PTR _p$[ebp], eax
; Line 993
	mov	DWORD PTR _i$73800[ebp], 0
	jmp	SHORT $LN4@ReadBoolVe
$LN3@ReadBoolVe:
	mov	ecx, DWORD PTR _i$73800[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$73800[ebp], ecx
$LN4@ReadBoolVe:
	mov	edx, DWORD PTR _i$73800[ebp]
	cmp	edx, DWORD PTR _numItems$[ebp]
	jae	SHORT $LN5@ReadBoolVe
; Line 995
	movzx	eax, BYTE PTR _mask$[ebp]
	test	eax, eax
	jne	SHORT $LN1@ReadBoolVe
; Line 997
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ ; NArchive::N7z::CInArchive::ReadByte
	mov	BYTE PTR _b$[ebp], al
; Line 998
	mov	BYTE PTR _mask$[ebp], 128		; 00000080H
$LN1@ReadBoolVe:
; Line 1000
	movzx	ecx, BYTE PTR _b$[ebp]
	movzx	edx, BYTE PTR _mask$[ebp]
	and	ecx, edx
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _i$73800[ebp]
	mov	BYTE PTR [eax], cl
; Line 1001
	mov	cl, BYTE PTR _mask$[ebp]
	shr	cl, 1
	mov	BYTE PTR _mask$[ebp], cl
; Line 1002
	jmp	SHORT $LN3@ReadBoolVe
$LN5@ReadBoolVe:
; Line 1003
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ReadBoolVector@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ENDP ; NArchive::N7z::CInArchive::ReadBoolVector
; Function compile flags: /Odtp /RTCsu
_i$73813 = -16						; size = 4
_p$ = -12						; size = 4
_allAreDefined$ = -5					; size = 1
_this$ = -4						; size = 4
_numItems$ = 8						; size = 4
_v$ = 12						; size = 4
?ReadBoolVector2@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z PROC ; NArchive::N7z::CInArchive::ReadBoolVector2
; _this$ = ecx
; Line 1006
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1007
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ ; NArchive::N7z::CInArchive::ReadByte
	mov	BYTE PTR _allAreDefined$[ebp], al
; Line 1008
	movzx	eax, BYTE PTR _allAreDefined$[ebp]
	test	eax, eax
	jne	SHORT $LN4@ReadBoolVe@2
; Line 1010
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _numItems$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBoolVector@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector
; Line 1011
	jmp	SHORT $LN5@ReadBoolVe@2
$LN4@ReadBoolVe@2:
; Line 1013
	mov	eax, DWORD PTR _numItems$[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize
; Line 1014
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	DWORD PTR _p$[ebp], eax
; Line 1015
	mov	DWORD PTR _i$73813[ebp], 0
	jmp	SHORT $LN3@ReadBoolVe@2
$LN2@ReadBoolVe@2:
	mov	ecx, DWORD PTR _i$73813[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$73813[ebp], ecx
$LN3@ReadBoolVe@2:
	mov	edx, DWORD PTR _i$73813[ebp]
	cmp	edx, DWORD PTR _numItems$[ebp]
	jae	SHORT $LN5@ReadBoolVe@2
; Line 1016
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _i$73813[ebp]
	mov	BYTE PTR [eax], 1
	jmp	SHORT $LN2@ReadBoolVe@2
$LN5@ReadBoolVe@2:
; Line 1017
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ReadBoolVector2@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ENDP ; NArchive::N7z::CInArchive::ReadBoolVector2
_TEXT	ENDS
PUBLIC	?ReadUInt64@CInArchive@N7z@NArchive@@AAE_KXZ	; NArchive::N7z::CInArchive::ReadUInt64
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z	; CRecordVector<unsigned __int64>::ClearAndSetSize
PUBLIC	?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z ; NArchive::N7z::CInArchive::ReadUInt64DefVector
xdata$x	SEGMENT
__unwindtable$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z$0
__ehfuncinfo$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_t$73831 = -52						; size = 8
_i$73827 = -44						; size = 4
_defs$ = -40						; size = 4
_p$ = -36						; size = 4
_streamSwitch$ = -28					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_dataVector$ = 8					; size = 4
_v$ = 12						; size = 4
_numItems$ = 16						; size = 4
?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z PROC ; NArchive::N7z::CInArchive::ReadUInt64DefVector
; _this$ = ecx
; Line 1021
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1022
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _numItems$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBoolVector2@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector2
; Line 1024
	lea	ecx, DWORD PTR _streamSwitch$[ebp]
	call	??0CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::CStreamSwitch
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1025
	mov	edx, DWORD PTR _dataVector$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _streamSwitch$[ebp]
	call	?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBV?$CObjectVector@V?$CBuffer@E@@@@@Z ; NArchive::N7z::CStreamSwitch::Set
; Line 1027
	mov	ecx, DWORD PTR _numItems$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndSetSize
; Line 1028
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	DWORD PTR _p$[ebp], eax
; Line 1029
	push	0
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	DWORD PTR _defs$[ebp], eax
; Line 1031
	mov	DWORD PTR _i$73827[ebp], 0
	jmp	SHORT $LN4@ReadUInt64@2
$LN3@ReadUInt64@2:
	mov	edx, DWORD PTR _i$73827[ebp]
	add	edx, 1
	mov	DWORD PTR _i$73827[ebp], edx
$LN4@ReadUInt64@2:
	mov	eax, DWORD PTR _i$73827[ebp]
	cmp	eax, DWORD PTR _numItems$[ebp]
	jae	SHORT $LN2@ReadUInt64@2
; Line 1033
	mov	DWORD PTR _t$73831[ebp], 0
	mov	DWORD PTR _t$73831[ebp+4], 0
; Line 1034
	mov	ecx, DWORD PTR _defs$[ebp]
	add	ecx, DWORD PTR _i$73827[ebp]
	movzx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN1@ReadUInt64@2
; Line 1035
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt64@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadUInt64
	mov	DWORD PTR _t$73831[ebp], eax
	mov	DWORD PTR _t$73831[ebp+4], edx
$LN1@ReadUInt64@2:
; Line 1036
	mov	eax, DWORD PTR _i$73827[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _t$73831[ebp]
	mov	DWORD PTR [ecx+eax*8], edx
	mov	edx, DWORD PTR _t$73831[ebp+4]
	mov	DWORD PTR [ecx+eax*8+4], edx
; Line 1037
	jmp	SHORT $LN3@ReadUInt64@2
$LN2@ReadUInt64@2:
; Line 1038
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _streamSwitch$[ebp]
	call	??1CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::~CStreamSwitch
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@ReadUInt64@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN11@ReadUInt64@2:
	DD	1
	DD	$LN10@ReadUInt64@2
$LN10@ReadUInt64@2:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN8@ReadUInt64@2
$LN8@ReadUInt64@2:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z$0:
	lea	ecx, DWORD PTR _streamSwitch$[ebp]
	jmp	??1CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::~CStreamSwitch
__ehhandler$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z ENDP ; NArchive::N7z::CInArchive::ReadUInt64DefVector
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReadUInt64@CInArchive@N7z@NArchive@@AAE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReadUInt64@CInArchive@N7z@NArchive@@AAE_KXZ PROC	; NArchive::N7z::CInArchive::ReadUInt64, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 365
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?ReadUInt64@CInByte2@N7z@NArchive@@QAE_KXZ ; NArchive::N7z::CInByte2::ReadUInt64
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadUInt64@CInArchive@N7z@NArchive@@AAE_KXZ ENDP	; NArchive::N7z::CInArchive::ReadUInt64
_TEXT	ENDS
PUBLIC	??1CFolders@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFolders::~CFolders
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
PUBLIC	??1CDecoder@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CDecoder::~CDecoder
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z		; CBufPtrSeqOutStream::Init
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0CBufPtrSeqOutStream@@QAE@XZ			; CBufPtrSeqOutStream::CBufPtrSeqOutStream
PUBLIC	?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ ; CObjectVector<CBuffer<unsigned char> >::AddNew
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	??0CFolders@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFolders::CFolders
PUBLIC	?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z:PROC ; NArchive::N7z::CDecoder::Decode
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	??0CDecoder@N7z@NArchive@@QAE@_N@Z:PROC		; NArchive::N7z::CDecoder::CDecoder
xdata$x	SEGMENT
__ehfuncinfo$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv135 = -344						; size = 4
tv220 = -340						; size = 8
$T75453 = -332						; size = 4
$T75452 = -328						; size = 4
$T75449 = -324						; size = 4
$T75448 = -320						; size = 4
___result__$73866 = -316				; size = 4
_result$73865 = -312					; size = 4
_outStream$73864 = -304					; size = 4
_outStreamSpec$73858 = -296				; size = 4
_unpackSize$73855 = -292				; size = 4
_unpackSize64$73854 = -288				; size = 8
_data$73853 = -280					; size = 4
_i$73849 = -276						; size = 4
_decoder$ = -268					; size = 100
_digests$ = -160					; size = 24
_unpackSizes$ = -128					; size = 12
_folders$ = -108					; size = 88
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_baseOffset$ = 8					; size = 8
_dataOffset$ = 16					; size = 4
_dataVector$ = 20					; size = 4
_getTextPassword$ = 24					; size = 4
_isEncrypted$ = 28					; size = 4
_passwordIsDefined$ = 32				; size = 4
_password$ = 36						; size = 4
?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z PROC ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.cpp
; Line 1046
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 332				; 0000014cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-344]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1047
	lea	ecx, DWORD PTR _folders$[ebp]
	call	??0CFolders@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1048
	lea	ecx, DWORD PTR _unpackSizes$[ebp]
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 1049
	lea	ecx, DWORD PTR _digests$[ebp]
	call	??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 1055
	lea	eax, DWORD PTR _digests$[ebp]
	push	eax
	lea	ecx, DWORD PTR _unpackSizes$[ebp]
	push	ecx
	lea	edx, DWORD PTR _folders$[ebp]
	push	edx
	mov	eax, DWORD PTR _dataOffset$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadStreamsInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AA_KAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z ; NArchive::N7z::CInArchive::ReadStreamsInfo
; Line 1057
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+120]
	push	edx
	lea	ecx, DWORD PTR _decoder$[ebp]
	call	??0CDecoder@N7z@NArchive@@QAE@_N@Z	; NArchive::N7z::CDecoder::CDecoder
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 1059
	mov	DWORD PTR _i$73849[ebp], 0
	jmp	SHORT $LN7@ReadAndDec
$LN6@ReadAndDec:
	mov	eax, DWORD PTR _i$73849[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73849[ebp], eax
$LN7@ReadAndDec:
	mov	ecx, DWORD PTR _i$73849[ebp]
	cmp	ecx, DWORD PTR _folders$[ebp+4]
	jae	$LN5@ReadAndDec
; Line 1061
	mov	ecx, DWORD PTR _dataVector$[ebp]
	call	?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ ; CObjectVector<CBuffer<unsigned char> >::AddNew
	mov	DWORD PTR _data$73853[ebp], eax
; Line 1062
	mov	edx, DWORD PTR _i$73849[ebp]
	push	edx
	lea	ecx, DWORD PTR _folders$[ebp]
	call	?GetFolderUnpackSize@CFolders@N7z@NArchive@@QBE_KI@Z ; NArchive::N7z::CFolders::GetFolderUnpackSize
	mov	DWORD PTR _unpackSize64$73854[ebp], eax
	mov	DWORD PTR _unpackSize64$73854[ebp+4], edx
; Line 1063
	mov	eax, DWORD PTR _unpackSize64$73854[ebp]
	mov	DWORD PTR _unpackSize$73855[ebp], eax
; Line 1064
	mov	ecx, DWORD PTR _unpackSize$73855[ebp]
	xor	edx, edx
	mov	DWORD PTR tv220[ebp], ecx
	mov	DWORD PTR tv220[ebp+4], edx
	mov	eax, DWORD PTR tv220[ebp]
	cmp	eax, DWORD PTR _unpackSize64$73854[ebp]
	jne	SHORT $LN18@ReadAndDec
	mov	ecx, DWORD PTR tv220[ebp+4]
	cmp	ecx, DWORD PTR _unpackSize64$73854[ebp+4]
	je	SHORT $LN4@ReadAndDec
$LN18@ReadAndDec:
; Line 1065
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN4@ReadAndDec:
; Line 1066
	mov	edx, DWORD PTR _unpackSize$73855[ebp]
	push	edx
	mov	ecx, DWORD PTR _data$73853[ebp]
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 1068
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75449[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	cmp	DWORD PTR $T75449[ebp], 0
	je	SHORT $LN10@ReadAndDec
	mov	ecx, DWORD PTR $T75449[ebp]
	call	??0CBufPtrSeqOutStream@@QAE@XZ
	mov	DWORD PTR tv135[ebp], eax
	jmp	SHORT $LN11@ReadAndDec
$LN10@ReadAndDec:
	mov	DWORD PTR tv135[ebp], 0
$LN11@ReadAndDec:
	mov	eax, DWORD PTR tv135[ebp]
	mov	DWORD PTR $T75448[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR $T75448[ebp]
	mov	DWORD PTR _outStreamSpec$73858[ebp], ecx
; Line 1069
	mov	edx, DWORD PTR _outStreamSpec$73858[ebp]
	push	edx
	lea	ecx, DWORD PTR _outStream$73864[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 1070
	mov	eax, DWORD PTR _unpackSize$73855[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$73853[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	mov	ecx, DWORD PTR _outStreamSpec$73858[ebp]
	call	?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z	; CBufPtrSeqOutStream::Init
; Line 1087
	push	1
	push	0
	mov	ecx, DWORD PTR _password$[ebp]
	push	ecx
	mov	edx, DWORD PTR _passwordIsDefined$[ebp]
	push	edx
	mov	eax, DWORD PTR _isEncrypted$[ebp]
	push	eax
	mov	ecx, DWORD PTR _getTextPassword$[ebp]
	push	ecx
	push	0
	push	0
	lea	ecx, DWORD PTR _outStream$73864[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	push	0
	mov	edx, DWORD PTR _i$73849[ebp]
	push	edx
	lea	eax, DWORD PTR _folders$[ebp]
	push	eax
	mov	ecx, DWORD PTR _dataOffset$[ebp]
	mov	edx, DWORD PTR _baseOffset$[ebp]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _baseOffset$[ebp+4]
	adc	eax, DWORD PTR [ecx+4]
	push	eax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	lea	ecx, DWORD PTR _decoder$[ebp]
	call	?Decode@CDecoder@N7z@NArchive@@QAEJPAUIInStream@@_KABUCFolders@23@IPB_KPAUISequentialOutStream@@PAUICompressProgressInfo@@PAPAUISequentialInStream@@PAUICryptoGetTextPassword@@AA_N8AAVUString@@_NI@Z ; NArchive::N7z::CDecoder::Decode
	mov	DWORD PTR _result$73865[ebp], eax
; Line 1088
	mov	ecx, DWORD PTR _result$73865[ebp]
	mov	DWORD PTR ___result__$73866[ebp], ecx
	cmp	DWORD PTR ___result__$73866[ebp], 0
	je	SHORT $LN3@ReadAndDec
	mov	edx, DWORD PTR ___result__$73866[ebp]
	mov	DWORD PTR $T75452[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _outStream$73864[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _decoder$[ebp]
	call	??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _digests$[ebp]
	call	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _unpackSizes$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folders$[ebp]
	call	??1CFolders@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T75452[ebp]
	jmp	$LN8@ReadAndDec
$LN3@ReadAndDec:
; Line 1090
	mov	eax, DWORD PTR _i$73849[ebp]
	push	eax
	lea	ecx, DWORD PTR _folders$[ebp+12]
	call	?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt32DefVector::ValidAndDefined
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@ReadAndDec
; Line 1091
	mov	ecx, DWORD PTR _data$73853[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	edx, DWORD PTR _unpackSize$73855[ebp]
	mov	ecx, eax
	call	@CrcCalc@8
	mov	esi, eax
	mov	edx, DWORD PTR _i$73849[ebp]
	push	edx
	lea	ecx, DWORD PTR _folders$[ebp+24]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	cmp	esi, DWORD PTR [eax]
	je	SHORT $LN2@ReadAndDec
; Line 1092
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN2@ReadAndDec:
; Line 1093
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _outStream$73864[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	jmp	$LN6@ReadAndDec
$LN5@ReadAndDec:
; Line 1094
	lea	ecx, DWORD PTR _folders$[ebp+8]
	call	??B?$CObjArray@_K@@QAEPA_KXZ		; CObjArray<unsigned __int64>::operator unsigned __int64 *
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _folders$[ebp]
	mov	esi, DWORD PTR [ecx+112]
	add	esi, DWORD PTR [eax+edx*8]
	mov	ecx, DWORD PTR [ecx+116]
	adc	ecx, DWORD PTR [eax+edx*8+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+112], esi
	mov	DWORD PTR [edx+116], ecx
; Line 1095
	mov	DWORD PTR $T75453[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _decoder$[ebp]
	call	??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _digests$[ebp]
	call	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _unpackSizes$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _folders$[ebp]
	call	??1CFolders@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T75453[ebp]
$LN8@ReadAndDec:
; Line 1096
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN26@ReadAndDec
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 344				; 00000158H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	32					; 00000020H
$LN26@ReadAndDec:
	DD	5
	DD	$LN25@ReadAndDec
$LN25@ReadAndDec:
	DD	-108					; ffffff94H
	DD	88					; 00000058H
	DD	$LN19@ReadAndDec
	DD	-128					; ffffff80H
	DD	12					; 0000000cH
	DD	$LN20@ReadAndDec
	DD	-160					; ffffff60H
	DD	24					; 00000018H
	DD	$LN21@ReadAndDec
	DD	-268					; fffffef4H
	DD	100					; 00000064H
	DD	$LN22@ReadAndDec
	DD	-304					; fffffed0H
	DD	4
	DD	$LN23@ReadAndDec
$LN23@ReadAndDec:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN22@ReadAndDec:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN21@ReadAndDec:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN20@ReadAndDec:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN19@ReadAndDec:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$0:
	lea	ecx, DWORD PTR _folders$[ebp]
	jmp	??1CFolders@N7z@NArchive@@QAE@XZ
__unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$1:
	lea	ecx, DWORD PTR _unpackSizes$[ebp]
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$2:
	lea	ecx, DWORD PTR _digests$[ebp]
	jmp	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$3:
	lea	ecx, DWORD PTR _decoder$[ebp]
	jmp	??1CDecoder@N7z@NArchive@@QAE@XZ
__unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$4:
	mov	eax, DWORD PTR $T75449[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z$5:
	lea	ecx, DWORD PTR _outStream$73864[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__ehhandler$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-344]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z ENDP ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z PROC		; CBufPtrSeqOutStream::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 106
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 107
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 108
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 109
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 110
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CBufPtrSeqOutStream@@QAEXPAEI@Z ENDP		; CBufPtrSeqOutStream::Init
_TEXT	ENDS
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
PUBLIC	??1?$CObjArray@I@@QAE@XZ			; CObjArray<unsigned int>::~CObjArray<unsigned int>
PUBLIC	??1?$CObjArray@_K@@QAE@XZ			; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>
PUBLIC	??0CParsedMethods@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CParsedMethods::CParsedMethods
PUBLIC	??0?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::CBuffer<unsigned char>
PUBLIC	??0?$CObjArray@E@@QAE@XZ			; CObjArray<unsigned char>::CObjArray<unsigned char>
PUBLIC	??0?$CObjArray@I@@QAE@XZ			; CObjArray<unsigned int>::CObjArray<unsigned int>
PUBLIC	??0?$CObjArray@_K@@QAE@XZ			; CObjArray<unsigned __int64>::CObjArray<unsigned __int64>
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??0CFolders@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??0CFolders@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??0CFolders@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$8
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CFolders@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFolders@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFolders::CFolders, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFolders@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CObjArray@_K@@QAE@XZ		; CObjArray<unsigned __int64>::CObjArray<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CObjArray@_K@@QAE@XZ		; CObjArray<unsigned __int64>::CObjArray<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??0?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??0?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??0?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??0CParsedMethods@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CParsedMethods::CParsedMethods
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CObjArray@_K@@QAE@XZ		; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>
__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CObjArray@_K@@QAE@XZ		; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>
__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
__unwindfunclet$??0CFolders@N7z@NArchive@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__ehhandler$??0CFolders@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFolders@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFolders@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFolders::CFolders
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CParsedMethods@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CParsedMethods@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CParsedMethods::CParsedMethods, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CParsedMethods@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CParsedMethods::CParsedMethods
_TEXT	ENDS
PUBLIC	??1CParsedMethods@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CParsedMethods::~CParsedMethods
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1CFolders@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	09H
	DD	FLAT:__unwindtable$??1CFolders@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$??1CFolders@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$3
	DD	03H
	DD	FLAT:__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$4
	DD	04H
	DD	FLAT:__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$5
	DD	05H
	DD	FLAT:__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$6
	DD	06H
	DD	FLAT:__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$7
	DD	07H
	DD	FLAT:__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$8
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CFolders@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CFolders@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFolders::~CFolders, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CFolders@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 8
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 68					; 00000044H
	call	??1CParsedMethods@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CObjArray@_K@@QAE@XZ		; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CObjArray@_K@@QAE@XZ		; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CObjArray@_K@@QAE@XZ		; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>
__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CObjArray@_K@@QAE@XZ		; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>
__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$4:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	jmp	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$5:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	jmp	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$6:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	jmp	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$7:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	jmp	??1?$CObjArray@I@@QAE@XZ		; CObjArray<unsigned int>::~CObjArray<unsigned int>
__unwindfunclet$??1CFolders@N7z@NArchive@@QAE@XZ$8:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__ehhandler$??1CFolders@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CFolders@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CFolders@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFolders::~CFolders
PUBLIC	??1CBindInfoEx@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CBindInfoEx::~CBindInfoEx
PUBLIC	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CDecoder@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CDecoder@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CDecoder@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CDecoder@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDecoder@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CDecoder::~CDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CDecoder@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	jmp	??1CBindInfoEx@N7z@NArchive@@QAE@XZ
__ehhandler$??1CDecoder@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDecoder@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDecoder@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CDecoder::~CDecoder
PUBLIC	??_7CBufPtrSeqOutStream@@6B@			; CBufPtrSeqOutStream::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4CBufPtrSeqOutStream@@6B@			; CBufPtrSeqOutStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBufPtrSeqOutStream@@@8			; CBufPtrSeqOutStream `RTTI Type Descriptor'
PUBLIC	??_R3CBufPtrSeqOutStream@@8			; CBufPtrSeqOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBufPtrSeqOutStream@@8			; CBufPtrSeqOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBufPtrSeqOutStream@@8		; CBufPtrSeqOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z ; CBufPtrSeqOutStream::QueryInterface
PUBLIC	?AddRef@CBufPtrSeqOutStream@@UAGKXZ		; CBufPtrSeqOutStream::AddRef
PUBLIC	?Release@CBufPtrSeqOutStream@@UAGKXZ		; CBufPtrSeqOutStream::Release
EXTRN	?Write@CBufPtrSeqOutStream@@UAGJPBXIPAI@Z:PROC	; CBufPtrSeqOutStream::Write
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBufPtrSeqOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBufPtrSeqOutStream@@8 DD FLAT:??_R0?AVCBufPtrSeqOutStream@@@8 ; CBufPtrSeqOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBufPtrSeqOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CBufPtrSeqOutStream@@8
rdata$r	SEGMENT
??_R2CBufPtrSeqOutStream@@8 DD FLAT:??_R1A@?0A@EA@CBufPtrSeqOutStream@@8 ; CBufPtrSeqOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CBufPtrSeqOutStream@@8
rdata$r	SEGMENT
??_R3CBufPtrSeqOutStream@@8 DD 00H			; CBufPtrSeqOutStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CBufPtrSeqOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBufPtrSeqOutStream@@@8
_DATA	SEGMENT
??_R0?AVCBufPtrSeqOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; CBufPtrSeqOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBufPtrSeqOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBufPtrSeqOutStream@@6B@
rdata$r	SEGMENT
??_R4CBufPtrSeqOutStream@@6B@ DD 00H			; CBufPtrSeqOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBufPtrSeqOutStream@@@8
	DD	FLAT:??_R3CBufPtrSeqOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7CBufPtrSeqOutStream@@6B@
CONST	SEGMENT
??_7CBufPtrSeqOutStream@@6B@ DD FLAT:??_R4CBufPtrSeqOutStream@@6B@ ; CBufPtrSeqOutStream::`vftable'
	DD	FLAT:?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBufPtrSeqOutStream@@UAGKXZ
	DD	FLAT:?Release@CBufPtrSeqOutStream@@UAGKXZ
	DD	FLAT:?Write@CBufPtrSeqOutStream@@UAGJPBXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CBufPtrSeqOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBufPtrSeqOutStream@@QAE@XZ PROC			; CBufPtrSeqOutStream::CBufPtrSeqOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBufPtrSeqOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBufPtrSeqOutStream@@QAE@XZ ENDP			; CBufPtrSeqOutStream::CBufPtrSeqOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_ISequentialOutStream:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CBufPtrSeqOutStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 113
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_ISequentialOutStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter
$LN3@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBufPtrSeqOutStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBufPtrSeqOutStream::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBufPtrSeqOutStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBufPtrSeqOutStream@@UAGKXZ PROC		; CBufPtrSeqOutStream::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 113
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBufPtrSeqOutStream@@UAGKXZ ENDP		; CBufPtrSeqOutStream::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CBufPtrSeqOutStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T75540 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBufPtrSeqOutStream@@UAGKXZ PROC		; CBufPtrSeqOutStream::Release, COMDAT
; Line 113
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T75540[ebp], edx
	mov	eax, DWORD PTR $T75540[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBufPtrSeqOutStream@@UAGKXZ ENDP		; CBufPtrSeqOutStream::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CParsedMethods@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CParsedMethods@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CParsedMethods::~CParsedMethods, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CParsedMethods@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CParsedMethods::~CParsedMethods
_TEXT	ENDS
PUBLIC	??1CBindInfo@NCoderMixer2@@QAE@XZ		; NCoderMixer2::CBindInfo::~CBindInfo
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBindInfoEx@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBindInfoEx@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CBindInfoEx::~CBindInfoEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBindInfo@NCoderMixer2@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBindInfoEx@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CBindInfo@NCoderMixer2@@QAE@XZ
__ehhandler$??1CBindInfoEx@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBindInfoEx@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBindInfoEx@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CBindInfoEx::~CBindInfoEx
PUBLIC	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
PUBLIC	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3
__ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??1CBindInfo@NCoderMixer2@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CBindInfo@NCoderMixer2@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CBindInfo@NCoderMixer2@@QAE@XZ PROC			; NCoderMixer2::CBindInfo::~CBindInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$2:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$??1CBindInfo@NCoderMixer2@@QAE@XZ$3:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??1CBindInfo@NCoderMixer2@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CBindInfo@NCoderMixer2@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CBindInfo@NCoderMixer2@@QAE@XZ ENDP			; NCoderMixer2::CBindInfo::~CBindInfo
PUBLIC	?FillLinks@CDbEx@N7z@NArchive@@QAEXXZ		; NArchive::N7z::CDbEx::FillLinks
PUBLIC	?Add@?$CRecordVector@_N@@QAEI_N@Z		; CRecordVector<bool>::Add
PUBLIC	?SkipRem@CInByte2@N7z@NArchive@@QAEXXZ		; NArchive::N7z::CInByte2::SkipRem
PUBLIC	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
PUBLIC	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
PUBLIC	?ReadBytes@CInArchive@N7z@NArchive@@AAEXPAEI@Z	; NArchive::N7z::CInArchive::ReadBytes
PUBLIC	?IsEmpty@?$CRecordVector@_N@@QBE_NXZ		; CRecordVector<bool>::IsEmpty
PUBLIC	?ClearAndSetSize@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z ; CRecordVector<NArchive::N7z::CFileItem>::ClearAndSetSize
PUBLIC	?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CFileItem>::Clear
PUBLIC	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ	; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
PUBLIC	??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ	; CObjectVector<CBuffer<unsigned char> >::CObjectVector<CBuffer<unsigned char> >
PUBLIC	?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z ; NArchive::N7z::CInArchive::ReadHeader
xdata$x	SEGMENT
__ehfuncinfo$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z DD 019930522H
	DD	0aH
	DD	FLAT:__unwindtable$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$7
	DD	06H
	DD	FLAT:__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$8
	DD	08H
	DD	FLAT:__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$9
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv225 = -340						; size = 4
tv654 = -336						; size = 8
$T75570 = -328						; size = 4
$T75569 = -324						; size = 4
_isAnti$73999 = -317					; size = 1
_file$73998 = -316					; size = 4
_numAntiItems$73990 = -312				; size = 4
_sizeIndex$73989 = -308					; size = 4
_emptyFileIndex$73988 = -304				; size = 4
_j$73977 = -300						; size = 8
_file$73958 = -292					; size = 4
_streamSwitch$73954 = -284				; size = 8
_boolVector$73953 = -268				; size = 12
_j$73946 = -252						; size = 4
_buf$73944 = -248					; size = 4
_curRem$73943 = -244					; size = 4
_i$73939 = -240						; size = 4
_pos$73938 = -236					; size = 4
_rem$73937 = -232					; size = 4
_streamSwitch$73936 = -224				; size = 8
_isKnownType$73926 = -210				; size = 1
_addPropIdToList$73925 = -209				; size = 1
_switchProp$73923 = -204				; size = 8
_size$73921 = -192					; size = 8
_type$73919 = -184					; size = 8
_numEmptyStreams$73915 = -176				; size = 4
_antiFileVector$73914 = -168				; size = 12
_emptyFileVector$73913 = -148				; size = 12
_emptyStreamVector$73911 = -128				; size = 12
_i$73909 = -112						; size = 4
_numFiles$73908 = -108					; size = 4
_digests$ = -100					; size = 24
_unpackSizes$ = -68					; size = 12
___result__$73899 = -52					; size = 4
_result$73898 = -48					; size = 4
_dataVector$ = -40					; size = 12
_type$ = -24						; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_db$ = 8						; size = 4
_getTextPassword$ = 12					; size = 4
_isEncrypted$ = 16					; size = 4
_passwordIsDefined$ = 20				; size = 4
_password$ = 24						; size = 4
?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z PROC ; NArchive::N7z::CInArchive::ReadHeader
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.cpp
; Line 1103
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 328				; 00000148H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-340]
	mov	ecx, 82					; 00000052H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1104
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$[ebp], eax
	mov	DWORD PTR _type$[ebp+4], edx
; Line 1106
	cmp	DWORD PTR _type$[ebp], 2
	jne	SHORT $LN61@ReadHeader
	cmp	DWORD PTR _type$[ebp+4], 0
	jne	SHORT $LN61@ReadHeader
; Line 1108
	mov	eax, DWORD PTR _db$[ebp]
	add	eax, 224				; 000000e0H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadArchiveProperties@CInArchive@N7z@NArchive@@AAEXAAUCInArchiveInfo@23@@Z ; NArchive::N7z::CInArchive::ReadArchiveProperties
; Line 1109
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$[ebp], eax
	mov	DWORD PTR _type$[ebp+4], edx
$LN61@ReadHeader:
; Line 1112
	lea	ecx, DWORD PTR _dataVector$[ebp]
	call	??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::CObjectVector<CBuffer<unsigned char> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1114
	cmp	DWORD PTR _type$[ebp], 3
	jne	$LN60@ReadHeader
	cmp	DWORD PTR _type$[ebp+4], 0
	jne	$LN60@ReadHeader
; Line 1122
	mov	ecx, DWORD PTR _password$[ebp]
	push	ecx
	mov	edx, DWORD PTR _passwordIsDefined$[ebp]
	push	edx
	mov	eax, DWORD PTR _isEncrypted$[ebp]
	push	eax
	mov	ecx, DWORD PTR _getTextPassword$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dataVector$[ebp]
	push	edx
	mov	eax, DWORD PTR _db$[ebp]
	add	eax, 256				; 00000100H
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	mov	edx, DWORD PTR [ecx+244]
	push	edx
	mov	eax, DWORD PTR [ecx+240]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams
	mov	DWORD PTR _result$73898[ebp], eax
; Line 1123
	mov	ecx, DWORD PTR _result$73898[ebp]
	mov	DWORD PTR ___result__$73899[ebp], ecx
	cmp	DWORD PTR ___result__$73899[ebp], 0
	je	SHORT $LN59@ReadHeader
	mov	edx, DWORD PTR ___result__$73899[ebp]
	mov	DWORD PTR $T75569[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dataVector$[ebp]
	call	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
	mov	eax, DWORD PTR $T75569[ebp]
	jmp	$LN62@ReadHeader
$LN59@ReadHeader:
; Line 1124
	mov	eax, DWORD PTR _db$[ebp]
	mov	ecx, DWORD PTR _db$[ebp]
	mov	edx, DWORD PTR [eax+256]
	add	edx, DWORD PTR [ecx+240]
	mov	eax, DWORD PTR [eax+260]
	adc	eax, DWORD PTR [ecx+244]
	mov	ecx, DWORD PTR _db$[ebp]
	mov	DWORD PTR [ecx+256], edx
	mov	DWORD PTR [ecx+260], eax
; Line 1125
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$[ebp], eax
	mov	DWORD PTR _type$[ebp+4], edx
$LN60@ReadHeader:
; Line 1128
	lea	ecx, DWORD PTR _unpackSizes$[ebp]
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 1129
	lea	ecx, DWORD PTR _digests$[ebp]
	call	??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 1131
	cmp	DWORD PTR _type$[ebp], 4
	jne	SHORT $LN58@ReadHeader
	cmp	DWORD PTR _type$[ebp+4], 0
	jne	SHORT $LN58@ReadHeader
; Line 1137
	lea	edx, DWORD PTR _digests$[ebp]
	push	edx
	lea	eax, DWORD PTR _unpackSizes$[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	push	ecx
	mov	edx, DWORD PTR _db$[ebp]
	add	edx, 248				; 000000f8H
	push	edx
	lea	eax, DWORD PTR _dataVector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadStreamsInfo@CInArchive@N7z@NArchive@@AAEXPBV?$CObjectVector@V?$CBuffer@E@@@@AA_KAAUCFolders@23@AAV?$CRecordVector@_K@@AAUCUInt32DefVector@23@@Z ; NArchive::N7z::CInArchive::ReadStreamsInfo
; Line 1138
	mov	ecx, DWORD PTR _db$[ebp]
	mov	edx, DWORD PTR _db$[ebp]
	mov	eax, DWORD PTR [ecx+248]
	add	eax, DWORD PTR [edx+240]
	mov	ecx, DWORD PTR [ecx+252]
	adc	ecx, DWORD PTR [edx+244]
	mov	edx, DWORD PTR _db$[ebp]
	mov	DWORD PTR [edx+248], eax
	mov	DWORD PTR [edx+252], ecx
; Line 1139
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$[ebp], eax
	mov	DWORD PTR _type$[ebp+4], edx
$LN58@ReadHeader:
; Line 1142
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 88					; 00000058H
	call	?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CFileItem>::Clear
; Line 1144
	cmp	DWORD PTR _type$[ebp], 5
	jne	$LN57@ReadHeader
	cmp	DWORD PTR _type$[ebp+4], 0
	jne	$LN57@ReadHeader
; Line 1147
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNum@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadNum
	mov	DWORD PTR _numFiles$73908[ebp], eax
; Line 1148
	mov	eax, DWORD PTR _numFiles$73908[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 88					; 00000058H
	call	?ClearAndSetSize@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z ; CRecordVector<NArchive::N7z::CFileItem>::ClearAndSetSize
; Line 1157
	push	0
	push	9
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 264				; 00000108H
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 1159
	push	0
	push	6
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 264				; 00000108H
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 1160
	cmp	DWORD PTR _numFiles$73908[ebp], 0
	jbe	SHORT $LN56@ReadHeader
	lea	ecx, DWORD PTR _digests$[ebp]
	call	?IsEmpty@?$CRecordVector@_N@@QBE_NXZ	; CRecordVector<bool>::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN56@ReadHeader
; Line 1161
	push	0
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 264				; 00000108H
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
$LN56@ReadHeader:
; Line 1163
	lea	ecx, DWORD PTR _emptyStreamVector$73911[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 1164
	mov	edx, DWORD PTR _numFiles$73908[ebp]
	push	edx
	lea	eax, DWORD PTR _emptyStreamVector$73911[ebp]
	push	eax
	call	?BoolVector_Fill_False@N7z@NArchive@@YGXAAV?$CRecordVector@_N@@I@Z ; NArchive::N7z::BoolVector_Fill_False
; Line 1165
	lea	ecx, DWORD PTR _emptyFileVector$73913[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 1166
	lea	ecx, DWORD PTR _antiFileVector$73914[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 1167
	mov	DWORD PTR _numEmptyStreams$73915[ebp], 0
$LN55@ReadHeader:
; Line 1171
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$73919[ebp], eax
	mov	DWORD PTR _type$73919[ebp+4], edx
; Line 1172
	mov	ecx, DWORD PTR _type$73919[ebp]
	or	ecx, DWORD PTR _type$73919[ebp+4]
	jne	SHORT $LN53@ReadHeader
; Line 1173
	jmp	$LN54@ReadHeader
$LN53@ReadHeader:
; Line 1174
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadNumber@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadNumber
	mov	DWORD PTR _size$73921[ebp], eax
	mov	DWORD PTR _size$73921[ebp+4], edx
; Line 1175
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetRem@CInByte2@N7z@NArchive@@QBEIXZ	; NArchive::N7z::CInByte2::GetRem
	xor	ecx, ecx
	mov	DWORD PTR tv654[ebp], eax
	mov	DWORD PTR tv654[ebp+4], ecx
	mov	edx, DWORD PTR _size$73921[ebp+4]
	cmp	edx, DWORD PTR tv654[ebp+4]
	jb	SHORT $LN52@ReadHeader
	ja	SHORT $LN74@ReadHeader
	mov	eax, DWORD PTR _size$73921[ebp]
	cmp	eax, DWORD PTR tv654[ebp]
	jbe	SHORT $LN52@ReadHeader
$LN74@ReadHeader:
; Line 1176
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN52@ReadHeader:
; Line 1177
	lea	ecx, DWORD PTR _switchProp$73923[ebp]
	call	??0CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::CStreamSwitch
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 1178
	push	1
	mov	ecx, DWORD PTR _size$73921[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetPtr@CInByte2@N7z@NArchive@@QBEPBEXZ	; NArchive::N7z::CInByte2::GetPtr
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _switchProp$73923[ebp]
	call	?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBEI_N@Z ; NArchive::N7z::CStreamSwitch::Set
; Line 1179
	mov	BYTE PTR _addPropIdToList$73925[ebp], 1
; Line 1180
	mov	BYTE PTR _isKnownType$73926[ebp], 1
; Line 1181
	cmp	DWORD PTR _type$73919[ebp+4], 0
	ja	SHORT $LN75@ReadHeader
	cmp	DWORD PTR _type$73919[ebp], 1073741824	; 40000000H
	jbe	SHORT $LN51@ReadHeader
$LN75@ReadHeader:
; Line 1182
	mov	BYTE PTR _isKnownType$73926[ebp], 0
	jmp	$LN50@ReadHeader
$LN51@ReadHeader:
; Line 1183
	mov	ecx, DWORD PTR _type$73919[ebp]
	mov	DWORD PTR tv225[ebp], ecx
	mov	edx, DWORD PTR tv225[ebp]
	sub	edx, 14					; 0000000eH
	mov	DWORD PTR tv225[ebp], edx
	cmp	DWORD PTR tv225[ebp], 11		; 0000000bH
	ja	$LN17@ReadHeader
	mov	eax, DWORD PTR tv225[ebp]
	jmp	DWORD PTR $LN90@ReadHeader[eax*4]
$LN47@ReadHeader:
; Line 1187
	lea	ecx, DWORD PTR _streamSwitch$73936[ebp]
	call	??0CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::CStreamSwitch
	mov	BYTE PTR __$EHRec$[ebp+8], 7
; Line 1188
	lea	ecx, DWORD PTR _dataVector$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	ecx, DWORD PTR _streamSwitch$73936[ebp]
	call	?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBV?$CObjectVector@V?$CBuffer@E@@@@@Z ; NArchive::N7z::CStreamSwitch::Set
; Line 1189
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	call	?GetRem@CInByte2@N7z@NArchive@@QBEIXZ	; NArchive::N7z::CInByte2::GetRem
	mov	DWORD PTR _rem$73937[ebp], eax
; Line 1190
	mov	ecx, DWORD PTR _rem$73937[ebp]
	push	ecx
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 208				; 000000d0H
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 1191
	mov	edx, DWORD PTR _rem$73937[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 208				; 000000d0H
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBytes@CInArchive@N7z@NArchive@@AAEXPAEI@Z ; NArchive::N7z::CInArchive::ReadBytes
; Line 1192
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 216				; 000000d8H
	call	?Alloc@?$CObjArray@I@@QAEXI@Z		; CObjArray<unsigned int>::Alloc
; Line 1193
	mov	DWORD PTR _pos$73938[ebp], 0
; Line 1195
	mov	DWORD PTR _i$73939[ebp], 0
	jmp	SHORT $LN46@ReadHeader
$LN45@ReadHeader:
	mov	eax, DWORD PTR _i$73939[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73939[ebp], eax
$LN46@ReadHeader:
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	cmp	DWORD PTR _i$73939[ebp], eax
	jae	$LN44@ReadHeader
; Line 1197
	mov	ecx, DWORD PTR _rem$73937[ebp]
	sub	ecx, DWORD PTR _pos$73938[ebp]
	shr	ecx, 1
	mov	DWORD PTR _curRem$73943[ebp], ecx
; Line 1198
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 208				; 000000d0H
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	add	eax, DWORD PTR _pos$73938[ebp]
	mov	DWORD PTR _buf$73944[ebp], eax
; Line 1200
	mov	DWORD PTR _j$73946[ebp], 0
	jmp	SHORT $LN43@ReadHeader
$LN42@ReadHeader:
	mov	edx, DWORD PTR _j$73946[ebp]
	add	edx, 1
	mov	DWORD PTR _j$73946[ebp], edx
$LN43@ReadHeader:
	mov	eax, DWORD PTR _j$73946[ebp]
	cmp	eax, DWORD PTR _curRem$73943[ebp]
	jae	SHORT $LN41@ReadHeader
	mov	ecx, DWORD PTR _j$73946[ebp]
	mov	edx, DWORD PTR _buf$73944[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	je	SHORT $LN41@ReadHeader
	jmp	SHORT $LN42@ReadHeader
$LN41@ReadHeader:
; Line 1201
	mov	ecx, DWORD PTR _j$73946[ebp]
	cmp	ecx, DWORD PTR _curRem$73943[ebp]
	jne	SHORT $LN40@ReadHeader
; Line 1202
	call	?ThrowEndOfData@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowEndOfData
$LN40@ReadHeader:
; Line 1203
	mov	esi, DWORD PTR _pos$73938[ebp]
	shr	esi, 1
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 216				; 000000d8H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	edx, DWORD PTR _i$73939[ebp]
	mov	DWORD PTR [eax+edx*4], esi
; Line 1204
	mov	eax, DWORD PTR _j$73946[ebp]
	mov	ecx, DWORD PTR _pos$73938[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+2]
	mov	DWORD PTR _pos$73938[ebp], edx
; Line 1205
	jmp	$LN45@ReadHeader
$LN44@ReadHeader:
; Line 1206
	mov	esi, DWORD PTR _pos$73938[ebp]
	shr	esi, 1
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 216				; 000000d8H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$73939[ebp]
	mov	DWORD PTR [eax+ecx*4], esi
; Line 1207
	mov	edx, DWORD PTR _pos$73938[ebp]
	cmp	edx, DWORD PTR _rem$73937[ebp]
	je	SHORT $LN39@ReadHeader
; Line 1208
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+60], 1
$LN39@ReadHeader:
; Line 1209
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _streamSwitch$73936[ebp]
	call	??1CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::~CStreamSwitch
	jmp	$LN50@ReadHeader
$LN38@ReadHeader:
; Line 1213
	lea	ecx, DWORD PTR _boolVector$73953[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 8
; Line 1214
	lea	ecx, DWORD PTR _boolVector$73953[ebp]
	push	ecx
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBoolVector2@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector2
; Line 1215
	lea	ecx, DWORD PTR _streamSwitch$73954[ebp]
	call	??0CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::CStreamSwitch
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 1216
	lea	edx, DWORD PTR _dataVector$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR _streamSwitch$73954[ebp]
	call	?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@PBV?$CObjectVector@V?$CBuffer@E@@@@@Z ; NArchive::N7z::CStreamSwitch::Set
; Line 1217
	mov	DWORD PTR _i$73909[ebp], 0
	jmp	SHORT $LN37@ReadHeader
$LN36@ReadHeader:
	mov	ecx, DWORD PTR _i$73909[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$73909[ebp], ecx
$LN37@ReadHeader:
	mov	edx, DWORD PTR _i$73909[ebp]
	cmp	edx, DWORD PTR _numFiles$73908[ebp]
	jae	SHORT $LN35@ReadHeader
; Line 1219
	mov	eax, DWORD PTR _i$73909[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR _file$73958[ebp], eax
; Line 1220
	mov	ecx, DWORD PTR _i$73909[ebp]
	push	ecx
	lea	ecx, DWORD PTR _boolVector$73953[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	edx, DWORD PTR _file$73958[ebp]
	mov	al, BYTE PTR [eax]
	mov	BYTE PTR [edx+19], al
; Line 1221
	mov	ecx, DWORD PTR _file$73958[ebp]
	movzx	edx, BYTE PTR [ecx+19]
	test	edx, edx
	je	SHORT $LN34@ReadHeader
; Line 1222
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@N7z@NArchive@@AAEIXZ ; NArchive::N7z::CInArchive::ReadUInt32
	mov	ecx, DWORD PTR _file$73958[ebp]
	mov	DWORD PTR [ecx+8], eax
$LN34@ReadHeader:
; Line 1223
	jmp	SHORT $LN36@ReadHeader
$LN35@ReadHeader:
; Line 1224
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	lea	ecx, DWORD PTR _streamSwitch$73954[ebp]
	call	??1CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::~CStreamSwitch
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _boolVector$73953[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	jmp	$LN50@ReadHeader
$LN33@ReadHeader:
; Line 1258
	lea	edx, DWORD PTR _emptyStreamVector$73911[ebp]
	push	edx
	mov	eax, DWORD PTR _numFiles$73908[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBoolVector@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector
; Line 1259
	mov	DWORD PTR _numEmptyStreams$73915[ebp], 0
; Line 1260
	mov	DWORD PTR _i$73909[ebp], 0
	jmp	SHORT $LN32@ReadHeader
$LN31@ReadHeader:
	mov	ecx, DWORD PTR _i$73909[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$73909[ebp], ecx
$LN32@ReadHeader:
	lea	ecx, DWORD PTR _emptyStreamVector$73911[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _i$73909[ebp], eax
	jae	SHORT $LN30@ReadHeader
; Line 1261
	mov	edx, DWORD PTR _i$73909[ebp]
	push	edx
	lea	ecx, DWORD PTR _emptyStreamVector$73911[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN29@ReadHeader
; Line 1262
	mov	ecx, DWORD PTR _numEmptyStreams$73915[ebp]
	add	ecx, 1
	mov	DWORD PTR _numEmptyStreams$73915[ebp], ecx
$LN29@ReadHeader:
; Line 1264
	jmp	SHORT $LN31@ReadHeader
$LN30@ReadHeader:
	mov	edx, DWORD PTR _numEmptyStreams$73915[ebp]
	push	edx
	lea	eax, DWORD PTR _emptyFileVector$73913[ebp]
	push	eax
	call	?BoolVector_Fill_False@N7z@NArchive@@YGXAAV?$CRecordVector@_N@@I@Z ; NArchive::N7z::BoolVector_Fill_False
; Line 1265
	mov	ecx, DWORD PTR _numEmptyStreams$73915[ebp]
	push	ecx
	lea	edx, DWORD PTR _antiFileVector$73914[ebp]
	push	edx
	call	?BoolVector_Fill_False@N7z@NArchive@@YGXAAV?$CRecordVector@_N@@I@Z ; NArchive::N7z::BoolVector_Fill_False
; Line 1267
	jmp	$LN50@ReadHeader
$LN28@ReadHeader:
; Line 1269
	lea	eax, DWORD PTR _emptyFileVector$73913[ebp]
	push	eax
	mov	ecx, DWORD PTR _numEmptyStreams$73915[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBoolVector@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector
	jmp	$LN50@ReadHeader
$LN27@ReadHeader:
; Line 1270
	lea	edx, DWORD PTR _antiFileVector$73914[ebp]
	push	edx
	mov	eax, DWORD PTR _numEmptyStreams$73915[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBoolVector@CInArchive@N7z@NArchive@@AAEXIAAV?$CRecordVector@_N@@@Z ; NArchive::N7z::CInArchive::ReadBoolVector
	jmp	$LN50@ReadHeader
$LN26@ReadHeader:
; Line 1271
	mov	ecx, DWORD PTR _numFiles$73908[ebp]
	push	ecx
	mov	edx, DWORD PTR _db$[ebp]
	add	edx, 172				; 000000acH
	push	edx
	lea	eax, DWORD PTR _dataVector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z ; NArchive::N7z::CInArchive::ReadUInt64DefVector
	jmp	$LN50@ReadHeader
$LN25@ReadHeader:
; Line 1272
	mov	ecx, DWORD PTR _numFiles$73908[ebp]
	push	ecx
	mov	edx, DWORD PTR _db$[ebp]
	add	edx, 100				; 00000064H
	push	edx
	lea	eax, DWORD PTR _dataVector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z ; NArchive::N7z::CInArchive::ReadUInt64DefVector
	jmp	$LN50@ReadHeader
$LN24@ReadHeader:
; Line 1273
	mov	ecx, DWORD PTR _numFiles$73908[ebp]
	push	ecx
	mov	edx, DWORD PTR _db$[ebp]
	add	edx, 124				; 0000007cH
	push	edx
	lea	eax, DWORD PTR _dataVector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z ; NArchive::N7z::CInArchive::ReadUInt64DefVector
	jmp	$LN50@ReadHeader
$LN23@ReadHeader:
; Line 1274
	mov	ecx, DWORD PTR _numFiles$73908[ebp]
	push	ecx
	mov	edx, DWORD PTR _db$[ebp]
	add	edx, 148				; 00000094H
	push	edx
	lea	eax, DWORD PTR _dataVector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt64DefVector@CInArchive@N7z@NArchive@@AAEXABV?$CObjectVector@V?$CBuffer@E@@@@AAUCUInt64DefVector@23@I@Z ; NArchive::N7z::CInArchive::ReadUInt64DefVector
	jmp	$LN50@ReadHeader
$LN22@ReadHeader:
; Line 1277
	mov	DWORD PTR _j$73977[ebp], 0
	mov	DWORD PTR _j$73977[ebp+4], 0
	jmp	SHORT $LN21@ReadHeader
$LN20@ReadHeader:
	mov	ecx, DWORD PTR _j$73977[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _j$73977[ebp+4]
	adc	edx, 0
	mov	DWORD PTR _j$73977[ebp], ecx
	mov	DWORD PTR _j$73977[ebp+4], edx
$LN21@ReadHeader:
	mov	eax, DWORD PTR _j$73977[ebp+4]
	cmp	eax, DWORD PTR _size$73921[ebp+4]
	ja	SHORT $LN19@ReadHeader
	jb	SHORT $LN76@ReadHeader
	mov	ecx, DWORD PTR _j$73977[ebp]
	cmp	ecx, DWORD PTR _size$73921[ebp]
	jae	SHORT $LN19@ReadHeader
$LN76@ReadHeader:
; Line 1278
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadByte@CInArchive@N7z@NArchive@@AAEEXZ ; NArchive::N7z::CInArchive::ReadByte
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN18@ReadHeader
; Line 1279
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+60], 1
$LN18@ReadHeader:
; Line 1280
	jmp	SHORT $LN20@ReadHeader
$LN19@ReadHeader:
	mov	BYTE PTR _addPropIdToList$73925[ebp], 0
; Line 1281
	jmp	SHORT $LN50@ReadHeader
$LN17@ReadHeader:
; Line 1329
	mov	BYTE PTR _isKnownType$73926[ebp], 0
	mov	cl, BYTE PTR _isKnownType$73926[ebp]
	mov	BYTE PTR _addPropIdToList$73925[ebp], cl
$LN50@ReadHeader:
; Line 1331
	movzx	edx, BYTE PTR _isKnownType$73926[ebp]
	test	edx, edx
	je	SHORT $LN16@ReadHeader
; Line 1333
	movzx	eax, BYTE PTR _addPropIdToList$73925[ebp]
	test	eax, eax
	je	SHORT $LN15@ReadHeader
; Line 1334
	mov	ecx, DWORD PTR _type$73919[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _type$73919[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 264				; 00000108H
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
$LN15@ReadHeader:
; Line 1336
	jmp	SHORT $LN14@ReadHeader
$LN16@ReadHeader:
; Line 1338
	mov	eax, DWORD PTR _db$[ebp]
	mov	BYTE PTR [eax+309], 1
; Line 1339
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+56]
	call	?SkipRem@CInByte2@N7z@NArchive@@QAEXXZ	; NArchive::N7z::CInByte2::SkipRem
$LN14@ReadHeader:
; Line 1342
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?GetRem@CInByte2@N7z@NArchive@@QBEIXZ	; NArchive::N7z::CInByte2::GetRem
	test	eax, eax
	je	SHORT $LN13@ReadHeader
; Line 1343
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN13@ReadHeader:
; Line 1344
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _switchProp$73923[ebp]
	call	??1CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::~CStreamSwitch
	jmp	$LN55@ReadHeader
$LN54@ReadHeader:
; Line 1346
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$[ebp], eax
	mov	DWORD PTR _type$[ebp+4], edx
; Line 1348
	mov	esi, DWORD PTR _numFiles$73908[ebp]
	sub	esi, DWORD PTR _numEmptyStreams$73915[ebp]
	lea	ecx, DWORD PTR _unpackSizes$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	esi, eax
	je	SHORT $LN12@ReadHeader
; Line 1349
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN12@ReadHeader:
; Line 1351
	mov	DWORD PTR _emptyFileIndex$73988[ebp], 0
; Line 1352
	mov	DWORD PTR _sizeIndex$73989[ebp], 0
; Line 1354
	mov	DWORD PTR _numAntiItems$73990[ebp], 0
; Line 1355
	mov	DWORD PTR _i$73909[ebp], 0
	jmp	SHORT $LN11@ReadHeader
$LN10@ReadHeader:
	mov	eax, DWORD PTR _i$73909[ebp]
	add	eax, 1
	mov	DWORD PTR _i$73909[ebp], eax
$LN11@ReadHeader:
	mov	ecx, DWORD PTR _i$73909[ebp]
	cmp	ecx, DWORD PTR _numEmptyStreams$73915[ebp]
	jae	SHORT $LN9@ReadHeader
; Line 1356
	mov	edx, DWORD PTR _i$73909[ebp]
	push	edx
	lea	ecx, DWORD PTR _antiFileVector$73914[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN8@ReadHeader
; Line 1357
	mov	ecx, DWORD PTR _numAntiItems$73990[ebp]
	add	ecx, 1
	mov	DWORD PTR _numAntiItems$73990[ebp], ecx
$LN8@ReadHeader:
; Line 1359
	jmp	SHORT $LN10@ReadHeader
$LN9@ReadHeader:
	mov	DWORD PTR _i$73909[ebp], 0
	jmp	SHORT $LN7@ReadHeader
$LN6@ReadHeader:
	mov	edx, DWORD PTR _i$73909[ebp]
	add	edx, 1
	mov	DWORD PTR _i$73909[ebp], edx
$LN7@ReadHeader:
	mov	eax, DWORD PTR _i$73909[ebp]
	cmp	eax, DWORD PTR _numFiles$73908[ebp]
	jae	$LN5@ReadHeader
; Line 1361
	mov	ecx, DWORD PTR _i$73909[ebp]
	push	ecx
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR _file$73998[ebp], eax
; Line 1363
	mov	edx, DWORD PTR _i$73909[ebp]
	push	edx
	lea	ecx, DWORD PTR _emptyStreamVector$73911[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	eax, BYTE PTR [eax]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _file$73998[ebp]
	mov	BYTE PTR [ecx+16], al
; Line 1364
	mov	edx, DWORD PTR _file$73998[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 1365
	mov	eax, DWORD PTR _file$73998[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	je	$LN4@ReadHeader
; Line 1367
	mov	edx, DWORD PTR _file$73998[ebp]
	mov	BYTE PTR [edx+17], 0
; Line 1368
	mov	BYTE PTR _isAnti$73999[ebp], 0
; Line 1369
	mov	eax, DWORD PTR _sizeIndex$73989[ebp]
	push	eax
	lea	ecx, DWORD PTR _unpackSizes$[ebp]
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR _file$73998[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], eax
; Line 1370
	mov	ecx, DWORD PTR _sizeIndex$73989[ebp]
	push	ecx
	lea	ecx, DWORD PTR _digests$[ebp]
	call	?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt32DefVector::ValidAndDefined
	mov	edx, DWORD PTR _file$73998[ebp]
	mov	BYTE PTR [edx+18], al
; Line 1371
	mov	eax, DWORD PTR _file$73998[ebp]
	movzx	ecx, BYTE PTR [eax+18]
	test	ecx, ecx
	je	SHORT $LN3@ReadHeader
; Line 1372
	mov	edx, DWORD PTR _sizeIndex$73989[ebp]
	push	edx
	lea	ecx, DWORD PTR _digests$[ebp+12]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR _file$73998[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+12], edx
$LN3@ReadHeader:
; Line 1373
	mov	eax, DWORD PTR _sizeIndex$73989[ebp]
	add	eax, 1
	mov	DWORD PTR _sizeIndex$73989[ebp], eax
; Line 1375
	jmp	SHORT $LN2@ReadHeader
$LN4@ReadHeader:
; Line 1377
	mov	ecx, DWORD PTR _emptyFileIndex$73988[ebp]
	push	ecx
	lea	ecx, DWORD PTR _emptyFileVector$73913[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	movzx	edx, BYTE PTR [eax]
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	eax, DWORD PTR _file$73998[ebp]
	mov	BYTE PTR [eax+17], dl
; Line 1378
	mov	ecx, DWORD PTR _emptyFileIndex$73988[ebp]
	push	ecx
	lea	ecx, DWORD PTR _antiFileVector$73914[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	dl, BYTE PTR [eax]
	mov	BYTE PTR _isAnti$73999[ebp], dl
; Line 1379
	mov	eax, DWORD PTR _emptyFileIndex$73988[ebp]
	add	eax, 1
	mov	DWORD PTR _emptyFileIndex$73988[ebp], eax
; Line 1380
	mov	ecx, DWORD PTR _file$73998[ebp]
	mov	DWORD PTR [ecx], 0
	mov	DWORD PTR [ecx+4], 0
; Line 1381
	mov	edx, DWORD PTR _file$73998[ebp]
	mov	BYTE PTR [edx+18], 0
$LN2@ReadHeader:
; Line 1383
	cmp	DWORD PTR _numAntiItems$73990[ebp], 0
	je	SHORT $LN1@ReadHeader
; Line 1384
	movzx	eax, BYTE PTR _isAnti$73999[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 196				; 000000c4H
	call	?Add@?$CRecordVector@_N@@QAEI_N@Z	; CRecordVector<bool>::Add
$LN1@ReadHeader:
; Line 1385
	jmp	$LN6@ReadHeader
$LN5@ReadHeader:
; Line 1386
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _antiFileVector$73914[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _emptyFileVector$73913[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _emptyStreamVector$73911[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
$LN57@ReadHeader:
; Line 1387
	mov	ecx, DWORD PTR _db$[ebp]
	call	?FillLinks@CDbEx@N7z@NArchive@@QAEXXZ	; NArchive::N7z::CDbEx::FillLinks
; Line 1394
	mov	DWORD PTR $T75570[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _digests$[ebp]
	call	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _unpackSizes$[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dataVector$[ebp]
	call	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
	mov	eax, DWORD PTR $T75570[ebp]
$LN62@ReadHeader:
; Line 1395
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN89@ReadHeader
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 340				; 00000154H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	2
$LN89@ReadHeader:
	DD	10					; 0000000aH
	DD	$LN88@ReadHeader
$LN88@ReadHeader:
	DD	-40					; ffffffd8H
	DD	12					; 0000000cH
	DD	$LN77@ReadHeader
	DD	-68					; ffffffbcH
	DD	12					; 0000000cH
	DD	$LN78@ReadHeader
	DD	-100					; ffffff9cH
	DD	24					; 00000018H
	DD	$LN79@ReadHeader
	DD	-128					; ffffff80H
	DD	12					; 0000000cH
	DD	$LN80@ReadHeader
	DD	-148					; ffffff6cH
	DD	12					; 0000000cH
	DD	$LN81@ReadHeader
	DD	-168					; ffffff58H
	DD	12					; 0000000cH
	DD	$LN82@ReadHeader
	DD	-204					; ffffff34H
	DD	8
	DD	$LN83@ReadHeader
	DD	-224					; ffffff20H
	DD	8
	DD	$LN84@ReadHeader
	DD	-268					; fffffef4H
	DD	12					; 0000000cH
	DD	$LN85@ReadHeader
	DD	-284					; fffffee4H
	DD	8
	DD	$LN86@ReadHeader
$LN86@ReadHeader:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
$LN85@ReadHeader:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN84@ReadHeader:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
$LN83@ReadHeader:
	DB	115					; 00000073H
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN82@ReadHeader:
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN81@ReadHeader:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN80@ReadHeader:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN79@ReadHeader:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN78@ReadHeader:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN77@ReadHeader:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN90@ReadHeader:
	DD	$LN33@ReadHeader
	DD	$LN28@ReadHeader
	DD	$LN27@ReadHeader
	DD	$LN47@ReadHeader
	DD	$LN25@ReadHeader
	DD	$LN24@ReadHeader
	DD	$LN23@ReadHeader
	DD	$LN38@ReadHeader
	DD	$LN17@ReadHeader
	DD	$LN17@ReadHeader
	DD	$LN26@ReadHeader
	DD	$LN22@ReadHeader
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0:
	lea	ecx, DWORD PTR _dataVector$[ebp]
	jmp	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1:
	lea	ecx, DWORD PTR _unpackSizes$[ebp]
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2:
	lea	ecx, DWORD PTR _digests$[ebp]
	jmp	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$3:
	lea	ecx, DWORD PTR _emptyStreamVector$73911[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$4:
	lea	ecx, DWORD PTR _emptyFileVector$73913[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$5:
	lea	ecx, DWORD PTR _antiFileVector$73914[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$6:
	lea	ecx, DWORD PTR _switchProp$73923[ebp]
	jmp	??1CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::~CStreamSwitch
__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$7:
	lea	ecx, DWORD PTR _streamSwitch$73936[ebp]
	jmp	??1CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::~CStreamSwitch
__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$8:
	lea	ecx, DWORD PTR _boolVector$73953[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__unwindfunclet$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$9:
	lea	ecx, DWORD PTR _streamSwitch$73954[ebp]
	jmp	??1CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::~CStreamSwitch
__ehhandler$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-340]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z ENDP ; NArchive::N7z::CInArchive::ReadHeader
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SkipRem@CInByte2@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?SkipRem@CInByte2@N7z@NArchive@@QAEXXZ PROC		; NArchive::N7z::CInByte2::SkipRem, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 310
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
	mov	esp, ebp
	pop	ebp
	ret	0
?SkipRem@CInByte2@N7z@NArchive@@QAEXXZ ENDP		; NArchive::N7z::CInByte2::SkipRem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReadBytes@CInArchive@N7z@NArchive@@AAEXPAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?ReadBytes@CInArchive@N7z@NArchive@@AAEXPAEI@Z PROC	; NArchive::N7z::CInArchive::ReadBytes, COMDAT
; _this$ = ecx
; Line 359
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	call	?ReadBytes@CInByte2@N7z@NArchive@@QAEXPAEI@Z ; NArchive::N7z::CInByte2::ReadBytes
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ReadBytes@CInArchive@N7z@NArchive@@AAEXPAEI@Z ENDP	; NArchive::N7z::CInArchive::ReadBytes
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_emptyStream$74015 = -17				; size = 1
_i$ = -16						; size = 4
_indexInFolder$ = -12					; size = 4
_folderIndex$ = -8					; size = 4
_this$ = -4						; size = 4
?FillLinks@CDbEx@N7z@NArchive@@QAEXXZ PROC		; NArchive::N7z::CDbEx::FillLinks
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.cpp
; Line 1398
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1399
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	call	?Alloc@?$CObjArray@I@@QAEXI@Z		; CObjArray<unsigned int>::Alloc
; Line 1400
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	call	?Alloc@?$CObjArray@I@@QAEXI@Z		; CObjArray<unsigned int>::Alloc
; Line 1402
	mov	DWORD PTR _folderIndex$[ebp], 0
; Line 1403
	mov	DWORD PTR _indexInFolder$[ebp], 0
; Line 1406
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@FillLinks
$LN14@FillLinks:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN15@FillLinks:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN13@FillLinks
; Line 1408
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	movzx	ecx, BYTE PTR [eax+16]
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	BYTE PTR _emptyStream$74015[ebp], cl
; Line 1409
	cmp	DWORD PTR _indexInFolder$[ebp], 0
	jne	SHORT $LN12@FillLinks
; Line 1411
	movzx	edx, BYTE PTR _emptyStream$74015[ebp]
	test	edx, edx
	je	SHORT $LN10@FillLinks
; Line 1413
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], -1
; Line 1414
	jmp	SHORT $LN14@FillLinks
$LN10@FillLinks:
; Line 1420
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _folderIndex$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jb	SHORT $LN8@FillLinks
; Line 1421
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN8@FillLinks:
; Line 1422
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 1423
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	cmp	DWORD PTR [eax+ecx*4], 0
	je	SHORT $LN7@FillLinks
; Line 1424
	jmp	SHORT $LN12@FillLinks
$LN7@FillLinks:
; Line 1425
	mov	edx, DWORD PTR _folderIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _folderIndex$[ebp], edx
; Line 1426
	jmp	SHORT $LN10@FillLinks
$LN12@FillLinks:
; Line 1428
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _folderIndex$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 1429
	movzx	eax, BYTE PTR _emptyStream$74015[ebp]
	test	eax, eax
	je	SHORT $LN6@FillLinks
; Line 1430
	jmp	$LN14@FillLinks
$LN6@FillLinks:
; Line 1431
	mov	ecx, DWORD PTR _indexInFolder$[ebp]
	add	ecx, 1
	mov	DWORD PTR _indexInFolder$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	edx, DWORD PTR _folderIndex$[ebp]
	mov	ecx, DWORD PTR _indexInFolder$[ebp]
	cmp	ecx, DWORD PTR [eax+edx*4]
	jb	SHORT $LN5@FillLinks
; Line 1433
	mov	edx, DWORD PTR _folderIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _folderIndex$[ebp], edx
; Line 1434
	mov	DWORD PTR _indexInFolder$[ebp], 0
$LN5@FillLinks:
; Line 1436
	jmp	$LN14@FillLinks
$LN13@FillLinks:
; Line 1438
	cmp	DWORD PTR _indexInFolder$[ebp], 0
	je	SHORT $LN3@FillLinks
; Line 1439
	mov	eax, DWORD PTR _folderIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _folderIndex$[ebp], eax
$LN3@FillLinks:
; Line 1447
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _folderIndex$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jb	SHORT $LN1@FillLinks
; Line 1448
	jmp	SHORT $LN16@FillLinks
$LN1@FillLinks:
; Line 1449
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	call	??B?$CObjArray@I@@QAEPAIXZ		; CObjArray<unsigned int>::operator unsigned int *
	mov	ecx, DWORD PTR _folderIndex$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 1454
	mov	eax, DWORD PTR _folderIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _folderIndex$[ebp], eax
; Line 1455
	jmp	SHORT $LN3@FillLinks
$LN16@FillLinks:
; Line 1456
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?FillLinks@CDbEx@N7z@NArchive@@QAEXXZ ENDP		; NArchive::N7z::CDbEx::FillLinks
_TEXT	ENDS
PUBLIC	?Front@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ ; CObjectVector<CBuffer<unsigned char> >::Front
PUBLIC	??0?$CBuffer@E@@QAE@I@Z				; CBuffer<unsigned char>::CBuffer<unsigned char>
PUBLIC	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
PUBLIC	?Clear@CDbEx@N7z@NArchive@@QAEXXZ		; NArchive::N7z::CDbEx::Clear
PUBLIC	__$ArrayPad$
PUBLIC	?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z ; NArchive::N7z::CInArchive::ReadDatabase2
xdata$x	SEGMENT
__unwindtable$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2
__ehfuncinfo$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv646 = -784						; size = 8
tv593 = -776						; size = 8
tv250 = -768						; size = 4
tv570 = -764						; size = 8
tv567 = -756						; size = 8
tv209 = -748						; size = 4
tv156 = -744						; size = 4
tv141 = -740						; size = 4
tv130 = -736						; size = 4
$T75611 = -732						; size = 4
$T75610 = -728						; size = 4
$T75609 = -724						; size = 4
$T75608 = -720						; size = 4
___result__$74118 = -716				; size = 4
_result$74117 = -712					; size = 4
_type$ = -708						; size = 8
_dataVector$ = -696					; size = 12
_streamSwitch$ = -676					; size = 8
___result__$74106 = -664				; size = 4
_buffer2$ = -656					; size = 8
_nextHeaderSize_t$ = -644				; size = 4
___result__$74099 = -640				; size = 4
___result__$74084 = -636				; size = 4
_i$74074 = -632						; size = 4
___result__$74069 = -628				; size = 4
___result__$74067 = -624				; size = 4
_checkSize$74062 = -620					; size = 4
_rem$74061 = -616					; size = 8
___result__$74059 = -608				; size = 4
_buf$74058 = -600					; size = 512
_kCheckSize$74057 = -84					; size = 4
___result__$74055 = -80					; size = 4
_fileSize$74054 = -72					; size = 8
_cur$74053 = -56					; size = 8
_crcFromArc$ = -44					; size = 4
_nextHeaderCRC$ = -40					; size = 4
_nextHeaderSize$ = -36					; size = 8
_nextHeaderOffset$ = -28				; size = 8
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_db$ = 8						; size = 4
_getTextPassword$ = 12					; size = 4
_isEncrypted$ = 16					; size = 4
_passwordIsDefined$ = 20				; size = 4
_password$ = 24						; size = 4
?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z PROC ; NArchive::N7z::CInArchive::ReadDatabase2
; _this$ = ecx
; Line 1463
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 772				; 00000304H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-784]
	mov	ecx, 193				; 000000c1H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1464
	mov	ecx, DWORD PTR _db$[ebp]
	call	?Clear@CDbEx@N7z@NArchive@@QAEXXZ	; NArchive::N7z::CDbEx::Clear
; Line 1465
	mov	eax, DWORD PTR _db$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+232], edx
	mov	ecx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+236], ecx
; Line 1467
	mov	edx, DWORD PTR _db$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+86]
	mov	BYTE PTR [edx+224], cl
; Line 1468
	mov	edx, DWORD PTR _db$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cl, BYTE PTR [eax+87]
	mov	BYTE PTR [edx+225], cl
; Line 1470
	mov	edx, DWORD PTR _db$[ebp]
	movzx	eax, BYTE PTR [edx+224]
	test	eax, eax
	je	SHORT $LN35@ReadDataba
; Line 1473
	mov	eax, 1
	jmp	$LN36@ReadDataba
$LN35@ReadDataba:
; Line 1476
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+92]
	mov	DWORD PTR _nextHeaderOffset$[ebp], edx
	mov	eax, DWORD PTR [ecx+96]
	mov	DWORD PTR _nextHeaderOffset$[ebp+4], eax
; Line 1477
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+100]
	mov	DWORD PTR _nextHeaderSize$[ebp], edx
	mov	eax, DWORD PTR [ecx+104]
	mov	DWORD PTR _nextHeaderSize$[ebp+4], eax
; Line 1478
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+108]
	mov	DWORD PTR _nextHeaderCRC$[ebp], edx
; Line 1481
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+88]
	mov	DWORD PTR _crcFromArc$[ebp], ecx
; Line 1482
	cmp	DWORD PTR _crcFromArc$[ebp], 0
	jne	$LN18@ReadDataba
	mov	edx, DWORD PTR _nextHeaderOffset$[ebp]
	or	edx, DWORD PTR _nextHeaderOffset$[ebp+4]
	jne	$LN18@ReadDataba
	mov	eax, DWORD PTR _nextHeaderSize$[ebp]
	or	eax, DWORD PTR _nextHeaderSize$[ebp+4]
	jne	$LN18@ReadDataba
	cmp	DWORD PTR _nextHeaderCRC$[ebp], 0
	jne	$LN18@ReadDataba
; Line 1485
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv130[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _cur$74053[ebp]
	push	ecx
	push	1
	push	0
	push	0
	mov	edx, DWORD PTR tv130[ebp]
	push	edx
	mov	eax, DWORD PTR tv130[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74055[ebp], eax
	cmp	DWORD PTR ___result__$74055[ebp], 0
	je	SHORT $LN33@ReadDataba
	mov	eax, DWORD PTR ___result__$74055[ebp]
	jmp	$LN36@ReadDataba
$LN33@ReadDataba:
; Line 1486
	mov	DWORD PTR _kCheckSize$74057[ebp], 512	; 00000200H
; Line 1488
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv141[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _fileSize$74054[ebp]
	push	eax
	push	2
	push	0
	push	0
	mov	ecx, DWORD PTR tv141[ebp]
	push	ecx
	mov	edx, DWORD PTR tv141[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74059[ebp], eax
	cmp	DWORD PTR ___result__$74059[ebp], 0
	je	SHORT $LN32@ReadDataba
	mov	eax, DWORD PTR ___result__$74059[ebp]
	jmp	$LN36@ReadDataba
$LN32@ReadDataba:
; Line 1489
	mov	edx, DWORD PTR _fileSize$74054[ebp]
	sub	edx, DWORD PTR _cur$74053[ebp]
	mov	eax, DWORD PTR _fileSize$74054[ebp+4]
	sbb	eax, DWORD PTR _cur$74053[ebp+4]
	mov	DWORD PTR _rem$74061[ebp], edx
	mov	DWORD PTR _rem$74061[ebp+4], eax
; Line 1490
	mov	DWORD PTR _checkSize$74062[ebp], 512	; 00000200H
; Line 1491
	cmp	DWORD PTR _rem$74061[ebp+4], 0
	ja	SHORT $LN31@ReadDataba
	jb	SHORT $LN41@ReadDataba
	cmp	DWORD PTR _rem$74061[ebp], 512		; 00000200H
	jae	SHORT $LN31@ReadDataba
$LN41@ReadDataba:
; Line 1492
	mov	ecx, DWORD PTR _rem$74061[ebp]
	mov	DWORD PTR _checkSize$74062[ebp], ecx
$LN31@ReadDataba:
; Line 1493
	cmp	DWORD PTR _checkSize$74062[ebp], 3
	jae	SHORT $LN30@ReadDataba
; Line 1494
	mov	eax, 1
	jmp	$LN36@ReadDataba
$LN30@ReadDataba:
; Line 1495
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv156[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _checkSize$74062[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _fileSize$74054[ebp]
	sub	ecx, edx
	mov	edx, DWORD PTR _fileSize$74054[ebp+4]
	sbb	edx, eax
	push	edx
	push	ecx
	mov	eax, DWORD PTR tv156[ebp]
	push	eax
	mov	ecx, DWORD PTR tv156[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74067[ebp], eax
	cmp	DWORD PTR ___result__$74067[ebp], 0
	je	SHORT $LN29@ReadDataba
	mov	eax, DWORD PTR ___result__$74067[ebp]
	jmp	$LN36@ReadDataba
$LN29@ReadDataba:
; Line 1496
	mov	ecx, DWORD PTR _checkSize$74062[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$74058[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	call	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE
	mov	DWORD PTR ___result__$74069[ebp], eax
	cmp	DWORD PTR ___result__$74069[ebp], 0
	je	SHORT $LN28@ReadDataba
	mov	eax, DWORD PTR ___result__$74069[ebp]
	jmp	$LN36@ReadDataba
$LN28@ReadDataba:
; Line 1498
	mov	eax, DWORD PTR _checkSize$74062[ebp]
	movzx	ecx, BYTE PTR _buf$74058[ebp+eax-1]
	test	ecx, ecx
	je	SHORT $LN27@ReadDataba
; Line 1499
	mov	eax, 1
	jmp	$LN36@ReadDataba
$LN27@ReadDataba:
; Line 1502
	mov	edx, DWORD PTR _checkSize$74062[ebp]
	sub	edx, 2
	mov	DWORD PTR _i$74074[ebp], edx
	jmp	SHORT $LN26@ReadDataba
$LN25@ReadDataba:
	mov	eax, DWORD PTR _i$74074[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74074[ebp], eax
$LN26@ReadDataba:
; Line 1505
	mov	ecx, DWORD PTR _i$74074[ebp]
	movzx	edx, BYTE PTR _buf$74058[ebp+ecx]
	cmp	edx, 23					; 00000017H
	jne	SHORT $LN21@ReadDataba
	mov	eax, DWORD PTR _i$74074[ebp]
	movzx	ecx, BYTE PTR _buf$74058[ebp+eax+1]
	cmp	ecx, 6
	je	SHORT $LN22@ReadDataba
$LN21@ReadDataba:
	mov	edx, DWORD PTR _i$74074[ebp]
	movzx	eax, BYTE PTR _buf$74058[ebp+edx]
	cmp	eax, 1
	jne	SHORT $LN23@ReadDataba
	mov	ecx, DWORD PTR _i$74074[ebp]
	movzx	edx, BYTE PTR _buf$74058[ebp+ecx+1]
	cmp	edx, 4
	jne	SHORT $LN23@ReadDataba
$LN22@ReadDataba:
; Line 1506
	jmp	SHORT $LN24@ReadDataba
$LN23@ReadDataba:
; Line 1507
	cmp	DWORD PTR _i$74074[ebp], 0
	jne	SHORT $LN20@ReadDataba
; Line 1508
	mov	eax, 1
	jmp	$LN36@ReadDataba
$LN20@ReadDataba:
; Line 1509
	jmp	SHORT $LN25@ReadDataba
$LN24@ReadDataba:
; Line 1510
	mov	eax, DWORD PTR _checkSize$74062[ebp]
	sub	eax, DWORD PTR _i$74074[ebp]
	xor	ecx, ecx
	mov	DWORD PTR _nextHeaderSize$[ebp], eax
	mov	DWORD PTR _nextHeaderSize$[ebp+4], ecx
; Line 1511
	mov	edx, DWORD PTR _rem$74061[ebp]
	sub	edx, DWORD PTR _nextHeaderSize$[ebp]
	mov	eax, DWORD PTR _rem$74061[ebp+4]
	sbb	eax, DWORD PTR _nextHeaderSize$[ebp+4]
	mov	DWORD PTR _nextHeaderOffset$[ebp], edx
	mov	DWORD PTR _nextHeaderOffset$[ebp+4], eax
; Line 1512
	mov	edx, DWORD PTR _nextHeaderSize$[ebp]
	mov	ecx, DWORD PTR _i$74074[ebp]
	lea	ecx, DWORD PTR _buf$74058[ebp+ecx]
	call	@CrcCalc@8
	mov	DWORD PTR _nextHeaderCRC$[ebp], eax
; Line 1513
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv209[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _cur$74053[ebp+4]
	push	edx
	mov	eax, DWORD PTR _cur$74053[ebp]
	push	eax
	mov	ecx, DWORD PTR tv209[ebp]
	push	ecx
	mov	edx, DWORD PTR tv209[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74084[ebp], eax
	cmp	DWORD PTR ___result__$74084[ebp], 0
	je	SHORT $LN19@ReadDataba
	mov	eax, DWORD PTR ___result__$74084[ebp]
	jmp	$LN36@ReadDataba
$LN19@ReadDataba:
; Line 1514
	mov	edx, DWORD PTR _db$[ebp]
	mov	BYTE PTR [edx+308], 1
$LN18@ReadDataba:
; Line 1523
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	add	ecx, 32					; 00000020H
	mov	edx, DWORD PTR [eax+68]
	adc	edx, 0
	mov	eax, DWORD PTR _db$[ebp]
	mov	DWORD PTR [eax+240], ecx
	mov	DWORD PTR [eax+244], edx
; Line 1524
	mov	ecx, DWORD PTR _db$[ebp]
	mov	DWORD PTR [ecx+296], 32			; 00000020H
	mov	DWORD PTR [ecx+300], 0
; Line 1526
	mov	edx, DWORD PTR _db$[ebp]
	mov	BYTE PTR [edx+304], 0
; Line 1528
	cmp	DWORD PTR _nextHeaderOffset$[ebp+4], 0
	jl	SHORT $LN16@ReadDataba
	jg	SHORT $LN42@ReadDataba
	cmp	DWORD PTR _nextHeaderOffset$[ebp], 0
	jb	SHORT $LN16@ReadDataba
$LN42@ReadDataba:
	cmp	DWORD PTR _nextHeaderSize$[ebp+4], 1073741824 ; 40000000H
	jb	SHORT $LN17@ReadDataba
	ja	SHORT $LN16@ReadDataba
	cmp	DWORD PTR _nextHeaderSize$[ebp], 0
	jbe	SHORT $LN17@ReadDataba
$LN16@ReadDataba:
; Line 1529
	mov	eax, 1
	jmp	$LN36@ReadDataba
$LN17@ReadDataba:
; Line 1530
	mov	eax, DWORD PTR _nextHeaderSize$[ebp]
	or	eax, DWORD PTR _nextHeaderSize$[ebp+4]
	jne	SHORT $LN15@ReadDataba
; Line 1532
	mov	ecx, DWORD PTR _nextHeaderOffset$[ebp]
	or	ecx, DWORD PTR _nextHeaderOffset$[ebp+4]
	je	SHORT $LN14@ReadDataba
; Line 1533
	mov	eax, 1
	jmp	$LN36@ReadDataba
$LN14@ReadDataba:
; Line 1534
	mov	edx, DWORD PTR _db$[ebp]
	mov	BYTE PTR [edx+304], 1
; Line 1535
	xor	eax, eax
	jmp	$LN36@ReadDataba
$LN15@ReadDataba:
; Line 1538
	mov	eax, DWORD PTR _db$[ebp]
	movzx	ecx, BYTE PTR [eax+308]
	test	ecx, ecx
	jne	SHORT $LN13@ReadDataba
; Line 1539
	mov	edx, DWORD PTR _db$[ebp]
	mov	BYTE PTR [edx+304], 1
$LN13@ReadDataba:
; Line 1541
	mov	eax, DWORD PTR _nextHeaderSize$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _nextHeaderSize$[ebp+4]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+112]
	adc	ecx, DWORD PTR [edx+116]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+112], eax
	mov	DWORD PTR [edx+116], ecx
; Line 1542
	mov	eax, DWORD PTR _nextHeaderOffset$[ebp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR _nextHeaderOffset$[ebp+4]
	adc	ecx, 0
	add	eax, DWORD PTR _nextHeaderSize$[ebp]
	adc	ecx, DWORD PTR _nextHeaderSize$[ebp+4]
	mov	edx, DWORD PTR _db$[ebp]
	mov	DWORD PTR [edx+296], eax
	mov	DWORD PTR [edx+300], ecx
; Line 1543
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _db$[ebp]
	mov	edx, DWORD PTR [eax+72]
	sub	edx, DWORD PTR [ecx+240]
	mov	eax, DWORD PTR [eax+76]
	sbb	eax, DWORD PTR [ecx+244]
	mov	ecx, DWORD PTR _nextHeaderOffset$[ebp]
	add	ecx, DWORD PTR _nextHeaderSize$[ebp]
	mov	esi, DWORD PTR _nextHeaderOffset$[ebp+4]
	adc	esi, DWORD PTR _nextHeaderSize$[ebp+4]
	mov	DWORD PTR tv567[ebp], edx
	mov	DWORD PTR tv567[ebp+4], eax
	mov	DWORD PTR tv570[ebp], ecx
	mov	DWORD PTR tv570[ebp+4], esi
	mov	edx, DWORD PTR tv567[ebp+4]
	cmp	edx, DWORD PTR tv570[ebp+4]
	ja	SHORT $LN12@ReadDataba
	jb	SHORT $LN44@ReadDataba
	mov	eax, DWORD PTR tv567[ebp]
	cmp	eax, DWORD PTR tv570[ebp]
	jae	SHORT $LN12@ReadDataba
$LN44@ReadDataba:
; Line 1545
	mov	ecx, DWORD PTR _db$[ebp]
	mov	BYTE PTR [ecx+307], 1
; Line 1546
	mov	eax, 1
	jmp	$LN36@ReadDataba
$LN12@ReadDataba:
; Line 1548
	mov	ecx, DWORD PTR _this$[ebp]
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv250[ebp], eax
	mov	esi, esp
	push	0
	push	1
	mov	edx, DWORD PTR _nextHeaderOffset$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _nextHeaderOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR tv250[ebp]
	push	ecx
	mov	edx, DWORD PTR tv250[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$74099[ebp], eax
	cmp	DWORD PTR ___result__$74099[ebp], 0
	je	SHORT $LN11@ReadDataba
	mov	eax, DWORD PTR ___result__$74099[ebp]
	jmp	$LN36@ReadDataba
$LN11@ReadDataba:
; Line 1550
	mov	edx, DWORD PTR _nextHeaderSize$[ebp]
	mov	DWORD PTR _nextHeaderSize_t$[ebp], edx
; Line 1551
	mov	eax, DWORD PTR _nextHeaderSize_t$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv593[ebp], eax
	mov	DWORD PTR tv593[ebp+4], ecx
	mov	edx, DWORD PTR tv593[ebp]
	cmp	edx, DWORD PTR _nextHeaderSize$[ebp]
	jne	SHORT $LN45@ReadDataba
	mov	eax, DWORD PTR tv593[ebp+4]
	cmp	eax, DWORD PTR _nextHeaderSize$[ebp+4]
	je	SHORT $LN10@ReadDataba
$LN45@ReadDataba:
; Line 1552
	mov	eax, -2147024882			; 8007000eH
	jmp	$LN36@ReadDataba
$LN10@ReadDataba:
; Line 1553
	mov	ecx, DWORD PTR _nextHeaderSize_t$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _buffer2$[ebp]
	call	??0?$CBuffer@E@@QAE@I@Z			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 1555
	mov	edx, DWORD PTR _nextHeaderSize_t$[ebp]
	push	edx
	lea	ecx, DWORD PTR _buffer2$[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	call	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE
	mov	DWORD PTR ___result__$74106[ebp], eax
	cmp	DWORD PTR ___result__$74106[ebp], 0
	je	SHORT $LN9@ReadDataba
	mov	eax, DWORD PTR ___result__$74106[ebp]
	mov	DWORD PTR $T75608[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer2$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	eax, DWORD PTR $T75608[ebp]
	jmp	$LN36@ReadDataba
$LN9@ReadDataba:
; Line 1557
	lea	ecx, DWORD PTR _buffer2$[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	mov	edx, DWORD PTR _nextHeaderSize_t$[ebp]
	mov	ecx, eax
	call	@CrcCalc@8
	cmp	eax, DWORD PTR _nextHeaderCRC$[ebp]
	je	SHORT $LN8@ReadDataba
; Line 1558
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN8@ReadDataba:
; Line 1560
	mov	ecx, DWORD PTR _db$[ebp]
	movzx	edx, BYTE PTR [ecx+308]
	test	edx, edx
	jne	SHORT $LN7@ReadDataba
; Line 1561
	mov	eax, DWORD PTR _db$[ebp]
	mov	BYTE PTR [eax+305], 1
$LN7@ReadDataba:
; Line 1563
	lea	ecx, DWORD PTR _streamSwitch$[ebp]
	call	??0CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::CStreamSwitch
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 1564
	lea	ecx, DWORD PTR _buffer2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	ecx, DWORD PTR _streamSwitch$[ebp]
	call	?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@ABV?$CBuffer@E@@@Z ; NArchive::N7z::CStreamSwitch::Set
; Line 1566
	lea	ecx, DWORD PTR _dataVector$[ebp]
	call	??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::CObjectVector<CBuffer<unsigned char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 1568
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR _type$[ebp], eax
	mov	DWORD PTR _type$[ebp+4], edx
; Line 1569
	cmp	DWORD PTR _type$[ebp], 1
	jne	SHORT $LN46@ReadDataba
	cmp	DWORD PTR _type$[ebp+4], 0
	je	$LN6@ReadDataba
$LN46@ReadDataba:
; Line 1571
	cmp	DWORD PTR _type$[ebp], 23		; 00000017H
	jne	SHORT $LN47@ReadDataba
	cmp	DWORD PTR _type$[ebp+4], 0
	je	SHORT $LN5@ReadDataba
$LN47@ReadDataba:
; Line 1572
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN5@ReadDataba:
; Line 1579
	mov	eax, DWORD PTR _password$[ebp]
	push	eax
	mov	ecx, DWORD PTR _passwordIsDefined$[ebp]
	push	ecx
	mov	edx, DWORD PTR _isEncrypted$[ebp]
	push	edx
	mov	eax, DWORD PTR _getTextPassword$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dataVector$[ebp]
	push	ecx
	mov	edx, DWORD PTR _db$[ebp]
	add	edx, 256				; 00000100H
	push	edx
	mov	eax, DWORD PTR _db$[ebp]
	mov	ecx, DWORD PTR [eax+244]
	push	ecx
	mov	edx, DWORD PTR [eax+240]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadAndDecodePackedStreams@CInArchive@N7z@NArchive@@AAEJ_KAA_KAAV?$CObjectVector@V?$CBuffer@E@@@@PAUICryptoGetTextPassword@@AA_N4AAVUString@@@Z ; NArchive::N7z::CInArchive::ReadAndDecodePackedStreams
	mov	DWORD PTR _result$74117[ebp], eax
; Line 1580
	mov	eax, DWORD PTR _result$74117[ebp]
	mov	DWORD PTR ___result__$74118[ebp], eax
	cmp	DWORD PTR ___result__$74118[ebp], 0
	je	SHORT $LN4@ReadDataba
	mov	ecx, DWORD PTR ___result__$74118[ebp]
	mov	DWORD PTR $T75609[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _dataVector$[ebp]
	call	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _streamSwitch$[ebp]
	call	??1CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::~CStreamSwitch
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer2$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	eax, DWORD PTR $T75609[ebp]
	jmp	$LN36@ReadDataba
$LN4@ReadDataba:
; Line 1581
	lea	ecx, DWORD PTR _dataVector$[ebp]
	call	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<unsigned char> >::Size
	test	eax, eax
	jne	SHORT $LN3@ReadDataba
; Line 1582
	mov	DWORD PTR $T75610[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _dataVector$[ebp]
	call	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _streamSwitch$[ebp]
	call	??1CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::~CStreamSwitch
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer2$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	eax, DWORD PTR $T75610[ebp]
	jmp	$LN36@ReadDataba
$LN3@ReadDataba:
; Line 1583
	lea	ecx, DWORD PTR _dataVector$[ebp]
	call	?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ; CObjectVector<CBuffer<unsigned char> >::Size
	cmp	eax, 1
	jbe	SHORT $LN2@ReadDataba
; Line 1584
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN2@ReadDataba:
; Line 1585
	lea	ecx, DWORD PTR _streamSwitch$[ebp]
	call	?Remove@CStreamSwitch@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CStreamSwitch::Remove
; Line 1586
	lea	ecx, DWORD PTR _dataVector$[ebp]
	call	?Front@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ ; CObjectVector<CBuffer<unsigned char> >::Front
	push	eax
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	lea	ecx, DWORD PTR _streamSwitch$[ebp]
	call	?Set@CStreamSwitch@N7z@NArchive@@QAEXPAVCInArchive@23@ABV?$CBuffer@E@@@Z ; NArchive::N7z::CStreamSwitch::Set
; Line 1587
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadID@CInArchive@N7z@NArchive@@AAE_KXZ ; NArchive::N7z::CInArchive::ReadID
	mov	DWORD PTR tv646[ebp], eax
	mov	DWORD PTR tv646[ebp+4], edx
	cmp	DWORD PTR tv646[ebp], 1
	jne	SHORT $LN48@ReadDataba
	cmp	DWORD PTR tv646[ebp+4], 0
	je	SHORT $LN6@ReadDataba
$LN48@ReadDataba:
; Line 1588
	call	?ThrowIncorrect@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowIncorrect
$LN6@ReadDataba:
; Line 1591
	mov	eax, DWORD PTR _db$[ebp]
	mov	BYTE PTR [eax+304], 1
; Line 1593
	mov	ecx, DWORD PTR _db$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+112]
	mov	DWORD PTR [ecx+288], eax
	mov	edx, DWORD PTR [edx+116]
	mov	DWORD PTR [ecx+292], edx
; Line 1599
	mov	eax, DWORD PTR _password$[ebp]
	push	eax
	mov	ecx, DWORD PTR _passwordIsDefined$[ebp]
	push	ecx
	mov	edx, DWORD PTR _isEncrypted$[ebp]
	push	edx
	mov	eax, DWORD PTR _getTextPassword$[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadHeader@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z ; NArchive::N7z::CInArchive::ReadHeader
	mov	DWORD PTR $T75611[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _dataVector$[ebp]
	call	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _streamSwitch$[ebp]
	call	??1CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::~CStreamSwitch
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer2$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	eax, DWORD PTR $T75611[ebp]
$LN36@ReadDataba:
; Line 1600
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN57@ReadDataba
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 784				; 00000310H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN57@ReadDataba:
	DD	6
	DD	$LN56@ReadDataba
$LN56@ReadDataba:
	DD	-56					; ffffffc8H
	DD	8
	DD	$LN49@ReadDataba
	DD	-72					; ffffffb8H
	DD	8
	DD	$LN50@ReadDataba
	DD	-600					; fffffda8H
	DD	512					; 00000200H
	DD	$LN51@ReadDataba
	DD	-656					; fffffd70H
	DD	8
	DD	$LN52@ReadDataba
	DD	-676					; fffffd5cH
	DD	8
	DD	$LN53@ReadDataba
	DD	-696					; fffffd48H
	DD	12					; 0000000cH
	DD	$LN54@ReadDataba
$LN54@ReadDataba:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN53@ReadDataba:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	83					; 00000053H
	DB	119					; 00000077H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	0
$LN52@ReadDataba:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	50					; 00000032H
	DB	0
$LN51@ReadDataba:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN50@ReadDataba:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN49@ReadDataba:
	DB	99					; 00000063H
	DB	117					; 00000075H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0:
	lea	ecx, DWORD PTR _buffer2$[ebp]
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1:
	lea	ecx, DWORD PTR _streamSwitch$[ebp]
	jmp	??1CStreamSwitch@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CStreamSwitch::~CStreamSwitch
__unwindfunclet$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2:
	lea	ecx, DWORD PTR _dataVector$[ebp]
	jmp	??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
__ehhandler$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-784]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z ENDP ; NArchive::N7z::CInArchive::ReadDatabase2
PUBLIC	?Free@?$CObjArray@I@@QAEXXZ			; CObjArray<unsigned int>::Free
PUBLIC	?Clear@CInArchiveInfo@N7z@NArchive@@QAEXXZ	; NArchive::N7z::CInArchiveInfo::Clear
PUBLIC	?Clear@CDatabase@N7z@NArchive@@QAEXXZ		; NArchive::N7z::CDatabase::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CDbEx@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CDbEx@N7z@NArchive@@QAEXXZ PROC			; NArchive::N7z::CDbEx::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 229
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+304], 0
; Line 230
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+305], 0
; Line 232
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+306], 0
; Line 233
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+307], 0
; Line 236
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+308], 0
; Line 237
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+310], 0
; Line 238
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+309], 0
; Line 245
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CDatabase@N7z@NArchive@@QAEXXZ	; NArchive::N7z::CDatabase::Clear
; Line 248
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 224				; 000000e0H
	call	?Clear@CInArchiveInfo@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CInArchiveInfo::Clear
; Line 249
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 280				; 00000118H
	call	?Free@?$CObjArray@I@@QAEXXZ		; CObjArray<unsigned int>::Free
; Line 250
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 284				; 0000011cH
	call	?Free@?$CObjArray@I@@QAEXXZ		; CObjArray<unsigned int>::Free
; Line 252
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+288], 0
	mov	DWORD PTR [ecx+292], 0
; Line 253
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+296], 0
	mov	DWORD PTR [edx+300], 0
; Line 254
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CDbEx@N7z@NArchive@@QAEXXZ ENDP			; NArchive::N7z::CDbEx::Clear
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@_N@@QAEXXZ		; CRecordVector<bool>::Clear
PUBLIC	?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ	; NArchive::N7z::CUInt64DefVector::Clear
PUBLIC	?Clear@CFolders@N7z@NArchive@@QAEXXZ		; NArchive::N7z::CFolders::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CDatabase@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CDatabase@N7z@NArchive@@QAEXXZ PROC		; NArchive::N7z::CDatabase::Clear, COMDAT
; _this$ = ecx
; Line 135
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 136
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CFolders@N7z@NArchive@@QAEXXZ	; NArchive::N7z::CFolders::Clear
; Line 139
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 208				; 000000d0H
	call	?Free@?$CBuffer@E@@QAEXXZ		; CBuffer<unsigned char>::Free
; Line 140
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	?Free@?$CObjArray@I@@QAEXXZ		; CObjArray<unsigned int>::Free
; Line 142
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 88					; 00000058H
	call	?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CFileItem>::Clear
; Line 143
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 100				; 00000064H
	call	?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::Clear
; Line 144
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 124				; 0000007cH
	call	?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::Clear
; Line 145
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 148				; 00000094H
	call	?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::Clear
; Line 146
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 172				; 000000acH
	call	?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt64DefVector::Clear
; Line 147
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 196				; 000000c4H
	call	?Clear@?$CRecordVector@_N@@QAEXXZ	; CRecordVector<bool>::Clear
; Line 149
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CDatabase@N7z@NArchive@@QAEXXZ ENDP		; NArchive::N7z::CDatabase::Clear
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@_K@@QAEXXZ		; CRecordVector<unsigned __int64>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ PROC	; NArchive::N7z::CUInt64DefVector::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 122
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 123
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@_N@@QAEXXZ	; CRecordVector<bool>::Clear
; Line 124
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Clear@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::Clear
; Line 125
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CUInt64DefVector@N7z@NArchive@@QAEXXZ ENDP	; NArchive::N7z::CUInt64DefVector::Clear
_TEXT	ENDS
PUBLIC	?Free@?$CObjArray@E@@QAEXXZ			; CObjArray<unsigned char>::Free
PUBLIC	?Clear@CUInt32DefVector@N7z@NArchive@@QAEXXZ	; NArchive::N7z::CUInt32DefVector::Clear
PUBLIC	?Free@?$CObjArray@_K@@QAEXXZ			; CObjArray<unsigned __int64>::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CFolders@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CFolders@N7z@NArchive@@QAEXXZ PROC		; NArchive::N7z::CFolders::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 91
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 92
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 93
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Free@?$CObjArray@_K@@QAEXXZ		; CObjArray<unsigned __int64>::Free
; Line 96
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 97
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Clear@CUInt32DefVector@N7z@NArchive@@QAEXXZ ; NArchive::N7z::CUInt32DefVector::Clear
; Line 98
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Free@?$CObjArray@I@@QAEXXZ		; CObjArray<unsigned int>::Free
; Line 99
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Free@?$CObjArray@_K@@QAEXXZ		; CObjArray<unsigned __int64>::Free
; Line 100
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	?Free@?$CObjArray@I@@QAEXXZ		; CObjArray<unsigned int>::Free
; Line 101
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?Free@?$CObjArray@I@@QAEXXZ		; CObjArray<unsigned int>::Free
; Line 102
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?Free@?$CObjArray@E@@QAEXXZ		; CObjArray<unsigned char>::Free
; Line 103
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Free@?$CObjArray@I@@QAEXXZ		; CObjArray<unsigned int>::Free
; Line 104
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 60					; 0000003cH
	call	?Free@?$CBuffer@E@@QAEXXZ		; CBuffer<unsigned char>::Free
; Line 105
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CFolders@N7z@NArchive@@QAEXXZ ENDP		; NArchive::N7z::CFolders::Clear
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@I@@QAEXXZ		; CRecordVector<unsigned int>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CUInt32DefVector@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CUInt32DefVector@N7z@NArchive@@QAEXXZ PROC	; NArchive::N7z::CUInt32DefVector::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 102
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 103
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@_N@@QAEXXZ	; CRecordVector<bool>::Clear
; Line 104
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Clear@?$CRecordVector@I@@QAEXXZ	; CRecordVector<unsigned int>::Clear
; Line 105
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CUInt32DefVector@N7z@NArchive@@QAEXXZ ENDP	; NArchive::N7z::CUInt32DefVector::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@CInArchiveInfo@N7z@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CInArchiveInfo@N7z@NArchive@@QAEXXZ PROC		; NArchive::N7z::CInArchiveInfo::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.h
; Line 183
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 184
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0
; Line 185
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; Line 186
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
; Line 187
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	DWORD PTR [eax+36], 0
; Line 188
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Clear@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::Clear
; Line 189
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CInArchiveInfo@N7z@NArchive@@QAEXXZ ENDP		; NArchive::N7z::CInArchiveInfo::Clear
_TEXT	ENDS
PUBLIC	?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z ; NArchive::N7z::CInArchive::ReadDatabase
xdata$x	SEGMENT
__unwindtable$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z DD 00H
	DD	00H
	DD	01H
	DD	02H
	DD	FLAT:__catchsym$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$3
__catchsym$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCUnsupportedFeatureException@N7z@NArchive@@@8
	DD	00H
	DD	FLAT:__catch$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0
	DD	08H
	DD	FLAT:??_R0?AVCInArchiveException@N7z@NArchive@@@8
	DD	00H
	DD	FLAT:__catch$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1
__ehfuncinfo$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv80 = -36						; size = 4
$T75649 = -32						; size = 4
$T75648 = -28						; size = 4
_res$74136 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_db$ = 8						; size = 4
_getTextPassword$ = 12					; size = 4
_isEncrypted$ = 16					; size = 4
_passwordIsDefined$ = 20				; size = 4
_password$ = 24						; size = 4
?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z PROC ; NArchive::N7z::CInArchive::ReadDatabase
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zin.cpp
; Line 1607
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1609
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1613
	mov	eax, DWORD PTR _password$[ebp]
	push	eax
	mov	ecx, DWORD PTR _passwordIsDefined$[ebp]
	push	ecx
	mov	edx, DWORD PTR _isEncrypted$[ebp]
	push	edx
	mov	eax, DWORD PTR _getTextPassword$[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadDatabase2@CInArchive@N7z@NArchive@@AAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z ; NArchive::N7z::CInArchive::ReadDatabase2
	mov	DWORD PTR tv80[ebp], eax
	mov	edx, DWORD PTR tv80[ebp]
	mov	DWORD PTR _res$74136[ebp], edx
; Line 1614
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+60]
	test	ecx, ecx
	je	SHORT $LN2@ReadDataba@2
; Line 1615
	mov	edx, DWORD PTR _db$[ebp]
	mov	BYTE PTR [edx+306], 1
$LN2@ReadDataba@2:
; Line 1616
	cmp	DWORD PTR _res$74136[ebp], -2147467263	; 80004001H
	jne	SHORT $LN1@ReadDataba@2
; Line 1617
	call	?ThrowUnsupported@N7z@NArchive@@YGXXZ	; NArchive::N7z::ThrowUnsupported
$LN1@ReadDataba@2:
; Line 1618
	mov	eax, DWORD PTR _res$74136[ebp]
	jmp	SHORT $LN4@ReadDataba@2
__catch$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$0:
; Line 1622
	mov	eax, DWORD PTR _db$[ebp]
	mov	BYTE PTR [eax+310], 1
; Line 1623
	mov	DWORD PTR $T75648[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN10@ReadDataba@2
	ret	0
; Line 1624
	mov	eax, __tryend$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2
	ret	0
__catch$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$1:
; Line 1627
	mov	ecx, DWORD PTR _db$[ebp]
	mov	BYTE PTR [ecx+306], 1
; Line 1628
	mov	DWORD PTR $T75649[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN12@ReadDataba@2
	ret	0
; Line 1629
	mov	eax, __tryend$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2
	ret	0
__tryend$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z$2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN11@ReadDataba@2
$LN12@ReadDataba@2:
; Line 1628
	mov	eax, DWORD PTR $T75649[ebp]
	jmp	SHORT $LN4@ReadDataba@2
$LN11@ReadDataba@2:
	jmp	SHORT $LN4@ReadDataba@2
$LN10@ReadDataba@2:
; Line 1623
	mov	eax, DWORD PTR $T75648[ebp]
$LN4@ReadDataba@2:
; Line 1630
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadDatabase@CInArchive@N7z@NArchive@@QAEJAAUCDbEx@23@PAUICryptoGetTextPassword@@AA_N2AAVUString@@@Z ENDP ; NArchive::N7z::CInArchive::ReadDatabase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Free@?$CBuffer@E@@QAEXXZ
_TEXT	SEGMENT
$T75666 = -8						; size = 4
_this$ = -4						; size = 4
?Free@?$CBuffer@E@@QAEXXZ PROC				; CBuffer<unsigned char>::Free, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 16
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Free
; Line 18
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T75666[ebp], edx
	mov	eax, DWORD PTR $T75666[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 19
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN1@Free:
; Line 21
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 22
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@?$CBuffer@E@@QAEXXZ ENDP				; CBuffer<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@I@Z
_TEXT	SEGMENT
$T75671 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$CBuffer@E@@QAE@I@Z PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75671[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75671[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CBuffer@E@@QAE@I@Z ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T75674 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75674[ebp], ecx
	mov	edx, DWORD PTR $T75674[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QAEPAEXZ PROC				; CBuffer<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QAEPAEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QBEPBEXZ PROC				; CBuffer<unsigned char>::operator unsigned char const *, COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QBEPBEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CBuffer@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CBuffer@E@@QBEIXZ PROC				; CBuffer<unsigned char>::Size, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CBuffer@E@@QBEIXZ ENDP				; CBuffer<unsigned char>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Alloc@?$CBuffer@E@@QAEXI@Z
_TEXT	SEGMENT
$T75683 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?Alloc@?$CBuffer@E@@QAEXI@Z PROC			; CBuffer<unsigned char>::Alloc, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN3@Alloc
; Line 47
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@?$CBuffer@E@@QAEXXZ		; CBuffer<unsigned char>::Free
; Line 48
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@Alloc
; Line 50
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75683[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75683[ebp]
	mov	DWORD PTR [eax], ecx
; Line 51
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN3@Alloc:
; Line 54
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@?$CBuffer@E@@QAEXI@Z ENDP			; CBuffer<unsigned char>::Alloc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z PROC			; CBuffer<unsigned char>::CopyFrom, COMDAT
; _this$ = ecx
; Line 67
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 68
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 69
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CopyFrom
; Line 70
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@CopyFrom:
; Line 71
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z ENDP			; CBuffer<unsigned char>::CopyFrom
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z PROC ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ENDP ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
$T75696 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ PROC ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75696[ebp], ecx
	mov	edx, DWORD PTR $T75696[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCCoderStreamsInfo@NCoderMixer2@@@@QAE@XZ ENDP ; CRecordVector<NCoderMixer2::CCoderStreamsInfo>::~CRecordVector<NCoderMixer2::CCoderStreamsInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ
_TEXT	SEGMENT
$T75699 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ PROC	; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75699[ebp], ecx
	mov	edx, DWORD PTR $T75699[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCBond@NCoderMixer2@@@@QAE@XZ ENDP	; CRecordVector<NCoderMixer2::CBond>::~CRecordVector<NCoderMixer2::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z	; CRecordVector<unsigned int>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z PROC	; CRecordVector<unsigned int>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<unsigned int>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ENDP	; CRecordVector<unsigned int>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T75706 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75706[ebp], ecx
	mov	edx, DWORD PTR $T75706[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@I@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@I@@QAEXXZ PROC			; CRecordVector<unsigned int>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@I@@QAEXXZ ENDP			; CRecordVector<unsigned int>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QAEAAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QAEAAII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QAEAAII@Z ENDP			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@_K@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@_K@@QBEIXZ PROC			; CRecordVector<unsigned __int64>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@_K@@QBEIXZ ENDP			; CRecordVector<unsigned __int64>::Size
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z	; CRecordVector<unsigned __int64>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z PROC	; CRecordVector<unsigned __int64>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z ; CRecordVector<unsigned __int64>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@_K@@QAEXI@Z ENDP	; CRecordVector<unsigned __int64>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T75719 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75719[ebp], ecx
	mov	edx, DWORD PTR $T75719[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_K@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_K@@QAEXXZ PROC			; CRecordVector<unsigned __int64>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_K@@QAEXXZ ENDP			; CRecordVector<unsigned __int64>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@_K@@QAEI_K@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?Add@?$CRecordVector@_K@@QAEI_K@Z PROC			; CRecordVector<unsigned __int64>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@?$CRecordVector@_K@@QAEI_K@Z ENDP			; CRecordVector<unsigned __int64>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
_TEXT	ENDS
PUBLIC	?Insert@?$CRecordVector@_K@@QAEXI_K@Z		; CRecordVector<unsigned __int64>::Insert
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z
_TEXT	SEGMENT
_midVal$74341 = -24					; size = 8
_mid$74340 = -16					; size = 4
_right$ = -12						; size = 4
_left$ = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z PROC	; CRecordVector<unsigned __int64>::AddToUniqueSorted, COMDAT
; _this$ = ecx
; Line 287
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 288
	mov	DWORD PTR _left$[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _right$[ebp], ecx
$LN5@AddToUniqu:
; Line 289
	mov	edx, DWORD PTR _left$[ebp]
	cmp	edx, DWORD PTR _right$[ebp]
	je	SHORT $LN4@AddToUniqu
; Line 291
	mov	eax, DWORD PTR _left$[ebp]
	add	eax, DWORD PTR _right$[ebp]
	shr	eax, 1
	mov	DWORD PTR _mid$74340[ebp], eax
; Line 292
	mov	ecx, DWORD PTR _mid$74340[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _midVal$74341[ebp], edx
	mov	eax, DWORD PTR [eax+4]
	mov	DWORD PTR _midVal$74341[ebp+4], eax
; Line 293
	mov	ecx, DWORD PTR _item$[ebp]
	cmp	ecx, DWORD PTR _midVal$74341[ebp]
	jne	SHORT $LN3@AddToUniqu
	mov	edx, DWORD PTR _item$[ebp+4]
	cmp	edx, DWORD PTR _midVal$74341[ebp+4]
	jne	SHORT $LN3@AddToUniqu
; Line 294
	mov	eax, DWORD PTR _mid$74340[ebp]
	jmp	SHORT $LN6@AddToUniqu
$LN3@AddToUniqu:
; Line 295
	mov	eax, DWORD PTR _item$[ebp+4]
	cmp	eax, DWORD PTR _midVal$74341[ebp+4]
	ja	SHORT $LN2@AddToUniqu
	jb	SHORT $LN8@AddToUniqu
	mov	ecx, DWORD PTR _item$[ebp]
	cmp	ecx, DWORD PTR _midVal$74341[ebp]
	jae	SHORT $LN2@AddToUniqu
$LN8@AddToUniqu:
; Line 296
	mov	edx, DWORD PTR _mid$74340[ebp]
	mov	DWORD PTR _right$[ebp], edx
; Line 297
	jmp	SHORT $LN1@AddToUniqu
$LN2@AddToUniqu:
; Line 298
	mov	eax, DWORD PTR _mid$74340[ebp]
	add	eax, 1
	mov	DWORD PTR _left$[ebp], eax
$LN1@AddToUniqu:
; Line 299
	jmp	SHORT $LN5@AddToUniqu
$LN4@AddToUniqu:
; Line 300
	mov	ecx, DWORD PTR _item$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	eax, DWORD PTR _right$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@?$CRecordVector@_K@@QAEXI_K@Z	; CRecordVector<unsigned __int64>::Insert
; Line 301
	mov	eax, DWORD PTR _right$[ebp]
$LN6@AddToUniqu:
; Line 302
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AddToUniqueSorted@?$CRecordVector@_K@@QAEI_K@Z ENDP	; CRecordVector<unsigned __int64>::AddToUniqueSorted
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@_N@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@_N@@QBEIXZ PROC			; CRecordVector<bool>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@_N@@QBEIXZ ENDP			; CRecordVector<bool>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@_N@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@_N@@QBE_NXZ PROC		; CRecordVector<bool>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@_N@@QBE_NXZ ENDP		; CRecordVector<bool>::IsEmpty
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z	; CRecordVector<bool>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z PROC	; CRecordVector<bool>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ENDP	; CRecordVector<bool>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
$T75739 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::~CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75739[ebp], ecx
	mov	edx, DWORD PTR $T75739[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::~CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_N@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_N@@QAEXXZ PROC			; CRecordVector<bool>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_N@@QAEXXZ ENDP			; CRecordVector<bool>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ	; CRecordVector<bool>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@_N@@QAEI_N@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 1
?Add@?$CRecordVector@_N@@QAEI_N@Z PROC			; CRecordVector<bool>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ; CRecordVector<bool>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	dl, BYTE PTR _item$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv71[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv71[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@_N@@QAEI_N@Z ENDP			; CRecordVector<bool>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_N@@QBEAB_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_N@@QBEAB_NI@Z PROC			; CRecordVector<bool>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _index$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_N@@QBEAB_NI@Z ENDP			; CRecordVector<bool>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_N@@QAEAA_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_N@@QAEAA_NI@Z PROC			; CRecordVector<bool>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _index$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_N@@QAEAA_NI@Z ENDP			; CRecordVector<bool>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ PROC ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEPAUCCoderInfo@N7z@NArchive@@XZ ENDP ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo *
_TEXT	ENDS
PUBLIC	??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z		; NArchive::N7z::CCoderInfo::`vector deleting destructor'
PUBLIC	??0CCoderInfo@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CCoderInfo::CCoderInfo
PUBLIC	??1CCoderInfo@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CCoderInfo::~CCoderInfo
EXTRN	??_L@YGXPAXIHP6EX0@Z1@Z:PROC			; `eh vector constructor iterator'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z$0
__ehfuncinfo$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
_TEXT	SEGMENT
tv93 = -48						; size = 4
tv89 = -44						; size = 4
$T75758 = -40						; size = 4
$T75757 = -36						; size = 4
$T75754 = -32						; size = 4
$T75753 = -28						; size = 4
$T75752 = -24						; size = 4
_newBuffer$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_size$ = 8						; size = 4
?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z PROC ; CObjArray2<NArchive::N7z::CCoderInfo>::SetSize, COMDAT
; _this$ = ecx
; Line 213
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-48], eax
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN2@SetSize
; Line 215
	jmp	$LN3@SetSize
$LN2@SetSize:
; Line 216
	mov	DWORD PTR _newBuffer$[ebp], 0
; Line 217
	cmp	DWORD PTR _size$[ebp], 0
	je	$LN1@SetSize
; Line 218
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR $T75752[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T75752[ebp]
	mov	edx, 24					; 00000018H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	xor	eax, eax
	add	ecx, 4
	setb	al
	neg	eax
	or	eax, ecx
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75754[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T75754[ebp], 0
	je	SHORT $LN5@SetSize
	mov	ecx, DWORD PTR $T75754[ebp]
	mov	edx, DWORD PTR $T75752[ebp]
	mov	DWORD PTR [ecx], edx
	push	OFFSET ??1CCoderInfo@N7z@NArchive@@QAE@XZ
	push	OFFSET ??0CCoderInfo@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T75752[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR $T75754[ebp]
	add	ecx, 4
	push	ecx
	call	??_L@YGXPAXIHP6EX0@Z1@Z
	mov	edx, DWORD PTR $T75754[ebp]
	add	edx, 4
	mov	DWORD PTR tv89[ebp], edx
	jmp	SHORT $LN6@SetSize
$LN5@SetSize:
	mov	DWORD PTR tv89[ebp], 0
$LN6@SetSize:
	mov	eax, DWORD PTR tv89[ebp]
	mov	DWORD PTR $T75753[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T75753[ebp]
	mov	DWORD PTR _newBuffer$[ebp], ecx
$LN1@SetSize:
; Line 219
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T75758[ebp], eax
	mov	ecx, DWORD PTR $T75758[ebp]
	mov	DWORD PTR $T75757[ebp], ecx
	cmp	DWORD PTR $T75757[ebp], 0
	je	SHORT $LN7@SetSize
	push	3
	mov	ecx, DWORD PTR $T75757[ebp]
	call	??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv93[ebp], eax
	jmp	SHORT $LN8@SetSize
$LN7@SetSize:
	mov	DWORD PTR tv93[ebp], 0
$LN8@SetSize:
; Line 220
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newBuffer$[ebp]
	mov	DWORD PTR [edx], eax
; Line 221
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [ecx+4], edx
$LN3@SetSize:
; Line 222
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 48					; 00000030H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z$0:
	mov	eax, DWORD PTR $T75754[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-40]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetSize@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAEXI@Z ENDP ; CObjArray2<NArchive::N7z::CCoderInfo>::SetSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ PROC ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@UCBond@N7z@NArchive@@@@QAEPAUCBond@N7z@NArchive@@XZ ENDP ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ PROC ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ ENDP ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ PROC	; CObjArray2<NArchive::N7z::CBond>::Size, COMDAT
; _this$ = ecx
; Line 208
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ENDP	; CObjArray2<NArchive::N7z::CBond>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z
_TEXT	SEGMENT
$T75777 = -16						; size = 4
$T75776 = -12						; size = 4
_newBuffer$ = -8					; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z PROC ; CObjArray2<NArchive::N7z::CBond>::SetSize, COMDAT
; _this$ = ecx
; Line 213
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN2@SetSize@2
; Line 215
	jmp	SHORT $LN3@SetSize@2
$LN2@SetSize@2:
; Line 216
	mov	DWORD PTR _newBuffer$[ebp], 0
; Line 217
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@SetSize@2
; Line 218
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75776[ebp], eax
	mov	eax, DWORD PTR $T75776[ebp]
	mov	DWORD PTR _newBuffer$[ebp], eax
$LN1@SetSize@2:
; Line 219
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T75777[ebp], edx
	mov	eax, DWORD PTR $T75777[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 220
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newBuffer$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 221
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN3@SetSize@2:
; Line 222
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CObjArray2@UCBond@N7z@NArchive@@@@QAEXI@Z ENDP ; CObjArray2<NArchive::N7z::CBond>::SetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray2@I@@QAEPAIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@I@@QAEPAIXZ PROC			; CObjArray2<unsigned int>::operator unsigned int *, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@I@@QAEPAIXZ ENDP			; CObjArray2<unsigned int>::operator unsigned int *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetSize@?$CObjArray2@I@@QAEXI@Z
_TEXT	SEGMENT
$T75783 = -16						; size = 4
$T75782 = -12						; size = 4
_newBuffer$ = -8					; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?SetSize@?$CObjArray2@I@@QAEXI@Z PROC			; CObjArray2<unsigned int>::SetSize, COMDAT
; _this$ = ecx
; Line 213
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN2@SetSize@3
; Line 215
	jmp	SHORT $LN3@SetSize@3
$LN2@SetSize@3:
; Line 216
	mov	DWORD PTR _newBuffer$[ebp], 0
; Line 217
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN1@SetSize@3
; Line 218
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75782[ebp], eax
	mov	eax, DWORD PTR $T75782[ebp]
	mov	DWORD PTR _newBuffer$[ebp], eax
$LN1@SetSize@3:
; Line 219
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T75783[ebp], edx
	mov	eax, DWORD PTR $T75783[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 220
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newBuffer$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 221
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN3@SetSize@3:
; Line 222
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetSize@?$CObjArray2@I@@QAEXI@Z ENDP			; CObjArray2<unsigned int>::SetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Free@?$CObjArray@_K@@QAEXXZ
_TEXT	SEGMENT
$T75786 = -8						; size = 4
_this$ = -4						; size = 4
?Free@?$CObjArray@_K@@QAEXXZ PROC			; CObjArray<unsigned __int64>::Free, COMDAT
; _this$ = ecx
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 136
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75786[ebp], ecx
	mov	edx, DWORD PTR $T75786[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 137
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 138
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@?$CObjArray@_K@@QAEXXZ ENDP			; CObjArray<unsigned __int64>::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjArray@_K@@QAE@XZ PROC				; CObjArray<unsigned __int64>::CObjArray<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 140
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjArray@_K@@QAE@XZ ENDP				; CObjArray<unsigned __int64>::CObjArray<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray@_K@@QAE@XZ
_TEXT	SEGMENT
$T75791 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray@_K@@QAE@XZ PROC				; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75791[ebp], ecx
	mov	edx, DWORD PTR $T75791[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray@_K@@QAE@XZ ENDP				; CObjArray<unsigned __int64>::~CObjArray<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@_K@@QAEPA_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@_K@@QAEPA_KXZ PROC			; CObjArray<unsigned __int64>::operator unsigned __int64 *, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@_K@@QAEPA_KXZ ENDP			; CObjArray<unsigned __int64>::operator unsigned __int64 *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@_K@@QBEPB_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@_K@@QBEPB_KXZ PROC			; CObjArray<unsigned __int64>::operator unsigned __int64 const *, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@_K@@QBEPB_KXZ ENDP			; CObjArray<unsigned __int64>::operator unsigned __int64 const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Alloc@?$CObjArray@_K@@QAEXI@Z
_TEXT	SEGMENT
$T75799 = -12						; size = 4
$T75798 = -8						; size = 4
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?Alloc@?$CObjArray@_K@@QAEXI@Z PROC			; CObjArray<unsigned __int64>::Alloc, COMDAT
; _this$ = ecx
; Line 147
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75798[ebp], ecx
	mov	edx, DWORD PTR $T75798[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 149
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 150
	xor	ecx, ecx
	mov	eax, DWORD PTR _newSize$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75799[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75799[ebp]
	mov	DWORD PTR [eax], ecx
; Line 151
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@?$CObjArray@_K@@QAEXI@Z ENDP			; CObjArray<unsigned __int64>::Alloc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Free@?$CObjArray@I@@QAEXXZ
_TEXT	SEGMENT
$T75802 = -8						; size = 4
_this$ = -4						; size = 4
?Free@?$CObjArray@I@@QAEXXZ PROC			; CObjArray<unsigned int>::Free, COMDAT
; _this$ = ecx
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 136
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75802[ebp], ecx
	mov	edx, DWORD PTR $T75802[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 137
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 138
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@?$CObjArray@I@@QAEXXZ ENDP			; CObjArray<unsigned int>::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjArray@I@@QAE@XZ PROC				; CObjArray<unsigned int>::CObjArray<unsigned int>, COMDAT
; _this$ = ecx
; Line 140
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjArray@I@@QAE@XZ ENDP				; CObjArray<unsigned int>::CObjArray<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray@I@@QAE@XZ
_TEXT	SEGMENT
$T75807 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray@I@@QAE@XZ PROC				; CObjArray<unsigned int>::~CObjArray<unsigned int>, COMDAT
; _this$ = ecx
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75807[ebp], ecx
	mov	edx, DWORD PTR $T75807[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray@I@@QAE@XZ ENDP				; CObjArray<unsigned int>::~CObjArray<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@I@@QAEPAIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@I@@QAEPAIXZ PROC				; CObjArray<unsigned int>::operator unsigned int *, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@I@@QAEPAIXZ ENDP				; CObjArray<unsigned int>::operator unsigned int *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@I@@QBEPBIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@I@@QBEPBIXZ PROC				; CObjArray<unsigned int>::operator unsigned int const *, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@I@@QBEPBIXZ ENDP				; CObjArray<unsigned int>::operator unsigned int const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Alloc@?$CObjArray@I@@QAEXI@Z
_TEXT	SEGMENT
$T75815 = -12						; size = 4
$T75814 = -8						; size = 4
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?Alloc@?$CObjArray@I@@QAEXI@Z PROC			; CObjArray<unsigned int>::Alloc, COMDAT
; _this$ = ecx
; Line 147
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75814[ebp], ecx
	mov	edx, DWORD PTR $T75814[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 149
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 150
	xor	ecx, ecx
	mov	eax, DWORD PTR _newSize$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75815[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75815[ebp]
	mov	DWORD PTR [eax], ecx
; Line 151
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@?$CObjArray@I@@QAEXI@Z ENDP			; CObjArray<unsigned int>::Alloc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Free@?$CObjArray@E@@QAEXXZ
_TEXT	SEGMENT
$T75818 = -8						; size = 4
_this$ = -4						; size = 4
?Free@?$CObjArray@E@@QAEXXZ PROC			; CObjArray<unsigned char>::Free, COMDAT
; _this$ = ecx
; Line 135
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 136
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75818[ebp], ecx
	mov	edx, DWORD PTR $T75818[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 137
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 138
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@?$CObjArray@E@@QAEXXZ ENDP			; CObjArray<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray@E@@QAE@I@Z
_TEXT	SEGMENT
$T75821 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$CObjArray@E@@QAE@I@Z PROC				; CObjArray<unsigned char>::CObjArray<unsigned char>, COMDAT
; _this$ = ecx
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CObjArray
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75821[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T75821[ebp]
	mov	DWORD PTR [edx], eax
$LN2@CObjArray:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CObjArray@E@@QAE@I@Z ENDP				; CObjArray<unsigned char>::CObjArray<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjArray@E@@QAE@XZ PROC				; CObjArray<unsigned char>::CObjArray<unsigned char>, COMDAT
; _this$ = ecx
; Line 140
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjArray@E@@QAE@XZ ENDP				; CObjArray<unsigned char>::CObjArray<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray@E@@QAE@XZ
_TEXT	SEGMENT
$T75826 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray@E@@QAE@XZ PROC				; CObjArray<unsigned char>::~CObjArray<unsigned char>, COMDAT
; _this$ = ecx
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75826[ebp], ecx
	mov	edx, DWORD PTR $T75826[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray@E@@QAE@XZ ENDP				; CObjArray<unsigned char>::~CObjArray<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@E@@QAEPAEXZ PROC				; CObjArray<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@E@@QAEPAEXZ ENDP				; CObjArray<unsigned char>::operator unsigned char *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@E@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@E@@QBEPBEXZ PROC				; CObjArray<unsigned char>::operator unsigned char const *, COMDAT
; _this$ = ecx
; Line 144
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@E@@QBEPBEXZ ENDP				; CObjArray<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Alloc@?$CObjArray@E@@QAEXI@Z
_TEXT	SEGMENT
$T75834 = -12						; size = 4
$T75833 = -8						; size = 4
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?Alloc@?$CObjArray@E@@QAEXI@Z PROC			; CObjArray<unsigned char>::Alloc, COMDAT
; _this$ = ecx
; Line 147
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 148
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75833[ebp], ecx
	mov	edx, DWORD PTR $T75833[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 149
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 150
	mov	ecx, DWORD PTR _newSize$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75834[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T75834[ebp]
	mov	DWORD PTR [edx], eax
; Line 151
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@?$CObjArray@E@@QAEXI@Z ENDP			; CObjArray<unsigned char>::Alloc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ PROC ; CRecordVector<NArchive::N7z::CFileItem>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ENDP ; CRecordVector<NArchive::N7z::CFileItem>::Size
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z ; CRecordVector<NArchive::N7z::CFileItem>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z PROC ; CRecordVector<NArchive::N7z::CFileItem>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z ; CRecordVector<NArchive::N7z::CFileItem>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z ENDP ; CRecordVector<NArchive::N7z::CFileItem>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ PROC ; CRecordVector<NArchive::N7z::CFileItem>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ ENDP ; CRecordVector<NArchive::N7z::CFileItem>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z PROC ; CRecordVector<NArchive::N7z::CFileItem>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEAAUCFileItem@N7z@NArchive@@I@Z ENDP ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ PROC		; CMyComPtr<IInStream>::Release, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ENDP		; CMyComPtr<IInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z PROC ; CMyComPtr<IInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ENDP ; CMyComPtr<IInStream>::operator=
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ PROC	; CObjectVector<CBuffer<unsigned char> >::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@V?$CBuffer@E@@@@QBEIXZ ENDP	; CObjectVector<CBuffer<unsigned char> >::Size
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ PROC		; CObjectVector<CBuffer<unsigned char> >::CObjectVector<CBuffer<unsigned char> >, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ENDP		; CObjectVector<CBuffer<unsigned char> >::CObjectVector<CBuffer<unsigned char> >
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z PROC ; CObjectVector<CBuffer<unsigned char> >::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@V?$CBuffer@E@@@@QBEABV?$CBuffer@E@@I@Z ENDP ; CObjectVector<CBuffer<unsigned char> >::operator[]
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Front@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ PROC ; CObjectVector<CBuffer<unsigned char> >::Front, COMDAT
; _this$ = ecx
; Line 453
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@I@Z ; CObjectVector<CBuffer<unsigned char> >::operator[]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ ENDP ; CObjectVector<CBuffer<unsigned char> >::Front
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T75863 = -28						; size = 4
$T75862 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ PROC ; CObjectVector<CBuffer<unsigned char> >::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75863[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T75863[ebp], 0
	je	SHORT $LN3@AddNew
	mov	ecx, DWORD PTR $T75863[ebp]
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew
$LN3@AddNew:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T75862[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T75862[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ$0:
	mov	eax, DWORD PTR $T75863[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@XZ ENDP ; CObjectVector<CBuffer<unsigned char> >::AddNew
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_G?$CBuffer@E@@QAEPAXI@Z			; CBuffer<unsigned char>::`scalar deleting destructor'
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T75876 = -28						; size = 4
$T75875 = -24						; size = 4
_i$74619 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ PROC		; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$74619[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$74619[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$74619[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$74619[ebp], eax
	mov	ecx, DWORD PTR _i$74619[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T75876[ebp], edx
	mov	eax, DWORD PTR $T75876[ebp]
	mov	DWORD PTR $T75875[ebp], eax
	cmp	DWORD PTR $T75875[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T75875[ebp]
	call	??_G?$CBuffer@E@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@V?$CBuffer@E@@@@QAE@XZ ENDP		; CObjectVector<CBuffer<unsigned char> >::~CObjectVector<CBuffer<unsigned char> >
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CCoderInfo::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1CCoderInfo@N7z@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCoderInfo@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CCoderInfo::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CCoderInfo@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCoderInfo@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CCoderInfo::CCoderInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCoderInfo@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CCoderInfo::CCoderInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CCoderInfo@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCoderInfo@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CCoderInfo::~CCoderInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCoderInfo@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CCoderInfo::~CCoderInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_G?$CBuffer@E@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CBuffer@E@@QAEPAXI@Z PROC				; CBuffer<unsigned char>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CBuffer@E@@QAEPAXI@Z ENDP				; CBuffer<unsigned char>::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T75902 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T75902[ebp], ecx
	mov	edx, DWORD PTR $T75902[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z
_TEXT	SEGMENT
$T75912 = -12						; size = 4
$T75911 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z PROC	; CRecordVector<unsigned int>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@I@@QAEXXZ	; CRecordVector<unsigned int>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T75911[ebp], eax
	mov	ecx, DWORD PTR $T75911[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75912[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75912[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z ENDP	; CRecordVector<unsigned int>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
_TEXT	SEGMENT
$T75916 = -20						; size = 4
$T75915 = -16						; size = 4
_p$74684 = -12						; size = 4
_newCapacity$74683 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ PROC	; CRecordVector<unsigned __int64>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$74683[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$74683[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75915[ebp], eax
	mov	eax, DWORD PTR $T75915[ebp]
	mov	DWORD PTR _p$74684[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$74684[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T75916[ebp], edx
	mov	eax, DWORD PTR $T75916[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$74684[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$74683[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ENDP	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z
_TEXT	SEGMENT
$T75920 = -12						; size = 4
$T75919 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z PROC	; CRecordVector<unsigned __int64>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe@2
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T75919[ebp], eax
	mov	ecx, DWORD PTR $T75919[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75920[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T75920[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe@2:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@_K@@QAEXI@Z ENDP	; CRecordVector<unsigned __int64>::ClearAndReserve
_TEXT	ENDS
PUBLIC	?MoveItems@?$CRecordVector@_K@@AAEXII@Z		; CRecordVector<unsigned __int64>::MoveItems
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Insert@?$CRecordVector@_K@@QAEXI_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_item$ = 12						; size = 8
?Insert@?$CRecordVector@_K@@QAEXI_K@Z PROC		; CRecordVector<unsigned __int64>::Insert, COMDAT
; _this$ = ecx
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition
; Line 212
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, 1
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@?$CRecordVector@_K@@AAEXII@Z	; CRecordVector<unsigned __int64>::MoveItems
; Line 213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 214
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 215
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Insert@?$CRecordVector@_K@@QAEXI_K@Z ENDP		; CRecordVector<unsigned __int64>::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ
_TEXT	SEGMENT
$T75926 = -20						; size = 4
$T75925 = -16						; size = 4
_p$74703 = -12						; size = 4
_newCapacity$74702 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ PROC	; CRecordVector<bool>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$74702[ebp], ecx
; Line 23
	mov	edx, DWORD PTR _newCapacity$74702[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75925[ebp], eax
	mov	eax, DWORD PTR $T75925[ebp]
	mov	DWORD PTR _p$74703[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$74703[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T75926[ebp], edx
	mov	eax, DWORD PTR $T75926[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$74703[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$74702[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ENDP	; CRecordVector<bool>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z
_TEXT	SEGMENT
$T75930 = -12						; size = 4
$T75929 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z PROC	; CRecordVector<bool>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@_N@@QAEXXZ	; CRecordVector<bool>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe@3
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T75929[ebp], eax
	mov	ecx, DWORD PTR $T75929[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75930[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T75930[ebp]
	mov	DWORD PTR [edx], eax
; Line 82
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN2@ClearAndRe@3:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z ENDP	; CRecordVector<bool>::ClearAndReserve
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
PUBLIC	??0CFileItem@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFileItem::CFileItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z$0
__ehfuncinfo$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z
_TEXT	SEGMENT
tv83 = -36						; size = 4
$T75936 = -32						; size = 4
$T75935 = -28						; size = 4
$T75934 = -24						; size = 4
$T75933 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z PROC ; CRecordVector<NArchive::N7z::CFileItem>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXXZ ; CRecordVector<NArchive::N7z::CFileItem>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	$LN2@ClearAndRe@4
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T75933[ebp], eax
	mov	ecx, DWORD PTR $T75933[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR $T75934[ebp], ecx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T75934[ebp]
	mov	edx, 24					; 00000018H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75936[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T75936[ebp], 0
	je	SHORT $LN4@ClearAndRe@4
	push	OFFSET ??0CFileItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFileItem::CFileItem
	mov	eax, DWORD PTR $T75934[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR $T75936[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T75936[ebp]
	mov	DWORD PTR tv83[ebp], edx
	jmp	SHORT $LN5@ClearAndRe@4
$LN4@ClearAndRe@4:
	mov	DWORD PTR tv83[ebp], 0
$LN5@ClearAndRe@4:
	mov	eax, DWORD PTR tv83[ebp]
	mov	DWORD PTR $T75935[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T75935[ebp]
	mov	DWORD PTR [ecx], edx
; Line 82
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN2@ClearAndRe@4:
; Line 84
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z$0:
	mov	eax, DWORD PTR $T75936[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ClearAndReserve@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEXI@Z ENDP ; CRecordVector<NArchive::N7z::CFileItem>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFileItem@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileItem@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFileItem::CFileItem, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 173
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+17], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+18], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+19], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileItem@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFileItem::CFileItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@I@Z PROC ; CObjectVector<CBuffer<unsigned char> >::operator[], COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@V?$CBuffer@E@@@@QAEAAV?$CBuffer@E@@I@Z ENDP ; CObjectVector<CBuffer<unsigned char> >::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
$LN2@vector@2:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector@2
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector@2
$LN3@vector@2:
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T75955 = -20						; size = 4
$T75954 = -16						; size = 4
_p$74744 = -12						; size = 4
_newCapacity$74743 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@3
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$74743[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$74743[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T75954[ebp], eax
	mov	eax, DWORD PTR $T75954[ebp]
	mov	DWORD PTR _p$74744[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@3
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$74744[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@3:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T75955[ebp], edx
	mov	eax, DWORD PTR $T75955[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$74744[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$74743[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@3:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MoveItems@?$CRecordVector@_K@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_destIndex$ = 8						; size = 4
_srcIndex$ = 12						; size = 4
?MoveItems@?$CRecordVector@_K@@AAEXII@Z PROC		; CRecordVector<unsigned __int64>::MoveItems, COMDAT
; _this$ = ecx
; Line 14
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 15
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _srcIndex$[ebp]
	shl	ecx, 3
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _srcIndex$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _destIndex$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 16
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@?$CRecordVector@_K@@AAEXII@Z ENDP		; CRecordVector<unsigned __int64>::MoveItems
_TEXT	ENDS
END
