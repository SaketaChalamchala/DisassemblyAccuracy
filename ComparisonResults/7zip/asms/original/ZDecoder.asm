; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Compress\ZDecoder.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?Free@CDecoder@NZ@NCompress@@QAEXXZ		; NCompress::NZ::CDecoder::Free
EXTRN	_MyFree@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\compress\zdecoder.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Free@CDecoder@NZ@NCompress@@QAEXXZ PROC		; NCompress::NZ::CDecoder::Free
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	push	ecx
	call	_MyFree@4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 26
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	call	_MyFree@4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 27
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	push	ecx
	call	_MyFree@4
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
; Line 28
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@CDecoder@NZ@NCompress@@QAEXXZ ENDP		; NCompress::NZ::CDecoder::Free
_TEXT	ENDS
PUBLIC	??_7CDecoder@NZ@NCompress@@6B@			; NCompress::NZ::CDecoder::`vftable'
PUBLIC	??1CDecoder@NZ@NCompress@@QAE@XZ		; NCompress::NZ::CDecoder::~CDecoder
PUBLIC	??_R4CDecoder@NZ@NCompress@@6B@			; NCompress::NZ::CDecoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDecoder@NZ@NCompress@@@8		; NCompress::NZ::CDecoder `RTTI Type Descriptor'
PUBLIC	??_R3CDecoder@NZ@NCompress@@8			; NCompress::NZ::CDecoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDecoder@NZ@NCompress@@8			; NCompress::NZ::CDecoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDecoder@NZ@NCompress@@8		; NCompress::NZ::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICompressCoder@@8			; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressCoder@@@8			; ICompressCoder `RTTI Type Descriptor'
PUBLIC	??_R3ICompressCoder@@8				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressCoder@@8				; ICompressCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CDecoder@NZ@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::NZ::CDecoder::QueryInterface
PUBLIC	?AddRef@CDecoder@NZ@NCompress@@UAGKXZ		; NCompress::NZ::CDecoder::AddRef
PUBLIC	?Release@CDecoder@NZ@NCompress@@UAGKXZ		; NCompress::NZ::CDecoder::Release
PUBLIC	?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NZ::CDecoder::Code
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressCoder@@8
rdata$r	SEGMENT
??_R2ICompressCoder@@8 DD FLAT:??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressCoder@@8
rdata$r	SEGMENT
??_R3ICompressCoder@@8 DD 00H				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressCoder@@@8
_DATA	SEGMENT
??_R0?AUICompressCoder@@@8 DD FLAT:??_7type_info@@6B@	; ICompressCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressCoder@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressCoder@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressCoder@@8 DD FLAT:??_R0?AUICompressCoder@@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDecoder@NZ@NCompress@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDecoder@NZ@NCompress@@8 DD FLAT:??_R0?AVCDecoder@NZ@NCompress@@@8 ; NCompress::NZ::CDecoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDecoder@NZ@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R2CDecoder@NZ@NCompress@@8
rdata$r	SEGMENT
??_R2CDecoder@NZ@NCompress@@8 DD FLAT:??_R1A@?0A@EA@CDecoder@NZ@NCompress@@8 ; NCompress::NZ::CDecoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressCoder@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CDecoder@NZ@NCompress@@8
rdata$r	SEGMENT
??_R3CDecoder@NZ@NCompress@@8 DD 00H			; NCompress::NZ::CDecoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CDecoder@NZ@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDecoder@NZ@NCompress@@@8
_DATA	SEGMENT
??_R0?AVCDecoder@NZ@NCompress@@@8 DD FLAT:??_7type_info@@6B@ ; NCompress::NZ::CDecoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDecoder@NZ@NCompress@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDecoder@NZ@NCompress@@6B@
rdata$r	SEGMENT
??_R4CDecoder@NZ@NCompress@@6B@ DD 00H			; NCompress::NZ::CDecoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDecoder@NZ@NCompress@@@8
	DD	FLAT:??_R3CDecoder@NZ@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_7CDecoder@NZ@NCompress@@6B@
CONST	SEGMENT
??_7CDecoder@NZ@NCompress@@6B@ DD FLAT:??_R4CDecoder@NZ@NCompress@@6B@ ; NCompress::NZ::CDecoder::`vftable'
	DD	FLAT:?QueryInterface@CDecoder@NZ@NCompress@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CDecoder@NZ@NCompress@@UAGKXZ
	DD	FLAT:?Release@CDecoder@NZ@NCompress@@UAGKXZ
	DD	FLAT:?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDecoder@NZ@NCompress@@QAE@XZ PROC			; NCompress::NZ::CDecoder::~CDecoder
; _this$ = ecx
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDecoder@NZ@NCompress@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@CDecoder@NZ@NCompress@@QAEXXZ	; NCompress::NZ::CDecoder::Free
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDecoder@NZ@NCompress@@QAE@XZ ENDP			; NCompress::NZ::CDecoder::~CDecoder
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_ICompressCoder:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CDecoder@NZ@NCompress@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CDecoder@NZ@NCompress@@UAGJABU_GUID@@PAPAX@Z PROC ; NCompress::NZ::CDecoder::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\zdecoder.h
; Line 30
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_ICompressCoder
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter
$LN3@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CDecoder@NZ@NCompress@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCompress::NZ::CDecoder::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CDecoder@NZ@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CDecoder@NZ@NCompress@@UAGKXZ PROC		; NCompress::NZ::CDecoder::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\zdecoder.h
; Line 30
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CDecoder@NZ@NCompress@@UAGKXZ ENDP		; NCompress::NZ::CDecoder::AddRef
_TEXT	ENDS
PUBLIC	??_GCDecoder@NZ@NCompress@@QAEPAXI@Z		; NCompress::NZ::CDecoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CDecoder@NZ@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T66906 = -8						; size = 4
$T66905 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CDecoder@NZ@NCompress@@UAGKXZ PROC		; NCompress::NZ::CDecoder::Release, COMDAT
; Line 30
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T66906[ebp], edx
	mov	eax, DWORD PTR $T66906[ebp]
	mov	DWORD PTR $T66905[ebp], eax
	cmp	DWORD PTR $T66905[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T66905[ebp]
	call	??_GCDecoder@NZ@NCompress@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CDecoder@NZ@NCompress@@UAGKXZ ENDP		; NCompress::NZ::CDecoder::Release
_TEXT	ENDS
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCDecoder@NZ@NCompress@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDecoder@NZ@NCompress@@QAEPAXI@Z PROC		; NCompress::NZ::CDecoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDecoder@NZ@NCompress@@QAE@XZ	; NCompress::NZ::CDecoder::~CDecoder
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDecoder@NZ@NCompress@@QAEPAXI@Z ENDP		; NCompress::NZ::CDecoder::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	?WriteByte@COutBuffer@@QAEXE@Z			; COutBuffer::WriteByte
PUBLIC	?GetProcessedSize@CInBufferBase@@QBE_KXZ	; CInBufferBase::GetProcessedSize
PUBLIC	?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream
PUBLIC	?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream
PUBLIC	??1CInBuffer@@QAE@XZ				; CInBuffer::~CInBuffer
PUBLIC	??1COutBuffer@@QAE@XZ				; COutBuffer::~COutBuffer
PUBLIC	??0COutBuffer@@QAE@XZ				; COutBuffer::COutBuffer
PUBLIC	??0CInBuffer@@QAE@XZ				; CInBuffer::CInBuffer
PUBLIC	__$ArrayPad$
PUBLIC	?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NZ::CDecoder::CodeReal
EXTRN	?Flush@COutBuffer@@QAEJXZ:PROC			; COutBuffer::Flush
EXTRN	?GetProcessedSize@COutBuffer@@QBE_KXZ:PROC	; COutBuffer::GetProcessedSize
EXTRN	_MyAlloc@4:PROC
EXTRN	?ReadBytes@CInBufferBase@@QAEIPAEI@Z:PROC	; CInBufferBase::ReadBytes
EXTRN	?Init@COutBuffer@@QAEXXZ:PROC			; COutBuffer::Init
EXTRN	?Create@COutBuffer@@QAE_NI@Z:PROC		; COutBuffer::Create
EXTRN	?Init@CInBufferBase@@QAEXXZ:PROC		; CInBufferBase::Init
EXTRN	?Create@CInBuffer@@QAE_NI@Z:PROC		; CInBuffer::Create
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1
__ehfuncinfo$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv315 = -304						; size = 4
tv412 = -300						; size = 8
$T66924 = -292						; size = 4
$T66923 = -288						; size = 4
$T66922 = -284						; size = 4
$T66921 = -280						; size = 4
$T66920 = -276						; size = 4
$T66919 = -272						; size = 4
$T66918 = -268						; size = 4
$T66917 = -264						; size = 4
$T66916 = -260						; size = 4
$T66915 = -256						; size = 4
$T66914 = -252						; size = 4
_res2$ = -248						; size = 4
_i$66736 = -244						; size = 4
_cur$66735 = -240					; size = 4
_symbol$66728 = -236					; size = 4
_bytePos$66727 = -232					; size = 4
___result__$66724 = -228				; size = 4
_packSize$66723 = -220					; size = 8
_nowPos$66721 = -204					; size = 8
_res$ = -192						; size = 4
_numBufBits$ = -188					; size = 4
_bitPos$ = -184						; size = 4
_needPrev$ = -177					; size = 1
_head$ = -176						; size = 4
_numBits$ = -172					; size = 4
_blockSymbol$ = -168					; size = 4
_prevPos$ = -164					; size = 8
_numItems$ = -156					; size = 4
_maxbits$ = -152					; size = 4
_prop$ = -145						; size = 1
_buf$ = -140						; size = 20
_outBuffer$ = -112					; size = 40
_inBuffer$ = -64					; size = 40
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_inStream$ = 8						; size = 4
_outStream$ = 12					; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
_progress$ = 24						; size = 4
?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z PROC ; NCompress::NZ::CDecoder::CodeReal
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\compress\zdecoder.cpp
; Line 34
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 292				; 00000124H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-304]
	mov	ecx, 73					; 00000049H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 35
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??0CInBuffer@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 36
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??0COutBuffer@@QAE@XZ			; COutBuffer::COutBuffer
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 38
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 40
	push	1048576					; 00100000H
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	?Create@CInBuffer@@QAE_NI@Z		; CInBuffer::Create
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN32@CodeReal
; Line 41
	mov	DWORD PTR $T66914[ebp], -2147024882	; 8007000eH
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
	mov	eax, DWORD PTR $T66914[ebp]
	jmp	$LN33@CodeReal
$LN32@CodeReal:
; Line 42
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream
; Line 43
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	?Init@CInBufferBase@@QAEXXZ		; CInBufferBase::Init
; Line 45
	push	1048576					; 00100000H
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	?Create@COutBuffer@@QAE_NI@Z		; COutBuffer::Create
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN31@CodeReal
; Line 46
	mov	DWORD PTR $T66915[ebp], -2147024882	; 8007000eH
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
	mov	eax, DWORD PTR $T66915[ebp]
	jmp	$LN33@CodeReal
$LN31@CodeReal:
; Line 47
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream
; Line 48
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	?Init@COutBuffer@@QAEXXZ		; COutBuffer::Init
; Line 52
	push	3
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	?ReadBytes@CInBufferBase@@QAEIPAEI@Z	; CInBufferBase::ReadBytes
	cmp	eax, 3
	jae	SHORT $LN30@CodeReal
; Line 53
	mov	DWORD PTR $T66916[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
	mov	eax, DWORD PTR $T66916[ebp]
	jmp	$LN33@CodeReal
$LN30@CodeReal:
; Line 54
	movzx	eax, BYTE PTR _buf$[ebp]
	cmp	eax, 31					; 0000001fH
	jne	SHORT $LN28@CodeReal
	movzx	ecx, BYTE PTR _buf$[ebp+1]
	cmp	ecx, 157				; 0000009dH
	je	SHORT $LN29@CodeReal
$LN28@CodeReal:
; Line 55
	mov	DWORD PTR $T66917[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
	mov	eax, DWORD PTR $T66917[ebp]
	jmp	$LN33@CodeReal
$LN29@CodeReal:
; Line 57
	mov	dl, BYTE PTR _buf$[ebp+2]
	mov	BYTE PTR _prop$[ebp], dl
; Line 59
	movzx	eax, BYTE PTR _prop$[ebp]
	and	eax, 96					; 00000060H
	je	SHORT $LN27@CodeReal
; Line 60
	mov	DWORD PTR $T66918[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
	mov	eax, DWORD PTR $T66918[ebp]
	jmp	$LN33@CodeReal
$LN27@CodeReal:
; Line 61
	movzx	ecx, BYTE PTR _prop$[ebp]
	and	ecx, 31					; 0000001fH
	mov	DWORD PTR _maxbits$[ebp], ecx
; Line 62
	cmp	DWORD PTR _maxbits$[ebp], 9
	jb	SHORT $LN25@CodeReal
	cmp	DWORD PTR _maxbits$[ebp], 16		; 00000010H
	jbe	SHORT $LN26@CodeReal
$LN25@CodeReal:
; Line 63
	mov	DWORD PTR $T66919[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
	mov	eax, DWORD PTR $T66919[ebp]
	jmp	$LN33@CodeReal
$LN26@CodeReal:
; Line 64
	mov	edx, 1
	mov	ecx, DWORD PTR _maxbits$[ebp]
	shl	edx, cl
	mov	DWORD PTR _numItems$[ebp], edx
; Line 67
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _maxbits$[ebp]
	cmp	ecx, DWORD PTR [eax+20]
	jne	SHORT $LN23@CodeReal
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	je	SHORT $LN23@CodeReal
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN23@CodeReal
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+16], 0
	jne	$LN24@CodeReal
$LN23@CodeReal:
; Line 69
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@CDecoder@NZ@NCompress@@QAEXXZ	; NCompress::NZ::CDecoder::Free
; Line 70
	mov	edx, DWORD PTR _numItems$[ebp]
	shl	edx, 1
	push	edx
	call	_MyAlloc@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN22@CodeReal
	mov	DWORD PTR $T66920[ebp], -2147024882	; 8007000eH
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
	mov	eax, DWORD PTR $T66920[ebp]
	jmp	$LN33@CodeReal
$LN22@CodeReal:
; Line 71
	mov	eax, DWORD PTR _numItems$[ebp]
	push	eax
	call	_MyAlloc@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], 0
	jne	SHORT $LN21@CodeReal
	mov	DWORD PTR $T66921[ebp], -2147024882	; 8007000eH
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
	mov	eax, DWORD PTR $T66921[ebp]
	jmp	$LN33@CodeReal
$LN21@CodeReal:
; Line 72
	mov	eax, DWORD PTR _numItems$[ebp]
	push	eax
	call	_MyAlloc@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+16], 0
	jne	SHORT $LN20@CodeReal
	mov	DWORD PTR $T66922[ebp], -2147024882	; 8007000eH
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
	mov	eax, DWORD PTR $T66922[ebp]
	jmp	$LN33@CodeReal
$LN20@CodeReal:
; Line 73
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _maxbits$[ebp]
	mov	DWORD PTR [eax+20], ecx
$LN24@CodeReal:
; Line 76
	mov	DWORD PTR _prevPos$[ebp], 0
	mov	DWORD PTR _prevPos$[ebp+4], 0
; Line 77
	movzx	edx, BYTE PTR _prop$[ebp]
	and	edx, 128				; 00000080H
	neg	edx
	sbb	edx, edx
	and	edx, -65280				; ffff0100H
	add	edx, 65536				; 00010000H
	mov	DWORD PTR _blockSymbol$[ebp], edx
; Line 78
	mov	DWORD PTR _numBits$[ebp], 9
; Line 79
	xor	eax, eax
	cmp	DWORD PTR _blockSymbol$[ebp], 256	; 00000100H
	sete	al
	add	eax, 256				; 00000100H
	mov	DWORD PTR _head$[ebp], eax
; Line 80
	mov	BYTE PTR _needPrev$[ebp], 0
; Line 81
	mov	DWORD PTR _bitPos$[ebp], 0
; Line 82
	mov	DWORD PTR _numBufBits$[ebp], 0
; Line 84
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	xor	eax, eax
	mov	WORD PTR [edx+512], ax
; Line 85
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	BYTE PTR [edx+256], 0
; Line 86
	mov	DWORD PTR _res$[ebp], 0
$LN19@CodeReal:
; Line 90
	mov	eax, DWORD PTR _numBufBits$[ebp]
	cmp	eax, DWORD PTR _bitPos$[ebp]
	jne	$LN17@CodeReal
; Line 92
	mov	ecx, DWORD PTR _numBits$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	?ReadBytes@CInBufferBase@@QAEIPAEI@Z	; CInBufferBase::ReadBytes
	shl	eax, 3
	mov	DWORD PTR _numBufBits$[ebp], eax
; Line 93
	mov	DWORD PTR _bitPos$[ebp], 0
; Line 94
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	?GetProcessedSize@COutBuffer@@QBE_KXZ	; COutBuffer::GetProcessedSize
	mov	DWORD PTR _nowPos$66721[ebp], eax
	mov	DWORD PTR _nowPos$66721[ebp+4], edx
; Line 95
	cmp	DWORD PTR _progress$[ebp], 0
	je	$LN17@CodeReal
	mov	eax, DWORD PTR _nowPos$66721[ebp]
	sub	eax, DWORD PTR _prevPos$[ebp]
	mov	ecx, DWORD PTR _nowPos$66721[ebp+4]
	sbb	ecx, DWORD PTR _prevPos$[ebp+4]
	mov	DWORD PTR tv412[ebp], eax
	mov	DWORD PTR tv412[ebp+4], ecx
	cmp	DWORD PTR tv412[ebp+4], 0
	ja	SHORT $LN40@CodeReal
	cmp	DWORD PTR tv412[ebp], 8192		; 00002000H
	jb	$LN17@CodeReal
$LN40@CodeReal:
; Line 97
	mov	edx, DWORD PTR _nowPos$66721[ebp]
	mov	DWORD PTR _prevPos$[ebp], edx
	mov	eax, DWORD PTR _nowPos$66721[ebp+4]
	mov	DWORD PTR _prevPos$[ebp+4], eax
; Line 98
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize
	mov	DWORD PTR _packSize$66723[ebp], eax
	mov	DWORD PTR _packSize$66723[ebp+4], edx
; Line 99
	mov	esi, esp
	lea	ecx, DWORD PTR _nowPos$66721[ebp]
	push	ecx
	lea	edx, DWORD PTR _packSize$66723[ebp]
	push	edx
	mov	eax, DWORD PTR _progress$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$66724[ebp], eax
	cmp	DWORD PTR ___result__$66724[ebp], 0
	je	SHORT $LN17@CodeReal
	mov	ecx, DWORD PTR ___result__$66724[ebp]
	mov	DWORD PTR $T66923[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
	mov	eax, DWORD PTR $T66923[ebp]
	jmp	$LN33@CodeReal
$LN17@CodeReal:
; Line 102
	mov	edx, DWORD PTR _bitPos$[ebp]
	shr	edx, 3
	mov	DWORD PTR _bytePos$66727[ebp], edx
; Line 103
	mov	eax, DWORD PTR _bytePos$66727[ebp]
	movzx	ecx, BYTE PTR _buf$[ebp+eax]
	mov	edx, DWORD PTR _bytePos$66727[ebp]
	movzx	eax, BYTE PTR _buf$[ebp+edx+1]
	shl	eax, 8
	or	ecx, eax
	mov	edx, DWORD PTR _bytePos$66727[ebp]
	movzx	eax, BYTE PTR _buf$[ebp+edx+2]
	shl	eax, 16					; 00000010H
	or	ecx, eax
	mov	DWORD PTR _symbol$66728[ebp], ecx
; Line 104
	mov	ecx, DWORD PTR _bitPos$[ebp]
	and	ecx, 7
	mov	edx, DWORD PTR _symbol$66728[ebp]
	shr	edx, cl
	mov	DWORD PTR _symbol$66728[ebp], edx
; Line 105
	mov	eax, 1
	mov	ecx, DWORD PTR _numBits$[ebp]
	shl	eax, cl
	sub	eax, 1
	and	eax, DWORD PTR _symbol$66728[ebp]
	mov	DWORD PTR _symbol$66728[ebp], eax
; Line 106
	mov	ecx, DWORD PTR _bitPos$[ebp]
	add	ecx, DWORD PTR _numBits$[ebp]
	mov	DWORD PTR _bitPos$[ebp], ecx
; Line 107
	mov	edx, DWORD PTR _bitPos$[ebp]
	cmp	edx, DWORD PTR _numBufBits$[ebp]
	jbe	SHORT $LN14@CodeReal
; Line 108
	jmp	$LN18@CodeReal
$LN14@CodeReal:
; Line 109
	mov	eax, DWORD PTR _symbol$66728[ebp]
	cmp	eax, DWORD PTR _head$[ebp]
	jb	SHORT $LN13@CodeReal
; Line 111
	mov	DWORD PTR _res$[ebp], 1
; Line 112
	jmp	$LN18@CodeReal
$LN13@CodeReal:
; Line 114
	mov	ecx, DWORD PTR _symbol$66728[ebp]
	cmp	ecx, DWORD PTR _blockSymbol$[ebp]
	jne	SHORT $LN12@CodeReal
; Line 116
	mov	DWORD PTR _bitPos$[ebp], 0
	mov	edx, DWORD PTR _bitPos$[ebp]
	mov	DWORD PTR _numBufBits$[ebp], edx
; Line 117
	mov	DWORD PTR _numBits$[ebp], 9
; Line 118
	mov	DWORD PTR _head$[ebp], 257		; 00000101H
; Line 119
	mov	BYTE PTR _needPrev$[ebp], 0
; Line 120
	jmp	$LN19@CodeReal
$LN12@CodeReal:
; Line 122
	mov	eax, DWORD PTR _symbol$66728[ebp]
	mov	DWORD PTR _cur$66735[ebp], eax
; Line 123
	mov	DWORD PTR _i$66736[ebp], 0
$LN11@CodeReal:
; Line 124
	cmp	DWORD PTR _cur$66735[ebp], 256		; 00000100H
	jb	SHORT $LN10@CodeReal
; Line 126
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	eax, DWORD PTR _i$66736[ebp]
	mov	esi, DWORD PTR _cur$66735[ebp]
	mov	dl, BYTE PTR [edx+esi]
	mov	BYTE PTR [ecx+eax], dl
	mov	eax, DWORD PTR _i$66736[ebp]
	add	eax, 1
	mov	DWORD PTR _i$66736[ebp], eax
; Line 127
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _cur$66735[ebp]
	movzx	ecx, WORD PTR [edx+eax*2]
	mov	DWORD PTR _cur$66735[ebp], ecx
; Line 128
	jmp	SHORT $LN11@CodeReal
$LN10@CodeReal:
; Line 129
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _i$66736[ebp]
	mov	dl, BYTE PTR _cur$66735[ebp]
	mov	BYTE PTR [eax+ecx], dl
	mov	eax, DWORD PTR _i$66736[ebp]
	add	eax, 1
	mov	DWORD PTR _i$66736[ebp], eax
; Line 130
	movzx	ecx, BYTE PTR _needPrev$[ebp]
	test	ecx, ecx
	je	SHORT $LN7@CodeReal
; Line 132
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _head$[ebp]
	mov	dl, BYTE PTR _cur$66735[ebp]
	mov	BYTE PTR [ecx+eax-1], dl
; Line 133
	mov	eax, DWORD PTR _head$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _symbol$66728[ebp], eax
	jne	SHORT $LN7@CodeReal
; Line 134
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	al, BYTE PTR _cur$66735[ebp]
	mov	BYTE PTR [edx], al
$LN7@CodeReal:
; Line 137
	mov	ecx, DWORD PTR _i$66736[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$66736[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR _i$66736[ebp]
	movzx	edx, BYTE PTR [eax+ecx]
	push	edx
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	?WriteByte@COutBuffer@@QAEXE@Z		; COutBuffer::WriteByte
; Line 138
	cmp	DWORD PTR _i$66736[ebp], 0
	ja	SHORT $LN7@CodeReal
; Line 139
	mov	eax, DWORD PTR _head$[ebp]
	cmp	eax, DWORD PTR _numItems$[ebp]
	jae	SHORT $LN4@CodeReal
; Line 141
	mov	BYTE PTR _needPrev$[ebp], 1
; Line 142
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	eax, DWORD PTR _head$[ebp]
	mov	cx, WORD PTR _symbol$66728[ebp]
	mov	WORD PTR [edx+eax*2], cx
	mov	edx, DWORD PTR _head$[ebp]
	add	edx, 1
	mov	DWORD PTR _head$[ebp], edx
; Line 143
	mov	eax, 1
	mov	ecx, DWORD PTR _numBits$[ebp]
	shl	eax, cl
	cmp	DWORD PTR _head$[ebp], eax
	jbe	SHORT $LN3@CodeReal
; Line 145
	mov	ecx, DWORD PTR _numBits$[ebp]
	cmp	ecx, DWORD PTR _maxbits$[ebp]
	jae	SHORT $LN3@CodeReal
; Line 147
	mov	DWORD PTR _bitPos$[ebp], 0
	mov	edx, DWORD PTR _bitPos$[ebp]
	mov	DWORD PTR _numBufBits$[ebp], edx
; Line 148
	mov	eax, DWORD PTR _numBits$[ebp]
	add	eax, 1
	mov	DWORD PTR _numBits$[ebp], eax
$LN3@CodeReal:
; Line 152
	jmp	SHORT $LN1@CodeReal
$LN4@CodeReal:
; Line 153
	mov	BYTE PTR _needPrev$[ebp], 0
$LN1@CodeReal:
; Line 154
	jmp	$LN19@CodeReal
$LN18@CodeReal:
; Line 155
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+24], eax
	mov	DWORD PTR [ecx+28], edx
; Line 156
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	?Flush@COutBuffer@@QAEJXZ		; COutBuffer::Flush
	mov	DWORD PTR _res2$[ebp], eax
; Line 157
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN35@CodeReal
	mov	edx, DWORD PTR _res2$[ebp]
	mov	DWORD PTR tv315[ebp], edx
	jmp	SHORT $LN36@CodeReal
$LN35@CodeReal:
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR tv315[ebp], eax
$LN36@CodeReal:
	mov	ecx, DWORD PTR tv315[ebp]
	mov	DWORD PTR $T66924[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
	mov	eax, DWORD PTR $T66924[ebp]
$LN33@CodeReal:
; Line 158
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN48@CodeReal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 304				; 00000130H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN48@CodeReal:
	DD	5
	DD	$LN47@CodeReal
$LN47@CodeReal:
	DD	-64					; ffffffc0H
	DD	40					; 00000028H
	DD	$LN41@CodeReal
	DD	-112					; ffffff90H
	DD	40					; 00000028H
	DD	$LN42@CodeReal
	DD	-140					; ffffff74H
	DD	20					; 00000014H
	DD	$LN43@CodeReal
	DD	-204					; ffffff34H
	DD	8
	DD	$LN44@CodeReal
	DD	-220					; ffffff24H
	DD	8
	DD	$LN45@CodeReal
$LN45@CodeReal:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN44@CodeReal:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN43@CodeReal:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN42@CodeReal:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN41@CodeReal:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0:
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	jmp	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
__unwindfunclet$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1:
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	jmp	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
__ehhandler$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-304]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ENDP ; NCompress::NZ::CDecoder::CodeReal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetProcessedSize@CInBufferBase@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetProcessedSize@CInBufferBase@@QBE_KXZ PROC		; CInBufferBase::GetProcessedSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\inbuffer.h
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	xor	esi, esi
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+16]
	adc	esi, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [edx+8]
	cdq
	add	ecx, eax
	adc	esi, edx
	mov	eax, ecx
	mov	edx, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetProcessedSize@CInBufferBase@@QBE_KXZ ENDP		; CInBufferBase::GetProcessedSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z PROC ; CInBufferBase::SetStream, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ENDP ; CInBufferBase::SetStream
_TEXT	ENDS
EXTRN	?Free@CInBuffer@@QAEXXZ:PROC			; CInBuffer::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CInBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CInBuffer@@QAE@XZ PROC				; CInBuffer::~CInBuffer, COMDAT
; _this$ = ecx
; Line 85
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@CInBuffer@@QAEXXZ			; CInBuffer::Free
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CInBuffer@@QAE@XZ ENDP				; CInBuffer::~CInBuffer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0COutBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COutBuffer@@QAE@XZ PROC				; COutBuffer::COutBuffer, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\outbuffer.h
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0COutBuffer@@QAE@XZ ENDP				; COutBuffer::COutBuffer
_TEXT	ENDS
EXTRN	?Free@COutBuffer@@QAEXXZ:PROC			; COutBuffer::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1COutBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COutBuffer@@QAE@XZ PROC				; COutBuffer::~COutBuffer, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@COutBuffer@@QAEXXZ		; COutBuffer::Free
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COutBuffer@@QAE@XZ ENDP				; COutBuffer::~COutBuffer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z PROC ; COutBuffer::SetStream, COMDAT
; _this$ = ecx
; Line 43
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ENDP ; COutBuffer::SetStream
_TEXT	ENDS
EXTRN	?FlushWithCheck@COutBuffer@@QAEXXZ:PROC		; COutBuffer::FlushWithCheck
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WriteByte@COutBuffer@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?WriteByte@COutBuffer@@QAEXE@Z PROC			; COutBuffer::WriteByte, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 50
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	dl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN2@WriteByte
; Line 52
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushWithCheck@COutBuffer@@QAEXXZ	; COutBuffer::FlushWithCheck
$LN2@WriteByte:
; Line 53
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WriteByte@COutBuffer@@QAEXE@Z ENDP			; COutBuffer::WriteByte
_TEXT	ENDS
EXTRN	??0CInBufferBase@@QAE@XZ:PROC			; CInBufferBase::CInBufferBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CInBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CInBuffer@@QAE@XZ PROC				; CInBuffer::CInBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CInBufferBase@@QAE@XZ		; CInBufferBase::CInBufferBase
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CInBuffer@@QAE@XZ ENDP				; CInBuffer::CInBuffer
_TEXT	ENDS
PUBLIC	??_R0?AUCInBufferException@@@8			; CInBufferException `RTTI Type Descriptor'
PUBLIC	??_R0?AUCOutBufferException@@@8			; COutBufferException `RTTI Type Descriptor'
;	COMDAT ??_R0?AUCOutBufferException@@@8
; File c:\workspace\7z1505-src\cpp\7zip\compress\zdecoder.cpp
_DATA	SEGMENT
??_R0?AUCOutBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; COutBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCOutBufferException@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AUCInBufferException@@@8
_DATA	SEGMENT
??_R0?AUCInBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; CInBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCInBufferException@@', 00H
_DATA	ENDS
xdata$x	SEGMENT
__unwindtable$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z DD 00H
	DD	00H
	DD	01H
	DD	03H
	DD	FLAT:__catchsym$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$4
__ehfuncinfo$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__catchsym$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$4 DD 09H
	DD	FLAT:??_R0?AUCInBufferException@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
	DD	09H
	DD	FLAT:??_R0?AUCOutBufferException@@@8
	DD	0ffffffdcH
	DD	FLAT:__catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv84 = -56						; size = 4
$T66967 = -52						; size = 4
$T66966 = -48						; size = 4
$T66965 = -44						; size = 4
_e$66771 = -36						; size = 4
_e$66768 = -24						; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_inStream$ = 12						; size = 4
_outStream$ = 16					; size = 4
_inSize$ = 20						; size = 4
_outSize$ = 24						; size = 4
_progress$ = 28						; size = 4
?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z PROC ; NCompress::NZ::CDecoder::Code
; Line 162
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 163
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CodeReal@CDecoder@NZ@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NZ::CDecoder::CodeReal
	mov	DWORD PTR tv84[ebp], eax
	mov	eax, DWORD PTR tv84[ebp]
	jmp	SHORT $LN2@Code
__catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0:
; Line 164
	mov	edx, DWORD PTR _e$66768[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T66965[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Code
	ret	0
	mov	eax, __tryend$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
	ret	0
__catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1:
; Line 165
	mov	ecx, DWORD PTR _e$66771[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T66966[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN11@Code
	ret	0
	mov	eax, __tryend$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
	ret	0
__catch$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2:
; Line 166
	mov	DWORD PTR $T66967[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN13@Code
	ret	0
	mov	eax, __tryend$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
	ret	0
__tryend$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN12@Code
$LN13@Code:
	mov	eax, DWORD PTR $T66967[ebp]
	jmp	SHORT $LN2@Code
$LN12@Code:
	jmp	SHORT $LN10@Code
$LN11@Code:
; Line 165
	mov	eax, DWORD PTR $T66966[ebp]
	jmp	SHORT $LN2@Code
$LN10@Code:
	jmp	SHORT $LN2@Code
$LN9@Code:
; Line 164
	mov	eax, DWORD PTR $T66965[ebp]
$LN2@Code:
; Line 167
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@Code
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	1
$LN21@Code:
	DD	2
	DD	$LN20@Code
$LN20@Code:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@Code
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN18@Code
$LN18@Code:
	DB	101					; 00000065H
	DB	0
$LN17@Code:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Code@CDecoder@NZ@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ENDP ; NCompress::NZ::CDecoder::Code
PUBLIC	__$ArrayPad$
PUBLIC	?CheckStream@NZ@NCompress@@YG_NPBEI@Z		; NCompress::NZ::CheckStream
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv89 = -80						; size = 4
_symbol$66804 = -76					; size = 4
_bytePos$66803 = -72					; size = 4
_num$66801 = -68					; size = 4
_buf$ = -60						; size = 20
_numBufBits$ = -36					; size = 4
_bitPos$ = -32						; size = 4
_head$ = -28						; size = 4
_numBits$ = -24						; size = 4
_blockSymbol$ = -20					; size = 4
_numItems$ = -16					; size = 4
_maxbits$ = -12						; size = 4
_prop$ = -5						; size = 1
__$ArrayPad$ = -4					; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?CheckStream@NZ@NCompress@@YG_NPBEI@Z PROC		; NCompress::NZ::CheckStream
; Line 170
	push	ebp
	mov	ebp, esp
	sub	esp, 80					; 00000050H
	push	edi
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 171
	cmp	DWORD PTR _size$[ebp], 3
	jae	SHORT $LN15@CheckStrea
; Line 172
	xor	al, al
	jmp	$LN16@CheckStrea
$LN15@CheckStrea:
; Line 173
	mov	eax, DWORD PTR _data$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 31					; 0000001fH
	jne	SHORT $LN13@CheckStrea
	mov	edx, DWORD PTR _data$[ebp]
	movzx	eax, BYTE PTR [edx+1]
	cmp	eax, 157				; 0000009dH
	je	SHORT $LN14@CheckStrea
$LN13@CheckStrea:
; Line 174
	xor	al, al
	jmp	$LN16@CheckStrea
$LN14@CheckStrea:
; Line 175
	mov	ecx, DWORD PTR _data$[ebp]
	mov	dl, BYTE PTR [ecx+2]
	mov	BYTE PTR _prop$[ebp], dl
; Line 176
	movzx	eax, BYTE PTR _prop$[ebp]
	and	eax, 96					; 00000060H
	je	SHORT $LN12@CheckStrea
; Line 177
	xor	al, al
	jmp	$LN16@CheckStrea
$LN12@CheckStrea:
; Line 178
	movzx	ecx, BYTE PTR _prop$[ebp]
	and	ecx, 31					; 0000001fH
	mov	DWORD PTR _maxbits$[ebp], ecx
; Line 179
	cmp	DWORD PTR _maxbits$[ebp], 9
	jb	SHORT $LN10@CheckStrea
	cmp	DWORD PTR _maxbits$[ebp], 16		; 00000010H
	jbe	SHORT $LN11@CheckStrea
$LN10@CheckStrea:
; Line 180
	xor	al, al
	jmp	$LN16@CheckStrea
$LN11@CheckStrea:
; Line 181
	mov	edx, 1
	mov	ecx, DWORD PTR _maxbits$[ebp]
	shl	edx, cl
	mov	DWORD PTR _numItems$[ebp], edx
; Line 182
	movzx	eax, BYTE PTR _prop$[ebp]
	and	eax, 128				; 00000080H
	neg	eax
	sbb	eax, eax
	and	eax, -65280				; ffff0100H
	add	eax, 65536				; 00010000H
	mov	DWORD PTR _blockSymbol$[ebp], eax
; Line 183
	mov	DWORD PTR _numBits$[ebp], 9
; Line 184
	xor	ecx, ecx
	cmp	DWORD PTR _blockSymbol$[ebp], 256	; 00000100H
	sete	cl
	add	ecx, 256				; 00000100H
	mov	DWORD PTR _head$[ebp], ecx
; Line 185
	mov	DWORD PTR _bitPos$[ebp], 0
; Line 186
	mov	DWORD PTR _numBufBits$[ebp], 0
; Line 188
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, 3
	mov	DWORD PTR _data$[ebp], edx
; Line 189
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 3
	mov	DWORD PTR _size$[ebp], eax
$LN9@CheckStrea:
; Line 193
	mov	ecx, DWORD PTR _numBufBits$[ebp]
	cmp	ecx, DWORD PTR _bitPos$[ebp]
	jne	SHORT $LN7@CheckStrea
; Line 195
	mov	edx, DWORD PTR _numBits$[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN18@CheckStrea
	mov	eax, DWORD PTR _numBits$[ebp]
	mov	DWORD PTR tv89[ebp], eax
	jmp	SHORT $LN19@CheckStrea
$LN18@CheckStrea:
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR tv89[ebp], ecx
$LN19@CheckStrea:
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _num$66801[ebp], edx
; Line 196
	mov	eax, DWORD PTR _num$66801[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 197
	mov	eax, DWORD PTR _data$[ebp]
	add	eax, DWORD PTR _num$66801[ebp]
	mov	DWORD PTR _data$[ebp], eax
; Line 198
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _num$66801[ebp]
	mov	DWORD PTR _size$[ebp], ecx
; Line 199
	mov	edx, DWORD PTR _num$66801[ebp]
	shl	edx, 3
	mov	DWORD PTR _numBufBits$[ebp], edx
; Line 200
	mov	DWORD PTR _bitPos$[ebp], 0
$LN7@CheckStrea:
; Line 202
	mov	eax, DWORD PTR _bitPos$[ebp]
	shr	eax, 3
	mov	DWORD PTR _bytePos$66803[ebp], eax
; Line 203
	mov	ecx, DWORD PTR _bytePos$66803[ebp]
	movzx	edx, BYTE PTR _buf$[ebp+ecx]
	mov	eax, DWORD PTR _bytePos$66803[ebp]
	movzx	ecx, BYTE PTR _buf$[ebp+eax+1]
	shl	ecx, 8
	or	edx, ecx
	mov	eax, DWORD PTR _bytePos$66803[ebp]
	movzx	ecx, BYTE PTR _buf$[ebp+eax+2]
	shl	ecx, 16					; 00000010H
	or	edx, ecx
	mov	DWORD PTR _symbol$66804[ebp], edx
; Line 204
	mov	ecx, DWORD PTR _bitPos$[ebp]
	and	ecx, 7
	mov	edx, DWORD PTR _symbol$66804[ebp]
	shr	edx, cl
	mov	DWORD PTR _symbol$66804[ebp], edx
; Line 205
	mov	eax, 1
	mov	ecx, DWORD PTR _numBits$[ebp]
	shl	eax, cl
	sub	eax, 1
	and	eax, DWORD PTR _symbol$66804[ebp]
	mov	DWORD PTR _symbol$66804[ebp], eax
; Line 206
	mov	ecx, DWORD PTR _bitPos$[ebp]
	add	ecx, DWORD PTR _numBits$[ebp]
	mov	DWORD PTR _bitPos$[ebp], ecx
; Line 207
	mov	edx, DWORD PTR _bitPos$[ebp]
	cmp	edx, DWORD PTR _numBufBits$[ebp]
	jbe	SHORT $LN6@CheckStrea
; Line 210
	mov	al, 1
	jmp	SHORT $LN16@CheckStrea
$LN6@CheckStrea:
; Line 213
	mov	eax, DWORD PTR _symbol$66804[ebp]
	cmp	eax, DWORD PTR _head$[ebp]
	jb	SHORT $LN5@CheckStrea
; Line 214
	xor	al, al
	jmp	SHORT $LN16@CheckStrea
$LN5@CheckStrea:
; Line 215
	mov	ecx, DWORD PTR _symbol$66804[ebp]
	cmp	ecx, DWORD PTR _blockSymbol$[ebp]
	jne	SHORT $LN4@CheckStrea
; Line 217
	mov	DWORD PTR _bitPos$[ebp], 0
	mov	edx, DWORD PTR _bitPos$[ebp]
	mov	DWORD PTR _numBufBits$[ebp], edx
; Line 218
	mov	DWORD PTR _numBits$[ebp], 9
; Line 219
	mov	DWORD PTR _head$[ebp], 257		; 00000101H
; Line 220
	jmp	$LN9@CheckStrea
$LN4@CheckStrea:
; Line 222
	mov	eax, DWORD PTR _head$[ebp]
	cmp	eax, DWORD PTR _numItems$[ebp]
	jae	SHORT $LN3@CheckStrea
; Line 224
	mov	ecx, DWORD PTR _head$[ebp]
	add	ecx, 1
	mov	DWORD PTR _head$[ebp], ecx
; Line 225
	mov	edx, 1
	mov	ecx, DWORD PTR _numBits$[ebp]
	shl	edx, cl
	cmp	DWORD PTR _head$[ebp], edx
	jbe	SHORT $LN3@CheckStrea
; Line 227
	mov	eax, DWORD PTR _numBits$[ebp]
	cmp	eax, DWORD PTR _maxbits$[ebp]
	jae	SHORT $LN3@CheckStrea
; Line 229
	mov	DWORD PTR _bitPos$[ebp], 0
	mov	ecx, DWORD PTR _bitPos$[ebp]
	mov	DWORD PTR _numBufBits$[ebp], ecx
; Line 230
	mov	edx, DWORD PTR _numBits$[ebp]
	add	edx, 1
	mov	DWORD PTR _numBits$[ebp], edx
$LN3@CheckStrea:
; Line 234
	jmp	$LN9@CheckStrea
$LN16@CheckStrea:
; Line 235
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN23@CheckStrea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN23@CheckStrea:
	DD	1
	DD	$LN22@CheckStrea
$LN22@CheckStrea:
	DD	-60					; ffffffc4H
	DD	20					; 00000014H
	DD	$LN21@CheckStrea
$LN21@CheckStrea:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?CheckStream@NZ@NCompress@@YG_NPBEI@Z ENDP		; NCompress::NZ::CheckStream
_TEXT	ENDS
END
