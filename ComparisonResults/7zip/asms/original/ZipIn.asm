; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\Zip\ZipIn.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?Parse@CEcd@NZip@NArchive@@QAEXPBE@Z		; NArchive::NZip::CEcd::Parse
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?Parse@CEcd@NZip@NArchive@@QAEXPBE@Z PROC		; NArchive::NZip::CEcd::Parse
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
; Line 47
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax+2], dx
; Line 48
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx+4]
	mov	WORD PTR [eax+4], dx
; Line 49
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx+6]
	mov	WORD PTR [eax+6], dx
; Line 50
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], edx
; Line 52
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx+16]
	mov	WORD PTR [eax+16], dx
; Line 53
	mov	esp, ebp
	pop	ebp
	ret	4
?Parse@CEcd@NZip@NArchive@@QAEXPBE@Z ENDP		; NArchive::NZip::CEcd::Parse
_TEXT	ENDS
PUBLIC	?Parse@CEcd64@NZip@NArchive@@QAEXPBE@Z		; NArchive::NZip::CEcd64::Parse
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?Parse@CEcd64@NZip@NArchive@@QAEXPBE@Z PROC		; NArchive::NZip::CEcd64::Parse
; _this$ = ecx
; Line 71
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 72
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
; Line 73
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax+2], dx
; Line 74
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+4], edx
; Line 75
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+20], ecx
; Line 77
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+24], ecx
	mov	eax, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+28], eax
; Line 78
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+32], eax
	mov	edx, DWORD PTR [edx+32]
	mov	DWORD PTR [ecx+36], edx
; Line 79
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+36]
	mov	DWORD PTR [eax+40], edx
	mov	ecx, DWORD PTR [ecx+40]
	mov	DWORD PTR [eax+44], ecx
; Line 80
	mov	esp, ebp
	pop	ebp
	ret	4
?Parse@CEcd64@NZip@NArchive@@QAEXPBE@Z ENDP		; NArchive::NZip::CEcd64::Parse
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
PUBLIC	?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z ; NArchive::NZip::CInArchive::FindAndReadMarker
PUBLIC	?Close@CInArchive@NZip@NArchive@@QAEXXZ		; NArchive::NZip::CInArchive::Close
PUBLIC	?Open@CInArchive@NZip@NArchive@@QAEJPAUIInStream@@PB_K@Z ; NArchive::NZip::CInArchive::Open
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result_$69990 = -24					; size = 4
___result_$69987 = -20					; size = 4
___result_$69984 = -16					; size = 4
___result_$69981 = -12					; size = 4
___result_$69978 = -8					; size = 4
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
_searchHeaderSizeLimit$ = 12				; size = 4
?Open@CInArchive@NZip@NArchive@@QAEJPAUIInStream@@PB_K@Z PROC ; NArchive::NZip::CInArchive::Open
; _this$ = ecx
; Line 83
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 84
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 0
; Line 85
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@CInArchive@NZip@NArchive@@QAEXXZ	; NArchive::NZip::CInArchive::Close
; Line 86
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	mov	esi, esp
	push	ecx
	push	1
	push	0
	push	0
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$69978[ebp], eax
	cmp	DWORD PTR ___result_$69978[ebp], 0
	je	SHORT $LN5@Open
	mov	eax, DWORD PTR ___result_$69978[ebp]
	jmp	$LN6@Open
$LN5@Open:
; Line 87
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 88					; 00000058H
	mov	esi, esp
	push	eax
	push	2
	push	0
	push	0
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$69981[ebp], eax
	cmp	DWORD PTR ___result_$69981[ebp], 0
	je	SHORT $LN4@Open
	mov	eax, DWORD PTR ___result_$69981[ebp]
	jmp	$LN6@Open
$LN4@Open:
; Line 88
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR [edx+48]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$69984[ebp], eax
	cmp	DWORD PTR ___result_$69984[ebp], 0
	je	SHORT $LN3@Open
	mov	eax, DWORD PTR ___result_$69984[ebp]
	jmp	SHORT $LN6@Open
$LN3@Open:
; Line 91
	mov	eax, DWORD PTR _searchHeaderSizeLimit$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z ; NArchive::NZip::CInArchive::FindAndReadMarker
	mov	DWORD PTR ___result_$69987[ebp], eax
	cmp	DWORD PTR ___result_$69987[ebp], 0
	je	SHORT $LN2@Open
	mov	eax, DWORD PTR ___result_$69987[ebp]
	jmp	SHORT $LN6@Open
$LN2@Open:
; Line 92
	mov	esi, esp
	push	0
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR [edx+48]
	push	ecx
	mov	edx, DWORD PTR _stream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$69990[ebp], eax
	cmp	DWORD PTR ___result_$69990[ebp], 0
	je	SHORT $LN1@Open
	mov	eax, DWORD PTR ___result_$69990[ebp]
	jmp	SHORT $LN6@Open
$LN1@Open:
; Line 93
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 94
	xor	eax, eax
$LN6@Open:
; Line 95
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Open@CInArchive@NZip@NArchive@@QAEJPAUIInStream@@PB_K@Z ENDP ; NArchive::NZip::CInArchive::Open
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ	; CMyComPtr<IInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@CInArchive@NZip@NArchive@@QAEXXZ PROC		; NArchive::NZip::CInArchive::Close
; _this$ = ecx
; Line 98
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 99
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+120], 0
; Line 100
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+122], 0
; Line 101
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+123], 0
; Line 102
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+124], 0
; Line 103
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+125], 0
; Line 104
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+126], 0
; Line 105
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+121], 0
; Line 106
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release
; Line 107
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@CInArchive@NZip@NArchive@@QAEXXZ ENDP		; NArchive::NZip::CInArchive::Close
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
PUBLIC	?Seek@CInArchive@NZip@NArchive@@AAEJ_K@Z	; NArchive::NZip::CInArchive::Seek
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
_offset$ = 8						; size = 8
?Seek@CInArchive@NZip@NArchive@@AAEJ_K@Z PROC		; NArchive::NZip::CInArchive::Seek
; _this$ = ecx
; Line 110
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 111
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _offset$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	edx, DWORD PTR tv68[ebp]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 112
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Seek@CInArchive@NZip@NArchive@@AAEJ_K@Z ENDP		; NArchive::NZip::CInArchive::Seek
_TEXT	ENDS
PUBLIC	?IsEmptyArc@CEcd@NZip@NArchive@@QAE_NXZ		; NArchive::NZip::CEcd::IsEmptyArc
PUBLIC	__$ArrayPad$
PUBLIC	_IsArc_Zip@8
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_dataSize$70060 = -72					; size = 4
_i$70048 = -68						; size = 4
_p2$70047 = -64						; size = 4
_rem$70045 = -60					; size = 4
_extraOffset$ = -56					; size = 4
_extraSize$ = -52					; size = 4
_nameSize$ = -48					; size = 4
_i$70031 = -44						; size = 4
_kPureHeaderSize$70030 = -40				; size = 4
_ecd$70026 = -32					; size = 20
_value$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_size$ = 12						; size = 4
_IsArc_Zip@8 PROC
; Line 129
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	edi
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 18					; 00000012H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 130
	cmp	DWORD PTR _size$[ebp], 8
	jae	SHORT $LN26@IsArc_Zip
; Line 131
	mov	eax, 2
	jmp	$LN27@IsArc_Zip
$LN26@IsArc_Zip:
; Line 132
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 80					; 00000050H
	je	SHORT $LN25@IsArc_Zip
; Line 133
	xor	eax, eax
	jmp	$LN27@IsArc_Zip
$LN25@IsArc_Zip:
; Line 135
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _value$[ebp], eax
; Line 137
	cmp	DWORD PTR _value$[ebp], 808471376	; 30304b50H
	jne	SHORT $LN24@IsArc_Zip
; Line 139
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 140
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 4
	mov	DWORD PTR _size$[ebp], edx
$LN24@IsArc_Zip:
; Line 143
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _value$[ebp], ecx
; Line 145
	cmp	DWORD PTR _value$[ebp], 101010256	; 06054b50H
	jne	SHORT $LN23@IsArc_Zip
; Line 147
	cmp	DWORD PTR _size$[ebp], 22		; 00000016H
	jae	SHORT $LN22@IsArc_Zip
; Line 148
	mov	eax, 2
	jmp	$LN27@IsArc_Zip
$LN22@IsArc_Zip:
; Line 150
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	push	edx
	lea	ecx, DWORD PTR _ecd$70026[ebp]
	call	?Parse@CEcd@NZip@NArchive@@QAEXPBE@Z	; NArchive::NZip::CEcd::Parse
; Line 152
	lea	ecx, DWORD PTR _ecd$70026[ebp]
	call	?IsEmptyArc@CEcd@NZip@NArchive@@QAE_NXZ	; NArchive::NZip::CEcd::IsEmptyArc
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN21@IsArc_Zip
; Line 153
	xor	eax, eax
	jmp	$LN27@IsArc_Zip
$LN21@IsArc_Zip:
; Line 154
	mov	eax, 1
	jmp	$LN27@IsArc_Zip
$LN23@IsArc_Zip:
; Line 157
	cmp	DWORD PTR _value$[ebp], 67324752	; 04034b50H
	je	SHORT $LN20@IsArc_Zip
; Line 158
	xor	eax, eax
	jmp	$LN27@IsArc_Zip
$LN20@IsArc_Zip:
; Line 160
	cmp	DWORD PTR _size$[ebp], 30		; 0000001eH
	jae	SHORT $LN19@IsArc_Zip
; Line 161
	mov	eax, 2
	jmp	$LN27@IsArc_Zip
$LN19@IsArc_Zip:
; Line 163
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 4
	mov	DWORD PTR _p$[ebp], ecx
; Line 166
	mov	DWORD PTR _kPureHeaderSize$70030[ebp], 26 ; 0000001aH
; Line 168
	mov	DWORD PTR _i$70031[ebp], 0
	jmp	SHORT $LN18@IsArc_Zip
$LN17@IsArc_Zip:
	mov	edx, DWORD PTR _i$70031[ebp]
	add	edx, 1
	mov	DWORD PTR _i$70031[ebp], edx
$LN18@IsArc_Zip:
	cmp	DWORD PTR _i$70031[ebp], 26		; 0000001aH
	jae	SHORT $LN16@IsArc_Zip
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _i$70031[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN16@IsArc_Zip
	jmp	SHORT $LN17@IsArc_Zip
$LN16@IsArc_Zip:
; Line 169
	cmp	DWORD PTR _i$70031[ebp], 26		; 0000001aH
	jne	SHORT $LN15@IsArc_Zip
; Line 170
	mov	eax, 2
	jmp	$LN27@IsArc_Zip
$LN15@IsArc_Zip:
; Line 191
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx+22]
	mov	DWORD PTR _nameSize$[ebp], eax
; Line 192
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, WORD PTR [ecx+24]
	mov	DWORD PTR _extraSize$[ebp], edx
; Line 193
	mov	eax, DWORD PTR _nameSize$[ebp]
	add	eax, 30					; 0000001eH
	mov	DWORD PTR _extraOffset$[ebp], eax
; Line 194
	mov	ecx, DWORD PTR _extraOffset$[ebp]
	add	ecx, DWORD PTR _extraSize$[ebp]
	cmp	ecx, 65536				; 00010000H
	jbe	SHORT $LN14@IsArc_Zip
; Line 195
	xor	eax, eax
	jmp	$LN27@IsArc_Zip
$LN14@IsArc_Zip:
; Line 197
	mov	edx, DWORD PTR _p$[ebp]
	sub	edx, 4
	mov	DWORD PTR _p$[ebp], edx
; Line 200
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 30					; 0000001eH
	mov	DWORD PTR _rem$70045[ebp], eax
; Line 201
	mov	ecx, DWORD PTR _rem$70045[ebp]
	cmp	ecx, DWORD PTR _nameSize$[ebp]
	jbe	SHORT $LN13@IsArc_Zip
; Line 202
	mov	edx, DWORD PTR _nameSize$[ebp]
	mov	DWORD PTR _rem$70045[ebp], edx
$LN13@IsArc_Zip:
; Line 203
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 30					; 0000001eH
	mov	DWORD PTR _p2$70047[ebp], eax
; Line 204
	mov	DWORD PTR _i$70048[ebp], 0
	jmp	SHORT $LN12@IsArc_Zip
$LN11@IsArc_Zip:
	mov	ecx, DWORD PTR _i$70048[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$70048[ebp], ecx
$LN12@IsArc_Zip:
	mov	edx, DWORD PTR _i$70048[ebp]
	cmp	edx, DWORD PTR _rem$70045[ebp]
	jae	SHORT $LN10@IsArc_Zip
; Line 205
	mov	eax, DWORD PTR _p2$70047[ebp]
	add	eax, DWORD PTR _i$70048[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN9@IsArc_Zip
; Line 206
	xor	eax, eax
	jmp	$LN27@IsArc_Zip
$LN9@IsArc_Zip:
; Line 207
	jmp	SHORT $LN11@IsArc_Zip
$LN10@IsArc_Zip:
; Line 209
	mov	edx, DWORD PTR _size$[ebp]
	cmp	edx, DWORD PTR _extraOffset$[ebp]
	jae	SHORT $LN8@IsArc_Zip
; Line 210
	mov	eax, 2
	jmp	$LN27@IsArc_Zip
$LN8@IsArc_Zip:
; Line 212
	cmp	DWORD PTR _extraSize$[ebp], 0
	jbe	$LN7@IsArc_Zip
; Line 214
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR _extraOffset$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 215
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, DWORD PTR _extraOffset$[ebp]
	mov	DWORD PTR _size$[ebp], ecx
$LN6@IsArc_Zip:
; Line 216
	cmp	DWORD PTR _extraSize$[ebp], 0
	je	SHORT $LN7@IsArc_Zip
; Line 218
	cmp	DWORD PTR _extraSize$[ebp], 4
	jae	SHORT $LN4@IsArc_Zip
; Line 223
	mov	eax, 1
	jmp	SHORT $LN27@IsArc_Zip
$LN4@IsArc_Zip:
; Line 225
	cmp	DWORD PTR _size$[ebp], 4
	jae	SHORT $LN3@IsArc_Zip
; Line 226
	mov	eax, 2
	jmp	SHORT $LN27@IsArc_Zip
$LN3@IsArc_Zip:
; Line 227
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx+2]
	mov	DWORD PTR _dataSize$70060[ebp], eax
; Line 228
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 4
	mov	DWORD PTR _size$[ebp], ecx
; Line 229
	mov	edx, DWORD PTR _extraSize$[ebp]
	sub	edx, 4
	mov	DWORD PTR _extraSize$[ebp], edx
; Line 230
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 231
	mov	ecx, DWORD PTR _dataSize$70060[ebp]
	cmp	ecx, DWORD PTR _extraSize$[ebp]
	jbe	SHORT $LN2@IsArc_Zip
; Line 232
	xor	eax, eax
	jmp	SHORT $LN27@IsArc_Zip
$LN2@IsArc_Zip:
; Line 233
	mov	edx, DWORD PTR _dataSize$70060[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN1@IsArc_Zip
; Line 234
	mov	eax, 2
	jmp	SHORT $LN27@IsArc_Zip
$LN1@IsArc_Zip:
; Line 235
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, DWORD PTR _dataSize$70060[ebp]
	mov	DWORD PTR _size$[ebp], eax
; Line 236
	mov	ecx, DWORD PTR _extraSize$[ebp]
	sub	ecx, DWORD PTR _dataSize$70060[ebp]
	mov	DWORD PTR _extraSize$[ebp], ecx
; Line 237
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _dataSize$70060[ebp]
	mov	DWORD PTR _p$[ebp], edx
; Line 238
	jmp	SHORT $LN6@IsArc_Zip
$LN7@IsArc_Zip:
; Line 241
	mov	eax, 1
$LN27@IsArc_Zip:
; Line 242
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN31@IsArc_Zip
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN31@IsArc_Zip:
	DD	1
	DD	$LN30@IsArc_Zip
$LN30@IsArc_Zip:
	DD	-32					; ffffffe0H
	DD	20					; 00000014H
	DD	$LN29@IsArc_Zip
$LN29@IsArc_Zip:
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	100					; 00000064H
	DB	0
_IsArc_Zip@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmptyArc@CEcd@NZip@NArchive@@QAE_NXZ
_TEXT	SEGMENT
tv79 = -8						; size = 4
_this$ = -4						; size = 4
?IsEmptyArc@CEcd@NZip@NArchive@@QAE_NXZ PROC		; NArchive::NZip::CEcd::IsEmptyArc, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 40
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax]
	test	ecx, ecx
	jne	SHORT $LN3@IsEmptyArc
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [edx+2]
	test	eax, eax
	jne	SHORT $LN3@IsEmptyArc
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+4]
	test	edx, edx
	jne	SHORT $LN3@IsEmptyArc
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+6]
	test	ecx, ecx
	jne	SHORT $LN3@IsEmptyArc
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+8], 0
	jne	SHORT $LN3@IsEmptyArc
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+12], 0
	jne	SHORT $LN3@IsEmptyArc
	mov	DWORD PTR tv79[ebp], 1
	jmp	SHORT $LN4@IsEmptyArc
$LN3@IsEmptyArc:
	mov	DWORD PTR tv79[ebp], 0
$LN4@IsEmptyArc:
	mov	al, BYTE PTR tv79[ebp]
; Line 41
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmptyArc@CEcd@NZip@NArchive@@QAE_NXZ ENDP		; NArchive::NZip::CEcd::IsEmptyArc
_TEXT	ENDS
PUBLIC	??1?$CObjArray@E@@QAE@XZ			; CObjArray<unsigned char>::~CObjArray<unsigned char>
PUBLIC	??B?$CObjArray@E@@QAEPAEXZ			; CObjArray<unsigned char>::operator unsigned char *
PUBLIC	??0?$CObjArray@E@@QAE@I@Z			; CObjArray<unsigned char>::CObjArray<unsigned char>
PUBLIC	?Clear@CInArchiveInfo@NZip@NArchive@@QAEXXZ	; NArchive::NZip::CInArchiveInfo::Clear
EXTRN	__imp__memmove:PROC
EXTRN	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z:PROC ; ReadStream
EXTRN	___CxxFrameHandler3:PROC
xdata$x	SEGMENT
__unwindtable$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z$0
__ehfuncinfo$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv349 = -172						; size = 4
tv346 = -168						; size = 8
tv178 = -160						; size = 4
tv262 = -156						; size = 4
$T71546 = -152						; size = 4
$T71545 = -148						; size = 4
$T71544 = -144						; size = 4
$T71541 = -140						; size = 4
_res$70149 = -136					; size = 4
_rem$70148 = -132					; size = 4
_pos$70142 = -128					; size = 4
_buf$70141 = -124					; size = 4
_limit$70137 = -120					; size = 4
_isFinished$70136 = -113				; size = 1
___result_$70132 = -112					; size = 4
_numReadBytes$70131 = -104				; size = 4
_curScanPos$ = -96					; size = 8
_numBytesInBuffer$ = -88				; size = 4
_buffer$ = -80						; size = 4
_kCheckSize$ = -72					; size = 4
_kBufSize$ = -68					; size = 4
___result_$70092 = -64					; size = 4
_processed$70091 = -56					; size = 4
___result_$70081 = -48					; size = 4
_processed$70080 = -40					; size = 4
_startBuf$70079 = -28					; size = 4
_kStartBufSize$70078 = -20				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_searchLimit$ = 12					; size = 4
?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z PROC ; NArchive::NZip::CInArchive::FindAndReadMarker
; _this$ = ecx
; Line 253
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 160				; 000000a0H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-172]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 254
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	call	?Clear@CInArchiveInfo@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CInArchiveInfo::Clear
; Line 255
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	mov	DWORD PTR [eax+64], edx
	mov	ecx, DWORD PTR [ecx+52]
	mov	DWORD PTR [eax+68], ecx
; Line 256
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+72], ecx
	mov	eax, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+76], eax
; Line 258
	cmp	DWORD PTR _searchLimit$[ebp], 0
	je	$LN22@FindAndRea
	mov	ecx, DWORD PTR _searchLimit$[ebp]
	mov	DWORD PTR tv262[ebp], ecx
	mov	edx, DWORD PTR tv262[ebp]
	mov	eax, DWORD PTR tv262[ebp]
	mov	ecx, DWORD PTR [edx]
	or	ecx, DWORD PTR [eax+4]
	jne	$LN22@FindAndRea
; Line 260
	mov	DWORD PTR _kStartBufSize$70078[ebp], 4
; Line 262
	mov	DWORD PTR _processed$70080[ebp], 4
; Line 263
	lea	edx, DWORD PTR _processed$70080[ebp]
	push	edx
	lea	eax, DWORD PTR _startBuf$70079[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	call	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream
	mov	DWORD PTR ___result_$70081[ebp], eax
	cmp	DWORD PTR ___result_$70081[ebp], 0
	je	SHORT $LN21@FindAndRea
	mov	eax, DWORD PTR ___result_$70081[ebp]
	jmp	$LN23@FindAndRea
$LN21@FindAndRea:
; Line 264
	mov	edx, DWORD PTR _processed$70080[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+48]
	adc	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], edx
	mov	DWORD PTR [ecx+52], eax
; Line 265
	cmp	DWORD PTR _processed$70080[ebp], 4
	jae	SHORT $LN20@FindAndRea
; Line 266
	mov	eax, 1
	jmp	$LN23@FindAndRea
$LN20@FindAndRea:
; Line 267
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _startBuf$70079[ebp]
	mov	DWORD PTR [edx+44], eax
; Line 269
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 101010256		; 06054b50H
	je	$LN19@FindAndRea
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+44], 67324752		; 04034b50H
	je	$LN19@FindAndRea
; Line 271
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 808471376		; 30304b50H
	je	SHORT $LN18@FindAndRea
; Line 272
	mov	eax, 1
	jmp	$LN23@FindAndRea
$LN18@FindAndRea:
; Line 273
	mov	DWORD PTR _processed$70091[ebp], 4
; Line 274
	lea	ecx, DWORD PTR _processed$70091[ebp]
	push	ecx
	lea	edx, DWORD PTR _startBuf$70079[ebp]
	push	edx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	call	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream
	mov	DWORD PTR ___result_$70092[ebp], eax
	cmp	DWORD PTR ___result_$70092[ebp], 0
	je	SHORT $LN17@FindAndRea
	mov	eax, DWORD PTR ___result_$70092[ebp]
	jmp	$LN23@FindAndRea
$LN17@FindAndRea:
; Line 275
	mov	ecx, DWORD PTR _processed$70091[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+48]
	adc	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx
; Line 276
	cmp	DWORD PTR _processed$70091[ebp], 4
	jae	SHORT $LN16@FindAndRea
; Line 277
	mov	eax, 1
	jmp	$LN23@FindAndRea
$LN16@FindAndRea:
; Line 278
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _startBuf$70079[ebp]
	mov	DWORD PTR [ecx+44], edx
; Line 280
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 101010256		; 06054b50H
	je	SHORT $LN15@FindAndRea
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 67324752		; 04034b50H
	je	SHORT $LN15@FindAndRea
; Line 281
	mov	eax, 1
	jmp	$LN23@FindAndRea
$LN15@FindAndRea:
; Line 282
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+72]
	add	eax, 4
	mov	ecx, DWORD PTR [edx+76]
	adc	ecx, 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+72], eax
	mov	DWORD PTR [edx+76], ecx
$LN19@FindAndRea:
; Line 288
	xor	eax, eax
	jmp	$LN23@FindAndRea
$LN22@FindAndRea:
; Line 291
	mov	DWORD PTR _kBufSize$[ebp], 262144	; 00040000H
; Line 292
	mov	DWORD PTR _kCheckSize$[ebp], 65536	; 00010000H
; Line 293
	push	262144					; 00040000H
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??0?$CObjArray@E@@QAE@I@Z		; CObjArray<unsigned char>::CObjArray<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 295
	mov	DWORD PTR _numBytesInBuffer$[ebp], 0
; Line 296
	mov	DWORD PTR _curScanPos$[ebp], 0
	mov	DWORD PTR _curScanPos$[ebp+4], 0
$LN14@FindAndRea:
; Line 300
	mov	eax, 262144				; 00040000H
	sub	eax, DWORD PTR _numBytesInBuffer$[ebp]
	mov	DWORD PTR _numReadBytes$70131[ebp], eax
; Line 301
	lea	ecx, DWORD PTR _numReadBytes$70131[ebp]
	push	ecx
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	add	eax, DWORD PTR _numBytesInBuffer$[ebp]
	push	eax
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	call	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream
	mov	DWORD PTR ___result_$70132[ebp], eax
	cmp	DWORD PTR ___result_$70132[ebp], 0
	je	SHORT $LN12@FindAndRea
	mov	eax, DWORD PTR ___result_$70132[ebp]
	mov	DWORD PTR $T71541[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T71541[ebp]
	jmp	$LN23@FindAndRea
$LN12@FindAndRea:
; Line 302
	mov	ecx, DWORD PTR _numReadBytes$70131[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+48]
	adc	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx
; Line 303
	mov	ecx, DWORD PTR _numBytesInBuffer$[ebp]
	add	ecx, DWORD PTR _numReadBytes$70131[ebp]
	mov	DWORD PTR _numBytesInBuffer$[ebp], ecx
; Line 304
	xor	edx, edx
	cmp	DWORD PTR _numBytesInBuffer$[ebp], 262144 ; 00040000H
	setne	dl
	mov	BYTE PTR _isFinished$70136[ebp], dl
; Line 306
	movzx	eax, BYTE PTR _isFinished$70136[ebp]
	test	eax, eax
	je	SHORT $LN25@FindAndRea
	mov	ecx, DWORD PTR _numBytesInBuffer$[ebp]
	mov	DWORD PTR tv178[ebp], ecx
	jmp	SHORT $LN26@FindAndRea
$LN25@FindAndRea:
	mov	edx, DWORD PTR _numBytesInBuffer$[ebp]
	sub	edx, 65536				; 00010000H
	mov	DWORD PTR tv178[ebp], edx
$LN26@FindAndRea:
	mov	eax, DWORD PTR tv178[ebp]
	mov	DWORD PTR _limit$70137[ebp], eax
; Line 308
	cmp	DWORD PTR _searchLimit$[ebp], 0
	je	SHORT $LN11@FindAndRea
	mov	ecx, DWORD PTR _limit$70137[ebp]
	xor	edx, edx
	add	ecx, DWORD PTR _curScanPos$[ebp]
	adc	edx, DWORD PTR _curScanPos$[ebp+4]
	mov	eax, DWORD PTR _searchLimit$[ebp]
	mov	DWORD PTR tv346[ebp], ecx
	mov	DWORD PTR tv346[ebp+4], edx
	mov	DWORD PTR tv349[ebp], eax
	mov	ecx, DWORD PTR tv349[ebp]
	mov	edx, DWORD PTR tv346[ebp+4]
	cmp	edx, DWORD PTR [ecx+4]
	jb	SHORT $LN11@FindAndRea
	ja	SHORT $LN28@FindAndRea
	mov	eax, DWORD PTR tv349[ebp]
	mov	ecx, DWORD PTR tv346[ebp]
	cmp	ecx, DWORD PTR [eax]
	jbe	SHORT $LN11@FindAndRea
$LN28@FindAndRea:
; Line 309
	mov	edx, DWORD PTR _searchLimit$[ebp]
	mov	eax, DWORD PTR [edx]
	sub	eax, DWORD PTR _curScanPos$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	sbb	ecx, DWORD PTR _curScanPos$[ebp+4]
	add	eax, 1
	adc	ecx, 0
	mov	DWORD PTR _limit$70137[ebp], eax
$LN11@FindAndRea:
; Line 311
	cmp	DWORD PTR _limit$70137[ebp], 1
	jae	SHORT $LN10@FindAndRea
; Line 312
	jmp	$LN13@FindAndRea
$LN10@FindAndRea:
; Line 314
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	mov	DWORD PTR _buf$70141[ebp], eax
; Line 315
	mov	DWORD PTR _pos$70142[ebp], 0
	jmp	SHORT $LN9@FindAndRea
$LN8@FindAndRea:
	mov	edx, DWORD PTR _pos$70142[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$70142[ebp], edx
$LN9@FindAndRea:
	mov	eax, DWORD PTR _pos$70142[ebp]
	cmp	eax, DWORD PTR _limit$70137[ebp]
	jae	$LN7@FindAndRea
; Line 317
	mov	ecx, DWORD PTR _buf$70141[ebp]
	add	ecx, DWORD PTR _pos$70142[ebp]
	movzx	edx, BYTE PTR [ecx]
	cmp	edx, 80					; 00000050H
	je	SHORT $LN6@FindAndRea
; Line 318
	jmp	SHORT $LN8@FindAndRea
$LN6@FindAndRea:
; Line 319
	mov	eax, DWORD PTR _buf$70141[ebp]
	add	eax, DWORD PTR _pos$70142[ebp]
	movzx	ecx, BYTE PTR [eax+1]
	cmp	ecx, 75					; 0000004bH
	je	SHORT $LN5@FindAndRea
; Line 320
	jmp	SHORT $LN8@FindAndRea
$LN5@FindAndRea:
; Line 321
	mov	edx, DWORD PTR _numBytesInBuffer$[ebp]
	sub	edx, DWORD PTR _pos$70142[ebp]
	mov	DWORD PTR _rem$70148[ebp], edx
; Line 322
	movzx	eax, BYTE PTR _isFinished$70136[ebp]
	push	eax
	mov	ecx, DWORD PTR _rem$70148[ebp]
	push	ecx
	mov	edx, DWORD PTR _buf$70141[ebp]
	add	edx, DWORD PTR _pos$70142[ebp]
	push	edx
	call	?IsArc_Zip_2@NZip@NArchive@@YGIPBEI_N@Z	; NArchive::NZip::IsArc_Zip_2
	mov	DWORD PTR _res$70149[ebp], eax
; Line 323
	cmp	DWORD PTR _res$70149[ebp], 0
	je	$LN4@FindAndRea
; Line 325
	cmp	DWORD PTR _rem$70148[ebp], 4
	jae	SHORT $LN3@FindAndRea
; Line 326
	mov	DWORD PTR $T71544[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T71544[ebp]
	jmp	$LN23@FindAndRea
$LN3@FindAndRea:
; Line 327
	mov	eax, DWORD PTR _buf$70141[ebp]
	add	eax, DWORD PTR _pos$70142[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx+44], edx
; Line 328
	mov	eax, DWORD PTR _pos$70142[ebp]
	xor	ecx, ecx
	add	eax, DWORD PTR _curScanPos$[ebp]
	adc	ecx, DWORD PTR _curScanPos$[ebp+4]
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+64]
	adc	ecx, DWORD PTR [edx+68]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+64], eax
	mov	DWORD PTR [edx+68], ecx
; Line 329
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+72], edx
	mov	ecx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+76], ecx
; Line 330
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+44], 808471376		; 30304b50H
	jne	SHORT $LN2@FindAndRea
; Line 332
	mov	eax, DWORD PTR _buf$70141[ebp]
	add	eax, DWORD PTR _pos$70142[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+44], edx
; Line 333
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+72]
	add	ecx, 4
	mov	edx, DWORD PTR [eax+76]
	adc	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+72], ecx
	mov	DWORD PTR [eax+76], edx
$LN2@FindAndRea:
; Line 335
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+76]
	adc	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], edx
	mov	DWORD PTR [ecx+52], eax
; Line 336
	mov	DWORD PTR $T71545[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T71545[ebp]
	jmp	SHORT $LN23@FindAndRea
$LN4@FindAndRea:
; Line 338
	jmp	$LN8@FindAndRea
$LN7@FindAndRea:
; Line 340
	movzx	edx, BYTE PTR _isFinished$70136[ebp]
	test	edx, edx
	je	SHORT $LN1@FindAndRea
; Line 341
	jmp	SHORT $LN13@FindAndRea
$LN1@FindAndRea:
; Line 343
	mov	eax, DWORD PTR _limit$70137[ebp]
	xor	ecx, ecx
	add	eax, DWORD PTR _curScanPos$[ebp]
	adc	ecx, DWORD PTR _curScanPos$[ebp+4]
	mov	DWORD PTR _curScanPos$[ebp], eax
	mov	DWORD PTR _curScanPos$[ebp+4], ecx
; Line 344
	mov	edx, DWORD PTR _numBytesInBuffer$[ebp]
	sub	edx, DWORD PTR _limit$70137[ebp]
	mov	DWORD PTR _numBytesInBuffer$[ebp], edx
; Line 345
	mov	esi, esp
	mov	eax, DWORD PTR _numBytesInBuffer$[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	add	eax, DWORD PTR _limit$70137[ebp]
	push	eax
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	push	eax
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 346
	jmp	$LN14@FindAndRea
$LN13@FindAndRea:
; Line 348
	mov	DWORD PTR $T71546[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T71546[ebp]
$LN23@FindAndRea:
; Line 349
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@FindAndRea
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 172				; 000000acH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN36@FindAndRea:
	DD	5
	DD	$LN35@FindAndRea
$LN35@FindAndRea:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN29@FindAndRea
	DD	-40					; ffffffd8H
	DD	4
	DD	$LN30@FindAndRea
	DD	-56					; ffffffc8H
	DD	4
	DD	$LN31@FindAndRea
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN32@FindAndRea
	DD	-104					; ffffff98H
	DD	4
	DD	$LN33@FindAndRea
$LN33@FindAndRea:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	66					; 00000042H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN32@FindAndRea:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN31@FindAndRea:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN30@FindAndRea:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN29@FindAndRea:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z$0:
	lea	ecx, DWORD PTR _buffer$[ebp]
	jmp	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
__ehhandler$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-172]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindAndReadMarker@CInArchive@NZip@NArchive@@AAEJPAUIInStream@@PB_K@Z ENDP ; NArchive::NZip::CInArchive::FindAndReadMarker
PUBLIC	?Free@?$CBuffer@E@@QAEXXZ			; CBuffer<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CInArchiveInfo@NZip@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CInArchiveInfo@NZip@NArchive@@QAEXXZ PROC	; NArchive::NZip::CInArchiveInfo::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.h
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 71
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	DWORD PTR [eax+4], 0
; Line 72
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	DWORD PTR [ecx+12], 0
; Line 73
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], 0
	mov	DWORD PTR [edx+20], 0
; Line 74
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+32], 0
	mov	DWORD PTR [ecx+36], 0
; Line 77
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+40], 0
	mov	DWORD PTR [edx+44], 0
; Line 78
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+48], 0
; Line 80
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 52					; 00000034H
	call	?Free@?$CBuffer@E@@QAEXXZ		; CBuffer<unsigned char>::Free
; Line 81
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CInArchiveInfo@NZip@NArchive@@QAEXXZ ENDP	; NArchive::NZip::CInArchiveInfo::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_res$ = -4						; size = 4
_p$ = 8							; size = 4
_size$ = 12						; size = 4
_isFinal$ = 16						; size = 1
?IsArc_Zip_2@NZip@NArchive@@YGIPBEI_N@Z PROC		; NArchive::NZip::IsArc_Zip_2
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.cpp
; Line 245
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 246
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	_IsArc_Zip@8
	mov	DWORD PTR _res$[ebp], eax
; Line 247
	cmp	DWORD PTR _res$[ebp], 2
	jne	SHORT $LN1@IsArc_Zip_
	movzx	edx, BYTE PTR _isFinal$[ebp]
	test	edx, edx
	je	SHORT $LN1@IsArc_Zip_
; Line 248
	xor	eax, eax
	jmp	SHORT $LN2@IsArc_Zip_
$LN1@IsArc_Zip_:
; Line 249
	mov	eax, DWORD PTR _res$[ebp]
$LN2@IsArc_Zip_:
; Line 250
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?IsArc_Zip_2@NZip@NArchive@@YGIPBEI_N@Z ENDP		; NArchive::NZip::IsArc_Zip_2
_TEXT	ENDS
PUBLIC	?IncreaseRealPosition@CInArchive@NZip@NArchive@@AAEJ_J@Z ; NArchive::NZip::CInArchive::IncreaseRealPosition
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv68 = -8						; size = 4
_this$ = -4						; size = 4
_addValue$ = 8						; size = 8
?IncreaseRealPosition@CInArchive@NZip@NArchive@@AAEJ_J@Z PROC ; NArchive::NZip::CInArchive::IncreaseRealPosition
; _this$ = ecx
; Line 352
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 353
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	mov	esi, esp
	push	eax
	push	1
	mov	ecx, DWORD PTR _addValue$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _addValue$[ebp]
	push	edx
	mov	eax, DWORD PTR tv68[ebp]
	push	eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 354
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?IncreaseRealPosition@CInArchive@NZip@NArchive@@AAEJ_J@Z ENDP ; NArchive::NZip::CInArchive::IncreaseRealPosition
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
PUBLIC	?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z ; NArchive::NZip::CInArchive::ReadBytes
PUBLIC	??_R0?AUCInBufferException@@@8			; CInBufferException `RTTI Type Descriptor'
EXTRN	?ReadBytes@CInBufferBase@@QAEIPAEI@Z:PROC	; CInBufferBase::ReadBytes
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0?AUCInBufferException@@@8
_DATA	SEGMENT
??_R0?AUCInBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; CInBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCInBufferException@@', 00H
_DATA	ENDS
xdata$x	SEGMENT
__catchsym$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z$2 DD 09H
	DD	FLAT:??_R0?AUCInBufferException@@@8
	DD	0ffffffd4H
	DD	FLAT:__catch$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z$0
__unwindtable$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z$2
__ehfuncinfo$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z
	DD	01H
	DD	FLAT:__tryblocktable$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv129 = -56						; size = 4
$T71568 = -52						; size = 4
_e$70187 = -44						; size = 4
_result$ = -36						; size = 4
_realProcessedSize$ = -28				; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_processedSize$ = 16					; size = 4
?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z PROC	; NArchive::NZip::CInArchive::ReadBytes
; _this$ = ecx
; Line 359
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 360
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _realProcessedSize$[ebp], eax
; Line 361
	mov	DWORD PTR _result$[ebp], 0
; Line 362
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+40]
	test	edx, edx
	je	SHORT $LN4@ReadBytes
; Line 364
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBytes@CInBufferBase@@QAEIPAEI@Z	; CInBufferBase::ReadBytes
	mov	DWORD PTR tv129[ebp], eax
	mov	edx, DWORD PTR tv129[ebp]
	mov	DWORD PTR _realProcessedSize$[ebp], edx
	jmp	SHORT $LN7@ReadBytes
__catch$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z$0:
; Line 365
	mov	eax, DWORD PTR _e$70187[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T71568[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN10@ReadBytes
	ret	0
	mov	eax, $LN7@ReadBytes
	ret	0
$LN7@ReadBytes:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN9@ReadBytes
$LN10@ReadBytes:
	mov	eax, DWORD PTR $T71568[ebp]
	jmp	SHORT $LN5@ReadBytes
$LN9@ReadBytes:
; Line 367
	jmp	SHORT $LN2@ReadBytes
$LN4@ReadBytes:
; Line 368
	lea	edx, DWORD PTR _realProcessedSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	call	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream
	mov	DWORD PTR _result$[ebp], eax
$LN2@ReadBytes:
; Line 369
	cmp	DWORD PTR _processedSize$[ebp], 0
	je	SHORT $LN1@ReadBytes
; Line 370
	mov	ecx, DWORD PTR _processedSize$[ebp]
	mov	edx, DWORD PTR _realProcessedSize$[ebp]
	mov	DWORD PTR [ecx], edx
$LN1@ReadBytes:
; Line 371
	mov	eax, DWORD PTR _realProcessedSize$[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+48]
	adc	ecx, DWORD PTR [edx+52]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	DWORD PTR [edx+52], ecx
; Line 372
	mov	eax, DWORD PTR _result$[ebp]
$LN5@ReadBytes:
; Line 373
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN16@ReadBytes
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN16@ReadBytes:
	DD	2
	DD	$LN15@ReadBytes
$LN15@ReadBytes:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN12@ReadBytes
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN13@ReadBytes
$LN13@ReadBytes:
	DB	101					; 00000065H
	DB	0
$LN12@ReadBytes:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z ENDP	; NArchive::NZip::CInArchive::ReadBytes
PUBLIC	__TI1?AVCUnexpectEnd@NZip@NArchive@@
PUBLIC	__TI1?AUCSystemException@@
PUBLIC	??0CSystemException@@QAE@J@Z			; CSystemException::CSystemException
PUBLIC	?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes
PUBLIC	__CTA1?AUCSystemException@@
PUBLIC	__CT??_R0?AUCSystemException@@@84
PUBLIC	??_R0?AUCSystemException@@@8			; CSystemException `RTTI Type Descriptor'
PUBLIC	__CTA1?AVCUnexpectEnd@NZip@NArchive@@
PUBLIC	__CT??_R0?AVCUnexpectEnd@NZip@NArchive@@@81
PUBLIC	??_R0?AVCUnexpectEnd@NZip@NArchive@@@8		; NArchive::NZip::CUnexpectEnd `RTTI Type Descriptor'
EXTRN	__CxxThrowException@8:PROC
;	COMDAT ??_R0?AVCUnexpectEnd@NZip@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCUnexpectEnd@NZip@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NZip::CUnexpectEnd `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCUnexpectEnd@NZip@NArchive@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVCUnexpectEnd@NZip@NArchive@@@81
xdata$x	SEGMENT
__CT??_R0?AVCUnexpectEnd@NZip@NArchive@@@81 DD 00H
	DD	FLAT:??_R0?AVCUnexpectEnd@NZip@NArchive@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	01H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1?AVCUnexpectEnd@NZip@NArchive@@
xdata$x	SEGMENT
__CTA1?AVCUnexpectEnd@NZip@NArchive@@ DD 01H
	DD	FLAT:__CT??_R0?AVCUnexpectEnd@NZip@NArchive@@@81
xdata$x	ENDS
;	COMDAT ??_R0?AUCSystemException@@@8
_DATA	SEGMENT
??_R0?AUCSystemException@@@8 DD FLAT:??_7type_info@@6B@	; CSystemException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCSystemException@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AUCSystemException@@@84
xdata$x	SEGMENT
__CT??_R0?AUCSystemException@@@84 DD 00H
	DD	FLAT:??_R0?AUCSystemException@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1?AUCSystemException@@
xdata$x	SEGMENT
__CTA1?AUCSystemException@@ DD 01H
	DD	FLAT:__CT??_R0?AUCSystemException@@@84
xdata$x	ENDS
;	COMDAT __TI1?AVCUnexpectEnd@NZip@NArchive@@
xdata$x	SEGMENT
__TI1?AVCUnexpectEnd@NZip@NArchive@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AVCUnexpectEnd@NZip@NArchive@@
xdata$x	ENDS
;	COMDAT __TI1?AUCSystemException@@
xdata$x	SEGMENT
__TI1?AUCSystemException@@ DD 00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1?AUCSystemException@@
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T71589 = -30						; size = 1
$T71588 = -29						; size = 1
$T71586 = -28						; size = 4
$T71585 = -24						; size = 4
_result$70203 = -20					; size = 4
_processed$ = -12					; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z PROC ; NArchive::NZip::CInArchive::SafeReadBytes
; _this$ = ecx
; Line 376
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 377
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR _processed$[ebp], eax
; Line 378
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+40]
	test	edx, edx
	je	SHORT $LN4@SafeReadBy
; Line 380
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBytes@CInBufferBase@@QAEIPAEI@Z	; CInBufferBase::ReadBytes
	mov	DWORD PTR _processed$[ebp], eax
; Line 381
	mov	edx, DWORD PTR _processed$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [ecx+48]
	adc	eax, DWORD PTR [ecx+52]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], edx
	mov	DWORD PTR [ecx+52], eax
; Line 383
	jmp	SHORT $LN3@SafeReadBy
$LN4@SafeReadBy:
; Line 385
	lea	edx, DWORD PTR _processed$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	call	?ReadStream@@YGJPAUISequentialInStream@@PAXPAI@Z ; ReadStream
	mov	DWORD PTR _result$70203[ebp], eax
; Line 386
	mov	ecx, DWORD PTR _processed$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [eax+48]
	adc	edx, DWORD PTR [eax+52]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx
; Line 387
	cmp	DWORD PTR _result$70203[ebp], 0
	je	SHORT $LN3@SafeReadBy
; Line 388
	mov	ecx, DWORD PTR _result$70203[ebp]
	push	ecx
	lea	ecx, DWORD PTR $T71586[ebp]
	call	??0CSystemException@@QAE@J@Z		; CSystemException::CSystemException
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T71585[ebp], edx
	push	OFFSET __TI1?AUCSystemException@@
	lea	eax, DWORD PTR $T71585[ebp]
	push	eax
	call	__CxxThrowException@8
$LN3@SafeReadBy:
; Line 390
	mov	ecx, DWORD PTR _processed$[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	je	SHORT $LN6@SafeReadBy
; Line 391
	xor	edx, edx
	mov	BYTE PTR $T71589[ebp], dl
	mov	al, BYTE PTR $T71589[ebp]
	mov	BYTE PTR $T71588[ebp], al
	push	OFFSET __TI1?AVCUnexpectEnd@NZip@NArchive@@
	lea	ecx, DWORD PTR $T71588[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN6@SafeReadBy:
; Line 392
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@SafeReadBy
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN9@SafeReadBy:
	DD	1
	DD	$LN8@SafeReadBy
$LN8@SafeReadBy:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN7@SafeReadBy
$LN7@SafeReadBy:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ENDP ; NArchive::NZip::CInArchive::SafeReadBytes
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CSystemException@@QAE@J@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_errorCode$ = 8						; size = 4
??0CSystemException@@QAE@J@Z PROC			; CSystemException::CSystemException, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myexception.h
; Line 11
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _errorCode$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??0CSystemException@@QAE@J@Z ENDP			; CSystemException::CSystemException
_TEXT	ENDS
PUBLIC	??B?$CBuffer@E@@QAEPAEXZ			; CBuffer<unsigned char>::operator unsigned char *
PUBLIC	?Alloc@?$CBuffer@E@@QAEXI@Z			; CBuffer<unsigned char>::Alloc
PUBLIC	?ReadBuffer@CInArchive@NZip@NArchive@@AAEXAAV?$CBuffer@E@@I@Z ; NArchive::NZip::CInArchive::ReadBuffer
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
_size$ = 12						; size = 4
?ReadBuffer@CInArchive@NZip@NArchive@@AAEXAAV?$CBuffer@E@@I@Z PROC ; NArchive::NZip::CInArchive::ReadBuffer
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.cpp
; Line 395
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 396
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buffer$[ebp]
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 397
	cmp	DWORD PTR _size$[ebp], 0
	jbe	SHORT $LN2@ReadBuffer
; Line 398
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _buffer$[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes
$LN2@ReadBuffer:
; Line 399
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ReadBuffer@CInArchive@NZip@NArchive@@AAEXAAV?$CBuffer@E@@I@Z ENDP ; NArchive::NZip::CInArchive::ReadBuffer
_TEXT	ENDS
PUBLIC	?ReadByte@CInArchive@NZip@NArchive@@AAEEXZ	; NArchive::NZip::CInArchive::ReadByte
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_b$ = -9						; size = 1
_this$ = -4						; size = 4
?ReadByte@CInArchive@NZip@NArchive@@AAEEXZ PROC		; NArchive::NZip::CInArchive::ReadByte
; _this$ = ecx
; Line 402
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 404
	push	1
	lea	eax, DWORD PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes
; Line 405
	mov	al, BYTE PTR _b$[ebp]
; Line 406
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ReadByte
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@ReadByte:
	DD	1
	DD	$LN4@ReadByte
$LN4@ReadByte:
	DD	-9					; fffffff7H
	DD	1
	DD	$LN3@ReadByte
$LN3@ReadByte:
	DB	98					; 00000062H
	DB	0
?ReadByte@CInArchive@NZip@NArchive@@AAEEXZ ENDP		; NArchive::NZip::CInArchive::ReadByte
_TEXT	ENDS
PUBLIC	?ReadUInt16@CInArchive@NZip@NArchive@@AAEGXZ	; NArchive::NZip::CInArchive::ReadUInt16
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_buf$ = -12						; size = 2
_this$ = -4						; size = 4
?ReadUInt16@CInArchive@NZip@NArchive@@AAEGXZ PROC	; NArchive::NZip::CInArchive::ReadUInt16
; _this$ = ecx
; Line 408
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	push	2
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes
	mov	ax, WORD PTR _buf$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ReadUInt16
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@ReadUInt16:
	DD	1
	DD	$LN4@ReadUInt16
$LN4@ReadUInt16:
	DD	-12					; fffffff4H
	DD	2
	DD	$LN3@ReadUInt16
$LN3@ReadUInt16:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?ReadUInt16@CInArchive@NZip@NArchive@@AAEGXZ ENDP	; NArchive::NZip::CInArchive::ReadUInt16
_TEXT	ENDS
PUBLIC	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ	; NArchive::NZip::CInArchive::ReadUInt32
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_buf$ = -12						; size = 4
_this$ = -4						; size = 4
?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ PROC	; NArchive::NZip::CInArchive::ReadUInt32
; _this$ = ecx
; Line 409
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes
	mov	eax, DWORD PTR _buf$[ebp]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ReadUInt32
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	2
$LN5@ReadUInt32:
	DD	1
	DD	$LN4@ReadUInt32
$LN4@ReadUInt32:
	DD	-12					; fffffff4H
	DD	4
	DD	$LN3@ReadUInt32
$LN3@ReadUInt32:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ENDP	; NArchive::NZip::CInArchive::ReadUInt32
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ	; NArchive::NZip::CInArchive::ReadUInt64
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_buf$ = -20						; size = 8
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ PROC	; NArchive::NZip::CInArchive::ReadUInt64
; _this$ = ecx
; Line 410
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
	push	8
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes
	mov	eax, DWORD PTR _buf$[ebp]
	mov	edx, DWORD PTR _buf$[ebp+4]
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@ReadUInt64
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN5@ReadUInt64:
	DD	1
	DD	$LN4@ReadUInt64
$LN4@ReadUInt64:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN3@ReadUInt64
$LN3@ReadUInt64:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ ENDP	; NArchive::NZip::CInArchive::ReadUInt64
_TEXT	ENDS
PUBLIC	?Skip@CInArchive@NZip@NArchive@@AAEXI@Z		; NArchive::NZip::CInArchive::Skip
EXTRN	?Skip@CInBufferBase@@QAEII@Z:PROC		; CInBufferBase::Skip
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T71615 = -14						; size = 1
$T71614 = -13						; size = 1
_i$70258 = -12						; size = 4
_skip$70253 = -8					; size = 4
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?Skip@CInArchive@NZip@NArchive@@AAEXI@Z PROC		; NArchive::NZip::CInArchive::Skip
; _this$ = ecx
; Line 413
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 414
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+40]
	test	ecx, ecx
	je	SHORT $LN6@Skip
; Line 416
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Skip@CInBufferBase@@QAEII@Z		; CInBufferBase::Skip
	mov	DWORD PTR _skip$70253[ebp], eax
; Line 417
	mov	eax, DWORD PTR _skip$70253[ebp]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [edx+48]
	adc	ecx, DWORD PTR [edx+52]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+48], eax
	mov	DWORD PTR [edx+52], ecx
; Line 418
	mov	eax, DWORD PTR _skip$70253[ebp]
	cmp	eax, DWORD PTR _num$[ebp]
	je	SHORT $LN5@Skip
; Line 419
	xor	ecx, ecx
	mov	BYTE PTR $T71615[ebp], cl
	mov	dl, BYTE PTR $T71615[ebp]
	mov	BYTE PTR $T71614[ebp], dl
	push	OFFSET __TI1?AVCUnexpectEnd@NZip@NArchive@@
	lea	eax, DWORD PTR $T71614[ebp]
	push	eax
	call	__CxxThrowException@8
$LN5@Skip:
; Line 421
	jmp	SHORT $LN8@Skip
$LN6@Skip:
; Line 423
	mov	DWORD PTR _i$70258[ebp], 0
	jmp	SHORT $LN3@Skip
$LN2@Skip:
	mov	ecx, DWORD PTR _i$70258[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$70258[ebp], ecx
$LN3@Skip:
	mov	edx, DWORD PTR _i$70258[ebp]
	cmp	edx, DWORD PTR _num$[ebp]
	jae	SHORT $LN8@Skip
; Line 424
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadByte@CInArchive@NZip@NArchive@@AAEEXZ ; NArchive::NZip::CInArchive::ReadByte
	jmp	SHORT $LN2@Skip
$LN8@Skip:
; Line 426
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Skip@CInArchive@NZip@NArchive@@AAEXI@Z ENDP		; NArchive::NZip::CInArchive::Skip
_TEXT	ENDS
PUBLIC	?Skip64@CInArchive@NZip@NArchive@@AAEX_K@Z	; NArchive::NZip::CInArchive::Skip64
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$70266 = -12						; size = 8
_this$ = -4						; size = 4
_num$ = 8						; size = 8
?Skip64@CInArchive@NZip@NArchive@@AAEX_K@Z PROC		; NArchive::NZip::CInArchive::Skip64
; _this$ = ecx
; Line 429
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 430
	mov	DWORD PTR _i$70266[ebp], 0
	mov	DWORD PTR _i$70266[ebp+4], 0
	jmp	SHORT $LN3@Skip64
$LN2@Skip64:
	mov	eax, DWORD PTR _i$70266[ebp]
	add	eax, 1
	mov	ecx, DWORD PTR _i$70266[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _i$70266[ebp], eax
	mov	DWORD PTR _i$70266[ebp+4], ecx
$LN3@Skip64:
	mov	edx, DWORD PTR _i$70266[ebp+4]
	cmp	edx, DWORD PTR _num$[ebp+4]
	ja	SHORT $LN4@Skip64
	jb	SHORT $LN6@Skip64
	mov	eax, DWORD PTR _i$70266[ebp]
	cmp	eax, DWORD PTR _num$[ebp]
	jae	SHORT $LN4@Skip64
$LN6@Skip64:
; Line 431
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadByte@CInArchive@NZip@NArchive@@AAEEXZ ; NArchive::NZip::CInArchive::ReadByte
	jmp	SHORT $LN2@Skip64
$LN4@Skip64:
; Line 432
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Skip64@CInArchive@NZip@NArchive@@AAEX_K@Z ENDP		; NArchive::NZip::CInArchive::Skip64
_TEXT	ENDS
PUBLIC	?ReleaseBuf_CalcLen@AString@@QAEXI@Z		; AString::ReleaseBuf_CalcLen
PUBLIC	?GetBuf@AString@@QAEPADI@Z			; AString::GetBuf
PUBLIC	?Empty@AString@@QAEXXZ				; AString::Empty
PUBLIC	?ReadFileName@CInArchive@NZip@NArchive@@AAEXIAAVAString@@@Z ; NArchive::NZip::CInArchive::ReadFileName
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
_s$ = 12						; size = 4
?ReadFileName@CInArchive@NZip@NArchive@@AAEXIAAVAString@@@Z PROC ; NArchive::NZip::CInArchive::ReadFileName
; _this$ = ecx
; Line 436
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 437
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN1@ReadFileNa
; Line 439
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Empty@AString@@QAEXXZ			; AString::Empty
; Line 440
	jmp	SHORT $LN2@ReadFileNa
$LN1@ReadFileNa:
; Line 442
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?GetBuf@AString@@QAEPADI@Z		; AString::GetBuf
	mov	DWORD PTR _p$[ebp], eax
; Line 443
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes
; Line 444
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	?ReleaseBuf_CalcLen@AString@@QAEXI@Z	; AString::ReleaseBuf_CalcLen
$LN2@ReadFileNa:
; Line 445
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?ReadFileName@CInArchive@NZip@NArchive@@AAEXIAAVAString@@@Z ENDP ; NArchive::NZip::CInArchive::ReadFileName
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@AString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@AString@@QAEXXZ PROC				; AString::Empty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@AString@@QAEXXZ ENDP				; AString::Empty
_TEXT	ENDS
EXTRN	?ReAlloc2@AString@@AAEXI@Z:PROC			; AString::ReAlloc2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetBuf@AString@@QAEPADI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_minLen$ = 8						; size = 4
?GetBuf@AString@@QAEPADI@Z PROC				; AString::GetBuf, COMDAT
; _this$ = ecx
; Line 250
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 251
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _minLen$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN1@GetBuf
; Line 252
	mov	edx, DWORD PTR _minLen$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReAlloc2@AString@@AAEXI@Z		; AString::ReAlloc2
$LN1@GetBuf:
; Line 253
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
; Line 254
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?GetBuf@AString@@QAEPADI@Z ENDP				; AString::GetBuf
_TEXT	ENDS
PUBLIC	?MyStringLen@@YGIPBD@Z				; MyStringLen
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReleaseBuf_CalcLen@AString@@QAEXI@Z
_TEXT	SEGMENT
_chars$ = -8						; size = 4
_this$ = -4						; size = 4
_maxLen$ = 8						; size = 4
?ReleaseBuf_CalcLen@AString@@QAEXI@Z PROC		; AString::ReleaseBuf_CalcLen, COMDAT
; _this$ = ecx
; Line 268
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 269
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _chars$[ebp], ecx
; Line 270
	mov	edx, DWORD PTR _chars$[ebp]
	add	edx, DWORD PTR _maxLen$[ebp]
	mov	BYTE PTR [edx], 0
; Line 271
	mov	eax, DWORD PTR _chars$[ebp]
	push	eax
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 272
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReleaseBuf_CalcLen@AString@@QAEXI@Z ENDP		; AString::ReleaseBuf_CalcLen
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyStringLen@@YGIPBD@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_s$ = 8							; size = 4
?MyStringLen@@YGIPBD@Z PROC				; MyStringLen, COMDAT
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 28
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MyStringLe
$LN2@MyStringLe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@MyStringLe:
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN1@MyStringLe
	jmp	SHORT $LN2@MyStringLe
$LN1@MyStringLe:
; Line 29
	mov	eax, DWORD PTR _i$[ebp]
; Line 30
	mov	esp, ebp
	pop	ebp
	ret	4
?MyStringLen@@YGIPBD@Z ENDP				; MyStringLen
_TEXT	ENDS
PUBLIC	?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Add
PUBLIC	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock
PUBLIC	??0CExtraSubBlock@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CExtraSubBlock::CExtraSubBlock
PUBLIC	?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ	; NArchive::NZip::CExtraBlock::Clear
PUBLIC	?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z ; NArchive::NZip::CInArchive::ReadExtra
xdata$x	SEGMENT
__unwindtable$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z$0
__ehfuncinfo$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv197 = -60						; size = 4
tv183 = -56						; size = 4
tv166 = -52						; size = 4
$T71629 = -46						; size = 1
$T71628 = -45						; size = 1
_dataSize$70291 = -44					; size = 4
_subBlock$70290 = -36					; size = 12
_remain$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_extraSize$ = 8						; size = 4
_extraBlock$ = 12					; size = 4
_unpackSize$ = 16					; size = 4
_packSize$ = 20						; size = 4
_localHeaderOffset$ = 24				; size = 4
_diskStartNumber$ = 28					; size = 4
?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z PROC ; NArchive::NZip::CInArchive::ReadExtra
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.cpp
; Line 449
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 48					; 00000030H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-60]
	mov	ecx, 12					; 0000000cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 450
	mov	ecx, DWORD PTR _extraBlock$[ebp]
	call	?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ ; NArchive::NZip::CExtraBlock::Clear
; Line 451
	mov	eax, DWORD PTR _extraSize$[ebp]
	mov	DWORD PTR _remain$[ebp], eax
$LN14@ReadExtra:
; Line 452
	cmp	DWORD PTR _remain$[ebp], 4
	jb	$LN13@ReadExtra
; Line 454
	lea	ecx, DWORD PTR _subBlock$70290[ebp]
	call	??0CExtraSubBlock@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 455
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt16@CInArchive@NZip@NArchive@@AAEGXZ ; NArchive::NZip::CInArchive::ReadUInt16
	mov	WORD PTR _subBlock$70290[ebp], ax
; Line 456
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt16@CInArchive@NZip@NArchive@@AAEGXZ ; NArchive::NZip::CInArchive::ReadUInt16
	movzx	ecx, ax
	mov	DWORD PTR _dataSize$70291[ebp], ecx
; Line 457
	mov	edx, DWORD PTR _remain$[ebp]
	sub	edx, 4
	mov	DWORD PTR _remain$[ebp], edx
; Line 458
	mov	eax, DWORD PTR _dataSize$70291[ebp]
	cmp	eax, DWORD PTR _remain$[ebp]
	jbe	SHORT $LN12@ReadExtra
; Line 460
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+123], 1
; Line 461
	mov	edx, DWORD PTR _remain$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Skip@CInArchive@NZip@NArchive@@AAEXI@Z	; NArchive::NZip::CInArchive::Skip
; Line 462
	mov	BYTE PTR $T71628[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _subBlock$70290[ebp]
	call	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
	mov	al, BYTE PTR $T71628[ebp]
	jmp	$LN15@ReadExtra
$LN12@ReadExtra:
; Line 464
	movzx	eax, WORD PTR _subBlock$70290[ebp]
	cmp	eax, 1
	jne	$LN11@ReadExtra
; Line 466
	mov	ecx, DWORD PTR _unpackSize$[ebp]
	mov	DWORD PTR tv166[ebp], ecx
	mov	edx, DWORD PTR tv166[ebp]
	cmp	DWORD PTR [edx], -1
	jne	SHORT $LN10@ReadExtra
	mov	eax, DWORD PTR tv166[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN10@ReadExtra
; Line 468
	cmp	DWORD PTR _dataSize$70291[ebp], 8
	jae	SHORT $LN9@ReadExtra
; Line 470
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+123], 1
; Line 471
	mov	edx, DWORD PTR _remain$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Skip@CInArchive@NZip@NArchive@@AAEXI@Z	; NArchive::NZip::CInArchive::Skip
; Line 472
	mov	BYTE PTR $T71629[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _subBlock$70290[ebp]
	call	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
	mov	al, BYTE PTR $T71629[ebp]
	jmp	$LN15@ReadExtra
$LN9@ReadExtra:
; Line 474
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ ; NArchive::NZip::CInArchive::ReadUInt64
	mov	ecx, DWORD PTR _unpackSize$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 475
	mov	edx, DWORD PTR _remain$[ebp]
	sub	edx, 8
	mov	DWORD PTR _remain$[ebp], edx
; Line 476
	mov	eax, DWORD PTR _dataSize$70291[ebp]
	sub	eax, 8
	mov	DWORD PTR _dataSize$70291[ebp], eax
$LN10@ReadExtra:
; Line 478
	mov	ecx, DWORD PTR _packSize$[ebp]
	mov	DWORD PTR tv183[ebp], ecx
	mov	edx, DWORD PTR tv183[ebp]
	cmp	DWORD PTR [edx], -1
	jne	SHORT $LN8@ReadExtra
	mov	eax, DWORD PTR tv183[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN8@ReadExtra
; Line 480
	cmp	DWORD PTR _dataSize$70291[ebp], 8
	jae	SHORT $LN7@ReadExtra
; Line 481
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _subBlock$70290[ebp]
	call	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
	jmp	$LN13@ReadExtra
$LN7@ReadExtra:
; Line 482
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ ; NArchive::NZip::CInArchive::ReadUInt64
	mov	ecx, DWORD PTR _packSize$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 483
	mov	edx, DWORD PTR _remain$[ebp]
	sub	edx, 8
	mov	DWORD PTR _remain$[ebp], edx
; Line 484
	mov	eax, DWORD PTR _dataSize$70291[ebp]
	sub	eax, 8
	mov	DWORD PTR _dataSize$70291[ebp], eax
$LN8@ReadExtra:
; Line 486
	mov	ecx, DWORD PTR _localHeaderOffset$[ebp]
	mov	DWORD PTR tv197[ebp], ecx
	mov	edx, DWORD PTR tv197[ebp]
	cmp	DWORD PTR [edx], -1
	jne	SHORT $LN6@ReadExtra
	mov	eax, DWORD PTR tv197[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN6@ReadExtra
; Line 488
	cmp	DWORD PTR _dataSize$70291[ebp], 8
	jae	SHORT $LN5@ReadExtra
; Line 489
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _subBlock$70290[ebp]
	call	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
	jmp	$LN13@ReadExtra
$LN5@ReadExtra:
; Line 490
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ ; NArchive::NZip::CInArchive::ReadUInt64
	mov	ecx, DWORD PTR _localHeaderOffset$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 491
	mov	edx, DWORD PTR _remain$[ebp]
	sub	edx, 8
	mov	DWORD PTR _remain$[ebp], edx
; Line 492
	mov	eax, DWORD PTR _dataSize$70291[ebp]
	sub	eax, 8
	mov	DWORD PTR _dataSize$70291[ebp], eax
$LN6@ReadExtra:
; Line 494
	mov	ecx, DWORD PTR _diskStartNumber$[ebp]
	cmp	DWORD PTR [ecx], 65535			; 0000ffffH
	jne	SHORT $LN4@ReadExtra
; Line 496
	cmp	DWORD PTR _dataSize$70291[ebp], 4
	jae	SHORT $LN3@ReadExtra
; Line 497
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _subBlock$70290[ebp]
	call	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
	jmp	SHORT $LN13@ReadExtra
$LN3@ReadExtra:
; Line 498
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
	mov	edx, DWORD PTR _diskStartNumber$[ebp]
	mov	DWORD PTR [edx], eax
; Line 499
	mov	eax, DWORD PTR _remain$[ebp]
	sub	eax, 4
	mov	DWORD PTR _remain$[ebp], eax
; Line 500
	mov	ecx, DWORD PTR _dataSize$70291[ebp]
	sub	ecx, 4
	mov	DWORD PTR _dataSize$70291[ebp], ecx
$LN4@ReadExtra:
; Line 502
	mov	edx, DWORD PTR _dataSize$70291[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Skip@CInArchive@NZip@NArchive@@AAEXI@Z	; NArchive::NZip::CInArchive::Skip
; Line 504
	jmp	SHORT $LN2@ReadExtra
$LN11@ReadExtra:
; Line 506
	mov	eax, DWORD PTR _dataSize$70291[ebp]
	push	eax
	lea	ecx, DWORD PTR _subBlock$70290[ebp+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBuffer@CInArchive@NZip@NArchive@@AAEXAAV?$CBuffer@E@@I@Z ; NArchive::NZip::CInArchive::ReadBuffer
; Line 507
	lea	edx, DWORD PTR _subBlock$70290[ebp]
	push	edx
	mov	ecx, DWORD PTR _extraBlock$[ebp]
	call	?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Add
$LN2@ReadExtra:
; Line 509
	mov	eax, DWORD PTR _remain$[ebp]
	sub	eax, DWORD PTR _dataSize$70291[ebp]
	mov	DWORD PTR _remain$[ebp], eax
; Line 510
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _subBlock$70290[ebp]
	call	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
	jmp	$LN14@ReadExtra
$LN13@ReadExtra:
; Line 511
	cmp	DWORD PTR _remain$[ebp], 0
	je	SHORT $LN1@ReadExtra
; Line 513
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+124], 1
$LN1@ReadExtra:
; Line 518
	mov	edx, DWORD PTR _remain$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Skip@CInArchive@NZip@NArchive@@AAEXI@Z	; NArchive::NZip::CInArchive::Skip
; Line 519
	mov	al, 1
$LN15@ReadExtra:
; Line 520
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@ReadExtra
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 60					; 0000003cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	2
$LN21@ReadExtra:
	DD	1
	DD	$LN20@ReadExtra
$LN20@ReadExtra:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN18@ReadExtra
$LN18@ReadExtra:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	66					; 00000042H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z$0:
	lea	ecx, DWORD PTR _subBlock$70290[ebp]
	jmp	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
__ehhandler$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-56]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z ENDP ; NArchive::NZip::CInArchive::ReadExtra
PUBLIC	?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ PROC		; NArchive::NZip::CExtraBlock::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipitem.h
; Line 118
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CExtraBlock@NZip@NArchive@@QAEXXZ ENDP		; NArchive::NZip::CExtraBlock::Clear
_TEXT	ENDS
PUBLIC	??0?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CExtraSubBlock@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CExtraSubBlock@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CExtraSubBlock::CExtraSubBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CExtraSubBlock@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CExtraSubBlock::CExtraSubBlock
_TEXT	ENDS
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CExtraSubBlock@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CExtraSubBlock@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CExtraSubBlock::~CExtraSubBlock
_TEXT	ENDS
PUBLIC	?Len@AString@@QBEIXZ				; AString::Len
PUBLIC	__$ArrayPad$
PUBLIC	?ReadLocalItem@CInArchive@NZip@NArchive@@AAE_NAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItem
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_diskStartNumber$70342 = -84				; size = 4
_localHeaderOffset$70341 = -72				; size = 8
_extraSize$ = -60					; size = 4
_nameSize$ = -56					; size = 4
_i$70316 = -52						; size = 4
_p$ = -44						; size = 26
_kPureHeaderSize$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_item$ = 8						; size = 4
?ReadLocalItem@CInArchive@NZip@NArchive@@AAE_NAAVCItemEx@23@@Z PROC ; NArchive::NZip::CInArchive::ReadLocalItem
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.cpp
; Line 523
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 524
	mov	DWORD PTR _kPureHeaderSize$[ebp], 26	; 0000001aH
; Line 526
	push	26					; 0000001aH
	lea	eax, DWORD PTR _p$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes
; Line 529
	mov	DWORD PTR _i$70316[ebp], 0
	jmp	SHORT $LN8@ReadLocalI
$LN7@ReadLocalI:
	mov	ecx, DWORD PTR _i$70316[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$70316[ebp], ecx
$LN8@ReadLocalI:
	cmp	DWORD PTR _i$70316[ebp], 26		; 0000001aH
	jae	SHORT $LN6@ReadLocalI
	mov	edx, DWORD PTR _i$70316[ebp]
	movzx	eax, BYTE PTR _p$[ebp+edx]
	test	eax, eax
	jne	SHORT $LN6@ReadLocalI
	jmp	SHORT $LN7@ReadLocalI
$LN6@ReadLocalI:
; Line 530
	cmp	DWORD PTR _i$70316[ebp], 26		; 0000001aH
	jne	SHORT $LN5@ReadLocalI
; Line 531
	xor	al, al
	jmp	$LN9@ReadLocalI
$LN5@ReadLocalI:
; Line 534
	mov	ecx, DWORD PTR _item$[ebp]
	mov	dl, BYTE PTR _p$[ebp]
	mov	BYTE PTR [ecx+4], dl
; Line 535
	mov	eax, DWORD PTR _item$[ebp]
	mov	cl, BYTE PTR _p$[ebp+1]
	mov	BYTE PTR [eax+5], cl
; Line 536
	mov	edx, DWORD PTR _item$[ebp]
	mov	ax, WORD PTR _p$[ebp+2]
	mov	WORD PTR [edx], ax
; Line 537
	mov	ecx, DWORD PTR _item$[ebp]
	mov	dx, WORD PTR _p$[ebp+4]
	mov	WORD PTR [ecx+2], dx
; Line 538
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _p$[ebp+6]
	mov	DWORD PTR [eax+24], ecx
; Line 539
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR _p$[ebp+10]
	mov	DWORD PTR [edx+28], eax
; Line 540
	mov	ecx, DWORD PTR _p$[ebp+14]
	xor	edx, edx
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 541
	mov	ecx, DWORD PTR _p$[ebp+18]
	xor	edx, edx
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 542
	movzx	ecx, WORD PTR _p$[ebp+22]
	mov	DWORD PTR _nameSize$[ebp], ecx
; Line 543
	movzx	edx, WORD PTR _p$[ebp+24]
	mov	DWORD PTR _extraSize$[ebp], edx
; Line 544
	mov	eax, DWORD PTR _item$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	mov	ecx, DWORD PTR _nameSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadFileName@CInArchive@NZip@NArchive@@AAEXIAAVAString@@@Z ; NArchive::NZip::CInArchive::ReadFileName
; Line 545
	mov	edx, DWORD PTR _extraSize$[ebp]
	mov	eax, DWORD PTR _nameSize$[ebp]
	lea	ecx, DWORD PTR [eax+edx+30]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+96], ecx
; Line 552
	cmp	DWORD PTR _extraSize$[ebp], 0
	jbe	SHORT $LN4@ReadLocalI
; Line 554
	mov	DWORD PTR _localHeaderOffset$70341[ebp], 0
	mov	DWORD PTR _localHeaderOffset$70341[ebp+4], 0
; Line 555
	mov	DWORD PTR _diskStartNumber$70342[ebp], 0
; Line 557
	lea	eax, DWORD PTR _diskStartNumber$70342[ebp]
	push	eax
	lea	ecx, DWORD PTR _localHeaderOffset$70341[ebp]
	push	ecx
	mov	edx, DWORD PTR _item$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _item$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 44					; 0000002cH
	push	ecx
	mov	edx, DWORD PTR _extraSize$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z ; NArchive::NZip::CInArchive::ReadExtra
$LN4@ReadLocalI:
; Line 565
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	push	edx
	call	?CheckDosTime@NZip@NArchive@@YG_NI@Z	; NArchive::NZip::CheckDosTime
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@ReadLocalI
; Line 567
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+123], 1
$LN2@ReadLocalI:
; Line 570
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 32					; 00000020H
	call	?Len@AString@@QBEIXZ			; AString::Len
	cmp	eax, DWORD PTR _nameSize$[ebp]
	je	SHORT $LN1@ReadLocalI
; Line 571
	xor	al, al
	jmp	SHORT $LN9@ReadLocalI
$LN1@ReadLocalI:
; Line 572
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, 65536				; 00010000H
	cmp	eax, DWORD PTR [edx+96]
	sbb	eax, eax
	add	eax, 1
$LN9@ReadLocalI:
; Line 573
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@ReadLocalI
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN15@ReadLocalI:
	DD	3
	DD	$LN14@ReadLocalI
$LN14@ReadLocalI:
	DD	-44					; ffffffd4H
	DD	26					; 0000001aH
	DD	$LN11@ReadLocalI
	DD	-72					; ffffffb8H
	DD	8
	DD	$LN12@ReadLocalI
	DD	-84					; ffffffacH
	DD	4
	DD	$LN13@ReadLocalI
$LN13@ReadLocalI:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN12@ReadLocalI:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	72					; 00000048H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN11@ReadLocalI:
	DB	112					; 00000070H
	DB	0
?ReadLocalItem@CInArchive@NZip@NArchive@@AAE_NAAVCItemEx@23@@Z ENDP ; NArchive::NZip::CInArchive::ReadLocalItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@AString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@AString@@QBEIXZ PROC				; AString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@AString@@QBEIXZ ENDP				; AString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
_sec$ = -20						; size = 4
_min$ = -16						; size = 4
_hour$ = -12						; size = 4
_day$ = -8						; size = 4
_month$ = -4						; size = 4
_dosTime$ = 8						; size = 4
?CheckDosTime@NZip@NArchive@@YG_NI@Z PROC		; NArchive::NZip::CheckDosTime
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.cpp
; Line 115
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 116
	cmp	DWORD PTR _dosTime$[ebp], 0
	jne	SHORT $LN3@CheckDosTi
; Line 117
	mov	al, 1
	jmp	SHORT $LN4@CheckDosTi
$LN3@CheckDosTi:
; Line 118
	mov	eax, DWORD PTR _dosTime$[ebp]
	shr	eax, 21					; 00000015H
	and	eax, 15					; 0000000fH
	mov	DWORD PTR _month$[ebp], eax
; Line 119
	mov	ecx, DWORD PTR _dosTime$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 31					; 0000001fH
	mov	DWORD PTR _day$[ebp], ecx
; Line 120
	mov	edx, DWORD PTR _dosTime$[ebp]
	shr	edx, 11					; 0000000bH
	and	edx, 31					; 0000001fH
	mov	DWORD PTR _hour$[ebp], edx
; Line 121
	mov	eax, DWORD PTR _dosTime$[ebp]
	shr	eax, 5
	and	eax, 63					; 0000003fH
	mov	DWORD PTR _min$[ebp], eax
; Line 122
	mov	ecx, DWORD PTR _dosTime$[ebp]
	and	ecx, 31					; 0000001fH
	shl	ecx, 1
	mov	DWORD PTR _sec$[ebp], ecx
; Line 123
	cmp	DWORD PTR _month$[ebp], 1
	jb	SHORT $LN1@CheckDosTi
	cmp	DWORD PTR _month$[ebp], 12		; 0000000cH
	ja	SHORT $LN1@CheckDosTi
	cmp	DWORD PTR _day$[ebp], 1
	jb	SHORT $LN1@CheckDosTi
	cmp	DWORD PTR _day$[ebp], 31		; 0000001fH
	ja	SHORT $LN1@CheckDosTi
	cmp	DWORD PTR _hour$[ebp], 23		; 00000017H
	ja	SHORT $LN1@CheckDosTi
	cmp	DWORD PTR _min$[ebp], 59		; 0000003bH
	ja	SHORT $LN1@CheckDosTi
	cmp	DWORD PTR _sec$[ebp], 59		; 0000003bH
	jbe	SHORT $LN2@CheckDosTi
$LN1@CheckDosTi:
; Line 124
	xor	al, al
	jmp	SHORT $LN4@CheckDosTi
$LN2@CheckDosTi:
; Line 125
	mov	al, 1
$LN4@CheckDosTi:
; Line 126
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckDosTime@NZip@NArchive@@YG_NI@Z ENDP		; NArchive::NZip::CheckDosTime
_TEXT	ENDS
PUBLIC	??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z ; NArchive::NZip::CExtraBlock::operator=
PUBLIC	??1CItemEx@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CItemEx::~CItemEx
PUBLIC	??0CItemEx@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CItemEx::CItemEx
PUBLIC	?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem
xdata$x	SEGMENT
__catchsym$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$3 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$0
__tryblocktable$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z DD 00H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$3
__unwindtable$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$2
	DD	0ffffffffH
	DD	00H
__ehfuncinfo$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv157 = -173						; size = 1
tv156 = -172						; size = 4
tv155 = -168						; size = 4
tv154 = -164						; size = 4
tv170 = -160						; size = 4
$T71659 = -156						; size = 4
$T71658 = -152						; size = 4
$T71657 = -148						; size = 4
_localItem$70384 = -140					; size = 104
___result_$70381 = -32					; size = 4
_offset$70377 = -28					; size = 8
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_item$ = 8						; size = 4
?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z PROC ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem
; _this$ = ecx
; Line 619
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 160				; 000000a0H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-176]
	mov	ecx, 40					; 00000028H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 620
	mov	eax, DWORD PTR _item$[ebp]
	movzx	ecx, BYTE PTR [eax+92]
	test	ecx, ecx
	je	SHORT $LN6@ReadLocalI@2
; Line 621
	xor	eax, eax
	jmp	$LN7@ReadLocalI@2
$LN6@ReadLocalI@2:
; Line 623
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 624
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	add	ecx, DWORD PTR [eax+64]
	mov	edx, DWORD PTR [edx+60]
	adc	edx, DWORD PTR [eax+68]
	mov	DWORD PTR _offset$70377[ebp], ecx
	mov	DWORD PTR _offset$70377[ebp+4], edx
; Line 625
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv170[ebp], eax
	mov	ecx, DWORD PTR tv170[ebp]
	cmp	DWORD PTR [ecx+60], 0
	jg	SHORT $LN4@ReadLocalI@2
	jl	SHORT $LN15@ReadLocalI@2
	mov	edx, DWORD PTR tv170[ebp]
	cmp	DWORD PTR [edx+56], 0
	jae	SHORT $LN4@ReadLocalI@2
$LN15@ReadLocalI@2:
	cmp	DWORD PTR _offset$70377[ebp+4], 0
	jg	SHORT $LN4@ReadLocalI@2
	jl	SHORT $LN16@ReadLocalI@2
	cmp	DWORD PTR _offset$70377[ebp], 0
	jae	SHORT $LN4@ReadLocalI@2
$LN16@ReadLocalI@2:
; Line 626
	mov	eax, 1
	jmp	$LN7@ReadLocalI@2
$LN4@ReadLocalI@2:
; Line 627
	mov	eax, DWORD PTR _offset$70377[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _offset$70377[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Seek@CInArchive@NZip@NArchive@@AAEJ_K@Z ; NArchive::NZip::CInArchive::Seek
	mov	DWORD PTR tv154[ebp], eax
	mov	edx, DWORD PTR tv154[ebp]
	mov	DWORD PTR ___result_$70381[ebp], edx
	cmp	DWORD PTR ___result_$70381[ebp], 0
	je	SHORT $LN3@ReadLocalI@2
	mov	eax, DWORD PTR ___result_$70381[ebp]
	jmp	$LN7@ReadLocalI@2
$LN3@ReadLocalI@2:
; Line 628
	lea	ecx, DWORD PTR _localItem$70384[ebp]
	call	??0CItemEx@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR tv155[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 629
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
	mov	DWORD PTR tv156[ebp], eax
	cmp	DWORD PTR tv156[ebp], 67324752		; 04034b50H
	je	SHORT $LN2@ReadLocalI@2
; Line 630
	mov	DWORD PTR $T71657[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _localItem$70384[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T71657[ebp]
	jmp	$LN7@ReadLocalI@2
$LN2@ReadLocalI@2:
; Line 631
	lea	eax, DWORD PTR _localItem$70384[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadLocalItem@CInArchive@NZip@NArchive@@AAE_NAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItem
; Line 632
	mov	ecx, DWORD PTR _item$[ebp]
	push	ecx
	lea	edx, DWORD PTR _localItem$70384[ebp]
	push	edx
	call	?AreItemsEqual@NZip@NArchive@@YG_NABVCItemEx@12@0@Z ; NArchive::NZip::AreItemsEqual
	mov	BYTE PTR tv157[ebp], al
	movzx	eax, BYTE PTR tv157[ebp]
	test	eax, eax
	jne	SHORT $LN1@ReadLocalI@2
; Line 633
	mov	DWORD PTR $T71658[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _localItem$70384[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T71658[ebp]
	jmp	SHORT $LN7@ReadLocalI@2
$LN1@ReadLocalI@2:
; Line 634
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR _localItem$70384[ebp+96]
	mov	DWORD PTR [ecx+96], edx
; Line 635
	lea	eax, DWORD PTR _localItem$70384[ebp+44]
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 44					; 0000002cH
	call	??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z
; Line 636
	mov	ecx, DWORD PTR _item$[ebp]
	mov	BYTE PTR [ecx+92], 1
; Line 637
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _localItem$70384[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	jmp	SHORT $LN9@ReadLocalI@2
__catch$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$0:
; Line 638
	mov	DWORD PTR $T71659[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN13@ReadLocalI@2
	ret	0
	mov	eax, $LN9@ReadLocalI@2
	ret	0
$LN9@ReadLocalI@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN12@ReadLocalI@2
$LN13@ReadLocalI@2:
	mov	eax, DWORD PTR $T71659[ebp]
	jmp	SHORT $LN7@ReadLocalI@2
$LN12@ReadLocalI@2:
; Line 639
	xor	eax, eax
$LN7@ReadLocalI@2:
; Line 640
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@ReadLocalI@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 176				; 000000b0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN20@ReadLocalI@2:
	DD	1
	DD	$LN19@ReadLocalI@2
$LN19@ReadLocalI@2:
	DD	-140					; ffffff74H
	DD	104					; 00000068H
	DD	$LN17@ReadLocalI@2
$LN17@ReadLocalI@2:
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$2:
	lea	ecx, DWORD PTR _localItem$70384[ebp]
	jmp	??1CItemEx@NZip@NArchive@@QAE@XZ
__ehhandler$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-180]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ENDP ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem
PUBLIC	??9@YG_NABVAString@@0@Z				; operator!=
PUBLIC	?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv187 = -16						; size = 4
tv186 = -12						; size = 4
tv176 = -8						; size = 4
tv175 = -4						; size = 4
_localItem$ = 8						; size = 4
_cdItem$ = 12						; size = 4
?AreItemsEqual@NZip@NArchive@@YG_NABVCItemEx@12@0@Z PROC ; NArchive::NZip::AreItemsEqual
; Line 595
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 596
	mov	eax, DWORD PTR _localItem$[ebp]
	push	eax
	mov	ecx, DWORD PTR _cdItem$[ebp]
	push	ecx
	call	?FlagsAreSame@NZip@NArchive@@YG_NABVCItem@12@0@Z ; NArchive::NZip::FlagsAreSame
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN5@AreItemsEq
; Line 597
	xor	al, al
	jmp	$LN6@AreItemsEq
$LN5@AreItemsEq:
; Line 598
	mov	ecx, DWORD PTR _localItem$[ebp]
	call	?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@AreItemsEq
; Line 602
	mov	ecx, DWORD PTR _cdItem$[ebp]
	mov	edx, DWORD PTR _localItem$[ebp]
	mov	eax, DWORD PTR [ecx+28]
	cmp	eax, DWORD PTR [edx+28]
	jne	SHORT $LN2@AreItemsEq
	mov	ecx, DWORD PTR _cdItem$[ebp]
	mov	edx, DWORD PTR _localItem$[ebp]
	mov	DWORD PTR tv175[ebp], ecx
	mov	DWORD PTR tv176[ebp], edx
	mov	eax, DWORD PTR tv175[ebp]
	mov	ecx, DWORD PTR tv176[ebp]
	mov	edx, DWORD PTR [eax+16]
	cmp	edx, DWORD PTR [ecx+16]
	jne	SHORT $LN2@AreItemsEq
	mov	eax, DWORD PTR tv175[ebp]
	mov	ecx, DWORD PTR tv176[ebp]
	mov	edx, DWORD PTR [eax+20]
	cmp	edx, DWORD PTR [ecx+20]
	jne	SHORT $LN2@AreItemsEq
	mov	eax, DWORD PTR _cdItem$[ebp]
	mov	ecx, DWORD PTR _localItem$[ebp]
	mov	DWORD PTR tv186[ebp], eax
	mov	DWORD PTR tv187[ebp], ecx
	mov	edx, DWORD PTR tv186[ebp]
	mov	eax, DWORD PTR tv187[ebp]
	mov	ecx, DWORD PTR [edx+8]
	cmp	ecx, DWORD PTR [eax+8]
	jne	SHORT $LN2@AreItemsEq
	mov	edx, DWORD PTR tv186[ebp]
	mov	eax, DWORD PTR tv187[ebp]
	mov	ecx, DWORD PTR [edx+12]
	cmp	ecx, DWORD PTR [eax+12]
	je	SHORT $LN4@AreItemsEq
$LN2@AreItemsEq:
; Line 603
	xor	al, al
	jmp	SHORT $LN6@AreItemsEq
$LN4@AreItemsEq:
; Line 613
	mov	edx, DWORD PTR _localItem$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _cdItem$[ebp]
	add	eax, 32					; 00000020H
	push	eax
	call	??9@YG_NABVAString@@0@Z			; operator!=
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN1@AreItemsEq
; Line 614
	xor	al, al
	jmp	SHORT $LN6@AreItemsEq
$LN1@AreItemsEq:
; Line 615
	mov	al, 1
$LN6@AreItemsEq:
; Line 616
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?AreItemsEqual@NZip@NArchive@@YG_NABVCItemEx@12@0@Z ENDP ; NArchive::NZip::AreItemsEqual
_TEXT	ENDS
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??9@YG_NABVAString@@0@Z
_TEXT	SEGMENT
tv77 = -4						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??9@YG_NABVAString@@0@Z PROC				; operator!=, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 394
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	mov	esi, eax
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	cmp	esi, eax
	jne	SHORT $LN3@operator
	mov	ecx, DWORD PTR _s2$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv77[ebp], 0
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv77[ebp], 1
$LN4@operator:
	mov	al, BYTE PTR tv77[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??9@YG_NABVAString@@0@Z ENDP				; operator!=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ PROC	; NArchive::NZip::CLocalItem::HasDescriptor, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipitem.h
; Line 213
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, WORD PTR [eax]
	and	eax, 8
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ENDP	; NArchive::NZip::CLocalItem::HasDescriptor
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
tv128 = -8						; size = 4
_mask$ = -4						; size = 4
_i1$ = 8						; size = 4
_i2$ = 12						; size = 4
?FlagsAreSame@NZip@NArchive@@YG_NABVCItem@12@0@Z PROC	; NArchive::NZip::FlagsAreSame
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.cpp
; Line 576
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 577
	mov	eax, DWORD PTR _i1$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	mov	edx, DWORD PTR _i2$[ebp]
	movzx	eax, WORD PTR [edx+2]
	cmp	ecx, eax
	je	SHORT $LN7@FlagsAreSa
; Line 578
	xor	al, al
	jmp	SHORT $LN8@FlagsAreSa
$LN7@FlagsAreSa:
; Line 579
	mov	ecx, DWORD PTR _i1$[ebp]
	movzx	edx, WORD PTR [ecx]
	mov	eax, DWORD PTR _i2$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	edx, ecx
	jne	SHORT $LN6@FlagsAreSa
; Line 580
	mov	al, 1
	jmp	SHORT $LN8@FlagsAreSa
$LN6@FlagsAreSa:
; Line 581
	mov	DWORD PTR _mask$[ebp], 65535		; 0000ffffH
; Line 582
	mov	edx, DWORD PTR _i1$[ebp]
	movzx	eax, WORD PTR [edx+2]
	mov	DWORD PTR tv128[ebp], eax
	cmp	DWORD PTR tv128[ebp], 8
	je	SHORT $LN3@FlagsAreSa
	jmp	SHORT $LN2@FlagsAreSa
$LN3@FlagsAreSa:
; Line 585
	mov	DWORD PTR _mask$[ebp], 32761		; 00007ff9H
; Line 586
	jmp	SHORT $LN4@FlagsAreSa
$LN2@FlagsAreSa:
; Line 588
	mov	ecx, DWORD PTR _i1$[ebp]
	movzx	edx, WORD PTR [ecx+2]
	cmp	edx, 6
	jg	SHORT $LN4@FlagsAreSa
; Line 589
	mov	DWORD PTR _mask$[ebp], 32767		; 00007fffH
$LN4@FlagsAreSa:
; Line 591
	mov	eax, DWORD PTR _i1$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, DWORD PTR _mask$[ebp]
	mov	edx, DWORD PTR _i2$[ebp]
	movzx	eax, WORD PTR [edx]
	and	eax, DWORD PTR _mask$[ebp]
	xor	edx, edx
	cmp	ecx, eax
	sete	dl
	mov	al, dl
$LN8@FlagsAreSa:
; Line 592
	mov	esp, ebp
	pop	ebp
	ret	8
?FlagsAreSame@NZip@NArchive@@YG_NABVCItem@12@0@Z ENDP	; NArchive::NZip::FlagsAreSame
_TEXT	ENDS
PUBLIC	??0CItem@NZip@NArchive@@QAE@XZ			; NArchive::NZip::CItem::CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CItemEx@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CItemEx@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CItemEx::CItemEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CItem@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CItem::CItem
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CItemEx@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CItemEx::CItemEx
_TEXT	ENDS
PUBLIC	??1CExtraBlock@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CExtraBlock::~CExtraBlock
PUBLIC	??1CLocalItem@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CLocalItem::~CLocalItem
PUBLIC	??0CExtraBlock@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CExtraBlock::CExtraBlock
PUBLIC	??0CLocalItem@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CLocalItem::CLocalItem
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipitem.h
xdata$x	SEGMENT
__unwindtable$??0CItem@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CItem@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CItem@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CItem@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CItem@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CItem::CItem, COMDAT
; _this$ = ecx
; Line 270
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CItem@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CLocalItem@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+58], ax
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+60], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0CExtraBlock@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+92], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+93], 0
; Line 271
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+56], 0
; Line 272
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+57], 0
; Line 273
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CLocalItem@NZip@NArchive@@QAE@XZ
__unwindfunclet$??0CItem@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1CExtraBlock@NZip@NArchive@@QAE@XZ
__ehhandler$??0CItem@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CItem@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CItem::CItem
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLocalItem@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CLocalItem@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CLocalItem@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CLocalItem@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CLocalItem::CLocalItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CLocalItem@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0AString@@QAE@XZ			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0CExtraBlock@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0CLocalItem@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CLocalItem@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CLocalItem::CLocalItem
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T71713 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T71713[ebp], ecx
	mov	edx, DWORD PTR $T71713[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CLocalItem@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CLocalItem@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CLocalItem@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CLocalItem@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CLocalItem@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CLocalItem::~CLocalItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??1CExtraBlock@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CLocalItem@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??1CLocalItem@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CLocalItem@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CLocalItem@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CLocalItem::~CLocalItem
PUBLIC	??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CExtraBlock@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CExtraBlock@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CExtraBlock::CExtraBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CExtraBlock@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CExtraBlock::CExtraBlock
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CExtraBlock@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CExtraBlock@NZip@NArchive@@QAE@XZ PROC		; NArchive::NZip::CExtraBlock::~CExtraBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CExtraBlock@NZip@NArchive@@QAE@XZ ENDP		; NArchive::NZip::CExtraBlock::~CExtraBlock
_TEXT	ENDS
PUBLIC	??1CItem@NZip@NArchive@@QAE@XZ			; NArchive::NZip::CItem::~CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CItemEx@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CItemEx@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CItemEx::~CItemEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CItem@NZip@NArchive@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CItemEx@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CItemEx::~CItemEx
_TEXT	ENDS
PUBLIC	??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z PROC	; NArchive::NZip::CExtraBlock::operator=, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z ENDP	; NArchive::NZip::CExtraBlock::operator=
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CItem@NZip@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CItem@NZip@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CItem@NZip@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CItem@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CItem@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CItem::~CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CItem@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??1CExtraBlock@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLocalItem@NZip@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CLocalItem@NZip@NArchive@@QAE@XZ
__unwindfunclet$??1CItem@NZip@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1CExtraBlock@NZip@NArchive@@QAE@XZ
__ehhandler$??1CItem@NZip@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CItem@NZip@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CItem@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CItem::~CItem
PUBLIC	__$ArrayPad$
PUBLIC	?ReadLocalItemDescriptor@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemDescriptor
EXTRN	__chkstk:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_j$70438 = -4152					; size = 4
_descriptorPackSize$70428 = -4148			; size = 4
_i$70420 = -4144					; size = 4
___result_$70415 = -4140				; size = 4
_processedSize$70414 = -4132				; size = 4
_packedSize$ = -4124					; size = 4
_numBytesInBuffer$ = -4120				; size = 4
_buf$ = -4112						; size = 4096
_kBufSize$ = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_item$ = 8						; size = 4
?ReadLocalItemDescriptor@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z PROC ; NArchive::NZip::CInArchive::ReadLocalItemDescriptor
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.cpp
; Line 643
	push	ebp
	mov	ebp, esp
	mov	eax, 4152				; 00001038H
	call	__chkstk
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-4152]
	mov	ecx, 1038				; 0000040eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 644
	mov	DWORD PTR _kBufSize$[ebp], 4096		; 00001000H
; Line 647
	mov	DWORD PTR _numBytesInBuffer$[ebp], 0
; Line 648
	mov	DWORD PTR _packedSize$[ebp], 0
$LN13@ReadLocalI@3:
; Line 653
	lea	eax, DWORD PTR _processedSize$70414[ebp]
	push	eax
	mov	ecx, 4096				; 00001000H
	sub	ecx, DWORD PTR _numBytesInBuffer$[ebp]
	push	ecx
	mov	edx, DWORD PTR _numBytesInBuffer$[ebp]
	lea	eax, DWORD PTR _buf$[ebp+edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBytes@CInArchive@NZip@NArchive@@AAEJPAXIPAI@Z ; NArchive::NZip::CInArchive::ReadBytes
	mov	DWORD PTR ___result_$70415[ebp], eax
	cmp	DWORD PTR ___result_$70415[ebp], 0
	je	SHORT $LN11@ReadLocalI@3
	mov	eax, DWORD PTR ___result_$70415[ebp]
	jmp	$LN14@ReadLocalI@3
$LN11@ReadLocalI@3:
; Line 654
	mov	ecx, DWORD PTR _numBytesInBuffer$[ebp]
	add	ecx, DWORD PTR _processedSize$70414[ebp]
	mov	DWORD PTR _numBytesInBuffer$[ebp], ecx
; Line 655
	cmp	DWORD PTR _numBytesInBuffer$[ebp], 16	; 00000010H
	jae	SHORT $LN10@ReadLocalI@3
; Line 656
	mov	eax, 1
	jmp	$LN14@ReadLocalI@3
$LN10@ReadLocalI@3:
; Line 659
	mov	DWORD PTR _i$70420[ebp], 0
	jmp	SHORT $LN9@ReadLocalI@3
$LN8@ReadLocalI@3:
	mov	edx, DWORD PTR _i$70420[ebp]
	add	edx, 1
	mov	DWORD PTR _i$70420[ebp], edx
$LN9@ReadLocalI@3:
	mov	eax, DWORD PTR _numBytesInBuffer$[ebp]
	sub	eax, 16					; 00000010H
	cmp	DWORD PTR _i$70420[ebp], eax
	ja	$LN7@ReadLocalI@3
; Line 663
	mov	ecx, DWORD PTR _i$70420[ebp]
	movzx	edx, BYTE PTR _buf$[ebp+ecx]
	cmp	edx, 80					; 00000050H
	je	SHORT $LN6@ReadLocalI@3
; Line 664
	jmp	SHORT $LN8@ReadLocalI@3
$LN6@ReadLocalI@3:
; Line 666
	mov	eax, DWORD PTR _i$70420[ebp]
	cmp	DWORD PTR _buf$[ebp+eax], 134695760	; 08074b50H
	jne	$LN5@ReadLocalI@3
; Line 668
	mov	ecx, DWORD PTR _i$70420[ebp]
	mov	edx, DWORD PTR _buf$[ebp+ecx+8]
	mov	DWORD PTR _descriptorPackSize$70428[ebp], edx
; Line 669
	mov	eax, DWORD PTR _packedSize$[ebp]
	add	eax, DWORD PTR _i$70420[ebp]
	cmp	DWORD PTR _descriptorPackSize$70428[ebp], eax
	jne	SHORT $LN5@ReadLocalI@3
; Line 671
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR _i$70420[ebp]
	mov	eax, DWORD PTR _buf$[ebp+edx+4]
	mov	DWORD PTR [ecx+28], eax
; Line 672
	mov	ecx, DWORD PTR _descriptorPackSize$70428[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 673
	mov	ecx, DWORD PTR _i$70420[ebp]
	mov	edx, DWORD PTR _buf$[ebp+ecx+12]
	xor	eax, eax
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
; Line 674
	mov	edx, DWORD PTR _numBytesInBuffer$[ebp]
	sub	edx, DWORD PTR _i$70420[ebp]
	sub	edx, 16					; 00000010H
	xor	eax, eax
	sub	eax, edx
	cdq
	push	edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncreaseRealPosition@CInArchive@NZip@NArchive@@AAEJ_J@Z ; NArchive::NZip::CInArchive::IncreaseRealPosition
	jmp	SHORT $LN14@ReadLocalI@3
$LN5@ReadLocalI@3:
; Line 677
	jmp	$LN8@ReadLocalI@3
$LN7@ReadLocalI@3:
; Line 679
	mov	eax, DWORD PTR _packedSize$[ebp]
	add	eax, DWORD PTR _i$70420[ebp]
	mov	DWORD PTR _packedSize$[ebp], eax
; Line 681
	mov	DWORD PTR _j$70438[ebp], 0
	jmp	SHORT $LN3@ReadLocalI@3
$LN2@ReadLocalI@3:
	mov	ecx, DWORD PTR _i$70420[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$70420[ebp], ecx
	mov	edx, DWORD PTR _j$70438[ebp]
	add	edx, 1
	mov	DWORD PTR _j$70438[ebp], edx
$LN3@ReadLocalI@3:
	mov	eax, DWORD PTR _i$70420[ebp]
	cmp	eax, DWORD PTR _numBytesInBuffer$[ebp]
	jae	SHORT $LN1@ReadLocalI@3
; Line 682
	mov	ecx, DWORD PTR _j$70438[ebp]
	mov	edx, DWORD PTR _i$70420[ebp]
	mov	al, BYTE PTR _buf$[ebp+edx]
	mov	BYTE PTR _buf$[ebp+ecx], al
	jmp	SHORT $LN2@ReadLocalI@3
$LN1@ReadLocalI@3:
; Line 683
	mov	ecx, DWORD PTR _j$70438[ebp]
	mov	DWORD PTR _numBytesInBuffer$[ebp], ecx
; Line 684
	jmp	$LN13@ReadLocalI@3
$LN14@ReadLocalI@3:
; Line 685
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@ReadLocalI@3
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 4152				; 00001038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN19@ReadLocalI@3:
	DD	2
	DD	$LN18@ReadLocalI@3
$LN18@ReadLocalI@3:
	DD	-4112					; ffffeff0H
	DD	4096					; 00001000H
	DD	$LN16@ReadLocalI@3
	DD	-4132					; ffffefdcH
	DD	4
	DD	$LN17@ReadLocalI@3
$LN17@ReadLocalI@3:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN16@ReadLocalI@3:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?ReadLocalItemDescriptor@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z ENDP ; NArchive::NZip::CInArchive::ReadLocalItemDescriptor
_TEXT	ENDS
PUBLIC	?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ	; NArchive::NZip::CItemEx::GetDataPosition
PUBLIC	?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull
xdata$x	SEGMENT
__catchsym$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$0
__unwindtable$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$2
__ehfuncinfo$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv227 = -96						; size = 4
tv220 = -92						; size = 4
tv167 = -88						; size = 4
tv166 = -84						; size = 4
tv165 = -80						; size = 4
tv164 = -76						; size = 4
tv163 = -72						; size = 4
tv162 = -68						; size = 8
tv161 = -57						; size = 1
tv160 = -56						; size = 4
$T71755 = -52						; size = 4
_unpackSize$70460 = -48					; size = 8
_packSize$70459 = -40					; size = 8
_crc$70458 = -32					; size = 4
___result_$70453 = -28					; size = 4
___result_$70449 = -24					; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_item$ = 8						; size = 4
?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z PROC ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull
; _this$ = ecx
; Line 688
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 80					; 00000050H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 689
	mov	eax, DWORD PTR _item$[ebp]
	movzx	ecx, BYTE PTR [eax+92]
	test	ecx, ecx
	je	SHORT $LN8@ReadLocalI@4
; Line 690
	xor	eax, eax
	jmp	$LN9@ReadLocalI@4
$LN8@ReadLocalI@4:
; Line 692
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 693
	mov	edx, DWORD PTR _item$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadLocalItemAfterCdItem@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItem
	mov	DWORD PTR tv160[ebp], eax
	mov	eax, DWORD PTR tv160[ebp]
	mov	DWORD PTR ___result_$70449[ebp], eax
	cmp	DWORD PTR ___result_$70449[ebp], 0
	je	SHORT $LN6@ReadLocalI@4
	mov	eax, DWORD PTR ___result_$70449[ebp]
	jmp	$LN9@ReadLocalI@4
$LN6@ReadLocalI@4:
; Line 694
	mov	ecx, DWORD PTR _item$[ebp]
	call	?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor
	mov	BYTE PTR tv161[ebp], al
	movzx	ecx, BYTE PTR tv161[ebp]
	test	ecx, ecx
	je	$LN5@ReadLocalI@4
; Line 696
	mov	ecx, DWORD PTR _item$[ebp]
	call	?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ ; NArchive::NZip::CItemEx::GetDataPosition
	mov	DWORD PTR tv162[ebp], eax
	mov	DWORD PTR tv162[ebp+4], edx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+56]
	add	eax, DWORD PTR tv162[ebp]
	mov	ecx, DWORD PTR [edx+60]
	adc	ecx, DWORD PTR tv162[ebp+4]
	mov	edx, DWORD PTR _item$[ebp]
	add	eax, DWORD PTR [edx+16]
	adc	ecx, DWORD PTR [edx+20]
	push	ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Seek@CInArchive@NZip@NArchive@@AAEJ_K@Z ; NArchive::NZip::CInArchive::Seek
	mov	DWORD PTR tv163[ebp], eax
	mov	eax, DWORD PTR tv163[ebp]
	mov	DWORD PTR ___result_$70453[ebp], eax
	cmp	DWORD PTR ___result_$70453[ebp], 0
	je	SHORT $LN4@ReadLocalI@4
	mov	eax, DWORD PTR ___result_$70453[ebp]
	jmp	$LN9@ReadLocalI@4
$LN4@ReadLocalI@4:
; Line 697
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
	mov	DWORD PTR tv164[ebp], eax
	cmp	DWORD PTR tv164[ebp], 134695760		; 08074b50H
	je	SHORT $LN3@ReadLocalI@4
; Line 698
	mov	eax, 1
	jmp	$LN9@ReadLocalI@4
$LN3@ReadLocalI@4:
; Line 699
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
	mov	DWORD PTR tv165[ebp], eax
	mov	ecx, DWORD PTR tv165[ebp]
	mov	DWORD PTR _crc$70458[ebp], ecx
; Line 711
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
	mov	DWORD PTR tv166[ebp], eax
	mov	edx, DWORD PTR tv166[ebp]
	xor	eax, eax
	mov	DWORD PTR _packSize$70459[ebp], edx
	mov	DWORD PTR _packSize$70459[ebp+4], eax
; Line 712
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
	mov	DWORD PTR tv167[ebp], eax
	mov	ecx, DWORD PTR tv167[ebp]
	xor	edx, edx
	mov	DWORD PTR _unpackSize$70460[ebp], ecx
	mov	DWORD PTR _unpackSize$70460[ebp+4], edx
; Line 715
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _crc$70458[ebp]
	cmp	ecx, DWORD PTR [eax+28]
	jne	SHORT $LN1@ReadLocalI@4
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR tv220[ebp], edx
	mov	eax, DWORD PTR tv220[ebp]
	mov	ecx, DWORD PTR [eax+16]
	cmp	ecx, DWORD PTR _packSize$70459[ebp]
	jne	SHORT $LN1@ReadLocalI@4
	mov	edx, DWORD PTR tv220[ebp]
	mov	eax, DWORD PTR [edx+20]
	cmp	eax, DWORD PTR _packSize$70459[ebp+4]
	jne	SHORT $LN1@ReadLocalI@4
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR tv227[ebp], ecx
	mov	edx, DWORD PTR tv227[ebp]
	mov	eax, DWORD PTR [edx+8]
	cmp	eax, DWORD PTR _unpackSize$70460[ebp]
	jne	SHORT $LN1@ReadLocalI@4
	mov	ecx, DWORD PTR tv227[ebp]
	mov	edx, DWORD PTR [ecx+12]
	cmp	edx, DWORD PTR _unpackSize$70460[ebp+4]
	je	SHORT $LN5@ReadLocalI@4
$LN1@ReadLocalI@4:
; Line 716
	mov	eax, 1
	jmp	SHORT $LN9@ReadLocalI@4
$LN5@ReadLocalI@4:
; Line 718
	jmp	SHORT $LN11@ReadLocalI@4
__catch$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z$0:
; Line 719
	mov	DWORD PTR $T71755[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN14@ReadLocalI@4
	ret	0
	mov	eax, $LN11@ReadLocalI@4
	ret	0
$LN11@ReadLocalI@4:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN13@ReadLocalI@4
$LN14@ReadLocalI@4:
	mov	eax, DWORD PTR $T71755[ebp]
	jmp	SHORT $LN9@ReadLocalI@4
$LN13@ReadLocalI@4:
; Line 720
	xor	eax, eax
$LN9@ReadLocalI@4:
; Line 721
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-100]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadLocalItemAfterCdItemFull@CInArchive@NZip@NArchive@@QAEJAAVCItemEx@23@@Z ENDP ; NArchive::NZip::CInArchive::ReadLocalItemAfterCdItemFull
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ PROC	; NArchive::NZip::CItemEx::GetDataPosition, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.h
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+96]
	xor	edx, edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx+64]
	adc	edx, DWORD PTR [ecx+68]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDataPosition@CItemEx@NZip@NArchive@@QBE_KXZ ENDP	; NArchive::NZip::CItemEx::GetDataPosition
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?ReadCdItem@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadCdItem
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_diskNumberStart$ = -80					; size = 4
_commentSize$ = -72					; size = 2
_extraSize$ = -68					; size = 2
_nameSize$ = -64					; size = 4
_p$ = -56						; size = 42
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_item$ = 8						; size = 4
?ReadCdItem@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z PROC ; NArchive::NZip::CInArchive::ReadCdItem
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.cpp
; Line 724
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-84]
	mov	ecx, 21					; 00000015H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 725
	mov	eax, DWORD PTR _item$[ebp]
	mov	BYTE PTR [eax+93], 1
; Line 727
	push	42					; 0000002aH
	lea	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes
; Line 729
	mov	edx, DWORD PTR _item$[ebp]
	mov	al, BYTE PTR _p$[ebp]
	mov	BYTE PTR [edx+56], al
; Line 730
	mov	ecx, DWORD PTR _item$[ebp]
	mov	dl, BYTE PTR _p$[ebp+1]
	mov	BYTE PTR [ecx+57], dl
; Line 731
	mov	eax, DWORD PTR _item$[ebp]
	mov	cl, BYTE PTR _p$[ebp+2]
	mov	BYTE PTR [eax+4], cl
; Line 732
	mov	edx, DWORD PTR _item$[ebp]
	mov	al, BYTE PTR _p$[ebp+3]
	mov	BYTE PTR [edx+5], al
; Line 733
	mov	ecx, DWORD PTR _item$[ebp]
	mov	dx, WORD PTR _p$[ebp+4]
	mov	WORD PTR [ecx], dx
; Line 734
	mov	eax, DWORD PTR _item$[ebp]
	mov	cx, WORD PTR _p$[ebp+6]
	mov	WORD PTR [eax+2], cx
; Line 735
	mov	edx, DWORD PTR _item$[ebp]
	mov	eax, DWORD PTR _p$[ebp+8]
	mov	DWORD PTR [edx+24], eax
; Line 736
	mov	ecx, DWORD PTR _item$[ebp]
	mov	edx, DWORD PTR _p$[ebp+12]
	mov	DWORD PTR [ecx+28], edx
; Line 737
	mov	eax, DWORD PTR _p$[ebp+16]
	xor	ecx, ecx
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	DWORD PTR [edx+20], ecx
; Line 738
	mov	eax, DWORD PTR _p$[ebp+20]
	xor	ecx, ecx
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
; Line 739
	movzx	eax, WORD PTR _p$[ebp+24]
	mov	DWORD PTR _nameSize$[ebp], eax
; Line 740
	mov	cx, WORD PTR _p$[ebp+26]
	mov	WORD PTR _extraSize$[ebp], cx
; Line 741
	mov	dx, WORD PTR _p$[ebp+28]
	mov	WORD PTR _commentSize$[ebp], dx
; Line 742
	movzx	eax, WORD PTR _p$[ebp+30]
	mov	DWORD PTR _diskNumberStart$[ebp], eax
; Line 743
	mov	ecx, DWORD PTR _item$[ebp]
	mov	dx, WORD PTR _p$[ebp+32]
	mov	WORD PTR [ecx+58], dx
; Line 744
	mov	eax, DWORD PTR _item$[ebp]
	mov	ecx, DWORD PTR _p$[ebp+34]
	mov	DWORD PTR [eax+60], ecx
; Line 745
	mov	edx, DWORD PTR _p$[ebp+38]
	xor	eax, eax
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [ecx+64], edx
	mov	DWORD PTR [ecx+68], eax
; Line 746
	mov	edx, DWORD PTR _item$[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _nameSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadFileName@CInArchive@NZip@NArchive@@AAEXIAAVAString@@@Z ; NArchive::NZip::CInArchive::ReadFileName
; Line 748
	movzx	ecx, WORD PTR _extraSize$[ebp]
	test	ecx, ecx
	jle	SHORT $LN2@ReadCdItem
; Line 751
	lea	edx, DWORD PTR _diskNumberStart$[ebp]
	push	edx
	mov	eax, DWORD PTR _item$[ebp]
	add	eax, 64					; 00000040H
	push	eax
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _item$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _item$[ebp]
	add	eax, 72					; 00000048H
	push	eax
	movzx	ecx, WORD PTR _extraSize$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadExtra@CInArchive@NZip@NArchive@@AAE_NIAAUCExtraBlock@23@AA_K11AAI@Z ; NArchive::NZip::CInArchive::ReadExtra
$LN2@ReadCdItem:
; Line 754
	cmp	DWORD PTR _diskNumberStart$[ebp], 0
	je	SHORT $LN1@ReadCdItem
; Line 755
	mov	eax, -2147467263			; 80004001H
	jmp	SHORT $LN3@ReadCdItem
$LN1@ReadCdItem:
; Line 763
	movzx	edx, WORD PTR _commentSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _item$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBuffer@CInArchive@NZip@NArchive@@AAEXAAV?$CBuffer@E@@I@Z ; NArchive::NZip::CInArchive::ReadBuffer
; Line 764
	xor	eax, eax
$LN3@ReadCdItem:
; Line 765
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN8@ReadCdItem
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 84					; 00000054H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN8@ReadCdItem:
	DD	2
	DD	$LN7@ReadCdItem
$LN7@ReadCdItem:
	DD	-56					; ffffffc8H
	DD	42					; 0000002aH
	DD	$LN5@ReadCdItem
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN6@ReadCdItem
$LN6@ReadCdItem:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	107					; 0000006bH
	DB	78					; 0000004eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	0
$LN5@ReadCdItem:
	DB	112					; 00000070H
	DB	0
?ReadCdItem@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z ENDP ; NArchive::NZip::CInArchive::ReadCdItem
_TEXT	ENDS
PUBLIC	?ParseEcd@CCdInfo@NZip@NArchive@@QAEXPBE@Z	; NArchive::NZip::CCdInfo::ParseEcd
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?ParseEcd@CCdInfo@NZip@NArchive@@QAEXPBE@Z PROC		; NArchive::NZip::CCdInfo::ParseEcd
; _this$ = ecx
; Line 768
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 769
	mov	eax, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [eax+10]
	cdq
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
	mov	DWORD PTR [ecx+4], edx
; Line 770
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+12]
	xor	ecx, ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], ecx
; Line 771
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	DWORD PTR [eax+20], edx
; Line 772
	mov	esp, ebp
	pop	ebp
	ret	4
?ParseEcd@CCdInfo@NZip@NArchive@@QAEXPBE@Z ENDP		; NArchive::NZip::CCdInfo::ParseEcd
_TEXT	ENDS
PUBLIC	?ParseEcd64@CCdInfo@NZip@NArchive@@QAEXPBE@Z	; NArchive::NZip::CCdInfo::ParseEcd64
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
?ParseEcd64@CCdInfo@NZip@NArchive@@QAEXPBE@Z PROC	; NArchive::NZip::CCdInfo::ParseEcd64
; _this$ = ecx
; Line 775
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 776
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+24]
	mov	DWORD PTR [eax], edx
	mov	ecx, DWORD PTR [ecx+28]
	mov	DWORD PTR [eax+4], ecx
; Line 777
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR [edx+8], ecx
	mov	eax, DWORD PTR [eax+44]
	mov	DWORD PTR [edx+12], eax
; Line 778
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+48]
	mov	DWORD PTR [ecx+16], eax
	mov	edx, DWORD PTR [edx+52]
	mov	DWORD PTR [ecx+20], edx
; Line 779
	mov	esp, ebp
	pop	ebp
	ret	4
?ParseEcd64@CCdInfo@NZip@NArchive@@QAEXPBE@Z ENDP	; NArchive::NZip::CCdInfo::ParseEcd64
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?TryEcd64@CInArchive@NZip@NArchive@@AAEJ_KAAUCCdInfo@23@@Z ; NArchive::NZip::CInArchive::TryEcd64
EXTRN	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:PROC ; ReadStream_FALSE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_mainSize$ = -88					; size = 8
___result_$70538 = -80					; size = 4
_buf$ = -72						; size = 56
___result_$70534 = -12					; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_offset$ = 8						; size = 8
_cdInfo$ = 16						; size = 4
?TryEcd64@CInArchive@NZip@NArchive@@AAEJ_KAAUCCdInfo@23@@Z PROC ; NArchive::NZip::CInArchive::TryEcd64
; _this$ = ecx
; Line 782
	push	ebp
	mov	ebp, esp
	sub	esp, 88					; 00000058H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 22					; 00000016H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 783
	cmp	DWORD PTR _offset$[ebp+4], -2147483648	; 80000000H
	jb	SHORT $LN6@TryEcd64
	ja	SHORT $LN9@TryEcd64
	cmp	DWORD PTR _offset$[ebp], 0
	jb	SHORT $LN6@TryEcd64
$LN9@TryEcd64:
; Line 784
	mov	eax, 1
	jmp	$LN7@TryEcd64
$LN6@TryEcd64:
; Line 785
	mov	eax, DWORD PTR _offset$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _offset$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Seek@CInArchive@NZip@NArchive@@AAEJ_K@Z ; NArchive::NZip::CInArchive::Seek
	mov	DWORD PTR ___result_$70534[ebp], eax
	cmp	DWORD PTR ___result_$70534[ebp], 0
	je	SHORT $LN5@TryEcd64
	mov	eax, DWORD PTR ___result_$70534[ebp]
	jmp	SHORT $LN7@TryEcd64
$LN5@TryEcd64:
; Line 788
	push	56					; 00000038H
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	call	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE
	mov	DWORD PTR ___result_$70538[ebp], eax
	cmp	DWORD PTR ___result_$70538[ebp], 0
	je	SHORT $LN4@TryEcd64
	mov	eax, DWORD PTR ___result_$70538[ebp]
	jmp	SHORT $LN7@TryEcd64
$LN4@TryEcd64:
; Line 790
	cmp	DWORD PTR _buf$[ebp], 101075792		; 06064b50H
	je	SHORT $LN3@TryEcd64
; Line 791
	mov	eax, 1
	jmp	SHORT $LN7@TryEcd64
$LN3@TryEcd64:
; Line 792
	mov	eax, DWORD PTR _buf$[ebp+4]
	mov	DWORD PTR _mainSize$[ebp], eax
	mov	ecx, DWORD PTR _buf$[ebp+8]
	mov	DWORD PTR _mainSize$[ebp+4], ecx
; Line 793
	cmp	DWORD PTR _mainSize$[ebp+4], 0
	ja	SHORT $LN10@TryEcd64
	cmp	DWORD PTR _mainSize$[ebp], 44		; 0000002cH
	jb	SHORT $LN1@TryEcd64
$LN10@TryEcd64:
	cmp	DWORD PTR _mainSize$[ebp+4], 1
	jb	SHORT $LN2@TryEcd64
	ja	SHORT $LN1@TryEcd64
	cmp	DWORD PTR _mainSize$[ebp], 0
	jbe	SHORT $LN2@TryEcd64
$LN1@TryEcd64:
; Line 794
	mov	eax, 1
	jmp	SHORT $LN7@TryEcd64
$LN2@TryEcd64:
; Line 795
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _cdInfo$[ebp]
	call	?ParseEcd64@CCdInfo@NZip@NArchive@@QAEXPBE@Z ; NArchive::NZip::CCdInfo::ParseEcd64
; Line 796
	xor	eax, eax
$LN7@TryEcd64:
; Line 797
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@TryEcd64
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN14@TryEcd64:
	DD	1
	DD	$LN13@TryEcd64
$LN13@TryEcd64:
	DD	-72					; ffffffb8H
	DD	56					; 00000038H
	DD	$LN12@TryEcd64
$LN12@TryEcd64:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?TryEcd64@CInArchive@NZip@NArchive@@AAEJ_KAAUCCdInfo@23@@Z ENDP ; NArchive::NZip::CInArchive::TryEcd64
_TEXT	ENDS
PUBLIC	?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z ; NArchive::NZip::CInArchive::FindCd
xdata$x	SEGMENT
__unwindtable$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z$0
__ehfuncinfo$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv402 = -192						; size = 8
tv389 = -184						; size = 4
tv363 = -180						; size = 4
tv314 = -176						; size = 4
tv90 = -172						; size = 4
tv78 = -168						; size = 4
tv68 = -164						; size = 4
$T71798 = -160						; size = 4
$T71797 = -156						; size = 4
$T71796 = -152						; size = 4
$T71795 = -148						; size = 4
$T71794 = -144						; size = 4
$T71793 = -140						; size = 4
$T71792 = -136						; size = 4
$T71791 = -132						; size = 4
$T71790 = -128						; size = 4
$T71789 = -124						; size = 4
_cdEnd$70629 = -120					; size = 8
_absEcdPos$70628 = -112					; size = 8
_ecd64$70607 = -104					; size = 4
_absEcd64$70606 = -100					; size = 8
_ecd64Offset$70603 = -92				; size = 8
_locator$70597 = -84					; size = 4
_i$70581 = -80						; size = 4
_buf$ = -76						; size = 4
___result_$70576 = -72					; size = 4
___result_$70569 = -68					; size = 4
_startPosition$ = -64					; size = 8
_byteBuffer$ = -52					; size = 4
_bufSize$ = -44						; size = 4
_kBufSizeMax$ = -40					; size = 4
___result_$70558 = -36					; size = 4
_endPosition$ = -28					; size = 8
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_cdInfo$ = 8						; size = 4
?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z PROC ; NArchive::NZip::CInArchive::FindCd
; _this$ = ecx
; Line 800
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 180				; 000000b4H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 45					; 0000002dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 802
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv68[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _endPosition$[ebp]
	push	eax
	push	2
	push	0
	push	0
	mov	ecx, DWORD PTR tv68[ebp]
	push	ecx
	mov	edx, DWORD PTR tv68[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70558[ebp], eax
	cmp	DWORD PTR ___result_$70558[ebp], 0
	je	SHORT $LN23@FindCd
	mov	eax, DWORD PTR ___result_$70558[ebp]
	jmp	$LN24@FindCd
$LN23@FindCd:
; Line 804
	mov	DWORD PTR _kBufSizeMax$[ebp], 65634	; 00010062H
; Line 805
	cmp	DWORD PTR _endPosition$[ebp+4], 0
	ja	SHORT $LN26@FindCd
	jb	SHORT $LN29@FindCd
	cmp	DWORD PTR _endPosition$[ebp], 65634	; 00010062H
	jae	SHORT $LN26@FindCd
$LN29@FindCd:
	mov	edx, DWORD PTR _endPosition$[ebp]
	mov	DWORD PTR tv78[ebp], edx
	jmp	SHORT $LN27@FindCd
$LN26@FindCd:
	mov	DWORD PTR tv78[ebp], 65634		; 00010062H
$LN27@FindCd:
	mov	eax, DWORD PTR tv78[ebp]
	mov	DWORD PTR _bufSize$[ebp], eax
; Line 806
	cmp	DWORD PTR _bufSize$[ebp], 22		; 00000016H
	jae	SHORT $LN22@FindCd
; Line 807
	mov	eax, 1
	jmp	$LN24@FindCd
$LN22@FindCd:
; Line 808
	mov	ecx, DWORD PTR _bufSize$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??0?$CObjArray@E@@QAE@I@Z		; CObjArray<unsigned char>::CObjArray<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 810
	mov	edx, DWORD PTR _bufSize$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _endPosition$[ebp]
	sub	ecx, edx
	mov	edx, DWORD PTR _endPosition$[ebp+4]
	sbb	edx, eax
	mov	DWORD PTR _startPosition$[ebp], ecx
	mov	DWORD PTR _startPosition$[ebp+4], edx
; Line 811
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv90[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	mov	esi, esp
	push	eax
	push	0
	mov	ecx, DWORD PTR _startPosition$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _startPosition$[ebp]
	push	edx
	mov	eax, DWORD PTR tv90[ebp]
	push	eax
	mov	ecx, DWORD PTR tv90[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70569[ebp], eax
	cmp	DWORD PTR ___result_$70569[ebp], 0
	je	SHORT $LN21@FindCd
	mov	ecx, DWORD PTR ___result_$70569[ebp]
	mov	DWORD PTR $T71789[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T71789[ebp]
	jmp	$LN24@FindCd
$LN21@FindCd:
; Line 812
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv314[ebp], edx
	mov	eax, DWORD PTR tv314[ebp]
	mov	ecx, DWORD PTR [eax+48]
	cmp	ecx, DWORD PTR _startPosition$[ebp]
	jne	SHORT $LN30@FindCd
	mov	edx, DWORD PTR tv314[ebp]
	mov	eax, DWORD PTR [edx+52]
	cmp	eax, DWORD PTR _startPosition$[ebp+4]
	je	SHORT $LN20@FindCd
$LN30@FindCd:
; Line 813
	mov	DWORD PTR $T71790[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T71790[ebp]
	jmp	$LN24@FindCd
$LN20@FindCd:
; Line 815
	mov	ecx, DWORD PTR _bufSize$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	call	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE
	mov	DWORD PTR ___result_$70576[ebp], eax
	cmp	DWORD PTR ___result_$70576[ebp], 0
	je	SHORT $LN19@FindCd
	mov	edx, DWORD PTR ___result_$70576[ebp]
	mov	DWORD PTR $T71791[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T71791[ebp]
	jmp	$LN24@FindCd
$LN19@FindCd:
; Line 817
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??B?$CObjArray@E@@QAEPAEXZ		; CObjArray<unsigned char>::operator unsigned char *
	mov	DWORD PTR _buf$[ebp], eax
; Line 818
	mov	eax, DWORD PTR _bufSize$[ebp]
	sub	eax, 22					; 00000016H
	mov	DWORD PTR _i$70581[ebp], eax
	jmp	SHORT $LN18@FindCd
$LN17@FindCd:
	mov	ecx, DWORD PTR _i$70581[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$70581[ebp], ecx
$LN18@FindCd:
; Line 820
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _i$70581[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 80					; 00000050H
	je	SHORT $LN15@FindCd
; Line 822
	cmp	DWORD PTR _i$70581[ebp], 0
	jne	SHORT $LN14@FindCd
	mov	DWORD PTR $T71792[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T71792[ebp]
	jmp	$LN24@FindCd
$LN14@FindCd:
; Line 823
	mov	ecx, DWORD PTR _i$70581[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$70581[ebp], ecx
; Line 824
	mov	edx, DWORD PTR _buf$[ebp]
	add	edx, DWORD PTR _i$70581[ebp]
	movzx	eax, BYTE PTR [edx]
	cmp	eax, 80					; 00000050H
	je	SHORT $LN15@FindCd
; Line 826
	cmp	DWORD PTR _i$70581[ebp], 0
	jne	SHORT $LN12@FindCd
	mov	DWORD PTR $T71793[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T71793[ebp]
	jmp	$LN24@FindCd
$LN12@FindCd:
; Line 827
	jmp	$LN17@FindCd
$LN15@FindCd:
; Line 830
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _i$70581[ebp]
	cmp	DWORD PTR [ecx], 101010256		; 06054b50H
	jne	$LN11@FindCd
; Line 832
	cmp	DWORD PTR _i$70581[ebp], 76		; 0000004cH
	jb	$LN10@FindCd
; Line 834
	mov	edx, DWORD PTR _i$70581[ebp]
	mov	eax, DWORD PTR _buf$[ebp]
	lea	ecx, DWORD PTR [eax+edx-20]
	mov	DWORD PTR _locator$70597[ebp], ecx
; Line 836
	mov	edx, DWORD PTR _locator$70597[ebp]
	cmp	DWORD PTR [edx], 117853008		; 07064b50H
	jne	$LN10@FindCd
	mov	eax, DWORD PTR _locator$70597[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN10@FindCd
; Line 840
	mov	ecx, DWORD PTR _locator$70597[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _ecd64Offset$70603[ebp], edx
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR _ecd64Offset$70603[ebp+4], eax
; Line 841
	mov	ecx, DWORD PTR _bufSize$[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _endPosition$[ebp]
	sub	eax, ecx
	mov	ecx, DWORD PTR _endPosition$[ebp+4]
	sbb	ecx, edx
	mov	edx, DWORD PTR _i$70581[ebp]
	xor	esi, esi
	add	eax, edx
	adc	ecx, esi
	sub	eax, 76					; 0000004cH
	sbb	ecx, 0
	mov	DWORD PTR _absEcd64$70606[ebp], eax
	mov	DWORD PTR _absEcd64$70606[ebp+4], ecx
; Line 843
	mov	eax, DWORD PTR _locator$70597[ebp]
	sub	eax, 56					; 00000038H
	mov	DWORD PTR _ecd64$70607[ebp], eax
; Line 845
	mov	ecx, DWORD PTR _ecd64$70607[ebp]
	cmp	DWORD PTR [ecx], 101075792		; 06064b50H
	jne	SHORT $LN8@FindCd
	mov	edx, DWORD PTR _ecd64$70607[ebp]
	mov	DWORD PTR tv363[ebp], edx
	mov	eax, DWORD PTR tv363[ebp]
	cmp	DWORD PTR [eax+4], 44			; 0000002cH
	jne	SHORT $LN8@FindCd
	mov	ecx, DWORD PTR tv363[ebp]
	cmp	DWORD PTR [ecx+8], 0
	jne	SHORT $LN8@FindCd
; Line 847
	mov	edx, DWORD PTR _ecd64$70607[ebp]
	push	edx
	mov	ecx, DWORD PTR _cdInfo$[ebp]
	call	?ParseEcd64@CCdInfo@NZip@NArchive@@QAEXPBE@Z ; NArchive::NZip::CCdInfo::ParseEcd64
; Line 848
	mov	eax, DWORD PTR _absEcd64$70606[ebp]
	sub	eax, DWORD PTR _ecd64Offset$70603[ebp]
	mov	ecx, DWORD PTR _absEcd64$70606[ebp+4]
	sbb	ecx, DWORD PTR _ecd64Offset$70603[ebp+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], eax
	mov	DWORD PTR [edx+60], ecx
; Line 849
	mov	DWORD PTR $T71794[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T71794[ebp]
	jmp	$LN24@FindCd
$LN8@FindCd:
; Line 855
	mov	eax, DWORD PTR _absEcd64$70606[ebp]
	cmp	eax, DWORD PTR _ecd64Offset$70603[ebp]
	jne	SHORT $LN31@FindCd
	mov	ecx, DWORD PTR _absEcd64$70606[ebp+4]
	cmp	ecx, DWORD PTR _ecd64Offset$70603[ebp+4]
	je	SHORT $LN7@FindCd
$LN31@FindCd:
; Line 857
	mov	edx, DWORD PTR _cdInfo$[ebp]
	push	edx
	mov	eax, DWORD PTR _ecd64Offset$70603[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _ecd64Offset$70603[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TryEcd64@CInArchive@NZip@NArchive@@AAEJ_KAAUCCdInfo@23@@Z ; NArchive::NZip::CInArchive::TryEcd64
	test	eax, eax
	jne	SHORT $LN7@FindCd
; Line 859
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], 0
	mov	DWORD PTR [edx+60], 0
; Line 860
	mov	DWORD PTR $T71795[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T71795[ebp]
	jmp	$LN24@FindCd
$LN7@FindCd:
; Line 864
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv389[ebp], eax
	mov	ecx, DWORD PTR tv389[ebp]
	mov	edx, DWORD PTR tv389[ebp]
	mov	eax, DWORD PTR [ecx+64]
	or	eax, DWORD PTR [edx+68]
	je	$LN10@FindCd
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	add	edx, DWORD PTR _ecd64Offset$70603[ebp]
	mov	eax, DWORD PTR [ecx+68]
	adc	eax, DWORD PTR _ecd64Offset$70603[ebp+4]
	mov	DWORD PTR tv402[ebp], edx
	mov	DWORD PTR tv402[ebp+4], eax
	mov	ecx, DWORD PTR tv402[ebp]
	cmp	ecx, DWORD PTR _absEcd64$70606[ebp]
	jne	SHORT $LN32@FindCd
	mov	edx, DWORD PTR tv402[ebp+4]
	cmp	edx, DWORD PTR _absEcd64$70606[ebp+4]
	je	SHORT $LN10@FindCd
$LN32@FindCd:
; Line 866
	mov	eax, DWORD PTR _cdInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	add	edx, DWORD PTR _ecd64Offset$70603[ebp]
	mov	eax, DWORD PTR [ecx+68]
	adc	eax, DWORD PTR _ecd64Offset$70603[ebp+4]
	push	eax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TryEcd64@CInArchive@NZip@NArchive@@AAEJ_KAAUCCdInfo@23@@Z ; NArchive::NZip::CInArchive::TryEcd64
	test	eax, eax
	jne	SHORT $LN10@FindCd
; Line 868
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR [ecx+56], eax
	mov	edx, DWORD PTR [edx+68]
	mov	DWORD PTR [ecx+60], edx
; Line 869
	mov	DWORD PTR $T71796[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T71796[ebp]
	jmp	$LN24@FindCd
$LN10@FindCd:
; Line 874
	mov	eax, DWORD PTR _buf$[ebp]
	add	eax, DWORD PTR _i$70581[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	$LN11@FindCd
; Line 876
	mov	ecx, DWORD PTR _buf$[ebp]
	add	ecx, DWORD PTR _i$70581[ebp]
	push	ecx
	mov	ecx, DWORD PTR _cdInfo$[ebp]
	call	?ParseEcd@CCdInfo@NZip@NArchive@@QAEXPBE@Z ; NArchive::NZip::CCdInfo::ParseEcd
; Line 877
	mov	edx, DWORD PTR _bufSize$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _endPosition$[ebp]
	sub	ecx, edx
	mov	edx, DWORD PTR _endPosition$[ebp+4]
	sbb	edx, eax
	mov	eax, DWORD PTR _i$70581[ebp]
	xor	esi, esi
	add	ecx, eax
	adc	edx, esi
	mov	DWORD PTR _absEcdPos$70628[ebp], ecx
	mov	DWORD PTR _absEcdPos$70628[ebp+4], edx
; Line 878
	mov	ecx, DWORD PTR _cdInfo$[ebp]
	mov	edx, DWORD PTR _cdInfo$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	add	eax, DWORD PTR [edx+16]
	mov	ecx, DWORD PTR [ecx+12]
	adc	ecx, DWORD PTR [edx+20]
	mov	DWORD PTR _cdEnd$70629[ebp], eax
	mov	DWORD PTR _cdEnd$70629[ebp+4], ecx
; Line 879
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], 0
	mov	DWORD PTR [edx+60], 0
; Line 880
	mov	eax, DWORD PTR _absEcdPos$70628[ebp]
	cmp	eax, DWORD PTR _cdEnd$70629[ebp]
	jne	SHORT $LN33@FindCd
	mov	ecx, DWORD PTR _absEcdPos$70628[ebp+4]
	cmp	ecx, DWORD PTR _cdEnd$70629[ebp+4]
	je	SHORT $LN2@FindCd
$LN33@FindCd:
; Line 890
	mov	edx, DWORD PTR _absEcdPos$70628[ebp]
	sub	edx, DWORD PTR _cdEnd$70629[ebp]
	mov	eax, DWORD PTR _absEcdPos$70628[ebp+4]
	sbb	eax, DWORD PTR _cdEnd$70629[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], edx
	mov	DWORD PTR [ecx+60], eax
$LN2@FindCd:
; Line 892
	mov	DWORD PTR $T71797[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T71797[ebp]
	jmp	SHORT $LN24@FindCd
$LN11@FindCd:
; Line 895
	cmp	DWORD PTR _i$70581[ebp], 0
	jne	SHORT $LN1@FindCd
; Line 896
	mov	DWORD PTR $T71798[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
	mov	eax, DWORD PTR $T71798[ebp]
	jmp	SHORT $LN24@FindCd
$LN1@FindCd:
; Line 897
	jmp	$LN17@FindCd
; Line 898
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	call	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
$LN24@FindCd:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN38@FindCd
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN38@FindCd:
	DD	2
	DD	$LN37@FindCd
$LN37@FindCd:
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN34@FindCd
	DD	-52					; ffffffccH
	DD	4
	DD	$LN35@FindCd
$LN35@FindCd:
	DB	98					; 00000062H
	DB	121					; 00000079H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN34@FindCd:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z$0:
	lea	ecx, DWORD PTR _byteBuffer$[ebp]
	jmp	??1?$CObjArray@E@@QAE@XZ		; CObjArray<unsigned char>::~CObjArray<unsigned char>
__ehhandler$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-192]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z ENDP ; NArchive::NZip::CInArchive::FindCd
PUBLIC	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
PUBLIC	?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CItemEx>::Add
PUBLIC	?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CItemEx>::Clear
PUBLIC	?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::TryReadCd
EXTRN	?Init@CInBufferBase@@QAEXXZ:PROC		; CInBufferBase::Init
xdata$x	SEGMENT
__unwindtable$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z$0
__ehfuncinfo$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv150 = -176						; size = 4
tv223 = -172						; size = 8
tv185 = -164						; size = 8
tv170 = -156						; size = 4
tv69 = -152						; size = 4
$T71815 = -148						; size = 4
$T71814 = -144						; size = 4
___result_$70724 = -140					; size = 4
___result_$70719 = -136					; size = 4
_cdItem$70718 = -128					; size = 104
___result_$70708 = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_items$ = 8						; size = 4
_cdOffset$ = 12						; size = 8
_cdSize$ = 20						; size = 8
_progress$ = 28						; size = 4
?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z PROC ; NArchive::NZip::CInArchive::TryReadCd
; _this$ = ecx
; Line 902
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 164				; 000000a4H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-176]
	mov	ecx, 41					; 00000029H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 903
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CItemEx>::Clear
; Line 904
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv69[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	mov	esi, esp
	push	eax
	push	0
	mov	ecx, DWORD PTR _cdOffset$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _cdOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	mov	ecx, DWORD PTR tv69[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70708[ebp], eax
	cmp	DWORD PTR ___result_$70708[ebp], 0
	je	SHORT $LN8@TryReadCd
	mov	eax, DWORD PTR ___result_$70708[ebp]
	jmp	$LN9@TryReadCd
$LN8@TryReadCd:
; Line 905
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv170[ebp], ecx
	mov	edx, DWORD PTR tv170[ebp]
	mov	eax, DWORD PTR [edx+48]
	cmp	eax, DWORD PTR _cdOffset$[ebp]
	jne	SHORT $LN14@TryReadCd
	mov	ecx, DWORD PTR tv170[ebp]
	mov	edx, DWORD PTR [ecx+52]
	cmp	edx, DWORD PTR _cdOffset$[ebp+4]
	je	SHORT $LN7@TryReadCd
$LN14@TryReadCd:
; Line 906
	mov	eax, 1
	jmp	$LN9@TryReadCd
$LN7@TryReadCd:
; Line 908
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@CInBufferBase@@QAEXXZ		; CInBufferBase::Init
; Line 909
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 1
$LN6@TryReadCd:
; Line 911
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, DWORD PTR _cdOffset$[ebp]
	mov	eax, DWORD PTR [ecx+52]
	sbb	eax, DWORD PTR _cdOffset$[ebp+4]
	mov	DWORD PTR tv185[ebp], edx
	mov	DWORD PTR tv185[ebp+4], eax
	mov	ecx, DWORD PTR tv185[ebp+4]
	cmp	ecx, DWORD PTR _cdSize$[ebp+4]
	ja	$LN5@TryReadCd
	jb	SHORT $LN15@TryReadCd
	mov	edx, DWORD PTR tv185[ebp]
	cmp	edx, DWORD PTR _cdSize$[ebp]
	jae	$LN5@TryReadCd
$LN15@TryReadCd:
; Line 913
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
	cmp	eax, 33639248				; 02014b50H
	je	SHORT $LN4@TryReadCd
; Line 914
	mov	eax, 1
	jmp	$LN9@TryReadCd
$LN4@TryReadCd:
; Line 915
	lea	ecx, DWORD PTR _cdItem$70718[ebp]
	call	??0CItemEx@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 916
	lea	eax, DWORD PTR _cdItem$70718[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadCdItem@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadCdItem
	mov	DWORD PTR ___result_$70719[ebp], eax
	cmp	DWORD PTR ___result_$70719[ebp], 0
	je	SHORT $LN3@TryReadCd
	mov	ecx, DWORD PTR ___result_$70719[ebp]
	mov	DWORD PTR $T71814[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cdItem$70718[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T71814[ebp]
	jmp	$LN9@TryReadCd
$LN3@TryReadCd:
; Line 917
	lea	edx, DWORD PTR _cdItem$70718[ebp]
	push	edx
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CItemEx>::Add
; Line 918
	cmp	DWORD PTR _progress$[ebp], 0
	je	SHORT $LN2@TryReadCd
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	xor	edx, edx
	mov	ecx, 1
	div	ecx
	test	edx, edx
	jne	SHORT $LN2@TryReadCd
; Line 919
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	xor	edx, edx
	mov	esi, esp
	push	edx
	push	eax
	mov	eax, DWORD PTR _progress$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _progress$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70724[ebp], eax
	cmp	DWORD PTR ___result_$70724[ebp], 0
	je	SHORT $LN2@TryReadCd
	mov	ecx, DWORD PTR ___result_$70724[ebp]
	mov	DWORD PTR $T71815[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cdItem$70718[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T71815[ebp]
	jmp	SHORT $LN9@TryReadCd
$LN2@TryReadCd:
; Line 920
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _cdItem$70718[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	jmp	$LN6@TryReadCd
$LN5@TryReadCd:
; Line 921
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+48]
	sub	eax, DWORD PTR _cdOffset$[ebp]
	mov	ecx, DWORD PTR [edx+52]
	sbb	ecx, DWORD PTR _cdOffset$[ebp+4]
	mov	DWORD PTR tv223[ebp], eax
	mov	DWORD PTR tv223[ebp+4], ecx
	mov	edx, DWORD PTR tv223[ebp]
	cmp	edx, DWORD PTR _cdSize$[ebp]
	jne	SHORT $LN11@TryReadCd
	mov	eax, DWORD PTR tv223[ebp+4]
	cmp	eax, DWORD PTR _cdSize$[ebp+4]
	jne	SHORT $LN11@TryReadCd
	mov	DWORD PTR tv150[ebp], 0
	jmp	SHORT $LN12@TryReadCd
$LN11@TryReadCd:
	mov	DWORD PTR tv150[ebp], 1
$LN12@TryReadCd:
	mov	eax, DWORD PTR tv150[ebp]
$LN9@TryReadCd:
; Line 922
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN19@TryReadCd
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 176				; 000000b0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	1
$LN19@TryReadCd:
	DD	1
	DD	$LN18@TryReadCd
$LN18@TryReadCd:
	DD	-128					; ffffff80H
	DD	104					; 00000068H
	DD	$LN16@TryReadCd
$LN16@TryReadCd:
	DB	99					; 00000063H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z$0:
	lea	ecx, DWORD PTR _cdItem$70718[ebp]
	jmp	??1CItemEx@NZip@NArchive@@QAE@XZ
__ehhandler$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-176]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z ENDP ; NArchive::NZip::CInArchive::TryReadCd
PUBLIC	__$ArrayPad$
PUBLIC	?ReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@AA_K1PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::ReadCd
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv173 = -52						; size = 4
_res$ = -48						; size = 4
___result_$70739 = -44					; size = 4
_cdInfo$ = -36						; size = 24
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_items$ = 8						; size = 4
_cdOffset$ = 12						; size = 4
_cdSize$ = 16						; size = 4
_progress$ = 20						; size = 4
?ReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@AA_K1PAUCProgressVirt@23@@Z PROC ; NArchive::NZip::CInArchive::ReadCd
; _this$ = ecx
; Line 925
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 927
	lea	eax, DWORD PTR _cdInfo$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FindCd@CInArchive@NZip@NArchive@@AAEJAAUCCdInfo@23@@Z ; NArchive::NZip::CInArchive::FindCd
	mov	DWORD PTR ___result_$70739[ebp], eax
	cmp	DWORD PTR ___result_$70739[ebp], 0
	je	SHORT $LN4@ReadCd
	mov	eax, DWORD PTR ___result_$70739[ebp]
	jmp	$LN5@ReadCd
$LN4@ReadCd:
; Line 928
	mov	DWORD PTR _res$[ebp], 1
; Line 929
	mov	ecx, DWORD PTR _cdSize$[ebp]
	mov	edx, DWORD PTR _cdInfo$[ebp+8]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _cdInfo$[ebp+12]
	mov	DWORD PTR [ecx+4], eax
; Line 930
	mov	ecx, DWORD PTR _cdOffset$[ebp]
	mov	edx, DWORD PTR _cdInfo$[ebp+16]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _cdInfo$[ebp+20]
	mov	DWORD PTR [ecx+4], eax
; Line 931
	cmp	DWORD PTR _progress$[ebp], 0
	je	SHORT $LN3@ReadCd
; Line 932
	mov	esi, esp
	mov	ecx, DWORD PTR _cdInfo$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _cdInfo$[ebp]
	push	edx
	mov	eax, DWORD PTR _progress$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _progress$[ebp]
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN3@ReadCd:
; Line 933
	mov	ecx, DWORD PTR _progress$[ebp]
	push	ecx
	mov	edx, DWORD PTR _cdSize$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR [edx]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _cdOffset$[ebp]
	mov	ecx, DWORD PTR [edx+56]
	add	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx+60]
	adc	edx, DWORD PTR [eax+4]
	push	edx
	push	ecx
	mov	eax, DWORD PTR _items$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::TryReadCd
	mov	DWORD PTR _res$[ebp], eax
; Line 934
	cmp	DWORD PTR _res$[ebp], 1
	jne	SHORT $LN2@ReadCd
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv173[ebp], ecx
	mov	edx, DWORD PTR tv173[ebp]
	mov	eax, DWORD PTR tv173[ebp]
	mov	ecx, DWORD PTR [edx+56]
	or	ecx, DWORD PTR [eax+60]
	jne	SHORT $LN2@ReadCd
; Line 936
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	mov	eax, DWORD PTR _cdSize$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _cdOffset$[ebp]
	mov	edx, DWORD PTR [eax+64]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+68]
	adc	eax, DWORD PTR [ecx+4]
	push	eax
	push	edx
	mov	ecx, DWORD PTR _items$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?TryReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K1PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::TryReadCd
	mov	DWORD PTR _res$[ebp], eax
; Line 937
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN2@ReadCd
; Line 938
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR [edx+56], ecx
	mov	eax, DWORD PTR [eax+68]
	mov	DWORD PTR [edx+60], eax
$LN2@ReadCd:
; Line 940
	mov	eax, DWORD PTR _res$[ebp]
$LN5@ReadCd:
; Line 941
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@ReadCd
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN9@ReadCd:
	DD	1
	DD	$LN8@ReadCd
$LN8@ReadCd:
	DD	-36					; ffffffdcH
	DD	24					; 00000018H
	DD	$LN7@ReadCd
$LN7@ReadCd:
	DB	99					; 00000063H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
?ReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@AA_K1PAUCProgressVirt@23@@Z ENDP ; NArchive::NZip::CInArchive::ReadCd
_TEXT	ENDS
PUBLIC	?IsStrangeItem@NZip@NArchive@@YG_NABVCItem@12@@Z ; NArchive::NZip::IsStrangeItem
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv79 = -4						; size = 4
_item$ = 8						; size = 4
?IsStrangeItem@NZip@NArchive@@YG_NABVCItem@12@@Z PROC	; NArchive::NZip::IsStrangeItem
; Line 962
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 963
	mov	ecx, DWORD PTR _item$[ebp]
	add	ecx, 32					; 00000020H
	call	?Len@AString@@QBEIXZ			; AString::Len
	cmp	eax, 16384				; 00004000H
	ja	SHORT $LN3@IsStrangeI
	mov	eax, DWORD PTR _item$[ebp]
	movzx	ecx, WORD PTR [eax+2]
	cmp	ecx, 256				; 00000100H
	jg	SHORT $LN3@IsStrangeI
	mov	DWORD PTR tv79[ebp], 0
	jmp	SHORT $LN4@IsStrangeI
$LN3@IsStrangeI:
	mov	DWORD PTR tv79[ebp], 1
$LN4@IsStrangeI:
	mov	al, BYTE PTR tv79[ebp]
; Line 964
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsStrangeItem@NZip@NArchive@@YG_NABVCItem@12@@Z ENDP	; NArchive::NZip::IsStrangeItem
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
PUBLIC	?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty
PUBLIC	?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::ReadLocals
xdata$x	SEGMENT
__catchsym$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3 DD 08H
	DD	FLAT:??_R0?AVCUnexpectEnd@NZip@NArchive@@@8
	DD	00H
	DD	FLAT:__catch$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0
__tryblocktable$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3
__unwindtable$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
__ehfuncinfo$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv206 = -164						; size = 4
tv205 = -160						; size = 4
tv68 = -153						; size = 1
$T71839 = -152						; size = 4
$T71838 = -148						; size = 4
$T71837 = -144						; size = 4
___result_$70791 = -140					; size = 4
___result_$70781 = -136					; size = 4
_item$70777 = -128					; size = 104
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_items$ = 8						; size = 4
_progress$ = 12						; size = 4
?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z PROC ; NArchive::NZip::CInArchive::ReadLocals
; _this$ = ecx
; Line 968
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 148				; 00000094H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-164]
	mov	ecx, 37					; 00000025H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 969
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CItemEx>::Clear
$LN12@ReadLocals:
; Line 970
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 67324752		; 04034b50H
	jne	$LN11@ReadLocals
; Line 972
	lea	ecx, DWORD PTR _item$70777[ebp]
	call	??0CItemEx@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 973
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, 4
	mov	eax, DWORD PTR [ecx+52]
	sbb	eax, 0
	mov	ecx, DWORD PTR _this$[ebp]
	sub	edx, DWORD PTR [ecx+64]
	sbb	eax, DWORD PTR [ecx+68]
	mov	DWORD PTR _item$70777[ebp+64], edx
	mov	DWORD PTR _item$70777[ebp+68], eax
; Line 976
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 977
	lea	edx, DWORD PTR _item$70777[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadLocalItem@CInArchive@NZip@NArchive@@AAE_NAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItem
; Line 978
	mov	BYTE PTR _item$70777[ebp+92], 1
; Line 979
	lea	ecx, DWORD PTR _item$70777[ebp]
	call	?HasDescriptor@CLocalItem@NZip@NArchive@@QBE_NXZ ; NArchive::NZip::CLocalItem::HasDescriptor
	mov	BYTE PTR tv68[ebp], al
	movzx	eax, BYTE PTR tv68[ebp]
	test	eax, eax
	je	SHORT $LN9@ReadLocals
; Line 980
	lea	ecx, DWORD PTR _item$70777[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadLocalItemDescriptor@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItemDescriptor
; Line 981
	jmp	SHORT $LN8@ReadLocals
$LN9@ReadLocals:
; Line 983
	mov	edx, DWORD PTR _item$70777[ebp+20]
	push	edx
	mov	eax, DWORD PTR _item$70777[ebp+16]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IncreaseRealPosition@CInArchive@NZip@NArchive@@AAEJ_J@Z ; NArchive::NZip::CInArchive::IncreaseRealPosition
	mov	DWORD PTR tv205[ebp], eax
	mov	ecx, DWORD PTR tv205[ebp]
	mov	DWORD PTR ___result_$70781[ebp], ecx
	cmp	DWORD PTR ___result_$70781[ebp], 0
	je	SHORT $LN8@ReadLocals
	mov	edx, DWORD PTR ___result_$70781[ebp]
	mov	DWORD PTR $T71837[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _item$70777[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T71837[ebp]
	jmp	$LN14@ReadLocals
$LN8@ReadLocals:
; Line 985
	lea	eax, DWORD PTR _item$70777[ebp]
	push	eax
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CItemEx>::Add
; Line 986
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
	mov	DWORD PTR tv206[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv206[ebp]
	mov	DWORD PTR [ecx+44], edx
; Line 987
	jmp	SHORT $LN15@ReadLocals
__catch$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0:
; Line 990
	mov	ecx, DWORD PTR _items$[ebp]
	call	?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN5@ReadLocals
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	cmp	eax, 1
	jne	SHORT $LN6@ReadLocals
	push	0
	mov	ecx, DWORD PTR _items$[ebp]
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	push	eax
	call	?IsStrangeItem@NZip@NArchive@@YG_NABVCItem@12@@Z ; NArchive::NZip::IsStrangeItem
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@ReadLocals
$LN5@ReadLocals:
; Line 991
	mov	DWORD PTR $T71838[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN19@ReadLocals
	ret	0
$LN6@ReadLocals:
; Line 992
	push	0
	push	0
	call	__CxxThrowException@8
; Line 993
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, __tryend$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$1
	ret	0
$LN15@ReadLocals:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
__tryend$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$1:
	jmp	SHORT $LN18@ReadLocals
$LN19@ReadLocals:
; Line 991
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _item$70777[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T71838[ebp]
	jmp	$LN14@ReadLocals
$LN18@ReadLocals:
; Line 994
	cmp	DWORD PTR _progress$[ebp], 0
	je	SHORT $LN4@ReadLocals
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	xor	edx, edx
	mov	ecx, 1
	div	ecx
	test	edx, edx
	jne	SHORT $LN4@ReadLocals
; Line 995
	mov	esi, esp
	mov	edx, DWORD PTR _item$70777[ebp+68]
	push	edx
	mov	eax, DWORD PTR _item$70777[ebp+64]
	push	eax
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _progress$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _progress$[ebp]
	mov	edx, DWORD PTR [eax]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70791[ebp], eax
	cmp	DWORD PTR ___result_$70791[ebp], 0
	je	SHORT $LN4@ReadLocals
	mov	eax, DWORD PTR ___result_$70791[ebp]
	mov	DWORD PTR $T71839[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _item$70777[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T71839[ebp]
	jmp	SHORT $LN14@ReadLocals
$LN4@ReadLocals:
; Line 996
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _item$70777[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	jmp	$LN12@ReadLocals
$LN11@ReadLocals:
; Line 998
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	cmp	eax, 1
	jne	SHORT $LN2@ReadLocals
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 33639248		; 02014b50H
	je	SHORT $LN2@ReadLocals
; Line 999
	push	0
	mov	ecx, DWORD PTR _items$[ebp]
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	push	eax
	call	?IsStrangeItem@NZip@NArchive@@YG_NABVCItem@12@@Z ; NArchive::NZip::IsStrangeItem
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN2@ReadLocals
; Line 1000
	mov	eax, 1
	jmp	SHORT $LN14@ReadLocals
$LN2@ReadLocals:
; Line 1001
	xor	eax, eax
$LN14@ReadLocals:
; Line 1002
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN28@ReadLocals
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 164				; 000000a4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	1
$LN28@ReadLocals:
	DD	1
	DD	$LN27@ReadLocals
$LN27@ReadLocals:
	DD	-128					; ffffff80H
	DD	104					; 00000068H
	DD	$LN25@ReadLocals
$LN25@ReadLocals:
	DB	105					; 00000069H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2:
	lea	ecx, DWORD PTR _item$70777[ebp]
	jmp	??1CItemEx@NZip@NArchive@@QAE@XZ
__ehhandler$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-168]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z ENDP ; NArchive::NZip::CInArchive::ReadLocals
PUBLIC	??4?$CBuffer@E@@QAEAAV0@ABV0@@Z			; CBuffer<unsigned char>::operator=
PUBLIC	??0CEcd64@NZip@NArchive@@QAE@XZ			; NArchive::NZip::CEcd64::CEcd64
PUBLIC	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
PUBLIC	??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::CObjectVector<NArchive::NZip::CItemEx>
PUBLIC	?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream
PUBLIC	__$ArrayPad$
PUBLIC	?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::ReadHeaders2
EXTRN	?Free@CInBuffer@@QAEXXZ:PROC			; CInBuffer::Free
EXTRN	?Create@CInBuffer@@QAE_NI@Z:PROC		; CInBuffer::Create
xdata$x	SEGMENT
__catchsym$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$5 DD 08H
	DD	FLAT:??_R0?AVCUnexpectEnd@NZip@NArchive@@@8
	DD	00H
	DD	FLAT:__catch$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0
__tryblocktable$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z DD 01H
	DD	01H
	DD	02H
	DD	01H
	DD	FLAT:__catchsym$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$5
__ehfuncinfo$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$4
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv1160 = -776						; size = 8
tv1127 = -768						; size = 4
tv1126 = -764						; size = 4
tv1116 = -760						; size = 4
tv1115 = -756						; size = 4
tv507 = -752						; size = 4
tv1064 = -748						; size = 4
tv1063 = -744						; size = 4
tv1023 = -740						; size = 8
tv995 = -732						; size = 8
tv987 = -724						; size = 8
tv243 = -716						; size = 4
tv163 = -709						; size = 1
tv148 = -708						; size = 4
tv69 = -704						; size = 4
$T71875 = -700						; size = 4
$T71874 = -696						; size = 4
$T71873 = -692						; size = 4
$T71872 = -688						; size = 4
$T71871 = -684						; size = 4
$T71870 = -680						; size = 4
$T71869 = -676						; size = 4
$T71868 = -672						; size = 4
$T71867 = -668						; size = 4
$T71866 = -664						; size = 4
$T71865 = -660						; size = 4
$T71864 = -656						; size = 4
$T71863 = -652						; size = 4
$T71862 = -648						; size = 4
$T71861 = -644						; size = 4
_item$70942 = -640					; size = 4
_index$70940 = -636					; size = 4
_cdItem$70939 = -632					; size = 4
_i$70935 = -628						; size = 4
_i$70930 = -624						; size = 4
_delta$70929 = -620					; size = 8
_ecd$ = -608						; size = 20
_buf$ = -580						; size = 18
_kBufSize$ = -556					; size = 4
_ecd64RelatOffset$70904 = -552				; size = 8
_buf$70890 = -540					; size = 44
_kBufSize$70889 = -492					; size = 4
_recordSize$70888 = -488				; size = 8
_ecd64AbsOffset$ = -480					; size = 8
_isZip64$ = -469					; size = 1
_ecd64$ = -464						; size = 48
___result_$70878 = -412					; size = 4
___result_$70873 = -408					; size = 4
_cdItem$70872 = -400					; size = 104
___result_$70862 = -292					; size = 4
___result_$70858 = -288					; size = 4
_numCdItems$ = -284					; size = 4
_needSetBase$ = -277					; size = 1
_cdItems$ = -272					; size = 12
_index$70846 = -256					; size = 4
_firstItem$70827 = -248					; size = 104
_res$ = -140						; size = 4
_cdAbsOffset$ = -136					; size = 8
_cdRelatOffset$ = -124					; size = 8
_cdSize$ = -108						; size = 8
___result_$70818 = -96					; size = 4
_ecd$70815 = -88					; size = 20
_buf$70814 = -60					; size = 18
_kBufSize$70813 = -36					; size = 4
_localsWereRead$ = -30					; size = 1
_needReadCd$ = -29					; size = 1
___result_$70805 = -28					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_items$ = 8						; size = 4
_progress$ = 12						; size = 4
?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z PROC ; NArchive::NZip::CInArchive::ReadHeaders2
; _this$ = ecx
; Line 1009
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 760				; 000002f8H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-776]
	mov	ecx, 190				; 000000beH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1010
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CItemEx>::Clear
; Line 1014
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv69[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR [eax+48]
	push	edx
	mov	eax, DWORD PTR tv69[ebp]
	push	eax
	mov	ecx, DWORD PTR tv69[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70805[ebp], eax
	cmp	DWORD PTR ___result_$70805[ebp], 0
	je	SHORT $LN69@ReadHeader
	mov	eax, DWORD PTR ___result_$70805[ebp]
	jmp	$LN70@ReadHeader
$LN69@ReadHeader:
; Line 1016
	push	32768					; 00008000H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Create@CInBuffer@@QAE_NI@Z		; CInBuffer::Create
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN68@ReadHeader
; Line 1017
	mov	eax, -2147024882			; 8007000eH
	jmp	$LN70@ReadHeader
$LN68@ReadHeader:
; Line 1018
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream
; Line 1020
	mov	BYTE PTR _needReadCd$[ebp], 1
; Line 1021
	mov	BYTE PTR _localsWereRead$[ebp], 0
; Line 1022
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+44], 101010256		; 06054b50H
	jne	$LN67@ReadHeader
; Line 1027
	mov	DWORD PTR _kBufSize$70813[ebp], 18	; 00000012H
; Line 1029
	push	18					; 00000012H
	lea	eax, DWORD PTR _buf$70814[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes
; Line 1031
	lea	ecx, DWORD PTR _buf$70814[ebp]
	push	ecx
	lea	ecx, DWORD PTR _ecd$70815[ebp]
	call	?Parse@CEcd@NZip@NArchive@@QAEXPBE@Z	; NArchive::NZip::CEcd::Parse
; Line 1034
	lea	ecx, DWORD PTR _ecd$70815[ebp]
	call	?IsEmptyArc@CEcd@NZip@NArchive@@QAE_NXZ	; NArchive::NZip::CEcd::IsEmptyArc
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN66@ReadHeader
; Line 1035
	mov	eax, 1
	jmp	$LN70@ReadHeader
$LN66@ReadHeader:
; Line 1037
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+64]
	mov	DWORD PTR [eax+56], edx
	mov	ecx, DWORD PTR [ecx+68]
	mov	DWORD PTR [eax+60], ecx
; Line 1038
	mov	BYTE PTR _needReadCd$[ebp], 0
; Line 1039
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+120], 1
; Line 1040
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv148[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 48					; 00000030H
	mov	esi, esp
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+72]
	add	edx, 4
	mov	eax, DWORD PTR [ecx+76]
	adc	eax, 0
	push	eax
	push	edx
	mov	ecx, DWORD PTR tv148[ebp]
	push	ecx
	mov	edx, DWORD PTR tv148[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70818[ebp], eax
	cmp	DWORD PTR ___result_$70818[ebp], 0
	je	SHORT $LN67@ReadHeader
	mov	eax, DWORD PTR ___result_$70818[ebp]
	jmp	$LN70@ReadHeader
$LN67@ReadHeader:
; Line 1043
	mov	DWORD PTR _cdSize$[ebp], 0
	mov	DWORD PTR _cdSize$[ebp+4], 0
	mov	DWORD PTR _cdRelatOffset$[ebp], 0
	mov	DWORD PTR _cdRelatOffset$[ebp+4], 0
	mov	DWORD PTR _cdAbsOffset$[ebp], 0
	mov	DWORD PTR _cdAbsOffset$[ebp+4], 0
; Line 1044
	mov	DWORD PTR _res$[ebp], 0
; Line 1046
	movzx	edx, BYTE PTR _needReadCd$[ebp]
	test	edx, edx
	je	$LN64@ReadHeader
; Line 1048
	lea	ecx, DWORD PTR _firstItem$70827[ebp]
	call	??0CItemEx@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1052
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 1053
	lea	eax, DWORD PTR _firstItem$70827[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadLocalItem@CInArchive@NZip@NArchive@@AAE_NAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadLocalItem
	mov	BYTE PTR tv163[ebp], al
	movzx	ecx, BYTE PTR tv163[ebp]
	test	ecx, ecx
	jne	SHORT $LN62@ReadHeader
; Line 1054
	mov	DWORD PTR $T71861[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _firstItem$70827[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T71861[ebp]
	jmp	$LN70@ReadHeader
$LN62@ReadHeader:
; Line 1055
	jmp	SHORT $LN72@ReadHeader
__catch$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0:
; Line 1058
	mov	DWORD PTR $T71862[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, $LN78@ReadHeader
	ret	0
; Line 1059
	mov	eax, $LN72@ReadHeader
	ret	0
$LN72@ReadHeader:
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	jmp	SHORT $LN77@ReadHeader
$LN78@ReadHeader:
; Line 1058
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _firstItem$70827[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T71862[ebp]
	jmp	$LN70@ReadHeader
$LN77@ReadHeader:
; Line 1061
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+120], 1
; Line 1062
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	lea	ecx, DWORD PTR _cdSize$[ebp]
	push	ecx
	lea	edx, DWORD PTR _cdRelatOffset$[ebp]
	push	edx
	mov	eax, DWORD PTR _items$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadCd@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@AA_K1PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::ReadCd
	mov	DWORD PTR _res$[ebp], eax
; Line 1063
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN61@ReadHeader
; Line 1064
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax
$LN61@ReadHeader:
; Line 1067
	cmp	DWORD PTR _res$[ebp], 1
	je	SHORT $LN60@ReadHeader
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN60@ReadHeader
; Line 1068
	mov	edx, DWORD PTR _res$[ebp]
	mov	DWORD PTR $T71863[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _firstItem$70827[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR $T71863[ebp]
	jmp	$LN70@ReadHeader
$LN60@ReadHeader:
; Line 1070
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN59@ReadHeader
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	test	eax, eax
	jne	SHORT $LN59@ReadHeader
; Line 1071
	mov	DWORD PTR _res$[ebp], 1
$LN59@ReadHeader:
; Line 1073
	cmp	DWORD PTR _res$[ebp], 0
	jne	$LN58@ReadHeader
; Line 1076
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+72]
	sub	edx, DWORD PTR [ecx+56]
	mov	eax, DWORD PTR [eax+76]
	sbb	eax, DWORD PTR [ecx+60]
	mov	DWORD PTR _firstItem$70827[ebp+64], edx
	mov	DWORD PTR _firstItem$70827[ebp+68], eax
; Line 1077
	mov	ecx, DWORD PTR _firstItem$70827[ebp+68]
	push	ecx
	mov	edx, DWORD PTR _firstItem$70827[ebp+64]
	push	edx
	mov	eax, DWORD PTR _items$[ebp]
	push	eax
	call	?FindItem@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K@Z ; NArchive::NZip::FindItem
	mov	DWORD PTR _index$70846[ebp], eax
; Line 1078
	cmp	DWORD PTR _index$70846[ebp], -1
	jne	SHORT $LN57@ReadHeader
; Line 1079
	mov	DWORD PTR _res$[ebp], 1
	jmp	SHORT $LN56@ReadHeader
$LN57@ReadHeader:
; Line 1080
	mov	ecx, DWORD PTR _index$70846[ebp]
	push	ecx
	mov	ecx, DWORD PTR _items$[ebp]
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	push	eax
	lea	edx, DWORD PTR _firstItem$70827[ebp]
	push	edx
	call	?AreItemsEqual@NZip@NArchive@@YG_NABVCItemEx@12@0@Z ; NArchive::NZip::AreItemsEqual
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN56@ReadHeader
; Line 1081
	mov	DWORD PTR _res$[ebp], 1
$LN56@ReadHeader:
; Line 1082
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+104], 1
; Line 1083
	push	0
	mov	ecx, DWORD PTR _items$[ebp]
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR [edx+96], ecx
	mov	eax, DWORD PTR [eax+68]
	mov	DWORD PTR [edx+100], eax
$LN58@ReadHeader:
; Line 1085
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _firstItem$70827[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
$LN64@ReadHeader:
; Line 1087
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::CObjectVector<NArchive::NZip::CItemEx>
	mov	DWORD PTR __$EHRec$[ebp+12], 3
; Line 1089
	mov	BYTE PTR _needSetBase$[ebp], 0
; Line 1090
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	mov	DWORD PTR _numCdItems$[ebp], eax
; Line 1092
	cmp	DWORD PTR _res$[ebp], 1
	jne	$LN54@ReadHeader
; Line 1095
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CItemEx>::Clear
; Line 1096
	mov	BYTE PTR _localsWereRead$[ebp], 1
; Line 1097
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+40], 0
; Line 1098
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR [edx+56], ecx
	mov	eax, DWORD PTR [eax+68]
	mov	DWORD PTR [edx+60], eax
; Line 1099
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv243[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	mov	esi, esp
	push	ecx
	push	0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR [edx+72]
	push	ecx
	mov	edx, DWORD PTR tv243[ebp]
	push	edx
	mov	eax, DWORD PTR tv243[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70858[ebp], eax
	cmp	DWORD PTR ___result_$70858[ebp], 0
	je	SHORT $LN53@ReadHeader
	mov	eax, DWORD PTR ___result_$70858[ebp]
	mov	DWORD PTR $T71864[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
	mov	eax, DWORD PTR $T71864[ebp]
	jmp	$LN70@ReadHeader
$LN53@ReadHeader:
; Line 1100
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+44], eax
; Line 1102
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	mov	eax, DWORD PTR _items$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadLocals@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::ReadLocals
	mov	DWORD PTR ___result_$70862[ebp], eax
	cmp	DWORD PTR ___result_$70862[ebp], 0
	je	SHORT $LN52@ReadHeader
	mov	ecx, DWORD PTR ___result_$70862[ebp]
	mov	DWORD PTR $T71865[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
	mov	eax, DWORD PTR $T71865[ebp]
	jmp	$LN70@ReadHeader
$LN52@ReadHeader:
; Line 1104
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+44], 33639248		; 02014b50H
	je	SHORT $LN51@ReadHeader
; Line 1106
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	sub	ecx, 4
	mov	edx, DWORD PTR [eax+52]
	sbb	edx, 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx
; Line 1107
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+126], 1
; Line 1108
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+122], 1
; Line 1109
	mov	DWORD PTR $T71866[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
	mov	eax, DWORD PTR $T71866[ebp]
	jmp	$LN70@ReadHeader
$LN51@ReadHeader:
; Line 1111
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 1
; Line 1112
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@CInBufferBase@@QAEXXZ		; CInBufferBase::Init
; Line 1113
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, 4
	mov	eax, DWORD PTR [ecx+52]
	sbb	eax, 0
	mov	DWORD PTR _cdAbsOffset$[ebp], edx
	mov	DWORD PTR _cdAbsOffset$[ebp+4], eax
$LN50@ReadHeader:
; Line 1116
	lea	ecx, DWORD PTR _cdItem$70872[ebp]
	call	??0CItemEx@NZip@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+12], 4
; Line 1117
	lea	ecx, DWORD PTR _cdItem$70872[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadCdItem@CInArchive@NZip@NArchive@@AAEJAAVCItemEx@23@@Z ; NArchive::NZip::CInArchive::ReadCdItem
	mov	DWORD PTR ___result_$70873[ebp], eax
	cmp	DWORD PTR ___result_$70873[ebp], 0
	je	SHORT $LN48@ReadHeader
	mov	edx, DWORD PTR ___result_$70873[ebp]
	mov	DWORD PTR $T71867[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _cdItem$70872[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
	mov	eax, DWORD PTR $T71867[ebp]
	jmp	$LN70@ReadHeader
$LN48@ReadHeader:
; Line 1118
	lea	eax, DWORD PTR _cdItem$70872[ebp]
	push	eax
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CItemEx>::Add
; Line 1119
	cmp	DWORD PTR _progress$[ebp], 0
	je	$LN47@ReadHeader
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	xor	edx, edx
	mov	ecx, 1
	div	ecx
	test	edx, edx
	jne	SHORT $LN47@ReadHeader
; Line 1120
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	xor	edx, edx
	mov	esi, esp
	push	edx
	push	eax
	mov	eax, DWORD PTR _progress$[ebp]
	mov	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _progress$[ebp]
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result_$70878[ebp], eax
	cmp	DWORD PTR ___result_$70878[ebp], 0
	je	SHORT $LN47@ReadHeader
	mov	ecx, DWORD PTR ___result_$70878[ebp]
	mov	DWORD PTR $T71868[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _cdItem$70872[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
	mov	eax, DWORD PTR $T71868[ebp]
	jmp	$LN70@ReadHeader
$LN47@ReadHeader:
; Line 1121
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], eax
; Line 1122
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 33639248		; 02014b50H
	je	SHORT $LN45@ReadHeader
; Line 1123
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _cdItem$70872[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	jmp	SHORT $LN49@ReadHeader
$LN45@ReadHeader:
; Line 1124
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _cdItem$70872[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	jmp	$LN50@ReadHeader
$LN49@ReadHeader:
; Line 1126
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, 4
	mov	eax, DWORD PTR [ecx+52]
	sbb	eax, 0
	sub	edx, DWORD PTR _cdAbsOffset$[ebp]
	sbb	eax, DWORD PTR _cdAbsOffset$[ebp+4]
	mov	DWORD PTR _cdSize$[ebp], edx
	mov	DWORD PTR _cdSize$[ebp+4], eax
; Line 1127
	mov	BYTE PTR _needSetBase$[ebp], 1
; Line 1128
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	mov	DWORD PTR _numCdItems$[ebp], eax
; Line 1130
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN54@ReadHeader
; Line 1132
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+104], 1
; Line 1133
	push	0
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+64]
	mov	DWORD PTR [ecx+96], edx
	mov	eax, DWORD PTR [eax+68]
	mov	DWORD PTR [ecx+100], eax
$LN54@ReadHeader:
; Line 1137
	lea	ecx, DWORD PTR _ecd64$[ebp]
	call	??0CEcd64@NZip@NArchive@@QAE@XZ		; NArchive::NZip::CEcd64::CEcd64
; Line 1138
	mov	BYTE PTR _isZip64$[ebp], 0
; Line 1139
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	sub	edx, 4
	mov	eax, DWORD PTR [ecx+52]
	sbb	eax, 0
	mov	DWORD PTR _ecd64AbsOffset$[ebp], edx
	mov	DWORD PTR _ecd64AbsOffset$[ebp+4], eax
; Line 1140
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 101075792		; 06064b50H
	jne	$LN43@ReadHeader
; Line 1142
	mov	BYTE PTR _isZip64$[ebp], 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _isZip64$[ebp]
	mov	BYTE PTR [edx+121], al
; Line 1143
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ ; NArchive::NZip::CInArchive::ReadUInt64
	mov	DWORD PTR _recordSize$70888[ebp], eax
	mov	DWORD PTR _recordSize$70888[ebp+4], edx
; Line 1145
	mov	DWORD PTR _kBufSize$70889[ebp], 44	; 0000002cH
; Line 1147
	push	44					; 0000002cH
	lea	ecx, DWORD PTR _buf$70890[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes
; Line 1148
	lea	edx, DWORD PTR _buf$70890[ebp]
	push	edx
	lea	ecx, DWORD PTR _ecd64$[ebp]
	call	?Parse@CEcd64@NZip@NArchive@@QAEXPBE@Z	; NArchive::NZip::CEcd64::Parse
; Line 1150
	mov	eax, DWORD PTR _recordSize$70888[ebp]
	sub	eax, 44					; 0000002cH
	mov	ecx, DWORD PTR _recordSize$70888[ebp+4]
	sbb	ecx, 0
	push	ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Skip64@CInArchive@NZip@NArchive@@AAEX_K@Z ; NArchive::NZip::CInArchive::Skip64
; Line 1151
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], eax
; Line 1153
	cmp	DWORD PTR _ecd64$[ebp+4], 0
	jne	SHORT $LN41@ReadHeader
	cmp	DWORD PTR _ecd64$[ebp+8], 0
	je	SHORT $LN42@ReadHeader
$LN41@ReadHeader:
; Line 1154
	mov	DWORD PTR $T71869[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
	mov	eax, DWORD PTR $T71869[ebp]
	jmp	$LN70@ReadHeader
$LN42@ReadHeader:
; Line 1156
	movzx	eax, BYTE PTR _needSetBase$[ebp]
	test	eax, eax
	je	SHORT $LN40@ReadHeader
; Line 1158
	mov	ecx, DWORD PTR _cdAbsOffset$[ebp]
	sub	ecx, DWORD PTR _ecd64$[ebp+40]
	mov	edx, DWORD PTR _cdAbsOffset$[ebp+4]
	sbb	edx, DWORD PTR _ecd64$[ebp+44]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	DWORD PTR [eax+60], edx
; Line 1159
	mov	ecx, DWORD PTR _ecd64$[ebp+40]
	mov	DWORD PTR _cdRelatOffset$[ebp], ecx
	mov	edx, DWORD PTR _ecd64$[ebp+44]
	mov	DWORD PTR _cdRelatOffset$[ebp+4], edx
; Line 1160
	mov	BYTE PTR _needSetBase$[ebp], 0
$LN40@ReadHeader:
; Line 1167
	mov	eax, DWORD PTR _numCdItems$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv987[ebp], eax
	mov	DWORD PTR tv987[ebp+4], ecx
	mov	edx, DWORD PTR _ecd64$[ebp+16]
	cmp	edx, DWORD PTR tv987[ebp]
	jne	SHORT $LN38@ReadHeader
	mov	eax, DWORD PTR _ecd64$[ebp+20]
	cmp	eax, DWORD PTR tv987[ebp+4]
	jne	SHORT $LN38@ReadHeader
	mov	ecx, DWORD PTR _numCdItems$[ebp]
	xor	edx, edx
	mov	DWORD PTR tv995[ebp], ecx
	mov	DWORD PTR tv995[ebp+4], edx
	mov	eax, DWORD PTR _ecd64$[ebp+24]
	cmp	eax, DWORD PTR tv995[ebp]
	jne	SHORT $LN38@ReadHeader
	mov	ecx, DWORD PTR _ecd64$[ebp+28]
	cmp	ecx, DWORD PTR tv995[ebp+4]
	jne	SHORT $LN38@ReadHeader
	mov	edx, DWORD PTR _ecd64$[ebp+32]
	cmp	edx, DWORD PTR _cdSize$[ebp]
	jne	SHORT $LN38@ReadHeader
	mov	eax, DWORD PTR _ecd64$[ebp+36]
	cmp	eax, DWORD PTR _cdSize$[ebp+4]
	jne	SHORT $LN38@ReadHeader
	mov	ecx, DWORD PTR _ecd64$[ebp+40]
	cmp	ecx, DWORD PTR _cdRelatOffset$[ebp]
	jne	SHORT $LN81@ReadHeader
	mov	edx, DWORD PTR _ecd64$[ebp+44]
	cmp	edx, DWORD PTR _cdRelatOffset$[ebp+4]
	je	SHORT $LN43@ReadHeader
$LN81@ReadHeader:
	mov	ecx, DWORD PTR _items$[ebp]
	call	?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN43@ReadHeader
$LN38@ReadHeader:
; Line 1168
	mov	DWORD PTR $T71870[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
	mov	eax, DWORD PTR $T71870[ebp]
	jmp	$LN70@ReadHeader
$LN43@ReadHeader:
; Line 1170
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+44], 117853008		; 07064b50H
	jne	$LN37@ReadHeader
; Line 1172
	movzx	edx, BYTE PTR _isZip64$[ebp]
	test	edx, edx
	jne	SHORT $LN36@ReadHeader
; Line 1173
	mov	DWORD PTR $T71871[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
	mov	eax, DWORD PTR $T71871[ebp]
	jmp	$LN70@ReadHeader
$LN36@ReadHeader:
; Line 1174
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
; Line 1175
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt64@CInArchive@NZip@NArchive@@AAE_KXZ ; NArchive::NZip::CInArchive::ReadUInt64
	mov	DWORD PTR _ecd64RelatOffset$70904[ebp], eax
	mov	DWORD PTR _ecd64RelatOffset$70904[ebp+4], edx
; Line 1176
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
; Line 1177
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	add	ecx, DWORD PTR _ecd64RelatOffset$70904[ebp]
	mov	edx, DWORD PTR [eax+60]
	adc	edx, DWORD PTR _ecd64RelatOffset$70904[ebp+4]
	mov	DWORD PTR tv1023[ebp], ecx
	mov	DWORD PTR tv1023[ebp+4], edx
	mov	eax, DWORD PTR _ecd64AbsOffset$[ebp]
	cmp	eax, DWORD PTR tv1023[ebp]
	jne	SHORT $LN82@ReadHeader
	mov	ecx, DWORD PTR _ecd64AbsOffset$[ebp+4]
	cmp	ecx, DWORD PTR tv1023[ebp+4]
	je	SHORT $LN35@ReadHeader
$LN82@ReadHeader:
; Line 1178
	mov	DWORD PTR $T71872[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
	mov	eax, DWORD PTR $T71872[ebp]
	jmp	$LN70@ReadHeader
$LN35@ReadHeader:
; Line 1179
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadUInt32@CInArchive@NZip@NArchive@@AAEIXZ ; NArchive::NZip::CInArchive::ReadUInt32
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+44], eax
$LN37@ReadHeader:
; Line 1181
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+44], 101010256		; 06054b50H
	je	SHORT $LN34@ReadHeader
; Line 1182
	mov	DWORD PTR $T71873[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
	mov	eax, DWORD PTR $T71873[ebp]
	jmp	$LN70@ReadHeader
$LN34@ReadHeader:
; Line 1184
	mov	DWORD PTR _kBufSize$[ebp], 18		; 00000012H
; Line 1186
	push	18					; 00000012H
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SafeReadBytes@CInArchive@NZip@NArchive@@AAEXPAXI@Z ; NArchive::NZip::CInArchive::SafeReadBytes
; Line 1188
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	lea	ecx, DWORD PTR _ecd$[ebp]
	call	?Parse@CEcd@NZip@NArchive@@QAEXPBE@Z	; NArchive::NZip::CEcd::Parse
; Line 1190
	movzx	eax, BYTE PTR _isZip64$[ebp]
	test	eax, eax
	je	SHORT $LN32@ReadHeader
	movzx	ecx, WORD PTR _ecd$[ebp]
	cmp	ecx, 65535				; 0000ffffH
	je	SHORT $LN33@ReadHeader
$LN32@ReadHeader:
	movzx	edx, WORD PTR _ecd$[ebp]
	mov	DWORD PTR _ecd64$[ebp+4], edx
$LN33@ReadHeader:
; Line 1191
	movzx	eax, BYTE PTR _isZip64$[ebp]
	test	eax, eax
	je	SHORT $LN30@ReadHeader
	movzx	ecx, WORD PTR _ecd$[ebp+2]
	cmp	ecx, 65535				; 0000ffffH
	je	SHORT $LN31@ReadHeader
$LN30@ReadHeader:
	movzx	edx, WORD PTR _ecd$[ebp+2]
	mov	DWORD PTR _ecd64$[ebp+8], edx
$LN31@ReadHeader:
; Line 1192
	movzx	eax, BYTE PTR _isZip64$[ebp]
	test	eax, eax
	je	SHORT $LN28@ReadHeader
	movzx	ecx, WORD PTR _ecd$[ebp+4]
	cmp	ecx, 65535				; 0000ffffH
	je	SHORT $LN29@ReadHeader
$LN28@ReadHeader:
	movzx	eax, WORD PTR _ecd$[ebp+4]
	cdq
	mov	DWORD PTR _ecd64$[ebp+16], eax
	mov	DWORD PTR _ecd64$[ebp+20], edx
$LN29@ReadHeader:
; Line 1193
	movzx	edx, BYTE PTR _isZip64$[ebp]
	test	edx, edx
	je	SHORT $LN26@ReadHeader
	movzx	eax, WORD PTR _ecd$[ebp+6]
	cmp	eax, 65535				; 0000ffffH
	je	SHORT $LN27@ReadHeader
$LN26@ReadHeader:
	movzx	eax, WORD PTR _ecd$[ebp+6]
	cdq
	mov	DWORD PTR _ecd64$[ebp+24], eax
	mov	DWORD PTR _ecd64$[ebp+28], edx
$LN27@ReadHeader:
; Line 1194
	movzx	ecx, BYTE PTR _isZip64$[ebp]
	test	ecx, ecx
	je	SHORT $LN24@ReadHeader
	cmp	DWORD PTR _ecd$[ebp+8], -1
	je	SHORT $LN25@ReadHeader
$LN24@ReadHeader:
	mov	edx, DWORD PTR _ecd$[ebp+8]
	xor	eax, eax
	mov	DWORD PTR _ecd64$[ebp+32], edx
	mov	DWORD PTR _ecd64$[ebp+36], eax
$LN25@ReadHeader:
; Line 1195
	movzx	ecx, BYTE PTR _isZip64$[ebp]
	test	ecx, ecx
	je	SHORT $LN22@ReadHeader
	cmp	DWORD PTR _ecd$[ebp+12], -1
	je	SHORT $LN23@ReadHeader
$LN22@ReadHeader:
	mov	edx, DWORD PTR _ecd$[ebp+12]
	xor	eax, eax
	mov	DWORD PTR _ecd64$[ebp+40], edx
	mov	DWORD PTR _ecd64$[ebp+44], eax
$LN23@ReadHeader:
; Line 1197
	movzx	ecx, BYTE PTR _needSetBase$[ebp]
	test	ecx, ecx
	je	SHORT $LN21@ReadHeader
; Line 1199
	mov	edx, DWORD PTR _cdAbsOffset$[ebp]
	sub	edx, DWORD PTR _ecd64$[ebp+40]
	mov	eax, DWORD PTR _cdAbsOffset$[ebp+4]
	sbb	eax, DWORD PTR _ecd64$[ebp+44]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+56], edx
	mov	DWORD PTR [ecx+60], eax
; Line 1200
	mov	edx, DWORD PTR _ecd64$[ebp+40]
	mov	DWORD PTR _cdRelatOffset$[ebp], edx
	mov	eax, DWORD PTR _ecd64$[ebp+44]
	mov	DWORD PTR _cdRelatOffset$[ebp+4], eax
; Line 1201
	mov	BYTE PTR _needSetBase$[ebp], 0
$LN21@ReadHeader:
; Line 1204
	movzx	ecx, BYTE PTR _localsWereRead$[ebp]
	test	ecx, ecx
	je	$LN20@ReadHeader
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv1063[ebp], edx
	mov	DWORD PTR tv1064[ebp], eax
	mov	ecx, DWORD PTR tv1063[ebp]
	mov	edx, DWORD PTR tv1064[ebp]
	mov	eax, DWORD PTR [ecx+56]
	cmp	eax, DWORD PTR [edx+64]
	jne	SHORT $LN83@ReadHeader
	mov	ecx, DWORD PTR tv1063[ebp]
	mov	edx, DWORD PTR tv1064[ebp]
	mov	eax, DWORD PTR [ecx+60]
	cmp	eax, DWORD PTR [edx+68]
	je	$LN20@ReadHeader
$LN83@ReadHeader:
; Line 1206
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+64]
	sub	eax, DWORD PTR [edx+56]
	mov	ecx, DWORD PTR [ecx+68]
	sbb	ecx, DWORD PTR [edx+60]
	mov	DWORD PTR _delta$70929[ebp], eax
	mov	DWORD PTR _delta$70929[ebp+4], ecx
; Line 1207
	mov	DWORD PTR _i$70930[ebp], 0
	jmp	SHORT $LN19@ReadHeader
$LN18@ReadHeader:
	mov	edx, DWORD PTR _i$70930[ebp]
	add	edx, 1
	mov	DWORD PTR _i$70930[ebp], edx
$LN19@ReadHeader:
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	cmp	DWORD PTR _i$70930[ebp], eax
	jae	SHORT $LN20@ReadHeader
; Line 1208
	mov	eax, DWORD PTR _i$70930[ebp]
	push	eax
	mov	ecx, DWORD PTR _items$[ebp]
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	add	eax, 64					; 00000040H
	mov	DWORD PTR tv507[ebp], eax
	mov	ecx, DWORD PTR tv507[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _delta$70929[ebp]
	mov	eax, DWORD PTR [ecx+4]
	adc	eax, DWORD PTR _delta$70929[ebp+4]
	mov	ecx, DWORD PTR tv507[ebp]
	mov	DWORD PTR [ecx], edx
	mov	DWORD PTR [ecx+4], eax
	jmp	SHORT $LN18@ReadHeader
$LN20@ReadHeader:
; Line 1214
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	$LN16@ReadHeader
; Line 1216
	mov	DWORD PTR _i$70935[ebp], 0
	jmp	SHORT $LN15@ReadHeader
$LN14@ReadHeader:
	mov	eax, DWORD PTR _i$70935[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70935[ebp], eax
$LN15@ReadHeader:
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	cmp	DWORD PTR _i$70935[ebp], eax
	jae	$LN16@ReadHeader
; Line 1218
	mov	ecx, DWORD PTR _i$70935[ebp]
	push	ecx
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	mov	DWORD PTR _cdItem$70939[ebp], eax
; Line 1219
	mov	edx, DWORD PTR _cdItem$70939[ebp]
	mov	eax, DWORD PTR [edx+68]
	push	eax
	mov	ecx, DWORD PTR [edx+64]
	push	ecx
	mov	edx, DWORD PTR _items$[ebp]
	push	edx
	call	?FindItem@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K@Z ; NArchive::NZip::FindItem
	mov	DWORD PTR _index$70940[ebp], eax
; Line 1220
	cmp	DWORD PTR _index$70940[ebp], -1
	jne	SHORT $LN12@ReadHeader
; Line 1222
	mov	eax, DWORD PTR _cdItem$70939[ebp]
	push	eax
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z ; CObjectVector<NArchive::NZip::CItemEx>::Add
; Line 1223
	jmp	SHORT $LN14@ReadHeader
$LN12@ReadHeader:
; Line 1225
	mov	ecx, DWORD PTR _index$70940[ebp]
	push	ecx
	mov	ecx, DWORD PTR _items$[ebp]
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	mov	DWORD PTR _item$70942[ebp], eax
; Line 1232
	mov	edx, DWORD PTR _cdItem$70939[ebp]
	add	edx, 32					; 00000020H
	push	edx
	mov	eax, DWORD PTR _item$70942[ebp]
	add	eax, 32					; 00000020H
	push	eax
	call	??9@YG_NABVAString@@0@Z			; operator!=
	movzx	ecx, al
	test	ecx, ecx
	jne	$LN10@ReadHeader
	mov	edx, DWORD PTR _item$70942[ebp]
	mov	eax, DWORD PTR _cdItem$70939[ebp]
	mov	DWORD PTR tv1115[ebp], edx
	mov	DWORD PTR tv1116[ebp], eax
	mov	ecx, DWORD PTR tv1115[ebp]
	mov	edx, DWORD PTR tv1116[ebp]
	mov	eax, DWORD PTR [ecx+16]
	cmp	eax, DWORD PTR [edx+16]
	jne	$LN10@ReadHeader
	mov	ecx, DWORD PTR tv1115[ebp]
	mov	edx, DWORD PTR tv1116[ebp]
	mov	eax, DWORD PTR [ecx+20]
	cmp	eax, DWORD PTR [edx+20]
	jne	SHORT $LN10@ReadHeader
	mov	ecx, DWORD PTR _item$70942[ebp]
	mov	edx, DWORD PTR _cdItem$70939[ebp]
	mov	DWORD PTR tv1126[ebp], ecx
	mov	DWORD PTR tv1127[ebp], edx
	mov	eax, DWORD PTR tv1126[ebp]
	mov	ecx, DWORD PTR tv1127[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN10@ReadHeader
	mov	eax, DWORD PTR tv1126[ebp]
	mov	ecx, DWORD PTR tv1127[ebp]
	mov	edx, DWORD PTR [eax+12]
	cmp	edx, DWORD PTR [ecx+12]
	jne	SHORT $LN10@ReadHeader
	mov	eax, DWORD PTR _cdItem$70939[ebp]
	push	eax
	mov	ecx, DWORD PTR _item$70942[ebp]
	push	ecx
	call	?FlagsAreSame@NZip@NArchive@@YG_NABVCItem@12@0@Z ; NArchive::NZip::FlagsAreSame
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN10@ReadHeader
	mov	eax, DWORD PTR _item$70942[ebp]
	mov	ecx, DWORD PTR _cdItem$70939[ebp]
	mov	edx, DWORD PTR [eax+28]
	cmp	edx, DWORD PTR [ecx+28]
	je	SHORT $LN11@ReadHeader
$LN10@ReadHeader:
; Line 1233
	jmp	$LN14@ReadHeader
$LN11@ReadHeader:
; Line 1237
	mov	eax, DWORD PTR _cdItem$70939[ebp]
	mov	cx, WORD PTR [eax+56]
	mov	edx, DWORD PTR _item$70942[ebp]
	mov	WORD PTR [edx+56], cx
; Line 1238
	mov	eax, DWORD PTR _cdItem$70939[ebp]
	add	eax, 72					; 00000048H
	push	eax
	mov	ecx, DWORD PTR _item$70942[ebp]
	add	ecx, 72					; 00000048H
	call	??4CExtraBlock@NZip@NArchive@@QAEAAU012@ABU012@@Z
; Line 1239
	mov	ecx, DWORD PTR _item$70942[ebp]
	mov	edx, DWORD PTR _cdItem$70939[ebp]
	mov	ax, WORD PTR [edx+58]
	mov	WORD PTR [ecx+58], ax
; Line 1240
	mov	ecx, DWORD PTR _item$70942[ebp]
	mov	edx, DWORD PTR _cdItem$70939[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR [ecx+60], eax
; Line 1241
	mov	ecx, DWORD PTR _cdItem$70939[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	ecx, DWORD PTR _item$70942[ebp]
	add	ecx, 84					; 00000054H
	call	??4?$CBuffer@E@@QAEAAV0@ABV0@@Z		; CBuffer<unsigned char>::operator=
; Line 1242
	mov	edx, DWORD PTR _item$70942[ebp]
	mov	eax, DWORD PTR _cdItem$70939[ebp]
	mov	cl, BYTE PTR [eax+93]
	mov	BYTE PTR [edx+93], cl
; Line 1243
	jmp	$LN14@ReadHeader
$LN16@ReadHeader:
; Line 1246
	cmp	DWORD PTR _ecd64$[ebp+4], 0
	jne	SHORT $LN8@ReadHeader
	cmp	DWORD PTR _ecd64$[ebp+8], 0
	je	SHORT $LN9@ReadHeader
$LN8@ReadHeader:
; Line 1247
	mov	DWORD PTR $T71874[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
	mov	eax, DWORD PTR $T71874[ebp]
	jmp	$LN70@ReadHeader
$LN9@ReadHeader:
; Line 1249
	movzx	edx, BYTE PTR _isZip64$[ebp]
	test	edx, edx
	je	SHORT $LN7@ReadHeader
; Line 1251
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	xor	ecx, ecx
	mov	DWORD PTR tv1160[ebp], eax
	mov	DWORD PTR tv1160[ebp+4], ecx
	mov	edx, DWORD PTR _ecd64$[ebp+16]
	cmp	edx, DWORD PTR tv1160[ebp]
	jne	SHORT $LN84@ReadHeader
	mov	eax, DWORD PTR _ecd64$[ebp+20]
	cmp	eax, DWORD PTR tv1160[ebp+4]
	je	SHORT $LN6@ReadHeader
$LN84@ReadHeader:
; Line 1252
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+122], 1
$LN6@ReadHeader:
; Line 1254
	jmp	SHORT $LN5@ReadHeader
$LN7@ReadHeader:
; Line 1258
	movzx	edx, WORD PTR _numCdItems$[ebp]
	movzx	eax, WORD PTR _ecd64$[ebp+16]
	cmp	eax, edx
	jne	SHORT $LN3@ReadHeader
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	movzx	ecx, ax
	movzx	edx, WORD PTR _ecd64$[ebp+16]
	cmp	edx, ecx
	je	SHORT $LN5@ReadHeader
$LN3@ReadHeader:
; Line 1259
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+122], 1
$LN5@ReadHeader:
; Line 1262
	movzx	ecx, WORD PTR _ecd$[ebp+16]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 108				; 0000006cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadBuffer@CInArchive@NZip@NArchive@@AAEXAAV?$CBuffer@E@@I@Z ; NArchive::NZip::CInArchive::ReadBuffer
; Line 1263
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+40], 0
; Line 1264
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@CInBuffer@@QAEXXZ			; CInBuffer::Free
; Line 1270
	movzx	ecx, WORD PTR _numCdItems$[ebp]
	movzx	edx, WORD PTR _ecd64$[ebp+24]
	cmp	edx, ecx
	jne	SHORT $LN1@ReadHeader
	mov	eax, DWORD PTR _cdSize$[ebp]
	cmp	DWORD PTR _ecd64$[ebp+32], eax
	jne	SHORT $LN1@ReadHeader
	mov	ecx, DWORD PTR _cdRelatOffset$[ebp]
	cmp	DWORD PTR _ecd64$[ebp+40], ecx
	je	SHORT $LN2@ReadHeader
	mov	ecx, DWORD PTR _items$[ebp]
	call	?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN2@ReadHeader
$LN1@ReadHeader:
; Line 1273
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+122], 1
$LN2@ReadHeader:
; Line 1277
	mov	DWORD PTR $T71875[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	lea	ecx, DWORD PTR _cdItems$[ebp]
	call	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
	mov	eax, DWORD PTR $T71875[ebp]
$LN70@ReadHeader:
; Line 1278
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN98@ReadHeader
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 776				; 00000308H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN98@ReadHeader:
	DD	11					; 0000000bH
	DD	$LN97@ReadHeader
$LN97@ReadHeader:
	DD	-60					; ffffffc4H
	DD	18					; 00000012H
	DD	$LN85@ReadHeader
	DD	-88					; ffffffa8H
	DD	20					; 00000014H
	DD	$LN86@ReadHeader
	DD	-108					; ffffff94H
	DD	8
	DD	$LN87@ReadHeader
	DD	-124					; ffffff84H
	DD	8
	DD	$LN88@ReadHeader
	DD	-248					; ffffff08H
	DD	104					; 00000068H
	DD	$LN89@ReadHeader
	DD	-272					; fffffef0H
	DD	12					; 0000000cH
	DD	$LN90@ReadHeader
	DD	-400					; fffffe70H
	DD	104					; 00000068H
	DD	$LN91@ReadHeader
	DD	-464					; fffffe30H
	DD	48					; 00000030H
	DD	$LN92@ReadHeader
	DD	-540					; fffffde4H
	DD	44					; 0000002cH
	DD	$LN93@ReadHeader
	DD	-580					; fffffdbcH
	DD	18					; 00000012H
	DD	$LN94@ReadHeader
	DD	-608					; fffffda0H
	DD	20					; 00000014H
	DD	$LN95@ReadHeader
$LN95@ReadHeader:
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	100					; 00000064H
	DB	0
$LN94@ReadHeader:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN93@ReadHeader:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN92@ReadHeader:
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	100					; 00000064H
	DB	54					; 00000036H
	DB	52					; 00000034H
	DB	0
$LN91@ReadHeader:
	DB	99					; 00000063H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN90@ReadHeader:
	DB	99					; 00000063H
	DB	100					; 00000064H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	115					; 00000073H
	DB	0
$LN89@ReadHeader:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN88@ReadHeader:
	DB	99					; 00000063H
	DB	100					; 00000064H
	DB	82					; 00000052H
	DB	101					; 00000065H
	DB	108					; 0000006cH
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
$LN87@ReadHeader:
	DB	99					; 00000063H
	DB	100					; 00000064H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN86@ReadHeader:
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	100					; 00000064H
	DB	0
$LN85@ReadHeader:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2:
	lea	ecx, DWORD PTR _firstItem$70827[ebp]
	jmp	??1CItemEx@NZip@NArchive@@QAE@XZ
__unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3:
	lea	ecx, DWORD PTR _cdItems$[ebp]
	jmp	??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
__unwindfunclet$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$4:
	lea	ecx, DWORD PTR _cdItem$70872[ebp]
	jmp	??1CItemEx@NZip@NArchive@@QAE@XZ
__ehhandler$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-780]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z ENDP ; NArchive::NZip::CInArchive::ReadHeaders2
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z PROC ; CInBufferBase::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\inbuffer.h
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ENDP ; CInBufferBase::SetStream
_TEXT	ENDS
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CEcd64@NZip@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CEcd64@NZip@NArchive@@QAE@XZ PROC			; NArchive::NZip::CEcd64::CEcd64, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\zip\zipin.cpp
; Line 67
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	48					; 00000030H
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CEcd64@NZip@NArchive@@QAE@XZ ENDP			; NArchive::NZip::CEcd64::CEcd64
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_position$70761 = -20					; size = 8
_index$70760 = -12					; size = 4
_right$ = -8						; size = 4
_left$ = -4						; size = 4
_items$ = 8						; size = 4
_offset$ = 12						; size = 8
?FindItem@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K@Z PROC ; NArchive::NZip::FindItem
; Line 944
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 945
	mov	DWORD PTR _left$[ebp], 0
	mov	ecx, DWORD PTR _items$[ebp]
	call	?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CItemEx>::Size
	mov	DWORD PTR _right$[ebp], eax
$LN6@FindItem:
; Line 948
	mov	eax, DWORD PTR _left$[ebp]
	cmp	eax, DWORD PTR _right$[ebp]
	jb	SHORT $LN4@FindItem
; Line 949
	or	eax, -1
	jmp	SHORT $LN7@FindItem
$LN4@FindItem:
; Line 950
	mov	ecx, DWORD PTR _left$[ebp]
	add	ecx, DWORD PTR _right$[ebp]
	shr	ecx, 1
	mov	DWORD PTR _index$70760[ebp], ecx
; Line 951
	mov	edx, DWORD PTR _index$70760[ebp]
	push	edx
	mov	ecx, DWORD PTR _items$[ebp]
	call	??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
	mov	ecx, DWORD PTR [eax+64]
	mov	DWORD PTR _position$70761[ebp], ecx
	mov	edx, DWORD PTR [eax+68]
	mov	DWORD PTR _position$70761[ebp+4], edx
; Line 952
	mov	eax, DWORD PTR _offset$[ebp]
	cmp	eax, DWORD PTR _position$70761[ebp]
	jne	SHORT $LN3@FindItem
	mov	ecx, DWORD PTR _offset$[ebp+4]
	cmp	ecx, DWORD PTR _position$70761[ebp+4]
	jne	SHORT $LN3@FindItem
; Line 953
	mov	eax, DWORD PTR _index$70760[ebp]
	jmp	SHORT $LN7@FindItem
$LN3@FindItem:
; Line 954
	mov	edx, DWORD PTR _offset$[ebp+4]
	cmp	edx, DWORD PTR _position$70761[ebp+4]
	ja	SHORT $LN2@FindItem
	jb	SHORT $LN9@FindItem
	mov	eax, DWORD PTR _offset$[ebp]
	cmp	eax, DWORD PTR _position$70761[ebp]
	jae	SHORT $LN2@FindItem
$LN9@FindItem:
; Line 955
	mov	ecx, DWORD PTR _index$70760[ebp]
	mov	DWORD PTR _right$[ebp], ecx
; Line 956
	jmp	SHORT $LN1@FindItem
$LN2@FindItem:
; Line 957
	mov	edx, DWORD PTR _index$70760[ebp]
	add	edx, 1
	mov	DWORD PTR _left$[ebp], edx
$LN1@FindItem:
; Line 958
	jmp	SHORT $LN6@FindItem
$LN7@FindItem:
; Line 959
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?FindItem@NZip@NArchive@@YGJABV?$CObjectVector@VCItemEx@NZip@NArchive@@@@_K@Z ENDP ; NArchive::NZip::FindItem
_TEXT	ENDS
PUBLIC	?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::ReadHeaders
xdata$x	SEGMENT
__unwindtable$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z DD 00H
	DD	00H
	DD	01H
	DD	03H
	DD	FLAT:__catchsym$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$4
__ehfuncinfo$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__catchsym$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$4 DD 09H
	DD	FLAT:??_R0?AUCInBufferException@@@8
	DD	0ffffffe0H
	DD	FLAT:__catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0
	DD	09H
	DD	FLAT:??_R0?AVCUnexpectEnd@NZip@NArchive@@@8
	DD	00H
	DD	FLAT:__catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$1
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv89 = -44						; size = 4
$T71915 = -40						; size = 4
_e$70976 = -32						; size = 4
_res$ = -24						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -16						; size = 16
_items$ = 8						; size = 4
_progress$ = 12						; size = 4
?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z PROC ; NArchive::NZip::CInArchive::ReadHeaders
; _this$ = ecx
; Line 1281
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 28					; 0000001cH
	push	ebx
	push	esi
	push	edi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
	mov	DWORD PTR _this$[ebp], ecx
; Line 1284
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 1285
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _items$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadHeaders2@CInArchive@NZip@NArchive@@AAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z ; NArchive::NZip::CInArchive::ReadHeaders2
	mov	DWORD PTR tv89[ebp], eax
	mov	edx, DWORD PTR tv89[ebp]
	mov	DWORD PTR _res$[ebp], edx
; Line 1286
	jmp	SHORT $LN5@ReadHeader@2
__catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$0:
; Line 1287
	mov	eax, DWORD PTR _e$70976[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _res$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, __tryend$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3
	ret	0
__catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$1:
; Line 1290
	mov	ecx, DWORD PTR _items$[ebp]
	call	?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN1@ReadHeader@2
; Line 1291
	mov	DWORD PTR $T71915[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN12@ReadHeader@2
	ret	0
$LN1@ReadHeader@2:
; Line 1292
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+125], 1
; Line 1293
	mov	DWORD PTR _res$[ebp], 0
; Line 1294
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN14@ReadHeader@2
	ret	0
__catch$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$2:
; Line 1297
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+40], 0
; Line 1298
	push	0
	push	0
	call	__CxxThrowException@8
; Line 1299
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN16@ReadHeader@2
	ret	0
$LN5@ReadHeader@2:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN15@ReadHeader@2
$LN16@ReadHeader@2:
	jmp	SHORT __tryend$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3
$LN15@ReadHeader@2:
	jmp	SHORT $LN13@ReadHeader@2
$LN14@ReadHeader@2:
; Line 1294
	jmp	SHORT __tryend$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3
$LN13@ReadHeader@2:
	jmp	SHORT __tryend$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3
$LN12@ReadHeader@2:
; Line 1291
	mov	eax, DWORD PTR $T71915[ebp]
	jmp	SHORT $LN4@ReadHeader@2
__tryend$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z$3:
; Line 1300
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	mov	DWORD PTR [edx+80], ecx
	mov	eax, DWORD PTR [eax+52]
	mov	DWORD PTR [edx+84], eax
; Line 1301
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+40], 0
; Line 1302
	mov	eax, DWORD PTR _res$[ebp]
$LN4@ReadHeader@2:
; Line 1303
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@ReadHeader@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN24@ReadHeader@2:
	DD	1
	DD	$LN23@ReadHeader@2
$LN23@ReadHeader@2:
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN21@ReadHeader@2
$LN21@ReadHeader@2:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-48]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReadHeaders@CInArchive@NZip@NArchive@@QAEJAAV?$CObjectVector@VCItemEx@NZip@NArchive@@@@PAUCProgressVirt@23@@Z ENDP ; NArchive::NZip::CInArchive::ReadHeaders
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach
PUBLIC	?Init@CLimitedSequentialInStream@@QAEX_K@Z	; CLimitedSequentialInStream::Init
PUBLIC	?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??0CLimitedSequentialInStream@@QAE@XZ		; CLimitedSequentialInStream::CLimitedSequentialInStream
PUBLIC	?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z ; NArchive::NZip::CInArchive::CreateLimitedStream
EXTRN	??2@YAPAXI@Z:PROC				; operator new
xdata$x	SEGMENT
__unwindtable$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z$1
__ehfuncinfo$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv83 = -52						; size = 4
tv71 = -48						; size = 4
$T71946 = -44						; size = 4
$T71943 = -40						; size = 4
$T71942 = -36						; size = 4
_stream$ = -28						; size = 4
_streamSpec$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_position$ = 8						; size = 8
_size$ = 16						; size = 8
?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z PROC ; NArchive::NZip::CInArchive::CreateLimitedStream
; _this$ = ecx
; Line 1306
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1307
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T71943[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T71943[ebp], 0
	je	SHORT $LN3@CreateLimi
	mov	ecx, DWORD PTR $T71943[ebp]
	call	??0CLimitedSequentialInStream@@QAE@XZ
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@CreateLimi
$LN3@CreateLimi:
	mov	DWORD PTR tv71[ebp], 0
$LN4@CreateLimi:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T71942[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T71942[ebp]
	mov	DWORD PTR _streamSpec$[ebp], ecx
; Line 1308
	mov	edx, DWORD PTR _streamSpec$[ebp]
	push	edx
	lea	ecx, DWORD PTR _stream$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 1309
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv83[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+56]
	add	ecx, DWORD PTR _position$[ebp]
	mov	edx, DWORD PTR [eax+60]
	adc	edx, DWORD PTR _position$[ebp+4]
	push	edx
	push	ecx
	mov	eax, DWORD PTR tv83[ebp]
	push	eax
	mov	ecx, DWORD PTR tv83[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 1310
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 128				; 00000080H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	push	eax
	mov	ecx, DWORD PTR _streamSpec$[ebp]
	call	?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ; CLimitedSequentialInStream::SetStream
; Line 1311
	mov	ecx, DWORD PTR _size$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _streamSpec$[ebp]
	call	?Init@CLimitedSequentialInStream@@QAEX_K@Z ; CLimitedSequentialInStream::Init
; Line 1312
	lea	ecx, DWORD PTR _stream$[ebp]
	call	?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach
	mov	DWORD PTR $T71946[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _stream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T71946[ebp]
; Line 1313
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@CreateLimi
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	2
$LN10@CreateLimi:
	DD	1
	DD	$LN9@CreateLimi
$LN9@CreateLimi:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN7@CreateLimi
$LN7@CreateLimi:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z$0:
	mov	eax, DWORD PTR $T71943[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z$1:
	lea	ecx, DWORD PTR _stream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-52]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateLimitedStream@CInArchive@NZip@NArchive@@QAEPAUISequentialInStream@@_K0@Z ENDP ; NArchive::NZip::CInArchive::CreateLimitedStream
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z PROC ; CLimitedSequentialInStream::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CLimitedSequentialInStream@@QAEXPAUISequentialInStream@@@Z ENDP ; CLimitedSequentialInStream::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CLimitedSequentialInStream@@QAEX_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_streamSize$ = 8					; size = 8
?Init@CLimitedSequentialInStream@@QAEX_K@Z PROC		; CLimitedSequentialInStream::Init, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 24
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _streamSize$[ebp]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _streamSize$[ebp+4]
	mov	DWORD PTR [eax+20], edx
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
	mov	DWORD PTR [eax+28], 0
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+32], 0
; Line 27
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CLimitedSequentialInStream@@QAEX_K@Z ENDP		; CLimitedSequentialInStream::Init
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??_7CLimitedSequentialInStream@@6B@		; CLimitedSequentialInStream::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??_R4CLimitedSequentialInStream@@6B@		; CLimitedSequentialInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCLimitedSequentialInStream@@@8		; CLimitedSequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3CLimitedSequentialInStream@@8		; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CLimitedSequentialInStream@@8		; CLimitedSequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CLimitedSequentialInStream@@8	; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z ; CLimitedSequentialInStream::QueryInterface
PUBLIC	?AddRef@CLimitedSequentialInStream@@UAGKXZ	; CLimitedSequentialInStream::AddRef
PUBLIC	?Release@CLimitedSequentialInStream@@UAGKXZ	; CLimitedSequentialInStream::Release
EXTRN	?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z:PROC ; CLimitedSequentialInStream::Read
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CLimitedSequentialInStream@@8 DD FLAT:??_R0?AVCLimitedSequentialInStream@@@8 ; CLimitedSequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R2CLimitedSequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@CLimitedSequentialInStream@@8 ; CLimitedSequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CLimitedSequentialInStream@@8
rdata$r	SEGMENT
??_R3CLimitedSequentialInStream@@8 DD 00H		; CLimitedSequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCLimitedSequentialInStream@@@8
_DATA	SEGMENT
??_R0?AVCLimitedSequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; CLimitedSequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCLimitedSequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CLimitedSequentialInStream@@6B@
rdata$r	SEGMENT
??_R4CLimitedSequentialInStream@@6B@ DD 00H		; CLimitedSequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCLimitedSequentialInStream@@@8
	DD	FLAT:??_R3CLimitedSequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7CLimitedSequentialInStream@@6B@
CONST	SEGMENT
??_7CLimitedSequentialInStream@@6B@ DD FLAT:??_R4CLimitedSequentialInStream@@6B@ ; CLimitedSequentialInStream::`vftable'
	DD	FLAT:?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CLimitedSequentialInStream@@UAGKXZ
	DD	FLAT:?Release@CLimitedSequentialInStream@@UAGKXZ
	DD	FLAT:?Read@CLimitedSequentialInStream@@UAGJPAXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CLimitedSequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CLimitedSequentialInStream@@QAE@XZ PROC		; CLimitedSequentialInStream::CLimitedSequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CLimitedSequentialInStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CLimitedSequentialInStream@@QAE@XZ ENDP		; CLimitedSequentialInStream::CLimitedSequentialInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_ISequentialInStream:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CLimitedSequentialInStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\limitedstreams.h
; Line 29
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter
$LN3@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CLimitedSequentialInStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CLimitedSequentialInStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CLimitedSequentialInStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CLimitedSequentialInStream@@UAGKXZ PROC		; CLimitedSequentialInStream::AddRef, COMDAT
; Line 29
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CLimitedSequentialInStream@@UAGKXZ ENDP		; CLimitedSequentialInStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCLimitedSequentialInStream@@QAEPAXI@Z	; CLimitedSequentialInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CLimitedSequentialInStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T71971 = -8						; size = 4
$T71970 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CLimitedSequentialInStream@@UAGKXZ PROC	; CLimitedSequentialInStream::Release, COMDAT
; Line 29
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T71971[ebp], edx
	mov	eax, DWORD PTR $T71971[ebp]
	mov	DWORD PTR $T71970[ebp], eax
	cmp	DWORD PTR $T71970[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T71970[ebp]
	call	??_GCLimitedSequentialInStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CLimitedSequentialInStream@@UAGKXZ ENDP	; CLimitedSequentialInStream::Release
_TEXT	ENDS
PUBLIC	??1CLimitedSequentialInStream@@QAE@XZ		; CLimitedSequentialInStream::~CLimitedSequentialInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCLimitedSequentialInStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCLimitedSequentialInStream@@QAEPAXI@Z PROC		; CLimitedSequentialInStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CLimitedSequentialInStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCLimitedSequentialInStream@@QAEPAXI@Z ENDP		; CLimitedSequentialInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CLimitedSequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CLimitedSequentialInStream@@QAE@XZ PROC		; CLimitedSequentialInStream::~CLimitedSequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CLimitedSequentialInStream@@QAE@XZ ENDP		; CLimitedSequentialInStream::~CLimitedSequentialInStream
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z PROC ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ENDP ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_pt$ = -8						; size = 4
_this$ = -4						; size = 4
?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::Detach, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pt$[ebp], ecx
; Line 47
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 48
	mov	eax, DWORD PTR _pt$[ebp]
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::Detach
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ PROC		; CMyComPtr<IInStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ENDP		; CMyComPtr<IInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z PROC ; CMyComPtr<IInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@3
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@3:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@3
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@3:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ENDP ; CMyComPtr<IInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Free@?$CBuffer@E@@QAEXXZ
_TEXT	SEGMENT
$T72007 = -8						; size = 4
_this$ = -4						; size = 4
?Free@?$CBuffer@E@@QAEXXZ PROC				; CBuffer<unsigned char>::Free, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 16
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN1@Free
; Line 18
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T72007[ebp], edx
	mov	eax, DWORD PTR $T72007[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 19
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN1@Free:
; Line 21
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 0
; Line 22
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Free@?$CBuffer@E@@QAEXXZ ENDP				; CBuffer<unsigned char>::Free
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T72012 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72012[ebp], ecx
	mov	edx, DWORD PTR $T72012[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QAEPAEXZ PROC				; CBuffer<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QAEPAEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Alloc@?$CBuffer@E@@QAEXI@Z
_TEXT	SEGMENT
$T72017 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?Alloc@?$CBuffer@E@@QAEXI@Z PROC			; CBuffer<unsigned char>::Alloc, COMDAT
; _this$ = ecx
; Line 44
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	je	SHORT $LN3@Alloc
; Line 47
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@?$CBuffer@E@@QAEXXZ		; CBuffer<unsigned char>::Free
; Line 48
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN3@Alloc
; Line 50
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72017[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T72017[ebp]
	mov	DWORD PTR [eax], ecx
; Line 51
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN3@Alloc:
; Line 54
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Alloc@?$CBuffer@E@@QAEXI@Z ENDP			; CBuffer<unsigned char>::Alloc
_TEXT	ENDS
PUBLIC	?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z		; CBuffer<unsigned char>::CopyFrom
PUBLIC	??B?$CBuffer@E@@QBEPBEXZ			; CBuffer<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CBuffer@E@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
??4?$CBuffer@E@@QAEAAV0@ABV0@@Z PROC			; CBuffer<unsigned char>::operator=, COMDAT
; _this$ = ecx
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 91
	mov	eax, DWORD PTR _buffer$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	je	SHORT $LN1@operator@4
; Line 92
	mov	ecx, DWORD PTR _buffer$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	ecx, DWORD PTR _buffer$[ebp]
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z	; CBuffer<unsigned char>::CopyFrom
$LN1@operator@4:
; Line 93
	mov	eax, DWORD PTR _this$[ebp]
; Line 94
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CBuffer@E@@QAEAAV0@ABV0@@Z ENDP			; CBuffer<unsigned char>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QBEPBEXZ PROC				; CBuffer<unsigned char>::operator unsigned char const *, COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QBEPBEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char const *
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
_TEXT	ENDS
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z	; NArchive::NZip::CExtraSubBlock::CExtraSubBlock
PUBLIC	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
PUBLIC	?Reserve@?$CRecordVector@PAX@@QAEXI@Z		; CRecordVector<void *>::Reserve
PUBLIC	?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z$0
__ehfuncinfo$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
_TEXT	SEGMENT
tv84 = -36						; size = 4
$T72028 = -32						; size = 4
$T72027 = -28						; size = 4
_i$71089 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=, COMDAT
; _this$ = ecx
; Line 430
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 431
	mov	eax, DWORD PTR _v$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN4@operator@5
; Line 432
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN5@operator@5
$LN4@operator@5:
; Line 433
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear
; Line 434
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 435
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Reserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::Reserve
; Line 436
	mov	DWORD PTR _i$71089[ebp], 0
	jmp	SHORT $LN3@operator@5
$LN2@operator@5:
	mov	edx, DWORD PTR _i$71089[ebp]
	add	edx, 1
	mov	DWORD PTR _i$71089[ebp], edx
$LN3@operator@5:
	mov	eax, DWORD PTR _i$71089[ebp]
	cmp	eax, DWORD PTR _size$[ebp]
	jae	SHORT $LN1@operator@5
; Line 437
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72028[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72028[ebp], 0
	je	SHORT $LN7@operator@5
	mov	ecx, DWORD PTR _i$71089[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T72028[ebp]
	call	??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv84[ebp], eax
	jmp	SHORT $LN8@operator@5
$LN7@operator@5:
	mov	DWORD PTR tv84[ebp], 0
$LN8@operator@5:
	mov	edx, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T72027[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T72027[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@operator@5
$LN1@operator@5:
; Line 438
	mov	eax, DWORD PTR _this$[ebp]
$LN5@operator@5:
; Line 439
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z$0:
	mov	eax, DWORD PTR $T72028[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??4?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEAAV0@ABV0@@Z ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator=
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T72045 = -24						; size = 4
$T72044 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72045[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72045[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T72045[ebp]
	call	??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T72044[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T72044[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z$0:
	mov	eax, DWORD PTR $T72045[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEIABUCExtraSubBlock@NZip@NArchive@@@Z ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Add
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z	; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T72058 = -28						; size = 4
$T72057 = -24						; size = 4
_i$71111 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71111[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$71111[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$71111[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71111[ebp], eax
	mov	ecx, DWORD PTR _i$71111[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72058[ebp], edx
	mov	eax, DWORD PTR $T72058[ebp]
	mov	DWORD PTR $T72057[ebp], eax
	cmp	DWORD PTR $T72057[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T72057[ebp]
	call	??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::~CObjectVector<NArchive::NZip::CExtraSubBlock>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T72071 = -16						; size = 4
$T72070 = -12						; size = 4
_i$71120 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71120[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$71120[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$71120[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71120[ebp], eax
	mov	ecx, DWORD PTR _i$71120[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72071[ebp], edx
	mov	eax, DWORD PTR $T72071[ebp]
	mov	DWORD PTR $T72070[ebp], eax
	cmp	DWORD PTR $T72070[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T72070[ebp]
	call	??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAEXXZ ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray@E@@QAE@I@Z
_TEXT	SEGMENT
$T72076 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$CObjArray@E@@QAE@I@Z PROC				; CObjArray<unsigned char>::CObjArray<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CObjArray
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72076[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T72076[ebp]
	mov	DWORD PTR [edx], eax
$LN2@CObjArray:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CObjArray@E@@QAE@I@Z ENDP				; CObjArray<unsigned char>::CObjArray<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray@E@@QAE@XZ
_TEXT	SEGMENT
$T72079 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray@E@@QAE@XZ PROC				; CObjArray<unsigned char>::~CObjArray<unsigned char>, COMDAT
; _this$ = ecx
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72079[ebp], ecx
	mov	edx, DWORD PTR $T72079[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray@E@@QAE@XZ ENDP				; CObjArray<unsigned char>::~CObjArray<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@E@@QAEPAEXZ PROC				; CObjArray<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@E@@QAEPAEXZ ENDP				; CObjArray<unsigned char>::operator unsigned char *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::NZip::CItemEx>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::NZip::CItemEx>::Size
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ PROC ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBE_NXZ ENDP ; CObjectVector<NArchive::NZip::CItemEx>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CItemEx>::CObjectVector<NArchive::NZip::CItemEx>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CItemEx>::CObjectVector<NArchive::NZip::CItemEx>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z PROC ; CObjectVector<NArchive::NZip::CItemEx>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QBEABVCItemEx@NZip@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z PROC ; CObjectVector<NArchive::NZip::CItemEx>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEAAVCItemEx@NZip@NArchive@@I@Z ENDP ; CObjectVector<NArchive::NZip::CItemEx>::operator[]
_TEXT	ENDS
PUBLIC	??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z		; NArchive::NZip::CItemEx::CItemEx
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T72096 = -24						; size = 4
$T72095 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z PROC ; CObjectVector<NArchive::NZip::CItemEx>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	104					; 00000068H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72096[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T72096[ebp], 0
	je	SHORT $LN3@Add@2
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T72096[ebp]
	call	??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add@2
$LN3@Add@2:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add@2:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T72095[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T72095[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z$0:
	mov	eax, DWORD PTR $T72096[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEIABVCItemEx@NZip@NArchive@@@Z ENDP ; CObjectVector<NArchive::NZip::CItemEx>::Add
PUBLIC	??_GCItemEx@NZip@NArchive@@QAEPAXI@Z		; NArchive::NZip::CItemEx::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T72109 = -28						; size = 4
$T72108 = -24						; size = 4
_i$71162 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71162[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$71162[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$71162[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71162[ebp], eax
	mov	ecx, DWORD PTR _i$71162[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72109[ebp], edx
	mov	eax, DWORD PTR $T72109[ebp]
	mov	DWORD PTR $T72108[ebp], eax
	cmp	DWORD PTR $T72108[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T72108[ebp]
	call	??_GCItemEx@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::NZip::CItemEx>::~CObjectVector<NArchive::NZip::CItemEx>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T72122 = -16						; size = 4
$T72121 = -12						; size = 4
_i$71171 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ PROC ; CObjectVector<NArchive::NZip::CItemEx>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$71171[ebp], eax
$LN2@Clear@2:
	cmp	DWORD PTR _i$71171[ebp], 0
	je	SHORT $LN1@Clear@2
; Line 501
	mov	eax, DWORD PTR _i$71171[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$71171[ebp], eax
	mov	ecx, DWORD PTR _i$71171[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T72122[ebp], edx
	mov	eax, DWORD PTR $T72122[ebp]
	mov	DWORD PTR $T72121[ebp], eax
	cmp	DWORD PTR $T72121[ebp], 0
	je	SHORT $LN5@Clear@2
	push	1
	mov	ecx, DWORD PTR $T72121[ebp]
	call	??_GCItemEx@NZip@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@2
$LN5@Clear@2:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@2:
	jmp	SHORT $LN2@Clear@2
$LN1@Clear@2:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@VCItemEx@NZip@NArchive@@@@QAEXXZ ENDP ; CObjectVector<NArchive::NZip::CItemEx>::Clear
_TEXT	ENDS
PUBLIC	??0?$CBuffer@E@@QAE@ABV0@@Z			; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z PROC	; NArchive::NZip::CExtraSubBlock::CExtraSubBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0?$CBuffer@E@@QAE@ABV0@@Z		; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z ENDP	; NArchive::NZip::CExtraSubBlock::CExtraSubBlock
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z PROC	; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CExtraSubBlock@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCExtraSubBlock@NZip@NArchive@@QAEPAXI@Z ENDP	; NArchive::NZip::CExtraSubBlock::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CItem@NZip@NArchive@@QAE@ABV012@@Z		; NArchive::NZip::CItem::CItem
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z PROC		; NArchive::NZip::CItemEx::CItemEx, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CItem@NZip@NArchive@@QAE@ABV012@@Z
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+96]
	mov	DWORD PTR [ecx+96], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CItemEx@NZip@NArchive@@QAE@ABV012@@Z ENDP		; NArchive::NZip::CItemEx::CItemEx
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCItemEx@NZip@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCItemEx@NZip@NArchive@@QAEPAXI@Z PROC		; NArchive::NZip::CItemEx::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CItemEx@NZip@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCItemEx@NZip@NArchive@@QAEPAXI@Z ENDP		; NArchive::NZip::CItemEx::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z	; NArchive::NZip::CExtraBlock::CExtraBlock
PUBLIC	??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z	; NArchive::NZip::CLocalItem::CLocalItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CItem@NZip@NArchive@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1
__ehfuncinfo$??0CItem@NZip@NArchive@@QAE@ABV012@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CItem@NZip@NArchive@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CItem@NZip@NArchive@@QAE@ABV012@@Z PROC		; NArchive::NZip::CItem::CItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+56]
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+56], dx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	ax, WORD PTR [edx+58]
	mov	WORD PTR [ecx+58], ax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+60]
	mov	DWORD PTR [ecx+60], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+64]
	mov	DWORD PTR [ecx+64], eax
	mov	edx, DWORD PTR [edx+68]
	mov	DWORD PTR [ecx+68], edx
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 72					; 00000048H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	call	??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 84					; 00000054H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??0?$CBuffer@E@@QAE@ABV0@@Z		; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+92]
	mov	BYTE PTR [edx+92], cl
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cl, BYTE PTR [eax+93]
	mov	BYTE PTR [edx+93], cl
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CLocalItem@NZip@NArchive@@QAE@XZ
__unwindfunclet$??0CItem@NZip@NArchive@@QAE@ABV012@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 72					; 00000048H
	jmp	??1CExtraBlock@NZip@NArchive@@QAE@XZ
__ehhandler$??0CItem@NZip@NArchive@@QAE@ABV012@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CItem@NZip@NArchive@@QAE@ABV012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CItem@NZip@NArchive@@QAE@ABV012@@Z ENDP		; NArchive::NZip::CItem::CItem
EXTRN	??0AString@@QAE@ABV0@@Z:PROC			; AString::AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0
__ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z PROC		; NArchive::NZip::CLocalItem::CLocalItem, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dx, WORD PTR [ecx+2]
	mov	WORD PTR [eax+2], dx
	mov	eax, DWORD PTR ___that$[ebp]
	mov	cx, WORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	WORD PTR [edx+4], cx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR [eax+8], edx
	mov	ecx, DWORD PTR [ecx+12]
	mov	DWORD PTR [eax+12], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR [edx+16], ecx
	mov	eax, DWORD PTR [eax+20]
	mov	DWORD PTR [edx+20], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+24]
	mov	DWORD PTR [ecx+24], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	DWORD PTR [ecx+28], eax
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 32					; 00000020H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 44					; 0000002cH
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 44					; 0000002cH
	call	??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CLocalItem@NZip@NArchive@@QAE@ABV012@@Z ENDP		; NArchive::NZip::CLocalItem::CLocalItem
PUBLIC	??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z PROC	; NArchive::NZip::CExtraBlock::CExtraBlock, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CExtraBlock@NZip@NArchive@@QAE@ABU012@@Z ENDP	; NArchive::NZip::CExtraBlock::CExtraBlock
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ PROC		; CRecordVector<void *>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ENDP		; CRecordVector<void *>::IsEmpty
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Reserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T72168 = -16						; size = 4
$T72167 = -12						; size = 4
_p$71210 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z PROC		; CRecordVector<void *>::Reserve, COMDAT
; _this$ = ecx
; Line 61
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 62
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN3@Reserve
; Line 64
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72167[ebp], eax
	mov	eax, DWORD PTR $T72167[ebp]
	mov	DWORD PTR _p$71210[ebp], eax
; Line 65
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Reserve
; Line 66
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$71210[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@Reserve:
; Line 67
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T72168[ebp], edx
	mov	eax, DWORD PTR $T72168[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$71210[ebp]
	mov	DWORD PTR [ecx], edx
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@Reserve:
; Line 71
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Reserve@?$CRecordVector@PAX@@QAEXI@Z ENDP		; CRecordVector<void *>::Reserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T72171 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T72171[ebp], ecx
	mov	edx, DWORD PTR $T72171[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@ABV0@@Z
_TEXT	SEGMENT
$T72184 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_buffer$ = 8						; size = 4
??0?$CBuffer@E@@QAE@ABV0@@Z PROC			; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 27
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 28
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _size$[ebp], eax
; Line 29
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CBuffer
; Line 31
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72184[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T72184[ebp]
	mov	DWORD PTR [edx], eax
; Line 32
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _buffer$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 33
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN2@CBuffer:
; Line 35
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CBuffer@E@@QAE@ABV0@@Z ENDP			; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z PROC			; CBuffer<unsigned char>::CopyFrom, COMDAT
; _this$ = ecx
; Line 67
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 68
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Alloc@?$CBuffer@E@@QAEXI@Z		; CBuffer<unsigned char>::Alloc
; Line 69
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CopyFrom
; Line 70
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN2@CopyFrom:
; Line 71
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z ENDP			; CBuffer<unsigned char>::CopyFrom
_TEXT	ENDS
PUBLIC	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ConstructReserve
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\common\myvector.h
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T72190 = -32						; size = 4
$T72189 = -28						; size = 4
_i$71246 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z PROC ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::NZip::CExtraSubBlock>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$71246[ebp], 0
	jmp	SHORT $LN3@CObjectVec@3
$LN2@CObjectVec@3:
	mov	ecx, DWORD PTR _i$71246[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$71246[ebp], ecx
$LN3@CObjectVec@3:
	mov	edx, DWORD PTR _i$71246[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec@3
; Line 427
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72190[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T72190[ebp], 0
	je	SHORT $LN6@CObjectVec@3
	mov	eax, DWORD PTR _i$71246[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QBEABUCExtraSubBlock@NZip@NArchive@@I@Z ; CObjectVector<NArchive::NZip::CExtraSubBlock>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T72190[ebp]
	call	??0CExtraSubBlock@NZip@NArchive@@QAE@ABU012@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec@3
$LN6@CObjectVec@3:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec@3:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T72189[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T72189[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec@3
$LN4@CObjectVec@3:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T72190[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@UCExtraSubBlock@NZip@NArchive@@@@QAE@ABV0@@Z ENDP ; CObjectVector<NArchive::NZip::CExtraSubBlock>::CObjectVector<NArchive::NZip::CExtraSubBlock>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T72204 = -20						; size = 4
$T72203 = -16						; size = 4
_p$71262 = -12						; size = 4
_newCapacity$71261 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$71261[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$71261[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72203[ebp], eax
	mov	eax, DWORD PTR $T72203[ebp]
	mov	DWORD PTR _p$71262[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$71262[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T72204[ebp], edx
	mov	eax, DWORD PTR $T72204[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$71262[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$71261[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T72207 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ConstructReserve, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ConstructR
; Line 55
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T72207[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T72207[ebp]
	mov	DWORD PTR [eax], ecx
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ConstructR:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ConstructReserve
_TEXT	ENDS
END
