; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\XzEnc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	__$ArrayPad$
PUBLIC	_Xz_WriteHeader@8
EXTRN	@CrcCalc@8:PROC
EXTRN	_memcpy:PROC
EXTRN	_XZ_SIG:FWORD
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\xzenc.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_header$ = -24						; size = 12
_crc$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_f$ = 8							; size = 2
_s$ = 12						; size = 4
_Xz_WriteHeader@8 PROC
; Line 38
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 41
	push	6
	push	OFFSET _XZ_SIG
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 42
	movzx	ecx, WORD PTR _f$[ebp]
	sar	ecx, 8
	mov	BYTE PTR _header$[ebp+6], cl
; Line 43
	movzx	edx, WORD PTR _f$[ebp]
	and	edx, 255				; 000000ffH
	mov	BYTE PTR _header$[ebp+7], dl
; Line 44
	lea	ecx, DWORD PTR _header$[ebp+6]
	mov	edx, 2
	call	@CrcCalc@8
	mov	DWORD PTR _crc$[ebp], eax
; Line 45
	mov	eax, DWORD PTR _crc$[ebp]
	mov	DWORD PTR _header$[ebp+8], eax
; Line 46
	push	12					; 0000000cH
	lea	ecx, DWORD PTR _header$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_WriteBytes@12
; Line 47
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@Xz_WriteHe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN5@Xz_WriteHe:
	DD	1
	DD	$LN4@Xz_WriteHe
$LN4@Xz_WriteHe:
	DD	-24					; ffffffe8H
	DD	12					; 0000000cH
	DD	$LN3@Xz_WriteHe
$LN3@Xz_WriteHe:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_Xz_WriteHeader@8 ENDP
; Function compile flags: /Odtp /RTCsu
_s$ = 8						; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_WriteBytes@12 PROC
; Line 27
	push	ebp
	mov	ebp, esp
	push	esi
; Line 28
	mov	esi, esp
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	sub	eax, DWORD PTR _size$[ebp]
	neg	eax
	sbb	eax, eax
	and	eax, 9
; Line 29
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
_WriteBytes@12 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_XzBlock_WriteHeader@8
EXTRN	_Xz_WriteVarInt@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_f$4098 = -1052						; size = 4
_i$ = -1048						; size = 4
_numFilters$ = -1044					; size = 4
_pos$ = -1040						; size = 4
_header$ = -1032					; size = 1024
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_s$ = 12						; size = 4
_XzBlock_WriteHeader@8 PROC
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 1052				; 0000041cH
	push	edi
	lea	edi, DWORD PTR [ebp-1052]
	mov	ecx, 263				; 00000107H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 53
	mov	DWORD PTR _pos$[ebp], 1
; Line 55
	mov	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	dl, BYTE PTR [ecx+16]
	mov	BYTE PTR _header$[ebp+eax], dl
	mov	eax, DWORD PTR _pos$[ebp]
	add	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
; Line 57
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx+16]
	and	edx, 64					; 00000040H
	je	SHORT $LN7@XzBlock_Wr
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _pos$[ebp]
	lea	ecx, DWORD PTR _header$[ebp+eax]
	push	ecx
	call	_Xz_WriteVarInt@12
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
$LN7@XzBlock_Wr:
; Line 58
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx+16]
	and	eax, 128				; 00000080H
	je	SHORT $LN6@XzBlock_Wr
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	lea	edx, DWORD PTR _header$[ebp+ecx]
	push	edx
	call	_Xz_WriteVarInt@12
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
$LN6@XzBlock_Wr:
; Line 59
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	and	ecx, 3
	add	ecx, 1
	mov	DWORD PTR _numFilters$[ebp], ecx
; Line 61
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN5@XzBlock_Wr
$LN4@XzBlock_Wr:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN5@XzBlock_Wr:
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR _numFilters$[ebp]
	jae	$LN2@XzBlock_Wr
; Line 63
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 5
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx+24]
	mov	DWORD PTR _f$4098[ebp], eax
; Line 64
	mov	ecx, DWORD PTR _f$4098[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	lea	edx, DWORD PTR _header$[ebp+ecx]
	push	edx
	call	_Xz_WriteVarInt@12
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
; Line 65
	mov	eax, DWORD PTR _f$4098[ebp]
	mov	ecx, DWORD PTR [eax+8]
	xor	edx, edx
	push	edx
	push	ecx
	mov	eax, DWORD PTR _pos$[ebp]
	lea	ecx, DWORD PTR _header$[ebp+eax]
	push	ecx
	call	_Xz_WriteVarInt@12
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
; Line 66
	mov	edx, DWORD PTR _f$4098[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _f$4098[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR _header$[ebp+edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 67
	mov	ecx, DWORD PTR _f$4098[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR [ecx+8]
	mov	DWORD PTR _pos$[ebp], edx
; Line 68
	jmp	$LN4@XzBlock_Wr
$LN2@XzBlock_Wr:
; Line 70
	mov	eax, DWORD PTR _pos$[ebp]
	and	eax, 3
	je	SHORT $LN1@XzBlock_Wr
; Line 71
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	BYTE PTR _header$[ebp+ecx], 0
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 1
	mov	DWORD PTR _pos$[ebp], edx
	jmp	SHORT $LN2@XzBlock_Wr
$LN1@XzBlock_Wr:
; Line 73
	mov	eax, DWORD PTR _pos$[ebp]
	shr	eax, 2
	mov	BYTE PTR _header$[ebp], al
; Line 74
	mov	edx, DWORD PTR _pos$[ebp]
	lea	ecx, DWORD PTR _header$[ebp]
	call	@CrcCalc@8
	mov	ecx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _header$[ebp+ecx], eax
; Line 75
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, 4
	push	edx
	lea	eax, DWORD PTR _header$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	_WriteBytes@12
; Line 76
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN12@XzBlock_Wr
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 1052				; 0000041cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN12@XzBlock_Wr:
	DD	1
	DD	$LN11@XzBlock_Wr
$LN11@XzBlock_Wr:
	DD	-1032					; fffffbf8H
	DD	1024					; 00000400H
	DD	$LN10@XzBlock_Wr
$LN10@XzBlock_Wr:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_XzBlock_WriteHeader@8 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	_Xz_WriteFooter@8
EXTRN	_XZ_FOOTER_SIG:WORD
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_indexSize$4130 = -96					; size = 4
___result__$4128 = -92					; size = 4
___result__$4125 = -88					; size = 4
___result__$4121 = -84					; size = 4
_block$4120 = -80					; size = 4
___result__$4115 = -76					; size = 4
_i$4114 = -72						; size = 4
_pos$4113 = -68						; size = 4
_crc$4112 = -60						; size = 4
_globalPos$ = -52					; size = 8
_buf$ = -40						; size = 32
__$ArrayPad$ = -4					; size = 4
_p$ = 8							; size = 4
_s$ = 12						; size = 4
_Xz_WriteFooter@8 PROC
; Line 79
	push	ebp
	mov	ebp, esp
	sub	esp, 96					; 00000060H
	push	edi
	lea	edi, DWORD PTR [ebp-96]
	mov	ecx, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 83
	mov	DWORD PTR _crc$4112[ebp], -1
; Line 84
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	xor	edx, edx
	push	edx
	push	ecx
	lea	eax, DWORD PTR _buf$[ebp+1]
	push	eax
	call	_Xz_WriteVarInt@12
	add	eax, 1
	mov	DWORD PTR _pos$4113[ebp], eax
; Line 87
	mov	ecx, DWORD PTR _pos$4113[ebp]
	xor	edx, edx
	mov	DWORD PTR _globalPos$[ebp], ecx
	mov	DWORD PTR _globalPos$[ebp+4], edx
; Line 88
	mov	BYTE PTR _buf$[ebp], 0
; Line 89
	lea	eax, DWORD PTR _crc$4112[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$4113[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_WriteBytesAndCrc@16
	mov	DWORD PTR ___result__$4115[ebp], eax
	cmp	DWORD PTR ___result__$4115[ebp], 0
	je	SHORT $LN8@Xz_WriteFo
	mov	eax, DWORD PTR ___result__$4115[ebp]
	jmp	$LN9@Xz_WriteFo
$LN8@Xz_WriteFo:
; Line 90
	mov	DWORD PTR _i$4114[ebp], 0
	jmp	SHORT $LN7@Xz_WriteFo
$LN6@Xz_WriteFo:
	mov	ecx, DWORD PTR _i$4114[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$4114[ebp], ecx
$LN7@Xz_WriteFo:
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _i$4114[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	SHORT $LN5@Xz_WriteFo
; Line 92
	mov	ecx, DWORD PTR _i$4114[ebp]
	shl	ecx, 4
	mov	edx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [edx+12]
	mov	DWORD PTR _block$4120[ebp], ecx
; Line 93
	mov	eax, DWORD PTR _block$4120[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_Xz_WriteVarInt@12
	mov	DWORD PTR _pos$4113[ebp], eax
; Line 94
	mov	ecx, DWORD PTR _block$4120[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR [ecx]
	push	eax
	mov	ecx, DWORD PTR _pos$4113[ebp]
	lea	edx, DWORD PTR _buf$[ebp+ecx]
	push	edx
	call	_Xz_WriteVarInt@12
	add	eax, DWORD PTR _pos$4113[ebp]
	mov	DWORD PTR _pos$4113[ebp], eax
; Line 95
	mov	eax, DWORD PTR _pos$4113[ebp]
	xor	ecx, ecx
	add	eax, DWORD PTR _globalPos$[ebp]
	adc	ecx, DWORD PTR _globalPos$[ebp+4]
	mov	DWORD PTR _globalPos$[ebp], eax
	mov	DWORD PTR _globalPos$[ebp+4], ecx
; Line 96
	lea	edx, DWORD PTR _crc$4112[ebp]
	push	edx
	mov	eax, DWORD PTR _pos$4113[ebp]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_WriteBytesAndCrc@16
	mov	DWORD PTR ___result__$4121[ebp], eax
	cmp	DWORD PTR ___result__$4121[ebp], 0
	je	SHORT $LN4@Xz_WriteFo
	mov	eax, DWORD PTR ___result__$4121[ebp]
	jmp	$LN9@Xz_WriteFo
$LN4@Xz_WriteFo:
; Line 97
	jmp	$LN6@Xz_WriteFo
$LN5@Xz_WriteFo:
; Line 98
	mov	eax, DWORD PTR _globalPos$[ebp]
	and	eax, 3
	mov	DWORD PTR _pos$4113[ebp], eax
; Line 99
	je	SHORT $LN3@Xz_WriteFo
; Line 101
	mov	BYTE PTR _buf$[ebp+2], 0
	mov	cl, BYTE PTR _buf$[ebp+2]
	mov	BYTE PTR _buf$[ebp+1], cl
	mov	dl, BYTE PTR _buf$[ebp+1]
	mov	BYTE PTR _buf$[ebp], dl
; Line 102
	lea	eax, DWORD PTR _crc$4112[ebp]
	push	eax
	mov	ecx, 4
	sub	ecx, DWORD PTR _pos$4113[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_WriteBytesAndCrc@16
	mov	DWORD PTR ___result__$4125[ebp], eax
	cmp	DWORD PTR ___result__$4125[ebp], 0
	je	SHORT $LN2@Xz_WriteFo
	mov	eax, DWORD PTR ___result__$4125[ebp]
	jmp	$LN9@Xz_WriteFo
$LN2@Xz_WriteFo:
; Line 103
	mov	ecx, 4
	sub	ecx, DWORD PTR _pos$4113[ebp]
	xor	edx, edx
	add	ecx, DWORD PTR _globalPos$[ebp]
	adc	edx, DWORD PTR _globalPos$[ebp+4]
	mov	DWORD PTR _globalPos$[ebp], ecx
	mov	DWORD PTR _globalPos$[ebp+4], edx
$LN3@Xz_WriteFo:
; Line 106
	mov	eax, DWORD PTR _crc$4112[ebp]
	xor	eax, -1
	mov	DWORD PTR _buf$[ebp], eax
; Line 107
	push	4
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_WriteBytes@12
	mov	DWORD PTR ___result__$4128[ebp], eax
	cmp	DWORD PTR ___result__$4128[ebp], 0
	je	SHORT $LN1@Xz_WriteFo
	mov	eax, DWORD PTR ___result__$4128[ebp]
	jmp	SHORT $LN9@Xz_WriteFo
$LN1@Xz_WriteFo:
; Line 108
	mov	eax, DWORD PTR _globalPos$[ebp]
	add	eax, 4
	mov	ecx, DWORD PTR _globalPos$[ebp+4]
	adc	ecx, 0
	mov	DWORD PTR _globalPos$[ebp], eax
	mov	DWORD PTR _globalPos$[ebp+4], ecx
; Line 113
	mov	eax, DWORD PTR _globalPos$[ebp]
	mov	edx, DWORD PTR _globalPos$[ebp+4]
	mov	cl, 2
	call	__aullshr
	sub	eax, 1
	sbb	edx, 0
	mov	DWORD PTR _indexSize$4130[ebp], eax
; Line 114
	mov	edx, DWORD PTR _indexSize$4130[ebp]
	mov	DWORD PTR _buf$[ebp+4], edx
; Line 115
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	sar	ecx, 8
	mov	BYTE PTR _buf$[ebp+8], cl
; Line 116
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, WORD PTR [edx]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR _buf$[ebp+9], al
; Line 117
	lea	ecx, DWORD PTR _buf$[ebp+4]
	mov	edx, 6
	call	@CrcCalc@8
	mov	DWORD PTR _buf$[ebp], eax
; Line 118
	push	2
	push	OFFSET _XZ_FOOTER_SIG
	lea	ecx, DWORD PTR _buf$[ebp+10]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 119
	push	12					; 0000000cH
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_WriteBytes@12
$LN9@Xz_WriteFo:
; Line 121
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@Xz_WriteFo
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 96					; 00000060H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN14@Xz_WriteFo:
	DD	2
	DD	$LN13@Xz_WriteFo
$LN13@Xz_WriteFo:
	DD	-40					; ffffffd8H
	DD	32					; 00000020H
	DD	$LN11@Xz_WriteFo
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN12@Xz_WriteFo
$LN12@Xz_WriteFo:
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	0
$LN11@Xz_WriteFo:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
_Xz_WriteFooter@8 ENDP
_TEXT	ENDS
EXTRN	@CrcUpdate@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s$ = 8							; size = 4
_buf$ = 12						; size = 4
_size$ = 16						; size = 4
_crc$ = 20						; size = 4
_WriteBytesAndCrc@16 PROC
; Line 32
	push	ebp
	mov	ebp, esp
; Line 33
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	edx, DWORD PTR _buf$[ebp]
	mov	ecx, DWORD PTR _crc$[ebp]
	mov	ecx, DWORD PTR [ecx]
	call	@CrcUpdate@12
	mov	edx, DWORD PTR _crc$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	_WriteBytes@12
; Line 35
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
_WriteBytesAndCrc@16 ENDP
_TEXT	ENDS
PUBLIC	_Xz_AddIndexRecord@24
EXTRN	_Xz_Free@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_block$4158 = -16					; size = 4
_blocks$4151 = -12					; size = 4
_newSize$4149 = -8					; size = 4
_num$4148 = -4						; size = 4
_p$ = 8							; size = 4
_unpackSize$ = 12					; size = 8
_totalSize$ = 20					; size = 8
_alloc$ = 28						; size = 4
_Xz_AddIndexRecord@24 PROC
; Line 124
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 125
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN4@Xz_AddInde
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	cmp	eax, DWORD PTR [edx+4]
	jne	$LN5@Xz_AddInde
$LN4@Xz_AddInde:
; Line 127
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	lea	eax, DWORD PTR [edx+edx+2]
	mov	DWORD PTR _num$4148[ebp], eax
; Line 128
	mov	ecx, DWORD PTR _num$4148[ebp]
	shl	ecx, 4
	mov	DWORD PTR _newSize$4149[ebp], ecx
; Line 130
	mov	edx, DWORD PTR _newSize$4149[ebp]
	shr	edx, 4
	cmp	edx, DWORD PTR _num$4148[ebp]
	je	SHORT $LN3@Xz_AddInde
; Line 131
	mov	eax, 2
	jmp	$LN6@Xz_AddInde
$LN3@Xz_AddInde:
; Line 132
	mov	esi, esp
	mov	eax, DWORD PTR _newSize$4149[ebp]
	push	eax
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _alloc$[ebp]
	mov	eax, DWORD PTR [edx]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _blocks$4151[ebp], eax
; Line 133
	cmp	DWORD PTR _blocks$4151[ebp], 0
	jne	SHORT $LN2@Xz_AddInde
; Line 134
	mov	eax, 2
	jmp	$LN6@Xz_AddInde
$LN2@Xz_AddInde:
; Line 135
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@Xz_AddInde
; Line 137
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR _blocks$4151[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 138
	mov	ecx, DWORD PTR _alloc$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	call	_Xz_Free@8
$LN1@Xz_AddInde:
; Line 140
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _blocks$4151[ebp]
	mov	DWORD PTR [eax+12], ecx
; Line 141
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _num$4148[ebp]
	mov	DWORD PTR [edx+8], eax
$LN5@Xz_AddInde:
; Line 144
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	shl	edx, 4
	mov	eax, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _block$4158[ebp], edx
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 145
	mov	ecx, DWORD PTR _block$4158[ebp]
	mov	edx, DWORD PTR _totalSize$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	eax, DWORD PTR _totalSize$[ebp+4]
	mov	DWORD PTR [ecx+12], eax
; Line 146
	mov	ecx, DWORD PTR _block$4158[ebp]
	mov	edx, DWORD PTR _unpackSize$[ebp]
	mov	DWORD PTR [ecx], edx
	mov	eax, DWORD PTR _unpackSize$[ebp+4]
	mov	DWORD PTR [ecx+4], eax
; Line 148
	xor	eax, eax
$LN6@Xz_AddInde:
; Line 149
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
_Xz_AddIndexRecord@24 ENDP
_TEXT	ENDS
PUBLIC	_XzProps_Init@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_XzProps_Init@4 PROC
; Line 379
	push	ebp
	mov	ebp, esp
; Line 380
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 381
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 382
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], 1
; Line 383
	pop	ebp
	ret	4
_XzProps_Init@4 ENDP
_TEXT	ENDS
PUBLIC	_XzFilterProps_Init@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_XzFilterProps_Init@4 PROC
; Line 386
	push	ebp
	mov	ebp, esp
; Line 387
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], 0
; Line 388
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 389
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+8], 0
; Line 390
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+12], 0
; Line 391
	pop	ebp
	ret	4
_XzFilterProps_Init@4 ENDP
_TEXT	ENDS
PUBLIC	_Xz_Encode@16
EXTRN	_g_Alloc:QWORD
EXTRN	_g_BigAlloc:QWORD
EXTRN	_Xz_Construct@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_lzmaf$ = -96						; size = 56
_xz$ = -32						; size = 24
_res$ = -4						; size = 4
_outStream$ = 8						; size = 4
_inStream$ = 12						; size = 4
_props$ = 16						; size = 4
_progress$ = 20						; size = 4
_Xz_Encode@16 PROC
; Line 493
	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H
	push	edi
	lea	edi, DWORD PTR [ebp-100]
	mov	ecx, 25					; 00000019H
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 497
	lea	eax, DWORD PTR _xz$[ebp]
	push	eax
	call	_Xz_Construct@4
; Line 498
	push	OFFSET _g_BigAlloc
	push	OFFSET _g_Alloc
	lea	ecx, DWORD PTR _lzmaf$[ebp]
	push	ecx
	call	_Lzma2WithFilters_Construct@12
; Line 499
	lea	edx, DWORD PTR _lzmaf$[ebp]
	push	edx
	call	_Lzma2WithFilters_Create@4
	mov	DWORD PTR _res$[ebp], eax
; Line 500
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN1@Xz_Encode
; Line 501
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _props$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _lzmaf$[ebp]
	push	ecx
	lea	edx, DWORD PTR _xz$[ebp]
	push	edx
	call	_Xz_Compress@24
	mov	DWORD PTR _res$[ebp], eax
$LN1@Xz_Encode:
; Line 502
	lea	eax, DWORD PTR _lzmaf$[ebp]
	push	eax
	call	_Lzma2WithFilters_Free@4
; Line 503
	push	OFFSET _g_Alloc
	lea	ecx, DWORD PTR _xz$[ebp]
	push	ecx
	call	_Xz_Free@8
; Line 504
	mov	eax, DWORD PTR _res$[ebp]
; Line 505
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@Xz_Encode
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	add	esp, 100				; 00000064H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN7@Xz_Encode:
	DD	2
	DD	$LN6@Xz_Encode
$LN6@Xz_Encode:
	DD	-32					; ffffffe0H
	DD	24					; 00000018H
	DD	$LN4@Xz_Encode
	DD	-96					; ffffffa0H
	DD	56					; 00000038H
	DD	$LN5@Xz_Encode
$LN5@Xz_Encode:
	DB	108					; 0000006cH
	DB	122					; 0000007aH
	DB	109					; 0000006dH
	DB	97					; 00000061H
	DB	102					; 00000066H
	DB	0
$LN4@Xz_Encode:
	DB	120					; 00000078H
	DB	122					; 0000007aH
	DB	0
_Xz_Encode@16 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_alloc$ = 12						; size = 4
_bigAlloc$ = 16						; size = 4
_Lzma2WithFilters_Construct@12 PROC
; Line 347
	push	ebp
	mov	ebp, esp
; Line 348
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _alloc$[ebp]
	mov	DWORD PTR [eax+48], ecx
; Line 349
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _bigAlloc$[ebp]
	mov	DWORD PTR [edx+52], eax
; Line 350
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 0
; Line 354
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 4
	push	edx
	call	_SeqInFilter_Construct@4
; Line 355
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
_Lzma2WithFilters_Construct@12 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_SeqInFilter_Construct@4 PROC
; Line 245
	push	ebp
	mov	ebp, esp
; Line 246
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+28], 0
; Line 247
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], OFFSET _SeqInFilter_Read@12
; Line 248
	pop	ebp
	ret	4
_SeqInFilter_Construct@4 ENDP
; Function compile flags: /Odtp /RTCsu
_res$4233 = -40					; size = 4
_wasFinished$4232 = -32					; size = 4
_srcLen$4231 = -20					; size = 4
___result__$4228 = -12					; size = 4
_sizeOriginal$ = -8					; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_SeqInFilter_Read@12 PROC
; Line 214
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 215
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 216
	mov	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _sizeOriginal$[ebp], edx
; Line 217
	cmp	DWORD PTR _sizeOriginal$[ebp], 0
	jne	SHORT $LN8@SeqInFilte
; Line 218
	xor	eax, eax
	jmp	$LN9@SeqInFilte
$LN8@SeqInFilte:
; Line 219
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [eax], 0
$LN7@SeqInFilte:
; Line 222
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx+40], 0
	jne	SHORT $LN5@SeqInFilte
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+32]
	cmp	ecx, DWORD PTR [eax+36]
	jne	SHORT $LN5@SeqInFilte
; Line 224
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+32], 0
; Line 225
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+36], 1048576		; 00100000H
; Line 226
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 36					; 00000024H
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+28]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR [ecx]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$4228[ebp], eax
	cmp	DWORD PTR ___result__$4228[ebp], 0
	je	SHORT $LN4@SeqInFilte
	mov	eax, DWORD PTR ___result__$4228[ebp]
	jmp	$LN9@SeqInFilte
$LN4@SeqInFilte:
; Line 227
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+36], 0
	jne	SHORT $LN5@SeqInFilte
; Line 228
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+40], 1
$LN5@SeqInFilte:
; Line 231
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [edx+36]
	sub	ecx, DWORD PTR [eax+32]
	mov	DWORD PTR _srcLen$4231[ebp], ecx
; Line 234
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR _sizeOriginal$[ebp]
	mov	DWORD PTR [edx], eax
; Line 236
	mov	esi, esp
	lea	ecx, DWORD PTR _wasFinished$4232[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	lea	ecx, DWORD PTR _srcLen$4231[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+28]
	mov	ecx, DWORD PTR _p$[ebp]
	add	eax, DWORD PTR [ecx+32]
	push	eax
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _data$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$4233[ebp], eax
; Line 237
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+32]
	add	eax, DWORD PTR _srcLen$4231[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], eax
; Line 238
	mov	edx, DWORD PTR _size$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN1@SeqInFilte
	cmp	DWORD PTR _srcLen$4231[ebp], 0
	je	SHORT $LN1@SeqInFilte
	cmp	DWORD PTR _res$4233[ebp], 0
	je	SHORT $LN2@SeqInFilte
$LN1@SeqInFilte:
; Line 239
	mov	eax, DWORD PTR _res$4233[ebp]
	jmp	SHORT $LN9@SeqInFilte
$LN2@SeqInFilte:
; Line 241
	jmp	$LN7@SeqInFilte
$LN9@SeqInFilte:
; Line 242
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN14@SeqInFilte
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN14@SeqInFilte:
	DD	2
	DD	$LN13@SeqInFilte
$LN13@SeqInFilte:
	DD	-20					; ffffffecH
	DD	4
	DD	$LN11@SeqInFilte
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN12@SeqInFilte
$LN12@SeqInFilte:
	DB	119					; 00000077H
	DB	97					; 00000061H
	DB	115					; 00000073H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	115					; 00000073H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN11@SeqInFilte:
	DB	115					; 00000073H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	76					; 0000004cH
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	0
_SeqInFilter_Read@12 ENDP
_TEXT	ENDS
EXTRN	_Lzma2Enc_Create@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_Lzma2WithFilters_Create@4 PROC
; Line 358
	push	ebp
	mov	ebp, esp
; Line 359
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+52]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+48]
	push	eax
	call	_Lzma2Enc_Create@8
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 360
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx], 0
	jne	SHORT $LN1@Lzma2WithF
; Line 361
	mov	eax, 2
	jmp	SHORT $LN2@Lzma2WithF
$LN1@Lzma2WithF:
; Line 362
	xor	eax, eax
$LN2@Lzma2WithF:
; Line 363
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_Lzma2WithFilters_Create@4 ENDP
_TEXT	ENDS
EXTRN	_Lzma2Enc_Destroy@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_Lzma2WithFilters_Free@4 PROC
; Line 366
	push	ebp
	mov	ebp, esp
; Line 367
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	push	eax
	call	_SeqInFilter_Free@4
; Line 371
	mov	ecx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN2@Lzma2WithF@2
; Line 373
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_Lzma2Enc_Destroy@4
; Line 374
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Lzma2WithF@2:
; Line 376
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_Lzma2WithFilters_Free@4 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = 8						; size = 4
_SeqInFilter_Free@4 PROC
; Line 251
	push	ebp
	mov	ebp, esp
	push	esi
; Line 252
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+28], 0
	je	SHORT $LN2@SeqInFilte@2
; Line 254
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+28]
	push	edx
	push	OFFSET _g_Alloc
	call	DWORD PTR _g_Alloc+4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 255
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+28], 0
$LN2@SeqInFilte@2:
; Line 257
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
_SeqInFilter_Free@4 ENDP
_TEXT	ENDS
PUBLIC	__$ArrayPad$
EXTRN	_XzFlags_GetCheckSize@4:PROC
EXTRN	_Lzma2Enc_Encode@16:PROC
EXTRN	_Lzma2Enc_WriteProperties@4:PROC
EXTRN	_Lzma2Enc_SetProps@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv159 = -532						; size = 4
___result__$4350 = -528					; size = 4
___result__$4348 = -524					; size = 4
_buf$4343 = -516					; size = 128
_padSize$4342 = -384					; size = 4
___result__$4340 = -380					; size = 4
_res$4339 = -376					; size = 4
_packPos$4338 = -372					; size = 8
___result__$4336 = -364					; size = 4
___result__$4333 = -360					; size = 4
_f$4332 = -356						; size = 4
_fp$4325 = -352						; size = 4
_filter$4323 = -348					; size = 4
_filterIndex$4322 = -344				; size = 4
_block$4321 = -336					; size = 152
_seqSizeOutStream$4320 = -176				; size = 16
_checkInStream$4319 = -152				; size = 136
___result__$4317 = -12					; size = 4
___result__$4315 = -8					; size = 4
__$ArrayPad$ = -4					; size = 4
_xz$ = 8						; size = 4
_lzmaf$ = 12						; size = 4
_outStream$ = 16					; size = 4
_inStream$ = 20						; size = 4
_props$ = 24						; size = 4
_progress$ = 28						; size = 4
_Xz_Compress@24 PROC
; Line 396
	push	ebp
	mov	ebp, esp
	sub	esp, 532				; 00000214H
	push	edi
	lea	edi, DWORD PTR [ebp-532]
	mov	ecx, 133				; 00000085H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 397
	mov	eax, DWORD PTR _props$[ebp]
	movzx	cx, BYTE PTR [eax+8]
	mov	edx, DWORD PTR _xz$[ebp]
	mov	WORD PTR [edx], cx
; Line 399
	mov	eax, DWORD PTR _props$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _lzmaf$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_Lzma2Enc_SetProps@8
	mov	DWORD PTR ___result__$4315[ebp], eax
	cmp	DWORD PTR ___result__$4315[ebp], 0
	je	SHORT $LN14@Xz_Compres
	mov	eax, DWORD PTR ___result__$4315[ebp]
	jmp	$LN15@Xz_Compres
$LN14@Xz_Compres:
; Line 400
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _xz$[ebp]
	movzx	eax, WORD PTR [edx]
	push	eax
	call	_Xz_WriteHeader@8
	mov	DWORD PTR ___result__$4317[ebp], eax
	cmp	DWORD PTR ___result__$4317[ebp], 0
	je	SHORT $LN13@Xz_Compres
	mov	eax, DWORD PTR ___result__$4317[ebp]
	jmp	$LN15@Xz_Compres
$LN13@Xz_Compres:
; Line 406
	mov	DWORD PTR _filterIndex$4322[ebp], 0
; Line 407
	mov	DWORD PTR _filter$4323[ebp], 0
; Line 408
	mov	ecx, DWORD PTR _props$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _fp$4325[ebp], edx
; Line 410
	mov	BYTE PTR _block$4321[ebp+16], 0
; Line 411
	xor	eax, eax
	cmp	DWORD PTR _fp$4325[ebp], 0
	setne	al
	movzx	ecx, BYTE PTR _block$4321[ebp+16]
	or	ecx, eax
	mov	BYTE PTR _block$4321[ebp+16], cl
; Line 413
	cmp	DWORD PTR _fp$4325[ebp], 0
	je	$LN12@Xz_Compres
; Line 415
	mov	edx, DWORD PTR _filterIndex$4322[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _block$4321[ebp+edx+24]
	mov	DWORD PTR _filter$4323[ebp], eax
	mov	ecx, DWORD PTR _filterIndex$4322[ebp]
	add	ecx, 1
	mov	DWORD PTR _filterIndex$4322[ebp], ecx
; Line 416
	mov	edx, DWORD PTR _fp$4325[ebp]
	mov	eax, DWORD PTR [edx]
	xor	ecx, ecx
	mov	edx, DWORD PTR _filter$4323[ebp]
	mov	DWORD PTR [edx], eax
	mov	DWORD PTR [edx+4], ecx
; Line 417
	mov	eax, DWORD PTR _filter$4323[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 418
	mov	ecx, DWORD PTR _fp$4325[ebp]
	cmp	DWORD PTR [ecx], 3
	jne	SHORT $LN11@Xz_Compres
; Line 420
	mov	edx, DWORD PTR _fp$4325[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _filter$4323[ebp]
	mov	BYTE PTR [ecx+12], al
; Line 421
	mov	edx, DWORD PTR _filter$4323[ebp]
	mov	DWORD PTR [edx+8], 1
	jmp	SHORT $LN12@Xz_Compres
$LN11@Xz_Compres:
; Line 423
	mov	eax, DWORD PTR _fp$4325[ebp]
	cmp	DWORD PTR [eax+12], 0
	je	SHORT $LN12@Xz_Compres
; Line 425
	mov	ecx, DWORD PTR _filter$4323[ebp]
	mov	edx, DWORD PTR _fp$4325[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+12], eax
; Line 426
	mov	ecx, DWORD PTR _filter$4323[ebp]
	mov	DWORD PTR [ecx+8], 4
$LN12@Xz_Compres:
; Line 431
	mov	edx, DWORD PTR _filterIndex$4322[ebp]
	shl	edx, 5
	lea	eax, DWORD PTR _block$4321[ebp+edx+24]
	mov	DWORD PTR _f$4332[ebp], eax
	mov	ecx, DWORD PTR _filterIndex$4322[ebp]
	add	ecx, 1
	mov	DWORD PTR _filterIndex$4322[ebp], ecx
; Line 432
	mov	edx, DWORD PTR _f$4332[ebp]
	mov	DWORD PTR [edx], 33			; 00000021H
	mov	DWORD PTR [edx+4], 0
; Line 433
	mov	eax, DWORD PTR _f$4332[ebp]
	mov	DWORD PTR [eax+8], 1
; Line 434
	mov	ecx, DWORD PTR _lzmaf$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_Lzma2Enc_WriteProperties@4
	mov	ecx, DWORD PTR _f$4332[ebp]
	mov	BYTE PTR [ecx+12], al
; Line 437
	mov	DWORD PTR _seqSizeOutStream$4320[ebp], OFFSET _MyWrite@12
; Line 438
	mov	edx, DWORD PTR _outStream$[ebp]
	mov	DWORD PTR _seqSizeOutStream$4320[ebp+4], edx
; Line 439
	mov	DWORD PTR _seqSizeOutStream$4320[ebp+8], 0
	mov	DWORD PTR _seqSizeOutStream$4320[ebp+12], 0
; Line 441
	lea	eax, DWORD PTR _seqSizeOutStream$4320[ebp]
	push	eax
	lea	ecx, DWORD PTR _block$4321[ebp]
	push	ecx
	call	_XzBlock_WriteHeader@8
	mov	DWORD PTR ___result__$4333[ebp], eax
	cmp	DWORD PTR ___result__$4333[ebp], 0
	je	SHORT $LN8@Xz_Compres
	mov	eax, DWORD PTR ___result__$4333[ebp]
	jmp	$LN15@Xz_Compres
$LN8@Xz_Compres:
; Line 443
	mov	DWORD PTR _checkInStream$4319[ebp], OFFSET _SeqCheckInStream_Read@12
; Line 444
	mov	edx, DWORD PTR _inStream$[ebp]
	mov	DWORD PTR _checkInStream$4319[ebp+4], edx
; Line 445
	mov	eax, DWORD PTR _xz$[ebp]
	movzx	ecx, WORD PTR [eax]
	and	ecx, 15					; 0000000fH
	push	ecx
	lea	edx, DWORD PTR _checkInStream$4319[ebp]
	push	edx
	call	_SeqCheckInStream_Init@8
; Line 447
	cmp	DWORD PTR _fp$4325[ebp], 0
	je	SHORT $LN7@Xz_Compres
; Line 458
	mov	eax, DWORD PTR _lzmaf$[ebp]
	lea	ecx, DWORD PTR _checkInStream$4319[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 459
	mov	edx, DWORD PTR _filter$4323[ebp]
	push	edx
	mov	eax, DWORD PTR _lzmaf$[ebp]
	add	eax, 4
	push	eax
	call	_SeqInFilter_Init@8
	mov	DWORD PTR ___result__$4336[ebp], eax
	cmp	DWORD PTR ___result__$4336[ebp], 0
	je	SHORT $LN7@Xz_Compres
	mov	eax, DWORD PTR ___result__$4336[ebp]
	jmp	$LN15@Xz_Compres
$LN7@Xz_Compres:
; Line 464
	mov	ecx, DWORD PTR _seqSizeOutStream$4320[ebp+8]
	mov	DWORD PTR _packPos$4338[ebp], ecx
	mov	edx, DWORD PTR _seqSizeOutStream$4320[ebp+12]
	mov	DWORD PTR _packPos$4338[ebp+4], edx
; Line 472
	cmp	DWORD PTR _fp$4325[ebp], 0
	je	SHORT $LN17@Xz_Compres
	mov	eax, DWORD PTR _lzmaf$[ebp]
	add	eax, 4
	mov	DWORD PTR tv159[ebp], eax
	jmp	SHORT $LN18@Xz_Compres
$LN17@Xz_Compres:
	lea	ecx, DWORD PTR _checkInStream$4319[ebp]
	mov	DWORD PTR tv159[ebp], ecx
$LN18@Xz_Compres:
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	mov	eax, DWORD PTR tv159[ebp]
	push	eax
	lea	ecx, DWORD PTR _seqSizeOutStream$4320[ebp]
	push	ecx
	mov	edx, DWORD PTR _lzmaf$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_Lzma2Enc_Encode@16
	mov	DWORD PTR _res$4339[ebp], eax
; Line 473
	mov	ecx, DWORD PTR _res$4339[ebp]
	mov	DWORD PTR ___result__$4340[ebp], ecx
	cmp	DWORD PTR ___result__$4340[ebp], 0
	je	SHORT $LN5@Xz_Compres
	mov	eax, DWORD PTR ___result__$4340[ebp]
	jmp	$LN15@Xz_Compres
$LN5@Xz_Compres:
; Line 474
	mov	edx, DWORD PTR _checkInStream$4319[ebp+8]
	mov	DWORD PTR _block$4321[ebp+8], edx
	mov	eax, DWORD PTR _checkInStream$4319[ebp+12]
	mov	DWORD PTR _block$4321[ebp+12], eax
; Line 475
	mov	ecx, DWORD PTR _seqSizeOutStream$4320[ebp+8]
	sub	ecx, DWORD PTR _packPos$4338[ebp]
	mov	edx, DWORD PTR _seqSizeOutStream$4320[ebp+12]
	sbb	edx, DWORD PTR _packPos$4338[ebp+4]
	mov	DWORD PTR _block$4321[ebp], ecx
	mov	DWORD PTR _block$4321[ebp+4], edx
; Line 479
	mov	DWORD PTR _padSize$4342[ebp], 0
$LN4@Xz_Compres:
; Line 481
	mov	eax, DWORD PTR _block$4321[ebp]
	add	eax, DWORD PTR _padSize$4342[ebp]
	and	eax, 3
	je	SHORT $LN3@Xz_Compres
; Line 482
	mov	ecx, DWORD PTR _padSize$4342[ebp]
	mov	BYTE PTR _buf$4343[ebp+ecx], 0
	mov	edx, DWORD PTR _padSize$4342[ebp]
	add	edx, 1
	mov	DWORD PTR _padSize$4342[ebp], edx
	jmp	SHORT $LN4@Xz_Compres
$LN3@Xz_Compres:
; Line 483
	mov	eax, DWORD PTR _padSize$4342[ebp]
	lea	ecx, DWORD PTR _buf$4343[ebp+eax]
	push	ecx
	lea	edx, DWORD PTR _checkInStream$4319[ebp]
	push	edx
	call	_SeqCheckInStream_GetDigest@8
; Line 484
	mov	eax, DWORD PTR _xz$[ebp]
	movzx	ecx, WORD PTR [eax]
	push	ecx
	call	_XzFlags_GetCheckSize@4
	add	eax, DWORD PTR _padSize$4342[ebp]
	push	eax
	lea	edx, DWORD PTR _buf$4343[ebp]
	push	edx
	lea	eax, DWORD PTR _seqSizeOutStream$4320[ebp]
	push	eax
	call	_WriteBytes@12
	mov	DWORD PTR ___result__$4348[ebp], eax
	cmp	DWORD PTR ___result__$4348[ebp], 0
	je	SHORT $LN2@Xz_Compres
	mov	eax, DWORD PTR ___result__$4348[ebp]
	jmp	SHORT $LN15@Xz_Compres
$LN2@Xz_Compres:
; Line 485
	push	OFFSET _g_Alloc
	mov	ecx, DWORD PTR _padSize$4342[ebp]
	xor	edx, edx
	mov	eax, DWORD PTR _seqSizeOutStream$4320[ebp+8]
	sub	eax, ecx
	mov	ecx, DWORD PTR _seqSizeOutStream$4320[ebp+12]
	sbb	ecx, edx
	push	ecx
	push	eax
	mov	edx, DWORD PTR _block$4321[ebp+12]
	push	edx
	mov	eax, DWORD PTR _block$4321[ebp+8]
	push	eax
	mov	ecx, DWORD PTR _xz$[ebp]
	push	ecx
	call	_Xz_AddIndexRecord@24
	mov	DWORD PTR ___result__$4350[ebp], eax
	cmp	DWORD PTR ___result__$4350[ebp], 0
	je	SHORT $LN1@Xz_Compres
	mov	eax, DWORD PTR ___result__$4350[ebp]
	jmp	SHORT $LN15@Xz_Compres
$LN1@Xz_Compres:
; Line 488
	mov	edx, DWORD PTR _outStream$[ebp]
	push	edx
	mov	eax, DWORD PTR _xz$[ebp]
	push	eax
	call	_Xz_WriteFooter@8
$LN15@Xz_Compres:
; Line 489
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@Xz_Compres
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 532				; 00000214H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	1
$LN24@Xz_Compres:
	DD	4
	DD	$LN23@Xz_Compres
$LN23@Xz_Compres:
	DD	-152					; ffffff68H
	DD	136					; 00000088H
	DD	$LN19@Xz_Compres
	DD	-176					; ffffff50H
	DD	16					; 00000010H
	DD	$LN20@Xz_Compres
	DD	-336					; fffffeb0H
	DD	152					; 00000098H
	DD	$LN21@Xz_Compres
	DD	-516					; fffffdfcH
	DD	128					; 00000080H
	DD	$LN22@Xz_Compres
$LN22@Xz_Compres:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN21@Xz_Compres:
	DB	98					; 00000062H
	DB	108					; 0000006cH
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
$LN20@Xz_Compres:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN19@Xz_Compres:
	DB	99					; 00000063H
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_Xz_Compress@24 ENDP
_TEXT	ENDS
EXTRN	_XzCheck_Init@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_mode$ = 12						; size = 4
_SeqCheckInStream_Init@8 PROC
; Line 162
	push	ebp
	mov	ebp, esp
; Line 163
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0
; Line 164
	mov	ecx, DWORD PTR _mode$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	_XzCheck_Init@8
; Line 165
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_SeqCheckInStream_Init@8 ENDP
_TEXT	ENDS
EXTRN	_XzCheck_Final@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = 8							; size = 4
_digest$ = 12						; size = 4
_SeqCheckInStream_GetDigest@8 PROC
; Line 168
	push	ebp
	mov	ebp, esp
; Line 169
	mov	eax, DWORD PTR _digest$[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	call	_XzCheck_Final@8
; Line 170
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_SeqCheckInStream_GetDigest@8 ENDP
_TEXT	ENDS
EXTRN	_XzCheck_Update@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_res$ = -8						; size = 4
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_SeqCheckInStream_Read@12 PROC
; Line 173
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 174
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 175
	mov	esi, esp
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 176
	mov	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 16					; 00000010H
	push	edx
	call	_XzCheck_Update@12
; Line 177
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	eax, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR [eax+8]
	adc	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	DWORD PTR [eax+12], edx
; Line 178
	mov	eax, DWORD PTR _res$[ebp]
; Line 179
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_SeqCheckInStream_Read@12 ENDP
; Function compile flags: /Odtp /RTCsu
_p$ = -4						; size = 4
_pp$ = 8						; size = 4
_data$ = 12						; size = 4
_size$ = 16						; size = 4
_MyWrite@12 PROC
; Line 191
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 192
	mov	eax, DWORD PTR _pp$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 193
	mov	esi, esp
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _size$[ebp], eax
; Line 194
	mov	edx, DWORD PTR _size$[ebp]
	xor	eax, eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR [ecx+8]
	adc	eax, DWORD PTR [ecx+12]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+8], edx
	mov	DWORD PTR [ecx+12], eax
; Line 195
	mov	eax, DWORD PTR _size$[ebp]
; Line 196
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
_MyWrite@12 ENDP
_TEXT	ENDS
EXTRN	_BraState_SetFromMethod@20:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
___result__$4266 = -8					; size = 4
___result__$4264 = -4					; size = 4
_p$ = 8							; size = 4
_props$ = 12						; size = 4
_SeqInFilter_Init@8 PROC
; Line 262
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 263
	mov	eax, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [eax+28], 0
	jne	SHORT $LN4@SeqInFilte@3
; Line 265
	mov	esi, esp
	push	1048576					; 00100000H
	push	OFFSET _g_Alloc
	call	DWORD PTR _g_Alloc
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+28], eax
; Line 266
	mov	edx, DWORD PTR _p$[ebp]
	cmp	DWORD PTR [edx+28], 0
	jne	SHORT $LN4@SeqInFilte@3
; Line 267
	mov	eax, 2
	jmp	$LN5@SeqInFilte@3
$LN4@SeqInFilte@3:
; Line 269
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax+36], 0
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx+32], 0
; Line 270
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx+40], 0
; Line 271
	push	OFFSET _g_Alloc
	push	1
	mov	eax, DWORD PTR _props$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	push	eax
	call	_BraState_SetFromMethod@20
	mov	DWORD PTR ___result__$4264[ebp], eax
	cmp	DWORD PTR ___result__$4264[ebp], 0
	je	SHORT $LN2@SeqInFilte@3
	mov	eax, DWORD PTR ___result__$4264[ebp]
	jmp	SHORT $LN5@SeqInFilte@3
$LN2@SeqInFilte@3:
; Line 272
	mov	esi, esp
	push	OFFSET _g_Alloc
	mov	ecx, DWORD PTR _props$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _props$[ebp]
	add	eax, 12					; 0000000cH
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$4266[ebp], eax
	cmp	DWORD PTR ___result__$4266[ebp], 0
	je	SHORT $LN1@SeqInFilte@3
	mov	eax, DWORD PTR ___result__$4266[ebp]
	jmp	SHORT $LN5@SeqInFilte@3
$LN1@SeqInFilte@3:
; Line 273
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+20]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 274
	xor	eax, eax
$LN5@SeqInFilte@3:
; Line 275
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_SeqInFilter_Init@8 ENDP
_TEXT	ENDS
PUBLIC	_Xz_EncodeEmpty@4
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_xz$ = -32						; size = 24
_res$ = -4						; size = 4
_outStream$ = 8						; size = 4
_Xz_EncodeEmpty@4 PROC
; Line 508
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 511
	lea	eax, DWORD PTR _xz$[ebp]
	push	eax
	call	_Xz_Construct@4
; Line 512
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	movzx	edx, WORD PTR _xz$[ebp]
	push	edx
	call	_Xz_WriteHeader@8
	mov	DWORD PTR _res$[ebp], eax
; Line 513
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN1@Xz_EncodeE
; Line 514
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _xz$[ebp]
	push	ecx
	call	_Xz_WriteFooter@8
	mov	DWORD PTR _res$[ebp], eax
$LN1@Xz_EncodeE:
; Line 515
	push	OFFSET _g_Alloc
	lea	edx, DWORD PTR _xz$[ebp]
	push	edx
	call	_Xz_Free@8
; Line 516
	mov	eax, DWORD PTR _res$[ebp]
; Line 517
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Xz_EncodeE
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN6@Xz_EncodeE:
	DD	1
	DD	$LN5@Xz_EncodeE
$LN5@Xz_EncodeE:
	DD	-32					; ffffffe0H
	DD	24					; 00000018H
	DD	$LN4@Xz_EncodeE
$LN4@Xz_EncodeE:
	DB	120					; 00000078H
	DB	122					; 0000007aH
	DB	0
_Xz_EncodeEmpty@4 ENDP
_TEXT	ENDS
END
