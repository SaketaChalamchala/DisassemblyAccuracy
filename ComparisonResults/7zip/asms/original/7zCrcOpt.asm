; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\7zCrcOpt.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	@CrcUpdateT4@16
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\7zcrcopt.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_p$ = -12						; size = 4
_data$ = -8						; size = 4
_v$ = -4						; size = 4
_size$ = 8						; size = 4
_table$ = 12						; size = 4
@CrcUpdateT4@16 PROC
; _v$ = ecx
; _data$ = edx
; Line 13
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _data$[ebp], edx
	mov	DWORD PTR _v$[ebp], ecx
; Line 14
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 15
	jmp	SHORT $LN9@
$LN8@:
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN9@:
	cmp	DWORD PTR _size$[ebp], 0
	jbe	SHORT $LN7@
	mov	eax, DWORD PTR _p$[ebp]
	and	eax, 3
	je	SHORT $LN7@
; Line 16
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	edx, DWORD PTR _v$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _v$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _table$[ebp]
	xor	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN8@
$LN7@:
; Line 17
	jmp	SHORT $LN6@
$LN5@:
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 4
	mov	DWORD PTR _size$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 4
	mov	DWORD PTR _p$[ebp], eax
$LN6@:
	cmp	DWORD PTR _size$[ebp], 4
	jb	SHORT $LN4@
; Line 19
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	xor	edx, DWORD PTR [ecx]
	mov	DWORD PTR _v$[ebp], edx
; Line 24
	mov	eax, DWORD PTR _v$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _v$[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _table$[ebp]
	mov	esi, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+3072]
	xor	eax, DWORD PTR [esi+ecx*4+2048]
	mov	ecx, DWORD PTR _v$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _table$[ebp]
	xor	eax, DWORD PTR [edx+ecx*4+1024]
	mov	ecx, DWORD PTR _v$[ebp]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _table$[ebp]
	xor	eax, DWORD PTR [edx+ecx*4]
	mov	DWORD PTR _v$[ebp], eax
; Line 25
	jmp	SHORT $LN5@
$LN4@:
; Line 26
	jmp	SHORT $LN3@
$LN2@:
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _size$[ebp], eax
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
$LN3@:
	cmp	DWORD PTR _size$[ebp], 0
	jbe	SHORT $LN1@
; Line 27
	mov	edx, DWORD PTR _p$[ebp]
	movzx	eax, BYTE PTR [edx]
	xor	eax, DWORD PTR _v$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _v$[ebp]
	shr	ecx, 8
	mov	edx, DWORD PTR _table$[ebp]
	xor	ecx, DWORD PTR [edx+eax*4]
	mov	DWORD PTR _v$[ebp], ecx
	jmp	SHORT $LN2@
$LN1@:
; Line 28
	mov	eax, DWORD PTR _v$[ebp]
; Line 29
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
@CrcUpdateT4@16 ENDP
_TEXT	ENDS
PUBLIC	@CrcUpdateT8@16
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_d$2702 = -16						; size = 4
_p$ = -12						; size = 4
_data$ = -8						; size = 4
_v$ = -4						; size = 4
_size$ = 8						; size = 4
_table$ = 12						; size = 4
@CrcUpdateT8@16 PROC
; _v$ = ecx
; _data$ = edx
; Line 32
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _data$[ebp], edx
	mov	DWORD PTR _v$[ebp], ecx
; Line 33
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 34
	jmp	SHORT $LN9@
$LN8@:
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _size$[ebp], ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN9@:
	cmp	DWORD PTR _size$[ebp], 0
	jbe	SHORT $LN7@
	mov	eax, DWORD PTR _p$[ebp]
	and	eax, 7
	je	SHORT $LN7@
; Line 35
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	edx, DWORD PTR _v$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _v$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _table$[ebp]
	xor	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN8@
$LN7@:
; Line 36
	jmp	SHORT $LN6@
$LN5@:
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 8
	mov	DWORD PTR _size$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 8
	mov	DWORD PTR _p$[ebp], eax
$LN6@:
	cmp	DWORD PTR _size$[ebp], 8
	jb	$LN4@
; Line 39
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _v$[ebp]
	xor	edx, DWORD PTR [ecx]
	mov	DWORD PTR _v$[ebp], edx
; Line 44
	mov	eax, DWORD PTR _v$[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _v$[ebp]
	shr	ecx, 8
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _table$[ebp]
	mov	esi, DWORD PTR _table$[ebp]
	mov	eax, DWORD PTR [edx+eax*4+7168]
	xor	eax, DWORD PTR [esi+ecx*4+6144]
	mov	ecx, DWORD PTR _v$[ebp]
	shr	ecx, 16					; 00000010H
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _table$[ebp]
	xor	eax, DWORD PTR [edx+ecx*4+5120]
	mov	ecx, DWORD PTR _v$[ebp]
	shr	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _table$[ebp]
	xor	eax, DWORD PTR [edx+ecx*4+4096]
	mov	DWORD PTR _v$[ebp], eax
; Line 45
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _d$2702[ebp], ecx
; Line 50
	mov	edx, DWORD PTR _d$2702[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _d$2702[ebp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _table$[ebp]
	mov	esi, DWORD PTR _table$[ebp]
	mov	edx, DWORD PTR [ecx+edx*4+3072]
	xor	edx, DWORD PTR [esi+eax*4+2048]
	mov	eax, DWORD PTR _d$2702[ebp]
	shr	eax, 16					; 00000010H
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _table$[ebp]
	xor	edx, DWORD PTR [ecx+eax*4+1024]
	mov	eax, DWORD PTR _d$2702[ebp]
	shr	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _table$[ebp]
	xor	edx, DWORD PTR [ecx+eax*4]
	xor	edx, DWORD PTR _v$[ebp]
	mov	DWORD PTR _v$[ebp], edx
; Line 51
	jmp	$LN5@
$LN4@:
; Line 52
	jmp	SHORT $LN3@
$LN2@:
	mov	edx, DWORD PTR _size$[ebp]
	sub	edx, 1
	mov	DWORD PTR _size$[ebp], edx
	mov	eax, DWORD PTR _p$[ebp]
	add	eax, 1
	mov	DWORD PTR _p$[ebp], eax
$LN3@:
	cmp	DWORD PTR _size$[ebp], 0
	jbe	SHORT $LN1@
; Line 53
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	edx, DWORD PTR _v$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _v$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _table$[ebp]
	xor	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN2@
$LN1@:
; Line 54
	mov	eax, DWORD PTR _v$[ebp]
; Line 55
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	8
@CrcUpdateT8@16 ENDP
_TEXT	ENDS
END
