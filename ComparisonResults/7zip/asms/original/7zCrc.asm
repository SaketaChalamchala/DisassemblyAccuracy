; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\7zCrc.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_g_CrcUpdate:DWORD
COMM	_g_CrcTable:DWORD:0800H
COMM	_g_CrcUpdateT4:DWORD
COMM	_g_CrcUpdateT8:DWORD
_DATA	ENDS
PUBLIC	@CrcUpdate@12
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\7zcrc.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_data$ = -8						; size = 4
_v$ = -4						; size = 4
_size$ = 8						; size = 4
@CrcUpdate@12 PROC
; _v$ = ecx
; _data$ = edx
; Line 36
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _data$[ebp], edx
	mov	DWORD PTR _v$[ebp], ecx
; Line 37
	mov	esi, esp
	push	OFFSET _g_CrcTable
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	edx, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _v$[ebp]
	call	DWORD PTR _g_CrcUpdate
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 38
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
@CrcUpdate@12 ENDP
_TEXT	ENDS
PUBLIC	@CrcCalc@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -8						; size = 4
_data$ = -4						; size = 4
@CrcCalc@8 PROC
; _data$ = ecx
; _size$ = edx
; Line 41
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _size$[ebp], edx
	mov	DWORD PTR _data$[ebp], ecx
; Line 42
	mov	esi, esp
	push	OFFSET _g_CrcTable
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	edx, DWORD PTR _data$[ebp]
	or	ecx, -1
	call	DWORD PTR _g_CrcUpdate
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	eax, -1
; Line 43
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
@CrcCalc@8 ENDP
_TEXT	ENDS
PUBLIC	@CrcUpdateT1@16
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pEnd$ = -16						; size = 4
_p$ = -12						; size = 4
_data$ = -8						; size = 4
_v$ = -4						; size = 4
_size$ = 8						; size = 4
_table$ = 12						; size = 4
@CrcUpdateT1@16 PROC
; _v$ = ecx
; _data$ = edx
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _data$[ebp], edx
	mov	DWORD PTR _v$[ebp], ecx
; Line 49
	mov	eax, DWORD PTR _data$[ebp]
	mov	DWORD PTR _p$[ebp], eax
; Line 50
	mov	ecx, DWORD PTR _p$[ebp]
	add	ecx, DWORD PTR _size$[ebp]
	mov	DWORD PTR _pEnd$[ebp], ecx
; Line 51
	jmp	SHORT $LN3@
$LN2@:
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN3@:
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR _pEnd$[ebp]
	je	SHORT $LN1@
; Line 52
	mov	ecx, DWORD PTR _p$[ebp]
	movzx	edx, BYTE PTR [ecx]
	xor	edx, DWORD PTR _v$[ebp]
	and	edx, 255				; 000000ffH
	mov	eax, DWORD PTR _v$[ebp]
	shr	eax, 8
	mov	ecx, DWORD PTR _table$[ebp]
	xor	eax, DWORD PTR [ecx+edx*4]
	mov	DWORD PTR _v$[ebp], eax
	jmp	SHORT $LN2@
$LN1@:
; Line 53
	mov	eax, DWORD PTR _v$[ebp]
; Line 54
	mov	esp, ebp
	pop	ebp
	ret	8
@CrcUpdateT1@16 ENDP
_TEXT	ENDS
PUBLIC	@CrcGenerateTable@0
EXTRN	_CPU_Is_InOrder@0:PROC
EXTRN	@CrcUpdateT8@16:PROC
EXTRN	@CrcUpdateT4@16:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$2745 = -16						; size = 4
_j$2738 = -12						; size = 4
_r$2737 = -8						; size = 4
_i$ = -4						; size = 4
@CrcGenerateTable@0 PROC
; Line 57
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 59
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN10@
$LN9@:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN10@:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN8@
; Line 61
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _r$2737[ebp], ecx
; Line 63
	mov	DWORD PTR _j$2738[ebp], 0
	jmp	SHORT $LN7@
$LN6@:
	mov	edx, DWORD PTR _j$2738[ebp]
	add	edx, 1
	mov	DWORD PTR _j$2738[ebp], edx
$LN7@:
	cmp	DWORD PTR _j$2738[ebp], 8
	jae	SHORT $LN5@
; Line 64
	mov	eax, DWORD PTR _r$2737[ebp]
	shr	eax, 1
	mov	ecx, DWORD PTR _r$2737[ebp]
	and	ecx, 1
	sub	ecx, 1
	not	ecx
	and	ecx, -306674912				; edb88320H
	xor	eax, ecx
	mov	DWORD PTR _r$2737[ebp], eax
	jmp	SHORT $LN6@
$LN5@:
; Line 65
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _r$2737[ebp]
	mov	DWORD PTR _g_CrcTable[edx*4], eax
; Line 66
	jmp	SHORT $LN9@
$LN8@:
; Line 67
	jmp	SHORT $LN4@
$LN3@:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@:
	cmp	DWORD PTR _i$[ebp], 2048		; 00000800H
	jae	SHORT $LN2@
; Line 69
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _g_CrcTable[edx*4-1024]
	mov	DWORD PTR _r$2745[ebp], eax
; Line 70
	mov	ecx, DWORD PTR _r$2745[ebp]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _r$2745[ebp]
	shr	edx, 8
	xor	edx, DWORD PTR _g_CrcTable[ecx*4]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _g_CrcTable[eax*4], edx
; Line 71
	jmp	SHORT $LN3@
$LN2@:
; Line 81
	mov	DWORD PTR _g_CrcUpdateT4, OFFSET @CrcUpdateT4@16
; Line 82
	mov	DWORD PTR _g_CrcUpdate, OFFSET @CrcUpdateT4@16
; Line 85
	mov	DWORD PTR _g_CrcUpdateT8, OFFSET @CrcUpdateT8@16
; Line 88
	call	_CPU_Is_InOrder@0
	test	eax, eax
	jne	SHORT $LN11@
; Line 89
	mov	DWORD PTR _g_CrcUpdate, OFFSET @CrcUpdateT8@16
$LN11@:
; Line 128
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
@CrcGenerateTable@0 ENDP
_TEXT	ENDS
END
