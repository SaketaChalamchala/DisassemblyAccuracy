; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\Common\MyString.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?FindCharPosInString@@YGHPBDD@Z			; FindCharPosInString
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_p$68286 = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 1
?FindCharPosInString@@YGHPBDD@Z PROC			; FindCharPosInString
; Line 33
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 34
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _p$68286[ebp], eax
	jmp	SHORT $LN5@FindCharPo
$LN4@FindCharPo:
	mov	ecx, DWORD PTR _p$68286[ebp]
	add	ecx, 1
	mov	DWORD PTR _p$68286[ebp], ecx
$LN5@FindCharPo:
; Line 36
	mov	edx, DWORD PTR _p$68286[ebp]
	movsx	eax, BYTE PTR [edx]
	movsx	ecx, BYTE PTR _c$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN2@FindCharPo
; Line 37
	mov	eax, DWORD PTR _p$68286[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	jmp	SHORT $LN6@FindCharPo
$LN2@FindCharPo:
; Line 38
	mov	edx, DWORD PTR _p$68286[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN1@FindCharPo
; Line 39
	or	eax, -1
	jmp	SHORT $LN6@FindCharPo
$LN1@FindCharPo:
; Line 41
	jmp	SHORT $LN4@FindCharPo
$LN6@FindCharPo:
; Line 42
	mov	esp, ebp
	pop	ebp
	ret	8
?FindCharPosInString@@YGHPBDD@Z ENDP			; FindCharPosInString
_TEXT	ENDS
PUBLIC	?FindCharPosInString@@YGHPB_W_W@Z		; FindCharPosInString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$68297 = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 2
?FindCharPosInString@@YGHPB_W_W@Z PROC			; FindCharPosInString
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 46
	mov	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _p$68297[ebp], eax
	jmp	SHORT $LN5@FindCharPo@2
$LN4@FindCharPo@2:
	mov	ecx, DWORD PTR _p$68297[ebp]
	add	ecx, 2
	mov	DWORD PTR _p$68297[ebp], ecx
$LN5@FindCharPo@2:
; Line 48
	mov	edx, DWORD PTR _p$68297[ebp]
	movzx	eax, WORD PTR [edx]
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN2@FindCharPo@2
; Line 49
	mov	eax, DWORD PTR _p$68297[ebp]
	sub	eax, DWORD PTR _s$[ebp]
	sar	eax, 1
	jmp	SHORT $LN6@FindCharPo@2
$LN2@FindCharPo@2:
; Line 50
	mov	edx, DWORD PTR _p$68297[ebp]
	movzx	eax, WORD PTR [edx]
	test	eax, eax
	jne	SHORT $LN1@FindCharPo@2
; Line 51
	or	eax, -1
	jmp	SHORT $LN6@FindCharPo@2
$LN1@FindCharPo@2:
; Line 52
	jmp	SHORT $LN4@FindCharPo@2
$LN6@FindCharPo@2:
; Line 53
	mov	esp, ebp
	pop	ebp
	ret	8
?FindCharPosInString@@YGHPB_W_W@Z ENDP			; FindCharPosInString
_TEXT	ENDS
PUBLIC	?MyCharLower_Ascii@@YGDD@Z			; MyCharLower_Ascii
PUBLIC	?MyStringLower_Ascii@@YGXPAD@Z			; MyStringLower_Ascii
EXTRN	__RTC_CheckEsp:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$68310 = -1						; size = 1
_s$ = 8							; size = 4
?MyStringLower_Ascii@@YGXPAD@Z PROC			; MyStringLower_Ascii
; Line 69
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN3@MyStringLo:
; Line 72
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$68310[ebp], cl
; Line 73
	movsx	edx, BYTE PTR _c$68310[ebp]
	test	edx, edx
	jne	SHORT $LN1@MyStringLo
; Line 74
	jmp	SHORT $LN4@MyStringLo
$LN1@MyStringLo:
; Line 75
	movzx	eax, BYTE PTR _c$68310[ebp]
	push	eax
	call	?MyCharLower_Ascii@@YGDD@Z		; MyCharLower_Ascii
	mov	ecx, DWORD PTR _s$[ebp]
	mov	BYTE PTR [ecx], al
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 76
	jmp	SHORT $LN3@MyStringLo
$LN4@MyStringLo:
; Line 77
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?MyStringLower_Ascii@@YGXPAD@Z ENDP			; MyStringLower_Ascii
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyCharLower_Ascii@@YGDD@Z
_TEXT	SEGMENT
_c$ = 8							; size = 1
?MyCharLower_Ascii@@YGDD@Z PROC				; MyCharLower_Ascii, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 106
	push	ebp
	mov	ebp, esp
; Line 107
	movsx	eax, BYTE PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN1@MyCharLowe
	movsx	ecx, BYTE PTR _c$[ebp]
	cmp	ecx, 90					; 0000005aH
	jg	SHORT $LN1@MyCharLowe
; Line 108
	movzx	eax, BYTE PTR _c$[ebp]
	add	eax, 32					; 00000020H
	jmp	SHORT $LN2@MyCharLowe
$LN1@MyCharLowe:
; Line 109
	mov	al, BYTE PTR _c$[ebp]
$LN2@MyCharLowe:
; Line 110
	pop	ebp
	ret	4
?MyCharLower_Ascii@@YGDD@Z ENDP				; MyCharLower_Ascii
_TEXT	ENDS
PUBLIC	?MyCharLower_Ascii@@YG_W_W@Z			; MyCharLower_Ascii
PUBLIC	?MyStringLower_Ascii@@YGXPA_W@Z			; MyStringLower_Ascii
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$68318 = -4						; size = 2
_s$ = 8							; size = 4
?MyStringLower_Ascii@@YGXPA_W@Z PROC			; MyStringLower_Ascii
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 80
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN3@MyStringLo@2:
; Line 83
	mov	eax, DWORD PTR _s$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$68318[ebp], cx
; Line 84
	movzx	edx, WORD PTR _c$68318[ebp]
	test	edx, edx
	jne	SHORT $LN1@MyStringLo@2
; Line 85
	jmp	SHORT $LN4@MyStringLo@2
$LN1@MyStringLo@2:
; Line 86
	movzx	eax, WORD PTR _c$68318[ebp]
	push	eax
	call	?MyCharLower_Ascii@@YG_W_W@Z		; MyCharLower_Ascii
	mov	ecx, DWORD PTR _s$[ebp]
	mov	WORD PTR [ecx], ax
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 2
	mov	DWORD PTR _s$[ebp], edx
; Line 87
	jmp	SHORT $LN3@MyStringLo@2
$LN4@MyStringLo@2:
; Line 88
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?MyStringLower_Ascii@@YGXPA_W@Z ENDP			; MyStringLower_Ascii
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyCharLower_Ascii@@YG_W_W@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?MyCharLower_Ascii@@YG_W_W@Z PROC			; MyCharLower_Ascii, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 113
	push	ebp
	mov	ebp, esp
; Line 114
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN1@MyCharLowe@2
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 90					; 0000005aH
	jg	SHORT $LN1@MyCharLowe@2
; Line 115
	movzx	eax, WORD PTR _c$[ebp]
	add	eax, 32					; 00000020H
	jmp	SHORT $LN2@MyCharLowe@2
$LN1@MyCharLowe@2:
; Line 116
	mov	ax, WORD PTR _c$[ebp]
$LN2@MyCharLowe@2:
; Line 117
	pop	ebp
	ret	4
?MyCharLower_Ascii@@YG_W_W@Z ENDP			; MyCharLower_Ascii
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?MyCharUpper_WIN@@YG_W_W@Z			; MyCharUpper_WIN
EXTRN	__imp__MultiByteToWideChar@24:PROC
EXTRN	__imp__CharUpperA@4:PROC
EXTRN	__imp__WideCharToMultiByte@32:PROC
EXTRN	__imp__GetLastError@0:PROC
EXTRN	__imp__CharUpperW@4:PROC
EXTRN	___security_cookie:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_numChars$ = -32					; size = 4
_s$ = -24						; size = 5
_kBufSize$ = -12					; size = 4
_res$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_c$ = 8							; size = 2
?MyCharUpper_WIN@@YG_W_W@Z PROC				; MyCharUpper_WIN
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 106
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 107
	movzx	eax, WORD PTR _c$[ebp]
	mov	esi, esp
	push	eax
	call	DWORD PTR __imp__CharUpperW@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res$[ebp], eax
; Line 108
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN3@MyCharUppe
	mov	esi, esp
	call	DWORD PTR __imp__GetLastError@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	cmp	eax, 120				; 00000078H
	je	SHORT $LN4@MyCharUppe
$LN3@MyCharUppe:
; Line 109
	mov	ax, WORD PTR _res$[ebp]
	jmp	SHORT $LN5@MyCharUppe
$LN4@MyCharUppe:
; Line 110
	mov	DWORD PTR _kBufSize$[ebp], 4
; Line 112
	mov	esi, esp
	push	0
	push	0
	push	4
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	1
	lea	edx, DWORD PTR _c$[ebp]
	push	edx
	push	0
	push	0
	call	DWORD PTR __imp__WideCharToMultiByte@32
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _numChars$[ebp], eax
; Line 113
	cmp	DWORD PTR _numChars$[ebp], 0
	je	SHORT $LN1@MyCharUppe
	cmp	DWORD PTR _numChars$[ebp], 4
	jle	SHORT $LN2@MyCharUppe
$LN1@MyCharUppe:
; Line 114
	mov	ax, WORD PTR _c$[ebp]
	jmp	SHORT $LN5@MyCharUppe
$LN2@MyCharUppe:
; Line 115
	mov	eax, DWORD PTR _numChars$[ebp]
	mov	BYTE PTR _s$[ebp+eax], 0
; Line 116
	mov	esi, esp
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	call	DWORD PTR __imp__CharUpperA@4
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 117
	mov	esi, esp
	push	1
	lea	edx, DWORD PTR _c$[ebp]
	push	edx
	mov	eax, DWORD PTR _numChars$[ebp]
	push	eax
	lea	ecx, DWORD PTR _s$[ebp]
	push	ecx
	push	0
	push	0
	call	DWORD PTR __imp__MultiByteToWideChar@24
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 118
	mov	ax, WORD PTR _c$[ebp]
$LN5@MyCharUppe:
; Line 119
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@MyCharUppe
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
$LN9@MyCharUppe:
	DD	1
	DD	$LN8@MyCharUppe
$LN8@MyCharUppe:
	DD	-24					; ffffffe8H
	DD	5
	DD	$LN7@MyCharUppe
$LN7@MyCharUppe:
	DB	115					; 00000073H
	DB	0
?MyCharUpper_WIN@@YG_W_W@Z ENDP				; MyCharUpper_WIN
_TEXT	ENDS
PUBLIC	?IsString1PrefixedByString2@@YG_NPBD0@Z		; IsString1PrefixedByString2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c1$68347 = -2						; size = 1
_c2$68344 = -1						; size = 1
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?IsString1PrefixedByString2@@YG_NPBD0@Z PROC		; IsString1PrefixedByString2
; Line 174
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN4@IsString1P:
; Line 177
	mov	eax, DWORD PTR _s2$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c2$68344[ebp], cl
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, 1
	mov	DWORD PTR _s2$[ebp], edx
	movzx	eax, BYTE PTR _c2$68344[ebp]
	test	eax, eax
	jne	SHORT $LN2@IsString1P
	mov	al, 1
	jmp	SHORT $LN5@IsString1P
$LN2@IsString1P:
; Line 178
	mov	ecx, DWORD PTR _s1$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _c1$68347[ebp], dl
	mov	eax, DWORD PTR _s1$[ebp]
	add	eax, 1
	mov	DWORD PTR _s1$[ebp], eax
	movzx	ecx, BYTE PTR _c1$68347[ebp]
	movzx	edx, BYTE PTR _c2$68344[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@IsString1P
	xor	al, al
	jmp	SHORT $LN5@IsString1P
$LN1@IsString1P:
; Line 179
	jmp	SHORT $LN4@IsString1P
$LN5@IsString1P:
; Line 180
	mov	esp, ebp
	pop	ebp
	ret	8
?IsString1PrefixedByString2@@YG_NPBD0@Z ENDP		; IsString1PrefixedByString2
_TEXT	ENDS
PUBLIC	?MyCharUpper@@YG_W_W@Z				; MyCharUpper
PUBLIC	?StringsAreEqualNoCase@@YG_NPB_W0@Z		; StringsAreEqualNoCase
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c2$68358 = -8						; size = 2
_c1$68357 = -4						; size = 2
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?StringsAreEqualNoCase@@YG_NPB_W0@Z PROC		; StringsAreEqualNoCase
; Line 183
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN4@StringsAre:
; Line 186
	mov	eax, DWORD PTR _s1$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c1$68357[ebp], cx
	mov	edx, DWORD PTR _s1$[ebp]
	add	edx, 2
	mov	DWORD PTR _s1$[ebp], edx
; Line 187
	mov	eax, DWORD PTR _s2$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c2$68358[ebp], cx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, 2
	mov	DWORD PTR _s2$[ebp], edx
; Line 188
	movzx	eax, WORD PTR _c1$68357[ebp]
	movzx	ecx, WORD PTR _c2$68358[ebp]
	cmp	eax, ecx
	je	SHORT $LN2@StringsAre
	movzx	edx, WORD PTR _c1$68357[ebp]
	push	edx
	call	?MyCharUpper@@YG_W_W@Z			; MyCharUpper
	movzx	esi, ax
	movzx	eax, WORD PTR _c2$68358[ebp]
	push	eax
	call	?MyCharUpper@@YG_W_W@Z			; MyCharUpper
	movzx	ecx, ax
	cmp	esi, ecx
	je	SHORT $LN2@StringsAre
	xor	al, al
	jmp	SHORT $LN5@StringsAre
$LN2@StringsAre:
; Line 189
	movzx	edx, WORD PTR _c1$68357[ebp]
	test	edx, edx
	jne	SHORT $LN1@StringsAre
	mov	al, 1
	jmp	SHORT $LN5@StringsAre
$LN1@StringsAre:
; Line 190
	jmp	SHORT $LN4@StringsAre
$LN5@StringsAre:
; Line 191
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?StringsAreEqualNoCase@@YG_NPB_W0@Z ENDP		; StringsAreEqualNoCase
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyCharUpper@@YG_W_W@Z
_TEXT	SEGMENT
_c$ = 8							; size = 2
?MyCharUpper@@YG_W_W@Z PROC				; MyCharUpper, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 122
	push	ebp
	mov	ebp, esp
; Line 123
	movzx	eax, WORD PTR _c$[ebp]
	cmp	eax, 97					; 00000061H
	jge	SHORT $LN3@MyCharUppe@2
	mov	ax, WORD PTR _c$[ebp]
	jmp	SHORT $LN4@MyCharUppe@2
$LN3@MyCharUppe@2:
; Line 124
	movzx	ecx, WORD PTR _c$[ebp]
	cmp	ecx, 122				; 0000007aH
	jg	SHORT $LN2@MyCharUppe@2
	movzx	eax, WORD PTR _c$[ebp]
	sub	eax, 32					; 00000020H
	jmp	SHORT $LN4@MyCharUppe@2
$LN2@MyCharUppe@2:
; Line 125
	movzx	edx, WORD PTR _c$[ebp]
	cmp	edx, 127				; 0000007fH
	jg	SHORT $LN1@MyCharUppe@2
	mov	ax, WORD PTR _c$[ebp]
	jmp	SHORT $LN4@MyCharUppe@2
$LN1@MyCharUppe@2:
; Line 130
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	call	?MyCharUpper_WIN@@YG_W_W@Z		; MyCharUpper_WIN
$LN4@MyCharUppe@2:
; Line 135
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?MyCharUpper@@YG_W_W@Z ENDP				; MyCharUpper
_TEXT	ENDS
PUBLIC	?IsPrefixedBy_Ascii_NoCase@AString@@QBE_NPBD@Z	; AString::IsPrefixedBy_Ascii_NoCase
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c1$68371 = -10						; size = 1
_c2$68369 = -9						; size = 1
_s1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsPrefixedBy_Ascii_NoCase@AString@@QBE_NPBD@Z PROC	; AString::IsPrefixedBy_Ascii_NoCase
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 197
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s1$[ebp], ecx
$LN4@IsPrefixed:
; Line 200
	mov	edx, DWORD PTR _s$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c2$68369[ebp], al
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
; Line 201
	movsx	edx, BYTE PTR _c2$68369[ebp]
	test	edx, edx
	jne	SHORT $LN2@IsPrefixed
; Line 202
	mov	al, 1
	jmp	SHORT $LN5@IsPrefixed
$LN2@IsPrefixed:
; Line 203
	mov	eax, DWORD PTR _s1$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c1$68371[ebp], cl
	mov	edx, DWORD PTR _s1$[ebp]
	add	edx, 1
	mov	DWORD PTR _s1$[ebp], edx
; Line 205
	movzx	eax, BYTE PTR _c1$68371[ebp]
	push	eax
	call	?MyCharLower_Ascii@@YGDD@Z		; MyCharLower_Ascii
	movsx	esi, al
	movzx	ecx, BYTE PTR _c2$68369[ebp]
	push	ecx
	call	?MyCharLower_Ascii@@YGDD@Z		; MyCharLower_Ascii
	movsx	edx, al
	cmp	esi, edx
	je	SHORT $LN1@IsPrefixed
; Line 206
	xor	al, al
	jmp	SHORT $LN5@IsPrefixed
$LN1@IsPrefixed:
; Line 207
	jmp	SHORT $LN4@IsPrefixed
$LN5@IsPrefixed:
; Line 208
	pop	esi
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsPrefixedBy_Ascii_NoCase@AString@@QBE_NPBD@Z ENDP	; AString::IsPrefixedBy_Ascii_NoCase
_TEXT	ENDS
PUBLIC	?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z	; UString::IsPrefixedBy_Ascii_NoCase
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c1$68383 = -16						; size = 2
_c2$68381 = -9						; size = 1
_s1$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z PROC	; UString::IsPrefixedBy_Ascii_NoCase
; _this$ = ecx
; Line 211
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 212
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _s1$[ebp], ecx
$LN4@IsPrefixed@2:
; Line 215
	mov	edx, DWORD PTR _s$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c2$68381[ebp], al
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$[ebp], ecx
; Line 216
	movsx	edx, BYTE PTR _c2$68381[ebp]
	test	edx, edx
	jne	SHORT $LN2@IsPrefixed@2
; Line 217
	mov	al, 1
	jmp	SHORT $LN5@IsPrefixed@2
$LN2@IsPrefixed@2:
; Line 218
	mov	eax, DWORD PTR _s1$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c1$68383[ebp], cx
	mov	edx, DWORD PTR _s1$[ebp]
	add	edx, 2
	mov	DWORD PTR _s1$[ebp], edx
; Line 219
	movzx	eax, WORD PTR _c1$68383[ebp]
	push	eax
	call	?MyCharLower_Ascii@@YG_W_W@Z		; MyCharLower_Ascii
	movzx	esi, ax
	movzx	ecx, BYTE PTR _c2$68381[ebp]
	push	ecx
	call	?MyCharLower_Ascii@@YGDD@Z		; MyCharLower_Ascii
	movzx	edx, al
	cmp	esi, edx
	je	SHORT $LN1@IsPrefixed@2
; Line 220
	xor	al, al
	jmp	SHORT $LN5@IsPrefixed@2
$LN1@IsPrefixed@2:
; Line 221
	jmp	SHORT $LN4@IsPrefixed@2
$LN5@IsPrefixed@2:
; Line 222
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z ENDP	; UString::IsPrefixedBy_Ascii_NoCase
_TEXT	ENDS
PUBLIC	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z		; StringsAreEqual_Ascii
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$68393 = -1						; size = 1
_u$ = 8							; size = 4
_a$ = 12						; size = 4
?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z PROC		; StringsAreEqual_Ascii
; Line 225
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN4@StringsAre@2:
; Line 228
	mov	eax, DWORD PTR _a$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$68393[ebp], cl
; Line 229
	movzx	edx, BYTE PTR _c$68393[ebp]
	mov	eax, DWORD PTR _u$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	edx, ecx
	je	SHORT $LN2@StringsAre@2
; Line 230
	xor	al, al
	jmp	SHORT $LN5@StringsAre@2
$LN2@StringsAre@2:
; Line 231
	movzx	edx, BYTE PTR _c$68393[ebp]
	test	edx, edx
	jne	SHORT $LN1@StringsAre@2
; Line 232
	mov	al, 1
	jmp	SHORT $LN5@StringsAre@2
$LN1@StringsAre@2:
; Line 233
	mov	eax, DWORD PTR _a$[ebp]
	add	eax, 1
	mov	DWORD PTR _a$[ebp], eax
; Line 234
	mov	ecx, DWORD PTR _u$[ebp]
	add	ecx, 2
	mov	DWORD PTR _u$[ebp], ecx
; Line 235
	jmp	SHORT $LN4@StringsAre@2
$LN5@StringsAre@2:
; Line 236
	mov	esp, ebp
	pop	ebp
	ret	8
?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z ENDP		; StringsAreEqual_Ascii
_TEXT	ENDS
PUBLIC	?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z	; StringsAreEqualNoCase_Ascii
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c2$68404 = -2						; size = 1
_c1$68403 = -1						; size = 1
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z PROC		; StringsAreEqualNoCase_Ascii
; Line 239
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN4@StringsAre@3:
; Line 242
	mov	eax, DWORD PTR _s1$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c1$68403[ebp], cl
	mov	edx, DWORD PTR _s1$[ebp]
	add	edx, 1
	mov	DWORD PTR _s1$[ebp], edx
; Line 243
	mov	eax, DWORD PTR _s2$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c2$68404[ebp], cl
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, 1
	mov	DWORD PTR _s2$[ebp], edx
; Line 244
	movsx	eax, BYTE PTR _c1$68403[ebp]
	movsx	ecx, BYTE PTR _c2$68404[ebp]
	cmp	eax, ecx
	je	SHORT $LN2@StringsAre@3
	movzx	edx, BYTE PTR _c1$68403[ebp]
	push	edx
	call	?MyCharLower_Ascii@@YGDD@Z		; MyCharLower_Ascii
	movsx	esi, al
	movzx	eax, BYTE PTR _c2$68404[ebp]
	push	eax
	call	?MyCharLower_Ascii@@YGDD@Z		; MyCharLower_Ascii
	movsx	ecx, al
	cmp	esi, ecx
	je	SHORT $LN2@StringsAre@3
; Line 245
	xor	al, al
	jmp	SHORT $LN5@StringsAre@3
$LN2@StringsAre@3:
; Line 246
	movsx	edx, BYTE PTR _c1$68403[ebp]
	test	edx, edx
	jne	SHORT $LN1@StringsAre@3
; Line 247
	mov	al, 1
	jmp	SHORT $LN5@StringsAre@3
$LN1@StringsAre@3:
; Line 248
	jmp	SHORT $LN4@StringsAre@3
$LN5@StringsAre@3:
; Line 249
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z ENDP		; StringsAreEqualNoCase_Ascii
_TEXT	ENDS
PUBLIC	?StringsAreEqualNoCase_Ascii@@YG_NPB_W0@Z	; StringsAreEqualNoCase_Ascii
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c2$68415 = -8						; size = 2
_c1$68414 = -4						; size = 2
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?StringsAreEqualNoCase_Ascii@@YG_NPB_W0@Z PROC		; StringsAreEqualNoCase_Ascii
; Line 252
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN4@StringsAre@4:
; Line 255
	mov	eax, DWORD PTR _s1$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c1$68414[ebp], cx
	mov	edx, DWORD PTR _s1$[ebp]
	add	edx, 2
	mov	DWORD PTR _s1$[ebp], edx
; Line 256
	mov	eax, DWORD PTR _s2$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c2$68415[ebp], cx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, 2
	mov	DWORD PTR _s2$[ebp], edx
; Line 257
	movzx	eax, WORD PTR _c1$68414[ebp]
	movzx	ecx, WORD PTR _c2$68415[ebp]
	cmp	eax, ecx
	je	SHORT $LN2@StringsAre@4
	movzx	edx, WORD PTR _c1$68414[ebp]
	push	edx
	call	?MyCharLower_Ascii@@YG_W_W@Z		; MyCharLower_Ascii
	movzx	esi, ax
	movzx	eax, WORD PTR _c2$68415[ebp]
	push	eax
	call	?MyCharLower_Ascii@@YG_W_W@Z		; MyCharLower_Ascii
	movzx	ecx, ax
	cmp	esi, ecx
	je	SHORT $LN2@StringsAre@4
; Line 258
	xor	al, al
	jmp	SHORT $LN5@StringsAre@4
$LN2@StringsAre@4:
; Line 259
	movzx	edx, WORD PTR _c1$68414[ebp]
	test	edx, edx
	jne	SHORT $LN1@StringsAre@4
; Line 260
	mov	al, 1
	jmp	SHORT $LN5@StringsAre@4
$LN1@StringsAre@4:
; Line 261
	jmp	SHORT $LN4@StringsAre@4
$LN5@StringsAre@4:
; Line 262
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?StringsAreEqualNoCase_Ascii@@YG_NPB_W0@Z ENDP		; StringsAreEqualNoCase_Ascii
_TEXT	ENDS
PUBLIC	?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z	; StringsAreEqualNoCase_Ascii
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c2$68426 = -5						; size = 1
_c1$68425 = -4						; size = 2
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z PROC	; StringsAreEqualNoCase_Ascii
; Line 265
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN5@StringsAre@5:
; Line 268
	mov	eax, DWORD PTR _s1$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c1$68425[ebp], cx
	mov	edx, DWORD PTR _s1$[ebp]
	add	edx, 2
	mov	DWORD PTR _s1$[ebp], edx
; Line 269
	mov	eax, DWORD PTR _s2$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c2$68426[ebp], cl
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, 1
	mov	DWORD PTR _s2$[ebp], edx
; Line 270
	movzx	eax, WORD PTR _c1$68425[ebp]
	movzx	ecx, BYTE PTR _c2$68426[ebp]
	cmp	eax, ecx
	je	SHORT $LN3@StringsAre@5
	movzx	edx, WORD PTR _c1$68425[ebp]
	cmp	edx, 127				; 0000007fH
	jg	SHORT $LN2@StringsAre@5
	movzx	eax, WORD PTR _c1$68425[ebp]
	push	eax
	call	?MyCharLower_Ascii@@YG_W_W@Z		; MyCharLower_Ascii
	movzx	esi, ax
	movzx	ecx, BYTE PTR _c2$68426[ebp]
	push	ecx
	call	?MyCharLower_Ascii@@YGDD@Z		; MyCharLower_Ascii
	movzx	edx, al
	cmp	esi, edx
	je	SHORT $LN3@StringsAre@5
$LN2@StringsAre@5:
; Line 271
	xor	al, al
	jmp	SHORT $LN6@StringsAre@5
$LN3@StringsAre@5:
; Line 272
	movzx	eax, WORD PTR _c1$68425[ebp]
	test	eax, eax
	jne	SHORT $LN1@StringsAre@5
; Line 273
	mov	al, 1
	jmp	SHORT $LN6@StringsAre@5
$LN1@StringsAre@5:
; Line 274
	jmp	SHORT $LN5@StringsAre@5
$LN6@StringsAre@5:
; Line 275
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z ENDP	; StringsAreEqualNoCase_Ascii
_TEXT	ENDS
PUBLIC	?IsString1PrefixedByString2@@YG_NPB_W0@Z	; IsString1PrefixedByString2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c1$68441 = -8						; size = 2
_c2$68439 = -4						; size = 2
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?IsString1PrefixedByString2@@YG_NPB_W0@Z PROC		; IsString1PrefixedByString2
; Line 278
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN4@IsString1P@2:
; Line 281
	mov	eax, DWORD PTR _s2$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c2$68439[ebp], cx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, 2
	mov	DWORD PTR _s2$[ebp], edx
	movzx	eax, WORD PTR _c2$68439[ebp]
	test	eax, eax
	jne	SHORT $LN2@IsString1P@2
	mov	al, 1
	jmp	SHORT $LN5@IsString1P@2
$LN2@IsString1P@2:
; Line 282
	mov	ecx, DWORD PTR _s1$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _c1$68441[ebp], dx
	mov	eax, DWORD PTR _s1$[ebp]
	add	eax, 2
	mov	DWORD PTR _s1$[ebp], eax
	movzx	ecx, WORD PTR _c1$68441[ebp]
	movzx	edx, WORD PTR _c2$68439[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@IsString1P@2
	xor	al, al
	jmp	SHORT $LN5@IsString1P@2
$LN1@IsString1P@2:
; Line 283
	jmp	SHORT $LN4@IsString1P@2
$LN5@IsString1P@2:
; Line 284
	mov	esp, ebp
	pop	ebp
	ret	8
?IsString1PrefixedByString2@@YG_NPB_W0@Z ENDP		; IsString1PrefixedByString2
_TEXT	ENDS
PUBLIC	?IsString1PrefixedByString2_NoCase@@YG_NPB_W0@Z	; IsString1PrefixedByString2_NoCase
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c1$68452 = -8						; size = 2
_c2$68450 = -4						; size = 2
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?IsString1PrefixedByString2_NoCase@@YG_NPB_W0@Z PROC	; IsString1PrefixedByString2_NoCase
; Line 287
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN4@IsString1P@3:
; Line 290
	mov	eax, DWORD PTR _s2$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c2$68450[ebp], cx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, 2
	mov	DWORD PTR _s2$[ebp], edx
	movzx	eax, WORD PTR _c2$68450[ebp]
	test	eax, eax
	jne	SHORT $LN2@IsString1P@3
	mov	al, 1
	jmp	SHORT $LN5@IsString1P@3
$LN2@IsString1P@3:
; Line 291
	mov	ecx, DWORD PTR _s1$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR _c1$68452[ebp], dx
	mov	eax, DWORD PTR _s1$[ebp]
	add	eax, 2
	mov	DWORD PTR _s1$[ebp], eax
; Line 292
	movzx	ecx, WORD PTR _c1$68452[ebp]
	movzx	edx, WORD PTR _c2$68450[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@IsString1P@3
	movzx	eax, WORD PTR _c1$68452[ebp]
	push	eax
	call	?MyCharUpper@@YG_W_W@Z			; MyCharUpper
	movzx	esi, ax
	movzx	ecx, WORD PTR _c2$68450[ebp]
	push	ecx
	call	?MyCharUpper@@YG_W_W@Z			; MyCharUpper
	movzx	edx, ax
	cmp	esi, edx
	je	SHORT $LN1@IsString1P@3
; Line 293
	xor	al, al
	jmp	SHORT $LN5@IsString1P@3
$LN1@IsString1P@3:
; Line 294
	jmp	SHORT $LN4@IsString1P@3
$LN5@IsString1P@3:
; Line 295
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?IsString1PrefixedByString2_NoCase@@YG_NPB_W0@Z ENDP	; IsString1PrefixedByString2_NoCase
_TEXT	ENDS
PUBLIC	?MyStringCompareNoCase@@YGHPB_W0@Z		; MyStringCompareNoCase
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_u2$68465 = -16						; size = 2
_u1$68464 = -12						; size = 2
_c2$68462 = -8						; size = 2
_c1$68461 = -4						; size = 2
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
?MyStringCompareNoCase@@YGHPB_W0@Z PROC			; MyStringCompareNoCase
; Line 299
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
$LN6@MyStringCo:
; Line 302
	mov	eax, DWORD PTR _s1$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c1$68461[ebp], cx
	mov	edx, DWORD PTR _s1$[ebp]
	add	edx, 2
	mov	DWORD PTR _s1$[ebp], edx
; Line 303
	mov	eax, DWORD PTR _s2$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c2$68462[ebp], cx
	mov	edx, DWORD PTR _s2$[ebp]
	add	edx, 2
	mov	DWORD PTR _s2$[ebp], edx
; Line 304
	movzx	eax, WORD PTR _c1$68461[ebp]
	movzx	ecx, WORD PTR _c2$68462[ebp]
	cmp	eax, ecx
	je	SHORT $LN4@MyStringCo
; Line 306
	movzx	edx, WORD PTR _c1$68461[ebp]
	push	edx
	call	?MyCharUpper@@YG_W_W@Z			; MyCharUpper
	mov	WORD PTR _u1$68464[ebp], ax
; Line 307
	movzx	eax, WORD PTR _c2$68462[ebp]
	push	eax
	call	?MyCharUpper@@YG_W_W@Z			; MyCharUpper
	mov	WORD PTR _u2$68465[ebp], ax
; Line 308
	movzx	ecx, WORD PTR _u1$68464[ebp]
	movzx	edx, WORD PTR _u2$68465[ebp]
	cmp	ecx, edx
	jge	SHORT $LN3@MyStringCo
	or	eax, -1
	jmp	SHORT $LN7@MyStringCo
$LN3@MyStringCo:
; Line 309
	movzx	eax, WORD PTR _u1$68464[ebp]
	movzx	ecx, WORD PTR _u2$68465[ebp]
	cmp	eax, ecx
	jle	SHORT $LN4@MyStringCo
	mov	eax, 1
	jmp	SHORT $LN7@MyStringCo
$LN4@MyStringCo:
; Line 311
	movzx	edx, WORD PTR _c1$68461[ebp]
	test	edx, edx
	jne	SHORT $LN1@MyStringCo
	xor	eax, eax
	jmp	SHORT $LN7@MyStringCo
$LN1@MyStringCo:
; Line 312
	jmp	SHORT $LN6@MyStringCo
$LN7@MyStringCo:
; Line 313
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MyStringCompareNoCase@@YGHPB_W0@Z ENDP			; MyStringCompareNoCase
_TEXT	ENDS
PUBLIC	?MoveItems@AString@@AAEXII@Z			; AString::MoveItems
PUBLIC	?Grow@AString@@AAEXI@Z				; AString::Grow
PUBLIC	?InsertSpace@AString@@AAEXAAII@Z		; AString::InsertSpace
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_size$ = 12						; size = 4
?InsertSpace@AString@@AAEXAAII@Z PROC			; AString::InsertSpace
; _this$ = ecx
; Line 338
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 339
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@AString@@AAEXI@Z			; AString::Grow
; Line 340
	mov	ecx, DWORD PTR _index$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _index$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@AString@@AAEXII@Z		; AString::MoveItems
; Line 341
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?InsertSpace@AString@@AAEXAAII@Z ENDP			; AString::InsertSpace
_TEXT	ENDS
EXTRN	__imp__memmove:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MoveItems@AString@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
?MoveItems@AString@@AAEXII@Z PROC			; AString::MoveItems, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 192
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 193
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	esi, esp
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _src$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _dest$[ebp]
	push	edx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 194
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@AString@@AAEXII@Z ENDP			; AString::MoveItems
_TEXT	ENDS
PUBLIC	__TI1H
PUBLIC	?ReAlloc@AString@@AAEXI@Z			; AString::ReAlloc
PUBLIC	__CTA1H
PUBLIC	__CT??_R0H@84
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	_memcpy:PROC
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0H@8
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T69346 = -20						; size = 4
$T69345 = -16						; size = 4
$T69343 = -12						; size = 4
_newBuf$ = -8						; size = 4
_this$ = -4						; size = 4
_newLimit$ = 8						; size = 4
?ReAlloc@AString@@AAEXI@Z PROC				; AString::ReAlloc
; _this$ = ecx
; Line 346
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 347
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newLimit$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@ReAlloc
	cmp	DWORD PTR _newLimit$[ebp], 1073741824	; 40000000H
	jb	SHORT $LN2@ReAlloc
$LN1@ReAlloc:
	mov	DWORD PTR $T69343[ebp], 20130220	; 013329acH
	push	OFFSET __TI1H
	lea	edx, DWORD PTR $T69343[ebp]
	push	edx
	call	__CxxThrowException@8
$LN2@ReAlloc:
; Line 349
	mov	eax, DWORD PTR _newLimit$[ebp]
	add	eax, 1
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69345[ebp], eax
	mov	ecx, DWORD PTR $T69345[ebp]
	mov	DWORD PTR _newBuf$[ebp], ecx
; Line 350
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _newBuf$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 351
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T69346[ebp], edx
	mov	eax, DWORD PTR $T69346[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 352
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newBuf$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 353
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newLimit$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@ReAlloc:
; Line 354
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReAlloc@AString@@AAEXI@Z ENDP				; AString::ReAlloc
_TEXT	ENDS
PUBLIC	?ReAlloc2@AString@@AAEXI@Z			; AString::ReAlloc2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69350 = -20						; size = 4
$T69349 = -16						; size = 4
$T69348 = -12						; size = 4
_newBuf$ = -8						; size = 4
_this$ = -4						; size = 4
_newLimit$ = 8						; size = 4
?ReAlloc2@AString@@AAEXI@Z PROC				; AString::ReAlloc2
; _this$ = ecx
; Line 357
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 358
	cmp	DWORD PTR _newLimit$[ebp], 1073741824	; 40000000H
	jb	SHORT $LN1@ReAlloc2
	mov	DWORD PTR $T69348[ebp], 20130220	; 013329acH
	push	OFFSET __TI1H
	lea	eax, DWORD PTR $T69348[ebp]
	push	eax
	call	__CxxThrowException@8
$LN1@ReAlloc2:
; Line 360
	mov	ecx, DWORD PTR _newLimit$[ebp]
	add	ecx, 1
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69349[ebp], eax
	mov	edx, DWORD PTR $T69349[ebp]
	mov	DWORD PTR _newBuf$[ebp], edx
; Line 361
	mov	eax, DWORD PTR _newBuf$[ebp]
	mov	BYTE PTR [eax], 0
; Line 362
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T69350[ebp], edx
	mov	eax, DWORD PTR $T69350[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 363
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newBuf$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 364
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newLimit$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReAlloc2:
; Line 365
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReAlloc2@AString@@AAEXI@Z ENDP				; AString::ReAlloc2
_TEXT	ENDS
PUBLIC	?SetStartLen@AString@@AAEXI@Z			; AString::SetStartLen
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69352 = -8						; size = 4
_this$ = -4						; size = 4
_len$ = 8						; size = 4
?SetStartLen@AString@@AAEXI@Z PROC			; AString::SetStartLen
; _this$ = ecx
; Line 368
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 369
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 370
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69352[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T69352[ebp]
	mov	DWORD PTR [edx], eax
; Line 371
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 372
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 373
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStartLen@AString@@AAEXI@Z ENDP			; AString::SetStartLen
_TEXT	ENDS
PUBLIC	?Grow_1@AString@@AAEXXZ				; AString::Grow_1
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_next$ = -8						; size = 4
_this$ = -4						; size = 4
?Grow_1@AString@@AAEXXZ PROC				; AString::Grow_1
; _this$ = ecx
; Line 376
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 377
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$[ebp], ecx
; Line 378
	mov	edx, DWORD PTR _next$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _next$[ebp], edx
; Line 379
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _next$[ebp], eax
; Line 380
	mov	ecx, DWORD PTR _next$[ebp]
	and	ecx, -16				; fffffff0H
	mov	DWORD PTR _next$[ebp], ecx
; Line 381
	mov	edx, DWORD PTR _next$[ebp]
	sub	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReAlloc@AString@@AAEXI@Z		; AString::ReAlloc
; Line 382
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Grow_1@AString@@AAEXXZ ENDP				; AString::Grow_1
; Function compile flags: /Odtp /RTCsu
_next$ = -12						; size = 4
_freeSize$ = -8						; size = 4
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?Grow@AString@@AAEXI@Z PROC				; AString::Grow
; _this$ = ecx
; Line 385
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 386
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _freeSize$[ebp], edx
; Line 387
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _freeSize$[ebp]
	ja	SHORT $LN1@Grow
; Line 388
	jmp	SHORT $LN2@Grow
$LN1@Grow:
; Line 390
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _next$[ebp], edx
; Line 391
	mov	eax, DWORD PTR _next$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _next$[ebp], eax
; Line 392
	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _next$[ebp], ecx
; Line 393
	mov	edx, DWORD PTR _next$[ebp]
	and	edx, -16				; fffffff0H
	mov	DWORD PTR _next$[ebp], edx
; Line 394
	mov	eax, DWORD PTR _next$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReAlloc@AString@@AAEXI@Z		; AString::ReAlloc
$LN2@Grow:
; Line 395
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Grow@AString@@AAEXI@Z ENDP				; AString::Grow
_TEXT	ENDS
PUBLIC	??0AString@@AAE@IABV0@@Z			; AString::AString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
_s$ = 12						; size = 4
??0AString@@AAE@IABV0@@Z PROC				; AString::AString
; _this$ = ecx
; Line 410
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 411
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _num$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN1@AString
; Line 412
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _num$[ebp], eax
$LN1@AString:
; Line 413
	mov	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@AString@@AAEXI@Z		; AString::SetStartLen
; Line 414
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 415
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _num$[ebp]
	mov	BYTE PTR [edx+eax], 0
; Line 416
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0AString@@AAE@IABV0@@Z ENDP				; AString::AString
_TEXT	ENDS
PUBLIC	??BAString@@QBEPBDXZ				; AString::operator char const *
PUBLIC	?Len@AString@@QBEIXZ				; AString::Len
PUBLIC	??0AString@@AAE@ABV0@D@Z			; AString::AString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -12						; size = 4
_chars$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 1
??0AString@@AAE@ABV0@D@Z PROC				; AString::AString
; _this$ = ecx
; Line 419
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 420
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@AString@@AAEXI@Z		; AString::SetStartLen
; Line 421
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _chars$[ebp], ecx
; Line 422
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	mov	DWORD PTR _len$[ebp], eax
; Line 423
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	mov	eax, DWORD PTR _chars$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 424
	mov	ecx, DWORD PTR _chars$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
; Line 425
	mov	eax, DWORD PTR _chars$[ebp]
	add	eax, DWORD PTR _len$[ebp]
	mov	BYTE PTR [eax+1], 0
; Line 426
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0AString@@AAE@ABV0@D@Z ENDP				; AString::AString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@AString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@AString@@QBEIXZ PROC				; AString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 234
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@AString@@QBEIXZ ENDP				; AString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BAString@@QBEPBDXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BAString@@QBEPBDXZ PROC				; AString::operator char const *, COMDAT
; _this$ = ecx
; Line 238
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BAString@@QBEPBDXZ ENDP				; AString::operator char const *
_TEXT	ENDS
PUBLIC	??0AString@@AAE@PBDI0I@Z			; AString::AString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_chars$ = -8						; size = 4
_this$ = -4						; size = 4
_s1$ = 8						; size = 4
_num1$ = 12						; size = 4
_s2$ = 16						; size = 4
_num2$ = 20						; size = 4
??0AString@@AAE@PBDI0I@Z PROC				; AString::AString
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 429
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 430
	mov	eax, DWORD PTR _num1$[ebp]
	add	eax, DWORD PTR _num2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@AString@@AAEXI@Z		; AString::SetStartLen
; Line 431
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _chars$[ebp], edx
; Line 432
	mov	eax, DWORD PTR _num1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _chars$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 433
	mov	eax, DWORD PTR _num2$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _chars$[ebp]
	add	edx, DWORD PTR _num1$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 434
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0AString@@AAE@PBDI0I@Z ENDP				; AString::AString
_TEXT	ENDS
PUBLIC	??H@YG?AVAString@@ABV0@0@Z			; operator+
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69364 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s1$ = 12						; size = 4
_s2$ = 16						; size = 4
??H@YG?AVAString@@ABV0@0@Z PROC				; operator+
; Line 436
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T69364[ebp], 0
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	push	eax
	mov	ecx, DWORD PTR _s2$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0AString@@AAE@PBDI0I@Z		; AString::AString
	mov	eax, DWORD PTR $T69364[ebp]
	or	eax, 1
	mov	DWORD PTR $T69364[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??H@YG?AVAString@@ABV0@0@Z ENDP				; operator+
_TEXT	ENDS
PUBLIC	?MyStringLen@@YGIPBD@Z				; MyStringLen
PUBLIC	??H@YG?AVAString@@ABV0@PBD@Z			; operator+
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69368 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s1$ = 12						; size = 4
_s2$ = 16						; size = 4
??H@YG?AVAString@@ABV0@PBD@Z PROC			; operator+
; Line 437
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T69368[ebp], 0
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	push	eax
	mov	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0AString@@AAE@PBDI0I@Z		; AString::AString
	mov	edx, DWORD PTR $T69368[ebp]
	or	edx, 1
	mov	DWORD PTR $T69368[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??H@YG?AVAString@@ABV0@PBD@Z ENDP			; operator+
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyStringLen@@YGIPBD@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_s$ = 8							; size = 4
?MyStringLen@@YGIPBD@Z PROC				; MyStringLen, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 28
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MyStringLe
$LN2@MyStringLe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@MyStringLe:
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN1@MyStringLe
	jmp	SHORT $LN2@MyStringLe
$LN1@MyStringLe:
; Line 29
	mov	eax, DWORD PTR _i$[ebp]
; Line 30
	mov	esp, ebp
	pop	ebp
	ret	4
?MyStringLen@@YGIPBD@Z ENDP				; MyStringLen
_TEXT	ENDS
PUBLIC	??H@YG?AVAString@@PBDABV0@@Z			; operator+
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69374 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s1$ = 12						; size = 4
_s2$ = 16						; size = 4
??H@YG?AVAString@@PBDABV0@@Z PROC			; operator+
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 438
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T69374[ebp], 0
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	push	eax
	mov	ecx, DWORD PTR _s2$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	mov	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0AString@@AAE@PBDI0I@Z		; AString::AString
	mov	edx, DWORD PTR $T69374[ebp]
	or	edx, 1
	mov	DWORD PTR $T69374[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??H@YG?AVAString@@PBDABV0@@Z ENDP			; operator+
_TEXT	ENDS
PUBLIC	??0AString@@QAE@XZ				; AString::AString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69377 = -8						; size = 4
_this$ = -4						; size = 4
??0AString@@QAE@XZ PROC					; AString::AString
; _this$ = ecx
; Line 441
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 442
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 443
	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69377[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T69377[ebp]
	mov	DWORD PTR [ecx], edx
; Line 444
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 445
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 3
; Line 446
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	BYTE PTR [eax], 0
; Line 447
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0AString@@QAE@XZ ENDP					; AString::AString
_TEXT	ENDS
PUBLIC	??0AString@@QAE@D@Z				; AString::AString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 1
??0AString@@QAE@D@Z PROC				; AString::AString
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 451
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@AString@@AAEXI@Z		; AString::SetStartLen
; Line 452
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
; Line 453
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+1], 0
; Line 454
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0AString@@QAE@D@Z ENDP				; AString::AString
_TEXT	ENDS
PUBLIC	?MyStringCopy@@YGXPADPBD@Z			; MyStringCopy
PUBLIC	??0AString@@QAE@PBD@Z				; AString::AString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??0AString@@QAE@PBD@Z PROC				; AString::AString
; _this$ = ecx
; Line 457
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 458
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@AString@@AAEXI@Z		; AString::SetStartLen
; Line 459
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?MyStringCopy@@YGXPADPBD@Z		; MyStringCopy
; Line 460
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0AString@@QAE@PBD@Z ENDP				; AString::AString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyStringCopy@@YGXPADPBD@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
?MyStringCopy@@YGXPADPBD@Z PROC				; MyStringCopy, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 33
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN2@MyStringCo@2:
; Line 34
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR [eax], dl
	mov	eax, DWORD PTR _dest$[ebp]
	movsx	ecx, BYTE PTR [eax]
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 1
	mov	DWORD PTR _dest$[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 1
	mov	DWORD PTR _src$[ebp], eax
	test	ecx, ecx
	je	SHORT $LN5@MyStringCo@2
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN6@MyStringCo@2
$LN5@MyStringCo@2:
	mov	DWORD PTR tv68[ebp], 0
$LN6@MyStringCo@2:
	cmp	DWORD PTR tv68[ebp], 0
	je	SHORT $LN3@MyStringCo@2
	jmp	SHORT $LN2@MyStringCo@2
$LN3@MyStringCo@2:
; Line 35
	mov	esp, ebp
	pop	ebp
	ret	8
?MyStringCopy@@YGXPADPBD@Z ENDP				; MyStringCopy
_TEXT	ENDS
PUBLIC	??0AString@@QAE@ABV0@@Z				; AString::AString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??0AString@@QAE@ABV0@@Z PROC				; AString::AString
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 463
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 464
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@AString@@AAEXI@Z		; AString::SetStartLen
; Line 465
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?MyStringCopy@@YGXPADPBD@Z		; MyStringCopy
; Line 466
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0AString@@QAE@ABV0@@Z ENDP				; AString::AString
_TEXT	ENDS
PUBLIC	??4AString@@QAEAAV0@D@Z				; AString::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69387 = -16						; size = 4
$T69386 = -12						; size = 4
_newBuf$68582 = -8					; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 1
??4AString@@QAEAAV0@D@Z PROC				; AString::operator=
; _this$ = ecx
; Line 469
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 470
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 1
	jae	SHORT $LN1@operator
; Line 472
	push	2
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69386[ebp], eax
	mov	ecx, DWORD PTR $T69386[ebp]
	mov	DWORD PTR _newBuf$68582[ebp], ecx
; Line 473
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T69387[ebp], eax
	mov	ecx, DWORD PTR $T69387[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 474
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newBuf$68582[ebp]
	mov	DWORD PTR [edx], eax
; Line 475
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN1@operator:
; Line 477
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 1
; Line 478
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
; Line 479
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	BYTE PTR [ecx+1], 0
; Line 480
	mov	eax, DWORD PTR _this$[ebp]
; Line 481
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4AString@@QAEAAV0@D@Z ENDP				; AString::operator=
_TEXT	ENDS
PUBLIC	??4AString@@QAEAAV0@PBD@Z			; AString::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69390 = -20						; size = 4
$T69389 = -16						; size = 4
_newBuf$68592 = -12					; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??4AString@@QAEAAV0@PBD@Z PROC				; AString::operator=
; _this$ = ecx
; Line 484
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 485
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	DWORD PTR _len$[ebp], eax
; Line 486
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN1@operator@2
; Line 488
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	push	eax
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69389[ebp], eax
	mov	ecx, DWORD PTR $T69389[ebp]
	mov	DWORD PTR _newBuf$68592[ebp], ecx
; Line 489
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T69390[ebp], eax
	mov	ecx, DWORD PTR $T69390[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 490
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newBuf$68592[ebp]
	mov	DWORD PTR [edx], eax
; Line 491
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN1@operator@2:
; Line 493
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 494
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?MyStringCopy@@YGXPADPBD@Z		; MyStringCopy
; Line 495
	mov	eax, DWORD PTR _this$[ebp]
; Line 496
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4AString@@QAEAAV0@PBD@Z ENDP				; AString::operator=
_TEXT	ENDS
PUBLIC	??4AString@@QAEAAV0@ABV0@@Z			; AString::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69393 = -20						; size = 4
$T69392 = -16						; size = 4
_newBuf$68603 = -12					; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??4AString@@QAEAAV0@ABV0@@Z PROC			; AString::operator=
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN2@operator@3
; Line 501
	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN3@operator@3
$LN2@operator@3:
; Line 502
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _len$[ebp], edx
; Line 503
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN1@operator@3
; Line 505
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69392[ebp], eax
	mov	eax, DWORD PTR $T69392[ebp]
	mov	DWORD PTR _newBuf$68603[ebp], eax
; Line 506
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T69393[ebp], edx
	mov	eax, DWORD PTR $T69393[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 507
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newBuf$68603[ebp]
	mov	DWORD PTR [ecx], edx
; Line 508
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@operator@3:
; Line 510
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 511
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?MyStringCopy@@YGXPADPBD@Z		; MyStringCopy
; Line 512
	mov	eax, DWORD PTR _this$[ebp]
$LN3@operator@3:
; Line 513
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4AString@@QAEAAV0@ABV0@@Z ENDP			; AString::operator=
_TEXT	ENDS
PUBLIC	?SetFromWStr_if_Ascii@AString@@QAEXPB_W@Z	; AString::SetFromWStr_if_Ascii
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69396 = -32						; size = 4
$T69395 = -28						; size = 4
_i$ = -24						; size = 4
_dest$ = -20						; size = 4
_newBuf$68619 = -16					; size = 4
_c$68615 = -12						; size = 2
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?SetFromWStr_if_Ascii@AString@@QAEXPB_W@Z PROC		; AString::SetFromWStr_if_Ascii
; _this$ = ecx
; Line 516
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 517
	mov	DWORD PTR _len$[ebp], 0
	jmp	SHORT $LN9@SetFromWSt
$LN8@SetFromWSt:
; Line 519
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
$LN9@SetFromWSt:
; Line 521
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	mov	ax, WORD PTR [edx+ecx*2]
	mov	WORD PTR _c$68615[ebp], ax
; Line 522
	movzx	ecx, WORD PTR _c$68615[ebp]
	test	ecx, ecx
	jne	SHORT $LN6@SetFromWSt
; Line 523
	jmp	SHORT $LN7@SetFromWSt
$LN6@SetFromWSt:
; Line 524
	movzx	edx, WORD PTR _c$68615[ebp]
	cmp	edx, 128				; 00000080H
	jl	SHORT $LN5@SetFromWSt
; Line 525
	jmp	$LN10@SetFromWSt
$LN5@SetFromWSt:
; Line 526
	jmp	SHORT $LN8@SetFromWSt
$LN7@SetFromWSt:
; Line 528
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN4@SetFromWSt
; Line 530
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69395[ebp], eax
	mov	eax, DWORD PTR $T69395[ebp]
	mov	DWORD PTR _newBuf$68619[ebp], eax
; Line 531
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T69396[ebp], edx
	mov	eax, DWORD PTR $T69396[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 532
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newBuf$68619[ebp]
	mov	DWORD PTR [ecx], edx
; Line 533
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetFromWSt:
; Line 535
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 536
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _dest$[ebp], edx
; Line 538
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@SetFromWSt
$LN2@SetFromWSt:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@SetFromWSt:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jae	SHORT $LN1@SetFromWSt
; Line 539
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _s$[ebp]
	mov	al, BYTE PTR [ecx+eax*2]
	mov	BYTE PTR [edx], al
	jmp	SHORT $LN2@SetFromWSt
$LN1@SetFromWSt:
; Line 540
	mov	ecx, DWORD PTR _dest$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx], 0
$LN10@SetFromWSt:
; Line 541
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFromWStr_if_Ascii@AString@@QAEXPB_W@Z ENDP		; AString::SetFromWStr_if_Ascii
_TEXT	ENDS
PUBLIC	??YAString@@QAEAAV0@D@Z				; AString::operator+=
PUBLIC	?Add_Space@AString@@QAEXXZ			; AString::Add_Space
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Add_Space@AString@@QAEXXZ PROC				; AString::Add_Space
; _this$ = ecx
; Line 568
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Add_Space@AString@@QAEXXZ ENDP				; AString::Add_Space
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??YAString@@QAEAAV0@D@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 1
??YAString@@QAEAAV0@D@Z PROC				; AString::operator+=, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 281
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 282
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator@4
; Line 283
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@AString@@AAEXXZ			; AString::Grow_1
$LN1@operator@4:
; Line 284
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 285
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 286
	mov	ecx, DWORD PTR _chars$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	mov	DWORD PTR _len$[ebp], eax
; Line 287
	mov	ecx, DWORD PTR _chars$[ebp]
	add	ecx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx], 0
; Line 288
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 289
	mov	eax, DWORD PTR _this$[ebp]
; Line 290
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YAString@@QAEAAV0@D@Z ENDP				; AString::operator+=
_TEXT	ENDS
PUBLIC	?IsEmpty@AString@@QBE_NXZ			; AString::IsEmpty
PUBLIC	?Add_Space_if_NotEmpty@AString@@QAEXXZ		; AString::Add_Space_if_NotEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Add_Space_if_NotEmpty@AString@@QAEXXZ PROC		; AString::Add_Space_if_NotEmpty
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 569
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add_Space_
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add_Space@AString@@QAEXXZ		; AString::Add_Space
$LN2@Add_Space_:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Add_Space_if_NotEmpty@AString@@QAEXXZ ENDP		; AString::Add_Space_if_NotEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@AString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@AString@@QBE_NXZ PROC				; AString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 235
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@AString@@QBE_NXZ ENDP				; AString::IsEmpty
_TEXT	ENDS
PUBLIC	?Add_LF@AString@@QAEXXZ				; AString::Add_LF
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Add_LF@AString@@QAEXXZ PROC				; AString::Add_LF
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 570
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	??YAString@@QAEAAV0@D@Z			; AString::operator+=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Add_LF@AString@@QAEXXZ ENDP				; AString::Add_LF
_TEXT	ENDS
PUBLIC	??YAString@@QAEAAV0@PBD@Z			; AString::operator+=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??YAString@@QAEAAV0@PBD@Z PROC				; AString::operator+=
; _this$ = ecx
; Line 573
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 574
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	DWORD PTR _len$[ebp], eax
; Line 575
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@AString@@AAEXI@Z			; AString::Grow
; Line 576
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+4]
	push	ecx
	call	?MyStringCopy@@YGXPADPBD@Z		; MyStringCopy
; Line 577
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 578
	mov	eax, DWORD PTR _this$[ebp]
; Line 579
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YAString@@QAEAAV0@PBD@Z ENDP				; AString::operator+=
_TEXT	ENDS
PUBLIC	??YAString@@QAEAAV0@ABV0@@Z			; AString::operator+=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??YAString@@QAEAAV0@ABV0@@Z PROC			; AString::operator+=
; _this$ = ecx
; Line 582
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 583
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@AString@@AAEXI@Z			; AString::Grow
; Line 584
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR [eax+4]
	push	edx
	call	?MyStringCopy@@YGXPADPBD@Z		; MyStringCopy
; Line 585
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR [eax+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 586
	mov	eax, DWORD PTR _this$[ebp]
; Line 587
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YAString@@QAEAAV0@ABV0@@Z ENDP			; AString::operator+=
_TEXT	ENDS
PUBLIC	?SetFrom@AString@@QAEXPBDI@Z			; AString::SetFrom
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69408 = -16						; size = 4
$T69407 = -12						; size = 4
_newBuf$68654 = -8					; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_len$ = 12						; size = 4
?SetFrom@AString@@QAEXPBDI@Z PROC			; AString::SetFrom
; _this$ = ecx
; Line 590
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 591
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@SetFrom
; Line 593
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69407[ebp], eax
	mov	eax, DWORD PTR $T69407[ebp]
	mov	DWORD PTR _newBuf$68654[ebp], eax
; Line 594
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T69408[ebp], edx
	mov	eax, DWORD PTR $T69408[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 595
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newBuf$68654[ebp]
	mov	DWORD PTR [ecx], edx
; Line 596
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN2@SetFrom:
; Line 598
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN1@SetFrom
; Line 599
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@SetFrom:
; Line 600
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _len$[ebp]
	mov	BYTE PTR [ecx+edx], 0
; Line 601
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 602
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetFrom@AString@@QAEXPBDI@Z ENDP			; AString::SetFrom
_TEXT	ENDS
PUBLIC	?SetFrom_CalcLen@AString@@QAEXPBDI@Z		; AString::SetFrom_CalcLen
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_len$ = 12						; size = 4
?SetFrom_CalcLen@AString@@QAEXPBDI@Z PROC		; AString::SetFrom_CalcLen
; _this$ = ecx
; Line 605
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 607
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@SetFrom_Ca
$LN3@SetFrom_Ca:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@SetFrom_Ca:
	mov	ecx, DWORD PTR _i$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jae	SHORT $LN2@SetFrom_Ca
; Line 608
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movsx	eax, BYTE PTR [edx]
	test	eax, eax
	jne	SHORT $LN1@SetFrom_Ca
; Line 609
	jmp	SHORT $LN2@SetFrom_Ca
$LN1@SetFrom_Ca:
; Line 610
	jmp	SHORT $LN3@SetFrom_Ca
$LN2@SetFrom_Ca:
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetFrom@AString@@QAEXPBDI@Z		; AString::SetFrom
; Line 611
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetFrom_CalcLen@AString@@QAEXPBDI@Z ENDP		; AString::SetFrom_CalcLen
_TEXT	ENDS
PUBLIC	?strstr@@YAPADPADPBD@Z				; strstr
PUBLIC	?Find@AString@@QBEHPBDI@Z			; AString::Find
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fs$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_startIndex$ = 12					; size = 4
?Find@AString@@QBEHPBDI@Z PROC				; AString::Find
; _this$ = ecx
; Line 614
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 615
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _startIndex$[ebp]
	push	edx
	call	?strstr@@YAPADPADPBD@Z			; strstr
	add	esp, 8
	mov	DWORD PTR _fs$[ebp], eax
; Line 616
	cmp	DWORD PTR _fs$[ebp], 0
	jne	SHORT $LN1@Find
; Line 617
	or	eax, -1
	jmp	SHORT $LN2@Find
$LN1@Find:
; Line 618
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _fs$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
$LN2@Find:
; Line 642
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Find@AString@@QBEHPBDI@Z ENDP				; AString::Find
_TEXT	ENDS
EXTRN	__imp__strstr:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?strstr@@YAPADPADPBD@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__SubStr$ = 12						; size = 4
?strstr@@YAPADPADPBD@Z PROC				; strstr, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string.h
; Line 221
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	mov	eax, DWORD PTR __SubStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	DWORD PTR __imp__strstr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?strstr@@YAPADPADPBD@Z ENDP				; strstr
_TEXT	ENDS
PUBLIC	?ReverseFind@AString@@QBEHD@Z			; AString::ReverseFind
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 1
?ReverseFind@AString@@QBEHD@Z PROC			; AString::ReverseFind
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 645
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 646
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@ReverseFin
; Line 647
	or	eax, -1
	jmp	SHORT $LN6@ReverseFin
$LN5@ReverseFin:
; Line 648
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _p$[ebp], edx
$LN4@ReverseFin:
; Line 651
	mov	eax, DWORD PTR _p$[ebp]
	movsx	ecx, BYTE PTR [eax]
	movsx	edx, BYTE PTR _c$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN2@ReverseFin
; Line 652
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax]
	mov	eax, ecx
	jmp	SHORT $LN6@ReverseFin
$LN2@ReverseFin:
; Line 653
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN1@ReverseFin
; Line 654
	or	eax, -1
	jmp	SHORT $LN6@ReverseFin
$LN1@ReverseFin:
; Line 655
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 656
	jmp	SHORT $LN4@ReverseFin
$LN6@ReverseFin:
; Line 657
	mov	esp, ebp
	pop	ebp
	ret	4
?ReverseFind@AString@@QBEHD@Z ENDP			; AString::ReverseFind
_TEXT	ENDS
PUBLIC	?ReverseFind_PathSepar@AString@@QBEHXZ		; AString::ReverseFind_PathSepar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$68697 = -9						; size = 1
_p$ = -8						; size = 4
_this$ = -4						; size = 4
?ReverseFind_PathSepar@AString@@QBEHXZ PROC		; AString::ReverseFind_PathSepar
; _this$ = ecx
; Line 660
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 661
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN6@ReverseFin@2
; Line 662
	or	eax, -1
	jmp	SHORT $LN7@ReverseFin@2
$LN6@ReverseFin@2:
; Line 663
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	lea	edx, DWORD PTR [edx+ecx-1]
	mov	DWORD PTR _p$[ebp], edx
$LN5@ReverseFin@2:
; Line 666
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$68697[ebp], cl
; Line 667
	movsx	edx, BYTE PTR _c$68697[ebp]
	cmp	edx, 92					; 0000005cH
	je	SHORT $LN2@ReverseFin@2
	movsx	eax, BYTE PTR _c$68697[ebp]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN3@ReverseFin@2
$LN2@ReverseFin@2:
; Line 668
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [ecx]
	jmp	SHORT $LN7@ReverseFin@2
$LN3@ReverseFin@2:
; Line 669
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN1@ReverseFin@2
; Line 670
	or	eax, -1
	jmp	SHORT $LN7@ReverseFin@2
$LN1@ReverseFin@2:
; Line 671
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _p$[ebp], ecx
; Line 672
	jmp	SHORT $LN5@ReverseFin@2
$LN7@ReverseFin@2:
; Line 673
	mov	esp, ebp
	pop	ebp
	ret	0
?ReverseFind_PathSepar@AString@@QBEHXZ ENDP		; AString::ReverseFind_PathSepar
_TEXT	ENDS
PUBLIC	?TrimLeft@AString@@QAEXXZ			; AString::TrimLeft
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pos$ = -16						; size = 4
_c$68709 = -9						; size = 1
_p$ = -8						; size = 4
_this$ = -4						; size = 4
?TrimLeft@AString@@QAEXXZ PROC				; AString::TrimLeft
; _this$ = ecx
; Line 676
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 677
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN5@TrimLeft
$LN4@TrimLeft:
; Line 678
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	mov	DWORD PTR _p$[ebp], edx
$LN5@TrimLeft:
; Line 680
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$68709[ebp], cl
; Line 681
	movsx	edx, BYTE PTR _c$68709[ebp]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN2@TrimLeft
	movsx	eax, BYTE PTR _c$68709[ebp]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN2@TrimLeft
	movsx	ecx, BYTE PTR _c$68709[ebp]
	cmp	ecx, 9
	je	SHORT $LN2@TrimLeft
; Line 682
	jmp	SHORT $LN3@TrimLeft
$LN2@TrimLeft:
; Line 683
	jmp	SHORT $LN4@TrimLeft
$LN3@TrimLeft:
; Line 684
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [edx]
	mov	DWORD PTR _pos$[ebp], eax
; Line 685
	je	SHORT $LN6@TrimLeft
; Line 687
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@AString@@AAEXII@Z		; AString::MoveItems
; Line 688
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN6@TrimLeft:
; Line 690
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?TrimLeft@AString@@QAEXXZ ENDP				; AString::TrimLeft
_TEXT	ENDS
PUBLIC	?TrimRight@AString@@QAEXXZ			; AString::TrimRight
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$68722 = -13						; size = 1
_i$ = -12						; size = 4
_p$ = -8						; size = 4
_this$ = -4						; size = 4
?TrimRight@AString@@QAEXXZ PROC				; AString::TrimRight
; _this$ = ecx
; Line 693
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 694
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
; Line 696
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN5@TrimRight
$LN4@TrimRight:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN5@TrimRight:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN3@TrimRight
; Line 698
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR [edx-1]
	mov	BYTE PTR _c$68722[ebp], al
; Line 699
	movsx	ecx, BYTE PTR _c$68722[ebp]
	cmp	ecx, 32					; 00000020H
	je	SHORT $LN2@TrimRight
	movsx	edx, BYTE PTR _c$68722[ebp]
	cmp	edx, 10					; 0000000aH
	je	SHORT $LN2@TrimRight
	movsx	eax, BYTE PTR _c$68722[ebp]
	cmp	eax, 9
	je	SHORT $LN2@TrimRight
; Line 700
	jmp	SHORT $LN3@TrimRight
$LN2@TrimRight:
; Line 701
	jmp	SHORT $LN4@TrimRight
$LN3@TrimRight:
; Line 702
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _i$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN6@TrimRight
; Line 704
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+edx], 0
; Line 705
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR [eax+4], ecx
$LN6@TrimRight:
; Line 707
	mov	esp, ebp
	pop	ebp
	ret	0
?TrimRight@AString@@QAEXXZ ENDP				; AString::TrimRight
_TEXT	ENDS
PUBLIC	?InsertAtFront@AString@@QAEXD@Z			; AString::InsertAtFront
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 1
?InsertAtFront@AString@@QAEXD@Z PROC			; AString::InsertAtFront
; _this$ = ecx
; Line 710
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 711
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@InsertAtFr
; Line 712
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@AString@@AAEXXZ			; AString::Grow_1
$LN1@InsertAtFr:
; Line 713
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@AString@@AAEXII@Z		; AString::MoveItems
; Line 714
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [ecx], dl
; Line 715
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 716
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?InsertAtFront@AString@@QAEXD@Z ENDP			; AString::InsertAtFront
_TEXT	ENDS
PUBLIC	?Insert@AString@@QAEXIPBD@Z			; AString::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_num$ = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_s$ = 12						; size = 4
?Insert@AString@@QAEXIPBD@Z PROC			; AString::Insert
; _this$ = ecx
; Line 728
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 729
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	DWORD PTR _num$[ebp], eax
; Line 730
	cmp	DWORD PTR _num$[ebp], 0
	je	SHORT $LN2@Insert
; Line 732
	mov	ecx, DWORD PTR _num$[ebp]
	push	ecx
	lea	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InsertSpace@AString@@AAEXAAII@Z	; AString::InsertSpace
; Line 733
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _index$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 734
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN2@Insert:
; Line 736
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@AString@@QAEXIPBD@Z ENDP			; AString::Insert
_TEXT	ENDS
PUBLIC	?Insert@AString@@QAEXIABV1@@Z			; AString::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_num$ = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_s$ = 12						; size = 4
?Insert@AString@@QAEXIABV1@@Z PROC			; AString::Insert
; _this$ = ecx
; Line 739
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 740
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	mov	DWORD PTR _num$[ebp], eax
; Line 741
	cmp	DWORD PTR _num$[ebp], 0
	je	SHORT $LN2@Insert@2
; Line 743
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	lea	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InsertSpace@AString@@AAEXAAII@Z	; AString::InsertSpace
; Line 744
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, DWORD PTR _index$[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 745
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, DWORD PTR _num$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN2@Insert@2:
; Line 747
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@AString@@QAEXIABV1@@Z ENDP			; AString::Insert
_TEXT	ENDS
PUBLIC	?RemoveChar@AString@@QAEXD@Z			; AString::RemoveChar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$68759 = -17						; size = 1
_dest$ = -16						; size = 4
_c$68752 = -9						; size = 1
_src$ = -8						; size = 4
_this$ = -4						; size = 4
_ch$ = 8						; size = 1
?RemoveChar@AString@@QAEXD@Z PROC			; AString::RemoveChar
; _this$ = ecx
; Line 750
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 751
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _src$[ebp], ecx
$LN8@RemoveChar:
; Line 755
	mov	edx, DWORD PTR _src$[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR _c$68752[ebp], al
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 1
	mov	DWORD PTR _src$[ebp], ecx
; Line 756
	movsx	edx, BYTE PTR _c$68752[ebp]
	test	edx, edx
	jne	SHORT $LN6@RemoveChar
; Line 757
	jmp	SHORT $LN9@RemoveChar
$LN6@RemoveChar:
; Line 758
	movsx	eax, BYTE PTR _c$68752[ebp]
	movsx	ecx, BYTE PTR _ch$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN5@RemoveChar
; Line 759
	jmp	SHORT $LN7@RemoveChar
$LN5@RemoveChar:
; Line 760
	jmp	SHORT $LN8@RemoveChar
$LN7@RemoveChar:
; Line 762
	mov	edx, DWORD PTR _src$[ebp]
	sub	edx, 1
	mov	DWORD PTR _dest$[ebp], edx
$LN4@RemoveChar:
; Line 766
	mov	eax, DWORD PTR _src$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$68759[ebp], cl
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 1
	mov	DWORD PTR _src$[ebp], edx
; Line 767
	movsx	eax, BYTE PTR _c$68759[ebp]
	test	eax, eax
	jne	SHORT $LN2@RemoveChar
; Line 768
	jmp	SHORT $LN3@RemoveChar
$LN2@RemoveChar:
; Line 769
	movsx	ecx, BYTE PTR _c$68759[ebp]
	movsx	edx, BYTE PTR _ch$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@RemoveChar
; Line 770
	mov	eax, DWORD PTR _dest$[ebp]
	mov	cl, BYTE PTR _c$68759[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 1
	mov	DWORD PTR _dest$[ebp], edx
$LN1@RemoveChar:
; Line 771
	jmp	SHORT $LN4@RemoveChar
$LN3@RemoveChar:
; Line 773
	mov	eax, DWORD PTR _dest$[ebp]
	mov	BYTE PTR [eax], 0
; Line 774
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _dest$[ebp]
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN9@RemoveChar:
; Line 775
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveChar@AString@@QAEXD@Z ENDP			; AString::RemoveChar
_TEXT	ENDS
PUBLIC	?Find@AString@@QBEHDI@Z				; AString::Find
PUBLIC	?Replace@AString@@QAEXDD@Z			; AString::Replace
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_oldChar$ = 8						; size = 1
_newChar$ = 12						; size = 1
?Replace@AString@@QAEXDD@Z PROC				; AString::Replace
; _this$ = ecx
; Line 779
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 780
	movsx	eax, BYTE PTR _oldChar$[ebp]
	movsx	ecx, BYTE PTR _newChar$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN4@Replace
; Line 781
	jmp	SHORT $LN5@Replace
$LN4@Replace:
; Line 783
	mov	DWORD PTR _pos$[ebp], 0
$LN3@Replace:
; Line 784
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	SHORT $LN5@Replace
; Line 786
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	movzx	edx, BYTE PTR _oldChar$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@AString@@QBEHDI@Z			; AString::Find
	mov	DWORD PTR _pos$[ebp], eax
; Line 787
	cmp	DWORD PTR _pos$[ebp], 0
	jge	SHORT $LN1@Replace
; Line 788
	jmp	SHORT $LN5@Replace
$LN1@Replace:
; Line 789
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	al, BYTE PTR _newChar$[ebp]
	mov	BYTE PTR [ecx+edx], al
; Line 790
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
; Line 792
	jmp	SHORT $LN3@Replace
$LN5@Replace:
; Line 794
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Replace@AString@@QAEXDD@Z ENDP				; AString::Replace
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Find@AString@@QBEHDI@Z
_TEXT	SEGMENT
tv70 = -12						; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 1
_startIndex$ = 12					; size = 4
?Find@AString@@QBEHDI@Z PROC				; AString::Find, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 333
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 334
	movzx	eax, BYTE PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	add	edx, DWORD PTR _startIndex$[ebp]
	push	edx
	call	?FindCharPosInString@@YGHPBDD@Z		; FindCharPosInString
	mov	DWORD PTR _pos$[ebp], eax
; Line 335
	cmp	DWORD PTR _pos$[ebp], 0
	jge	SHORT $LN3@Find@2
	mov	DWORD PTR tv70[ebp], -1
	jmp	SHORT $LN4@Find@2
$LN3@Find@2:
	mov	eax, DWORD PTR _startIndex$[ebp]
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR tv70[ebp], eax
$LN4@Find@2:
	mov	eax, DWORD PTR tv70[ebp]
; Line 336
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Find@AString@@QBEHDI@Z ENDP				; AString::Find
_TEXT	ENDS
PUBLIC	?Delete@AString@@QAEXII@Z			; AString::Delete
PUBLIC	??8@YG_NABVAString@@0@Z				; operator==
PUBLIC	?Replace@AString@@QAEXABV1@0@Z			; AString::Replace
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pos$ = -16						; size = 4
_newLen$ = -12						; size = 4
_oldLen$ = -8						; size = 4
_this$ = -4						; size = 4
_oldString$ = 8						; size = 4
_newString$ = 12					; size = 4
?Replace@AString@@QAEXABV1@0@Z PROC			; AString::Replace
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 797
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 798
	mov	ecx, DWORD PTR _oldString$[ebp]
	call	?IsEmpty@AString@@QBE_NXZ		; AString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@Replace@2
; Line 799
	jmp	$LN6@Replace@2
$LN5@Replace@2:
; Line 800
	mov	ecx, DWORD PTR _newString$[ebp]
	push	ecx
	mov	edx, DWORD PTR _oldString$[ebp]
	push	edx
	call	??8@YG_NABVAString@@0@Z			; operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@Replace@2
; Line 801
	jmp	SHORT $LN6@Replace@2
$LN4@Replace@2:
; Line 802
	mov	ecx, DWORD PTR _oldString$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	mov	DWORD PTR _oldLen$[ebp], eax
; Line 803
	mov	ecx, DWORD PTR _newString$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	mov	DWORD PTR _newLen$[ebp], eax
; Line 805
	mov	DWORD PTR _pos$[ebp], 0
$LN3@Replace@2:
; Line 806
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN6@Replace@2
; Line 808
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldString$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@AString@@QBEHPBDI@Z		; AString::Find
	mov	DWORD PTR _pos$[ebp], eax
; Line 809
	cmp	DWORD PTR _pos$[ebp], 0
	jge	SHORT $LN1@Replace@2
; Line 810
	jmp	SHORT $LN6@Replace@2
$LN1@Replace@2:
; Line 811
	mov	ecx, DWORD PTR _oldLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@AString@@QAEXII@Z		; AString::Delete
; Line 812
	mov	eax, DWORD PTR _newString$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@AString@@QAEXIABV1@@Z		; AString::Insert
; Line 813
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR _newLen$[ebp]
	mov	DWORD PTR _pos$[ebp], edx
; Line 815
	jmp	SHORT $LN3@Replace@2
$LN6@Replace@2:
; Line 817
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Replace@AString@@QAEXABV1@0@Z ENDP			; AString::Replace
_TEXT	ENDS
EXTRN	_strcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??8@YG_NABVAString@@0@Z
_TEXT	SEGMENT
tv77 = -4						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??8@YG_NABVAString@@0@Z PROC				; operator==, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 390
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	mov	esi, eax
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?Len@AString@@QBEIXZ			; AString::Len
	cmp	esi, eax
	jne	SHORT $LN3@operator@5
	mov	ecx, DWORD PTR _s2$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BAString@@QBEPBDXZ			; AString::operator char const *
	push	eax
	call	_strcmp
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN3@operator@5
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator@5
$LN3@operator@5:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator@5:
	mov	al, BYTE PTR tv77[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??8@YG_NABVAString@@0@Z ENDP				; operator==
_TEXT	ENDS
PUBLIC	?Delete@AString@@QAEXI@Z			; AString::Delete
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@AString@@QAEXI@Z PROC				; AString::Delete
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 820
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 821
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@AString@@AAEXII@Z		; AString::MoveItems
; Line 822
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 823
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@AString@@QAEXI@Z ENDP				; AString::Delete
; Function compile flags: /Odtp /RTCsu
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_count$ = 12						; size = 4
?Delete@AString@@QAEXII@Z PROC				; AString::Delete
; _this$ = ecx
; Line 826
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 827
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jbe	SHORT $LN2@Delete
; Line 828
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN2@Delete:
; Line 829
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@Delete
; Line 831
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@AString@@AAEXII@Z		; AString::MoveItems
; Line 832
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN3@Delete:
; Line 834
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Delete@AString@@QAEXII@Z ENDP				; AString::Delete
_TEXT	ENDS
PUBLIC	?DeleteFrontal@AString@@QAEXI@Z			; AString::DeleteFrontal
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?DeleteFrontal@AString@@QAEXI@Z PROC			; AString::DeleteFrontal
; _this$ = ecx
; Line 837
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 838
	cmp	DWORD PTR _num$[ebp], 0
	je	SHORT $LN2@DeleteFron
; Line 840
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@AString@@AAEXII@Z		; AString::MoveItems
; Line 841
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN2@DeleteFron:
; Line 843
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrontal@AString@@QAEXI@Z ENDP			; AString::DeleteFrontal
_TEXT	ENDS
PUBLIC	?MoveItems@UString@@AAEXII@Z			; UString::MoveItems
PUBLIC	?Grow@UString@@AAEXI@Z				; UString::Grow
PUBLIC	?InsertSpace@UString@@AAEXII@Z			; UString::InsertSpace
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_size$ = 12						; size = 4
?InsertSpace@UString@@AAEXII@Z PROC			; UString::InsertSpace
; _this$ = ecx
; Line 890
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 891
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@UString@@AAEXI@Z			; UString::Grow
; Line 892
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	add	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@UString@@AAEXII@Z		; UString::MoveItems
; Line 893
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?InsertSpace@UString@@AAEXII@Z ENDP			; UString::InsertSpace
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MoveItems@UString@@AAEXII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
?MoveItems@UString@@AAEXII@Z PROC			; UString::MoveItems, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 420
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 421
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _src$[ebp]
	lea	edx, DWORD PTR [ecx+ecx+2]
	mov	esi, esp
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _src$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _dest$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	call	DWORD PTR __imp__memmove
	add	esp, 12					; 0000000cH
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 422
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?MoveItems@UString@@AAEXII@Z ENDP			; UString::MoveItems
_TEXT	ENDS
PUBLIC	_wmemcpy
PUBLIC	?ReAlloc@UString@@AAEXI@Z			; UString::ReAlloc
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69440 = -20						; size = 4
$T69439 = -16						; size = 4
$T69438 = -12						; size = 4
_newBuf$ = -8						; size = 4
_this$ = -4						; size = 4
_newLimit$ = 8						; size = 4
?ReAlloc@UString@@AAEXI@Z PROC				; UString::ReAlloc
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 896
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 897
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newLimit$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jb	SHORT $LN1@ReAlloc@2
	cmp	DWORD PTR _newLimit$[ebp], 1073741824	; 40000000H
	jb	SHORT $LN2@ReAlloc@2
$LN1@ReAlloc@2:
	mov	DWORD PTR $T69438[ebp], 20130221	; 013329adH
	push	OFFSET __TI1H
	lea	edx, DWORD PTR $T69438[ebp]
	push	edx
	call	__CxxThrowException@8
$LN2@ReAlloc@2:
; Line 899
	mov	eax, DWORD PTR _newLimit$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69439[ebp], eax
	mov	eax, DWORD PTR $T69439[ebp]
	mov	DWORD PTR _newBuf$[ebp], eax
; Line 900
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _newBuf$[ebp]
	push	edx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 901
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T69440[ebp], ecx
	mov	edx, DWORD PTR $T69440[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 902
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newBuf$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 903
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newLimit$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN4@ReAlloc@2:
; Line 904
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReAlloc@UString@@AAEXI@Z ENDP				; UString::ReAlloc
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT _wmemcpy
_TEXT	SEGMENT
__S1$ = 8						; size = 4
__S2$ = 12						; size = 4
__N$ = 16						; size = 4
_wmemcpy PROC						; COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\wchar.h
; Line 1210
	push	ebp
	mov	ebp, esp
; Line 1213
	mov	eax, DWORD PTR __N$[ebp]
	shl	eax, 1
	push	eax
	mov	ecx, DWORD PTR __S2$[ebp]
	push	ecx
	mov	edx, DWORD PTR __S1$[ebp]
	push	edx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 1215
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
_wmemcpy ENDP
_TEXT	ENDS
PUBLIC	?ReAlloc2@UString@@AAEXI@Z			; UString::ReAlloc2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69446 = -20						; size = 4
$T69445 = -16						; size = 4
$T69444 = -12						; size = 4
_newBuf$ = -8						; size = 4
_this$ = -4						; size = 4
_newLimit$ = 8						; size = 4
?ReAlloc2@UString@@AAEXI@Z PROC				; UString::ReAlloc2
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 907
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 908
	cmp	DWORD PTR _newLimit$[ebp], 1073741824	; 40000000H
	jb	SHORT $LN1@ReAlloc2@2
	mov	DWORD PTR $T69444[ebp], 20130221	; 013329adH
	push	OFFSET __TI1H
	lea	eax, DWORD PTR $T69444[ebp]
	push	eax
	call	__CxxThrowException@8
$LN1@ReAlloc2@2:
; Line 910
	mov	eax, DWORD PTR _newLimit$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69445[ebp], eax
	mov	eax, DWORD PTR $T69445[ebp]
	mov	DWORD PTR _newBuf$[ebp], eax
; Line 911
	xor	ecx, ecx
	mov	edx, DWORD PTR _newBuf$[ebp]
	mov	WORD PTR [edx], cx
; Line 912
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T69446[ebp], ecx
	mov	edx, DWORD PTR $T69446[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 913
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newBuf$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 914
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newLimit$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN3@ReAlloc2@2:
; Line 915
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReAlloc2@UString@@AAEXI@Z ENDP				; UString::ReAlloc2
_TEXT	ENDS
PUBLIC	?SetStartLen@UString@@AAEXI@Z			; UString::SetStartLen
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69448 = -8						; size = 4
_this$ = -4						; size = 4
_len$ = 8						; size = 4
?SetStartLen@UString@@AAEXI@Z PROC			; UString::SetStartLen
; _this$ = ecx
; Line 918
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 919
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 920
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69448[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T69448[ebp]
	mov	DWORD PTR [eax], ecx
; Line 921
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 922
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ecx+8], edx
; Line 923
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStartLen@UString@@AAEXI@Z ENDP			; UString::SetStartLen
_TEXT	ENDS
PUBLIC	?Grow_1@UString@@AAEXXZ				; UString::Grow_1
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_next$ = -8						; size = 4
_this$ = -4						; size = 4
?Grow_1@UString@@AAEXXZ PROC				; UString::Grow_1
; _this$ = ecx
; Line 926
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 927
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _next$[ebp], ecx
; Line 928
	mov	edx, DWORD PTR _next$[ebp]
	shr	edx, 1
	add	edx, DWORD PTR _next$[ebp]
	mov	DWORD PTR _next$[ebp], edx
; Line 929
	mov	eax, DWORD PTR _next$[ebp]
	add	eax, 16					; 00000010H
	mov	DWORD PTR _next$[ebp], eax
; Line 930
	mov	ecx, DWORD PTR _next$[ebp]
	and	ecx, -16				; fffffff0H
	mov	DWORD PTR _next$[ebp], ecx
; Line 931
	mov	edx, DWORD PTR _next$[ebp]
	sub	edx, 1
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReAlloc@UString@@AAEXI@Z		; UString::ReAlloc
; Line 932
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Grow_1@UString@@AAEXXZ ENDP				; UString::Grow_1
; Function compile flags: /Odtp /RTCsu
_next$ = -12						; size = 4
_freeSize$ = -8						; size = 4
_this$ = -4						; size = 4
_n$ = 8							; size = 4
?Grow@UString@@AAEXI@Z PROC				; UString::Grow
; _this$ = ecx
; Line 935
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 936
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	sub	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _freeSize$[ebp], edx
; Line 937
	mov	eax, DWORD PTR _n$[ebp]
	cmp	eax, DWORD PTR _freeSize$[ebp]
	ja	SHORT $LN1@Grow@2
; Line 938
	jmp	SHORT $LN2@Grow@2
$LN1@Grow@2:
; Line 940
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _n$[ebp]
	mov	DWORD PTR _next$[ebp], edx
; Line 941
	mov	eax, DWORD PTR _next$[ebp]
	shr	eax, 1
	add	eax, DWORD PTR _next$[ebp]
	mov	DWORD PTR _next$[ebp], eax
; Line 942
	mov	ecx, DWORD PTR _next$[ebp]
	add	ecx, 16					; 00000010H
	mov	DWORD PTR _next$[ebp], ecx
; Line 943
	mov	edx, DWORD PTR _next$[ebp]
	and	edx, -16				; fffffff0H
	mov	DWORD PTR _next$[ebp], edx
; Line 944
	mov	eax, DWORD PTR _next$[ebp]
	sub	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReAlloc@UString@@AAEXI@Z		; UString::ReAlloc
$LN2@Grow@2:
; Line 945
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Grow@UString@@AAEXI@Z ENDP				; UString::Grow
_TEXT	ENDS
PUBLIC	?MyStringLen@@YGIPB_W@Z				; MyStringLen
PUBLIC	??0UString@@AAE@IPB_W@Z				; UString::UString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_num$ = 8						; size = 4
_s$ = 12						; size = 4
??0UString@@AAE@IPB_W@Z PROC				; UString::UString
; _this$ = ecx
; Line 949
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 950
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPB_W@Z			; MyStringLen
	mov	DWORD PTR _len$[ebp], eax
; Line 951
	mov	ecx, DWORD PTR _num$[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jbe	SHORT $LN1@UString
; Line 952
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR _num$[ebp], edx
$LN1@UString:
; Line 953
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@UString@@AAEXI@Z		; UString::SetStartLen
; Line 954
	mov	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 955
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	xor	ecx, ecx
	mov	edx, DWORD PTR _num$[ebp]
	mov	WORD PTR [eax+edx*2], cx
; Line 956
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0UString@@AAE@IPB_W@Z ENDP				; UString::UString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyStringLen@@YGIPB_W@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_s$ = 8							; size = 4
?MyStringLen@@YGIPB_W@Z PROC				; MyStringLen, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 51
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 53
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MyStringLe@2
$LN2@MyStringLe@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@MyStringLe@2:
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _s$[ebp]
	movzx	eax, WORD PTR [edx+ecx*2]
	test	eax, eax
	je	SHORT $LN1@MyStringLe@2
	jmp	SHORT $LN2@MyStringLe@2
$LN1@MyStringLe@2:
; Line 54
	mov	eax, DWORD PTR _i$[ebp]
; Line 55
	mov	esp, ebp
	pop	ebp
	ret	4
?MyStringLen@@YGIPB_W@Z ENDP				; MyStringLen
_TEXT	ENDS
PUBLIC	??0UString@@AAE@IABV0@@Z			; UString::UString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
_s$ = 12						; size = 4
??0UString@@AAE@IABV0@@Z PROC				; UString::UString
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 960
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 961
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR _num$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN1@UString@2
; Line 962
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _num$[ebp], eax
$LN1@UString@2:
; Line 963
	mov	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@UString@@AAEXI@Z		; UString::SetStartLen
; Line 964
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 965
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR _num$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 966
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0UString@@AAE@IABV0@@Z ENDP				; UString::UString
_TEXT	ENDS
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	??0UString@@AAE@ABV0@_W@Z			; UString::UString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -12						; size = 4
_chars$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_c$ = 12						; size = 2
??0UString@@AAE@ABV0@_W@Z PROC				; UString::UString
; _this$ = ecx
; Line 969
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 970
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@UString@@AAEXI@Z		; UString::SetStartLen
; Line 971
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _chars$[ebp], ecx
; Line 972
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _len$[ebp], eax
; Line 973
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	eax, DWORD PTR _chars$[ebp]
	push	eax
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 974
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _chars$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 975
	xor	ecx, ecx
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _chars$[ebp]
	mov	WORD PTR [eax+edx*2+2], cx
; Line 976
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??0UString@@AAE@ABV0@_W@Z ENDP				; UString::UString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
_TEXT	ENDS
PUBLIC	??0UString@@AAE@PB_WI0I@Z			; UString::UString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_chars$ = -8						; size = 4
_this$ = -4						; size = 4
_s1$ = 8						; size = 4
_num1$ = 12						; size = 4
_s2$ = 16						; size = 4
_num2$ = 20						; size = 4
??0UString@@AAE@PB_WI0I@Z PROC				; UString::UString
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 979
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 980
	mov	eax, DWORD PTR _num1$[ebp]
	add	eax, DWORD PTR _num2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@UString@@AAEXI@Z		; UString::SetStartLen
; Line 981
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _chars$[ebp], edx
; Line 982
	mov	eax, DWORD PTR _num1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	mov	edx, DWORD PTR _chars$[ebp]
	push	edx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 983
	mov	eax, DWORD PTR _num2$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _num1$[ebp]
	mov	eax, DWORD PTR _chars$[ebp]
	lea	ecx, DWORD PTR [eax+edx*2]
	push	ecx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 984
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??0UString@@AAE@PB_WI0I@Z ENDP				; UString::UString
_TEXT	ENDS
PUBLIC	??H@YG?AVUString@@ABV0@0@Z			; operator+
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69463 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s1$ = 12						; size = 4
_s2$ = 16						; size = 4
??H@YG?AVUString@@ABV0@0@Z PROC				; operator+
; Line 986
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T69463[ebp], 0
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	push	eax
	mov	ecx, DWORD PTR _s2$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@AAE@PB_WI0I@Z		; UString::UString
	mov	eax, DWORD PTR $T69463[ebp]
	or	eax, 1
	mov	DWORD PTR $T69463[ebp], eax
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??H@YG?AVUString@@ABV0@0@Z ENDP				; operator+
_TEXT	ENDS
PUBLIC	??H@YG?AVUString@@ABV0@PB_W@Z			; operator+
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69467 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s1$ = 12						; size = 4
_s2$ = 16						; size = 4
??H@YG?AVUString@@ABV0@PB_W@Z PROC			; operator+
; Line 987
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T69467[ebp], 0
	mov	eax, DWORD PTR _s2$[ebp]
	push	eax
	call	?MyStringLen@@YGIPB_W@Z			; MyStringLen
	push	eax
	mov	ecx, DWORD PTR _s2$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@AAE@PB_WI0I@Z		; UString::UString
	mov	edx, DWORD PTR $T69467[ebp]
	or	edx, 1
	mov	DWORD PTR $T69467[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??H@YG?AVUString@@ABV0@PB_W@Z ENDP			; operator+
_TEXT	ENDS
PUBLIC	??H@YG?AVUString@@PB_WABV0@@Z			; operator+
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69471 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s1$ = 12						; size = 4
_s2$ = 16						; size = 4
??H@YG?AVUString@@PB_WABV0@@Z PROC			; operator+
; Line 988
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T69471[ebp], 0
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	push	eax
	mov	ecx, DWORD PTR _s2$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	eax, DWORD PTR _s1$[ebp]
	push	eax
	call	?MyStringLen@@YGIPB_W@Z			; MyStringLen
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@AAE@PB_WI0I@Z		; UString::UString
	mov	edx, DWORD PTR $T69471[ebp]
	or	edx, 1
	mov	DWORD PTR $T69471[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??H@YG?AVUString@@PB_WABV0@@Z ENDP			; operator+
_TEXT	ENDS
PUBLIC	??0UString@@QAE@XZ				; UString::UString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69474 = -8						; size = 4
_this$ = -4						; size = 4
??0UString@@QAE@XZ PROC					; UString::UString
; _this$ = ecx
; Line 991
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 992
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 993
	push	8
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69474[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T69474[ebp]
	mov	DWORD PTR [ecx], edx
; Line 994
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
; Line 995
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 3
; Line 996
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	xor	ecx, ecx
	mov	WORD PTR [eax], cx
; Line 997
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0UString@@QAE@XZ ENDP					; UString::UString
_TEXT	ENDS
PUBLIC	??0UString@@QAE@_W@Z				; UString::UString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 2
??0UString@@QAE@_W@Z PROC				; UString::UString
; _this$ = ecx
; Line 1000
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1001
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@UString@@AAEXI@Z		; UString::SetStartLen
; Line 1002
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dx, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx], dx
; Line 1003
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	WORD PTR [ecx+2], dx
; Line 1004
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0UString@@QAE@_W@Z ENDP				; UString::UString
_TEXT	ENDS
PUBLIC	??0UString@@QAE@PB_W@Z				; UString::UString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??0UString@@QAE@PB_W@Z PROC				; UString::UString
; _this$ = ecx
; Line 1007
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1008
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPB_W@Z			; MyStringLen
	mov	DWORD PTR _len$[ebp], eax
; Line 1009
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@UString@@AAEXI@Z		; UString::SetStartLen
; Line 1010
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 1011
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0UString@@QAE@PB_W@Z ENDP				; UString::UString
_TEXT	ENDS
PUBLIC	??0UString@@QAE@ABV0@@Z				; UString::UString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??0UString@@QAE@ABV0@@Z PROC				; UString::UString
; _this$ = ecx
; Line 1014
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1015
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@UString@@AAEXI@Z		; UString::SetStartLen
; Line 1016
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 1017
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0UString@@QAE@ABV0@@Z ENDP				; UString::UString
_TEXT	ENDS
PUBLIC	??4UString@@QAEAAV0@_W@Z			; UString::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69480 = -16						; size = 4
$T69479 = -12						; size = 4
_newBuf$68921 = -8					; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
??4UString@@QAEAAV0@_W@Z PROC				; UString::operator=
; _this$ = ecx
; Line 1020
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1021
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+8], 1
	jae	SHORT $LN1@operator@6
; Line 1023
	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69479[ebp], eax
	mov	ecx, DWORD PTR $T69479[ebp]
	mov	DWORD PTR _newBuf$68921[ebp], ecx
; Line 1024
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T69480[ebp], eax
	mov	ecx, DWORD PTR $T69480[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 1025
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newBuf$68921[ebp]
	mov	DWORD PTR [edx], eax
; Line 1026
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 1
$LN1@operator@6:
; Line 1028
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], 1
; Line 1029
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dx, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx], dx
; Line 1030
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	WORD PTR [ecx+2], dx
; Line 1031
	mov	eax, DWORD PTR _this$[ebp]
; Line 1032
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4UString@@QAEAAV0@_W@Z ENDP				; UString::operator=
_TEXT	ENDS
PUBLIC	??4UString@@QAEAAV0@PB_W@Z			; UString::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69483 = -20						; size = 4
$T69482 = -16						; size = 4
_newBuf$68931 = -12					; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??4UString@@QAEAAV0@PB_W@Z PROC				; UString::operator=
; _this$ = ecx
; Line 1035
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1036
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPB_W@Z			; MyStringLen
	mov	DWORD PTR _len$[ebp], eax
; Line 1037
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN1@operator@7
; Line 1039
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69482[ebp], eax
	mov	eax, DWORD PTR $T69482[ebp]
	mov	DWORD PTR _newBuf$68931[ebp], eax
; Line 1040
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T69483[ebp], edx
	mov	eax, DWORD PTR $T69483[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 1041
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newBuf$68931[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1042
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@operator@7:
; Line 1044
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1045
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 1046
	mov	eax, DWORD PTR _this$[ebp]
; Line 1047
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4UString@@QAEAAV0@PB_W@Z ENDP				; UString::operator=
_TEXT	ENDS
PUBLIC	??4UString@@QAEAAV0@ABV0@@Z			; UString::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69486 = -20						; size = 4
$T69485 = -16						; size = 4
_newBuf$68942 = -12					; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??4UString@@QAEAAV0@ABV0@@Z PROC			; UString::operator=
; _this$ = ecx
; Line 1050
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1051
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN2@operator@8
; Line 1052
	mov	eax, DWORD PTR _this$[ebp]
	jmp	$LN3@operator@8
$LN2@operator@8:
; Line 1053
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _len$[ebp], edx
; Line 1054
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN1@operator@8
; Line 1056
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69485[ebp], eax
	mov	eax, DWORD PTR $T69485[ebp]
	mov	DWORD PTR _newBuf$68942[ebp], eax
; Line 1057
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T69486[ebp], edx
	mov	eax, DWORD PTR $T69486[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 1058
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newBuf$68942[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1059
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@operator@8:
; Line 1061
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1062
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 1063
	mov	eax, DWORD PTR _this$[ebp]
$LN3@operator@8:
; Line 1064
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4UString@@QAEAAV0@ABV0@@Z ENDP			; UString::operator=
_TEXT	ENDS
PUBLIC	?SetFromBstr@UString@@QAEXPA_W@Z		; UString::SetFromBstr
EXTRN	__imp__SysStringLen@4:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69489 = -20						; size = 4
$T69488 = -16						; size = 4
_newBuf$68952 = -12					; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?SetFromBstr@UString@@QAEXPA_W@Z PROC			; UString::SetFromBstr
; _this$ = ecx
; Line 1067
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1068
	mov	esi, esp
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	DWORD PTR __imp__SysStringLen@4
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _len$[ebp], eax
; Line 1069
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN1@SetFromBst
; Line 1071
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69488[ebp], eax
	mov	eax, DWORD PTR $T69488[ebp]
	mov	DWORD PTR _newBuf$68952[ebp], eax
; Line 1072
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T69489[ebp], edx
	mov	eax, DWORD PTR $T69489[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 1073
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newBuf$68952[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1074
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN1@SetFromBst:
; Line 1076
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1078
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 1079
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFromBstr@UString@@QAEXPA_W@Z ENDP			; UString::SetFromBstr
_TEXT	ENDS
PUBLIC	??YUString@@QAEAAV0@_W@Z			; UString::operator+=
PUBLIC	?Add_Space@UString@@QAEXXZ			; UString::Add_Space
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Add_Space@UString@@QAEXXZ PROC				; UString::Add_Space
; _this$ = ecx
; Line 1081
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	32					; 00000020H
	mov	ecx, DWORD PTR _this$[ebp]
	call	??YUString@@QAEAAV0@_W@Z		; UString::operator+=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Add_Space@UString@@QAEXXZ ENDP				; UString::Add_Space
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??YUString@@QAEAAV0@_W@Z
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
??YUString@@QAEAAV0@_W@Z PROC				; UString::operator+=, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 515
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@operator@9
; Line 517
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@UString@@AAEXXZ			; UString::Grow_1
$LN1@operator@9:
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 519
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 520
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _chars$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 521
	xor	edx, edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _chars$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 522
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 523
	mov	eax, DWORD PTR _this$[ebp]
; Line 524
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUString@@QAEAAV0@_W@Z ENDP				; UString::operator+=
_TEXT	ENDS
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	?Add_Space_if_NotEmpty@UString@@QAEXXZ		; UString::Add_Space_if_NotEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Add_Space_if_NotEmpty@UString@@QAEXXZ PROC		; UString::Add_Space_if_NotEmpty
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 1082
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@Add_Space_@2
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add_Space@UString@@QAEXXZ		; UString::Add_Space
$LN2@Add_Space_@2:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Add_Space_if_NotEmpty@UString@@QAEXXZ ENDP		; UString::Add_Space_if_NotEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
_TEXT	ENDS
PUBLIC	?Add_LF@UString@@QAEXXZ				; UString::Add_LF
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
?Add_LF@UString@@QAEXXZ PROC				; UString::Add_LF
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 1085
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1086
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@Add_LF
; Line 1087
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@UString@@AAEXXZ			; UString::Grow_1
$LN1@Add_LF:
; Line 1088
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _len$[ebp], ecx
; Line 1089
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 1090
	mov	ecx, 10					; 0000000aH
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _chars$[ebp]
	mov	WORD PTR [eax+edx*2], cx
	mov	ecx, DWORD PTR _len$[ebp]
	add	ecx, 1
	mov	DWORD PTR _len$[ebp], ecx
; Line 1091
	xor	edx, edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	ecx, DWORD PTR _chars$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 1092
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1093
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Add_LF@UString@@QAEXXZ ENDP				; UString::Add_LF
_TEXT	ENDS
PUBLIC	??YUString@@QAEAAV0@PB_W@Z			; UString::operator+=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??YUString@@QAEAAV0@PB_W@Z PROC				; UString::operator+=
; _this$ = ecx
; Line 1096
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1097
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPB_W@Z			; MyStringLen
	mov	DWORD PTR _len$[ebp], eax
; Line 1098
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@UString@@AAEXI@Z			; UString::Grow
; Line 1099
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx*2]
	push	edx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 1100
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 1101
	mov	eax, DWORD PTR _this$[ebp]
; Line 1102
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUString@@QAEAAV0@PB_W@Z ENDP				; UString::operator+=
_TEXT	ENDS
PUBLIC	??YUString@@QAEAAV0@ABV0@@Z			; UString::operator+=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??YUString@@QAEAAV0@ABV0@@Z PROC			; UString::operator+=
; _this$ = ecx
; Line 1105
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1106
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@UString@@AAEXI@Z			; UString::Grow
; Line 1107
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	ecx, DWORD PTR [eax+ecx*2]
	push	ecx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 1108
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR [ecx+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1109
	mov	eax, DWORD PTR _this$[ebp]
; Line 1110
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??YUString@@QAEAAV0@ABV0@@Z ENDP			; UString::operator+=
_TEXT	ENDS
PUBLIC	?SetFrom@UString@@QAEXPB_WI@Z			; UString::SetFrom
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69501 = -16						; size = 4
$T69500 = -12						; size = 4
_newBuf$68984 = -8					; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_len$ = 12						; size = 4
?SetFrom@UString@@QAEXPB_WI@Z PROC			; UString::SetFrom
; _this$ = ecx
; Line 1113
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1114
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@SetFrom@2
; Line 1116
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69500[ebp], eax
	mov	eax, DWORD PTR $T69500[ebp]
	mov	DWORD PTR _newBuf$68984[ebp], eax
; Line 1117
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T69501[ebp], edx
	mov	eax, DWORD PTR $T69501[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 1118
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newBuf$68984[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1119
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN2@SetFrom@2:
; Line 1121
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN1@SetFrom@2
; Line 1122
	mov	edx, DWORD PTR _len$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
$LN1@SetFrom@2:
; Line 1123
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	mov	eax, DWORD PTR _len$[ebp]
	mov	WORD PTR [ecx+eax*2], dx
; Line 1124
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 1125
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetFrom@UString@@QAEXPB_WI@Z ENDP			; UString::SetFrom
_TEXT	ENDS
PUBLIC	?SetFromAscii@UString@@QAEXPBD@Z		; UString::SetFromAscii
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69504 = -28						; size = 4
$T69503 = -24						; size = 4
_i$69000 = -20						; size = 4
_chars$ = -16						; size = 4
_newBuf$68995 = -12					; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?SetFromAscii@UString@@QAEXPBD@Z PROC			; UString::SetFromAscii
; _this$ = ecx
; Line 1128
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1129
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	DWORD PTR _len$[ebp], eax
; Line 1130
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	cmp	edx, DWORD PTR [ecx+8]
	jbe	SHORT $LN4@SetFromAsc
; Line 1132
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69503[ebp], eax
	mov	eax, DWORD PTR $T69503[ebp]
	mov	DWORD PTR _newBuf$68995[ebp], eax
; Line 1133
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T69504[ebp], edx
	mov	eax, DWORD PTR $T69504[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 1134
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newBuf$68995[ebp]
	mov	DWORD PTR [ecx], edx
; Line 1135
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN4@SetFromAsc:
; Line 1137
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _chars$[ebp], eax
; Line 1138
	mov	DWORD PTR _i$69000[ebp], 0
	jmp	SHORT $LN3@SetFromAsc
$LN2@SetFromAsc:
	mov	ecx, DWORD PTR _i$69000[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$69000[ebp], ecx
$LN3@SetFromAsc:
	mov	edx, DWORD PTR _i$69000[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jae	SHORT $LN1@SetFromAsc
; Line 1139
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$69000[ebp]
	movzx	cx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$69000[ebp]
	mov	eax, DWORD PTR _chars$[ebp]
	mov	WORD PTR [eax+edx*2], cx
	jmp	SHORT $LN2@SetFromAsc
$LN1@SetFromAsc:
; Line 1140
	xor	ecx, ecx
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _chars$[ebp]
	mov	WORD PTR [eax+edx*2], cx
; Line 1141
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 1142
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFromAscii@UString@@QAEXPBD@Z ENDP			; UString::SetFromAscii
_TEXT	ENDS
PUBLIC	?AddAscii@UString@@QAEXPBD@Z			; UString::AddAscii
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$69011 = -16						; size = 4
_chars$ = -12						; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?AddAscii@UString@@QAEXPBD@Z PROC			; UString::AddAscii
; _this$ = ecx
; Line 1145
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1146
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	DWORD PTR _len$[ebp], eax
; Line 1147
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow@UString@@AAEXI@Z			; UString::Grow
; Line 1148
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*2]
	mov	DWORD PTR _chars$[ebp], eax
; Line 1149
	mov	DWORD PTR _i$69011[ebp], 0
	jmp	SHORT $LN3@AddAscii
$LN2@AddAscii:
	mov	ecx, DWORD PTR _i$69011[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$69011[ebp], ecx
$LN3@AddAscii:
	mov	edx, DWORD PTR _i$69011[ebp]
	cmp	edx, DWORD PTR _len$[ebp]
	jae	SHORT $LN1@AddAscii
; Line 1150
	mov	eax, DWORD PTR _s$[ebp]
	add	eax, DWORD PTR _i$69011[ebp]
	movzx	cx, BYTE PTR [eax]
	mov	edx, DWORD PTR _i$69011[ebp]
	mov	eax, DWORD PTR _chars$[ebp]
	mov	WORD PTR [eax+edx*2], cx
	jmp	SHORT $LN2@AddAscii
$LN1@AddAscii:
; Line 1151
	xor	ecx, ecx
	mov	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _chars$[ebp]
	mov	WORD PTR [eax+edx*2], cx
; Line 1152
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _len$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
; Line 1153
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddAscii@UString@@QAEXPBD@Z ENDP			; UString::AddAscii
_TEXT	ENDS
PUBLIC	?wcsstr@@YAPA_WPA_WPB_W@Z			; wcsstr
PUBLIC	?Find@UString@@QBEHPB_WI@Z			; UString::Find
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_fs$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
_startIndex$ = 12					; size = 4
?Find@UString@@QBEHPB_WI@Z PROC				; UString::Find
; _this$ = ecx
; Line 1158
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1159
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _startIndex$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	call	?wcsstr@@YAPA_WPA_WPB_W@Z		; wcsstr
	add	esp, 8
	mov	DWORD PTR _fs$[ebp], eax
; Line 1160
	cmp	DWORD PTR _fs$[ebp], 0
	jne	SHORT $LN1@Find@3
; Line 1161
	or	eax, -1
	jmp	SHORT $LN2@Find@3
$LN1@Find@3:
; Line 1162
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _fs$[ebp]
	sub	eax, DWORD PTR [edx]
	sar	eax, 1
$LN2@Find@3:
; Line 1186
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Find@UString@@QBEHPB_WI@Z ENDP				; UString::Find
_TEXT	ENDS
EXTRN	__imp__wcsstr:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?wcsstr@@YAPA_WPA_WPB_W@Z
_TEXT	SEGMENT
__Str$ = 8						; size = 4
__SubStr$ = 12						; size = 4
?wcsstr@@YAPA_WPA_WPB_W@Z PROC				; wcsstr, COMDAT
; File c:\program files (x86)\microsoft visual studio 10.0\vc\include\string.h
; Line 368
	push	ebp
	mov	ebp, esp
	push	esi
	mov	esi, esp
	mov	eax, DWORD PTR __SubStr$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Str$[ebp]
	push	ecx
	call	DWORD PTR __imp__wcsstr
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?wcsstr@@YAPA_WPA_WPB_W@Z ENDP				; wcsstr
_TEXT	ENDS
PUBLIC	?ReverseFind@UString@@QBEH_W@Z			; UString::ReverseFind
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_p$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?ReverseFind@UString@@QBEH_W@Z PROC			; UString::ReverseFind
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 1189
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1190
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN5@ReverseFin@3
; Line 1191
	or	eax, -1
	jmp	SHORT $LN6@ReverseFin@3
$LN5@ReverseFin@3:
; Line 1192
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx*2-2]
	mov	DWORD PTR _p$[ebp], edx
$LN4@ReverseFin@3:
; Line 1195
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, WORD PTR [eax]
	movzx	edx, WORD PTR _c$[ebp]
	cmp	ecx, edx
	jne	SHORT $LN2@ReverseFin@3
; Line 1196
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, DWORD PTR [eax]
	sar	ecx, 1
	mov	eax, ecx
	jmp	SHORT $LN6@ReverseFin@3
$LN2@ReverseFin@3:
; Line 1197
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN1@ReverseFin@3
; Line 1198
	or	eax, -1
	jmp	SHORT $LN6@ReverseFin@3
$LN1@ReverseFin@3:
; Line 1199
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
; Line 1200
	jmp	SHORT $LN4@ReverseFin@3
$LN6@ReverseFin@3:
; Line 1201
	mov	esp, ebp
	pop	ebp
	ret	4
?ReverseFind@UString@@QBEH_W@Z ENDP			; UString::ReverseFind
_TEXT	ENDS
PUBLIC	?ReverseFind_PathSepar@UString@@QBEHXZ		; UString::ReverseFind_PathSepar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$69044 = -12						; size = 2
_p$ = -8						; size = 4
_this$ = -4						; size = 4
?ReverseFind_PathSepar@UString@@QBEHXZ PROC		; UString::ReverseFind_PathSepar
; _this$ = ecx
; Line 1204
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1205
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	jne	SHORT $LN6@ReverseFin@4
; Line 1206
	or	eax, -1
	jmp	SHORT $LN7@ReverseFin@4
$LN6@ReverseFin@4:
; Line 1207
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR [ecx+edx*2-2]
	mov	DWORD PTR _p$[ebp], edx
$LN5@ReverseFin@4:
; Line 1210
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$69044[ebp], cx
; Line 1211
	movzx	edx, WORD PTR _c$69044[ebp]
	cmp	edx, 92					; 0000005cH
	je	SHORT $LN2@ReverseFin@4
	movzx	eax, WORD PTR _c$69044[ebp]
	cmp	eax, 47					; 0000002fH
	jne	SHORT $LN3@ReverseFin@4
$LN2@ReverseFin@4:
; Line 1212
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [ecx]
	sar	eax, 1
	jmp	SHORT $LN7@ReverseFin@4
$LN3@ReverseFin@4:
; Line 1213
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN1@ReverseFin@4
; Line 1214
	or	eax, -1
	jmp	SHORT $LN7@ReverseFin@4
$LN1@ReverseFin@4:
; Line 1215
	mov	ecx, DWORD PTR _p$[ebp]
	sub	ecx, 2
	mov	DWORD PTR _p$[ebp], ecx
; Line 1216
	jmp	SHORT $LN5@ReverseFin@4
$LN7@ReverseFin@4:
; Line 1217
	mov	esp, ebp
	pop	ebp
	ret	0
?ReverseFind_PathSepar@UString@@QBEHXZ ENDP		; UString::ReverseFind_PathSepar
_TEXT	ENDS
PUBLIC	?TrimLeft@UString@@QAEXXZ			; UString::TrimLeft
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pos$ = -16						; size = 4
_c$69056 = -12						; size = 2
_p$ = -8						; size = 4
_this$ = -4						; size = 4
?TrimLeft@UString@@QAEXXZ PROC				; UString::TrimLeft
; _this$ = ecx
; Line 1220
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1221
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
	jmp	SHORT $LN5@TrimLeft@2
$LN4@TrimLeft@2:
; Line 1222
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 2
	mov	DWORD PTR _p$[ebp], edx
$LN5@TrimLeft@2:
; Line 1224
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$69056[ebp], cx
; Line 1225
	movzx	edx, WORD PTR _c$69056[ebp]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN2@TrimLeft@2
	movzx	eax, WORD PTR _c$69056[ebp]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN2@TrimLeft@2
	movzx	ecx, WORD PTR _c$69056[ebp]
	cmp	ecx, 9
	je	SHORT $LN2@TrimLeft@2
; Line 1226
	jmp	SHORT $LN3@TrimLeft@2
$LN2@TrimLeft@2:
; Line 1227
	jmp	SHORT $LN4@TrimLeft@2
$LN3@TrimLeft@2:
; Line 1228
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	sub	eax, DWORD PTR [edx]
	sar	eax, 1
	mov	DWORD PTR _pos$[ebp], eax
; Line 1229
	je	SHORT $LN6@TrimLeft@2
; Line 1231
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@UString@@AAEXII@Z		; UString::MoveItems
; Line 1232
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, DWORD PTR _pos$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN6@TrimLeft@2:
; Line 1234
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?TrimLeft@UString@@QAEXXZ ENDP				; UString::TrimLeft
_TEXT	ENDS
PUBLIC	?TrimRight@UString@@QAEXXZ			; UString::TrimRight
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$69069 = -16						; size = 2
_i$ = -12						; size = 4
_p$ = -8						; size = 4
_this$ = -4						; size = 4
?TrimRight@UString@@QAEXXZ PROC				; UString::TrimRight
; _this$ = ecx
; Line 1237
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1238
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _p$[ebp], ecx
; Line 1240
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	DWORD PTR _i$[ebp], eax
	jmp	SHORT $LN5@TrimRight@2
$LN4@TrimRight@2:
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN5@TrimRight@2:
	cmp	DWORD PTR _i$[ebp], 0
	je	SHORT $LN3@TrimRight@2
; Line 1242
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	cx, WORD PTR [eax+edx*2-2]
	mov	WORD PTR _c$69069[ebp], cx
; Line 1243
	movzx	edx, WORD PTR _c$69069[ebp]
	cmp	edx, 32					; 00000020H
	je	SHORT $LN2@TrimRight@2
	movzx	eax, WORD PTR _c$69069[ebp]
	cmp	eax, 10					; 0000000aH
	je	SHORT $LN2@TrimRight@2
	movzx	ecx, WORD PTR _c$69069[ebp]
	cmp	ecx, 9
	je	SHORT $LN2@TrimRight@2
; Line 1244
	jmp	SHORT $LN3@TrimRight@2
$LN2@TrimRight@2:
; Line 1245
	jmp	SHORT $LN4@TrimRight@2
$LN3@TrimRight@2:
; Line 1246
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	je	SHORT $LN6@TrimRight@2
; Line 1248
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	ecx, DWORD PTR _i$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 1249
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR [edx+4], eax
$LN6@TrimRight@2:
; Line 1251
	mov	esp, ebp
	pop	ebp
	ret	0
?TrimRight@UString@@QAEXXZ ENDP				; UString::TrimRight
_TEXT	ENDS
PUBLIC	?InsertAtFront@UString@@QAEX_W@Z		; UString::InsertAtFront
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_c$ = 8							; size = 2
?InsertAtFront@UString@@QAEX_W@Z PROC			; UString::InsertAtFront
; _this$ = ecx
; Line 1254
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1255
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+8]
	cmp	edx, DWORD PTR [ecx+4]
	jne	SHORT $LN1@InsertAtFr@2
; Line 1256
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Grow_1@UString@@AAEXXZ			; UString::Grow_1
$LN1@InsertAtFr@2:
; Line 1257
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@UString@@AAEXII@Z		; UString::MoveItems
; Line 1258
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dx, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx], dx
; Line 1259
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 1260
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?InsertAtFront@UString@@QAEX_W@Z ENDP			; UString::InsertAtFront
_TEXT	ENDS
PUBLIC	?Insert@UString@@QAEXIPB_W@Z			; UString::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_num$ = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_s$ = 12						; size = 4
?Insert@UString@@QAEXIPB_W@Z PROC			; UString::Insert
; _this$ = ecx
; Line 1272
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1273
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPB_W@Z			; MyStringLen
	mov	DWORD PTR _num$[ebp], eax
; Line 1274
	cmp	DWORD PTR _num$[ebp], 0
	je	SHORT $LN2@Insert@3
; Line 1276
	mov	ecx, DWORD PTR _num$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InsertSpace@UString@@AAEXII@Z		; UString::InsertSpace
; Line 1277
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _index$[ebp]
	lea	edx, DWORD PTR [eax+ecx*2]
	push	edx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 1278
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, DWORD PTR _num$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN2@Insert@3:
; Line 1280
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@UString@@QAEXIPB_W@Z ENDP			; UString::Insert
_TEXT	ENDS
PUBLIC	?Insert@UString@@QAEXIABV1@@Z			; UString::Insert
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_num$ = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_s$ = 12						; size = 4
?Insert@UString@@QAEXIABV1@@Z PROC			; UString::Insert
; _this$ = ecx
; Line 1283
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1284
	mov	ecx, DWORD PTR _s$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _num$[ebp], eax
; Line 1285
	cmp	DWORD PTR _num$[ebp], 0
	je	SHORT $LN2@Insert@4
; Line 1287
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?InsertSpace@UString@@AAEXII@Z		; UString::InsertSpace
; Line 1288
	mov	edx, DWORD PTR _num$[ebp]
	push	edx
	mov	ecx, DWORD PTR _s$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	push	eax
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 1289
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, DWORD PTR _num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN2@Insert@4:
; Line 1291
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Insert@UString@@QAEXIABV1@@Z ENDP			; UString::Insert
_TEXT	ENDS
PUBLIC	?RemoveChar@UString@@QAEX_W@Z			; UString::RemoveChar
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$69106 = -20						; size = 2
_dest$ = -16						; size = 4
_c$69099 = -12						; size = 2
_src$ = -8						; size = 4
_this$ = -4						; size = 4
_ch$ = 8						; size = 2
?RemoveChar@UString@@QAEX_W@Z PROC			; UString::RemoveChar
; _this$ = ecx
; Line 1294
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1295
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _src$[ebp], ecx
$LN8@RemoveChar@2:
; Line 1299
	mov	edx, DWORD PTR _src$[ebp]
	mov	ax, WORD PTR [edx]
	mov	WORD PTR _c$69099[ebp], ax
	mov	ecx, DWORD PTR _src$[ebp]
	add	ecx, 2
	mov	DWORD PTR _src$[ebp], ecx
; Line 1300
	movzx	edx, WORD PTR _c$69099[ebp]
	test	edx, edx
	jne	SHORT $LN6@RemoveChar@2
; Line 1301
	jmp	SHORT $LN9@RemoveChar@2
$LN6@RemoveChar@2:
; Line 1302
	movzx	eax, WORD PTR _c$69099[ebp]
	movzx	ecx, WORD PTR _ch$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN5@RemoveChar@2
; Line 1303
	jmp	SHORT $LN7@RemoveChar@2
$LN5@RemoveChar@2:
; Line 1304
	jmp	SHORT $LN8@RemoveChar@2
$LN7@RemoveChar@2:
; Line 1306
	mov	edx, DWORD PTR _src$[ebp]
	sub	edx, 2
	mov	DWORD PTR _dest$[ebp], edx
$LN4@RemoveChar@2:
; Line 1310
	mov	eax, DWORD PTR _src$[ebp]
	mov	cx, WORD PTR [eax]
	mov	WORD PTR _c$69106[ebp], cx
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 2
	mov	DWORD PTR _src$[ebp], edx
; Line 1311
	movzx	eax, WORD PTR _c$69106[ebp]
	test	eax, eax
	jne	SHORT $LN2@RemoveChar@2
; Line 1312
	jmp	SHORT $LN3@RemoveChar@2
$LN2@RemoveChar@2:
; Line 1313
	movzx	ecx, WORD PTR _c$69106[ebp]
	movzx	edx, WORD PTR _ch$[ebp]
	cmp	ecx, edx
	je	SHORT $LN1@RemoveChar@2
; Line 1314
	mov	eax, DWORD PTR _dest$[ebp]
	mov	cx, WORD PTR _c$69106[ebp]
	mov	WORD PTR [eax], cx
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 2
	mov	DWORD PTR _dest$[ebp], edx
$LN1@RemoveChar@2:
; Line 1315
	jmp	SHORT $LN4@RemoveChar@2
$LN3@RemoveChar@2:
; Line 1317
	xor	eax, eax
	mov	ecx, DWORD PTR _dest$[ebp]
	mov	WORD PTR [ecx], ax
; Line 1318
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	sub	eax, DWORD PTR [edx]
	sar	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
$LN9@RemoveChar@2:
; Line 1319
	mov	esp, ebp
	pop	ebp
	ret	4
?RemoveChar@UString@@QAEX_W@Z ENDP			; UString::RemoveChar
_TEXT	ENDS
PUBLIC	?Find@UString@@QBEH_WI@Z			; UString::Find
PUBLIC	?Replace@UString@@QAEX_W0@Z			; UString::Replace
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_oldChar$ = 8						; size = 2
_newChar$ = 12						; size = 2
?Replace@UString@@QAEX_W0@Z PROC			; UString::Replace
; _this$ = ecx
; Line 1323
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1324
	movzx	eax, WORD PTR _oldChar$[ebp]
	movzx	ecx, WORD PTR _newChar$[ebp]
	cmp	eax, ecx
	jne	SHORT $LN4@Replace@3
; Line 1325
	jmp	SHORT $LN5@Replace@3
$LN4@Replace@3:
; Line 1327
	mov	DWORD PTR _pos$[ebp], 0
$LN3@Replace@3:
; Line 1328
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _pos$[ebp]
	cmp	eax, DWORD PTR [edx+4]
	jae	SHORT $LN5@Replace@3
; Line 1330
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	movzx	edx, WORD PTR _oldChar$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@UString@@QBEH_WI@Z		; UString::Find
	mov	DWORD PTR _pos$[ebp], eax
; Line 1331
	cmp	DWORD PTR _pos$[ebp], 0
	jge	SHORT $LN1@Replace@3
; Line 1332
	jmp	SHORT $LN5@Replace@3
$LN1@Replace@3:
; Line 1333
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	ax, WORD PTR _newChar$[ebp]
	mov	WORD PTR [ecx+edx*2], ax
; Line 1334
	mov	ecx, DWORD PTR _pos$[ebp]
	add	ecx, 1
	mov	DWORD PTR _pos$[ebp], ecx
; Line 1336
	jmp	SHORT $LN3@Replace@3
$LN5@Replace@3:
; Line 1338
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Replace@UString@@QAEX_W0@Z ENDP			; UString::Replace
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Find@UString@@QBEH_WI@Z
_TEXT	SEGMENT
tv71 = -12						; size = 4
_pos$ = -8						; size = 4
_this$ = -4						; size = 4
_c$ = 8							; size = 2
_startIndex$ = 12					; size = 4
?Find@UString@@QBEH_WI@Z PROC				; UString::Find, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 569
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 570
	movzx	eax, WORD PTR _c$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _startIndex$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]
	push	ecx
	call	?FindCharPosInString@@YGHPB_W_W@Z	; FindCharPosInString
	mov	DWORD PTR _pos$[ebp], eax
; Line 571
	cmp	DWORD PTR _pos$[ebp], 0
	jge	SHORT $LN3@Find@4
	mov	DWORD PTR tv71[ebp], -1
	jmp	SHORT $LN4@Find@4
$LN3@Find@4:
	mov	edx, DWORD PTR _startIndex$[ebp]
	add	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR tv71[ebp], edx
$LN4@Find@4:
	mov	eax, DWORD PTR tv71[ebp]
; Line 572
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Find@UString@@QBEH_WI@Z ENDP				; UString::Find
_TEXT	ENDS
PUBLIC	?Delete@UString@@QAEXII@Z			; UString::Delete
PUBLIC	??8@YG_NABVUString@@0@Z				; operator==
PUBLIC	?Replace@UString@@QAEXABV1@0@Z			; UString::Replace
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_pos$ = -16						; size = 4
_newLen$ = -12						; size = 4
_oldLen$ = -8						; size = 4
_this$ = -4						; size = 4
_oldString$ = 8						; size = 4
_newString$ = 12					; size = 4
?Replace@UString@@QAEXABV1@0@Z PROC			; UString::Replace
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 1341
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1342
	mov	ecx, DWORD PTR _oldString$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@Replace@4
; Line 1343
	jmp	$LN6@Replace@4
$LN5@Replace@4:
; Line 1344
	mov	ecx, DWORD PTR _newString$[ebp]
	push	ecx
	mov	edx, DWORD PTR _oldString$[ebp]
	push	edx
	call	??8@YG_NABVUString@@0@Z			; operator==
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@Replace@4
; Line 1345
	jmp	SHORT $LN6@Replace@4
$LN4@Replace@4:
; Line 1346
	mov	ecx, DWORD PTR _oldString$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _oldLen$[ebp], eax
; Line 1347
	mov	ecx, DWORD PTR _newString$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _newLen$[ebp], eax
; Line 1349
	mov	DWORD PTR _pos$[ebp], 0
$LN3@Replace@4:
; Line 1350
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _pos$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jae	SHORT $LN6@Replace@4
; Line 1352
	mov	eax, DWORD PTR _pos$[ebp]
	push	eax
	mov	ecx, DWORD PTR _oldString$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Find@UString@@QBEHPB_WI@Z		; UString::Find
	mov	DWORD PTR _pos$[ebp], eax
; Line 1353
	cmp	DWORD PTR _pos$[ebp], 0
	jge	SHORT $LN1@Replace@4
; Line 1354
	jmp	SHORT $LN6@Replace@4
$LN1@Replace@4:
; Line 1355
	mov	ecx, DWORD PTR _oldLen$[ebp]
	push	ecx
	mov	edx, DWORD PTR _pos$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Delete@UString@@QAEXII@Z		; UString::Delete
; Line 1356
	mov	eax, DWORD PTR _newString$[ebp]
	push	eax
	mov	ecx, DWORD PTR _pos$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Insert@UString@@QAEXIABV1@@Z		; UString::Insert
; Line 1357
	mov	edx, DWORD PTR _pos$[ebp]
	add	edx, DWORD PTR _newLen$[ebp]
	mov	DWORD PTR _pos$[ebp], edx
; Line 1359
	jmp	SHORT $LN3@Replace@4
$LN6@Replace@4:
; Line 1361
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Replace@UString@@QAEXABV1@0@Z ENDP			; UString::Replace
_TEXT	ENDS
EXTRN	__imp__wcscmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??8@YG_NABVUString@@0@Z
_TEXT	SEGMENT
tv77 = -4						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??8@YG_NABVUString@@0@Z PROC				; operator==, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 616
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	esi, eax
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	esi, eax
	jne	SHORT $LN3@operator@10
	mov	ecx, DWORD PTR _s2$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN3@operator@10
	mov	DWORD PTR tv77[ebp], 1
	jmp	SHORT $LN4@operator@10
$LN3@operator@10:
	mov	DWORD PTR tv77[ebp], 0
$LN4@operator@10:
	mov	al, BYTE PTR tv77[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??8@YG_NABVUString@@0@Z ENDP				; operator==
_TEXT	ENDS
PUBLIC	?Delete@UString@@QAEXI@Z			; UString::Delete
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?Delete@UString@@QAEXI@Z PROC				; UString::Delete
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 1364
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1365
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _index$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@UString@@AAEXII@Z		; UString::MoveItems
; Line 1366
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 1367
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Delete@UString@@QAEXI@Z ENDP				; UString::Delete
; Function compile flags: /Odtp /RTCsu
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_count$ = 12						; size = 4
?Delete@UString@@QAEXII@Z PROC				; UString::Delete
; _this$ = ecx
; Line 1370
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1371
	mov	eax, DWORD PTR _index$[ebp]
	add	eax, DWORD PTR _count$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	eax, DWORD PTR [ecx+4]
	jbe	SHORT $LN2@Delete@2
; Line 1372
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	sub	eax, DWORD PTR _index$[ebp]
	mov	DWORD PTR _count$[ebp], eax
$LN2@Delete@2:
; Line 1373
	cmp	DWORD PTR _count$[ebp], 0
	jbe	SHORT $LN3@Delete@2
; Line 1375
	mov	ecx, DWORD PTR _index$[ebp]
	add	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@UString@@AAEXII@Z		; UString::MoveItems
; Line 1376
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, DWORD PTR _count$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
$LN3@Delete@2:
; Line 1378
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Delete@UString@@QAEXII@Z ENDP				; UString::Delete
_TEXT	ENDS
PUBLIC	?DeleteFrontal@UString@@QAEXI@Z			; UString::DeleteFrontal
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?DeleteFrontal@UString@@QAEXI@Z PROC			; UString::DeleteFrontal
; _this$ = ecx
; Line 1381
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1382
	cmp	DWORD PTR _num$[ebp], 0
	je	SHORT $LN2@DeleteFron@2
; Line 1384
	mov	eax, DWORD PTR _num$[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?MoveItems@UString@@AAEXII@Z		; UString::MoveItems
; Line 1385
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	sub	edx, DWORD PTR _num$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
$LN2@DeleteFron@2:
; Line 1387
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?DeleteFrontal@UString@@QAEXI@Z ENDP			; UString::DeleteFrontal
_TEXT	ENDS
PUBLIC	?ReAlloc2@UString2@@AAEXI@Z			; UString2::ReAlloc2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69532 = -12						; size = 4
$T69531 = -8						; size = 4
_this$ = -4						; size = 4
_newLimit$ = 8						; size = 4
?ReAlloc2@UString2@@AAEXI@Z PROC			; UString2::ReAlloc2
; _this$ = ecx
; Line 1393
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1394
	cmp	DWORD PTR _newLimit$[ebp], 1073741824	; 40000000H
	jb	SHORT $LN1@ReAlloc2@3
	mov	DWORD PTR $T69531[ebp], 20130221	; 013329adH
	push	OFFSET __TI1H
	lea	eax, DWORD PTR $T69531[ebp]
	push	eax
	call	__CxxThrowException@8
$LN1@ReAlloc2@3:
; Line 1396
	mov	eax, DWORD PTR _newLimit$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69532[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T69532[ebp]
	mov	DWORD PTR [eax], ecx
$LN3@ReAlloc2@3:
; Line 1397
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReAlloc2@UString2@@AAEXI@Z ENDP			; UString2::ReAlloc2
_TEXT	ENDS
PUBLIC	?SetStartLen@UString2@@AAEXI@Z			; UString2::SetStartLen
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69534 = -8						; size = 4
_this$ = -4						; size = 4
_len$ = 8						; size = 4
?SetStartLen@UString2@@AAEXI@Z PROC			; UString2::SetStartLen
; _this$ = ecx
; Line 1400
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1401
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
; Line 1402
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69534[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T69534[ebp]
	mov	DWORD PTR [eax], ecx
; Line 1403
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _len$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 1404
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStartLen@UString2@@AAEXI@Z ENDP			; UString2::SetStartLen
_TEXT	ENDS
PUBLIC	??0UString2@@QAE@PB_W@Z				; UString2::UString2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??0UString2@@QAE@PB_W@Z PROC				; UString2::UString2
; _this$ = ecx
; Line 1417
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 1418
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPB_W@Z			; MyStringLen
	mov	DWORD PTR _len$[ebp], eax
; Line 1419
	mov	ecx, DWORD PTR _len$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@UString2@@AAEXI@Z		; UString2::SetStartLen
; Line 1420
	mov	edx, DWORD PTR _len$[ebp]
	add	edx, 1
	push	edx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
; Line 1421
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0UString2@@QAE@PB_W@Z ENDP				; UString2::UString2
_TEXT	ENDS
PUBLIC	??0UString2@@QAE@ABV0@@Z			; UString2::UString2
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??0UString2@@QAE@ABV0@@Z PROC				; UString2::UString2
; _this$ = ecx
; Line 1424
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 1425
	mov	edx, DWORD PTR _s$[ebp]
	cmp	DWORD PTR [edx], 0
	je	SHORT $LN2@UString2
; Line 1427
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetStartLen@UString2@@AAEXI@Z		; UString2::SetStartLen
; Line 1428
	mov	edx, DWORD PTR _s$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	_wmemcpy
	add	esp, 12					; 0000000cH
$LN2@UString2:
; Line 1430
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0UString2@@QAE@ABV0@@Z ENDP				; UString2::UString2
_TEXT	ENDS
PUBLIC	?MyStringCopy@@YGXPA_WPB_W@Z			; MyStringCopy
PUBLIC	??4UString2@@QAEAAV0@PB_W@Z			; UString2::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69539 = -20						; size = 4
$T69538 = -16						; size = 4
_newBuf$69184 = -12					; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??4UString2@@QAEAAV0@PB_W@Z PROC			; UString2::operator=
; _this$ = ecx
; Line 1450
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1451
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPB_W@Z			; MyStringLen
	mov	DWORD PTR _len$[ebp], eax
; Line 1452
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jbe	SHORT $LN2@operator@11
; Line 1454
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69538[ebp], eax
	mov	eax, DWORD PTR $T69538[ebp]
	mov	DWORD PTR _newBuf$69184[ebp], eax
; Line 1455
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@11
; Line 1456
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T69539[ebp], eax
	mov	ecx, DWORD PTR $T69539[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@operator@11:
; Line 1457
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newBuf$69184[ebp]
	mov	DWORD PTR [edx], eax
$LN2@operator@11:
; Line 1459
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 1460
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?MyStringCopy@@YGXPA_WPB_W@Z		; MyStringCopy
; Line 1461
	mov	eax, DWORD PTR _this$[ebp]
; Line 1462
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4UString2@@QAEAAV0@PB_W@Z ENDP			; UString2::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyStringCopy@@YGXPA_WPB_W@Z
_TEXT	SEGMENT
tv68 = -4						; size = 4
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
?MyStringCopy@@YGXPA_WPB_W@Z PROC			; MyStringCopy, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 58
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN2@MyStringCo@3:
; Line 59
	mov	eax, DWORD PTR _dest$[ebp]
	mov	ecx, DWORD PTR _src$[ebp]
	mov	dx, WORD PTR [ecx]
	mov	WORD PTR [eax], dx
	mov	eax, DWORD PTR _dest$[ebp]
	movzx	ecx, WORD PTR [eax]
	mov	edx, DWORD PTR _dest$[ebp]
	add	edx, 2
	mov	DWORD PTR _dest$[ebp], edx
	mov	eax, DWORD PTR _src$[ebp]
	add	eax, 2
	mov	DWORD PTR _src$[ebp], eax
	test	ecx, ecx
	je	SHORT $LN5@MyStringCo@3
	mov	DWORD PTR tv68[ebp], 1
	jmp	SHORT $LN6@MyStringCo@3
$LN5@MyStringCo@3:
	mov	DWORD PTR tv68[ebp], 0
$LN6@MyStringCo@3:
	cmp	DWORD PTR tv68[ebp], 0
	je	SHORT $LN3@MyStringCo@3
	jmp	SHORT $LN2@MyStringCo@3
$LN3@MyStringCo@3:
; Line 60
	mov	esp, ebp
	pop	ebp
	ret	8
?MyStringCopy@@YGXPA_WPB_W@Z ENDP			; MyStringCopy
_TEXT	ENDS
PUBLIC	?SetFromAscii@UString2@@QAEXPBD@Z		; UString2::SetFromAscii
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69546 = -28						; size = 4
$T69545 = -24						; size = 4
_i$69201 = -20						; size = 4
_chars$ = -16						; size = 4
_newBuf$69195 = -12					; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?SetFromAscii@UString2@@QAEXPBD@Z PROC			; UString2::SetFromAscii
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 1465
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1466
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	mov	DWORD PTR _len$[ebp], eax
; Line 1467
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	cmp	edx, DWORD PTR [ecx+4]
	jbe	SHORT $LN5@SetFromAsc@2
; Line 1469
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69545[ebp], eax
	mov	eax, DWORD PTR $T69545[ebp]
	mov	DWORD PTR _newBuf$69195[ebp], eax
; Line 1470
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN4@SetFromAsc@2
; Line 1471
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T69546[ebp], eax
	mov	ecx, DWORD PTR $T69546[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN4@SetFromAsc@2:
; Line 1472
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newBuf$69195[ebp]
	mov	DWORD PTR [edx], eax
$LN5@SetFromAsc@2:
; Line 1474
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR _chars$[ebp], edx
; Line 1475
	mov	DWORD PTR _i$69201[ebp], 0
	jmp	SHORT $LN3@SetFromAsc@2
$LN2@SetFromAsc@2:
	mov	eax, DWORD PTR _i$69201[ebp]
	add	eax, 1
	mov	DWORD PTR _i$69201[ebp], eax
$LN3@SetFromAsc@2:
	mov	ecx, DWORD PTR _i$69201[ebp]
	cmp	ecx, DWORD PTR _len$[ebp]
	jae	SHORT $LN1@SetFromAsc@2
; Line 1476
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, DWORD PTR _i$69201[ebp]
	movzx	ax, BYTE PTR [edx]
	mov	ecx, DWORD PTR _i$69201[ebp]
	mov	edx, DWORD PTR _chars$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
	jmp	SHORT $LN2@SetFromAsc@2
$LN1@SetFromAsc@2:
; Line 1477
	xor	eax, eax
	mov	ecx, DWORD PTR _len$[ebp]
	mov	edx, DWORD PTR _chars$[ebp]
	mov	WORD PTR [edx+ecx*2], ax
; Line 1478
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 1479
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetFromAscii@UString2@@QAEXPBD@Z ENDP			; UString2::SetFromAscii
_TEXT	ENDS
PUBLIC	??4UString2@@QAEAAV0@ABV0@@Z			; UString2::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69549 = -20						; size = 4
$T69548 = -16						; size = 4
_newBuf$69213 = -12					; size = 4
_len$ = -8						; size = 4
_this$ = -4						; size = 4
_s$ = 8							; size = 4
??4UString2@@QAEAAV0@ABV0@@Z PROC			; UString2::operator=
; _this$ = ecx
; Line 1482
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 1483
	mov	eax, DWORD PTR _s$[ebp]
	cmp	eax, DWORD PTR _this$[ebp]
	jne	SHORT $LN3@operator@12
; Line 1484
	mov	eax, DWORD PTR _this$[ebp]
	jmp	SHORT $LN4@operator@12
$LN3@operator@12:
; Line 1485
	mov	ecx, DWORD PTR _s$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR _len$[ebp], edx
; Line 1486
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _len$[ebp]
	cmp	ecx, DWORD PTR [eax+4]
	jbe	SHORT $LN2@operator@12
; Line 1488
	mov	eax, DWORD PTR _len$[ebp]
	add	eax, 1
	xor	ecx, ecx
	mov	edx, 2
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T69548[ebp], eax
	mov	eax, DWORD PTR $T69548[ebp]
	mov	DWORD PTR _newBuf$69213[ebp], eax
; Line 1489
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@12
; Line 1490
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T69549[ebp], eax
	mov	ecx, DWORD PTR $T69549[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@operator@12:
; Line 1491
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newBuf$69213[ebp]
	mov	DWORD PTR [edx], eax
$LN2@operator@12:
; Line 1493
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _len$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 1494
	mov	eax, DWORD PTR _s$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	call	?MyStringCopy@@YGXPA_WPB_W@Z		; MyStringCopy
; Line 1495
	mov	eax, DWORD PTR _this$[ebp]
$LN4@operator@12:
; Line 1496
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4UString2@@QAEAAV0@ABV0@@Z ENDP			; UString2::operator=
_TEXT	ENDS
PUBLIC	?GetRawPtr@UString2@@QBEPB_WXZ			; UString2::GetRawPtr
PUBLIC	?IsEmpty@UString2@@QBE_NXZ			; UString2::IsEmpty
PUBLIC	?Len@UString2@@QBEIXZ				; UString2::Len
PUBLIC	??8@YG_NABVUString2@@0@Z			; operator==
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv81 = -4						; size = 4
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??8@YG_NABVUString2@@0@Z PROC				; operator==
; Line 1499
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 1500
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?Len@UString2@@QBEIXZ			; UString2::Len
	mov	esi, eax
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?Len@UString2@@QBEIXZ			; UString2::Len
	cmp	esi, eax
	jne	SHORT $LN4@operator@13
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?IsEmpty@UString2@@QBE_NXZ		; UString2::IsEmpty
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN3@operator@13
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?GetRawPtr@UString2@@QBEPB_WXZ		; UString2::GetRawPtr
	mov	esi, esp
	push	eax
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?GetRawPtr@UString2@@QBEPB_WXZ		; UString2::GetRawPtr
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jne	SHORT $LN4@operator@13
$LN3@operator@13:
	mov	DWORD PTR tv81[ebp], 1
	jmp	SHORT $LN5@operator@13
$LN4@operator@13:
	mov	DWORD PTR tv81[ebp], 0
$LN5@operator@13:
	mov	al, BYTE PTR tv81[ebp]
; Line 1501
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??8@YG_NABVUString2@@0@Z ENDP				; operator==
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString2@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString2@@QBEIXZ PROC				; UString2::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 677
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString2@@QBEIXZ ENDP				; UString2::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@UString2@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString2@@QBE_NXZ PROC				; UString2::IsEmpty, COMDAT
; _this$ = ecx
; Line 678
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString2@@QBE_NXZ ENDP				; UString2::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetRawPtr@UString2@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetRawPtr@UString2@@QBEPB_WXZ PROC			; UString2::GetRawPtr, COMDAT
; _this$ = ecx
; Line 682
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetRawPtr@UString2@@QBEPB_WXZ ENDP			; UString2::GetRawPtr
_TEXT	ENDS
PUBLIC	??8@YG_NABVUString2@@PB_W@Z			; operator==
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??8@YG_NABVUString2@@PB_W@Z PROC			; operator==
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 1504
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1505
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?IsEmpty@UString2@@QBE_NXZ		; UString2::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@14
; Line 1506
	mov	ecx, DWORD PTR _s2$[ebp]
	movzx	eax, WORD PTR [ecx]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	jmp	SHORT $LN2@operator@14
$LN1@operator@14:
; Line 1507
	mov	esi, esp
	mov	edx, DWORD PTR _s2$[ebp]
	push	edx
	mov	ecx, DWORD PTR _s1$[ebp]
	call	?GetRawPtr@UString2@@QBEPB_WXZ		; UString2::GetRawPtr
	push	eax
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	add	eax, 1
$LN2@operator@14:
; Line 1508
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
??8@YG_NABVUString2@@PB_W@Z ENDP			; operator==
_TEXT	ENDS
PUBLIC	??8@YG_NPB_WABVUString2@@@Z			; operator==
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_s1$ = 8						; size = 4
_s2$ = 12						; size = 4
??8@YG_NPB_WABVUString2@@@Z PROC			; operator==
; Line 1511
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1512
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?IsEmpty@UString2@@QBE_NXZ		; UString2::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN1@operator@15
; Line 1513
	mov	ecx, DWORD PTR _s1$[ebp]
	movzx	eax, WORD PTR [ecx]
	neg	eax
	sbb	eax, eax
	add	eax, 1
	jmp	SHORT $LN2@operator@15
$LN1@operator@15:
; Line 1514
	mov	ecx, DWORD PTR _s2$[ebp]
	call	?GetRawPtr@UString2@@QBEPB_WXZ		; UString2::GetRawPtr
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR _s1$[ebp]
	push	edx
	call	DWORD PTR __imp__wcscmp
	add	esp, 8
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	add	eax, 1
$LN2@operator@15:
; Line 1515
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
??8@YG_NPB_WABVUString2@@@Z ENDP			; operator==
_TEXT	ENDS
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	?fs2fas@@YG?AVAString@@PB_W@Z			; fs2fas
EXTRN	?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z:PROC ; UnicodeStringToMultiByte
EXTRN	___CxxFrameHandler3:PROC
xdata$x	SEGMENT
__unwindtable$?fs2fas@@YG?AVAString@@PB_W@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?fs2fas@@YG?AVAString@@PB_W@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?fs2fas@@YG?AVAString@@PB_W@Z$0
__ehfuncinfo$?fs2fas@@YG?AVAString@@PB_W@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?fs2fas@@YG?AVAString@@PB_W@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T69566 = -28						; size = 4
$T69563 = -24						; size = 12
__$EHRec$ = -12						; size = 12
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
?fs2fas@@YG?AVAString@@PB_W@Z PROC			; fs2fas
; Line 1542
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?fs2fas@@YG?AVAString@@PB_W@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T69566[ebp], 0
; Line 1543
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T69563[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	call	?GetCurrentCodePage@@YGIXZ		; GetCurrentCodePage
	push	eax
	lea	ecx, DWORD PTR $T69563[ebp]
	push	ecx
	mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
	push	edx
	call	?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z ; UnicodeStringToMultiByte
	mov	eax, DWORD PTR $T69566[ebp]
	or	eax, 1
	mov	DWORD PTR $T69566[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T69563[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1544
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?fs2fas@@YG?AVAString@@PB_W@Z$0:
	lea	ecx, DWORD PTR $T69563[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?fs2fas@@YG?AVAString@@PB_W@Z$1:
	mov	eax, DWORD PTR $T69566[ebp]
	and	eax, 1
	je	$LN5@fs2fas
	and	DWORD PTR $T69566[ebp], -2		; fffffffeH
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	jmp	??1AString@@QAE@XZ			; AString::~AString
$LN5@fs2fas:
	ret	0
__ehhandler$?fs2fas@@YG?AVAString@@PB_W@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?fs2fas@@YG?AVAString@@PB_W@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?fs2fas@@YG?AVAString@@PB_W@Z ENDP			; fs2fas
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T69576 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T69576[ebp], ecx
	mov	edx, DWORD PTR $T69576[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T69579 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T69579[ebp], ecx
	mov	edx, DWORD PTR $T69579[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
EXTRN	__imp__AreFileApisANSI@0:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
?GetCurrentCodePage@@YGIXZ PROC				; GetCurrentCodePage
; File c:\workspace\7z1505-src\cpp\common\mystring.cpp
; Line 1529
	push	ebp
	mov	ebp, esp
	push	esi
; Line 1533
	mov	esi, esp
	call	DWORD PTR __imp__AreFileApisANSI@0
	cmp	esi, esp
	call	__RTC_CheckEsp
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 1535
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
?GetCurrentCodePage@@YGIXZ ENDP				; GetCurrentCodePage
_TEXT	ENDS
PUBLIC	?fas2fs@@YG?AVUString@@ABVAString@@@Z		; fas2fs
EXTRN	?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z:PROC ; MultiByteToUnicodeString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
$T69584 = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_s$ = 12						; size = 4
?fas2fs@@YG?AVUString@@ABVAString@@@Z PROC		; fas2fs
; Line 1547
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR $T69584[ebp], 0
; Line 1548
	call	?GetCurrentCodePage@@YGIXZ		; GetCurrentCodePage
	push	eax
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	push	ecx
	call	?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z ; MultiByteToUnicodeString
	mov	edx, DWORD PTR $T69584[ebp]
	or	edx, 1
	mov	DWORD PTR $T69584[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
; Line 1549
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?fas2fs@@YG?AVUString@@ABVAString@@@Z ENDP		; fas2fs
_TEXT	ENDS
END
