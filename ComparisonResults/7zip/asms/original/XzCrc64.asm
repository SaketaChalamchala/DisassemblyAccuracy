; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\C\XzCrc64.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_g_Crc64Table:QWORD:0400H
_DATA	ENDS
PUBLIC	@Crc64Update@16
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
_BSS	SEGMENT
_g_Crc64Update DD 01H DUP (?)
_BSS	ENDS
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\c\xzcrc64.c
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_size$ = -8						; size = 4
_data$ = -4						; size = 4
_v$ = 8							; size = 8
@Crc64Update@16 PROC
; _data$ = ecx
; _size$ = edx
; Line 38
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _size$[ebp], edx
	mov	DWORD PTR _data$[ebp], ecx
; Line 39
	mov	esi, esp
	push	OFFSET _g_Crc64Table
	mov	eax, DWORD PTR _v$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	call	DWORD PTR _g_Crc64Update
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 40
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
@Crc64Update@16 ENDP
_TEXT	ENDS
PUBLIC	@Crc64Calc@8
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_size$ = -8						; size = 4
_data$ = -4						; size = 4
@Crc64Calc@8 PROC
; _data$ = ecx
; _size$ = edx
; Line 43
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _size$[ebp], edx
	mov	DWORD PTR _data$[ebp], ecx
; Line 44
	mov	esi, esp
	push	OFFSET _g_Crc64Table
	push	-1
	push	-1
	mov	edx, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	call	DWORD PTR _g_Crc64Update
	cmp	esi, esp
	call	__RTC_CheckEsp
	xor	eax, -1
	xor	edx, -1
; Line 45
	pop	esi
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
@Crc64Calc@8 ENDP
_TEXT	ENDS
PUBLIC	@Crc64GenerateTable@0
EXTRN	@XzCrc64UpdateT4@20:PROC
EXTRN	__allmul:PROC
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_r$2718 = -24						; size = 8
_j$2711 = -16						; size = 4
_r$2710 = -12						; size = 8
_i$ = -4						; size = 4
@Crc64GenerateTable@0 PROC
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 50
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@
$LN8@:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@:
	cmp	DWORD PTR _i$[ebp], 256			; 00000100H
	jae	SHORT $LN7@
; Line 52
	mov	ecx, DWORD PTR _i$[ebp]
	xor	edx, edx
	mov	DWORD PTR _r$2710[ebp], ecx
	mov	DWORD PTR _r$2710[ebp+4], edx
; Line 54
	mov	DWORD PTR _j$2711[ebp], 0
	jmp	SHORT $LN6@
$LN5@:
	mov	eax, DWORD PTR _j$2711[ebp]
	add	eax, 1
	mov	DWORD PTR _j$2711[ebp], eax
$LN6@:
	cmp	DWORD PTR _j$2711[ebp], 8
	jae	SHORT $LN4@
; Line 55
	mov	eax, DWORD PTR _r$2710[ebp]
	mov	edx, DWORD PTR _r$2710[ebp+4]
	mov	cl, 1
	call	__aullshr
	mov	ecx, DWORD PTR _r$2710[ebp]
	and	ecx, 1
	mov	esi, DWORD PTR _r$2710[ebp+4]
	and	esi, 0
	sub	ecx, 1
	sbb	esi, 0
	not	ecx
	not	esi
	and	ecx, -679014590				; d7870f42H
	and	esi, -915646571				; c96c5795H
	xor	eax, ecx
	xor	edx, esi
	mov	DWORD PTR _r$2710[ebp], eax
	mov	DWORD PTR _r$2710[ebp+4], edx
	jmp	SHORT $LN5@
$LN4@:
; Line 56
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _r$2710[ebp]
	mov	DWORD PTR _g_Crc64Table[edx*8], eax
	mov	ecx, DWORD PTR _r$2710[ebp+4]
	mov	DWORD PTR _g_Crc64Table[edx*8+4], ecx
; Line 57
	jmp	$LN8@
$LN7@:
; Line 58
	jmp	SHORT $LN3@
$LN2@:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN3@:
	cmp	DWORD PTR _i$[ebp], 1024		; 00000400H
	jae	SHORT $LN1@
; Line 60
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _g_Crc64Table[eax*8-2048]
	mov	DWORD PTR _r$2718[ebp], ecx
	mov	edx, DWORD PTR _g_Crc64Table[eax*8-2044]
	mov	DWORD PTR _r$2718[ebp+4], edx
; Line 61
	mov	eax, DWORD PTR _r$2718[ebp]
	and	eax, 255				; 000000ffH
	mov	ecx, DWORD PTR _r$2718[ebp+4]
	and	ecx, 0
	push	0
	push	8
	push	ecx
	push	eax
	call	__allmul
	mov	esi, eax
	mov	eax, DWORD PTR _r$2718[ebp]
	mov	edx, DWORD PTR _r$2718[ebp+4]
	mov	cl, 8
	call	__aullshr
	xor	eax, DWORD PTR _g_Crc64Table[esi]
	xor	edx, DWORD PTR _g_Crc64Table[esi+4]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	DWORD PTR _g_Crc64Table[ecx*8], eax
	mov	DWORD PTR _g_Crc64Table[ecx*8+4], edx
; Line 62
	jmp	SHORT $LN2@
$LN1@:
; Line 66
	mov	DWORD PTR _g_Crc64Update, OFFSET @XzCrc64UpdateT4@20
; Line 86
	pop	esi
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
@Crc64GenerateTable@0 ENDP
_TEXT	ENDS
END
