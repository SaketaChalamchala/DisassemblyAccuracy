; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\UI\Common\UpdatePair.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
_k_Duplicate_inArc_Message DD FLAT:$SG69563
_k_Duplicate_inDir_Message DD FLAT:$SG69565
_k_NotCensoredCollision_Message DD FLAT:$SG69567
_DATA	ENDS
CONST	SEGMENT
$SG69563 DB	'Duplicate filename in archive:', 00H
	ORG $+1
$SG69565 DB	'Duplicate filename on disk:', 00H
$SG69567 DB	'Internal file name collision (file on disk, file in arch'
	DB	'ive):', 00H
CONST	ENDS
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
PUBLIC	??1?$CObjArray@H@@QAE@XZ			; CObjArray<int>::~CObjArray<int>
PUBLIC	??1?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::~CObjectVector<UString>
PUBLIC	?ReserveDown@?$CRecordVector@UCUpdatePair@@@@QAEXXZ ; CRecordVector<CUpdatePair>::ReserveDown
PUBLIC	?Add@?$CRecordVector@UCUpdatePair@@@@QAEIUCUpdatePair@@@Z ; CRecordVector<CUpdatePair>::Add
PUBLIC	?Size@?$CRecordVector@UCUpdatePair@@@@QBEIXZ	; CRecordVector<CUpdatePair>::Size
PUBLIC	?Left@UString@@QBE?AV1@I@Z			; UString::Left
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	?IsDir@CDirItem@@QBE_NXZ			; CDirItem::IsDir
PUBLIC	??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[]
PUBLIC	??0CUpdatePair@@QAE@XZ				; CUpdatePair::CUpdatePair
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z ; CObjectVector<UString>::AddInReserved
PUBLIC	?ClearAndReserve@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::ClearAndReserve
PUBLIC	??0?$CObjectVector@VUString@@@@QAE@XZ		; CObjectVector<UString>::CObjectVector<UString>
PUBLIC	??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[]
PUBLIC	?Sort@?$CRecordVector@I@@QAEXP6GHPBI0PAX@Z1@Z	; CRecordVector<unsigned int>::Sort
PUBLIC	??A?$CRecordVector@I@@QAEAAII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z	; CRecordVector<unsigned int>::ClearAndSetSize
PUBLIC	??B?$CObjArray@H@@QAEPAHXZ			; CObjArray<int>::operator int *
PUBLIC	??0?$CObjArray@H@@QAE@I@Z			; CObjArray<int>::CObjArray<int>
PUBLIC	?Size@?$CObjectVector@UCArcItem@@@@QBEIXZ	; CObjectVector<CArcItem>::Size
PUBLIC	?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ	; CObjectVector<CDirItem>::Size
PUBLIC	??0?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
PUBLIC	?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z ; GetUpdatePairInfoList
EXTRN	?CompareFileNames@@YGHPB_W0@Z:PROC		; CompareFileNames
EXTRN	?SortFileNames@@YGXABV?$CObjectVector@VUString@@@@AAV?$CRecordVector@I@@@Z:PROC ; SortFileNames
EXTRN	?GetLogPath@CDirItems@@QBE?AVUString@@I@Z:PROC	; CDirItems::GetLogPath
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
xdata$x	SEGMENT
__ehfuncinfo$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z$5
xdata$x	ENDS
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\updatepair.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv372 = -272						; size = 4
tv391 = -268						; size = 4
tv76 = -264						; size = 4
tv333 = -260						; size = 4
tv521 = -256						; size = 4
tv520 = -252						; size = 4
tv328 = -248						; size = 4
tv327 = -244						; size = 4
tv323 = -240						; size = 4
tv386 = -236						; size = 4
tv159 = -232						; size = 4
$T70212 = -228						; size = 4
$T70198 = -224						; size = 12
$T70197 = -209						; size = 1
$T70190 = -208						; size = 12
_hostLen$69762 = -196					; size = 4
_dupl$69747 = -192					; size = 4
_name$69737 = -188					; size = 4
_compareResult$69736 = -184				; size = 4
_ai$69735 = -180					; size = 4
_di$69734 = -176					; size = 4
_arcIndex2$69733 = -172					; size = 4
_dirIndex2$69732 = -168					; size = 4
_pair$69731 = -160					; size = 16
_prevHostName$ = -140					; size = 4
_prevHostFile$ = -136					; size = 4
_arcIndex$ = -132					; size = 4
_dirIndex$ = -128					; size = 4
_s2$69721 = -124					; size = 4
_s1$69720 = -120					; size = 4
_i$69712 = -116						; size = 4
_dirNames$ = -108					; size = 12
_i$69706 = -92						; size = 4
_i$69701 = -88						; size = 4
_vals$69700 = -84					; size = 4
_i$69696 = -80						; size = 4
_vals$69695 = -76					; size = 4
_duplicatedArcItem$ = -68				; size = 4
_numArcItems$ = -60					; size = 4
_numDirItems$ = -56					; size = 4
_arcIndices$ = -48					; size = 12
_dirIndices$ = -28					; size = 12
__$EHRec$ = -12						; size = 12
_dirItems$ = 8						; size = 4
_arcItems$ = 12						; size = 4
_fileTimeType$ = 16					; size = 4
_updatePairs$ = 20					; size = 4
?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z PROC ; GetUpdatePairInfoList
; Line 80
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 260				; 00000104H
	push	edi
	lea	edi, DWORD PTR [ebp-272]
	mov	ecx, 65					; 00000041H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR $T70212[ebp], 0
; Line 81
	lea	ecx, DWORD PTR _dirIndices$[ebp]
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _arcIndices$[ebp]
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 83
	mov	ecx, DWORD PTR _dirItems$[ebp]
	add	ecx, 36					; 00000024H
	call	?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ ; CObjectVector<CDirItem>::Size
	mov	DWORD PTR _numDirItems$[ebp], eax
; Line 84
	mov	ecx, DWORD PTR _arcItems$[ebp]
	call	?Size@?$CObjectVector@UCArcItem@@@@QBEIXZ ; CObjectVector<CArcItem>::Size
	mov	DWORD PTR _numArcItems$[ebp], eax
; Line 86
	mov	eax, DWORD PTR _numArcItems$[ebp]
	push	eax
	lea	ecx, DWORD PTR _duplicatedArcItem$[ebp]
	call	??0?$CObjArray@H@@QAE@I@Z		; CObjArray<int>::CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 88
	lea	ecx, DWORD PTR _duplicatedArcItem$[ebp]
	call	??B?$CObjArray@H@@QAEPAHXZ		; CObjArray<int>::operator int *
	mov	DWORD PTR _vals$69695[ebp], eax
; Line 89
	mov	DWORD PTR _i$69696[ebp], 0
	jmp	SHORT $LN43@GetUpdateP
$LN42@GetUpdateP:
	mov	ecx, DWORD PTR _i$69696[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$69696[ebp], ecx
$LN43@GetUpdateP:
	mov	edx, DWORD PTR _i$69696[ebp]
	cmp	edx, DWORD PTR _numArcItems$[ebp]
	jae	SHORT $LN41@GetUpdateP
; Line 90
	mov	eax, DWORD PTR _i$69696[ebp]
	mov	ecx, DWORD PTR _vals$69695[ebp]
	mov	DWORD PTR [ecx+eax*4], 0
	jmp	SHORT $LN42@GetUpdateP
$LN41@GetUpdateP:
; Line 94
	mov	edx, DWORD PTR _numArcItems$[ebp]
	push	edx
	lea	ecx, DWORD PTR _arcIndices$[ebp]
	call	?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<unsigned int>::ClearAndSetSize
; Line 96
	push	0
	lea	ecx, DWORD PTR _arcIndices$[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	DWORD PTR _vals$69700[ebp], eax
; Line 97
	mov	DWORD PTR _i$69701[ebp], 0
	jmp	SHORT $LN40@GetUpdateP
$LN39@GetUpdateP:
	mov	eax, DWORD PTR _i$69701[ebp]
	add	eax, 1
	mov	DWORD PTR _i$69701[ebp], eax
$LN40@GetUpdateP:
	mov	ecx, DWORD PTR _i$69701[ebp]
	cmp	ecx, DWORD PTR _numArcItems$[ebp]
	jae	SHORT $LN38@GetUpdateP
; Line 98
	mov	edx, DWORD PTR _i$69701[ebp]
	mov	eax, DWORD PTR _vals$69700[ebp]
	mov	ecx, DWORD PTR _i$69701[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
	jmp	SHORT $LN39@GetUpdateP
$LN38@GetUpdateP:
; Line 100
	mov	edx, DWORD PTR _arcItems$[ebp]
	push	edx
	push	OFFSET ?CompareArcItems@@YGHPBI0PAX@Z	; CompareArcItems
	lea	ecx, DWORD PTR _arcIndices$[ebp]
	call	?Sort@?$CRecordVector@I@@QAEXP6GHPBI0PAX@Z1@Z ; CRecordVector<unsigned int>::Sort
; Line 101
	mov	DWORD PTR _i$69706[ebp], 0
	jmp	SHORT $LN37@GetUpdateP
$LN36@GetUpdateP:
	mov	eax, DWORD PTR _i$69706[ebp]
	add	eax, 1
	mov	DWORD PTR _i$69706[ebp], eax
$LN37@GetUpdateP:
	mov	ecx, DWORD PTR _i$69706[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _numArcItems$[ebp]
	jae	SHORT $LN35@GetUpdateP
; Line 104
	mov	edx, DWORD PTR _i$69706[ebp]
	add	edx, 1
	push	edx
	lea	ecx, DWORD PTR _arcIndices$[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _arcItems$[ebp]
	call	??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[]
	push	eax
	mov	ecx, DWORD PTR _i$69706[ebp]
	push	ecx
	lea	ecx, DWORD PTR _arcIndices$[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _arcItems$[ebp]
	call	??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[]
	push	eax
	call	?CompareArcItemsBase@@YGHABUCArcItem@@0@Z ; CompareArcItemsBase
	test	eax, eax
	jne	SHORT $LN34@GetUpdateP
; Line 106
	lea	ecx, DWORD PTR _duplicatedArcItem$[ebp]
	call	??B?$CObjArray@H@@QAEPAHXZ		; CObjArray<int>::operator int *
	mov	ecx, DWORD PTR _i$69706[ebp]
	mov	DWORD PTR [eax+ecx*4], 1
; Line 107
	lea	ecx, DWORD PTR _duplicatedArcItem$[ebp]
	call	??B?$CObjArray@H@@QAEPAHXZ		; CObjArray<int>::operator int *
	mov	edx, DWORD PTR _i$69706[ebp]
	mov	DWORD PTR [eax+edx*4+4], -1
$LN34@GetUpdateP:
; Line 109
	jmp	SHORT $LN36@GetUpdateP
$LN35@GetUpdateP:
; Line 111
	lea	ecx, DWORD PTR _dirNames$[ebp]
	call	??0?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 113
	mov	eax, DWORD PTR _numDirItems$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dirNames$[ebp]
	call	?ClearAndReserve@?$CObjectVector@VUString@@@@QAEXI@Z ; CObjectVector<UString>::ClearAndReserve
; Line 115
	mov	DWORD PTR _i$69712[ebp], 0
	jmp	SHORT $LN33@GetUpdateP
$LN32@GetUpdateP:
	mov	ecx, DWORD PTR _i$69712[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$69712[ebp], ecx
$LN33@GetUpdateP:
	mov	edx, DWORD PTR _i$69712[ebp]
	cmp	edx, DWORD PTR _numDirItems$[ebp]
	jae	SHORT $LN31@GetUpdateP
; Line 116
	mov	eax, DWORD PTR _i$69712[ebp]
	push	eax
	lea	ecx, DWORD PTR $T70190[ebp]
	push	ecx
	mov	ecx, DWORD PTR _dirItems$[ebp]
	call	?GetLogPath@CDirItems@@QBE?AVUString@@I@Z ; CDirItems::GetLogPath
	mov	DWORD PTR tv159[ebp], eax
	mov	edx, DWORD PTR tv159[ebp]
	mov	DWORD PTR tv386[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	eax, DWORD PTR tv386[ebp]
	push	eax
	lea	ecx, DWORD PTR _dirNames$[ebp]
	call	?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z ; CObjectVector<UString>::AddInReserved
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR $T70190[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	SHORT $LN32@GetUpdateP
$LN31@GetUpdateP:
; Line 117
	lea	ecx, DWORD PTR _dirIndices$[ebp]
	push	ecx
	lea	edx, DWORD PTR _dirNames$[ebp]
	push	edx
	call	?SortFileNames@@YGXABV?$CObjectVector@VUString@@@@AAV?$CRecordVector@I@@@Z ; SortFileNames
; Line 118
	mov	DWORD PTR _i$69712[ebp], 0
	jmp	SHORT $LN30@GetUpdateP
$LN29@GetUpdateP:
	mov	eax, DWORD PTR _i$69712[ebp]
	add	eax, 1
	mov	DWORD PTR _i$69712[ebp], eax
$LN30@GetUpdateP:
	mov	ecx, DWORD PTR _i$69712[ebp]
	add	ecx, 1
	cmp	ecx, DWORD PTR _numDirItems$[ebp]
	jae	SHORT $LN28@GetUpdateP
; Line 120
	mov	edx, DWORD PTR _i$69712[ebp]
	push	edx
	lea	ecx, DWORD PTR _dirIndices$[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR _dirNames$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _s1$69720[ebp], eax
; Line 121
	mov	ecx, DWORD PTR _i$69712[ebp]
	add	ecx, 1
	push	ecx
	lea	ecx, DWORD PTR _dirIndices$[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	ecx, DWORD PTR _dirNames$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _s2$69721[ebp], eax
; Line 122
	mov	ecx, DWORD PTR _s2$69721[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _s1$69720[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	test	eax, eax
	jne	SHORT $LN27@GetUpdateP
; Line 123
	mov	eax, DWORD PTR _s2$69721[ebp]
	push	eax
	mov	ecx, DWORD PTR _s1$69720[ebp]
	push	ecx
	mov	edx, DWORD PTR _k_Duplicate_inDir_Message
	push	edx
	call	?ThrowError@@YGXPBDABVUString@@1@Z	; ThrowError
$LN27@GetUpdateP:
; Line 124
	jmp	SHORT $LN29@GetUpdateP
$LN28@GetUpdateP:
; Line 127
	mov	DWORD PTR _dirIndex$[ebp], 0
; Line 128
	mov	DWORD PTR _arcIndex$[ebp], 0
; Line 130
	mov	DWORD PTR _prevHostFile$[ebp], -1
; Line 131
	mov	DWORD PTR _prevHostName$[ebp], 0
$LN26@GetUpdateP:
; Line 133
	mov	eax, DWORD PTR _dirIndex$[ebp]
	cmp	eax, DWORD PTR _numDirItems$[ebp]
	jb	SHORT $LN24@GetUpdateP
	mov	ecx, DWORD PTR _arcIndex$[ebp]
	cmp	ecx, DWORD PTR _numArcItems$[ebp]
	jae	$LN25@GetUpdateP
$LN24@GetUpdateP:
; Line 135
	lea	ecx, DWORD PTR _pair$69731[ebp]
	call	??0CUpdatePair@@QAE@XZ			; CUpdatePair::CUpdatePair
; Line 137
	mov	DWORD PTR _dirIndex2$69732[ebp], -1
; Line 138
	mov	DWORD PTR _arcIndex2$69733[ebp], -1
; Line 139
	mov	DWORD PTR _di$69734[ebp], 0
; Line 140
	mov	DWORD PTR _ai$69735[ebp], 0
; Line 142
	mov	DWORD PTR _compareResult$69736[ebp], -1
; Line 143
	mov	DWORD PTR _name$69737[ebp], 0
; Line 145
	mov	edx, DWORD PTR _dirIndex$[ebp]
	cmp	edx, DWORD PTR _numDirItems$[ebp]
	jae	SHORT $LN23@GetUpdateP
; Line 147
	mov	eax, DWORD PTR _dirIndex$[ebp]
	push	eax
	lea	ecx, DWORD PTR _dirIndices$[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _dirIndex2$69732[ebp], ecx
; Line 148
	mov	edx, DWORD PTR _dirIndex2$69732[ebp]
	push	edx
	mov	ecx, DWORD PTR _dirItems$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z ; CObjectVector<CDirItem>::operator[]
	mov	DWORD PTR _di$69734[ebp], eax
$LN23@GetUpdateP:
; Line 151
	mov	eax, DWORD PTR _arcIndex$[ebp]
	cmp	eax, DWORD PTR _numArcItems$[ebp]
	jae	$LN22@GetUpdateP
; Line 153
	mov	ecx, DWORD PTR _arcIndex$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _arcIndices$[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _arcIndex2$69733[ebp], edx
; Line 154
	mov	eax, DWORD PTR _arcIndex2$69733[ebp]
	push	eax
	mov	ecx, DWORD PTR _arcItems$[ebp]
	call	??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[]
	mov	DWORD PTR _ai$69735[ebp], eax
; Line 155
	mov	DWORD PTR _compareResult$69736[ebp], 1
; Line 156
	mov	ecx, DWORD PTR _dirIndex$[ebp]
	cmp	ecx, DWORD PTR _numDirItems$[ebp]
	jae	SHORT $LN22@GetUpdateP
; Line 158
	mov	ecx, DWORD PTR _ai$69735[ebp]
	add	ecx, 16					; 00000010H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	edx, DWORD PTR _dirIndex2$69732[ebp]
	push	edx
	lea	ecx, DWORD PTR _dirNames$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	ecx, eax
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	mov	DWORD PTR _compareResult$69736[ebp], eax
; Line 159
	cmp	DWORD PTR _compareResult$69736[ebp], 0
	jne	SHORT $LN22@GetUpdateP
; Line 161
	mov	ecx, DWORD PTR _di$69734[ebp]
	call	?IsDir@CDirItem@@QBE_NXZ		; CDirItem::IsDir
	movzx	eax, al
	mov	ecx, DWORD PTR _ai$69735[ebp]
	movzx	edx, BYTE PTR [ecx+28]
	cmp	eax, edx
	je	SHORT $LN22@GetUpdateP
; Line 162
	mov	eax, DWORD PTR _ai$69735[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	neg	ecx
	sbb	ecx, ecx
	and	ecx, 2
	add	ecx, -1
	mov	DWORD PTR _compareResult$69736[ebp], ecx
$LN22@GetUpdateP:
; Line 167
	cmp	DWORD PTR _compareResult$69736[ebp], 0
	jge	SHORT $LN18@GetUpdateP
; Line 169
	mov	edx, DWORD PTR _dirIndex2$69732[ebp]
	push	edx
	lea	ecx, DWORD PTR _dirNames$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _name$69737[ebp], eax
; Line 170
	mov	DWORD PTR _pair$69731[ebp], 2
; Line 171
	mov	eax, DWORD PTR _dirIndex2$69732[ebp]
	mov	DWORD PTR _pair$69731[ebp+8], eax
; Line 172
	mov	ecx, DWORD PTR _dirIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _dirIndex$[ebp], ecx
	jmp	$LN17@GetUpdateP
$LN18@GetUpdateP:
; Line 174
	cmp	DWORD PTR _compareResult$69736[ebp], 0
	jle	SHORT $LN16@GetUpdateP
; Line 176
	mov	edx, DWORD PTR _ai$69735[ebp]
	add	edx, 16					; 00000010H
	mov	DWORD PTR _name$69737[ebp], edx
; Line 179
	mov	eax, DWORD PTR _ai$69735[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	neg	ecx
	sbb	ecx, ecx
	neg	ecx
	mov	DWORD PTR _pair$69731[ebp], ecx
; Line 180
	mov	edx, DWORD PTR _arcIndex2$69733[ebp]
	mov	DWORD PTR _pair$69731[ebp+4], edx
; Line 181
	mov	eax, DWORD PTR _arcIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _arcIndex$[ebp], eax
; Line 183
	jmp	$LN17@GetUpdateP
$LN16@GetUpdateP:
; Line 185
	lea	ecx, DWORD PTR _duplicatedArcItem$[ebp]
	call	??B?$CObjArray@H@@QAEPAHXZ		; CObjArray<int>::operator int *
	mov	ecx, DWORD PTR _arcIndex$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	mov	DWORD PTR _dupl$69747[ebp], edx
; Line 186
	cmp	DWORD PTR _dupl$69747[ebp], 0
	je	SHORT $LN14@GetUpdateP
; Line 187
	mov	eax, DWORD PTR _arcIndex$[ebp]
	add	eax, DWORD PTR _dupl$69747[ebp]
	push	eax
	lea	ecx, DWORD PTR _arcIndices$[ebp]
	call	??A?$CRecordVector@I@@QAEAAII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _arcItems$[ebp]
	call	??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[]
	add	eax, 16					; 00000010H
	push	eax
	mov	edx, DWORD PTR _ai$69735[ebp]
	add	edx, 16					; 00000010H
	push	edx
	mov	eax, DWORD PTR _k_Duplicate_inArc_Message
	push	eax
	call	?ThrowError@@YGXPBDABVUString@@1@Z	; ThrowError
$LN14@GetUpdateP:
; Line 189
	mov	ecx, DWORD PTR _dirIndex2$69732[ebp]
	push	ecx
	lea	ecx, DWORD PTR _dirNames$[ebp]
	call	??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _name$69737[ebp], eax
; Line 190
	mov	edx, DWORD PTR _ai$69735[ebp]
	movzx	eax, BYTE PTR [edx+32]
	test	eax, eax
	jne	SHORT $LN13@GetUpdateP
; Line 191
	mov	ecx, DWORD PTR _ai$69735[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _name$69737[ebp]
	push	edx
	mov	eax, DWORD PTR _k_NotCensoredCollision_Message
	push	eax
	call	?ThrowError@@YGXPBDABVUString@@1@Z	; ThrowError
$LN13@GetUpdateP:
; Line 193
	mov	ecx, DWORD PTR _dirIndex2$69732[ebp]
	mov	DWORD PTR _pair$69731[ebp+8], ecx
; Line 194
	mov	edx, DWORD PTR _arcIndex2$69733[ebp]
	mov	DWORD PTR _pair$69731[ebp+4], edx
; Line 198
	mov	eax, DWORD PTR _ai$69735[ebp]
	movzx	ecx, BYTE PTR [eax+31]
	test	ecx, ecx
	je	SHORT $LN48@GetUpdateP
	mov	edx, DWORD PTR _ai$69735[ebp]
	cmp	DWORD PTR [edx+40], -1
	je	SHORT $LN46@GetUpdateP
	mov	eax, DWORD PTR _ai$69735[ebp]
	mov	ecx, DWORD PTR [eax+40]
	mov	DWORD PTR tv323[ebp], ecx
	jmp	SHORT $LN47@GetUpdateP
$LN46@GetUpdateP:
	mov	edx, DWORD PTR _fileTimeType$[ebp]
	mov	DWORD PTR tv323[ebp], edx
$LN47@GetUpdateP:
	mov	eax, DWORD PTR _ai$69735[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _di$69734[ebp]
	add	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR tv323[ebp]
	push	edx
	call	?MyCompareTime@@YGHW4EEnum@NFileTimeType@@ABU_FILETIME@@1@Z ; MyCompareTime
	mov	DWORD PTR tv327[ebp], eax
	jmp	SHORT $LN49@GetUpdateP
$LN48@GetUpdateP:
	mov	DWORD PTR tv327[ebp], 0
$LN49@GetUpdateP:
	mov	eax, DWORD PTR tv327[ebp]
	mov	DWORD PTR tv328[ebp], eax
	cmp	DWORD PTR tv328[ebp], -1
	je	SHORT $LN10@GetUpdateP
	cmp	DWORD PTR tv328[ebp], 1
	je	SHORT $LN9@GetUpdateP
	jmp	SHORT $LN8@GetUpdateP
$LN10@GetUpdateP:
; Line 200
	mov	DWORD PTR _pair$69731[ebp], 3
	jmp	SHORT $LN11@GetUpdateP
$LN9@GetUpdateP:
; Line 201
	mov	DWORD PTR _pair$69731[ebp], 4
	jmp	SHORT $LN11@GetUpdateP
$LN8@GetUpdateP:
; Line 205
	mov	ecx, DWORD PTR _ai$69735[ebp]
	movzx	edx, BYTE PTR [ecx+30]
	test	edx, edx
	je	SHORT $LN50@GetUpdateP
	mov	eax, DWORD PTR _di$69734[ebp]
	mov	ecx, DWORD PTR _ai$69735[ebp]
	mov	DWORD PTR tv520[ebp], eax
	mov	DWORD PTR tv521[ebp], ecx
	mov	edx, DWORD PTR tv520[ebp]
	mov	eax, DWORD PTR tv521[ebp]
	mov	ecx, DWORD PTR [edx]
	cmp	ecx, DWORD PTR [eax]
	jne	SHORT $LN50@GetUpdateP
	mov	edx, DWORD PTR tv520[ebp]
	mov	eax, DWORD PTR tv521[ebp]
	mov	ecx, DWORD PTR [edx+4]
	cmp	ecx, DWORD PTR [eax+4]
	jne	SHORT $LN50@GetUpdateP
	mov	DWORD PTR tv333[ebp], 5
	jmp	SHORT $LN51@GetUpdateP
$LN50@GetUpdateP:
	mov	DWORD PTR tv333[ebp], 6
$LN51@GetUpdateP:
	mov	edx, DWORD PTR tv333[ebp]
	mov	DWORD PTR _pair$69731[ebp], edx
$LN11@GetUpdateP:
; Line 208
	mov	eax, DWORD PTR _dirIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _dirIndex$[ebp], eax
; Line 209
	mov	ecx, DWORD PTR _arcIndex$[ebp]
	add	ecx, 1
	mov	DWORD PTR _arcIndex$[ebp], ecx
$LN17@GetUpdateP:
; Line 213
	cmp	DWORD PTR _di$69734[ebp], 0
	je	SHORT $LN5@GetUpdateP
	mov	edx, DWORD PTR _di$69734[ebp]
	movzx	eax, BYTE PTR [edx+76]
	test	eax, eax
	jne	SHORT $LN6@GetUpdateP
$LN5@GetUpdateP:
	cmp	DWORD PTR _ai$69735[ebp], 0
	je	$LN7@GetUpdateP
	mov	ecx, DWORD PTR _ai$69735[ebp]
	movzx	edx, BYTE PTR [ecx+29]
	test	edx, edx
	je	$LN7@GetUpdateP
$LN6@GetUpdateP:
; Line 215
	cmp	DWORD PTR _prevHostName$[ebp], 0
	je	$LN4@GetUpdateP
; Line 217
	mov	ecx, DWORD PTR _prevHostName$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _hostLen$69762[ebp], eax
; Line 218
	mov	ecx, DWORD PTR _name$69737[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	eax, DWORD PTR _hostLen$69762[ebp]
	jbe	$LN4@GetUpdateP
; Line 219
	mov	ecx, DWORD PTR _name$69737[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _hostLen$69762[ebp]
	movzx	edx, WORD PTR [eax+ecx*2]
	cmp	edx, 58					; 0000003aH
	jne	SHORT $LN52@GetUpdateP
	mov	eax, DWORD PTR _hostLen$69762[ebp]
	push	eax
	lea	ecx, DWORD PTR $T70198[ebp]
	push	ecx
	mov	ecx, DWORD PTR _name$69737[ebp]
	call	?Left@UString@@QBE?AV1@I@Z		; UString::Left
	mov	DWORD PTR tv76[ebp], eax
	mov	edx, DWORD PTR tv76[ebp]
	mov	DWORD PTR tv391[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	mov	eax, DWORD PTR $T70212[ebp]
	or	eax, 1
	mov	DWORD PTR $T70212[ebp], eax
	mov	ecx, DWORD PTR tv391[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _prevHostName$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	test	eax, eax
	jne	SHORT $LN52@GetUpdateP
	mov	DWORD PTR tv372[ebp], 1
	jmp	SHORT $LN53@GetUpdateP
$LN52@GetUpdateP:
	mov	DWORD PTR tv372[ebp], 0
$LN53@GetUpdateP:
	mov	cl, BYTE PTR tv372[ebp]
	mov	BYTE PTR $T70197[ebp], cl
	mov	DWORD PTR __$EHRec$[ebp+8], 3
	mov	edx, DWORD PTR $T70212[ebp]
	and	edx, 1
	je	SHORT $LN61@GetUpdateP
	and	DWORD PTR $T70212[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T70198[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN61@GetUpdateP:
	movzx	eax, BYTE PTR $T70197[ebp]
	test	eax, eax
	je	SHORT $LN4@GetUpdateP
; Line 220
	mov	ecx, DWORD PTR _prevHostFile$[ebp]
	mov	DWORD PTR _pair$69731[ebp+12], ecx
$LN4@GetUpdateP:
; Line 223
	jmp	SHORT $LN1@GetUpdateP
$LN7@GetUpdateP:
; Line 225
	mov	ecx, DWORD PTR _updatePairs$[ebp]
	call	?Size@?$CRecordVector@UCUpdatePair@@@@QBEIXZ ; CRecordVector<CUpdatePair>::Size
	mov	DWORD PTR _prevHostFile$[ebp], eax
; Line 226
	mov	edx, DWORD PTR _name$69737[ebp]
	mov	DWORD PTR _prevHostName$[ebp], edx
$LN1@GetUpdateP:
; Line 229
	sub	esp, 16					; 00000010H
	mov	eax, esp
	mov	ecx, DWORD PTR _pair$69731[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pair$69731[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _pair$69731[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _pair$69731[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _updatePairs$[ebp]
	call	?Add@?$CRecordVector@UCUpdatePair@@@@QAEIUCUpdatePair@@@Z ; CRecordVector<CUpdatePair>::Add
; Line 230
	jmp	$LN26@GetUpdateP
$LN25@GetUpdateP:
; Line 232
	mov	ecx, DWORD PTR _updatePairs$[ebp]
	call	?ReserveDown@?$CRecordVector@UCUpdatePair@@@@QAEXXZ ; CRecordVector<CUpdatePair>::ReserveDown
; Line 233
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _dirNames$[ebp]
	call	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _duplicatedArcItem$[ebp]
	call	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _arcIndices$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _dirIndices$[ebp]
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN69@GetUpdateP
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 272				; 00000110H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	3
$LN69@GetUpdateP:
	DD	5
	DD	$LN68@GetUpdateP
$LN68@GetUpdateP:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN62@GetUpdateP
	DD	-48					; ffffffd0H
	DD	12					; 0000000cH
	DD	$LN63@GetUpdateP
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN64@GetUpdateP
	DD	-108					; ffffff94H
	DD	12					; 0000000cH
	DD	$LN65@GetUpdateP
	DD	-160					; ffffff60H
	DD	16					; 00000010H
	DD	$LN66@GetUpdateP
$LN66@GetUpdateP:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	0
$LN65@GetUpdateP:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN64@GetUpdateP:
	DB	100					; 00000064H
	DB	117					; 00000075H
	DB	112					; 00000070H
	DB	108					; 0000006cH
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	65					; 00000041H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	0
$LN63@GetUpdateP:
	DB	97					; 00000061H
	DB	114					; 00000072H
	DB	99					; 00000063H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN62@GetUpdateP:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	114					; 00000072H
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z$0:
	lea	ecx, DWORD PTR _dirIndices$[ebp]
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z$1:
	lea	ecx, DWORD PTR _arcIndices$[ebp]
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__unwindfunclet$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z$2:
	lea	ecx, DWORD PTR _duplicatedArcItem$[ebp]
	jmp	??1?$CObjArray@H@@QAE@XZ		; CObjArray<int>::~CObjArray<int>
__unwindfunclet$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z$3:
	lea	ecx, DWORD PTR _dirNames$[ebp]
	jmp	??1?$CObjectVector@VUString@@@@QAE@XZ	; CObjectVector<UString>::~CObjectVector<UString>
__unwindfunclet$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z$4:
	lea	ecx, DWORD PTR $T70190[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z$5:
	mov	eax, DWORD PTR $T70212[ebp]
	and	eax, 1
	je	$LN60@GetUpdateP
	and	DWORD PTR $T70212[ebp], -2		; fffffffeH
	lea	ecx, DWORD PTR $T70198[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
$LN60@GetUpdateP:
	ret	0
__ehhandler$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-268]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetUpdatePairInfoList@@YGXABVCDirItems@@ABV?$CObjectVector@UCArcItem@@@@W4EEnum@NFileTimeType@@AAV?$CRecordVector@UCUpdatePair@@@@@Z ENDP ; GetUpdatePairInfoList
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T70235 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T70235[ebp], ecx
	mov	edx, DWORD PTR $T70235[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
_TEXT	ENDS
EXTRN	??0UString@@AAE@IABV0@@Z:PROC			; UString::UString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Left@UString@@QBE?AV1@I@Z
_TEXT	SEGMENT
$T70243 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_count$ = 12						; size = 4
?Left@UString@@QBE?AV1@I@Z PROC				; UString::Left, COMDAT
; _this$ = ecx
; Line 540
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T70243[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@AAE@IABV0@@Z		; UString::UString
	mov	edx, DWORD PTR $T70243[ebp]
	or	edx, 1
	mov	DWORD PTR $T70243[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Left@UString@@QBE?AV1@I@Z ENDP				; UString::Left
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsDir@CDirItem@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsDir@CDirItem@@QBE_NXZ PROC				; CDirItem::IsDir, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\diritem.h
; Line 70
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+60]
	and	eax, 16					; 00000010H
	neg	eax
	sbb	eax, eax
	neg	eax
	mov	esp, ebp
	pop	ebp
	ret	0
?IsDir@CDirItem@@QBE_NXZ ENDP				; CDirItem::IsDir
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CUpdatePair@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CUpdatePair@@QAE@XZ PROC				; CUpdatePair::CUpdatePair, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\updatepair.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], -1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CUpdatePair@@QAE@XZ ENDP				; CUpdatePair::CUpdatePair
_TEXT	ENDS
PUBLIC	__TI1H
PUBLIC	??$MyCompare@I@@YGHII@Z				; MyCompare<unsigned int>
PUBLIC	__CTA1H
PUBLIC	__CT??_R0H@84
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
EXTRN	?FileTimeToDosTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z:PROC ; NWindows::NTime::FileTimeToDosTime
EXTRN	?FileTimeToUnixTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z:PROC ; NWindows::NTime::FileTimeToUnixTime
EXTRN	__imp__CompareFileTime@8:PROC
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0H@8
; File c:\workspace\7z1505-src\cpp\7zip\ui\common\updatepair.cpp
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv64 = -56						; size = 4
$T70251 = -52						; size = 4
_dosTime2$69554 = -44					; size = 4
_dosTime1$69553 = -32					; size = 4
_unixTime2$69546 = -20					; size = 4
_unixTime1$69545 = -8					; size = 4
_fileTimeType$ = 8					; size = 4
_time1$ = 12						; size = 4
_time2$ = 16						; size = 4
?MyCompareTime@@YGHW4EEnum@NFileTimeType@@ABU_FILETIME@@1@Z PROC ; MyCompareTime
; Line 18
	push	ebp
	mov	ebp, esp
	sub	esp, 56					; 00000038H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 14					; 0000000eH
	mov	eax, -858993460				; ccccccccH
	rep stosd
; Line 19
	mov	eax, DWORD PTR _fileTimeType$[ebp]
	mov	DWORD PTR tv64[ebp], eax
	cmp	DWORD PTR tv64[ebp], 0
	je	SHORT $LN3@MyCompareT
	cmp	DWORD PTR tv64[ebp], 1
	je	SHORT $LN2@MyCompareT
	cmp	DWORD PTR tv64[ebp], 2
	je	SHORT $LN1@MyCompareT
	jmp	SHORT $LN4@MyCompareT
$LN3@MyCompareT:
; Line 22
	mov	esi, esp
	mov	ecx, DWORD PTR _time2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _time1$[ebp]
	push	edx
	call	DWORD PTR __imp__CompareFileTime@8
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN7@MyCompareT
$LN2@MyCompareT:
; Line 26
	lea	eax, DWORD PTR _unixTime1$69545[ebp]
	push	eax
	mov	ecx, DWORD PTR _time1$[ebp]
	push	ecx
	call	?FileTimeToUnixTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z ; NWindows::NTime::FileTimeToUnixTime
; Line 27
	lea	edx, DWORD PTR _unixTime2$69546[ebp]
	push	edx
	mov	eax, DWORD PTR _time2$[ebp]
	push	eax
	call	?FileTimeToUnixTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z ; NWindows::NTime::FileTimeToUnixTime
; Line 28
	mov	ecx, DWORD PTR _unixTime2$69546[ebp]
	push	ecx
	mov	edx, DWORD PTR _unixTime1$69545[ebp]
	push	edx
	call	??$MyCompare@I@@YGHII@Z			; MyCompare<unsigned int>
	jmp	SHORT $LN7@MyCompareT
$LN1@MyCompareT:
; Line 33
	lea	eax, DWORD PTR _dosTime1$69553[ebp]
	push	eax
	mov	ecx, DWORD PTR _time1$[ebp]
	push	ecx
	call	?FileTimeToDosTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z ; NWindows::NTime::FileTimeToDosTime
; Line 34
	lea	edx, DWORD PTR _dosTime2$69554[ebp]
	push	edx
	mov	eax, DWORD PTR _time2$[ebp]
	push	eax
	call	?FileTimeToDosTime@NTime@NWindows@@YG_NABU_FILETIME@@AAI@Z ; NWindows::NTime::FileTimeToDosTime
; Line 35
	mov	ecx, DWORD PTR _dosTime2$69554[ebp]
	push	ecx
	mov	edx, DWORD PTR _dosTime1$69553[ebp]
	push	edx
	call	??$MyCompare@I@@YGHII@Z			; MyCompare<unsigned int>
	jmp	SHORT $LN7@MyCompareT
$LN4@MyCompareT:
; Line 38
	mov	DWORD PTR $T70251[ebp], 4191618		; 003ff582H
	push	OFFSET __TI1H
	lea	eax, DWORD PTR $T70251[ebp]
	push	eax
	call	__CxxThrowException@8
$LN7@MyCompareT:
; Line 39
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@MyCompareT
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN13@MyCompareT:
	DD	4
	DD	$LN12@MyCompareT
$LN12@MyCompareT:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@MyCompareT
	DD	-20					; ffffffecH
	DD	4
	DD	$LN9@MyCompareT
	DD	-32					; ffffffe0H
	DD	4
	DD	$LN10@MyCompareT
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN11@MyCompareT
$LN11@MyCompareT:
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	50					; 00000032H
	DB	0
$LN10@MyCompareT:
	DB	100					; 00000064H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	49					; 00000031H
	DB	0
$LN9@MyCompareT:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	50					; 00000032H
	DB	0
$LN8@MyCompareT:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	84					; 00000054H
	DB	105					; 00000069H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	49					; 00000031H
	DB	0
?MyCompareTime@@YGHW4EEnum@NFileTimeType@@ABU_FILETIME@@1@Z ENDP ; MyCompareTime
_TEXT	ENDS
PUBLIC	__TI1?AVUString@@
PUBLIC	__CTA1?AVUString@@
PUBLIC	__CT??_R0?AVUString@@@8??0UString@@QAE@ABV0@@Z12
PUBLIC	??_R0?AVUString@@@8				; UString `RTTI Type Descriptor'
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
EXTRN	??YUString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator+=
EXTRN	?Add_LF@UString@@QAEXXZ:PROC			; UString::Add_LF
EXTRN	?SetFromAscii@UString@@QAEXPBD@Z:PROC		; UString::SetFromAscii
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
;	COMDAT ??_R0?AVUString@@@8
_DATA	SEGMENT
??_R0?AVUString@@@8 DD FLAT:??_7type_info@@6B@		; UString `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVUString@@', 00H
_DATA	ENDS
;	COMDAT __CT??_R0?AVUString@@@8??0UString@@QAE@ABV0@@Z12
xdata$x	SEGMENT
__CT??_R0?AVUString@@@8??0UString@@QAE@ABV0@@Z12 DD 00H
	DD	FLAT:??_R0?AVUString@@@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	0cH
	DD	FLAT:??0UString@@QAE@ABV0@@Z
xdata$x	ENDS
;	COMDAT __CTA1?AVUString@@
xdata$x	SEGMENT
__CTA1?AVUString@@ DD 01H
	DD	FLAT:__CT??_R0?AVUString@@@8??0UString@@QAE@ABV0@@Z12
xdata$x	ENDS
;	COMDAT __TI1?AVUString@@
xdata$x	SEGMENT
__TI1?AVUString@@ DD 00H
	DD	FLAT:??1UString@@QAE@XZ
	DD	00H
	DD	FLAT:__CTA1?AVUString@@
xdata$x	ENDS
xdata$x	SEGMENT
__unwindtable$?ThrowError@@YGXPBDABVUString@@1@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ThrowError@@YGXPBDABVUString@@1@Z$0
__ehfuncinfo$?ThrowError@@YGXPBDABVUString@@1@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ThrowError@@YGXPBDABVUString@@1@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T70260 = -44						; size = 12
_m$ = -28						; size = 12
__$EHRec$ = -12						; size = 12
_message$ = 8						; size = 4
_s1$ = 12						; size = 4
_s2$ = 16						; size = 4
?ThrowError@@YGXPBDABVUString@@1@Z PROC			; ThrowError
; Line 46
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ThrowError@@YGXPBDABVUString@@1@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
; Line 47
	lea	ecx, DWORD PTR _m$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 48
	mov	eax, DWORD PTR _message$[ebp]
	push	eax
	lea	ecx, DWORD PTR _m$[ebp]
	call	?SetFromAscii@UString@@QAEXPBD@Z	; UString::SetFromAscii
; Line 49
	lea	ecx, DWORD PTR _m$[ebp]
	call	?Add_LF@UString@@QAEXXZ			; UString::Add_LF
	mov	ecx, DWORD PTR _s1$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _m$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 50
	lea	ecx, DWORD PTR _m$[ebp]
	call	?Add_LF@UString@@QAEXXZ			; UString::Add_LF
	mov	edx, DWORD PTR _s2$[ebp]
	push	edx
	lea	ecx, DWORD PTR _m$[ebp]
	call	??YUString@@QAEAAV0@ABV0@@Z		; UString::operator+=
; Line 51
	lea	eax, DWORD PTR _m$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T70260[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	push	OFFSET __TI1?AVUString@@
	lea	ecx, DWORD PTR $T70260[ebp]
	push	ecx
	call	__CxxThrowException@8
; Line 52
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _m$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
$LN2@ThrowError:
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@ThrowError
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN7@ThrowError:
	DD	1
	DD	$LN6@ThrowError
$LN6@ThrowError:
	DD	-28					; ffffffe4H
	DD	12					; 0000000cH
	DD	$LN4@ThrowError
$LN4@ThrowError:
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?ThrowError@@YGXPBDABVUString@@1@Z$0:
	lea	ecx, DWORD PTR _m$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?ThrowError@@YGXPBDABVUString@@1@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ThrowError@@YGXPBDABVUString@@1@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?ThrowError@@YGXPBDABVUString@@1@Z ENDP			; ThrowError
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_res$ = -4						; size = 4
_ai1$ = 8						; size = 4
_ai2$ = 12						; size = 4
?CompareArcItemsBase@@YGHABUCArcItem@@0@Z PROC		; CompareArcItemsBase
; Line 55
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 56
	mov	ecx, DWORD PTR _ai2$[ebp]
	add	ecx, 16					; 00000010H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _ai1$[ebp]
	add	ecx, 16					; 00000010H
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	call	?CompareFileNames@@YGHPB_W0@Z		; CompareFileNames
	mov	DWORD PTR _res$[ebp], eax
; Line 57
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN2@CompareArc
; Line 58
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN3@CompareArc
$LN2@CompareArc:
; Line 59
	mov	eax, DWORD PTR _ai1$[ebp]
	movzx	ecx, BYTE PTR [eax+28]
	mov	edx, DWORD PTR _ai2$[ebp]
	movzx	eax, BYTE PTR [edx+28]
	cmp	ecx, eax
	je	SHORT $LN1@CompareArc
; Line 60
	mov	ecx, DWORD PTR _ai1$[ebp]
	movzx	eax, BYTE PTR [ecx+28]
	neg	eax
	sbb	eax, eax
	and	eax, -2					; fffffffeH
	add	eax, 1
	jmp	SHORT $LN3@CompareArc
$LN1@CompareArc:
; Line 61
	xor	eax, eax
$LN3@CompareArc:
; Line 62
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?CompareArcItemsBase@@YGHABUCArcItem@@0@Z ENDP		; CompareArcItemsBase
; Function compile flags: /Odtp /RTCsu
_res$ = -16						; size = 4
_arcItems$ = -12					; size = 4
_i2$ = -8						; size = 4
_i1$ = -4						; size = 4
_p1$ = 8						; size = 4
_p2$ = 12						; size = 4
_param$ = 16						; size = 4
?CompareArcItems@@YGHPBI0PAX@Z PROC			; CompareArcItems
; Line 65
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 66
	mov	eax, DWORD PTR _p1$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _i1$[ebp], ecx
; Line 67
	mov	edx, DWORD PTR _p2$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _i2$[ebp], eax
; Line 68
	mov	ecx, DWORD PTR _param$[ebp]
	mov	DWORD PTR _arcItems$[ebp], ecx
; Line 69
	mov	edx, DWORD PTR _i2$[ebp]
	push	edx
	mov	ecx, DWORD PTR _arcItems$[ebp]
	call	??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[]
	push	eax
	mov	eax, DWORD PTR _i1$[ebp]
	push	eax
	mov	ecx, DWORD PTR _arcItems$[ebp]
	call	??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ; CObjectVector<CArcItem>::operator[]
	push	eax
	call	?CompareArcItemsBase@@YGHABUCArcItem@@0@Z ; CompareArcItemsBase
	mov	DWORD PTR _res$[ebp], eax
; Line 70
	cmp	DWORD PTR _res$[ebp], 0
	je	SHORT $LN1@CompareArc@2
; Line 71
	mov	eax, DWORD PTR _res$[ebp]
	jmp	SHORT $LN2@CompareArc@2
$LN1@CompareArc@2:
; Line 72
	mov	ecx, DWORD PTR _i2$[ebp]
	push	ecx
	mov	edx, DWORD PTR _i1$[ebp]
	push	edx
	call	??$MyCompare@I@@YGHII@Z			; MyCompare<unsigned int>
$LN2@CompareArc@2:
; Line 73
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?CompareArcItems@@YGHPBI0PAX@Z ENDP			; CompareArcItems
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ClearAndReserve
PUBLIC	?Clear@?$CObjectVector@VUString@@@@QAEXXZ	; CObjectVector<UString>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndReserve@?$CObjectVector@VUString@@@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CObjectVector@VUString@@@@QAEXI@Z PROC ; CObjectVector<UString>::ClearAndReserve, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 419
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@VUString@@@@QAEXXZ ; CObjectVector<UString>::Clear
	mov	eax, DWORD PTR _newCapacity$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ClearAndReserve
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CObjectVector@VUString@@@@QAEXI@Z ENDP ; CObjectVector<UString>::ClearAndReserve
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::CObjectVector<UString>
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QAEAAVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z$0
__ehfuncinfo$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z
_TEXT	SEGMENT
tv73 = -28						; size = 4
$T70280 = -24						; size = 4
$T70279 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z PROC ; CObjectVector<UString>::AddInReserved, COMDAT
; _this$ = ecx
; Line 461
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70280[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T70280[ebp], 0
	je	SHORT $LN3@AddInReser
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T70280[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv73[ebp], eax
	jmp	SHORT $LN4@AddInReser
$LN3@AddInReser:
	mov	DWORD PTR tv73[ebp], 0
$LN4@AddInReser:
	mov	ecx, DWORD PTR tv73[ebp]
	mov	DWORD PTR $T70279[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T70279[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z$0:
	mov	eax, DWORD PTR $T70280[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddInReserved@?$CObjectVector@VUString@@@@QAEXABVUString@@@Z ENDP ; CObjectVector<UString>::AddInReserved
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GUString@@QAEPAXI@Z				; UString::`scalar deleting destructor'
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@VUString@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@VUString@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T70293 = -28						; size = 4
$T70292 = -24						; size = 4
_i$69883 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@VUString@@@@QAE@XZ PROC		; CObjectVector<UString>::~CObjectVector<UString>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$69883[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$69883[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$69883[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$69883[ebp], eax
	mov	ecx, DWORD PTR _i$69883[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T70293[ebp], edx
	mov	eax, DWORD PTR $T70293[ebp]
	mov	DWORD PTR $T70292[ebp], eax
	cmp	DWORD PTR $T70292[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T70292[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@VUString@@@@QAE@XZ ENDP		; CObjectVector<UString>::~CObjectVector<UString>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z	; CRecordVector<unsigned int>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z PROC	; CRecordVector<unsigned int>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z ; CRecordVector<unsigned int>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@I@@QAEXI@Z ENDP	; CRecordVector<unsigned int>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T70309 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T70309[ebp], ecx
	mov	edx, DWORD PTR $T70309[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QAEAAII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QAEAAII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QAEAAII@Z ENDP			; CRecordVector<unsigned int>::operator[]
_TEXT	ENDS
PUBLIC	?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z ; CRecordVector<unsigned int>::SortRefDown
PUBLIC	?Front@?$CRecordVector@I@@QAEAAIXZ		; CRecordVector<unsigned int>::Front
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Sort@?$CRecordVector@I@@QAEXP6GHPBI0PAX@Z1@Z
_TEXT	SEGMENT
_temp$69942 = -20					; size = 4
_i$69935 = -16						; size = 4
_p$ = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
_compare$ = 8						; size = 4
_param$ = 12						; size = 4
?Sort@?$CRecordVector@I@@QAEXP6GHPBI0PAX@Z1@Z PROC	; CRecordVector<unsigned int>::Sort, COMDAT
; _this$ = ecx
; Line 342
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 343
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _size$[ebp], ecx
; Line 344
	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN7@Sort
; Line 345
	jmp	$LN8@Sort
$LN7@Sort:
; Line 346
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Front@?$CRecordVector@I@@QAEAAIXZ	; CRecordVector<unsigned int>::Front
	sub	eax, 4
	mov	DWORD PTR _p$[ebp], eax
; Line 348
	mov	edx, DWORD PTR _size$[ebp]
	shr	edx, 1
	mov	DWORD PTR _i$69935[ebp], edx
$LN6@Sort:
; Line 350
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _compare$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	eax, DWORD PTR _i$69935[ebp]
	push	eax
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	call	?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z ; CRecordVector<unsigned int>::SortRefDown
; Line 351
	mov	edx, DWORD PTR _i$69935[ebp]
	sub	edx, 1
	mov	DWORD PTR _i$69935[ebp], edx
	jne	SHORT $LN6@Sort
$LN3@Sort:
; Line 355
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _temp$69942[ebp], edx
; Line 356
	mov	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [edx+4]
	mov	DWORD PTR [ecx+eax*4], edx
	mov	eax, DWORD PTR _size$[ebp]
	sub	eax, 1
	mov	DWORD PTR _size$[ebp], eax
; Line 357
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR _temp$69942[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 358
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _compare$[ebp]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	push	1
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z ; CRecordVector<unsigned int>::SortRefDown
; Line 360
	cmp	DWORD PTR _size$[ebp], 1
	ja	SHORT $LN3@Sort
$LN8@Sort:
; Line 361
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Sort@?$CRecordVector@I@@QAEXP6GHPBI0PAX@Z1@Z ENDP	; CRecordVector<unsigned int>::Sort
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ PROC		; CObjectVector<CDirItem>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCDirItem@@@@QBEIXZ ENDP		; CObjectVector<CDirItem>::Size
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z PROC ; CObjectVector<CDirItem>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCDirItem@@@@QBEABUCDirItem@@I@Z ENDP ; CObjectVector<CDirItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCArcItem@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCArcItem@@@@QBEIXZ PROC		; CObjectVector<CArcItem>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCArcItem@@@@QBEIXZ ENDP		; CObjectVector<CArcItem>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z PROC ; CObjectVector<CArcItem>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCArcItem@@@@QBEABUCArcItem@@I@Z ENDP ; CObjectVector<CArcItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray@H@@QAE@I@Z
_TEXT	SEGMENT
$T70324 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$CObjArray@H@@QAE@I@Z PROC				; CObjArray<int>::CObjArray<int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 139
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@CObjArray
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70324[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T70324[ebp]
	mov	DWORD PTR [eax], ecx
$LN2@CObjArray:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CObjArray@H@@QAE@I@Z ENDP				; CObjArray<int>::CObjArray<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray@H@@QAE@XZ
_TEXT	SEGMENT
$T70327 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray@H@@QAE@XZ PROC				; CObjArray<int>::~CObjArray<int>, COMDAT
; _this$ = ecx
; Line 141
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T70327[ebp], ecx
	mov	edx, DWORD PTR $T70327[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray@H@@QAE@XZ ENDP				; CObjArray<int>::~CObjArray<int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray@H@@QAEPAHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray@H@@QAEPAHXZ PROC				; CObjArray<int>::operator int *, COMDAT
; _this$ = ecx
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray@H@@QAEPAHXZ ENDP				; CObjArray<int>::operator int *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@UCUpdatePair@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCUpdatePair@@@@QBEIXZ PROC	; CRecordVector<CUpdatePair>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCUpdatePair@@@@QBEIXZ ENDP	; CRecordVector<CUpdatePair>::Size
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
EXTRN	_memcpy:PROC
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReserveDown@?$CRecordVector@UCUpdatePair@@@@QAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReserveDown@?$CRecordVector@UCUpdatePair@@@@QAEXXZ$0
__ehfuncinfo$?ReserveDown@?$CRecordVector@UCUpdatePair@@@@QAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReserveDown@?$CRecordVector@UCUpdatePair@@@@QAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ReserveDown@?$CRecordVector@UCUpdatePair@@@@QAEXXZ
_TEXT	SEGMENT
tv84 = -40						; size = 4
$T70339 = -36						; size = 4
$T70336 = -32						; size = 4
$T70335 = -28						; size = 4
$T70334 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ReserveDown@?$CRecordVector@UCUpdatePair@@@@QAEXXZ PROC ; CRecordVector<CUpdatePair>::ReserveDown, COMDAT
; _this$ = ecx
; Line 107
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReserveDown@?$CRecordVector@UCUpdatePair@@@@QAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 108
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN2@ReserveDow
; Line 109
	jmp	$LN3@ReserveDow
$LN2@ReserveDow:
; Line 110
	mov	DWORD PTR _p$[ebp], 0
; Line 111
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+4], 0
	je	$LN1@ReserveDow
; Line 113
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR $T70334[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T70334[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70336[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T70336[ebp], 0
	je	SHORT $LN5@ReserveDow
	push	OFFSET ??0CUpdatePair@@QAE@XZ		; CUpdatePair::CUpdatePair
	mov	eax, DWORD PTR $T70334[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T70336[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T70336[ebp]
	mov	DWORD PTR tv84[ebp], edx
	jmp	SHORT $LN6@ReserveDow
$LN5@ReserveDow:
	mov	DWORD PTR tv84[ebp], 0
$LN6@ReserveDow:
	mov	eax, DWORD PTR tv84[ebp]
	mov	DWORD PTR $T70335[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T70335[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 114
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 4
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveDow:
; Line 116
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T70339[ebp], edx
	mov	eax, DWORD PTR $T70339[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 117
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [ecx], edx
; Line 118
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	DWORD PTR [eax+8], edx
$LN3@ReserveDow:
; Line 119
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReserveDown@?$CRecordVector@UCUpdatePair@@@@QAEXXZ$0:
	mov	eax, DWORD PTR $T70336[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ReserveDown@?$CRecordVector@UCUpdatePair@@@@QAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReserveDown@?$CRecordVector@UCUpdatePair@@@@QAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReserveDown@?$CRecordVector@UCUpdatePair@@@@QAEXXZ ENDP ; CRecordVector<CUpdatePair>::ReserveDown
PUBLIC	?ReserveOnePosition@?$CRecordVector@UCUpdatePair@@@@AAEXXZ ; CRecordVector<CUpdatePair>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@UCUpdatePair@@@@QAEIUCUpdatePair@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 16
?Add@?$CRecordVector@UCUpdatePair@@@@QAEIUCUpdatePair@@@Z PROC ; CRecordVector<CUpdatePair>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@UCUpdatePair@@@@AAEXXZ ; CRecordVector<CUpdatePair>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _item$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _item$[ebp+12]
	mov	DWORD PTR [eax+12], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?Add@?$CRecordVector@UCUpdatePair@@@@QAEIUCUpdatePair@@@Z ENDP ; CRecordVector<CUpdatePair>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GUString@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GUString@@QAEPAXI@Z PROC				; UString::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GUString@@QAEPAXI@Z ENDP				; UString::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T70360 = -12						; size = 4
$T70359 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T70359[ebp], eax
	mov	ecx, DWORD PTR $T70359[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70360[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T70360[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T70363 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T70363[ebp], ecx
	mov	edx, DWORD PTR $T70363[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CObjectVector@VUString@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T70373 = -16						; size = 4
$T70372 = -12						; size = 4
_i$70034 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@VUString@@@@QAEXXZ PROC		; CObjectVector<UString>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$70034[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$70034[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$70034[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$70034[ebp], eax
	mov	ecx, DWORD PTR _i$70034[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T70373[ebp], edx
	mov	eax, DWORD PTR $T70373[ebp]
	mov	DWORD PTR $T70372[ebp], eax
	cmp	DWORD PTR $T70372[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T70372[ebp]
	call	??_GUString@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@VUString@@@@QAEXXZ ENDP		; CObjectVector<UString>::Clear
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@I@@QAEXXZ		; CRecordVector<unsigned int>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z
_TEXT	SEGMENT
$T70379 = -12						; size = 4
$T70378 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z PROC	; CRecordVector<unsigned int>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@I@@QAEXXZ	; CRecordVector<unsigned int>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe@2
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T70378[ebp], eax
	mov	ecx, DWORD PTR $T70378[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70379[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T70379[ebp]
	mov	DWORD PTR [eax], ecx
; Line 82
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ClearAndRe@2:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@I@@QAEXI@Z ENDP	; CRecordVector<unsigned int>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Front@?$CRecordVector@I@@QAEAAIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Front@?$CRecordVector@I@@QAEAAIXZ PROC			; CRecordVector<unsigned int>::Front, COMDAT
; _this$ = ecx
; Line 230
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
?Front@?$CRecordVector@I@@QAEAAIXZ ENDP			; CRecordVector<unsigned int>::Front
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z
_TEXT	SEGMENT
_s$70057 = -16						; size = 4
_temp$ = -8						; size = 4
_p$ = 8							; size = 4
_k$ = 12						; size = 4
_size$ = 16						; size = 4
_compare$ = 20						; size = 4
_param$ = 24						; size = 4
?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z PROC ; CRecordVector<unsigned int>::SortRefDown, COMDAT
; Line 324
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 325
	mov	eax, DWORD PTR _k$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	mov	DWORD PTR _temp$[ebp], edx
$LN5@SortRefDow:
; Line 328
	mov	eax, DWORD PTR _k$[ebp]
	shl	eax, 1
	mov	DWORD PTR _s$70057[ebp], eax
; Line 329
	mov	ecx, DWORD PTR _s$70057[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jbe	SHORT $LN3@SortRefDow
; Line 330
	jmp	SHORT $LN4@SortRefDow
$LN3@SortRefDow:
; Line 331
	mov	edx, DWORD PTR _s$70057[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN2@SortRefDow
	mov	esi, esp
	mov	eax, DWORD PTR _param$[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$70057[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4]
	push	eax
	mov	ecx, DWORD PTR _s$70057[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	lea	eax, DWORD PTR [edx+ecx*4+4]
	push	eax
	call	DWORD PTR _compare$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jle	SHORT $LN2@SortRefDow
; Line 332
	mov	ecx, DWORD PTR _s$70057[ebp]
	add	ecx, 1
	mov	DWORD PTR _s$70057[ebp], ecx
$LN2@SortRefDow:
; Line 333
	mov	esi, esp
	mov	edx, DWORD PTR _param$[ebp]
	push	edx
	mov	eax, DWORD PTR _s$70057[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	lea	edx, DWORD PTR [ecx+eax*4]
	push	edx
	lea	eax, DWORD PTR _temp$[ebp]
	push	eax
	call	DWORD PTR _compare$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	test	eax, eax
	jl	SHORT $LN1@SortRefDow
; Line 334
	jmp	SHORT $LN4@SortRefDow
$LN1@SortRefDow:
; Line 335
	mov	ecx, DWORD PTR _k$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR _s$70057[ebp]
	mov	esi, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [esi+eax*4]
	mov	DWORD PTR [edx+ecx*4], eax
; Line 336
	mov	ecx, DWORD PTR _s$70057[ebp]
	mov	DWORD PTR _k$[ebp], ecx
; Line 337
	jmp	$LN5@SortRefDow
$LN4@SortRefDow:
; Line 338
	mov	edx, DWORD PTR _k$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 339
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN10@SortRefDow
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN10@SortRefDow:
	DD	1
	DD	$LN9@SortRefDow
$LN9@SortRefDow:
	DD	-8					; fffffff8H
	DD	4
	DD	$LN8@SortRefDow
$LN8@SortRefDow:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?SortRefDown@?$CRecordVector@I@@SGXPAIIIP6GHPBI1PAX@Z2@Z ENDP ; CRecordVector<unsigned int>::SortRefDown
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReserveOnePosition@?$CRecordVector@UCUpdatePair@@@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCUpdatePair@@@@AAEXXZ$0
__ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCUpdatePair@@@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReserveOnePosition@?$CRecordVector@UCUpdatePair@@@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@UCUpdatePair@@@@AAEXXZ
_TEXT	SEGMENT
tv86 = -44						; size = 4
$T70394 = -40						; size = 4
$T70391 = -36						; size = 4
$T70390 = -32						; size = 4
$T70389 = -28						; size = 4
_p$70065 = -24						; size = 4
_newCapacity$70064 = -20				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ReserveOnePosition@?$CRecordVector@UCUpdatePair@@@@AAEXXZ PROC ; CRecordVector<CUpdatePair>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReserveOnePosition@?$CRecordVector@UCUpdatePair@@@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$70064[ebp], ecx
; Line 23
	mov	edx, DWORD PTR _newCapacity$70064[ebp]
	mov	DWORD PTR $T70389[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T70389[ebp]
	mov	edx, 16					; 00000010H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70391[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T70391[ebp], 0
	je	SHORT $LN5@ReserveOne
	push	OFFSET ??0CUpdatePair@@QAE@XZ		; CUpdatePair::CUpdatePair
	mov	eax, DWORD PTR $T70389[ebp]
	push	eax
	push	16					; 00000010H
	mov	ecx, DWORD PTR $T70391[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T70391[ebp]
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN6@ReserveOne
$LN5@ReserveOne:
	mov	DWORD PTR tv86[ebp], 0
$LN6@ReserveOne:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR $T70390[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T70390[ebp]
	mov	DWORD PTR _p$70065[ebp], ecx
; Line 24
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	shl	ecx, 4
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _p$70065[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T70394[ebp], eax
	mov	ecx, DWORD PTR $T70394[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$70065[ebp]
	mov	DWORD PTR [edx], eax
; Line 28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newCapacity$70064[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN3@ReserveOne:
; Line 30
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCUpdatePair@@@@AAEXXZ$0:
	mov	eax, DWORD PTR $T70391[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ReserveOnePosition@?$CRecordVector@UCUpdatePair@@@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCUpdatePair@@@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReserveOnePosition@?$CRecordVector@UCUpdatePair@@@@AAEXXZ ENDP ; CRecordVector<CUpdatePair>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@I@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@I@@QAEXXZ PROC			; CRecordVector<unsigned int>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@I@@QAEXXZ ENDP			; CRecordVector<unsigned int>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$MyCompare@I@@YGHII@Z
_TEXT	SEGMENT
tv67 = -4						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
??$MyCompare@I@@YGHII@Z PROC				; MyCompare<unsigned int>, COMDAT
; File c:\workspace\7z1505-src\cpp\common\defs.h
; Line 12
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _a$[ebp]
	cmp	eax, DWORD PTR _b$[ebp]
	jae	SHORT $LN3@MyCompare
	mov	DWORD PTR tv67[ebp], -1
	jmp	SHORT $LN4@MyCompare
$LN3@MyCompare:
	mov	ecx, DWORD PTR _a$[ebp]
	xor	edx, edx
	cmp	ecx, DWORD PTR _b$[ebp]
	setne	dl
	mov	DWORD PTR tv67[ebp], edx
$LN4@MyCompare:
	mov	eax, DWORD PTR tv67[ebp]
	mov	esp, ebp
	pop	ebp
	ret	8
??$MyCompare@I@@YGHII@Z ENDP				; MyCompare<unsigned int>
_TEXT	ENDS
END
