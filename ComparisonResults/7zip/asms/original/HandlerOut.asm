; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\Common\HandlerOut.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
$SG68150 DB	'yx', 00H
	ORG $+1
$SG68159 DB	'crc', 00H
$SG68166 DB	'mt', 00H
	ORG $+1
$SG68174 DB	'f', 00H
	ORG $+2
$SG68222 DB	'mt', 00H
CONST	ENDS
PUBLIC	?SetGlobalLevelAndThreads@CMultiMethodProps@NArchive@@QAEXAAVCOneMethodInfo@@I@Z ; NArchive::CMultiMethodProps::SetGlobalLevelAndThreads
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\handlerout.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_level$ = -8						; size = 4
_this$ = -4						; size = 4
_oneMethodInfo$ = 8					; size = 4
_numThreads$ = 12					; size = 4
?SetGlobalLevelAndThreads@CMultiMethodProps@NArchive@@QAEXAAVCOneMethodInfo@@I@Z PROC ; NArchive::CMultiMethodProps::SetGlobalLevelAndThreads
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _level$[ebp], ecx
; Line 30
	cmp	DWORD PTR _level$[ebp], -1
	je	SHORT $LN1@SetGlobalL
; Line 31
	mov	edx, DWORD PTR _level$[ebp]
	push	edx
	push	15					; 0000000fH
	mov	eax, DWORD PTR _oneMethodInfo$[ebp]
	push	eax
	call	?SetMethodProp32@NArchive@@YGXAAVCOneMethodInfo@@KI@Z ; NArchive::SetMethodProp32
$LN1@SetGlobalL:
; Line 34
	mov	ecx, DWORD PTR _numThreads$[ebp]
	push	ecx
	push	13					; 0000000dH
	mov	edx, DWORD PTR _oneMethodInfo$[ebp]
	push	edx
	call	?SetMethodProp32@NArchive@@YGXAAVCOneMethodInfo@@KI@Z ; NArchive::SetMethodProp32
; Line 36
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetGlobalLevelAndThreads@CMultiMethodProps@NArchive@@QAEXAAVCOneMethodInfo@@I@Z ENDP ; NArchive::CMultiMethodProps::SetGlobalLevelAndThreads
_TEXT	ENDS
EXTRN	?AddProp32@CProps@@QAEXKI@Z:PROC		; CProps::AddProp32
EXTRN	?FindProp@CMethodProps@@QBEHK@Z:PROC		; CMethodProps::FindProp
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_m$ = 8							; size = 4
_propID$ = 12						; size = 4
_value$ = 16						; size = 4
?SetMethodProp32@NArchive@@YGXAAVCOneMethodInfo@@KI@Z PROC ; NArchive::SetMethodProp32
; Line 18
	push	ebp
	mov	ebp, esp
; Line 19
	mov	eax, DWORD PTR _propID$[ebp]
	push	eax
	mov	ecx, DWORD PTR _m$[ebp]
	call	?FindProp@CMethodProps@@QBEHK@Z		; CMethodProps::FindProp
	test	eax, eax
	jge	SHORT $LN2@SetMethodP
; Line 20
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	edx, DWORD PTR _propID$[ebp]
	push	edx
	mov	ecx, DWORD PTR _m$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
$LN2@SetMethodP:
; Line 21
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?SetMethodProp32@NArchive@@YGXAAVCOneMethodInfo@@KI@Z ENDP ; NArchive::SetMethodProp32
_TEXT	ENDS
PUBLIC	?Clear@?$CObjectVector@VCOneMethodInfo@@@@QAEXXZ ; CObjectVector<COneMethodInfo>::Clear
PUBLIC	?Clear@COneMethodInfo@@QAEXXZ			; COneMethodInfo::Clear
PUBLIC	?Init@CMultiMethodProps@NArchive@@QAEXXZ	; NArchive::CMultiMethodProps::Init
EXTRN	?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ:PROC ; NWindows::NSystem::GetNumberOfProcessors
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv66 = -8						; size = 4
_this$ = -4						; size = 4
?Init@CMultiMethodProps@NArchive@@QAEXXZ PROC		; NArchive::CMultiMethodProps::Init
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 41
	call	?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ ; NWindows::NSystem::GetNumberOfProcessors
	mov	DWORD PTR tv66[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv66[ebp]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv66[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 44
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], -1
; Line 45
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], -1
; Line 47
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+68], 1
; Line 48
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 4
; Line 49
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?Clear@COneMethodInfo@@QAEXXZ		; COneMethodInfo::Clear
; Line 50
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Clear@?$CObjectVector@VCOneMethodInfo@@@@QAEXXZ ; CObjectVector<COneMethodInfo>::Clear
; Line 51
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CMultiMethodProps@NArchive@@QAEXXZ ENDP		; NArchive::CMultiMethodProps::Init
_TEXT	ENDS
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
PUBLIC	?Empty@AString@@QAEXXZ				; AString::Empty
PUBLIC	?Clear@CProps@@QAEXXZ				; CProps::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@COneMethodInfo@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@COneMethodInfo@@QAEXXZ PROC			; COneMethodInfo::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 184
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 185
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CProps@@QAEXXZ			; CProps::Clear
; Line 186
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Empty@AString@@QAEXXZ			; AString::Empty
; Line 187
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 188
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@COneMethodInfo@@QAEXXZ ENDP			; COneMethodInfo::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@AString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@AString@@QAEXXZ PROC				; AString::Empty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 236
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	BYTE PTR [edx], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@AString@@QAEXXZ ENDP				; AString::Empty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
_TEXT	ENDS
PUBLIC	?Clear@?$CObjectVector@UCProp@@@@QAEXXZ		; CObjectVector<CProp>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@CProps@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@CProps@@QAEXXZ PROC				; CProps::Clear, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CObjectVector@UCProp@@@@QAEXXZ	; CObjectVector<CProp>::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@CProps@@QAEXXZ ENDP				; CProps::Clear
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
PUBLIC	??1COneMethodInfo@@QAE@XZ			; COneMethodInfo::~COneMethodInfo
PUBLIC	?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z ; CObjectVector<COneMethodInfo>::Add
PUBLIC	??0COneMethodInfo@@QAE@XZ			; COneMethodInfo::COneMethodInfo
PUBLIC	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ	; CObjectVector<COneMethodInfo>::Size
PUBLIC	?Ptr@UString@@QBEPB_WI@Z			; UString::Ptr
PUBLIC	?IsEqualTo@UString@@QBE_NPBD@Z			; UString::IsEqualTo
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	?MakeLower_Ascii@UString@@QAEXXZ		; UString::MakeLower_Ascii
PUBLIC	?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z ; NArchive::CMultiMethodProps::SetProperty
EXTRN	?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z:PROC ; COneMethodInfo::ParseMethodFromPROPVARIANT
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
EXTRN	?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z:PROC ; PROPVARIANT_to_bool
EXTRN	?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z:PROC ; ParseMtProp
EXTRN	?ParseStringToUInt32@@YGIABVUString@@AAI@Z:PROC	; ParseStringToUInt32
EXTRN	?Delete@UString@@QAEXII@Z:PROC			; UString::Delete
EXTRN	?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z:PROC ; UString::IsPrefixedBy_Ascii_NoCase
EXTRN	?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z:PROC ; ParsePropToUInt32
EXTRN	?Delete@UString@@QAEXI@Z:PROC			; UString::Delete
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__ehfuncinfo$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$4
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv239 = -224						; size = 4
tv147 = -220						; size = 4
tv233 = -216						; size = 4
tv166 = -212						; size = 4
$T68473 = -208						; size = 4
$T68472 = -204						; size = 36
$T68471 = -168						; size = 4
$T68470 = -164						; size = 12
$T68469 = -152						; size = 4
$T68468 = -148						; size = 4
$T68467 = -144						; size = 4
$T68466 = -140						; size = 4
$T68465 = -136						; size = 4
$T68464 = -132						; size = 12
$T68463 = -120						; size = 4
$T68462 = -116						; size = 4
$T68461 = -112						; size = 4
$T68460 = -108						; size = 4
$T68459 = -104						; size = 4
_j$68187 = -100						; size = 4
_res$68175 = -96					; size = 4
___result__$68167 = -92					; size = 4
_realName$ = -84					; size = 12
_index$ = -68						; size = 4
_number$ = -60						; size = 4
___result__$68152 = -52					; size = 4
_v$68151 = -44						; size = 4
_name$ = -32						; size = 12
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_nameSpec$ = 8						; size = 4
_value$ = 12						; size = 4
?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z PROC ; NArchive::CMultiMethodProps::SetProperty
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\handlerout.cpp
; Line 54
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 212				; 000000d4H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-224]
	mov	ecx, 53					; 00000035H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 55
	mov	eax, DWORD PTR _nameSpec$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 56
	lea	ecx, DWORD PTR _name$[ebp]
	call	?MakeLower_Ascii@UString@@QAEXXZ	; UString::MakeLower_Ascii
; Line 57
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN15@SetPropert
; Line 58
	mov	DWORD PTR $T68459[ebp], -2147024809	; 80070057H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68459[ebp]
	jmp	$LN16@SetPropert
$LN15@SetPropert:
; Line 60
	lea	ecx, DWORD PTR _name$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	edx, WORD PTR [eax]
	cmp	edx, 120				; 00000078H
	jne	SHORT $LN14@SetPropert
; Line 62
	push	0
	lea	ecx, DWORD PTR _name$[ebp]
	call	?Delete@UString@@QAEXI@Z		; UString::Delete
; Line 63
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 9
; Line 64
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32
	mov	DWORD PTR $T68460[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68460[ebp]
	jmp	$LN16@SetPropert
$LN14@SetPropert:
; Line 67
	push	OFFSET $SG68150
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z ; UString::IsPrefixedBy_Ascii_NoCase
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN13@SetPropert
; Line 69
	push	2
	push	0
	lea	ecx, DWORD PTR _name$[ebp]
	call	?Delete@UString@@QAEXII@Z		; UString::Delete
; Line 70
	mov	DWORD PTR _v$68151[ebp], 9
; Line 71
	lea	edx, DWORD PTR _v$68151[ebp]
	push	edx
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	push	ecx
	call	?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32
	mov	DWORD PTR ___result__$68152[ebp], eax
	cmp	DWORD PTR ___result__$68152[ebp], 0
	je	SHORT $LN12@SetPropert
	mov	edx, DWORD PTR ___result__$68152[ebp]
	mov	DWORD PTR $T68461[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68461[ebp]
	jmp	$LN16@SetPropert
$LN12@SetPropert:
; Line 72
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _v$68151[ebp]
	mov	DWORD PTR [eax+4], ecx
; Line 73
	mov	DWORD PTR $T68462[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68462[ebp]
	jmp	$LN16@SetPropert
$LN13@SetPropert:
; Line 76
	push	OFFSET $SG68159
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@SetPropert
; Line 78
	push	3
	push	0
	lea	ecx, DWORD PTR _name$[ebp]
	call	?Delete@UString@@QAEXII@Z		; UString::Delete
; Line 79
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 4
; Line 80
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	lea	eax, DWORD PTR _name$[ebp]
	push	eax
	call	?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32
	mov	DWORD PTR $T68463[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68463[ebp]
	jmp	$LN16@SetPropert
$LN11@SetPropert:
; Line 84
	lea	ecx, DWORD PTR _number$[ebp]
	push	ecx
	lea	edx, DWORD PTR _name$[ebp]
	push	edx
	call	?ParseStringToUInt32@@YGIABVUString@@AAI@Z ; ParseStringToUInt32
	mov	DWORD PTR _index$[ebp], eax
; Line 85
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR _realName$[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 86
	cmp	DWORD PTR _index$[ebp], 0
	jne	$LN10@SetPropert
; Line 88
	push	OFFSET $SG68166
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z ; UString::IsPrefixedBy_Ascii_NoCase
	movzx	ecx, al
	test	ecx, ecx
	je	$LN9@SetPropert
; Line 91
	push	2
	lea	ecx, DWORD PTR _name$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR $T68464[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 8
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	lea	eax, DWORD PTR $T68464[ebp]
	push	eax
	call	?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z ; ParseMtProp
	mov	DWORD PTR ___result__$68167[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T68464[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	cmp	DWORD PTR ___result__$68167[ebp], 0
	je	SHORT $LN8@SetPropert
	mov	ecx, DWORD PTR ___result__$68167[ebp]
	mov	DWORD PTR $T68465[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _realName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68465[ebp]
	jmp	$LN16@SetPropert
$LN8@SetPropert:
; Line 94
	mov	DWORD PTR $T68466[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _realName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68466[ebp]
	jmp	$LN16@SetPropert
$LN9@SetPropert:
; Line 96
	push	OFFSET $SG68174
	lea	ecx, DWORD PTR _name$[ebp]
	call	?IsEqualTo@UString@@QBE_NPBD@Z		; UString::IsEqualTo
	movzx	edx, al
	test	edx, edx
	je	$LN7@SetPropert
; Line 98
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 68					; 00000044H
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	?PROPVARIANT_to_bool@@YGJABUtagPROPVARIANT@@AA_N@Z ; PROPVARIANT_to_bool
	mov	DWORD PTR _res$68175[ebp], eax
; Line 99
	cmp	DWORD PTR _res$68175[ebp], 0
	jne	SHORT $LN6@SetPropert
; Line 100
	mov	edx, DWORD PTR _res$68175[ebp]
	mov	DWORD PTR $T68467[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _realName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68467[ebp]
	jmp	$LN16@SetPropert
$LN6@SetPropert:
; Line 101
	mov	eax, DWORD PTR _value$[ebp]
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 8
	je	SHORT $LN5@SetPropert
; Line 102
	mov	DWORD PTR $T68468[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _realName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68468[ebp]
	jmp	$LN16@SetPropert
$LN5@SetPropert:
; Line 103
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	lea	ecx, DWORD PTR $T68470[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR tv166[ebp], eax
	mov	eax, DWORD PTR tv166[ebp]
	mov	DWORD PTR tv233[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	ecx, DWORD PTR tv233[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 32					; 00000020H
	call	?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z ; COneMethodInfo::ParseMethodFromPROPVARIANT
	mov	DWORD PTR $T68469[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T68470[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _realName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68469[ebp]
	jmp	$LN16@SetPropert
$LN7@SetPropert:
; Line 105
	mov	DWORD PTR _number$[ebp], 0
$LN10@SetPropert:
; Line 107
	cmp	DWORD PTR _number$[ebp], 64		; 00000040H
	jbe	SHORT $LN4@SetPropert
; Line 108
	mov	DWORD PTR $T68471[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _realName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68471[ebp]
	jmp	$LN16@SetPropert
$LN4@SetPropert:
; Line 109
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ; CObjectVector<COneMethodInfo>::Size
	mov	DWORD PTR _j$68187[ebp], eax
	jmp	SHORT $LN3@SetPropert
$LN2@SetPropert:
	mov	edx, DWORD PTR _j$68187[ebp]
	add	edx, 1
	mov	DWORD PTR _j$68187[ebp], edx
$LN3@SetPropert:
	mov	eax, DWORD PTR _j$68187[ebp]
	cmp	eax, DWORD PTR _number$[ebp]
	jg	SHORT $LN1@SetPropert
; Line 110
	lea	ecx, DWORD PTR $T68472[ebp]
	call	??0COneMethodInfo@@QAE@XZ
	mov	DWORD PTR tv147[ebp], eax
	mov	ecx, DWORD PTR tv147[ebp]
	mov	DWORD PTR tv239[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	mov	edx, DWORD PTR tv239[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z ; CObjectVector<COneMethodInfo>::Add
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR $T68472[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	jmp	SHORT $LN2@SetPropert
$LN1@SetPropert:
; Line 111
	mov	eax, DWORD PTR _value$[ebp]
	push	eax
	lea	ecx, DWORD PTR _realName$[ebp]
	push	ecx
	mov	edx, DWORD PTR _number$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ; CObjectVector<COneMethodInfo>::operator[]
	mov	ecx, eax
	call	?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z ; COneMethodInfo::ParseMethodFromPROPVARIANT
	mov	DWORD PTR $T68473[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _realName$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68473[ebp]
$LN16@SetPropert:
; Line 112
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN29@SetPropert
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 224				; 000000e0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	3
$LN29@SetPropert:
	DD	4
	DD	$LN28@SetPropert
$LN28@SetPropert:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN23@SetPropert
	DD	-44					; ffffffd4H
	DD	4
	DD	$LN24@SetPropert
	DD	-60					; ffffffc4H
	DD	4
	DD	$LN25@SetPropert
	DD	-84					; ffffffacH
	DD	12					; 0000000cH
	DD	$LN26@SetPropert
$LN26@SetPropert:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN25@SetPropert:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	98					; 00000062H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN24@SetPropert:
	DB	118					; 00000076H
	DB	0
$LN23@SetPropert:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$0:
	lea	ecx, DWORD PTR _name$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$1:
	lea	ecx, DWORD PTR _realName$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$2:
	lea	ecx, DWORD PTR $T68464[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$3:
	lea	ecx, DWORD PTR $T68470[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z$4:
	lea	ecx, DWORD PTR $T68472[ebp]
	jmp	??1COneMethodInfo@@QAE@XZ
__ehhandler$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-220]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetProperty@CMultiMethodProps@NArchive@@QAEJPB_WABUtagPROPVARIANT@@@Z ENDP ; NArchive::CMultiMethodProps::SetProperty
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T68496 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T68496[ebp], ecx
	mov	edx, DWORD PTR $T68496[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Ptr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@UString@@QBEPB_WI@Z PROC				; UString::Ptr, COMDAT
; _this$ = ecx
; Line 478
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@UString@@QBEPB_WI@Z ENDP				; UString::Ptr
_TEXT	ENDS
EXTRN	?MyStringLower_Ascii@@YGXPA_W@Z:PROC		; MyStringLower_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MakeLower_Ascii@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeLower_Ascii@UString@@QAEXXZ PROC			; UString::MakeLower_Ascii, COMDAT
; _this$ = ecx
; Line 545
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?MyStringLower_Ascii@@YGXPA_W@Z		; MyStringLower_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeLower_Ascii@UString@@QAEXXZ ENDP			; UString::MakeLower_Ascii
_TEXT	ENDS
EXTRN	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z:PROC	; StringsAreEqual_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEqualTo@UString@@QBE_NPBD@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_s$ = 8							; size = 4
?IsEqualTo@UString@@QBE_NPBD@Z PROC			; UString::IsEqualTo, COMDAT
; _this$ = ecx
; Line 547
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	call	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z	; StringsAreEqual_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsEqualTo@UString@@QBE_NPBD@Z ENDP			; UString::IsEqualTo
_TEXT	ENDS
PUBLIC	??1AString@@QAE@XZ				; AString::~AString
PUBLIC	??1CMethodProps@@QAE@XZ				; CMethodProps::~CMethodProps
PUBLIC	??0CMethodProps@@QAE@XZ				; CMethodProps::CMethodProps
EXTRN	??0AString@@QAE@XZ:PROC				; AString::AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COneMethodInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@XZ$1
__ehfuncinfo$??0COneMethodInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COneMethodInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COneMethodInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COneMethodInfo@@QAE@XZ PROC				; COneMethodInfo::COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0AString@@QAE@XZ			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COneMethodInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??0COneMethodInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0COneMethodInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COneMethodInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COneMethodInfo@@QAE@XZ ENDP				; COneMethodInfo::COneMethodInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1AString@@QAE@XZ
_TEXT	SEGMENT
$T68520 = -8						; size = 4
_this$ = -4						; size = 4
??1AString@@QAE@XZ PROC					; AString::~AString, COMDAT
; _this$ = ecx
; Line 232
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T68520[ebp], ecx
	mov	edx, DWORD PTR $T68520[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1AString@@QAE@XZ ENDP					; AString::~AString
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1COneMethodInfo@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COneMethodInfo@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1COneMethodInfo@@QAE@XZ$1
__ehfuncinfo$??1COneMethodInfo@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1COneMethodInfo@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COneMethodInfo@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COneMethodInfo@@QAE@XZ PROC				; COneMethodInfo::~COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1AString@@QAE@XZ			; AString::~AString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodProps@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COneMethodInfo@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??1COneMethodInfo@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??1COneMethodInfo@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COneMethodInfo@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COneMethodInfo@@QAE@XZ ENDP				; COneMethodInfo::~COneMethodInfo
PUBLIC	??0CProps@@QAE@XZ				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMethodProps@@QAE@XZ PROC				; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMethodProps@@QAE@XZ ENDP				; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??1CProps@@QAE@XZ				; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodProps@@QAE@XZ PROC				; CMethodProps::~CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodProps@@QAE@XZ ENDP				; CMethodProps::~CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CProps@@QAE@XZ PROC					; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CProps@@QAE@XZ ENDP					; CProps::CProps
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProps@@QAE@XZ PROC					; CProps::~CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::~CObjectVector<CProp>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProps@@QAE@XZ ENDP					; CProps::~CProps
_TEXT	ENDS
PUBLIC	?AddProp_NumThreads@CMethodProps@@QAEXI@Z	; CMethodProps::AddProp_NumThreads
PUBLIC	?Init@CSingleMethodProps@NArchive@@QAEXXZ	; NArchive::CSingleMethodProps::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
?Init@CSingleMethodProps@NArchive@@QAEXXZ PROC		; NArchive::CSingleMethodProps::Init
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\handlerout.cpp
; Line 115
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 116
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@COneMethodInfo@@QAEXXZ		; COneMethodInfo::Clear
; Line 117
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+36], -1
; Line 120
	call	?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ ; NWindows::NSystem::GetNumberOfProcessors
	mov	DWORD PTR tv72[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR tv72[ebp]
	mov	DWORD PTR [ecx+40], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR tv72[ebp]
	mov	DWORD PTR [eax+44], ecx
; Line 121
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+40]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddProp_NumThreads@CMethodProps@@QAEXI@Z ; CMethodProps::AddProp_NumThreads
; Line 123
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CSingleMethodProps@NArchive@@QAEXXZ ENDP		; NArchive::CSingleMethodProps::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddProp_NumThreads@CMethodProps@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_numThreads$ = 8					; size = 4
?AddProp_NumThreads@CMethodProps@@QAEXI@Z PROC		; CMethodProps::AddProp_NumThreads, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 169
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	mov	eax, DWORD PTR _numThreads$[ebp]
	push	eax
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 171
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddProp_NumThreads@CMethodProps@@QAEXI@Z ENDP		; CMethodProps::AddProp_NumThreads
_TEXT	ENDS
PUBLIC	?AddProp_Level@CMethodProps@@QAEXI@Z		; CMethodProps::AddProp_Level
PUBLIC	?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z ; NArchive::CSingleMethodProps::SetProperties
xdata$x	SEGMENT
__unwindtable$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$3
__ehfuncinfo$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
$T68555 = -116						; size = 12
$T68554 = -104						; size = 4
$T68553 = -100						; size = 4
$T68552 = -96						; size = 12
$T68551 = -84						; size = 4
$T68550 = -80						; size = 12
$T68549 = -68						; size = 4
___result__$68223 = -64					; size = 4
___result__$68216 = -60					; size = 4
_a$68215 = -52						; size = 4
_value$68213 = -44					; size = 4
_name$68209 = -36					; size = 12
_i$68205 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_names$ = 8						; size = 4
_values$ = 12						; size = 4
_numProps$ = 16						; size = 4
?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z PROC ; NArchive::CSingleMethodProps::SetProperties
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\handlerout.cpp
; Line 126
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 104				; 00000068H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-116]
	mov	ecx, 26					; 0000001aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 127
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Init@CSingleMethodProps@NArchive@@QAEXXZ ; NArchive::CSingleMethodProps::Init
; Line 128
	mov	DWORD PTR _i$68205[ebp], 0
	jmp	SHORT $LN10@SetPropert@2
$LN9@SetPropert@2:
	mov	eax, DWORD PTR _i$68205[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68205[ebp], eax
$LN10@SetPropert@2:
	mov	ecx, DWORD PTR _i$68205[ebp]
	cmp	ecx, DWORD PTR _numProps$[ebp]
	jae	$LN8@SetPropert@2
; Line 130
	mov	edx, DWORD PTR _i$68205[ebp]
	mov	eax, DWORD PTR _names$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	push	ecx
	lea	ecx, DWORD PTR _name$68209[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 131
	lea	ecx, DWORD PTR _name$68209[ebp]
	call	?MakeLower_Ascii@UString@@QAEXXZ	; UString::MakeLower_Ascii
; Line 132
	lea	ecx, DWORD PTR _name$68209[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN7@SetPropert@2
; Line 133
	mov	DWORD PTR $T68549[ebp], -2147024809	; 80070057H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$68209[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68549[ebp]
	jmp	$LN11@SetPropert@2
$LN7@SetPropert@2:
; Line 134
	mov	eax, DWORD PTR _i$68205[ebp]
	shl	eax, 4
	add	eax, DWORD PTR _values$[ebp]
	mov	DWORD PTR _value$68213[ebp], eax
; Line 135
	lea	ecx, DWORD PTR _name$68209[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	movzx	ecx, WORD PTR [eax]
	cmp	ecx, 120				; 00000078H
	jne	SHORT $LN6@SetPropert@2
; Line 137
	mov	DWORD PTR _a$68215[ebp], 9
; Line 138
	push	1
	lea	ecx, DWORD PTR _name$68209[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR $T68550[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	edx, DWORD PTR _a$68215[ebp]
	push	edx
	mov	eax, DWORD PTR _value$68213[ebp]
	push	eax
	lea	ecx, DWORD PTR $T68550[ebp]
	push	ecx
	call	?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z ; ParsePropToUInt32
	mov	DWORD PTR ___result__$68216[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T68550[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	cmp	DWORD PTR ___result__$68216[ebp], 0
	je	SHORT $LN5@SetPropert@2
	mov	edx, DWORD PTR ___result__$68216[ebp]
	mov	DWORD PTR $T68551[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$68209[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68551[ebp]
	jmp	$LN11@SetPropert@2
$LN5@SetPropert@2:
; Line 139
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _a$68215[ebp]
	mov	DWORD PTR [eax+36], ecx
; Line 140
	mov	edx, DWORD PTR _a$68215[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddProp_Level@CMethodProps@@QAEXI@Z	; CMethodProps::AddProp_Level
	jmp	$LN4@SetPropert@2
$LN6@SetPropert@2:
; Line 142
	push	OFFSET $SG68222
	lea	ecx, DWORD PTR _name$68209[ebp]
	call	?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z ; UString::IsPrefixedBy_Ascii_NoCase
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@SetPropert@2
; Line 145
	push	2
	lea	ecx, DWORD PTR _name$68209[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR $T68552[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+44]
	push	eax
	mov	ecx, DWORD PTR _value$68213[ebp]
	push	ecx
	lea	edx, DWORD PTR $T68552[ebp]
	push	edx
	call	?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z ; ParseMtProp
	mov	DWORD PTR ___result__$68223[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T68552[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	cmp	DWORD PTR ___result__$68223[ebp], 0
	je	SHORT $LN2@SetPropert@2
	mov	eax, DWORD PTR ___result__$68223[ebp]
	mov	DWORD PTR $T68553[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$68209[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68553[ebp]
	jmp	SHORT $LN11@SetPropert@2
$LN2@SetPropert@2:
; Line 146
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+40]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddProp_NumThreads@CMethodProps@@QAEXI@Z ; CMethodProps::AddProp_NumThreads
; Line 149
	jmp	SHORT $LN4@SetPropert@2
$LN3@SetPropert@2:
; Line 150
	mov	eax, DWORD PTR _i$68205[ebp]
	mov	ecx, DWORD PTR _names$[ebp]
	mov	edx, DWORD PTR [ecx+eax*4]
	push	edx
	lea	ecx, DWORD PTR $T68555[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	mov	eax, DWORD PTR _value$68213[ebp]
	push	eax
	lea	ecx, DWORD PTR $T68555[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z ; COneMethodInfo::ParseMethodFromPROPVARIANT
	mov	DWORD PTR $T68554[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR $T68555[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$68209[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	eax, DWORD PTR $T68554[ebp]
	jmp	SHORT $LN11@SetPropert@2
$LN4@SetPropert@2:
; Line 151
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _name$68209[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN9@SetPropert@2
$LN8@SetPropert@2:
; Line 152
	xor	eax, eax
$LN11@SetPropert@2:
; Line 153
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@SetPropert@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 116				; 00000074H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN21@SetPropert@2:
	DD	2
	DD	$LN20@SetPropert@2
$LN20@SetPropert@2:
	DD	-36					; ffffffdcH
	DD	12					; 0000000cH
	DD	$LN17@SetPropert@2
	DD	-52					; ffffffccH
	DD	4
	DD	$LN18@SetPropert@2
$LN18@SetPropert@2:
	DB	97					; 00000061H
	DB	0
$LN17@SetPropert@2:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$0:
	lea	ecx, DWORD PTR _name$68209[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$1:
	lea	ecx, DWORD PTR $T68550[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$2:
	lea	ecx, DWORD PTR $T68552[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z$3:
	lea	ecx, DWORD PTR $T68555[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-112]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?SetProperties@CSingleMethodProps@NArchive@@QAEJPBQB_WPBUtagPROPVARIANT@@I@Z ENDP ; NArchive::CSingleMethodProps::SetProperties
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?AddProp_Level@CMethodProps@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_level$ = 8						; size = 4
?AddProp_Level@CMethodProps@@QAEXI@Z PROC		; CMethodProps::AddProp_Level, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\methodprops.h
; Line 164
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 165
	mov	eax, DWORD PTR _level$[ebp]
	push	eax
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddProp32@CProps@@QAEXKI@Z		; CProps::AddProp32
; Line 166
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?AddProp_Level@CMethodProps@@QAEXI@Z ENDP		; CMethodProps::AddProp_Level
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GCProp@@QAEPAXI@Z				; CProp::`scalar deleting destructor'
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T68575 = -28						; size = 4
$T68574 = -24						; size = 4
_i$68249 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::~CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$68249[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$68249[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$68249[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$68249[ebp], eax
	mov	ecx, DWORD PTR _i$68249[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T68575[ebp], edx
	mov	eax, DWORD PTR $T68575[ebp]
	mov	DWORD PTR $T68574[ebp], eax
	cmp	DWORD PTR $T68574[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T68574[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::~CObjectVector<CProp>
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@UCProp@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T68588 = -16						; size = 4
$T68587 = -12						; size = 4
_i$68258 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@UCProp@@@@QAEXXZ PROC		; CObjectVector<CProp>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$68258[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$68258[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$68258[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$68258[ebp], eax
	mov	ecx, DWORD PTR _i$68258[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T68588[ebp], edx
	mov	eax, DWORD PTR $T68588[ebp]
	mov	DWORD PTR $T68587[ebp], eax
	cmp	DWORD PTR $T68587[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T68587[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@UCProp@@@@QAEXXZ ENDP		; CObjectVector<CProp>::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ PROC	; CObjectVector<COneMethodInfo>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@VCOneMethodInfo@@@@QBEIXZ ENDP	; CObjectVector<COneMethodInfo>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z PROC ; CObjectVector<COneMethodInfo>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VCOneMethodInfo@@@@QAEAAVCOneMethodInfo@@I@Z ENDP ; CObjectVector<COneMethodInfo>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
PUBLIC	??0COneMethodInfo@@QAE@ABV0@@Z			; COneMethodInfo::COneMethodInfo
EXTRN	??2@YAPAXI@Z:PROC				; operator new
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T68598 = -24						; size = 4
$T68597 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z PROC ; CObjectVector<COneMethodInfo>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	36					; 00000024H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68598[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T68598[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T68598[ebp]
	call	??0COneMethodInfo@@QAE@ABV0@@Z
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T68597[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T68597[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z$0:
	mov	eax, DWORD PTR $T68598[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VCOneMethodInfo@@@@QAEIABVCOneMethodInfo@@@Z ENDP ; CObjectVector<COneMethodInfo>::Add
PUBLIC	??_GCOneMethodInfo@@QAEPAXI@Z			; COneMethodInfo::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@VCOneMethodInfo@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T68611 = -16						; size = 4
$T68610 = -12						; size = 4
_i$68292 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@VCOneMethodInfo@@@@QAEXXZ PROC	; CObjectVector<COneMethodInfo>::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$68292[ebp], eax
$LN2@Clear@2:
	cmp	DWORD PTR _i$68292[ebp], 0
	je	SHORT $LN1@Clear@2
; Line 501
	mov	eax, DWORD PTR _i$68292[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$68292[ebp], eax
	mov	ecx, DWORD PTR _i$68292[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T68611[ebp], edx
	mov	eax, DWORD PTR $T68611[ebp]
	mov	DWORD PTR $T68610[ebp], eax
	cmp	DWORD PTR $T68610[ebp], 0
	je	SHORT $LN5@Clear@2
	push	1
	mov	ecx, DWORD PTR $T68610[ebp]
	call	??_GCOneMethodInfo@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear@2
$LN5@Clear@2:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear@2:
	jmp	SHORT $LN2@Clear@2
$LN1@Clear@2:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@VCOneMethodInfo@@@@QAEXXZ ENDP	; CObjectVector<COneMethodInfo>::Clear
_TEXT	ENDS
PUBLIC	??1CProp@@QAE@XZ				; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCProp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProp@@QAEPAXI@Z PROC				; CProp::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProp@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProp@@QAEPAXI@Z ENDP				; CProp::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??0CMethodProps@@QAE@ABV0@@Z			; CMethodProps::CMethodProps
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
EXTRN	??0AString@@QAE@ABV0@@Z:PROC			; AString::AString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COneMethodInfo@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1
__ehfuncinfo$??0COneMethodInfo@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COneMethodInfo@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COneMethodInfo@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
___that$ = 8						; size = 4
??0COneMethodInfo@@QAE@ABV0@@Z PROC			; COneMethodInfo::COneMethodInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CMethodProps@@QAE@ABV0@@Z
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR ___that$[ebp]
	add	ecx, 12					; 0000000cH
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0AString@@QAE@ABV0@@Z			; AString::AString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	edx, DWORD PTR ___that$[ebp]
	add	edx, 24					; 00000018H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CMethodProps@@QAE@XZ
__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1AString@@QAE@XZ			; AString::~AString
__ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COneMethodInfo@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COneMethodInfo@@QAE@ABV0@@Z ENDP			; COneMethodInfo::COneMethodInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCOneMethodInfo@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCOneMethodInfo@@QAEPAXI@Z PROC			; COneMethodInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1COneMethodInfo@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCOneMethodInfo@@QAEPAXI@Z ENDP			; COneMethodInfo::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProp@@QAE@XZ PROC					; CProp::~CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProp@@QAE@XZ ENDP					; CProp::~CProp
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
_TEXT	ENDS
PUBLIC	??0CProps@@QAE@ABU0@@Z				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CMethodProps@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CMethodProps@@QAE@ABV0@@Z PROC			; CMethodProps::CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CProps@@QAE@ABU0@@Z
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CMethodProps@@QAE@ABV0@@Z ENDP			; CMethodProps::CMethodProps
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z	; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProps@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProps@@QAE@ABU0@@Z PROC				; CProps::CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ; CObjectVector<CProp>::CObjectVector<CProp>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProps@@QAE@ABU0@@Z ENDP				; CProps::CProps
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T68645 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T68645[ebp], ecx
	mov	edx, DWORD PTR $T68645[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
_TEXT	ENDS
PUBLIC	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z	; CRecordVector<void *>::AddInReserved
PUBLIC	??0CProp@@QAE@ABU0@@Z				; CProp::CProp
PUBLIC	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z	; CObjectVector<CProp>::operator[]
PUBLIC	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z	; CRecordVector<void *>::ConstructReserve
PUBLIC	?Size@?$CObjectVector@UCProp@@@@QBEIXZ		; CObjectVector<CProp>::Size
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1
__ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
tv85 = -36						; size = 4
$T68655 = -32						; size = 4
$T68654 = -28						; size = 4
_i$68338 = -24						; size = 4
_size$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_v$ = 8							; size = 4
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z PROC		; CObjectVector<CProp>::CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 422
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 424
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CObjectVector@UCProp@@@@QBEIXZ	; CObjectVector<CProp>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 425
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ; CRecordVector<void *>::ConstructReserve
; Line 426
	mov	DWORD PTR _i$68338[ebp], 0
	jmp	SHORT $LN3@CObjectVec@2
$LN2@CObjectVec@2:
	mov	ecx, DWORD PTR _i$68338[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$68338[ebp], ecx
$LN3@CObjectVec@2:
	mov	edx, DWORD PTR _i$68338[ebp]
	cmp	edx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@CObjectVec@2
; Line 427
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68655[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T68655[ebp], 0
	je	SHORT $LN6@CObjectVec@2
	mov	eax, DWORD PTR _i$68338[ebp]
	push	eax
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ; CObjectVector<CProp>::operator[]
	push	eax
	mov	ecx, DWORD PTR $T68655[ebp]
	call	??0CProp@@QAE@ABU0@@Z
	mov	DWORD PTR tv85[ebp], eax
	jmp	SHORT $LN7@CObjectVec@2
$LN6@CObjectVec@2:
	mov	DWORD PTR tv85[ebp], 0
$LN7@CObjectVec@2:
	mov	ecx, DWORD PTR tv85[ebp]
	mov	DWORD PTR $T68654[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR $T68654[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ; CRecordVector<void *>::AddInReserved
	jmp	SHORT $LN2@CObjectVec@2
$LN4@CObjectVec@2:
; Line 428
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1:
	mov	eax, DWORD PTR $T68655[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-28]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z ENDP		; CObjectVector<CProp>::CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCProp@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCProp@@@@QBEIXZ PROC		; CObjectVector<CProp>::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCProp@@@@QBEIXZ ENDP		; CObjectVector<CProp>::Size
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z PROC	; CObjectVector<CProp>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z ENDP	; CObjectVector<CProp>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
_TEXT	ENDS
EXTRN	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z:PROC ; NWindows::NCOM::CPropVariant::CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CProp@@QAE@ABU0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CProp@@QAE@ABU0@@Z PROC				; CProp::CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	dl, BYTE PTR [ecx+4]
	mov	BYTE PTR [eax+4], dl
	mov	eax, DWORD PTR ___that$[ebp]
	add	eax, 8
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z ; NWindows::NCOM::CPropVariant::CPropVariant
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CProp@@QAE@ABU0@@Z ENDP				; CProp::CProp
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T68678 = -20						; size = 4
$T68677 = -16						; size = 4
_p$68353 = -12						; size = 4
_newCapacity$68352 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$68352[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$68352[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68677[ebp], eax
	mov	eax, DWORD PTR $T68677[ebp]
	mov	DWORD PTR _p$68353[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$68353[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T68678[ebp], edx
	mov	eax, DWORD PTR $T68678[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$68353[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$68352[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z
_TEXT	SEGMENT
$T68681 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z PROC	; CRecordVector<void *>::ConstructReserve, COMDAT
; _this$ = ecx
; Line 52
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 53
	cmp	DWORD PTR _size$[ebp], 0
	je	SHORT $LN2@ConstructR
; Line 55
	xor	ecx, ecx
	mov	eax, DWORD PTR _size$[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T68681[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T68681[ebp]
	mov	DWORD PTR [eax], ecx
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+8], eax
$LN2@ConstructR:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z ENDP	; CRecordVector<void *>::ConstructReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z PROC	; CRecordVector<void *>::AddInReserved, COMDAT
; _this$ = ecx
; Line 205
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 206
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 207
	mov	esp, ebp
	pop	ebp
	ret	4
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z ENDP	; CRecordVector<void *>::AddInReserved
_TEXT	ENDS
END
