; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Compress\ShrinkDecoder.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ ; NBitl::CBaseDecoder<CInBuffer>::GetProcessedSize
PUBLIC	?WriteByte@COutBuffer@@QAEXE@Z			; COutBuffer::WriteByte
PUBLIC	?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead
PUBLIC	?ReadBits@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CBaseDecoder<CInBuffer>::ReadBits
PUBLIC	?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream
PUBLIC	?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ	; NBitl::CBaseDecoder<CInBuffer>::Init
PUBLIC	?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z ; NBitl::CBaseDecoder<CInBuffer>::SetStream
PUBLIC	??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ	; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>
PUBLIC	??1COutBuffer@@QAE@XZ				; COutBuffer::~COutBuffer
PUBLIC	?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z ; NBitl::CBaseDecoder<CInBuffer>::Create
PUBLIC	??0COutBuffer@@QAE@XZ				; COutBuffer::COutBuffer
PUBLIC	??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ	; NBitl::CBaseDecoder<CInBuffer>::CBaseDecoder<CInBuffer>
PUBLIC	?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NShrink::CDecoder::CodeReal
EXTRN	?Flush@COutBuffer@@QAEJXZ:PROC			; COutBuffer::Flush
EXTRN	?GetProcessedSize@COutBuffer@@QBE_KXZ:PROC	; COutBuffer::GetProcessedSize
EXTRN	?Init@COutBuffer@@QAEXXZ:PROC			; COutBuffer::Init
EXTRN	?Create@COutBuffer@@QAE_NI@Z:PROC		; COutBuffer::Create
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
xdata$x	SEGMENT
__unwindtable$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1
__ehfuncinfo$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\compress\shrinkdecoder.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv381 = -232						; size = 8
$T66869 = -224						; size = 4
$T66868 = -220						; size = 4
$T66867 = -216						; size = 4
$T66866 = -212						; size = 4
$T66865 = -208						; size = 4
$T66864 = -204						; size = 4
___result__$66783 = -200				; size = 4
_packSize$66782 = -192					; size = 8
_nowPos$66780 = -176					; size = 8
_corectionIndex$66761 = -164				; size = 4
_cur$66760 = -160					; size = 4
_symbol$66735 = -156					; size = 4
_symbol$66729 = -152					; size = 4
_i$ = -148						; size = 4
_lastSymbol$ = -144					; size = 4
_needPrev$ = -137					; size = 1
_head$ = -136						; size = 4
_numBits$ = -132					; size = 4
_prevPos$ = -128					; size = 8
_outBuffer$ = -116					; size = 40
_inBuffer$ = -68					; size = 48
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_inStream$ = 8						; size = 4
_outStream$ = 12					; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
_progress$ = 24						; size = 4
?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z PROC ; NCompress::NShrink::CDecoder::CodeReal
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 220				; 000000dcH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-232]
	mov	ecx, 55					; 00000037H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 22
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 23
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??0COutBuffer@@QAE@XZ			; COutBuffer::COutBuffer
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 25
	push	1048576					; 00100000H
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z ; NBitl::CBaseDecoder<CInBuffer>::Create
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN52@CodeReal
; Line 26
	mov	DWORD PTR $T66864[ebp], -2147024882	; 8007000eH
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
	mov	eax, DWORD PTR $T66864[ebp]
	jmp	$LN53@CodeReal
$LN52@CodeReal:
; Line 27
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z ; NBitl::CBaseDecoder<CInBuffer>::SetStream
; Line 28
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CBaseDecoder<CInBuffer>::Init
; Line 30
	push	1048576					; 00100000H
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	?Create@COutBuffer@@QAE_NI@Z		; COutBuffer::Create
	movzx	edx, al
	test	edx, edx
	jne	SHORT $LN51@CodeReal
; Line 31
	mov	DWORD PTR $T66865[ebp], -2147024882	; 8007000eH
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
	mov	eax, DWORD PTR $T66865[ebp]
	jmp	$LN53@CodeReal
$LN51@CodeReal:
; Line 32
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream
; Line 33
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	?Init@COutBuffer@@QAEXXZ		; COutBuffer::Init
; Line 35
	mov	DWORD PTR _prevPos$[ebp], 0
	mov	DWORD PTR _prevPos$[ebp+4], 0
; Line 36
	mov	DWORD PTR _numBits$[ebp], 9
; Line 37
	mov	DWORD PTR _head$[ebp], 257		; 00000101H
; Line 38
	mov	BYTE PTR _needPrev$[ebp], 0
; Line 39
	mov	DWORD PTR _lastSymbol$[ebp], 0
; Line 42
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN50@CodeReal
$LN49@CodeReal:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN50@CodeReal:
	cmp	DWORD PTR _i$[ebp], 8192		; 00002000H
	jae	SHORT $LN48@CodeReal
; Line 43
	xor	edx, edx
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx+eax*2+8], dx
	jmp	SHORT $LN49@CodeReal
$LN48@CodeReal:
; Line 44
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN47@CodeReal
$LN46@CodeReal:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN47@CodeReal:
	cmp	DWORD PTR _i$[ebp], 8192		; 00002000H
	jae	SHORT $LN45@CodeReal
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _i$[ebp]
	mov	BYTE PTR [eax+16392], 0
	jmp	SHORT $LN46@CodeReal
$LN45@CodeReal:
; Line 46
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN44@CodeReal
$LN43@CodeReal:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN44@CodeReal:
	cmp	DWORD PTR _i$[ebp], 257			; 00000101H
	jge	SHORT $LN42@CodeReal
; Line 47
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+32776], 0
	jmp	SHORT $LN43@CodeReal
$LN42@CodeReal:
; Line 48
	jmp	SHORT $LN41@CodeReal
$LN40@CodeReal:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN41@CodeReal:
	cmp	DWORD PTR _i$[ebp], 8192		; 00002000H
	jae	SHORT $LN38@CodeReal
; Line 49
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+32776], 1
	jmp	SHORT $LN40@CodeReal
$LN38@CodeReal:
; Line 53
	mov	edx, DWORD PTR _numBits$[ebp]
	push	edx
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	?ReadBits@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CBaseDecoder<CInBuffer>::ReadBits
	mov	DWORD PTR _symbol$66729[ebp], eax
; Line 54
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN36@CodeReal
; Line 55
	jmp	$LN37@CodeReal
$LN36@CodeReal:
; Line 56
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _symbol$66729[ebp]
	movzx	edx, BYTE PTR [ecx+32776]
	test	edx, edx
	je	SHORT $LN35@CodeReal
; Line 57
	mov	DWORD PTR $T66866[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
	mov	eax, DWORD PTR $T66866[ebp]
	jmp	$LN53@CodeReal
$LN35@CodeReal:
; Line 58
	cmp	DWORD PTR _symbol$66729[ebp], 256	; 00000100H
	jne	$LN34@CodeReal
; Line 60
	mov	eax, DWORD PTR _numBits$[ebp]
	push	eax
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	?ReadBits@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEII@Z ; NBitl::CBaseDecoder<CInBuffer>::ReadBits
	mov	DWORD PTR _symbol$66735[ebp], eax
; Line 61
	cmp	DWORD PTR _symbol$66735[ebp], 1
	jne	SHORT $LN33@CodeReal
; Line 63
	cmp	DWORD PTR _numBits$[ebp], 13		; 0000000dH
	jge	SHORT $LN32@CodeReal
; Line 64
	mov	ecx, DWORD PTR _numBits$[ebp]
	add	ecx, 1
	mov	DWORD PTR _numBits$[ebp], ecx
$LN32@CodeReal:
; Line 65
	jmp	$LN31@CodeReal
$LN33@CodeReal:
; Line 66
	cmp	DWORD PTR _symbol$66735[ebp], 2
	jne	$LN30@CodeReal
; Line 68
	movzx	edx, BYTE PTR _needPrev$[ebp]
	test	edx, edx
	je	SHORT $LN29@CodeReal
; Line 69
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _head$[ebp]
	mov	BYTE PTR [eax+32775], 1
$LN29@CodeReal:
; Line 70
	mov	DWORD PTR _i$[ebp], 257			; 00000101H
	jmp	SHORT $LN28@CodeReal
$LN27@CodeReal:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN28@CodeReal:
	cmp	DWORD PTR _i$[ebp], 8192		; 00002000H
	jae	SHORT $LN26@CodeReal
; Line 71
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [edx+40968], 0
	jmp	SHORT $LN27@CodeReal
$LN26@CodeReal:
; Line 72
	mov	DWORD PTR _i$[ebp], 257			; 00000101H
	jmp	SHORT $LN25@CodeReal
$LN24@CodeReal:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN25@CodeReal:
	cmp	DWORD PTR _i$[ebp], 8192		; 00002000H
	jae	SHORT $LN23@CodeReal
; Line 73
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movzx	edx, BYTE PTR [ecx+32776]
	test	edx, edx
	jne	SHORT $LN22@CodeReal
; Line 74
	mov	eax, DWORD PTR _i$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, WORD PTR [ecx+eax*2+8]
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+edx+40968], 1
$LN22@CodeReal:
; Line 75
	jmp	SHORT $LN24@CodeReal
$LN23@CodeReal:
	mov	DWORD PTR _i$[ebp], 257			; 00000101H
	jmp	SHORT $LN21@CodeReal
$LN20@CodeReal:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN21@CodeReal:
	cmp	DWORD PTR _i$[ebp], 8192		; 00002000H
	jae	SHORT $LN19@CodeReal
; Line 76
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+40968]
	test	eax, eax
	jne	SHORT $LN18@CodeReal
; Line 77
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	BYTE PTR [ecx+32776], 1
$LN18@CodeReal:
; Line 78
	jmp	SHORT $LN20@CodeReal
$LN19@CodeReal:
	mov	DWORD PTR _head$[ebp], 257		; 00000101H
$LN17@CodeReal:
; Line 79
	cmp	DWORD PTR _head$[ebp], 8192		; 00002000H
	jae	SHORT $LN16@CodeReal
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _head$[ebp]
	movzx	eax, BYTE PTR [edx+32776]
	test	eax, eax
	jne	SHORT $LN16@CodeReal
; Line 80
	mov	ecx, DWORD PTR _head$[ebp]
	add	ecx, 1
	mov	DWORD PTR _head$[ebp], ecx
	jmp	SHORT $LN17@CodeReal
$LN16@CodeReal:
; Line 81
	cmp	DWORD PTR _head$[ebp], 8192		; 00002000H
	jae	SHORT $LN15@CodeReal
; Line 83
	mov	BYTE PTR _needPrev$[ebp], 1
; Line 84
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _head$[ebp]
	mov	BYTE PTR [edx+32776], 0
; Line 85
	mov	eax, DWORD PTR _head$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	dx, WORD PTR _lastSymbol$[ebp]
	mov	WORD PTR [ecx+eax*2+8], dx
; Line 86
	mov	eax, DWORD PTR _head$[ebp]
	add	eax, 1
	mov	DWORD PTR _head$[ebp], eax
$LN15@CodeReal:
; Line 89
	jmp	SHORT $LN31@CodeReal
$LN30@CodeReal:
; Line 90
	mov	DWORD PTR $T66867[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
	mov	eax, DWORD PTR $T66867[ebp]
	jmp	$LN53@CodeReal
$LN31@CodeReal:
; Line 91
	jmp	$LN38@CodeReal
$LN34@CodeReal:
; Line 93
	mov	ecx, DWORD PTR _symbol$66729[ebp]
	mov	DWORD PTR _cur$66760[ebp], ecx
; Line 94
	mov	DWORD PTR _i$[ebp], 0
; Line 95
	mov	DWORD PTR _corectionIndex$66761[ebp], -1
$LN13@CodeReal:
; Line 96
	cmp	DWORD PTR _cur$66760[ebp], 256		; 00000100H
	jb	SHORT $LN12@CodeReal
; Line 98
	mov	edx, DWORD PTR _head$[ebp]
	sub	edx, 1
	cmp	DWORD PTR _cur$66760[ebp], edx
	jne	SHORT $LN11@CodeReal
; Line 99
	mov	eax, DWORD PTR _i$[ebp]
	mov	DWORD PTR _corectionIndex$66761[ebp], eax
$LN11@CodeReal:
; Line 100
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _cur$66760[ebp]
	mov	al, BYTE PTR [edx+16392]
	mov	BYTE PTR [ecx+24584], al
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 101
	mov	edx, DWORD PTR _cur$66760[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, WORD PTR [eax+edx*2+8]
	mov	DWORD PTR _cur$66760[ebp], ecx
; Line 102
	jmp	SHORT $LN13@CodeReal
$LN12@CodeReal:
; Line 103
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	mov	al, BYTE PTR _cur$66760[ebp]
	mov	BYTE PTR [edx+24584], al
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
; Line 104
	movzx	edx, BYTE PTR _needPrev$[ebp]
	test	edx, edx
	je	SHORT $LN8@CodeReal
; Line 106
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR _head$[ebp]
	mov	cl, BYTE PTR _cur$66760[ebp]
	mov	BYTE PTR [eax+16391], cl
; Line 107
	cmp	DWORD PTR _corectionIndex$66761[ebp], 0
	jl	SHORT $LN8@CodeReal
; Line 108
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _corectionIndex$66761[ebp]
	mov	al, BYTE PTR _cur$66760[ebp]
	mov	BYTE PTR [edx+24584], al
$LN8@CodeReal:
; Line 110
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN6@CodeReal
; Line 111
	mov	ecx, DWORD PTR _i$[ebp]
	sub	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, DWORD PTR _i$[ebp]
	movzx	eax, BYTE PTR [edx+24584]
	push	eax
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	?WriteByte@COutBuffer@@QAEXE@Z		; COutBuffer::WriteByte
	jmp	SHORT $LN8@CodeReal
$LN6@CodeReal:
; Line 112
	cmp	DWORD PTR _head$[ebp], 8192		; 00002000H
	jae	SHORT $LN5@CodeReal
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _head$[ebp]
	movzx	edx, BYTE PTR [ecx+32776]
	test	edx, edx
	jne	SHORT $LN5@CodeReal
; Line 113
	mov	eax, DWORD PTR _head$[ebp]
	add	eax, 1
	mov	DWORD PTR _head$[ebp], eax
	jmp	SHORT $LN6@CodeReal
$LN5@CodeReal:
; Line 114
	cmp	DWORD PTR _head$[ebp], 8192		; 00002000H
	jae	SHORT $LN4@CodeReal
; Line 116
	mov	BYTE PTR _needPrev$[ebp], 1
; Line 117
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _head$[ebp]
	mov	BYTE PTR [ecx+32776], 0
; Line 118
	mov	edx, DWORD PTR _head$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	cx, WORD PTR _symbol$66729[ebp]
	mov	WORD PTR [eax+edx*2+8], cx
; Line 119
	mov	edx, DWORD PTR _head$[ebp]
	add	edx, 1
	mov	DWORD PTR _head$[ebp], edx
; Line 121
	jmp	SHORT $LN3@CodeReal
$LN4@CodeReal:
; Line 122
	mov	BYTE PTR _needPrev$[ebp], 0
$LN3@CodeReal:
; Line 123
	mov	eax, DWORD PTR _symbol$66729[ebp]
	mov	DWORD PTR _lastSymbol$[ebp], eax
; Line 125
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	?GetProcessedSize@COutBuffer@@QBE_KXZ	; COutBuffer::GetProcessedSize
	mov	DWORD PTR _nowPos$66780[ebp], eax
	mov	DWORD PTR _nowPos$66780[ebp+4], edx
; Line 126
	cmp	DWORD PTR _progress$[ebp], 0
	je	$LN2@CodeReal
	mov	ecx, DWORD PTR _nowPos$66780[ebp]
	sub	ecx, DWORD PTR _prevPos$[ebp]
	mov	edx, DWORD PTR _nowPos$66780[ebp+4]
	sbb	edx, DWORD PTR _prevPos$[ebp+4]
	mov	DWORD PTR tv381[ebp], ecx
	mov	DWORD PTR tv381[ebp+4], edx
	cmp	DWORD PTR tv381[ebp+4], 0
	ja	SHORT $LN58@CodeReal
	cmp	DWORD PTR tv381[ebp], 262144		; 00040000H
	jbe	$LN2@CodeReal
$LN58@CodeReal:
; Line 128
	mov	eax, DWORD PTR _nowPos$66780[ebp]
	mov	DWORD PTR _prevPos$[ebp], eax
	mov	ecx, DWORD PTR _nowPos$66780[ebp+4]
	mov	DWORD PTR _prevPos$[ebp+4], ecx
; Line 129
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ ; NBitl::CBaseDecoder<CInBuffer>::GetProcessedSize
	mov	DWORD PTR _packSize$66782[ebp], eax
	mov	DWORD PTR _packSize$66782[ebp+4], edx
; Line 130
	mov	esi, esp
	lea	edx, DWORD PTR _nowPos$66780[ebp]
	push	edx
	lea	eax, DWORD PTR _packSize$66782[ebp]
	push	eax
	mov	ecx, DWORD PTR _progress$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$66783[ebp], eax
	cmp	DWORD PTR ___result__$66783[ebp], 0
	je	SHORT $LN2@CodeReal
	mov	edx, DWORD PTR ___result__$66783[ebp]
	mov	DWORD PTR $T66868[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
	mov	eax, DWORD PTR $T66868[ebp]
	jmp	SHORT $LN53@CodeReal
$LN2@CodeReal:
; Line 132
	jmp	$LN38@CodeReal
$LN37@CodeReal:
; Line 133
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	?Flush@COutBuffer@@QAEJXZ		; COutBuffer::Flush
	mov	DWORD PTR $T66869[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	call	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	call	??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
	mov	eax, DWORD PTR $T66869[ebp]
$LN53@CodeReal:
; Line 134
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN65@CodeReal
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 232				; 000000e8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN65@CodeReal:
	DD	4
	DD	$LN64@CodeReal
$LN64@CodeReal:
	DD	-68					; ffffffbcH
	DD	48					; 00000030H
	DD	$LN59@CodeReal
	DD	-116					; ffffff8cH
	DD	40					; 00000028H
	DD	$LN60@CodeReal
	DD	-176					; ffffff50H
	DD	8
	DD	$LN61@CodeReal
	DD	-192					; ffffff40H
	DD	8
	DD	$LN62@CodeReal
$LN62@CodeReal:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN61@CodeReal:
	DB	110					; 0000006eH
	DB	111					; 0000006fH
	DB	119					; 00000077H
	DB	80					; 00000050H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
$LN60@CodeReal:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN59@CodeReal:
	DB	105					; 00000069H
	DB	110					; 0000006eH
	DB	66					; 00000042H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0:
	lea	ecx, DWORD PTR _inBuffer$[ebp]
	jmp	??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
__unwindfunclet$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1:
	lea	ecx, DWORD PTR _outBuffer$[ebp]
	jmp	??1COutBuffer@@QAE@XZ			; COutBuffer::~COutBuffer
__ehhandler$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-232]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ENDP ; NCompress::NShrink::CDecoder::CodeReal
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0COutBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0COutBuffer@@QAE@XZ PROC				; COutBuffer::COutBuffer, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\outbuffer.h
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+20], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+32], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0COutBuffer@@QAE@XZ ENDP				; COutBuffer::COutBuffer
_TEXT	ENDS
EXTRN	?Free@COutBuffer@@QAEXXZ:PROC			; COutBuffer::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1COutBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1COutBuffer@@QAE@XZ PROC				; COutBuffer::~COutBuffer, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@COutBuffer@@QAEXXZ		; COutBuffer::Free
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1COutBuffer@@QAE@XZ ENDP				; COutBuffer::~COutBuffer
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z PROC ; COutBuffer::SetStream, COMDAT
; _this$ = ecx
; Line 43
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ENDP ; COutBuffer::SetStream
_TEXT	ENDS
EXTRN	?FlushWithCheck@COutBuffer@@QAEXXZ:PROC		; COutBuffer::FlushWithCheck
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WriteByte@COutBuffer@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?WriteByte@COutBuffer@@QAEXE@Z PROC			; COutBuffer::WriteByte, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 50
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	dl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN2@WriteByte
; Line 52
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushWithCheck@COutBuffer@@QAEXXZ	; COutBuffer::FlushWithCheck
$LN2@WriteByte:
; Line 53
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WriteByte@COutBuffer@@QAEXE@Z ENDP			; COutBuffer::WriteByte
_TEXT	ENDS
PUBLIC	??0CInBuffer@@QAE@XZ				; CInBuffer::CInBuffer
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ PROC	; NBitl::CBaseDecoder<CInBuffer>::CBaseDecoder<CInBuffer>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CInBuffer@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ENDP	; NBitl::CBaseDecoder<CInBuffer>::CBaseDecoder<CInBuffer>
_TEXT	ENDS
PUBLIC	??1CInBuffer@@QAE@XZ				; CInBuffer::~CInBuffer
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ PROC	; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CInBuffer@@QAE@XZ			; CInBuffer::~CInBuffer
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE@XZ ENDP	; NBitl::CBaseDecoder<CInBuffer>::~CBaseDecoder<CInBuffer>
_TEXT	ENDS
EXTRN	?Free@CInBuffer@@QAEXXZ:PROC			; CInBuffer::Free
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CInBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CInBuffer@@QAE@XZ PROC				; CInBuffer::~CInBuffer, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\inbuffer.h
; Line 85
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Free@CInBuffer@@QAEXXZ			; CInBuffer::Free
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CInBuffer@@QAE@XZ ENDP				; CInBuffer::~CInBuffer
_TEXT	ENDS
EXTRN	??0CInBufferBase@@QAE@XZ:PROC			; CInBufferBase::CInBufferBase
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CInBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CInBuffer@@QAE@XZ PROC				; CInBuffer::CInBuffer, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CInBufferBase@@QAE@XZ		; CInBufferBase::CInBufferBase
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CInBuffer@@QAE@XZ ENDP				; CInBuffer::CInBuffer
_TEXT	ENDS
PUBLIC	?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NShrink::CDecoder::Code
PUBLIC	??_R0?AUCInBufferException@@@8			; CInBufferException `RTTI Type Descriptor'
PUBLIC	??_R0?AUCOutBufferException@@@8			; COutBufferException `RTTI Type Descriptor'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0?AUCOutBufferException@@@8
; File c:\workspace\7z1505-src\cpp\7zip\compress\shrinkdecoder.cpp
_DATA	SEGMENT
??_R0?AUCOutBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; COutBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCOutBufferException@@', 00H
_DATA	ENDS
;	COMDAT ??_R0?AUCInBufferException@@@8
_DATA	SEGMENT
??_R0?AUCInBufferException@@@8 DD FLAT:??_7type_info@@6B@ ; CInBufferException `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUCInBufferException@@', 00H
_DATA	ENDS
xdata$x	SEGMENT
__unwindtable$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z DD 00H
	DD	00H
	DD	01H
	DD	03H
	DD	FLAT:__catchsym$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$4
__ehfuncinfo$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__catchsym$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$4 DD 09H
	DD	FLAT:??_R0?AUCInBufferException@@@8
	DD	0ffffffe8H
	DD	FLAT:__catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0
	DD	09H
	DD	FLAT:??_R0?AUCOutBufferException@@@8
	DD	0ffffffdcH
	DD	FLAT:__catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1
	DD	040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv84 = -56						; size = 4
$T66917 = -52						; size = 4
$T66916 = -48						; size = 4
$T66915 = -44						; size = 4
_e$66805 = -36						; size = 4
_e$66802 = -24						; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_inStream$ = 12						; size = 4
_outStream$ = 16					; size = 4
_inSize$ = 20						; size = 4
_outSize$ = 24						; size = 4
_progress$ = 28						; size = 4
?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z PROC ; NCompress::NShrink::CDecoder::Code
; Line 138
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 40					; 00000028H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-56]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 139
	mov	DWORD PTR __$EHRec$[ebp+12], 0
	mov	eax, DWORD PTR _progress$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outSize$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?CodeReal@CDecoder@NShrink@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ; NCompress::NShrink::CDecoder::CodeReal
	mov	DWORD PTR tv84[ebp], eax
	mov	eax, DWORD PTR tv84[ebp]
	jmp	SHORT $LN2@Code
__catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0:
; Line 140
	mov	edx, DWORD PTR _e$66802[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T66915[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN9@Code
	ret	0
	mov	eax, __tryend$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
	ret	0
__catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1:
; Line 141
	mov	ecx, DWORD PTR _e$66805[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T66916[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN11@Code
	ret	0
	mov	eax, __tryend$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
	ret	0
__catch$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2:
; Line 142
	mov	DWORD PTR $T66917[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN13@Code
	ret	0
	mov	eax, __tryend$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3
	ret	0
__tryend$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$3:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN12@Code
$LN13@Code:
	mov	eax, DWORD PTR $T66917[ebp]
	jmp	SHORT $LN2@Code
$LN12@Code:
	jmp	SHORT $LN10@Code
$LN11@Code:
; Line 141
	mov	eax, DWORD PTR $T66916[ebp]
	jmp	SHORT $LN2@Code
$LN10@Code:
	jmp	SHORT $LN2@Code
$LN9@Code:
; Line 140
	mov	eax, DWORD PTR $T66915[ebp]
$LN2@Code:
; Line 143
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@Code
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 56					; 00000038H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
	npad	1
$LN21@Code:
	DD	2
	DD	$LN20@Code
$LN20@Code:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@Code
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN18@Code
$LN18@Code:
	DB	101					; 00000065H
	DB	0
$LN17@Code:
	DB	101					; 00000065H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-60]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Code@CDecoder@NShrink@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z ENDP ; NCompress::NShrink::CDecoder::Code
EXTRN	?Create@CInBuffer@@QAE_NI@Z:PROC		; CInBuffer::Create
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_bufSize$ = 8						; size = 4
?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z PROC ; NBitl::CBaseDecoder<CInBuffer>::Create, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\compress\bitldecoder.h
; Line 32
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _bufSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Create@CInBuffer@@QAE_NI@Z		; CInBuffer::Create
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Create@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAE_NI@Z ENDP ; NBitl::CBaseDecoder<CInBuffer>::Create
_TEXT	ENDS
PUBLIC	?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_inStream$ = 8						; size = 4
?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z PROC ; NBitl::CBaseDecoder<CInBuffer>::SetStream, COMDAT
; _this$ = ecx
; Line 33
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ; CInBufferBase::SetStream
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXPAUISequentialInStream@@@Z ENDP ; NBitl::CBaseDecoder<CInBuffer>::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z PROC ; CInBufferBase::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\inbuffer.h
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+12], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z ENDP ; CInBufferBase::SetStream
_TEXT	ENDS
EXTRN	?Init@CInBufferBase@@QAEXXZ:PROC		; CInBufferBase::Init
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ PROC	; NBitl::CBaseDecoder<CInBuffer>::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\compress\bitldecoder.h
; Line 35
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 36
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Init@CInBufferBase@@QAEXXZ		; CInBufferBase::Init
; Line 37
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 32			; 00000020H
; Line 38
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
; Line 39
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ ENDP	; NBitl::CBaseDecoder<CInBuffer>::Init
_TEXT	ENDS
PUBLIC	?GetProcessedSize@CInBufferBase@@QBE_KXZ	; CInBufferBase::GetProcessedSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ PROC ; NBitl::CBaseDecoder<CInBuffer>::GetProcessedSize, COMDAT
; _this$ = ecx
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?GetProcessedSize@CInBufferBase@@QBE_KXZ ; CInBufferBase::GetProcessedSize
	mov	ecx, DWORD PTR _this$[ebp]
	mov	esi, 32					; 00000020H
	sub	esi, DWORD PTR [ecx]
	shr	esi, 3
	xor	ecx, ecx
	sub	eax, esi
	sbb	edx, ecx
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetProcessedSize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_KXZ ENDP ; NBitl::CBaseDecoder<CInBuffer>::GetProcessedSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetProcessedSize@CInBufferBase@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetProcessedSize@CInBufferBase@@QBE_KXZ PROC		; CInBufferBase::GetProcessedSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\inbuffer.h
; Line 42
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+32]
	xor	esi, esi
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+16]
	adc	esi, DWORD PTR [edx+20]
	mov	eax, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	sub	eax, DWORD PTR [edx+8]
	cdq
	add	ecx, eax
	adc	esi, edx
	mov	eax, ecx
	mov	edx, esi
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?GetProcessedSize@CInBufferBase@@QBE_KXZ ENDP		; CInBufferBase::GetProcessedSize
_TEXT	ENDS
PUBLIC	?Normalize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CBaseDecoder<CInBuffer>::Normalize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReadBits@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEII@Z
_TEXT	SEGMENT
_res$ = -8						; size = 4
_this$ = -4						; size = 4
_numBits$ = 8						; size = 4
?ReadBits@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEII@Z PROC ; NBitl::CBaseDecoder<CInBuffer>::ReadBits, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\compress\bitldecoder.h
; Line 53
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Normalize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ ; NBitl::CBaseDecoder<CInBuffer>::Normalize
; Line 55
	mov	eax, 1
	mov	ecx, DWORD PTR _numBits$[ebp]
	shl	eax, cl
	sub	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	and	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _res$[ebp], eax
; Line 56
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, DWORD PTR _numBits$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 57
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _numBits$[ebp]
	shr	eax, cl
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
; Line 58
	mov	eax, DWORD PTR _res$[ebp]
; Line 59
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ReadBits@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEII@Z ENDP ; NBitl::CBaseDecoder<CInBuffer>::ReadBits
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ
_TEXT	SEGMENT
tv80 = -8						; size = 4
_this$ = -4						; size = 4
?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ PROC ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead, COMDAT
; _this$ = ecx
; Line 62
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 63
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+40], 4
	ja	SHORT $LN3@ExtraBitsW
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, 32					; 00000020H
	sub	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+40]
	shl	ecx, 3
	cmp	edx, ecx
	jb	SHORT $LN3@ExtraBitsW
	mov	DWORD PTR tv80[ebp], 0
	jmp	SHORT $LN4@ExtraBitsW
$LN3@ExtraBitsW:
	mov	DWORD PTR tv80[ebp], 1
$LN4@ExtraBitsW:
	mov	al, BYTE PTR tv80[ebp]
; Line 64
	mov	esp, ebp
	pop	ebp
	ret	0
?ExtraBitsWereRead@?$CBaseDecoder@VCInBuffer@@@NBitl@@QBE_NXZ ENDP ; NBitl::CBaseDecoder<CInBuffer>::ExtraBitsWereRead
_TEXT	ENDS
PUBLIC	?ReadByte@CInBufferBase@@QAEEXZ			; CInBufferBase::ReadByte
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Normalize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Normalize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ PROC ; NBitl::CBaseDecoder<CInBuffer>::Normalize, COMDAT
; _this$ = ecx
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 48
	jmp	SHORT $LN3@Normalize
$LN2@Normalize:
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	sub	ecx, 8
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
$LN3@Normalize:
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 8
	jb	SHORT $LN4@Normalize
; Line 49
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?ReadByte@CInBufferBase@@QAEEXZ		; CInBufferBase::ReadByte
	movzx	edx, al
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, 32					; 00000020H
	sub	ecx, DWORD PTR [eax]
	shl	edx, cl
	mov	ecx, DWORD PTR _this$[ebp]
	or	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	jmp	SHORT $LN2@Normalize
$LN4@Normalize:
; Line 50
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Normalize@?$CBaseDecoder@VCInBuffer@@@NBitl@@QAEXXZ ENDP ; NBitl::CBaseDecoder<CInBuffer>::Normalize
_TEXT	ENDS
EXTRN	?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ:PROC ; CInBufferBase::ReadByte_FromNewBlock
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReadByte@CInBufferBase@@QAEEXZ
_TEXT	SEGMENT
tv70 = -5						; size = 1
_this$ = -4						; size = 4
?ReadByte@CInBufferBase@@QAEEXZ PROC			; CInBufferBase::ReadByte, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\inbuffer.h
; Line 72
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 73
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax]
	cmp	edx, DWORD PTR [ecx+4]
	jb	SHORT $LN1@ReadByte
; Line 74
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ ; CInBufferBase::ReadByte_FromNewBlock
	jmp	SHORT $LN2@ReadByte
$LN1@ReadByte:
; Line 75
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR tv70[ebp], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	al, BYTE PTR tv70[ebp]
$LN2@ReadByte:
; Line 76
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReadByte@CInBufferBase@@QAEEXZ ENDP			; CInBufferBase::ReadByte
_TEXT	ENDS
END
