; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\LzmaHandler.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_kProps	DB	07H
	DB	08H
	DB	016H
_kArcProps DB	04aH
$SG70061 DB	'BCJ ', 00H
	ORG $+3
$SG70062 DB	'LZMA:', 00H
	ORG $+2
$SG70347 DB	'lzma', 00H
	ORG $+3
$SG70348 DB	'lzma', 00H
	ORG $+3
_g_ArcInfo DW	041H
	DB	0aH
	DB	00H
	DW	00H
	ORG $+2
	DD	00H
	DD	FLAT:$SG70347
	DD	FLAT:$SG70348
	DD	00H
	DD	FLAT:?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ
	DD	00H
	DD	FLAT:_IsArc_Lzma@8
$SG70393 DB	'lzma86', 00H
	ORG $+1
$SG70394 DB	'lzma86', 00H
	ORG $+1
_g_ArcInfo DW	01H
	DB	0bH
	DB	00H
	DW	00H
	ORG $+2
	DD	00H
	DD	FLAT:$SG70393
	DD	FLAT:$SG70394
	DD	00H
	DD	FLAT:?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ
	DD	00H
	DD	FLAT:_IsArc_Lzma86@8
CONST	ENDS
PUBLIC	?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ	; NArchive::NLzma::CHeader::HasSize
PUBLIC	?Parse@CHeader@NLzma@NArchive@@QAE_NPBE_N@Z	; NArchive::NLzma::CHeader::Parse
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\lzmahandler.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
tv128 = -20						; size = 4
tv150 = -16						; size = 4
_i$69670 = -12						; size = 4
_sig$ = -8						; size = 4
_this$ = -4						; size = 4
_buf$ = 8						; size = 4
_isThereFilter$ = 12					; size = 1
?Parse@CHeader@NLzma@NArchive@@QAE_NPBE_N@Z PROC	; NArchive::NLzma::CHeader::Parse
; _this$ = ecx
; Line 62
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 63
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+8], 0
; Line 64
	movzx	ecx, BYTE PTR _isThereFilter$[ebp]
	test	ecx, ecx
	je	SHORT $LN4@Parse
; Line 65
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _buf$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR [edx+8], cl
$LN4@Parse:
; Line 66
	movzx	edx, BYTE PTR _isThereFilter$[ebp]
	neg	edx
	sbb	edx, edx
	neg	edx
	add	edx, DWORD PTR _buf$[ebp]
	mov	DWORD PTR _sig$[ebp], edx
; Line 67
	mov	DWORD PTR _i$69670[ebp], 0
	jmp	SHORT $LN3@Parse
$LN2@Parse:
	mov	eax, DWORD PTR _i$69670[ebp]
	add	eax, 1
	mov	DWORD PTR _i$69670[ebp], eax
$LN3@Parse:
	cmp	DWORD PTR _i$69670[ebp], 5
	jge	SHORT $LN1@Parse
; Line 68
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR _i$69670[ebp]
	mov	edx, DWORD PTR _sig$[ebp]
	add	edx, DWORD PTR _i$69670[ebp]
	mov	al, BYTE PTR [edx]
	mov	BYTE PTR [ecx+9], al
	jmp	SHORT $LN2@Parse
$LN1@Parse:
; Line 69
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _sig$[ebp]
	mov	eax, DWORD PTR [edx+5]
	mov	DWORD PTR [ecx], eax
	mov	edx, DWORD PTR [edx+9]
	mov	DWORD PTR [ecx+4], edx
; Line 74
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	cmp	ecx, 225				; 000000e1H
	jge	SHORT $LN7@Parse
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+8]
	cmp	eax, 2
	jge	SHORT $LN7@Parse
	mov	ecx, DWORD PTR _this$[ebp]
	call	?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ ; NArchive::NLzma::CHeader::HasSize
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN8@Parse
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv150[ebp], edx
	mov	eax, DWORD PTR tv150[ebp]
	cmp	DWORD PTR [eax+4], 16777216		; 01000000H
	ja	SHORT $LN7@Parse
	jb	SHORT $LN8@Parse
	mov	ecx, DWORD PTR tv150[ebp]
	cmp	DWORD PTR [ecx], 0
	jae	SHORT $LN7@Parse
$LN8@Parse:
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 10					; 0000000aH
	push	edx
	call	?CheckDicSize@NLzma@NArchive@@YG_NPBE@Z	; NArchive::NLzma::CheckDicSize
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@Parse
	mov	DWORD PTR tv128[ebp], 1
	jmp	SHORT $LN9@Parse
$LN7@Parse:
	mov	DWORD PTR tv128[ebp], 0
$LN9@Parse:
	mov	al, BYTE PTR tv128[ebp]
; Line 75
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Parse@CHeader@NLzma@NArchive@@QAE_NPBE_N@Z ENDP	; NArchive::NLzma::CHeader::Parse
; Function compile flags: /Odtp /RTCsu
_i$69630 = -8						; size = 4
_dicSize$ = -4						; size = 4
_p$ = 8							; size = 4
?CheckDicSize@NLzma@NArchive@@YG_NPBE@Z PROC		; NArchive::NLzma::CheckDicSize
; Line 28
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 29
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _dicSize$[ebp], ecx
; Line 30
	cmp	DWORD PTR _dicSize$[ebp], 1
	jne	SHORT $LN6@CheckDicSi
; Line 31
	mov	al, 1
	jmp	SHORT $LN7@CheckDicSi
$LN6@CheckDicSi:
; Line 32
	mov	DWORD PTR _i$69630[ebp], 0
	jmp	SHORT $LN5@CheckDicSi
$LN4@CheckDicSi:
	mov	edx, DWORD PTR _i$69630[ebp]
	add	edx, 1
	mov	DWORD PTR _i$69630[ebp], edx
$LN5@CheckDicSi:
	cmp	DWORD PTR _i$69630[ebp], 30		; 0000001eH
	ja	SHORT $LN3@CheckDicSi
; Line 33
	mov	eax, 2
	mov	ecx, DWORD PTR _i$69630[ebp]
	shl	eax, cl
	cmp	DWORD PTR _dicSize$[ebp], eax
	je	SHORT $LN1@CheckDicSi
	mov	edx, 3
	mov	ecx, DWORD PTR _i$69630[ebp]
	shl	edx, cl
	cmp	DWORD PTR _dicSize$[ebp], edx
	jne	SHORT $LN2@CheckDicSi
$LN1@CheckDicSi:
; Line 34
	mov	al, 1
	jmp	SHORT $LN7@CheckDicSi
$LN2@CheckDicSi:
; Line 35
	jmp	SHORT $LN4@CheckDicSi
$LN3@CheckDicSi:
	xor	eax, eax
	cmp	DWORD PTR _dicSize$[ebp], -1
	sete	al
$LN7@CheckDicSi:
; Line 36
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckDicSize@NLzma@NArchive@@YG_NPBE@Z ENDP		; NArchive::NLzma::CheckDicSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv65 = -12						; size = 4
tv68 = -8						; size = 4
_this$ = -4						; size = 4
?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ PROC		; NArchive::NLzma::CHeader::HasSize, COMDAT
; _this$ = ecx
; Line 57
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv68[ebp], eax
	mov	ecx, DWORD PTR tv68[ebp]
	mov	edx, DWORD PTR tv68[ebp]
	mov	eax, DWORD PTR [ecx]
	and	eax, DWORD PTR [edx+4]
	cmp	eax, -1
	je	SHORT $LN3@HasSize
	mov	DWORD PTR tv65[ebp], 1
	jmp	SHORT $LN4@HasSize
$LN3@HasSize:
	mov	DWORD PTR tv65[ebp], 0
$LN4@HasSize:
	mov	al, BYTE PTR tv65[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ ENDP		; NArchive::NLzma::CHeader::HasSize
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=
PUBLIC	??0CBcjCoder@@QAE@H@Z				; CBcjCoder::CBcjCoder
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
PUBLIC	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ	; CMyComPtr<ISequentialOutStream>::operator!
PUBLIC	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
PUBLIC	??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ	; CMyComPtr<ICompressCoder>::operator!
PUBLIC	?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z ; NArchive::NLzma::CDecoder::Create
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??0CFilterCoder@@QAE@_N@Z:PROC			; CFilterCoder::CFilterCoder
EXTRN	??0CDecoder@NLzma@NCompress@@QAE@XZ:PROC	; NCompress::NLzma::CDecoder::CDecoder
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
xdata$x	SEGMENT
__unwindtable$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$3
__ehfuncinfo$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv166 = -72						; size = 4
tv167 = -68						; size = 4
tv158 = -64						; size = 4
tv134 = -60						; size = 4
tv77 = -56						; size = 4
$T70810 = -52						; size = 4
$T70809 = -48						; size = 4
$T70806 = -44						; size = 4
$T70805 = -40						; size = 4
$T70802 = -36						; size = 4
$T70801 = -32						; size = 4
_coder$69767 = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_filteredMode$ = 8					; size = 1
_inStream$ = 12						; size = 4
?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z PROC ; NArchive::NLzma::CDecoder::Create
; _this$ = ecx
; Line 99
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 60					; 0000003cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-72]
	mov	ecx, 15					; 0000000fH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 100
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ; CMyComPtr<ICompressCoder>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Create
; Line 102
	push	216					; 000000d8H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70802[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T70802[ebp], 0
	je	SHORT $LN6@Create
	mov	ecx, DWORD PTR $T70802[ebp]
	call	??0CDecoder@NLzma@NCompress@@QAE@XZ	; NCompress::NLzma::CDecoder::CDecoder
	mov	DWORD PTR tv77[ebp], eax
	jmp	SHORT $LN7@Create
$LN6@Create:
	mov	DWORD PTR tv77[ebp], 0
$LN7@Create:
	mov	ecx, DWORD PTR tv77[ebp]
	mov	DWORD PTR $T70801[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T70801[ebp]
	mov	DWORD PTR [edx+12], eax
; Line 103
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	BYTE PTR [edx+208], 1
; Line 104
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ; CMyComPtr<ICompressCoder>::operator=
$LN3@Create:
; Line 107
	movzx	edx, BYTE PTR _filteredMode$[ebp]
	test	edx, edx
	je	$LN2@Create
; Line 109
	mov	ecx, DWORD PTR _this$[ebp]
	call	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!
	movzx	eax, al
	test	eax, eax
	je	$LN2@Create
; Line 111
	push	152					; 00000098H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70806[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T70806[ebp], 0
	je	SHORT $LN8@Create
	push	0
	mov	ecx, DWORD PTR $T70806[ebp]
	call	??0CFilterCoder@@QAE@_N@Z		; CFilterCoder::CFilterCoder
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN9@Create
$LN8@Create:
	mov	DWORD PTR tv134[ebp], 0
$LN9@Create:
	mov	ecx, DWORD PTR tv134[ebp]
	mov	DWORD PTR $T70805[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T70805[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 112
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	push	edx
	lea	ecx, DWORD PTR _coder$69767[ebp]
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 113
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70810[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	cmp	DWORD PTR $T70810[ebp], 0
	je	SHORT $LN10@Create
	push	0
	mov	ecx, DWORD PTR $T70810[ebp]
	call	??0CBcjCoder@@QAE@H@Z			; CBcjCoder::CBcjCoder
	mov	DWORD PTR tv158[ebp], eax
	jmp	SHORT $LN11@Create
$LN10@Create:
	mov	DWORD PTR tv158[ebp], 0
$LN11@Create:
	mov	eax, DWORD PTR tv158[ebp]
	mov	DWORD PTR $T70809[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	mov	ecx, DWORD PTR $T70809[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+4]
	add	ecx, 148				; 00000094H
	call	??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ; CMyComPtr<ICompressFilter>::operator=
; Line 114
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv167[ebp], ecx
	cmp	DWORD PTR tv167[ebp], 0
	je	SHORT $LN12@Create
	mov	edx, DWORD PTR tv167[ebp]
	add	edx, 24					; 00000018H
	mov	DWORD PTR tv166[ebp], edx
	jmp	SHORT $LN13@Create
$LN12@Create:
	mov	DWORD PTR tv166[ebp], 0
$LN13@Create:
	mov	eax, DWORD PTR tv166[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 115
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _coder$69767[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
$LN2@Create:
; Line 118
	mov	esi, esp
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	add	edx, 16					; 00000010H
	mov	eax, DWORD PTR [eax+16]
	push	edx
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 119
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN21@Create
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 72					; 00000048H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN21@Create:
	DD	1
	DD	$LN20@Create
$LN20@Create:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN18@Create
$LN18@Create:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$0:
	mov	eax, DWORD PTR $T70802[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$1:
	mov	eax, DWORD PTR $T70806[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$2:
	lea	ecx, DWORD PTR _coder$69767[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z$3:
	mov	eax, DWORD PTR $T70810[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-72]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z ENDP ; NArchive::NLzma::CDecoder::Create
PUBLIC	??_7CBcjCoder@@6B@				; CBcjCoder::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ICompressFilter@@QAE@XZ			; ICompressFilter::ICompressFilter
PUBLIC	??_R4CBcjCoder@@6B@				; CBcjCoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBcjCoder@@@8				; CBcjCoder `RTTI Type Descriptor'
PUBLIC	??_R3CBcjCoder@@8				; CBcjCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBcjCoder@@8				; CBcjCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBcjCoder@@8			; CBcjCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICompressFilter@@8		; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressFilter@@@8			; ICompressFilter `RTTI Type Descriptor'
PUBLIC	??_R3ICompressFilter@@8				; ICompressFilter::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressFilter@@8				; ICompressFilter::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CBcjCoder@@UAGJABU_GUID@@PAPAX@Z ; CBcjCoder::QueryInterface
PUBLIC	?AddRef@CBcjCoder@@UAGKXZ			; CBcjCoder::AddRef
PUBLIC	?Release@CBcjCoder@@UAGKXZ			; CBcjCoder::Release
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?Init@CBcjCoder@@UAGJXZ:PROC			; CBcjCoder::Init
EXTRN	?Filter@CBcjCoder@@UAGIPAEI@Z:PROC		; CBcjCoder::Filter
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
; File c:\workspace\7z1505-src\cpp\7zip\compress\bcjcoder.h
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressFilter@@8
rdata$r	SEGMENT
??_R2ICompressFilter@@8 DD FLAT:??_R1A@?0A@EA@ICompressFilter@@8 ; ICompressFilter::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressFilter@@8
rdata$r	SEGMENT
??_R3ICompressFilter@@8 DD 00H				; ICompressFilter::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressFilter@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressFilter@@@8
_DATA	SEGMENT
??_R0?AUICompressFilter@@@8 DD FLAT:??_7type_info@@6B@	; ICompressFilter `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressFilter@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressFilter@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressFilter@@8 DD FLAT:??_R0?AUICompressFilter@@@8 ; ICompressFilter::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressFilter@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBcjCoder@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBcjCoder@@8 DD FLAT:??_R0?AVCBcjCoder@@@8 ; CBcjCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBcjCoder@@8
rdata$r	ENDS
;	COMDAT ??_R2CBcjCoder@@8
rdata$r	SEGMENT
??_R2CBcjCoder@@8 DD FLAT:??_R1A@?0A@EA@CBcjCoder@@8	; CBcjCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressFilter@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CBcjCoder@@8
rdata$r	SEGMENT
??_R3CBcjCoder@@8 DD 00H				; CBcjCoder::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CBcjCoder@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBcjCoder@@@8
_DATA	SEGMENT
??_R0?AVCBcjCoder@@@8 DD FLAT:??_7type_info@@6B@	; CBcjCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBcjCoder@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBcjCoder@@6B@
rdata$r	SEGMENT
??_R4CBcjCoder@@6B@ DD 00H				; CBcjCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBcjCoder@@@8
	DD	FLAT:??_R3CBcjCoder@@8
rdata$r	ENDS
;	COMDAT ??_7CBcjCoder@@6B@
CONST	SEGMENT
??_7CBcjCoder@@6B@ DD FLAT:??_R4CBcjCoder@@6B@		; CBcjCoder::`vftable'
	DD	FLAT:?QueryInterface@CBcjCoder@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBcjCoder@@UAGKXZ
	DD	FLAT:?Release@CBcjCoder@@UAGKXZ
	DD	FLAT:?Init@CBcjCoder@@UAGJXZ
	DD	FLAT:?Filter@CBcjCoder@@UAGIPAEI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CBcjCoder@@QAE@H@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_encode$ = 8						; size = 4
??0CBcjCoder@@QAE@H@Z PROC				; CBcjCoder::CBcjCoder, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressFilter@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBcjCoder@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _encode$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CBcjCoder@@QAE@H@Z ENDP				; CBcjCoder::CBcjCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CBcjCoder@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CBcjCoder@@UAGJABU_GUID@@PAPAX@Z PROC	; CBcjCoder::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\bcjcoder.h
; Line 20
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter
$LN1@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBcjCoder@@UAGJABU_GUID@@PAPAX@Z ENDP	; CBcjCoder::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBcjCoder@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBcjCoder@@UAGKXZ PROC				; CBcjCoder::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\bcjcoder.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBcjCoder@@UAGKXZ ENDP				; CBcjCoder::AddRef
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CBcjCoder@@UAGKXZ
_TEXT	SEGMENT
tv70 = -8						; size = 4
$T70845 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBcjCoder@@UAGKXZ PROC				; CBcjCoder::Release, COMDAT
; Line 20
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T70845[ebp], edx
	mov	eax, DWORD PTR $T70845[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	xor	eax, eax
$LN2@Release:
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBcjCoder@@UAGKXZ ENDP				; CBcjCoder::Release
_TEXT	ENDS
PUBLIC	??_7ICompressFilter@@6B@			; ICompressFilter::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ICompressFilter@@6B@			; ICompressFilter::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ICompressFilter@@6B@
rdata$r	SEGMENT
??_R4ICompressFilter@@6B@ DD 00H			; ICompressFilter::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressFilter@@@8
	DD	FLAT:??_R3ICompressFilter@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressFilter@@6B@
CONST	SEGMENT
??_7ICompressFilter@@6B@ DD FLAT:??_R4ICompressFilter@@6B@ ; ICompressFilter::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressFilter@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressFilter@@QAE@XZ PROC				; ICompressFilter::ICompressFilter, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressFilter@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressFilter@@QAE@XZ ENDP				; ICompressFilter::ICompressFilter
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	?ReleaseInStream@CDecoder@NLzma@NArchive@@QAEXXZ ; NArchive::NLzma::CDecoder::ReleaseInStream
PUBLIC	??1CDecoder@NLzma@NArchive@@QAE@XZ		; NArchive::NLzma::CDecoder::~CDecoder
xdata$x	SEGMENT
__unwindtable$??1CDecoder@NLzma@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CDecoder@NLzma@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CDecoder@NLzma@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CDecoder@NLzma@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CDecoder@NLzma@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CDecoder@NLzma@NArchive@@QAE@XZ PROC			; NArchive::NLzma::CDecoder::~CDecoder
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\lzmahandler.cpp
; Line 122
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CDecoder@NLzma@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 123
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReleaseInStream@CDecoder@NLzma@NArchive@@QAEXXZ ; NArchive::NLzma::CDecoder::ReleaseInStream
; Line 124
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$??1CDecoder@NLzma@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$??1CDecoder@NLzma@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__ehhandler$??1CDecoder@NLzma@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CDecoder@NLzma@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CDecoder@NLzma@NArchive@@QAE@XZ ENDP			; NArchive::NLzma::CDecoder::~CDecoder
PUBLIC	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReleaseInStream@CDecoder@NLzma@NArchive@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReleaseInStream@CDecoder@NLzma@NArchive@@QAEXXZ PROC	; NArchive::NLzma::CDecoder::ReleaseInStream, COMDAT
; _this$ = ecx
; Line 92
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
	test	eax, eax
	je	SHORT $LN2@ReleaseInS
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 16					; 00000010H
	mov	ecx, DWORD PTR [ecx+16]
	mov	esi, esp
	push	eax
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@ReleaseInS:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReleaseInStream@CDecoder@NLzma@NArchive@@QAEXXZ ENDP	; NArchive::NLzma::CDecoder::ReleaseInStream
_TEXT	ENDS
PUBLIC	?GetOutputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ ; NCompress::NLzma::CDecoder::GetOutputProcessedSize
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator->
PUBLIC	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
PUBLIC	??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator!
PUBLIC	??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetDecoderProperties2>
PUBLIC	??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator&
PUBLIC	??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>
PUBLIC	?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NArchive::NLzma::CDecoder::Code
EXTRN	?CodeResume@CDecoder@NLzma@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z:PROC ; NCompress::NLzma::CDecoder::CodeResume
EXTRN	_IID_ICompressSetDecoderProperties2:BYTE
xdata$x	SEGMENT
__unwindtable$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0
__ehfuncinfo$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv290 = -88						; size = 4
tv287 = -84						; size = 8
tv83 = -76						; size = 4
$T70862 = -72						; size = 4
$T70861 = -68						; size = 4
___result__$69810 = -64					; size = 4
_res2$69807 = -60					; size = 4
_res2$69804 = -56					; size = 4
_res$ = -52						; size = 4
_Size$ = -48						; size = 4
___result__$69799 = -44					; size = 4
___result__$69797 = -40					; size = 4
_filteredMode$ = -33					; size = 1
___result__$69792 = -32					; size = 4
_setDecoderProperties$69784 = -24			; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_header$ = 8						; size = 4
_outStream$ = 12					; size = 4
_progress$ = 16						; size = 4
?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z PROC ; NArchive::NLzma::CDecoder::Code
; _this$ = ecx
; Line 128
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 129
	mov	eax, DWORD PTR _header$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	cmp	ecx, 1
	jle	SHORT $LN12@Code
; Line 130
	mov	eax, -2147467263			; 80004001H
	jmp	$LN13@Code
$LN12@Code:
; Line 133
	lea	ecx, DWORD PTR _setDecoderProperties$69784[ebp]
	call	??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 134
	lea	ecx, DWORD PTR _setDecoderProperties$69784[ebp]
	call	??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator&
	push	eax
	push	OFFSET _IID_ICompressSetDecoderProperties2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetDecoderProperties2>
; Line 135
	lea	ecx, DWORD PTR _setDecoderProperties$69784[ebp]
	call	??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN11@Code
; Line 136
	mov	DWORD PTR $T70861[ebp], -2147467263	; 80004001H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _setDecoderProperties$69784[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	eax, DWORD PTR $T70861[ebp]
	jmp	$LN13@Code
$LN11@Code:
; Line 137
	lea	ecx, DWORD PTR _setDecoderProperties$69784[ebp]
	call	??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::operator->
	mov	DWORD PTR tv83[ebp], eax
	mov	esi, esp
	push	5
	mov	eax, DWORD PTR _header$[ebp]
	add	eax, 9
	push	eax
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	mov	edx, DWORD PTR tv83[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$69792[ebp], eax
	cmp	DWORD PTR ___result__$69792[ebp], 0
	je	SHORT $LN10@Code
	mov	edx, DWORD PTR ___result__$69792[ebp]
	mov	DWORD PTR $T70862[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _setDecoderProperties$69784[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
	mov	eax, DWORD PTR $T70862[ebp]
	jmp	$LN13@Code
$LN10@Code:
; Line 138
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _setDecoderProperties$69784[ebp]
	call	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
; Line 140
	mov	eax, DWORD PTR _header$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	sub	ecx, 1
	neg	ecx
	sbb	ecx, ecx
	add	ecx, 1
	mov	BYTE PTR _filteredMode$[ebp], cl
; Line 142
	movzx	edx, BYTE PTR _filteredMode$[ebp]
	test	edx, edx
	je	SHORT $LN9@Code
; Line 144
	mov	esi, esp
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 20					; 00000014H
	mov	edx, DWORD PTR [edx+20]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$69797[ebp], eax
	cmp	DWORD PTR ___result__$69797[ebp], 0
	je	SHORT $LN8@Code
	mov	eax, DWORD PTR ___result__$69797[ebp]
	jmp	$LN13@Code
$LN8@Code:
; Line 145
	mov	ecx, DWORD PTR _this$[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR _outStream$[ebp], eax
; Line 146
	mov	esi, esp
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 4
	mov	edx, DWORD PTR [edx+4]
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$69799[ebp], eax
	cmp	DWORD PTR ___result__$69799[ebp], 0
	je	SHORT $LN9@Code
	mov	eax, DWORD PTR ___result__$69799[ebp]
	jmp	$LN13@Code
$LN9@Code:
; Line 149
	mov	ecx, DWORD PTR _header$[ebp]
	call	?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ ; NArchive::NLzma::CHeader::HasSize
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	and	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR _Size$[ebp], ecx
; Line 150
	mov	edx, DWORD PTR _progress$[ebp]
	push	edx
	mov	eax, DWORD PTR _Size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?CodeResume@CDecoder@NLzma@NCompress@@QAEJPAUISequentialOutStream@@PB_KPAUICompressProgressInfo@@@Z ; NCompress::NLzma::CDecoder::CodeResume
	mov	DWORD PTR _res$[ebp], eax
; Line 152
	movzx	eax, BYTE PTR _filteredMode$[ebp]
	test	eax, eax
	je	SHORT $LN6@Code
; Line 155
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 28					; 0000001cH
	mov	edx, DWORD PTR [edx+28]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res2$69804[ebp], eax
; Line 156
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN5@Code
; Line 157
	mov	ecx, DWORD PTR _res2$69804[ebp]
	mov	DWORD PTR _res$[ebp], ecx
$LN5@Code:
; Line 159
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 20					; 00000014H
	mov	eax, DWORD PTR [eax+20]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _res2$69807[ebp], eax
; Line 160
	cmp	DWORD PTR _res$[ebp], 0
	jne	SHORT $LN6@Code
; Line 161
	mov	edx, DWORD PTR _res2$69807[ebp]
	mov	DWORD PTR _res$[ebp], edx
$LN6@Code:
; Line 164
	mov	eax, DWORD PTR _res$[ebp]
	mov	DWORD PTR ___result__$69810[ebp], eax
	cmp	DWORD PTR ___result__$69810[ebp], 0
	je	SHORT $LN3@Code
	mov	eax, DWORD PTR ___result__$69810[ebp]
	jmp	SHORT $LN13@Code
$LN3@Code:
; Line 166
	mov	ecx, DWORD PTR _header$[ebp]
	call	?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ ; NArchive::NLzma::CHeader::HasSize
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN2@Code
; Line 167
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+12]
	call	?GetOutputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ ; NCompress::NLzma::CDecoder::GetOutputProcessedSize
	mov	ecx, DWORD PTR _header$[ebp]
	mov	DWORD PTR tv287[ebp], eax
	mov	DWORD PTR tv287[ebp+4], edx
	mov	DWORD PTR tv290[ebp], ecx
	mov	edx, DWORD PTR tv290[ebp]
	mov	eax, DWORD PTR tv287[ebp]
	cmp	eax, DWORD PTR [edx]
	jne	SHORT $LN16@Code
	mov	ecx, DWORD PTR tv290[ebp]
	mov	edx, DWORD PTR tv287[ebp+4]
	cmp	edx, DWORD PTR [ecx+4]
	je	SHORT $LN2@Code
$LN16@Code:
; Line 168
	mov	eax, 1
	jmp	SHORT $LN13@Code
$LN2@Code:
; Line 170
	xor	eax, eax
$LN13@Code:
; Line 171
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@Code
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN20@Code:
	DD	1
	DD	$LN19@Code
$LN19@Code:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN17@Code
$LN17@Code:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	68					; 00000044H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	80					; 00000050H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z$0:
	lea	ecx, DWORD PTR _setDecoderProperties$69784[ebp]
	jmp	??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
__ehhandler$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ENDP ; NArchive::NLzma::CDecoder::Code
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetOutputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetOutputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ PROC ; NCompress::NLzma::CDecoder::GetOutputProcessedSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\compress\lzmadecoder.h
; Line 86
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+184]
	mov	edx, DWORD PTR [ecx+188]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetOutputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ ENDP ; NCompress::NLzma::CDecoder::GetOutputProcessedSize
_TEXT	ENDS
PUBLIC	?GetNumberOfProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z ; NArchive::NLzma::CHandler::GetNumberOfProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z PROC ; NArchive::NLzma::CHandler::GetNumberOfProperties
; File c:\workspace\7z1505-src\cpp\7zip\archive\lzmahandler.cpp
; Line 212
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [eax], 3
	xor	eax, eax
	pop	ebp
	ret	8
?GetNumberOfProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z ENDP ; NArchive::NLzma::CHandler::GetNumberOfProperties
_TEXT	ENDS
PUBLIC	?GetPropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NLzma::CHandler::GetPropertyInfo
EXTRN	?k7z_PROPID_To_VARTYPE@@3QBEB:BYTE		; k7z_PROPID_To_VARTYPE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_name$ = 16						; size = 4
_propID$ = 20						; size = 4
_varType$ = 24						; size = 4
?GetPropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::NLzma::CHandler::GetPropertyInfo
; Line 212
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _index$[ebp], 3
	jb	SHORT $LN1@GetPropert
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@GetPropert
$LN1@GetPropert:
	mov	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR _kProps[eax]
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _propID$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR ?k7z_PROPID_To_VARTYPE@@3QBEB[ecx]
	mov	eax, DWORD PTR _varType$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	eax, eax
$LN2@GetPropert:
	pop	ebp
	ret	20					; 00000014H
?GetPropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::NLzma::CHandler::GetPropertyInfo
_TEXT	ENDS
PUBLIC	?GetNumberOfArchiveProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z ; NArchive::NLzma::CHandler::GetNumberOfArchiveProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfArchiveProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z PROC ; NArchive::NLzma::CHandler::GetNumberOfArchiveProperties
; Line 213
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [eax], 1
	xor	eax, eax
	pop	ebp
	ret	8
?GetNumberOfArchiveProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z ENDP ; NArchive::NLzma::CHandler::GetNumberOfArchiveProperties
_TEXT	ENDS
PUBLIC	?GetArchivePropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NLzma::CHandler::GetArchivePropertyInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_name$ = 16						; size = 4
_propID$ = 20						; size = 4
_varType$ = 24						; size = 4
?GetArchivePropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::NLzma::CHandler::GetArchivePropertyInfo
; Line 213
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _index$[ebp], 1
	jb	SHORT $LN1@GetArchive
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@GetArchive
$LN1@GetArchive:
	mov	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR _kArcProps[eax]
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _propID$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR ?k7z_PROPID_To_VARTYPE@@3QBEB[ecx]
	mov	eax, DWORD PTR _varType$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	eax, eax
$LN2@GetArchive:
	pop	ebp
	ret	20					; 00000014H
?GetArchivePropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::NLzma::CHandler::GetArchivePropertyInfo
_TEXT	ENDS
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::CPropVariant
PUBLIC	?GetArchiveProperty@CHandler@NLzma@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NLzma::CHandler::GetArchiveProperty
EXTRN	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:PROC ; NWindows::NCOM::CPropVariant::Detach
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -36						; size = 4
$T70879 = -32						; size = 4
_v$70014 = -28						; size = 4
_prop$ = -20						; size = 16
_this$ = 8						; size = 4
_propID$ = 12						; size = 4
_value$ = 16						; size = 4
?GetArchiveProperty@CHandler@NLzma@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z PROC ; NArchive::NLzma::CHandler::GetArchiveProperty
; Line 216
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 217
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
; Line 218
	mov	eax, DWORD PTR _propID$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 44					; 0000002cH
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 34			; 00000022H
	ja	$LN13@GetArchive@2
	mov	edx, DWORD PTR tv67[ebp]
	movzx	eax, BYTE PTR $LN17@GetArchive@2[edx]
	jmp	DWORD PTR $LN21@GetArchive@2[eax*4]
$LN12@GetArchive@2:
; Line 220
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+48]
	test	edx, edx
	je	SHORT $LN11@GetArchive@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR [eax+56]
	push	edx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN11@GetArchive@2:
	jmp	$LN13@GetArchive@2
$LN10@GetArchive@2:
; Line 221
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+50]
	test	ecx, ecx
	je	SHORT $LN9@GetArchive@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+76]
	push	eax
	mov	ecx, DWORD PTR [edx+72]
	push	ecx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN9@GetArchive@2:
	jmp	$LN13@GetArchive@2
$LN8@GetArchive@2:
; Line 222
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+49]
	test	eax, eax
	je	SHORT $LN7@GetArchive@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+68]
	push	edx
	mov	eax, DWORD PTR [ecx+64]
	push	eax
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN7@GetArchive@2:
	jmp	SHORT $LN13@GetArchive@2
$LN6@GetArchive@2:
; Line 225
	mov	DWORD PTR _v$70014[ebp], 0
; Line 226
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+44]
	test	edx, edx
	jne	SHORT $LN5@GetArchive@2
	mov	eax, DWORD PTR _v$70014[ebp]
	or	eax, 1
	mov	DWORD PTR _v$70014[ebp], eax
$LN5@GetArchive@2:
; Line 227
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+47]
	test	edx, edx
	je	SHORT $LN4@GetArchive@2
	mov	eax, DWORD PTR _v$70014[ebp]
	or	eax, 32					; 00000020H
	mov	DWORD PTR _v$70014[ebp], eax
$LN4@GetArchive@2:
; Line 228
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+46]
	test	edx, edx
	je	SHORT $LN3@GetArchive@2
	mov	eax, DWORD PTR _v$70014[ebp]
	or	eax, 64					; 00000040H
	mov	DWORD PTR _v$70014[ebp], eax
$LN3@GetArchive@2:
; Line 229
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+51]
	test	edx, edx
	je	SHORT $LN2@GetArchive@2
	mov	eax, DWORD PTR _v$70014[ebp]
	or	eax, 128				; 00000080H
	mov	DWORD PTR _v$70014[ebp], eax
$LN2@GetArchive@2:
; Line 230
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+52]
	test	edx, edx
	je	SHORT $LN1@GetArchive@2
	mov	eax, DWORD PTR _v$70014[ebp]
	or	eax, 512				; 00000200H
	mov	DWORD PTR _v$70014[ebp], eax
$LN1@GetArchive@2:
; Line 231
	mov	ecx, DWORD PTR _v$70014[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
$LN13@GetArchive@2:
; Line 234
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach
; Line 235
	mov	DWORD PTR $T70879[ebp], 0
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T70879[ebp]
; Line 236
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN20@GetArchive@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
$LN20@GetArchive@2:
	DD	1
	DD	$LN19@GetArchive@2
$LN19@GetArchive@2:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN18@GetArchive@2
$LN18@GetArchive@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
	npad	3
$LN21@GetArchive@2:
	DD	$LN12@GetArchive@2
	DD	$LN6@GetArchive@2
	DD	$LN10@GetArchive@2
	DD	$LN8@GetArchive@2
	DD	$LN13@GetArchive@2
$LN17@GetArchive@2:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	3
?GetArchiveProperty@CHandler@NLzma@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ENDP ; NArchive::NLzma::CHandler::GetArchiveProperty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
; Line 50
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
_TEXT	ENDS
PUBLIC	?GetNumberOfItems@CHandler@NLzma@NArchive@@UAGJPAI@Z ; NArchive::NLzma::CHandler::GetNumberOfItems
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numItems$ = 12						; size = 4
?GetNumberOfItems@CHandler@NLzma@NArchive@@UAGJPAI@Z PROC ; NArchive::NLzma::CHandler::GetNumberOfItems
; File c:\workspace\7z1505-src\cpp\7zip\archive\lzmahandler.cpp
; Line 239
	push	ebp
	mov	ebp, esp
; Line 240
	mov	eax, DWORD PTR _numItems$[ebp]
	mov	DWORD PTR [eax], 1
; Line 241
	xor	eax, eax
; Line 242
	pop	ebp
	ret	8
?GetNumberOfItems@CHandler@NLzma@NArchive@@UAGJPAI@Z ENDP ; NArchive::NLzma::CHandler::GetNumberOfItems
_TEXT	ENDS
PUBLIC	?GetDicSize@CHeader@NLzma@NArchive@@QBEIXZ	; NArchive::NLzma::CHeader::GetDicSize
PUBLIC	?MyStpCpy@@YGPADPADPBD@Z			; MyStpCpy
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
PUBLIC	__$ArrayPad$
PUBLIC	?GetProperty@CHandler@NLzma@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NLzma::CHandler::GetProperty
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -112						; size = 4
$T70892 = -108						; size = 4
_s$70059 = -104						; size = 4
_sz$70058 = -96						; size = 64
_prop$ = -24						; size = 16
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
_propID$ = 16						; size = 4
_value$ = 20						; size = 4
?GetProperty@CHandler@NLzma@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z PROC ; NArchive::NLzma::CHandler::GetProperty
; Line 262
	push	ebp
	mov	ebp, esp
	sub	esp, 112				; 00000070H
	push	edi
	lea	edi, DWORD PTR [ebp-112]
	mov	ecx, 28					; 0000001cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 263
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
; Line 264
	mov	eax, DWORD PTR _propID$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	cmp	DWORD PTR tv67[ebp], 7
	je	SHORT $LN7@GetPropert@2
	cmp	DWORD PTR tv67[ebp], 8
	je	SHORT $LN5@GetPropert@2
	cmp	DWORD PTR tv67[ebp], 22			; 00000016H
	je	SHORT $LN3@GetPropert@2
	jmp	$LN8@GetPropert@2
$LN7@GetPropert@2:
; Line 266
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	test	eax, eax
	je	SHORT $LN6@GetPropert@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?HasSize@CHeader@NLzma@NArchive@@QBE_NXZ ; NArchive::NLzma::CHeader::HasSize
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN6@GetPropert@2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	push	ecx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN6@GetPropert@2:
	jmp	$LN8@GetPropert@2
$LN5@GetPropert@2:
; Line 267
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+48]
	test	eax, eax
	je	SHORT $LN4@GetPropert@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+60]
	push	edx
	mov	eax, DWORD PTR [ecx+56]
	push	eax
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN4@GetPropert@2:
	jmp	SHORT $LN8@GetPropert@2
$LN3@GetPropert@2:
; Line 269
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	test	eax, eax
	je	SHORT $LN8@GetPropert@2
; Line 272
	lea	ecx, DWORD PTR _sz$70058[ebp]
	mov	DWORD PTR _s$70059[ebp], ecx
; Line 273
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+24]
	test	eax, eax
	je	SHORT $LN1@GetPropert@2
; Line 274
	push	OFFSET $SG70061
	mov	ecx, DWORD PTR _s$70059[ebp]
	push	ecx
	call	?MyStpCpy@@YGPADPADPBD@Z		; MyStpCpy
	mov	DWORD PTR _s$70059[ebp], eax
$LN1@GetPropert@2:
; Line 275
	push	OFFSET $SG70062
	mov	edx, DWORD PTR _s$70059[ebp]
	push	edx
	call	?MyStpCpy@@YGPADPADPBD@Z		; MyStpCpy
	mov	DWORD PTR _s$70059[ebp], eax
; Line 276
	mov	eax, DWORD PTR _s$70059[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?GetDicSize@CHeader@NLzma@NArchive@@QBEIXZ ; NArchive::NLzma::CHeader::GetDicSize
	push	eax
	call	?DictSizeToString@NLzma@NArchive@@YGXIPAD@Z ; NArchive::NLzma::DictSizeToString
; Line 277
	lea	ecx, DWORD PTR _sz$70058[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z ; NWindows::NCOM::CPropVariant::operator=
$LN8@GetPropert@2:
; Line 281
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach
; Line 282
	mov	DWORD PTR $T70892[ebp], 0
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T70892[ebp]
; Line 283
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN15@GetPropert@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 112				; 00000070H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN15@GetPropert@2:
	DD	2
	DD	$LN14@GetPropert@2
$LN14@GetPropert@2:
	DD	-24					; ffffffe8H
	DD	16					; 00000010H
	DD	$LN12@GetPropert@2
	DD	-96					; ffffffa0H
	DD	64					; 00000040H
	DD	$LN13@GetPropert@2
$LN13@GetPropert@2:
	DB	115					; 00000073H
	DB	122					; 0000007aH
	DB	0
$LN12@GetPropert@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
?GetProperty@CHandler@NLzma@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ENDP ; NArchive::NLzma::CHandler::GetProperty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyStpCpy@@YGPADPADPBD@Z
_TEXT	SEGMENT
_c$66134 = -1						; size = 1
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
?MyStpCpy@@YGPADPADPBD@Z PROC				; MyStpCpy, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 38
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
$LN3@MyStpCpy:
; Line 41
	mov	eax, DWORD PTR _src$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _c$66134[ebp], cl
; Line 42
	mov	edx, DWORD PTR _dest$[ebp]
	mov	al, BYTE PTR _c$66134[ebp]
	mov	BYTE PTR [edx], al
; Line 43
	movsx	ecx, BYTE PTR _c$66134[ebp]
	test	ecx, ecx
	jne	SHORT $LN1@MyStpCpy
; Line 44
	mov	eax, DWORD PTR _dest$[ebp]
	jmp	SHORT $LN4@MyStpCpy
$LN1@MyStpCpy:
; Line 45
	mov	edx, DWORD PTR _src$[ebp]
	add	edx, 1
	mov	DWORD PTR _src$[ebp], edx
; Line 46
	mov	eax, DWORD PTR _dest$[ebp]
	add	eax, 1
	mov	DWORD PTR _dest$[ebp], eax
; Line 47
	jmp	SHORT $LN3@MyStpCpy
$LN4@MyStpCpy:
; Line 48
	mov	esp, ebp
	pop	ebp
	ret	8
?MyStpCpy@@YGPADPADPBD@Z ENDP				; MyStpCpy
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetDicSize@CHeader@NLzma@NArchive@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetDicSize@CHeader@NLzma@NArchive@@QBEIXZ PROC		; NArchive::NLzma::CHeader::GetDicSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\lzmahandler.cpp
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+10]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetDicSize@CHeader@NLzma@NArchive@@QBEIXZ ENDP		; NArchive::NLzma::CHeader::GetDicSize
_TEXT	ENDS
PUBLIC	?MyStringLen@@YGIPBD@Z				; MyStringLen
EXTRN	?ConvertUInt32ToString@@YGXIPAD@Z:PROC		; ConvertUInt32ToString
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_c$ = -5						; size = 1
_i$70031 = -4						; size = 4
_value$ = 8						; size = 4
_s$ = 12						; size = 4
?DictSizeToString@NLzma@NArchive@@YGXIPAD@Z PROC	; NArchive::NLzma::DictSizeToString
; Line 245
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 246
	mov	DWORD PTR _i$70031[ebp], 0
	jmp	SHORT $LN7@DictSizeTo
$LN6@DictSizeTo:
	mov	eax, DWORD PTR _i$70031[ebp]
	add	eax, 1
	mov	DWORD PTR _i$70031[ebp], eax
$LN7@DictSizeTo:
	cmp	DWORD PTR _i$70031[ebp], 31		; 0000001fH
	jg	SHORT $LN5@DictSizeTo
; Line 247
	mov	edx, 1
	mov	ecx, DWORD PTR _i$70031[ebp]
	shl	edx, cl
	cmp	edx, DWORD PTR _value$[ebp]
	jne	SHORT $LN4@DictSizeTo
; Line 249
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$70031[ebp]
	push	ecx
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 250
	jmp	SHORT $LN8@DictSizeTo
$LN4@DictSizeTo:
; Line 251
	jmp	SHORT $LN6@DictSizeTo
$LN5@DictSizeTo:
; Line 252
	mov	BYTE PTR _c$[ebp], 98			; 00000062H
; Line 253
	mov	edx, DWORD PTR _value$[ebp]
	and	edx, 1048575				; 000fffffH
	jne	SHORT $LN3@DictSizeTo
	mov	eax, DWORD PTR _value$[ebp]
	shr	eax, 20					; 00000014H
	mov	DWORD PTR _value$[ebp], eax
	mov	BYTE PTR _c$[ebp], 109			; 0000006dH
	jmp	SHORT $LN2@DictSizeTo
$LN3@DictSizeTo:
; Line 254
	mov	ecx, DWORD PTR _value$[ebp]
	and	ecx, 1023				; 000003ffH
	jne	SHORT $LN2@DictSizeTo
	mov	edx, DWORD PTR _value$[ebp]
	shr	edx, 10					; 0000000aH
	mov	DWORD PTR _value$[ebp], edx
	mov	BYTE PTR _c$[ebp], 107			; 0000006bH
$LN2@DictSizeTo:
; Line 255
	mov	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	call	?ConvertUInt32ToString@@YGXIPAD@Z	; ConvertUInt32ToString
; Line 256
	mov	edx, DWORD PTR _s$[ebp]
	push	edx
	call	?MyStringLen@@YGIPBD@Z			; MyStringLen
	add	eax, DWORD PTR _s$[ebp]
	mov	DWORD PTR _s$[ebp], eax
; Line 257
	mov	eax, DWORD PTR _s$[ebp]
	mov	cl, BYTE PTR _c$[ebp]
	mov	BYTE PTR [eax], cl
	mov	edx, DWORD PTR _s$[ebp]
	add	edx, 1
	mov	DWORD PTR _s$[ebp], edx
; Line 258
	mov	eax, DWORD PTR _s$[ebp]
	mov	BYTE PTR [eax], 0
$LN8@DictSizeTo:
; Line 259
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?DictSizeToString@NLzma@NArchive@@YGXIPAD@Z ENDP	; NArchive::NLzma::DictSizeToString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?MyStringLen@@YGIPBD@Z
_TEXT	SEGMENT
_i$ = -4						; size = 4
_s$ = 8							; size = 4
?MyStringLen@@YGIPBD@Z PROC				; MyStringLen, COMDAT
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 28
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@MyStringLe
$LN2@MyStringLe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@MyStringLe:
	mov	ecx, DWORD PTR _s$[ebp]
	add	ecx, DWORD PTR _i$[ebp]
	movsx	edx, BYTE PTR [ecx]
	test	edx, edx
	je	SHORT $LN1@MyStringLe
	jmp	SHORT $LN2@MyStringLe
$LN1@MyStringLe:
; Line 29
	mov	eax, DWORD PTR _i$[ebp]
; Line 30
	mov	esp, ebp
	pop	ebp
	ret	4
?MyStringLen@@YGIPBD@Z ENDP				; MyStringLen
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
_TEXT	SEGMENT
tv131 = -20						; size = 8
_unpackSize$ = -12					; size = 8
_kHeaderSize$ = -4					; size = 4
_p$ = 8							; size = 4
_size$ = 12						; size = 4
_IsArc_Lzma@8 PROC
; File c:\workspace\7z1505-src\cpp\7zip\archive\lzmahandler.cpp
; Line 286
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 287
	mov	DWORD PTR _kHeaderSize$[ebp], 13	; 0000000dH
; Line 288
	cmp	DWORD PTR _size$[ebp], 13		; 0000000dH
	jae	SHORT $LN10@IsArc_Lzma
; Line 289
	mov	eax, 2
	jmp	$LN11@IsArc_Lzma
$LN10@IsArc_Lzma:
; Line 290
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax]
	cmp	ecx, 225				; 000000e1H
	jl	SHORT $LN9@IsArc_Lzma
; Line 291
	xor	eax, eax
	jmp	$LN11@IsArc_Lzma
$LN9@IsArc_Lzma:
; Line 292
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx+5]
	mov	DWORD PTR _unpackSize$[ebp], eax
	mov	ecx, DWORD PTR [edx+9]
	mov	DWORD PTR _unpackSize$[ebp+4], ecx
; Line 293
	mov	edx, DWORD PTR _unpackSize$[ebp]
	and	edx, DWORD PTR _unpackSize$[ebp+4]
	cmp	edx, -1
	je	SHORT $LN8@IsArc_Lzma
; Line 295
	mov	eax, DWORD PTR _size$[ebp]
	xor	ecx, ecx
	mov	DWORD PTR tv131[ebp], eax
	mov	DWORD PTR tv131[ebp+4], ecx
	cmp	DWORD PTR tv131[ebp+4], 16777216	; 01000000H
	jb	SHORT $LN8@IsArc_Lzma
	ja	SHORT $LN13@IsArc_Lzma
	cmp	DWORD PTR tv131[ebp], 0
	jb	SHORT $LN8@IsArc_Lzma
$LN13@IsArc_Lzma:
; Line 296
	xor	eax, eax
	jmp	SHORT $LN11@IsArc_Lzma
$LN8@IsArc_Lzma:
; Line 298
	mov	edx, DWORD PTR _unpackSize$[ebp]
	or	edx, DWORD PTR _unpackSize$[ebp+4]
	je	SHORT $LN6@IsArc_Lzma
; Line 300
	cmp	DWORD PTR _size$[ebp], 15		; 0000000fH
	jae	SHORT $LN5@IsArc_Lzma
; Line 301
	mov	eax, 2
	jmp	SHORT $LN11@IsArc_Lzma
$LN5@IsArc_Lzma:
; Line 302
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+13]
	test	ecx, ecx
	je	SHORT $LN4@IsArc_Lzma
; Line 303
	xor	eax, eax
	jmp	SHORT $LN11@IsArc_Lzma
$LN4@IsArc_Lzma:
; Line 304
	mov	edx, DWORD PTR _unpackSize$[ebp]
	and	edx, DWORD PTR _unpackSize$[ebp+4]
	cmp	edx, -1
	je	SHORT $LN6@IsArc_Lzma
; Line 306
	mov	eax, DWORD PTR _p$[ebp]
	movzx	ecx, BYTE PTR [eax+14]
	and	ecx, 128				; 00000080H
	je	SHORT $LN6@IsArc_Lzma
; Line 307
	xor	eax, eax
	jmp	SHORT $LN11@IsArc_Lzma
$LN6@IsArc_Lzma:
; Line 310
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	push	edx
	call	?CheckDicSize@NLzma@NArchive@@YG_NPBE@Z	; NArchive::NLzma::CheckDicSize
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN1@IsArc_Lzma
; Line 312
	xor	eax, eax
	jmp	SHORT $LN11@IsArc_Lzma
$LN1@IsArc_Lzma:
; Line 313
	mov	eax, 1
$LN11@IsArc_Lzma:
; Line 314
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_IsArc_Lzma@8 ENDP
; Function compile flags: /Odtp /RTCsu
_filterID$ = -1					; size = 1
_p$ = 8							; size = 4
_size$ = 12						; size = 4
_IsArc_Lzma86@8 PROC
; Line 318
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 319
	cmp	DWORD PTR _size$[ebp], 1
	jae	SHORT $LN2@IsArc_Lzma@2
; Line 320
	mov	eax, 2
	jmp	SHORT $LN3@IsArc_Lzma@2
$LN2@IsArc_Lzma@2:
; Line 321
	mov	eax, DWORD PTR _p$[ebp]
	mov	cl, BYTE PTR [eax]
	mov	BYTE PTR _filterID$[ebp], cl
; Line 322
	movzx	edx, BYTE PTR _filterID$[ebp]
	test	edx, edx
	je	SHORT $LN1@IsArc_Lzma@2
	movzx	eax, BYTE PTR _filterID$[ebp]
	cmp	eax, 1
	je	SHORT $LN1@IsArc_Lzma@2
; Line 323
	xor	eax, eax
	jmp	SHORT $LN3@IsArc_Lzma@2
$LN1@IsArc_Lzma@2:
; Line 324
	mov	ecx, DWORD PTR _size$[ebp]
	sub	ecx, 1
	push	ecx
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, 1
	push	edx
	call	_IsArc_Lzma@8
$LN3@IsArc_Lzma@2:
; Line 325
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
_IsArc_Lzma86@8 ENDP
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
PUBLIC	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
PUBLIC	?GetHeaderSize@CHandler@NLzma@NArchive@@QBEIXZ	; NArchive::NLzma::CHandler::GetHeaderSize
PUBLIC	__$ArrayPad$
PUBLIC	?Open@CHandler@NLzma@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NLzma::CHandler::Open
EXTRN	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z:PROC ; ReadStream_FALSE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv197 = -52						; size = 4
tv192 = -48						; size = 4
___result__$70110 = -44					; size = 4
_start$ = -40						; size = 4
___result__$70103 = -36					; size = 4
_buf$ = -28						; size = 16
_kBufSize$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_inStream$ = 12						; size = 4
___formal$ = 16						; size = 4
___formal$ = 20						; size = 4
?Open@CHandler@NLzma@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z PROC ; NArchive::NLzma::CHandler::Open
; Line 329
	push	ebp
	mov	ebp, esp
	sub	esp, 52					; 00000034H
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-52]
	mov	ecx, 13					; 0000000dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 330
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 332
	mov	DWORD PTR _kBufSize$[ebp], 16		; 00000010H
; Line 335
	push	16					; 00000010H
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStream$[ebp]
	push	edx
	call	?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z ; ReadStream_FALSE
	mov	DWORD PTR ___result__$70103[ebp], eax
	cmp	DWORD PTR ___result__$70103[ebp], 0
	je	SHORT $LN5@Open
	mov	eax, DWORD PTR ___result__$70103[ebp]
	jmp	$LN6@Open
$LN5@Open:
; Line 337
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	push	ecx
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	?Parse@CHeader@NLzma@NArchive@@QAE_NPBE_N@Z ; NArchive::NLzma::CHeader::Parse
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN4@Open
; Line 338
	mov	eax, 1
	jmp	$LN6@Open
$LN4@Open:
; Line 339
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHeaderSize@CHandler@NLzma@NArchive@@QBEIXZ ; NArchive::NLzma::CHandler::GetHeaderSize
	lea	ecx, DWORD PTR _buf$[ebp+eax]
	mov	DWORD PTR _start$[ebp], ecx
; Line 340
	mov	edx, DWORD PTR _start$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN3@Open
; Line 341
	mov	eax, 1
	jmp	$LN6@Open
$LN3@Open:
; Line 343
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 56					; 00000038H
	mov	esi, esp
	push	ecx
	push	2
	push	0
	push	0
	mov	edx, DWORD PTR _inStream$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$70110[ebp], eax
	cmp	DWORD PTR ___result__$70110[ebp], 0
	je	SHORT $LN2@Open
	mov	eax, DWORD PTR ___result__$70110[ebp]
	jmp	SHORT $LN6@Open
$LN2@Open:
; Line 344
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv192[ebp], eax
	mov	ecx, DWORD PTR tv192[ebp]
	cmp	DWORD PTR [ecx+60], 0
	ja	SHORT $LN8@Open
	mov	edx, DWORD PTR tv192[ebp]
	cmp	DWORD PTR [edx+56], 24			; 00000018H
	jb	SHORT $LN1@Open
$LN8@Open:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR tv197[ebp], eax
	mov	ecx, DWORD PTR tv197[ebp]
	mov	edx, DWORD PTR tv197[ebp]
	mov	eax, DWORD PTR [ecx+16]
	or	eax, DWORD PTR [edx+20]
	jne	SHORT $LN1@Open
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+24]
	test	edx, edx
	jne	SHORT $LN1@Open
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+25]
	test	ecx, ecx
	jne	SHORT $LN1@Open
; Line 345
	mov	eax, 1
	jmp	SHORT $LN6@Open
$LN1@Open:
; Line 346
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+44], 1
; Line 347
	mov	eax, DWORD PTR _inStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Line 348
	mov	ecx, DWORD PTR _inStream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 349
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+45], 1
; Line 350
	xor	eax, eax
$LN6@Open:
; Line 351
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN11@Open
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 52					; 00000034H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN11@Open:
	DD	1
	DD	$LN10@Open
$LN10@Open:
	DD	-28					; ffffffe4H
	DD	16					; 00000010H
	DD	$LN9@Open
$LN9@Open:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?Open@CHandler@NLzma@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ENDP ; NArchive::NLzma::CHandler::Open
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetHeaderSize@CHandler@NLzma@NArchive@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetHeaderSize@CHandler@NLzma@NArchive@@QBEIXZ PROC	; NArchive::NLzma::CHandler::GetHeaderSize, COMDAT
; _this$ = ecx
; Line 208
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [eax+32]
	neg	eax
	sbb	eax, eax
	neg	eax
	add	eax, 13					; 0000000dH
	mov	esp, ebp
	pop	ebp
	ret	0
?GetHeaderSize@CHandler@NLzma@NArchive@@QBEIXZ ENDP	; NArchive::NLzma::CHandler::GetHeaderSize
_TEXT	ENDS
PUBLIC	?OpenSeq@CHandler@NLzma@NArchive@@UAGJPAUISequentialInStream@@@Z ; NArchive::NLzma::CHandler::OpenSeq
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_stream$ = 12						; size = 4
?OpenSeq@CHandler@NLzma@NArchive@@UAGJPAUISequentialInStream@@@Z PROC ; NArchive::NLzma::CHandler::OpenSeq
; Line 354
	push	ebp
	mov	ebp, esp
	push	esi
; Line 355
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	mov	esi, esp
	push	eax
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 356
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+40], 1
; Line 357
	mov	edx, DWORD PTR _stream$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ; CMyComPtr<ISequentialInStream>::operator=
; Line 358
	xor	eax, eax
; Line 359
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?OpenSeq@CHandler@NLzma@NArchive@@UAGJPAUISequentialInStream@@@Z ENDP ; NArchive::NLzma::CHandler::OpenSeq
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
PUBLIC	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ	; CMyComPtr<IInStream>::Release
PUBLIC	?Close@CHandler@NLzma@NArchive@@UAGJXZ		; NArchive::NLzma::CHandler::Close
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Close@CHandler@NLzma@NArchive@@UAGJXZ PROC		; NArchive::NLzma::CHandler::Close
; Line 362
	push	ebp
	mov	ebp, esp
; Line 363
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0
; Line 364
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+48], 0
; Line 365
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+49], 0
; Line 366
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+50], 0
; Line 368
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+46], 0
; Line 369
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+47], 0
; Line 370
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+51], 0
; Line 371
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+52], 0
; Line 373
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+56], 0
	mov	DWORD PTR [edx+60], 0
; Line 375
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+45], 0
; Line 377
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ; CMyComPtr<IInStream>::Release
; Line 378
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ; CMyComPtr<ISequentialInStream>::Release
; Line 379
	xor	eax, eax
; Line 380
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?Close@CHandler@NLzma@NArchive@@UAGJXZ ENDP		; NArchive::NLzma::CHandler::Close
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->
PUBLIC	??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *
PUBLIC	?SetRatioInfo@CCompressProgressInfoImp@NLzma@NArchive@@UAGJPB_K0@Z ; NArchive::NLzma::CCompressProgressInfoImp::SetRatioInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv74 = -36						; size = 4
_value$70221 = -28					; size = 8
_files$70220 = -12					; size = 8
_this$ = 8						; size = 4
_inSize$ = 12						; size = 4
___formal$ = 16						; size = 4
?SetRatioInfo@CCompressProgressInfoImp@NLzma@NArchive@@UAGJPB_K0@Z PROC ; NArchive::NLzma::CCompressProgressInfoImp::SetRatioInfo
; Line 396
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 397
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *
	test	eax, eax
	je	SHORT $LN1@SetRatioIn
; Line 399
	mov	DWORD PTR _files$70220[ebp], 0
	mov	DWORD PTR _files$70220[ebp+4], 0
; Line 400
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _inSize$[ebp]
	mov	edx, DWORD PTR [eax+16]
	add	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax+20]
	adc	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR _value$70221[ebp], edx
	mov	DWORD PTR _value$70221[ebp+4], eax
; Line 401
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ; CMyComPtr<IArchiveOpenCallback>::operator->
	mov	DWORD PTR tv74[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _value$70221[ebp]
	push	ecx
	lea	edx, DWORD PTR _files$70220[ebp]
	push	edx
	mov	eax, DWORD PTR tv74[ebp]
	push	eax
	mov	ecx, DWORD PTR tv74[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	jmp	SHORT $LN2@SetRatioIn
$LN1@SetRatioIn:
; Line 403
	xor	eax, eax
$LN2@SetRatioIn:
; Line 404
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN7@SetRatioIn
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	esi
	add	esp, 36					; 00000024H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	2
$LN7@SetRatioIn:
	DD	2
	DD	$LN6@SetRatioIn
$LN6@SetRatioIn:
	DD	-12					; fffffff4H
	DD	8
	DD	$LN4@SetRatioIn
	DD	-28					; ffffffe4H
	DD	8
	DD	$LN5@SetRatioIn
$LN5@SetRatioIn:
	DB	118					; 00000076H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	101					; 00000065H
	DB	0
$LN4@SetRatioIn:
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
?SetRatioInfo@CCompressProgressInfoImp@NLzma@NArchive@@UAGJPB_K0@Z ENDP ; NArchive::NLzma::CCompressProgressInfoImp::SetRatioInfo
_TEXT	ENDS
PUBLIC	?GetSize@CDummyOutStream@@QBE_KXZ		; CDummyOutStream::GetSize
PUBLIC	?GetInputProcessedSize@CDecoder@NLzma@NArchive@@QBE_KXZ ; NArchive::NLzma::CDecoder::GetInputProcessedSize
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	?ReadInput@CDecoder@NLzma@NArchive@@QAEJPAEIPAI@Z ; NArchive::NLzma::CDecoder::ReadInput
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	??0CDecoder@NLzma@NArchive@@QAE@XZ		; NArchive::NLzma::CDecoder::CDecoder
PUBLIC	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	??7?$CMyComPtr@UIInStream@@@@QBE_NXZ		; CMyComPtr<IInStream>::operator!
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
PUBLIC	?Init@CDummyOutStream@@QAEXXZ			; CDummyOutStream::Init
PUBLIC	?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z ; CDummyOutStream::SetStream
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	??0CDummyOutStream@@QAE@XZ			; CDummyOutStream::CDummyOutStream
PUBLIC	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	__$ArrayPad$
PUBLIC	?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NLzma::CHandler::Extract
EXTRN	?SetCur@CLocalProgress@@QAEJXZ:PROC		; CLocalProgress::SetCur
EXTRN	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:PROC ; CLocalProgress::Init
EXTRN	??0CLocalProgress@@QAE@XZ:PROC			; CLocalProgress::CLocalProgress
xdata$x	SEGMENT
__catchsym$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
__tryblocktable$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 00H
	DD	06H
	DD	07H
	DD	01H
	DD	FLAT:__catchsym$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$8
__ehfuncinfo$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 019930522H
	DD	08H
	DD	FLAT:__unwindtable$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
	DD	05H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv385 = -404						; size = 4
tv384 = -400						; size = 8
tv383 = -392						; size = 8
tv382 = -384						; size = 4
tv381 = -380						; size = 4
tv380 = -376						; size = 4
tv379 = -369						; size = 1
tv378 = -368						; size = 4
tv377 = -364						; size = 4
tv376 = -360						; size = 4
tv375 = -356						; size = 4
tv374 = -352						; size = 4
tv373 = -348						; size = 4
tv372 = -344						; size = 4
tv191 = -340						; size = 4
tv371 = -336						; size = 4
tv165 = -329						; size = 1
tv164 = -328						; size = 4
tv370 = -324						; size = 4
tv368 = -320						; size = 4
tv144 = -316						; size = 4
tv143 = -312						; size = 4
tv367 = -308						; size = 4
tv365 = -304						; size = 4
tv364 = -297						; size = 1
tv363 = -296						; size = 4
tv362 = -292						; size = 4
tv361 = -288						; size = 4
$T70942 = -284						; size = 4
$T70941 = -280						; size = 4
$T70940 = -276						; size = 4
$T70939 = -272						; size = 4
$T70938 = -268						; size = 4
$T70937 = -264						; size = 4
$T70936 = -260						; size = 4
$T70935 = -256						; size = 4
$T70934 = -252						; size = 4
$T70931 = -248						; size = 4
$T70930 = -244						; size = 4
$T70927 = -240						; size = 4
$T70926 = -236						; size = 4
$T70925 = -232						; size = 4
$T70924 = -228						; size = 4
_opResult$70315 = -224					; size = 4
___result__$70302 = -220				; size = 4
_st$70295 = -212					; size = 16
___result__$70290 = -192				; size = 4
_processed$70289 = -184					; size = 4
_headerSize$70288 = -176				; size = 4
_buf$70287 = -168					; size = 14
_kBufSize$70286 = -148					; size = 4
___result__$70283 = -144				; size = 4
_dataAfterEnd$70279 = -137				; size = 1
_numStreams$70278 = -136				; size = 8
_unpackSize$70277 = -128				; size = 8
_packSize$70276 = -120					; size = 8
_firstItem$70275 = -109					; size = 1
___result__$70272 = -108				; size = 4
_result$70271 = -104					; size = 4
_decoder$70270 = -96					; size = 16
___result__$70266 = -76					; size = 4
_progress$70261 = -68					; size = 4
_lps$70255 = -60					; size = 4
_outStream$70254 = -52					; size = 4
_outStreamSpec$70248 = -44				; size = 4
___result__$70242 = -40					; size = 4
_askMode$70241 = -36					; size = 4
_realOutStream$70240 = -28				; size = 4
__$ArrayPad$ = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_indices$ = 12						; size = 4
_numItems$ = 16						; size = 4
_testMode$ = 20						; size = 4
_extractCallback$ = 24					; size = 4
?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z PROC ; NArchive::NLzma::CHandler::Extract
; Line 408
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 388				; 00000184H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-404]
	mov	ecx, 97					; 00000061H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 409
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 411
	cmp	DWORD PTR _numItems$[ebp], 0
	jne	SHORT $LN40@Extract
; Line 412
	xor	eax, eax
	jmp	$LN42@Extract
$LN40@Extract:
; Line 413
	cmp	DWORD PTR _numItems$[ebp], -1
	je	SHORT $LN39@Extract
	cmp	DWORD PTR _numItems$[ebp], 1
	jne	SHORT $LN38@Extract
	mov	eax, DWORD PTR _indices$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN39@Extract
$LN38@Extract:
; Line 414
	mov	eax, -2147024809			; 80070057H
	jmp	$LN42@Extract
$LN39@Extract:
; Line 416
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+48]
	test	edx, edx
	je	SHORT $LN37@Extract
; Line 417
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+60]
	push	ecx
	mov	edx, DWORD PTR [eax+56]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+12]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN37@Extract:
; Line 420
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR tv361[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 423
	xor	ecx, ecx
	cmp	DWORD PTR _testMode$[ebp], 0
	setne	cl
	mov	DWORD PTR _askMode$70241[ebp], ecx
; Line 424
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	mov	DWORD PTR tv362[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR _askMode$70241[ebp]
	push	edx
	mov	eax, DWORD PTR tv362[ebp]
	push	eax
	push	0
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+20]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv363[ebp], eax
	mov	edx, DWORD PTR tv363[ebp]
	mov	DWORD PTR ___result__$70242[ebp], edx
	cmp	DWORD PTR ___result__$70242[ebp], 0
	je	SHORT $LN36@Extract
	mov	eax, DWORD PTR ___result__$70242[ebp]
	mov	DWORD PTR $T70924[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70924[ebp]
	jmp	$LN42@Extract
$LN36@Extract:
; Line 425
	cmp	DWORD PTR _testMode$[ebp], 0
	jne	SHORT $LN35@Extract
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!
	mov	BYTE PTR tv364[ebp], al
	movzx	ecx, BYTE PTR tv364[ebp]
	test	ecx, ecx
	je	SHORT $LN35@Extract
; Line 426
	mov	DWORD PTR $T70925[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70925[ebp]
	jmp	$LN42@Extract
$LN35@Extract:
; Line 428
	mov	esi, esp
	mov	edx, DWORD PTR _askMode$70241[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+24]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 430
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv365[ebp], eax
	mov	ecx, DWORD PTR tv365[ebp]
	mov	DWORD PTR $T70927[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	cmp	DWORD PTR $T70927[ebp], 0
	je	SHORT $LN44@Extract
	mov	ecx, DWORD PTR $T70927[ebp]
	call	??0CDummyOutStream@@QAE@XZ
	mov	DWORD PTR tv367[ebp], eax
	mov	edx, DWORD PTR tv367[ebp]
	mov	DWORD PTR tv143[ebp], edx
	jmp	SHORT $LN45@Extract
$LN44@Extract:
	mov	DWORD PTR tv143[ebp], 0
$LN45@Extract:
	mov	eax, DWORD PTR tv143[ebp]
	mov	DWORD PTR $T70926[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	ecx, DWORD PTR $T70926[ebp]
	mov	DWORD PTR _outStreamSpec$70248[ebp], ecx
; Line 431
	mov	edx, DWORD PTR _outStreamSpec$70248[ebp]
	push	edx
	lea	ecx, DWORD PTR _outStream$70254[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 3
; Line 432
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv144[ebp], eax
	mov	eax, DWORD PTR tv144[ebp]
	push	eax
	mov	ecx, DWORD PTR _outStreamSpec$70248[ebp]
	call	?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z ; CDummyOutStream::SetStream
; Line 433
	mov	ecx, DWORD PTR _outStreamSpec$70248[ebp]
	call	?Init@CDummyOutStream@@QAEXXZ		; CDummyOutStream::Init
; Line 434
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 436
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv368[ebp], eax
	mov	ecx, DWORD PTR tv368[ebp]
	mov	DWORD PTR $T70931[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	cmp	DWORD PTR $T70931[ebp], 0
	je	SHORT $LN46@Extract
	mov	ecx, DWORD PTR $T70931[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv370[ebp], eax
	mov	edx, DWORD PTR tv370[ebp]
	mov	DWORD PTR tv164[ebp], edx
	jmp	SHORT $LN47@Extract
$LN46@Extract:
	mov	DWORD PTR tv164[ebp], 0
$LN47@Extract:
	mov	eax, DWORD PTR tv164[ebp]
	mov	DWORD PTR $T70930[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	mov	ecx, DWORD PTR $T70930[ebp]
	mov	DWORD PTR _lps$70255[ebp], ecx
; Line 437
	mov	edx, DWORD PTR _lps$70255[ebp]
	push	edx
	lea	ecx, DWORD PTR _progress$70261[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
; Line 438
	push	1
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lps$70255[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 440
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+45]
	test	edx, edx
	je	$LN34@Extract
; Line 442
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??7?$CMyComPtr@UIInStream@@@@QBE_NXZ	; CMyComPtr<IInStream>::operator!
	mov	BYTE PTR tv165[ebp], al
	movzx	eax, BYTE PTR tv165[ebp]
	test	eax, eax
	je	SHORT $LN33@Extract
; Line 443
	mov	DWORD PTR $T70934[ebp], -2147467259	; 80004005H
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$70261[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _outStream$70254[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70934[ebp]
	jmp	$LN42@Extract
$LN33@Extract:
; Line 444
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv371[ebp], eax
	mov	ecx, DWORD PTR tv371[ebp]
	mov	DWORD PTR tv191[ebp], ecx
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	edx, DWORD PTR tv191[ebp]
	push	edx
	mov	eax, DWORD PTR tv191[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv372[ebp], eax
	mov	eax, DWORD PTR tv372[ebp]
	mov	DWORD PTR ___result__$70266[ebp], eax
	cmp	DWORD PTR ___result__$70266[ebp], 0
	je	SHORT $LN32@Extract
	mov	ecx, DWORD PTR ___result__$70266[ebp]
	mov	DWORD PTR $T70935[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$70261[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _outStream$70254[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70935[ebp]
	jmp	$LN42@Extract
$LN32@Extract:
; Line 446
	jmp	SHORT $LN31@Extract
$LN34@Extract:
; Line 447
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+45], 1
$LN31@Extract:
; Line 449
	lea	ecx, DWORD PTR _decoder$70270[ebp]
	call	??0CDecoder@NLzma@NArchive@@QAE@XZ
	mov	DWORD PTR tv373[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 6
; Line 450
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	mov	DWORD PTR tv374[ebp], eax
	mov	eax, DWORD PTR tv374[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+32]
	push	edx
	lea	ecx, DWORD PTR _decoder$70270[ebp]
	call	?Create@CDecoder@NLzma@NArchive@@QAEJ_NPAUISequentialInStream@@@Z ; NArchive::NLzma::CDecoder::Create
	mov	DWORD PTR tv375[ebp], eax
	mov	eax, DWORD PTR tv375[ebp]
	mov	DWORD PTR _result$70271[ebp], eax
; Line 451
	mov	ecx, DWORD PTR _result$70271[ebp]
	mov	DWORD PTR ___result__$70272[ebp], ecx
	cmp	DWORD PTR ___result__$70272[ebp], 0
	je	SHORT $LN30@Extract
	mov	edx, DWORD PTR ___result__$70272[ebp]
	mov	DWORD PTR $T70936[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _decoder$70270[ebp]
	call	??1CDecoder@NLzma@NArchive@@QAE@XZ	; NArchive::NLzma::CDecoder::~CDecoder
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$70261[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _outStream$70254[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70936[ebp]
	jmp	$LN42@Extract
$LN30@Extract:
; Line 453
	mov	BYTE PTR _firstItem$70275[ebp], 1
; Line 455
	mov	DWORD PTR _packSize$70276[ebp], 0
	mov	DWORD PTR _packSize$70276[ebp+4], 0
; Line 456
	mov	DWORD PTR _unpackSize$70277[ebp], 0
	mov	DWORD PTR _unpackSize$70277[ebp+4], 0
; Line 457
	mov	DWORD PTR _numStreams$70278[ebp], 0
	mov	DWORD PTR _numStreams$70278[ebp+4], 0
; Line 459
	mov	BYTE PTR _dataAfterEnd$70279[ebp], 0
$LN29@Extract:
; Line 463
	mov	eax, DWORD PTR _lps$70255[ebp]
	mov	ecx, DWORD PTR _packSize$70276[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _packSize$70276[ebp+4]
	mov	DWORD PTR [eax+36], edx
; Line 464
	mov	eax, DWORD PTR _lps$70255[ebp]
	mov	ecx, DWORD PTR _unpackSize$70277[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	edx, DWORD PTR _unpackSize$70277[ebp+4]
	mov	DWORD PTR [eax+44], edx
; Line 465
	mov	ecx, DWORD PTR _lps$70255[ebp]
	call	?SetCur@CLocalProgress@@QAEJXZ		; CLocalProgress::SetCur
	mov	DWORD PTR tv376[ebp], eax
	mov	eax, DWORD PTR tv376[ebp]
	mov	DWORD PTR ___result__$70283[ebp], eax
	cmp	DWORD PTR ___result__$70283[ebp], 0
	je	SHORT $LN27@Extract
	mov	ecx, DWORD PTR ___result__$70283[ebp]
	mov	DWORD PTR $T70937[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _decoder$70270[ebp]
	call	??1CDecoder@NLzma@NArchive@@QAE@XZ	; NArchive::NLzma::CDecoder::~CDecoder
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$70261[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _outStream$70254[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70937[ebp]
	jmp	$LN42@Extract
$LN27@Extract:
; Line 467
	mov	DWORD PTR _kBufSize$70286[ebp], 14	; 0000000eH
; Line 469
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetHeaderSize@CHandler@NLzma@NArchive@@QBEIXZ ; NArchive::NLzma::CHandler::GetHeaderSize
	mov	DWORD PTR tv377[ebp], eax
	mov	edx, DWORD PTR tv377[ebp]
	mov	DWORD PTR _headerSize$70288[ebp], edx
; Line 471
	lea	eax, DWORD PTR _processed$70289[ebp]
	push	eax
	mov	ecx, DWORD PTR _headerSize$70288[ebp]
	push	ecx
	lea	edx, DWORD PTR _buf$70287[ebp]
	push	edx
	lea	ecx, DWORD PTR _decoder$70270[ebp]
	call	?ReadInput@CDecoder@NLzma@NArchive@@QAEJPAEIPAI@Z ; NArchive::NLzma::CDecoder::ReadInput
	mov	DWORD PTR tv378[ebp], eax
	mov	eax, DWORD PTR tv378[ebp]
	mov	DWORD PTR ___result__$70290[ebp], eax
	cmp	DWORD PTR ___result__$70290[ebp], 0
	je	SHORT $LN26@Extract
	mov	ecx, DWORD PTR ___result__$70290[ebp]
	mov	DWORD PTR $T70938[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _decoder$70270[ebp]
	call	??1CDecoder@NLzma@NArchive@@QAE@XZ	; NArchive::NLzma::CDecoder::~CDecoder
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$70261[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _outStream$70254[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70938[ebp]
	jmp	$LN42@Extract
$LN26@Extract:
; Line 472
	mov	edx, DWORD PTR _processed$70289[ebp]
	cmp	edx, DWORD PTR _headerSize$70288[ebp]
	je	SHORT $LN25@Extract
; Line 474
	cmp	DWORD PTR _processed$70289[ebp], 0
	je	SHORT $LN24@Extract
; Line 475
	mov	BYTE PTR _dataAfterEnd$70279[ebp], 1
$LN24@Extract:
; Line 476
	jmp	$LN28@Extract
$LN25@Extract:
; Line 480
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	push	ecx
	lea	edx, DWORD PTR _buf$70287[ebp]
	push	edx
	lea	ecx, DWORD PTR _st$70295[ebp]
	call	?Parse@CHeader@NLzma@NArchive@@QAE_NPBE_N@Z ; NArchive::NLzma::CHeader::Parse
	mov	BYTE PTR tv379[ebp], al
	movzx	eax, BYTE PTR tv379[ebp]
	test	eax, eax
	jne	SHORT $LN23@Extract
; Line 482
	mov	BYTE PTR _dataAfterEnd$70279[ebp], 1
; Line 483
	jmp	$LN28@Extract
$LN23@Extract:
; Line 485
	mov	ecx, DWORD PTR _numStreams$70278[ebp]
	add	ecx, 1
	mov	edx, DWORD PTR _numStreams$70278[ebp+4]
	adc	edx, 0
	mov	DWORD PTR _numStreams$70278[ebp], ecx
	mov	DWORD PTR _numStreams$70278[ebp+4], edx
; Line 486
	mov	BYTE PTR _firstItem$70275[ebp], 0
; Line 488
	lea	ecx, DWORD PTR _progress$70261[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	DWORD PTR tv380[ebp], eax
	lea	ecx, DWORD PTR _outStream$70254[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv381[ebp], eax
	mov	eax, DWORD PTR tv380[ebp]
	push	eax
	mov	ecx, DWORD PTR tv381[ebp]
	push	ecx
	lea	edx, DWORD PTR _st$70295[ebp]
	push	edx
	lea	ecx, DWORD PTR _decoder$70270[ebp]
	call	?Code@CDecoder@NLzma@NArchive@@QAEJABUCHeader@23@PAUISequentialOutStream@@PAUICompressProgressInfo@@@Z ; NArchive::NLzma::CDecoder::Code
	mov	DWORD PTR tv382[ebp], eax
	mov	eax, DWORD PTR tv382[ebp]
	mov	DWORD PTR _result$70271[ebp], eax
; Line 490
	lea	ecx, DWORD PTR _decoder$70270[ebp]
	call	?GetInputProcessedSize@CDecoder@NLzma@NArchive@@QBE_KXZ ; NArchive::NLzma::CDecoder::GetInputProcessedSize
	mov	DWORD PTR tv383[ebp], eax
	mov	DWORD PTR tv383[ebp+4], edx
	mov	ecx, DWORD PTR tv383[ebp]
	mov	DWORD PTR _packSize$70276[ebp], ecx
	mov	edx, DWORD PTR tv383[ebp+4]
	mov	DWORD PTR _packSize$70276[ebp+4], edx
; Line 491
	mov	ecx, DWORD PTR _outStreamSpec$70248[ebp]
	call	?GetSize@CDummyOutStream@@QBE_KXZ	; CDummyOutStream::GetSize
	mov	DWORD PTR tv384[ebp], eax
	mov	DWORD PTR tv384[ebp+4], edx
	mov	eax, DWORD PTR tv384[ebp]
	mov	DWORD PTR _unpackSize$70277[ebp], eax
	mov	ecx, DWORD PTR tv384[ebp+4]
	mov	DWORD PTR _unpackSize$70277[ebp+4], ecx
; Line 493
	cmp	DWORD PTR _result$70271[ebp], -2147467263 ; 80004001H
	jne	SHORT $LN22@Extract
; Line 495
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+51], 1
; Line 496
	mov	DWORD PTR _result$70271[ebp], 1
; Line 497
	jmp	SHORT $LN28@Extract
$LN22@Extract:
; Line 499
	cmp	DWORD PTR _result$70271[ebp], 1
	jne	SHORT $LN21@Extract
; Line 500
	jmp	SHORT $LN28@Extract
$LN21@Extract:
; Line 501
	mov	eax, DWORD PTR _result$70271[ebp]
	mov	DWORD PTR ___result__$70302[ebp], eax
	cmp	DWORD PTR ___result__$70302[ebp], 0
	je	SHORT $LN20@Extract
	mov	ecx, DWORD PTR ___result__$70302[ebp]
	mov	DWORD PTR $T70939[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _decoder$70270[ebp]
	call	??1CDecoder@NLzma@NArchive@@QAE@XZ	; NArchive::NLzma::CDecoder::~CDecoder
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$70261[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _outStream$70254[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70939[ebp]
	jmp	$LN42@Extract
$LN20@Extract:
; Line 502
	jmp	$LN29@Extract
$LN28@Extract:
; Line 504
	movzx	edx, BYTE PTR _firstItem$70275[ebp]
	test	edx, edx
	je	SHORT $LN19@Extract
; Line 506
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+44], 0
; Line 507
	mov	DWORD PTR _result$70271[ebp], 1
	jmp	SHORT $LN18@Extract
$LN19@Extract:
; Line 509
	cmp	DWORD PTR _result$70271[ebp], 0
	je	SHORT $LN16@Extract
	cmp	DWORD PTR _result$70271[ebp], 1
	jne	SHORT $LN18@Extract
$LN16@Extract:
; Line 511
	movzx	ecx, BYTE PTR _dataAfterEnd$70279[ebp]
	test	ecx, ecx
	je	SHORT $LN15@Extract
; Line 512
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+46], 1
	jmp	SHORT $LN14@Extract
$LN15@Extract:
; Line 513
	mov	eax, DWORD PTR _decoder$70270[ebp+12]
	movzx	ecx, BYTE PTR [eax+209]
	test	ecx, ecx
	je	SHORT $LN14@Extract
; Line 514
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+47], 1
$LN14@Extract:
; Line 516
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _packSize$70276[ebp]
	mov	DWORD PTR [eax+56], ecx
	mov	edx, DWORD PTR _packSize$70276[ebp+4]
	mov	DWORD PTR [eax+60], edx
; Line 517
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _unpackSize$70277[ebp]
	mov	DWORD PTR [eax+64], ecx
	mov	edx, DWORD PTR _unpackSize$70277[ebp+4]
	mov	DWORD PTR [eax+68], edx
; Line 518
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _numStreams$70278[ebp]
	mov	DWORD PTR [eax+72], ecx
	mov	edx, DWORD PTR _numStreams$70278[ebp+4]
	mov	DWORD PTR [eax+76], edx
; Line 520
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+48], 1
; Line 521
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+49], 1
; Line 522
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+50], 1
$LN18@Extract:
; Line 525
	mov	DWORD PTR _opResult$70315[ebp], 0
; Line 527
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+44]
	test	ecx, ecx
	jne	SHORT $LN12@Extract
; Line 528
	mov	DWORD PTR _opResult$70315[ebp], 7
	jmp	$LN11@Extract
$LN12@Extract:
; Line 529
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+47]
	test	eax, eax
	je	SHORT $LN10@Extract
; Line 530
	mov	DWORD PTR _opResult$70315[ebp], 5
	jmp	$LN11@Extract
$LN10@Extract:
; Line 531
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+51]
	test	edx, edx
	je	SHORT $LN8@Extract
; Line 532
	mov	DWORD PTR _opResult$70315[ebp], 1
	jmp	SHORT $LN11@Extract
$LN8@Extract:
; Line 533
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+46]
	test	ecx, ecx
	je	SHORT $LN6@Extract
; Line 534
	mov	DWORD PTR _opResult$70315[ebp], 6
	jmp	SHORT $LN11@Extract
$LN6@Extract:
; Line 535
	cmp	DWORD PTR _result$70271[ebp], 1
	jne	SHORT $LN4@Extract
; Line 536
	mov	DWORD PTR _opResult$70315[ebp], 2
	jmp	SHORT $LN11@Extract
$LN4@Extract:
; Line 537
	cmp	DWORD PTR _result$70271[ebp], 0
	jne	SHORT $LN2@Extract
; Line 538
	mov	DWORD PTR _opResult$70315[ebp], 0
; Line 539
	jmp	SHORT $LN11@Extract
$LN2@Extract:
; Line 540
	mov	edx, DWORD PTR _result$70271[ebp]
	mov	DWORD PTR $T70940[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _decoder$70270[ebp]
	call	??1CDecoder@NLzma@NArchive@@QAE@XZ	; NArchive::NLzma::CDecoder::~CDecoder
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$70261[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _outStream$70254[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70940[ebp]
	jmp	$LN42@Extract
$LN11@Extract:
; Line 542
	lea	ecx, DWORD PTR _outStream$70254[ebp]
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 543
	mov	esi, esp
	mov	eax, DWORD PTR _opResult$70315[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+28]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv385[ebp], eax
	mov	edx, DWORD PTR tv385[ebp]
	mov	DWORD PTR $T70941[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 5
	lea	ecx, DWORD PTR _decoder$70270[ebp]
	call	??1CDecoder@NLzma@NArchive@@QAE@XZ	; NArchive::NLzma::CDecoder::~CDecoder
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$70261[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _outStream$70254[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70941[ebp]
	jmp	SHORT $LN42@Extract
__catch$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0:
; Line 545
	mov	DWORD PTR $T70942[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN57@Extract
	ret	0
	mov	eax, __tryend$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
	ret	0
__tryend$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN42@Extract
$LN57@Extract:
	mov	eax, DWORD PTR $T70942[ebp]
$LN42@Extract:
; Line 546
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN68@Extract
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 404				; 00000194H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN68@Extract:
	DD	7
	DD	$LN67@Extract
$LN67@Extract:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN59@Extract
	DD	-52					; ffffffccH
	DD	4
	DD	$LN60@Extract
	DD	-68					; ffffffbcH
	DD	4
	DD	$LN61@Extract
	DD	-96					; ffffffa0H
	DD	16					; 00000010H
	DD	$LN62@Extract
	DD	-168					; ffffff58H
	DD	14					; 0000000eH
	DD	$LN63@Extract
	DD	-184					; ffffff48H
	DD	4
	DD	$LN64@Extract
	DD	-212					; ffffff2cH
	DD	16					; 00000010H
	DD	$LN65@Extract
$LN65@Extract:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	0
$LN64@Extract:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	99					; 00000063H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	100					; 00000064H
	DB	0
$LN63@Extract:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN62@Extract:
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN61@Extract:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN60@Extract:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN59@Extract:
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	79					; 0000004fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2:
	lea	ecx, DWORD PTR _realOutStream$70240[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3:
	mov	eax, DWORD PTR $T70927[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4:
	lea	ecx, DWORD PTR _outStream$70254[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5:
	mov	eax, DWORD PTR $T70931[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6:
	lea	ecx, DWORD PTR _progress$70261[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__unwindfunclet$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7:
	lea	ecx, DWORD PTR _decoder$70270[ebp]
	jmp	??1CDecoder@NLzma@NArchive@@QAE@XZ	; NArchive::NLzma::CDecoder::~CDecoder
__ehhandler$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-408]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ENDP ; NArchive::NLzma::CHandler::Extract
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_outStream$ = 8						; size = 4
?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z PROC ; CDummyOutStream::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\dummyoutstream.h
; Line 17
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _outStream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@CDummyOutStream@@QAEXPAUISequentialOutStream@@@Z ENDP ; CDummyOutStream::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CDummyOutStream@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Init@CDummyOutStream@@QAEXXZ PROC			; CDummyOutStream::Init, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
	mov	DWORD PTR [eax+20], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CDummyOutStream@@QAEXXZ ENDP			; CDummyOutStream::Init
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetSize@CDummyOutStream@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetSize@CDummyOutStream@@QBE_KXZ PROC			; CDummyOutStream::GetSize, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	mov	edx, DWORD PTR [ecx+20]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetSize@CDummyOutStream@@QBE_KXZ ENDP			; CDummyOutStream::GetSize
_TEXT	ENDS
PUBLIC	?GetInputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ ; NCompress::NLzma::CDecoder::GetInputProcessedSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?GetInputProcessedSize@CDecoder@NLzma@NArchive@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInputProcessedSize@CDecoder@NLzma@NArchive@@QBE_KXZ PROC ; NArchive::NLzma::CDecoder::GetInputProcessedSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\lzmahandler.cpp
; Line 90
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?GetInputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ ; NCompress::NLzma::CDecoder::GetInputProcessedSize
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetInputProcessedSize@CDecoder@NLzma@NArchive@@QBE_KXZ ENDP ; NArchive::NLzma::CDecoder::GetInputProcessedSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetInputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetInputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ PROC ; NCompress::NLzma::CDecoder::GetInputProcessedSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\compress\lzmadecoder.h
; Line 75
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+176]
	mov	edx, DWORD PTR [ecx+180]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetInputProcessedSize@CDecoder@NLzma@NCompress@@QBE_KXZ ENDP ; NCompress::NLzma::CDecoder::GetInputProcessedSize
_TEXT	ENDS
EXTRN	?ReadFromInputStream@CDecoder@NLzma@NCompress@@QAEJPAXIPAI@Z:PROC ; NCompress::NLzma::CDecoder::ReadFromInputStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReadInput@CDecoder@NLzma@NArchive@@QAEJPAEIPAI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_processedSize$ = 16					; size = 4
?ReadInput@CDecoder@NLzma@NArchive@@QAEJPAEIPAI@Z PROC	; NArchive::NLzma::CDecoder::ReadInput, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\lzmahandler.cpp
; Line 95
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _processedSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	call	?ReadFromInputStream@CDecoder@NLzma@NCompress@@QAEJPAXIPAI@Z ; NCompress::NLzma::CDecoder::ReadFromInputStream
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?ReadInput@CDecoder@NLzma@NArchive@@QAEJPAEIPAI@Z ENDP	; NArchive::NLzma::CDecoder::ReadInput
_TEXT	ENDS
PUBLIC	??_7CDummyOutStream@@6B@			; CDummyOutStream::`vftable'
PUBLIC	??0ISequentialOutStream@@QAE@XZ			; ISequentialOutStream::ISequentialOutStream
PUBLIC	??_R4CDummyOutStream@@6B@			; CDummyOutStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCDummyOutStream@@@8			; CDummyOutStream `RTTI Type Descriptor'
PUBLIC	??_R3CDummyOutStream@@8				; CDummyOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CDummyOutStream@@8				; CDummyOutStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CDummyOutStream@@8		; CDummyOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ISequentialOutStream@@8		; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialOutStream@@@8		; ISequentialOutStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialOutStream@@8			; ISequentialOutStream::`RTTI Base Class Array'
PUBLIC	?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z ; CDummyOutStream::QueryInterface
PUBLIC	?AddRef@CDummyOutStream@@UAGKXZ			; CDummyOutStream::AddRef
PUBLIC	?Release@CDummyOutStream@@UAGKXZ		; CDummyOutStream::Release
EXTRN	?Write@CDummyOutStream@@UAGJPBXIPAI@Z:PROC	; CDummyOutStream::Write
;	COMDAT ??_R2ISequentialOutStream@@8
rdata$r	SEGMENT
??_R2ISequentialOutStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8 ; ISequentialOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialOutStream@@8
rdata$r	SEGMENT
??_R3ISequentialOutStream@@8 DD 00H			; ISequentialOutStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialOutStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialOutStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialOutStream@@8 DD FLAT:??_R0?AUISequentialOutStream@@@8 ; ISequentialOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CDummyOutStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CDummyOutStream@@8 DD FLAT:??_R0?AVCDummyOutStream@@@8 ; CDummyOutStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	03H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CDummyOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CDummyOutStream@@8
rdata$r	SEGMENT
??_R2CDummyOutStream@@8 DD FLAT:??_R1A@?0A@EA@CDummyOutStream@@8 ; CDummyOutStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialOutStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CDummyOutStream@@8
rdata$r	SEGMENT
??_R3CDummyOutStream@@8 DD 00H				; CDummyOutStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	04H
	DD	FLAT:??_R2CDummyOutStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCDummyOutStream@@@8
_DATA	SEGMENT
??_R0?AVCDummyOutStream@@@8 DD FLAT:??_7type_info@@6B@	; CDummyOutStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCDummyOutStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CDummyOutStream@@6B@
rdata$r	SEGMENT
??_R4CDummyOutStream@@6B@ DD 00H			; CDummyOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCDummyOutStream@@@8
	DD	FLAT:??_R3CDummyOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7CDummyOutStream@@6B@
CONST	SEGMENT
??_7CDummyOutStream@@6B@ DD FLAT:??_R4CDummyOutStream@@6B@ ; CDummyOutStream::`vftable'
	DD	FLAT:?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CDummyOutStream@@UAGKXZ
	DD	FLAT:?Release@CDummyOutStream@@UAGKXZ
	DD	FLAT:?Write@CDummyOutStream@@UAGJPBXIPAI@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CDummyOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CDummyOutStream@@QAE@XZ PROC				; CDummyOutStream::CDummyOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialOutStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CDummyOutStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CDummyOutStream@@QAE@XZ ENDP				; CDummyOutStream::CDummyOutStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CDummyOutStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\dummyoutstream.h
; Line 20
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN1@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN3@QueryInter@2
$LN1@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN3@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CDummyOutStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CDummyOutStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CDummyOutStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CDummyOutStream@@UAGKXZ PROC			; CDummyOutStream::AddRef, COMDAT
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CDummyOutStream@@UAGKXZ ENDP			; CDummyOutStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCDummyOutStream@@QAEPAXI@Z			; CDummyOutStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CDummyOutStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T70990 = -8						; size = 4
$T70989 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CDummyOutStream@@UAGKXZ PROC			; CDummyOutStream::Release, COMDAT
; Line 20
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T70990[ebp], edx
	mov	eax, DWORD PTR $T70990[ebp]
	mov	DWORD PTR $T70989[ebp], eax
	cmp	DWORD PTR $T70989[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T70989[ebp]
	call	??_GCDummyOutStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CDummyOutStream@@UAGKXZ ENDP			; CDummyOutStream::Release
_TEXT	ENDS
PUBLIC	??1CDummyOutStream@@QAE@XZ			; CDummyOutStream::~CDummyOutStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCDummyOutStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCDummyOutStream@@QAEPAXI@Z PROC			; CDummyOutStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CDummyOutStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCDummyOutStream@@QAEPAXI@Z ENDP			; CDummyOutStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CDummyOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CDummyOutStream@@QAE@XZ PROC				; CDummyOutStream::~CDummyOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CDummyOutStream@@QAE@XZ ENDP				; CDummyOutStream::~CDummyOutStream
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CDecoder@NLzma@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CDecoder@NLzma@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CDecoder@NLzma@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CDecoder@NLzma@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CDecoder@NLzma@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CDecoder@NLzma@NArchive@@QAE@XZ PROC			; NArchive::NLzma::CDecoder::CDecoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CDecoder@NLzma@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CDecoder@NLzma@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__ehhandler$??0CDecoder@NLzma@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CDecoder@NLzma@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CDecoder@NLzma@NArchive@@QAE@XZ ENDP			; NArchive::NLzma::CDecoder::CDecoder
PUBLIC	??_7ISequentialOutStream@@6B@			; ISequentialOutStream::`vftable'
PUBLIC	??_R4ISequentialOutStream@@6B@			; ISequentialOutStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialOutStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialOutStream@@6B@ DD 00H			; ISequentialOutStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialOutStream@@@8
	DD	FLAT:??_R3ISequentialOutStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialOutStream@@6B@
CONST	SEGMENT
??_7ISequentialOutStream@@6B@ DD FLAT:??_R4ISequentialOutStream@@6B@ ; ISequentialOutStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialOutStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialOutStream@@QAE@XZ PROC			; ISequentialOutStream::ISequentialOutStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialOutStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialOutStream@@QAE@XZ ENDP			; ISequentialOutStream::ISequentialOutStream
_TEXT	ENDS
PUBLIC	??0CHandler@NLzma@NArchive@@QAE@_N@Z		; NArchive::NLzma::CHandler::CHandler
xdata$x	SEGMENT
__unwindtable$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ$0
__ehfuncinfo$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T71013 = -20						; size = 4
$T71012 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ PROC ; NArchive::NLzma::NLzmaAr::CreateArc
; File c:\workspace\7z1505-src\cpp\7zip\archive\lzmahandler.cpp
; Line 558
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T71013[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T71013[ebp], 0
	je	SHORT $LN3@CreateArc
	push	0
	mov	ecx, DWORD PTR $T71013[ebp]
	call	??0CHandler@NLzma@NArchive@@QAE@_N@Z	; NArchive::NLzma::CHandler::CHandler
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@CreateArc
$LN3@CreateArc:
	mov	DWORD PTR tv75[ebp], 0
$LN4@CreateArc:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T71012[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T71012[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ$0:
	mov	eax, DWORD PTR $T71013[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateArc@NLzmaAr@NLzma@NArchive@@YGPAUIInArchive@@XZ ENDP ; NArchive::NLzma::NLzmaAr::CreateArc
PUBLIC	??1?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	??_7CHandler@NLzma@NArchive@@6BIArchiveOpenSeq@@@ ; NArchive::NLzma::CHandler::`vftable'
PUBLIC	??_7CHandler@NLzma@NArchive@@6BIInArchive@@@	; NArchive::NLzma::CHandler::`vftable'
PUBLIC	??0IArchiveOpenSeq@@QAE@XZ			; IArchiveOpenSeq::IArchiveOpenSeq
PUBLIC	??0IInArchive@@QAE@XZ				; IInArchive::IInArchive
PUBLIC	??_R4CHandler@NLzma@NArchive@@6BIInArchive@@@	; NArchive::NLzma::CHandler::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCHandler@NLzma@NArchive@@@8		; NArchive::NLzma::CHandler `RTTI Type Descriptor'
PUBLIC	??_R3CHandler@NLzma@NArchive@@8			; NArchive::NLzma::CHandler::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CHandler@NLzma@NArchive@@8			; NArchive::NLzma::CHandler::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CHandler@NLzma@NArchive@@8	; NArchive::NLzma::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IInArchive@@8			; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIInArchive@@@8				; IInArchive `RTTI Type Descriptor'
PUBLIC	??_R3IInArchive@@8				; IInArchive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInArchive@@8				; IInArchive::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@IArchiveOpenSeq@@8			; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUIArchiveOpenSeq@@@8			; IArchiveOpenSeq `RTTI Type Descriptor'
PUBLIC	??_R3IArchiveOpenSeq@@8				; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IArchiveOpenSeq@@8				; IArchiveOpenSeq::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IArchiveOpenSeq@@8		; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	?QueryInterface@CHandler@NLzma@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NLzma::CHandler::QueryInterface
PUBLIC	?AddRef@CHandler@NLzma@NArchive@@UAGKXZ		; NArchive::NLzma::CHandler::AddRef
PUBLIC	?Release@CHandler@NLzma@NArchive@@UAGKXZ	; NArchive::NLzma::CHandler::Release
PUBLIC	??_R4CHandler@NLzma@NArchive@@6BIArchiveOpenSeq@@@ ; NArchive::NLzma::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NLzma@NArchive@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NLzma::CHandler::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CHandler@NLzma@NArchive@@W3AGKXZ	; [thunk]:NArchive::NLzma::CHandler::AddRef`adjustor{4}'
PUBLIC	?Release@CHandler@NLzma@NArchive@@W3AGKXZ	; [thunk]:NArchive::NLzma::CHandler::Release`adjustor{4}'
;	COMDAT ??_R4CHandler@NLzma@NArchive@@6BIArchiveOpenSeq@@@
rdata$r	SEGMENT
??_R4CHandler@NLzma@NArchive@@6BIArchiveOpenSeq@@@ DD 00H ; NArchive::NLzma::CHandler::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NLzma@NArchive@@@8
	DD	FLAT:??_R3CHandler@NLzma@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R17?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IArchiveOpenSeq@@8 DD FLAT:??_R0?AUIArchiveOpenSeq@@@8 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_R2IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R2IArchiveOpenSeq@@8 DD FLAT:??_R1A@?0A@EA@IArchiveOpenSeq@@8 ; IArchiveOpenSeq::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R3IArchiveOpenSeq@@8 DD 00H				; IArchiveOpenSeq::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIArchiveOpenSeq@@@8
_DATA	SEGMENT
??_R0?AUIArchiveOpenSeq@@@8 DD FLAT:??_7type_info@@6B@	; IArchiveOpenSeq `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIArchiveOpenSeq@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@IArchiveOpenSeq@@8
rdata$r	SEGMENT
??_R13?0A@EA@IArchiveOpenSeq@@8 DD FLAT:??_R0?AUIArchiveOpenSeq@@@8 ; IArchiveOpenSeq::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IInArchive@@8
rdata$r	SEGMENT
??_R2IInArchive@@8 DD FLAT:??_R1A@?0A@EA@IInArchive@@8	; IInArchive::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInArchive@@8
rdata$r	SEGMENT
??_R3IInArchive@@8 DD 00H				; IInArchive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInArchive@@@8
_DATA	SEGMENT
??_R0?AUIInArchive@@@8 DD FLAT:??_7type_info@@6B@	; IInArchive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IInArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInArchive@@8 DD FLAT:??_R0?AUIInArchive@@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CHandler@NLzma@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CHandler@NLzma@NArchive@@8 DD FLAT:??_R0?AVCHandler@NLzma@NArchive@@@8 ; NArchive::NLzma::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CHandler@NLzma@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CHandler@NLzma@NArchive@@8
rdata$r	SEGMENT
??_R2CHandler@NLzma@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CHandler@NLzma@NArchive@@8 ; NArchive::NLzma::CHandler::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInArchive@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@IArchiveOpenSeq@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CHandler@NLzma@NArchive@@8
rdata$r	SEGMENT
??_R3CHandler@NLzma@NArchive@@8 DD 00H			; NArchive::NLzma::CHandler::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	06H
	DD	FLAT:??_R2CHandler@NLzma@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCHandler@NLzma@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCHandler@NLzma@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NLzma::CHandler `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCHandler@NLzma@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CHandler@NLzma@NArchive@@6BIInArchive@@@
rdata$r	SEGMENT
??_R4CHandler@NLzma@NArchive@@6BIInArchive@@@ DD 00H	; NArchive::NLzma::CHandler::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NLzma@NArchive@@@8
	DD	FLAT:??_R3CHandler@NLzma@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CHandler@NLzma@NArchive@@6BIArchiveOpenSeq@@@
CONST	SEGMENT
??_7CHandler@NLzma@NArchive@@6BIArchiveOpenSeq@@@ DD FLAT:??_R4CHandler@NLzma@NArchive@@6BIArchiveOpenSeq@@@ ; NArchive::NLzma::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NLzma@NArchive@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NLzma@NArchive@@W3AGKXZ
	DD	FLAT:?Release@CHandler@NLzma@NArchive@@W3AGKXZ
	DD	FLAT:?OpenSeq@CHandler@NLzma@NArchive@@UAGJPAUISequentialInStream@@@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NLzma@NArchive@@6BIInArchive@@@
CONST	SEGMENT
??_7CHandler@NLzma@NArchive@@6BIInArchive@@@ DD FLAT:??_R4CHandler@NLzma@NArchive@@6BIInArchive@@@ ; NArchive::NLzma::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NLzma@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NLzma@NArchive@@UAGKXZ
	DD	FLAT:?Release@CHandler@NLzma@NArchive@@UAGKXZ
	DD	FLAT:?Open@CHandler@NLzma@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	FLAT:?Close@CHandler@NLzma@NArchive@@UAGJXZ
	DD	FLAT:?GetNumberOfItems@CHandler@NLzma@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetProperty@CHandler@NLzma@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?Extract@CHandler@NLzma@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	FLAT:?GetArchiveProperty@CHandler@NLzma@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?GetNumberOfProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetPropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z
	DD	FLAT:?GetNumberOfArchiveProperties@CHandler@NLzma@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetArchivePropertyInfo@CHandler@NLzma@NArchive@@UAGJIPAPA_WPAKPAG@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CHandler@NLzma@NArchive@@QAE@_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CHandler@NLzma@NArchive@@QAE@_N@Z$0
__ehfuncinfo$??0CHandler@NLzma@NArchive@@QAE@_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CHandler@NLzma@NArchive@@QAE@_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CHandler@NLzma@NArchive@@QAE@_N@Z
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_lzma86$ = 8						; size = 1
??0CHandler@NLzma@NArchive@@QAE@_N@Z PROC		; NArchive::NLzma::CHandler::CHandler, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CHandler@NLzma@NArchive@@QAE@_N@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0IArchiveOpenSeq@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CHandler@NLzma@NArchive@@6BIInArchive@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CHandler@NLzma@NArchive@@6BIArchiveOpenSeq@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _lzma86$[ebp]
	mov	BYTE PTR [edx+32], al
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CHandler@NLzma@NArchive@@QAE@_N@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__ehhandler$??0CHandler@NLzma@NArchive@@QAE@_N@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CHandler@NLzma@NArchive@@QAE@_N@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CHandler@NLzma@NArchive@@QAE@_N@Z ENDP		; NArchive::NLzma::CHandler::CHandler
EXTRN	_IID_IArchiveOpenSeq:BYTE
EXTRN	_IID_IInArchive:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CHandler@NLzma@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CHandler@NLzma@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::NLzma::CHandler::QueryInterface, COMDAT
; Line 201
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@3
$LN6@QueryInter@3:
	push	OFFSET _IID_IInArchive
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@3
$LN4@QueryInter@3:
	push	OFFSET _IID_IArchiveOpenSeq
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@3
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@3
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN10@QueryInter@3
$LN9@QueryInter@3:
	mov	DWORD PTR tv92[ebp], 0
$LN10@QueryInter@3:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN5@QueryInter@3
$LN2@QueryInter@3:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@3
$LN5@QueryInter@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	xor	eax, eax
$LN7@QueryInter@3:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CHandler@NLzma@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::NLzma::CHandler::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NLzma@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CHandler@NLzma@NArchive@@UAGKXZ PROC		; NArchive::NLzma::CHandler::AddRef, COMDAT
; Line 201
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CHandler@NLzma@NArchive@@UAGKXZ ENDP		; NArchive::NLzma::CHandler::AddRef
_TEXT	ENDS
PUBLIC	??_GCHandler@NLzma@NArchive@@QAEPAXI@Z		; NArchive::NLzma::CHandler::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CHandler@NLzma@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T71039 = -8						; size = 4
$T71038 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CHandler@NLzma@NArchive@@UAGKXZ PROC		; NArchive::NLzma::CHandler::Release, COMDAT
; Line 201
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN2@Release@3
$LN1@Release@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T71039[ebp], edx
	mov	eax, DWORD PTR $T71039[ebp]
	mov	DWORD PTR $T71038[ebp], eax
	cmp	DWORD PTR $T71038[ebp], 0
	je	SHORT $LN4@Release@3
	push	1
	mov	ecx, DWORD PTR $T71038[ebp]
	call	??_GCHandler@NLzma@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@3
$LN4@Release@3:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@3:
	xor	eax, eax
$LN2@Release@3:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CHandler@NLzma@NArchive@@UAGKXZ ENDP		; NArchive::NLzma::CHandler::Release
_TEXT	ENDS
PUBLIC	??1CHandler@NLzma@NArchive@@QAE@XZ		; NArchive::NLzma::CHandler::~CHandler
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCHandler@NLzma@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCHandler@NLzma@NArchive@@QAEPAXI@Z PROC		; NArchive::NLzma::CHandler::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CHandler@NLzma@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCHandler@NLzma@NArchive@@QAEPAXI@Z ENDP		; NArchive::NLzma::CHandler::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_7IInArchive@@6B@				; IInArchive::`vftable'
PUBLIC	??_R4IInArchive@@6B@				; IInArchive::`RTTI Complete Object Locator'
;	COMDAT ??_R4IInArchive@@6B@
rdata$r	SEGMENT
??_R4IInArchive@@6B@ DD 00H				; IInArchive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInArchive@@@8
	DD	FLAT:??_R3IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_7IInArchive@@6B@
CONST	SEGMENT
??_7IInArchive@@6B@ DD FLAT:??_R4IInArchive@@6B@	; IInArchive::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInArchive@@QAE@XZ PROC				; IInArchive::IInArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInArchive@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInArchive@@QAE@XZ ENDP				; IInArchive::IInArchive
_TEXT	ENDS
PUBLIC	??_7IArchiveOpenSeq@@6B@			; IArchiveOpenSeq::`vftable'
PUBLIC	??_R4IArchiveOpenSeq@@6B@			; IArchiveOpenSeq::`RTTI Complete Object Locator'
;	COMDAT ??_R4IArchiveOpenSeq@@6B@
rdata$r	SEGMENT
??_R4IArchiveOpenSeq@@6B@ DD 00H			; IArchiveOpenSeq::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIArchiveOpenSeq@@@8
	DD	FLAT:??_R3IArchiveOpenSeq@@8
rdata$r	ENDS
;	COMDAT ??_7IArchiveOpenSeq@@6B@
CONST	SEGMENT
??_7IArchiveOpenSeq@@6B@ DD FLAT:??_R4IArchiveOpenSeq@@6B@ ; IArchiveOpenSeq::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IArchiveOpenSeq@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IArchiveOpenSeq@@QAE@XZ PROC				; IArchiveOpenSeq::IArchiveOpenSeq, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IArchiveOpenSeq@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IArchiveOpenSeq@@QAE@XZ ENDP				; IArchiveOpenSeq::IArchiveOpenSeq
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CHandler@NLzma@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CHandler@NLzma@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CHandler@NLzma@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CHandler@NLzma@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CHandler@NLzma@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CHandler@NLzma@NArchive@@QAE@XZ PROC			; NArchive::NLzma::CHandler::~CHandler, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CHandler@NLzma@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 40					; 00000028H
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CHandler@NLzma@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__ehhandler$??1CHandler@NLzma@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CHandler@NLzma@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CHandler@NLzma@NArchive@@QAE@XZ ENDP			; NArchive::NLzma::CHandler::~CHandler
xdata$x	SEGMENT
__unwindtable$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ$0
__ehfuncinfo$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv75 = -24						; size = 4
$T71061 = -20						; size = 4
$T71060 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ PROC ; NArchive::NLzma::NLzma86Ar::CreateArc
; Line 569
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	80					; 00000050H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T71061[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T71061[ebp], 0
	je	SHORT $LN3@CreateArc@2
	push	1
	mov	ecx, DWORD PTR $T71061[ebp]
	call	??0CHandler@NLzma@NArchive@@QAE@_N@Z	; NArchive::NLzma::CHandler::CHandler
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN4@CreateArc@2
$LN3@CreateArc@2:
	mov	DWORD PTR tv75[ebp], 0
$LN4@CreateArc@2:
	mov	eax, DWORD PTR tv75[ebp]
	mov	DWORD PTR $T71060[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T71060[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ$0:
	mov	eax, DWORD PTR $T71061[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateArc@NLzma86Ar@NLzma@NArchive@@YGPAUIInArchive@@XZ ENDP ; NArchive::NLzma::NLzma86Ar::CreateArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialInStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialInStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z PROC ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z ENDP ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@5
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@5:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialOutStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::CMyComPtr<ICompressSetDecoderProperties2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::~CMyComPtr<ICompressSetDecoderProperties2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ PROC ; CMyComPtr<ICompressSetDecoderProperties2>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ ENDP ; CMyComPtr<ICompressSetDecoderProperties2>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z PROC ; CMyComPtr<ICompressFilter>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@3
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@3:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@3
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@3:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressFilter@@@@QAEPAUICompressFilter@@PAU1@@Z ENDP ; CMyComPtr<ICompressFilter>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z PROC ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z PROC ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ENDP ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator ICompressCoder *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator ICompressCoder *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z PROC ; CMyComPtr<ICompressCoder>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@4
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@4:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@4
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@4:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z ENDP ; CMyComPtr<ICompressCoder>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ PROC		; CMyComPtr<ICompressCoder>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ ENDP		; CMyComPtr<ICompressCoder>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ PROC		; CMyComPtr<IInStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIInStream@@@@QAEXXZ ENDP		; CMyComPtr<IInStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z PROC ; CMyComPtr<IInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@5
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@5:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@5
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@5:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ENDP ; CMyComPtr<IInStream>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIInStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIInStream@@@@QBE_NXZ PROC		; CMyComPtr<IInStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIInStream@@@@QBE_NXZ ENDP		; CMyComPtr<IInStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ PROC ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ENDP ; CMyComPtr<IArchiveOpenCallback>::operator IArchiveOpenCallback *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ PROC ; CMyComPtr<IArchiveOpenCallback>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveOpenCallback@@@@QBEPAUIArchiveOpenCallback@@XZ ENDP ; CMyComPtr<IArchiveOpenCallback>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z PROC ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetDecoderProperties2>, COMDAT
; _this$ = ecx
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UICompressCoder@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z ENDP ; CMyComPtr<ICompressCoder>::QueryInterface<ICompressSetDecoderProperties2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NLzma@NArchive@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NLzma@NArchive@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NLzma::CHandler::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CHandler@NLzma@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NLzma::CHandler::QueryInterface
?QueryInterface@CHandler@NLzma@NArchive@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NLzma::CHandler::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NLzma@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NLzma@NArchive@@W3AGKXZ PROC		; [thunk]:NArchive::NLzma::CHandler::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CHandler@NLzma@NArchive@@UAGKXZ ; NArchive::NLzma::CHandler::Release
?Release@CHandler@NLzma@NArchive@@W3AGKXZ ENDP		; [thunk]:NArchive::NLzma::CHandler::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NLzma@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NLzma@NArchive@@W3AGKXZ PROC		; [thunk]:NArchive::NLzma::CHandler::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CHandler@NLzma@NArchive@@UAGKXZ	; NArchive::NLzma::CHandler::AddRef
?AddRef@CHandler@NLzma@NArchive@@W3AGKXZ ENDP		; [thunk]:NArchive::NLzma::CHandler::AddRef`adjustor{4}'
_TEXT	ENDS
PUBLIC	??0CRegisterArc@NLzmaAr@NLzma@NArchive@@QAE@XZ	; NArchive::NLzma::NLzmaAr::CRegisterArc::CRegisterArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_RegisterArc@NLzmaAr@NLzma@NArchive@@YAXXZ
text$yc	SEGMENT
??__Eg_RegisterArc@NLzmaAr@NLzma@NArchive@@YAXXZ PROC	; NArchive::NLzma::NLzmaAr::`dynamic initializer for 'g_RegisterArc'', COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\lzmahandler.cpp
; Line 558
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _g_RegisterArc
	call	??0CRegisterArc@NLzmaAr@NLzma@NArchive@@QAE@XZ ; NArchive::NLzma::NLzmaAr::CRegisterArc::CRegisterArc
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Eg_RegisterArc@NLzmaAr@NLzma@NArchive@@YAXXZ ENDP	; NArchive::NLzma::NLzmaAr::`dynamic initializer for 'g_RegisterArc''
text$yc	ENDS
EXTRN	?RegisterArc@@YGXPBUCArcInfo@@@Z:PROC		; RegisterArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CRegisterArc@NLzmaAr@NLzma@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRegisterArc@NLzmaAr@NLzma@NArchive@@QAE@XZ PROC	; NArchive::NLzma::NLzmaAr::CRegisterArc::CRegisterArc, COMDAT
; _this$ = ecx
; Line 558
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET _g_ArcInfo
	call	?RegisterArc@@YGXPBUCArcInfo@@@Z	; RegisterArc
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CRegisterArc@NLzmaAr@NLzma@NArchive@@QAE@XZ ENDP	; NArchive::NLzma::NLzmaAr::CRegisterArc::CRegisterArc
_TEXT	ENDS
PUBLIC	??0CRegisterArc@NLzma86Ar@NLzma@NArchive@@QAE@XZ ; NArchive::NLzma::NLzma86Ar::CRegisterArc::CRegisterArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_RegisterArc@NLzma86Ar@NLzma@NArchive@@YAXXZ
text$yc	SEGMENT
??__Eg_RegisterArc@NLzma86Ar@NLzma@NArchive@@YAXXZ PROC	; NArchive::NLzma::NLzma86Ar::`dynamic initializer for 'g_RegisterArc'', COMDAT
; Line 569
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _g_RegisterArc
	call	??0CRegisterArc@NLzma86Ar@NLzma@NArchive@@QAE@XZ ; NArchive::NLzma::NLzma86Ar::CRegisterArc::CRegisterArc
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Eg_RegisterArc@NLzma86Ar@NLzma@NArchive@@YAXXZ ENDP	; NArchive::NLzma::NLzma86Ar::`dynamic initializer for 'g_RegisterArc''
; Function compile flags: /Odtp /RTCsu
text$yc	ENDS
;	COMDAT ??0CRegisterArc@NLzma86Ar@NLzma@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRegisterArc@NLzma86Ar@NLzma@NArchive@@QAE@XZ PROC	; NArchive::NLzma::NLzma86Ar::CRegisterArc::CRegisterArc, COMDAT
; _this$ = ecx
; Line 569
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET _g_ArcInfo
	call	?RegisterArc@@YGXPBUCArcInfo@@@Z	; RegisterArc
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CRegisterArc@NLzma86Ar@NLzma@NArchive@@QAE@XZ ENDP	; NArchive::NLzma::NLzma86Ar::CRegisterArc::CRegisterArc
_TEXT	ENDS
_BSS	SEGMENT
_g_RegisterArc DB 01H DUP (?)
_g_RegisterArc DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_g_RegisterArc$initializer$ DD FLAT:??__Eg_RegisterArc@NLzmaAr@NLzma@NArchive@@YAXXZ
_g_RegisterArc$initializer$ DD FLAT:??__Eg_RegisterArc@NLzma86Ar@NLzma@NArchive@@YAXXZ
CRT$XCU	ENDS
END
