; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\SplitHandler.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

CONST	SEGMENT
_kProps	DB	03H
	DB	07H
	ORG $+2
_kArcProps DB	027H
	DB	04fH
	ORG $+2
$SG69239 DB	'aa', 00H
	ORG $+1
$SG69246 DB	'01', 00H
	ORG $+1
$SG69260 DB	'file', 00H
	ORG $+3
$SG69522 DB	'Split', 00H
	ORG $+2
$SG69523 DB	'001', 00H
_g_ArcInfo DW	00H
	DB	0eaH
	DB	00H
	DW	00H
	ORG $+2
	DD	00H
	DD	FLAT:$SG69522
	DD	FLAT:$SG69523
	DD	00H
	DD	FLAT:?CreateArc@NSplit@NArchive@@YGPAUIInArchive@@XZ
	DD	00H
	DD	00H
CONST	ENDS
PUBLIC	?GetNumberOfProperties@CHandler@NSplit@NArchive@@UAGJPAI@Z ; NArchive::NSplit::CHandler::GetNumberOfProperties
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\splithandler.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfProperties@CHandler@NSplit@NArchive@@UAGJPAI@Z PROC ; NArchive::NSplit::CHandler::GetNumberOfProperties
; Line 51
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [eax], 2
	xor	eax, eax
	pop	ebp
	ret	8
?GetNumberOfProperties@CHandler@NSplit@NArchive@@UAGJPAI@Z ENDP ; NArchive::NSplit::CHandler::GetNumberOfProperties
_TEXT	ENDS
PUBLIC	?GetPropertyInfo@CHandler@NSplit@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NSplit::CHandler::GetPropertyInfo
EXTRN	?k7z_PROPID_To_VARTYPE@@3QBEB:BYTE		; k7z_PROPID_To_VARTYPE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_name$ = 16						; size = 4
_propID$ = 20						; size = 4
_varType$ = 24						; size = 4
?GetPropertyInfo@CHandler@NSplit@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::NSplit::CHandler::GetPropertyInfo
; Line 51
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _index$[ebp], 2
	jb	SHORT $LN1@GetPropert
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@GetPropert
$LN1@GetPropert:
	mov	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR _kProps[eax]
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _propID$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR ?k7z_PROPID_To_VARTYPE@@3QBEB[ecx]
	mov	eax, DWORD PTR _varType$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	eax, eax
$LN2@GetPropert:
	pop	ebp
	ret	20					; 00000014H
?GetPropertyInfo@CHandler@NSplit@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::NSplit::CHandler::GetPropertyInfo
_TEXT	ENDS
PUBLIC	?GetNumberOfArchiveProperties@CHandler@NSplit@NArchive@@UAGJPAI@Z ; NArchive::NSplit::CHandler::GetNumberOfArchiveProperties
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numProps$ = 12						; size = 4
?GetNumberOfArchiveProperties@CHandler@NSplit@NArchive@@UAGJPAI@Z PROC ; NArchive::NSplit::CHandler::GetNumberOfArchiveProperties
; Line 52
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _numProps$[ebp]
	mov	DWORD PTR [eax], 2
	xor	eax, eax
	pop	ebp
	ret	8
?GetNumberOfArchiveProperties@CHandler@NSplit@NArchive@@UAGJPAI@Z ENDP ; NArchive::NSplit::CHandler::GetNumberOfArchiveProperties
_TEXT	ENDS
PUBLIC	?GetArchivePropertyInfo@CHandler@NSplit@NArchive@@UAGJIPAPA_WPAKPAG@Z ; NArchive::NSplit::CHandler::GetArchivePropertyInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_name$ = 16						; size = 4
_propID$ = 20						; size = 4
_varType$ = 24						; size = 4
?GetArchivePropertyInfo@CHandler@NSplit@NArchive@@UAGJIPAPA_WPAKPAG@Z PROC ; NArchive::NSplit::CHandler::GetArchivePropertyInfo
; Line 52
	push	ebp
	mov	ebp, esp
	cmp	DWORD PTR _index$[ebp], 2
	jb	SHORT $LN1@GetArchive
	mov	eax, -2147024809			; 80070057H
	jmp	SHORT $LN2@GetArchive
$LN1@GetArchive:
	mov	eax, DWORD PTR _index$[ebp]
	movzx	ecx, BYTE PTR _kArcProps[eax]
	mov	edx, DWORD PTR _propID$[ebp]
	mov	DWORD PTR [edx], ecx
	mov	eax, DWORD PTR _propID$[ebp]
	mov	ecx, DWORD PTR [eax]
	movzx	dx, BYTE PTR ?k7z_PROPID_To_VARTYPE@@3QBEB[ecx]
	mov	eax, DWORD PTR _varType$[ebp]
	mov	WORD PTR [eax], dx
	mov	ecx, DWORD PTR _name$[ebp]
	mov	DWORD PTR [ecx], 0
	xor	eax, eax
$LN2@GetArchive:
	pop	ebp
	ret	20					; 00000014H
?GetArchivePropertyInfo@CHandler@NSplit@NArchive@@UAGJIPAPA_WPAKPAG@Z ENDP ; NArchive::NSplit::CHandler::GetArchivePropertyInfo
_TEXT	ENDS
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
PUBLIC	?Size@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<IInStream> >::Size
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	?IsEmpty@?$CRecordVector@_K@@QBE_NXZ		; CRecordVector<unsigned __int64>::IsEmpty
PUBLIC	??0CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::CPropVariant
PUBLIC	?GetArchiveProperty@CHandler@NSplit@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ; NArchive::NSplit::CHandler::GetArchiveProperty
EXTRN	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z:PROC ; NWindows::NCOM::CPropVariant::Detach
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -32						; size = 4
$T70083 = -28						; size = 4
_prop$ = -20						; size = 16
_this$ = 8						; size = 4
_propID$ = 12						; size = 4
_value$ = 16						; size = 4
?GetArchiveProperty@CHandler@NSplit@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z PROC ; NArchive::NSplit::CHandler::GetArchiveProperty
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 56
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
; Line 57
	mov	eax, DWORD PTR _propID$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	mov	ecx, DWORD PTR tv67[ebp]
	sub	ecx, 1
	mov	DWORD PTR tv67[ebp], ecx
	cmp	DWORD PTR tv67[ebp], 78			; 0000004eH
	ja	SHORT $LN6@GetArchive@2
	mov	edx, DWORD PTR tv67[ebp]
	movzx	eax, BYTE PTR $LN10@GetArchive@2[edx]
	jmp	DWORD PTR $LN14@GetArchive@2[eax*4]
$LN5@GetArchive@2:
; Line 59
	push	0
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	SHORT $LN6@GetArchive@2
$LN4@GetArchive@2:
; Line 60
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?IsEmpty@?$CRecordVector@_K@@QBE_NXZ	; CRecordVector<unsigned __int64>::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN3@GetArchive@2
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN3@GetArchive@2:
	jmp	SHORT $LN6@GetArchive@2
$LN2@GetArchive@2:
; Line 61
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR [ecx+48]
	push	eax
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	SHORT $LN6@GetArchive@2
$LN1@GetArchive@2:
; Line 62
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<IInStream> >::Size
	push	eax
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z ; NWindows::NCOM::CPropVariant::operator=
$LN6@GetArchive@2:
; Line 64
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach
; Line 65
	mov	DWORD PTR $T70083[ebp], 0
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T70083[ebp]
; Line 66
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@GetArchive@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	3
$LN13@GetArchive@2:
	DD	1
	DD	$LN12@GetArchive@2
$LN12@GetArchive@2:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN11@GetArchive@2
$LN11@GetArchive@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
	npad	3
$LN14@GetArchive@2:
	DD	$LN5@GetArchive@2
	DD	$LN1@GetArchive@2
	DD	$LN4@GetArchive@2
	DD	$LN2@GetArchive@2
	DD	$LN6@GetArchive@2
$LN10@GetArchive@2:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?GetArchiveProperty@CHandler@NSplit@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z ENDP ; NArchive::NSplit::CHandler::GetArchiveProperty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 47
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 49
	xor	eax, eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	WORD PTR [ecx], ax
; Line 50
	xor	edx, edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	WORD PTR [eax+2], dx
; Line 54
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 55
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::CPropVariant
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
_TEXT	ENDS
PUBLIC	??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator&
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	?GetNextName@CSeqName@NSplit@NArchive@@QAE_NAAVUString@@@Z ; NArchive::NSplit::CSeqName::GetNextName
PUBLIC	??1?$CMyComPtr@UIInStream@@@@QAE@XZ		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
PUBLIC	?Add@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEIABV?$CMyComPtr@UIInStream@@@@@Z ; CObjectVector<CMyComPtr<IInStream> >::Add
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>
PUBLIC	?Add@?$CRecordVector@_K@@QAEI_K@Z		; CRecordVector<unsigned __int64>::Add
PUBLIC	??1CSeqName@NSplit@NArchive@@QAE@XZ		; NArchive::NSplit::CSeqName::~CSeqName
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	?RightPtr@UString@@QBEPB_WI@Z			; UString::RightPtr
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	??0CSeqName@NSplit@NArchive@@QAE@XZ		; NArchive::NSplit::CSeqName::CSeqName
PUBLIC	?MakeLower_Ascii@UString@@QAEXXZ		; UString::MakeLower_Ascii
PUBLIC	?Ptr@UString@@QBEPB_WI@Z			; UString::Ptr
PUBLIC	?Left@UString@@QBE?AV1@I@Z			; UString::Left
PUBLIC	?ReverseFind_Dot@UString@@QBEHXZ		; UString::ReverseFind_Dot
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
PUBLIC	??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator->
PUBLIC	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
PUBLIC	??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator!
PUBLIC	??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator&
PUBLIC	??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::CMyComPtr<IArchiveOpenVolumeCallback>
PUBLIC	?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z ; NArchive::NSplit::CHandler::Open2
EXTRN	?SetFrom@UString@@QAEXPB_WI@Z:PROC		; UString::SetFrom
EXTRN	?SetFromAscii@UString@@QAEXPBD@Z:PROC		; UString::SetFromAscii
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
EXTRN	??H@YG?AVUString@@ABV0@0@Z:PROC			; operator+
EXTRN	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z:PROC	; StringsAreEqual_Ascii
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
EXTRN	??0UString@@QAE@PB_W@Z:PROC			; UString::UString
EXTRN	??4UString@@QAEAAV0@PB_W@Z:PROC			; UString::operator=
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
EXTRN	_IID_IArchiveOpenVolumeCallback:BYTE
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	@__security_check_cookie@4:PROC
xdata$x	SEGMENT
__ehfuncinfo$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z DD 019930522H
	DD	0eH
	DD	FLAT:__unwindtable$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$6
	DD	06H
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$7
	DD	07H
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$8
	DD	06H
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$9
	DD	06H
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$10
	DD	06H
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$11
	DD	0bH
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$12
	DD	0cH
	DD	FLAT:__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$13
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv389 = -440						; size = 4
tv370 = -436						; size = 4
tv276 = -432						; size = 4
tv468 = -428						; size = 4
tv173 = -424						; size = 4
tv466 = -420						; size = 4
tv178 = -416						; size = 4
tv131 = -412						; size = 4
$T70112 = -408						; size = 4
$T70111 = -404						; size = 4
$T70110 = -400						; size = 4
$T70109 = -396						; size = 4
$T70108 = -392						; size = 4
$T70107 = -388						; size = 4
$T70106 = -384						; size = 4
$T70105 = -380						; size = 4
$T70104 = -376						; size = 4
$T70103 = -372						; size = 4
$T70102 = -368						; size = 12
$T70101 = -356						; size = 12
$T70100 = -344						; size = 4
$T70099 = -340						; size = 4
$T70098 = -336						; size = 4
$T70097 = -332						; size = 4
$T70096 = -328						; size = 4
___result__$69297 = -324				; size = 4
_numFiles$69296 = -316					; size = 8
___result__$69290 = -304				; size = 4
_prop$69289 = -296					; size = 16
_result$69282 = -276					; size = 4
_nextStream$69281 = -268				; size = 4
_fullName$69278 = -256					; size = 12
___result__$69272 = -240				; size = 4
_numFiles$69271 = -232					; size = 8
___result__$69264 = -220				; size = 4
_prop$69263 = -212					; size = 16
_size$ = -192						; size = 8
_splitStyle$ = -181					; size = 1
_numLetters$ = -180					; size = 4
_seqName$ = -172					; size = 28
_ext2$ = -136						; size = 12
_ext$ = -116						; size = 12
_prefix$ = -96						; size = 12
_dotPos$ = -80						; size = 4
___result__$69224 = -76					; size = 4
_prop$69223 = -68					; size = 16
_name$ = -44						; size = 12
_volumeCallback$ = -24					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_stream$ = 8						; size = 4
_callback$ = 12						; size = 4
?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z PROC ; NArchive::NSplit::CHandler::Open2
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\splithandler.cpp
; Line 125
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 428				; 000001acH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-440]
	mov	ecx, 107				; 0000006bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 126
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _this$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 127
	cmp	DWORD PTR _callback$[ebp], 0
	jne	SHORT $LN31@Open2
; Line 128
	mov	eax, 1
	jmp	$LN32@Open2
$LN31@Open2:
; Line 130
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::CMyComPtr<IArchiveOpenVolumeCallback>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 131
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator&
	mov	esi, esp
	push	eax
	push	OFFSET _IID_IArchiveOpenVolumeCallback
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _callback$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 132
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN30@Open2
; Line 133
	mov	DWORD PTR $T70096[ebp], 1
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T70096[ebp]
	jmp	$LN32@Open2
$LN30@Open2:
; Line 135
	lea	ecx, DWORD PTR _name$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 137
	lea	ecx, DWORD PTR _prop$69223[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 138
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator->
	mov	DWORD PTR tv131[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _prop$69223[ebp]
	push	eax
	push	4
	mov	ecx, DWORD PTR tv131[ebp]
	push	ecx
	mov	edx, DWORD PTR tv131[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$69224[ebp], eax
	cmp	DWORD PTR ___result__$69224[ebp], 0
	je	SHORT $LN29@Open2
	mov	edx, DWORD PTR ___result__$69224[ebp]
	mov	DWORD PTR $T70097[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prop$69223[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T70097[ebp]
	jmp	$LN32@Open2
$LN29@Open2:
; Line 139
	movzx	eax, WORD PTR _prop$69223[ebp]
	cmp	eax, 8
	je	SHORT $LN28@Open2
; Line 140
	mov	DWORD PTR $T70098[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prop$69223[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T70098[ebp]
	jmp	$LN32@Open2
$LN28@Open2:
; Line 141
	mov	ecx, DWORD PTR _prop$69223[ebp+8]
	push	ecx
	lea	ecx, DWORD PTR _name$[ebp]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
; Line 142
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prop$69223[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 144
	lea	ecx, DWORD PTR _name$[ebp]
	call	?ReverseFind_Dot@UString@@QBEHXZ	; UString::ReverseFind_Dot
	mov	DWORD PTR _dotPos$[ebp], eax
; Line 145
	mov	edx, DWORD PTR _dotPos$[ebp]
	add	edx, 1
	push	edx
	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	lea	ecx, DWORD PTR _name$[ebp]
	call	?Left@UString@@QBE?AV1@I@Z		; UString::Left
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 146
	mov	ecx, DWORD PTR _dotPos$[ebp]
	add	ecx, 1
	push	ecx
	lea	ecx, DWORD PTR _name$[ebp]
	call	?Ptr@UString@@QBEPB_WI@Z		; UString::Ptr
	push	eax
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??0UString@@QAE@PB_W@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 147
	lea	edx, DWORD PTR _ext$[ebp]
	push	edx
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 148
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	?MakeLower_Ascii@UString@@QAEXXZ	; UString::MakeLower_Ascii
; Line 150
	lea	ecx, DWORD PTR _seqName$[ebp]
	call	??0CSeqName@NSplit@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 6
; Line 152
	mov	DWORD PTR _numLetters$[ebp], 2
; Line 153
	mov	BYTE PTR _splitStyle$[ebp], 0
; Line 155
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	eax, 2
	jb	SHORT $LN27@Open2
	push	OFFSET $SG69239
	push	2
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	?RightPtr@UString@@QBEPB_WI@Z		; UString::RightPtr
	push	eax
	call	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z	; StringsAreEqual_Ascii
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@Open2
; Line 157
	mov	BYTE PTR _splitStyle$[ebp], 1
$LN26@Open2:
; Line 158
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _numLetters$[ebp], eax
	jae	SHORT $LN25@Open2
; Line 160
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	esi, eax
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	sub	eax, DWORD PTR _numLetters$[ebp]
	movzx	ecx, WORD PTR [esi+eax*2-2]
	cmp	ecx, 97					; 00000061H
	je	SHORT $LN24@Open2
; Line 161
	jmp	SHORT $LN25@Open2
$LN24@Open2:
; Line 162
	mov	edx, DWORD PTR _numLetters$[ebp]
	add	edx, 1
	mov	DWORD PTR _numLetters$[ebp], edx
; Line 163
	jmp	SHORT $LN26@Open2
$LN25@Open2:
; Line 165
	jmp	$LN23@Open2
$LN27@Open2:
	lea	ecx, DWORD PTR _ext$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	eax, 2
	jb	$LN22@Open2
	push	OFFSET $SG69246
	push	2
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	?RightPtr@UString@@QBEPB_WI@Z		; UString::RightPtr
	push	eax
	call	?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z	; StringsAreEqual_Ascii
	movzx	eax, al
	test	eax, eax
	je	$LN22@Open2
$LN21@Open2:
; Line 167
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _numLetters$[ebp], eax
	jae	SHORT $LN20@Open2
; Line 169
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	esi, eax
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	sub	eax, DWORD PTR _numLetters$[ebp]
	movzx	ecx, WORD PTR [esi+eax*2-2]
	cmp	ecx, 48					; 00000030H
	je	SHORT $LN19@Open2
; Line 170
	jmp	SHORT $LN20@Open2
$LN19@Open2:
; Line 171
	mov	edx, DWORD PTR _numLetters$[ebp]
	add	edx, 1
	mov	DWORD PTR _numLetters$[ebp], edx
; Line 172
	jmp	SHORT $LN21@Open2
$LN20@Open2:
; Line 173
	lea	ecx, DWORD PTR _ext$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _numLetters$[ebp], eax
	je	SHORT $LN18@Open2
; Line 174
	mov	DWORD PTR $T70099[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _seqName$[ebp]
	call	??1CSeqName@NSplit@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T70099[ebp]
	jmp	$LN32@Open2
$LN18@Open2:
; Line 176
	jmp	SHORT $LN23@Open2
$LN22@Open2:
; Line 177
	mov	DWORD PTR $T70100[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _seqName$[ebp]
	call	??1CSeqName@NSplit@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T70100[ebp]
	jmp	$LN32@Open2
$LN23@Open2:
; Line 179
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	sub	eax, DWORD PTR _numLetters$[ebp]
	push	eax
	lea	eax, DWORD PTR $T70101[ebp]
	push	eax
	lea	ecx, DWORD PTR _ext$[ebp]
	call	?Left@UString@@QBE?AV1@I@Z		; UString::Left
	mov	DWORD PTR tv178[ebp], eax
	mov	ecx, DWORD PTR tv178[ebp]
	mov	DWORD PTR tv466[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	mov	edx, DWORD PTR tv466[ebp]
	push	edx
	lea	eax, DWORD PTR _prefix$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T70102[ebp]
	push	ecx
	call	??H@YG?AVUString@@ABV0@0@Z		; operator+
	mov	DWORD PTR tv173[ebp], eax
	mov	edx, DWORD PTR tv173[ebp]
	mov	DWORD PTR tv468[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 8
	mov	eax, DWORD PTR tv468[ebp]
	push	eax
	lea	ecx, DWORD PTR _seqName$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	BYTE PTR __$EHRec$[ebp+8], 7
	lea	ecx, DWORD PTR $T70102[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T70101[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 180
	mov	ecx, DWORD PTR _numLetters$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _ext$[ebp]
	call	?RightPtr@UString@@QBEPB_WI@Z		; UString::RightPtr
	push	eax
	lea	ecx, DWORD PTR _seqName$[ebp+12]
	call	??4UString@@QAEAAV0@PB_W@Z		; UString::operator=
; Line 181
	mov	dl, BYTE PTR _splitStyle$[ebp]
	mov	BYTE PTR _seqName$[ebp+24], dl
; Line 183
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	eax, 1
	jae	SHORT $LN16@Open2
; Line 184
	push	OFFSET $SG69260
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?SetFromAscii@UString@@QAEXPBD@Z	; UString::SetFromAscii
; Line 185
	jmp	SHORT $LN15@Open2
$LN16@Open2:
; Line 186
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	sub	eax, 1
	push	eax
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?SetFrom@UString@@QAEXPB_WI@Z		; UString::SetFrom
$LN15@Open2:
; Line 190
	lea	ecx, DWORD PTR _prop$69263[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 9
; Line 191
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator->
	mov	DWORD PTR tv276[ebp], eax
	mov	esi, esp
	lea	eax, DWORD PTR _prop$69263[ebp]
	push	eax
	push	7
	mov	ecx, DWORD PTR tv276[ebp]
	push	ecx
	mov	edx, DWORD PTR tv276[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$69264[ebp], eax
	cmp	DWORD PTR ___result__$69264[ebp], 0
	je	SHORT $LN14@Open2
	mov	edx, DWORD PTR ___result__$69264[ebp]
	mov	DWORD PTR $T70103[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _prop$69263[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _seqName$[ebp]
	call	??1CSeqName@NSplit@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T70103[ebp]
	jmp	$LN32@Open2
$LN14@Open2:
; Line 192
	movzx	eax, WORD PTR _prop$69263[ebp]
	cmp	eax, 21					; 00000015H
	je	SHORT $LN13@Open2
; Line 193
	mov	DWORD PTR $T70104[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _prop$69263[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _seqName$[ebp]
	call	??1CSeqName@NSplit@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T70104[ebp]
	jmp	$LN32@Open2
$LN13@Open2:
; Line 194
	mov	ecx, DWORD PTR _prop$69263[ebp+8]
	mov	DWORD PTR _size$[ebp], ecx
	mov	edx, DWORD PTR _prop$69263[ebp+12]
	mov	DWORD PTR _size$[ebp+4], edx
; Line 195
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _prop$69263[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 197
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+48]
	add	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR [eax+52]
	adc	edx, DWORD PTR _size$[ebp+4]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], ecx
	mov	DWORD PTR [eax+52], edx
; Line 198
	mov	ecx, DWORD PTR _size$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 199
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T70105[ebp]
	call	??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 10		; 0000000aH
	lea	ecx, DWORD PTR $T70105[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEIABV?$CMyComPtr@UIInStream@@@@@Z ; CObjectVector<CMyComPtr<IInStream> >::Add
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR $T70105[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Line 202
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<IInStream> >::Size
	xor	edx, edx
	mov	DWORD PTR _numFiles$69271[ebp], eax
	mov	DWORD PTR _numFiles$69271[ebp+4], edx
; Line 203
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _numFiles$69271[ebp]
	push	eax
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _callback$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$69272[ebp], eax
	cmp	DWORD PTR ___result__$69272[ebp], 0
	je	SHORT $LN11@Open2
	mov	edx, DWORD PTR ___result__$69272[ebp]
	mov	DWORD PTR $T70106[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _seqName$[ebp]
	call	??1CSeqName@NSplit@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T70106[ebp]
	jmp	$LN32@Open2
$LN11@Open2:
; Line 208
	lea	ecx, DWORD PTR _fullName$69278[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
; Line 209
	lea	eax, DWORD PTR _fullName$69278[ebp]
	push	eax
	lea	ecx, DWORD PTR _seqName$[ebp]
	call	?GetNextName@CSeqName@NSplit@NArchive@@QAE_NAAVUString@@@Z ; NArchive::NSplit::CSeqName::GetNextName
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN9@Open2
; Line 210
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _fullName$69278[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN10@Open2
$LN9@Open2:
; Line 211
	lea	ecx, DWORD PTR _nextStream$69281[ebp]
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
; Line 212
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator->
	mov	DWORD PTR tv370[ebp], eax
	lea	ecx, DWORD PTR _nextStream$69281[ebp]
	call	??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator&
	mov	esi, esp
	push	eax
	lea	ecx, DWORD PTR _fullName$69278[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	push	eax
	mov	edx, DWORD PTR tv370[ebp]
	push	edx
	mov	eax, DWORD PTR tv370[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR _result$69282[ebp], eax
; Line 213
	cmp	DWORD PTR _result$69282[ebp], 1
	jne	SHORT $LN8@Open2
; Line 214
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _nextStream$69281[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _fullName$69278[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN10@Open2
$LN8@Open2:
; Line 215
	cmp	DWORD PTR _result$69282[ebp], 0
	je	$LN7@Open2
; Line 216
	mov	eax, DWORD PTR _result$69282[ebp]
	mov	DWORD PTR $T70107[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _nextStream$69281[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _fullName$69278[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _seqName$[ebp]
	call	??1CSeqName@NSplit@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T70107[ebp]
	jmp	$LN32@Open2
$LN7@Open2:
; Line 217
	cmp	DWORD PTR _stream$[ebp], 0
	jne	SHORT $LN6@Open2
; Line 218
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _nextStream$69281[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _fullName$69278[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN10@Open2
$LN6@Open2:
; Line 220
	lea	ecx, DWORD PTR _prop$69289[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 13		; 0000000dH
; Line 221
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::operator->
	mov	DWORD PTR tv389[ebp], eax
	mov	esi, esp
	lea	ecx, DWORD PTR _prop$69289[ebp]
	push	ecx
	push	7
	mov	edx, DWORD PTR tv389[ebp]
	push	edx
	mov	eax, DWORD PTR tv389[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$69290[ebp], eax
	cmp	DWORD PTR ___result__$69290[ebp], 0
	je	$LN5@Open2
	mov	eax, DWORD PTR ___result__$69290[ebp]
	mov	DWORD PTR $T70108[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _prop$69289[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _nextStream$69281[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _fullName$69278[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _seqName$[ebp]
	call	??1CSeqName@NSplit@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T70108[ebp]
	jmp	$LN32@Open2
$LN5@Open2:
; Line 222
	movzx	ecx, WORD PTR _prop$69289[ebp]
	cmp	ecx, 21					; 00000015H
	je	$LN4@Open2
; Line 223
	mov	DWORD PTR $T70109[ebp], -2147024809	; 80070057H
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _prop$69289[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _nextStream$69281[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _fullName$69278[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _seqName$[ebp]
	call	??1CSeqName@NSplit@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T70109[ebp]
	jmp	$LN32@Open2
$LN4@Open2:
; Line 224
	mov	edx, DWORD PTR _prop$69289[ebp+8]
	mov	DWORD PTR _size$[ebp], edx
	mov	eax, DWORD PTR _prop$69289[ebp+12]
	mov	DWORD PTR _size$[ebp+4], eax
; Line 225
	mov	BYTE PTR __$EHRec$[ebp+8], 12		; 0000000cH
	lea	ecx, DWORD PTR _prop$69289[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
; Line 226
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+48]
	add	edx, DWORD PTR _size$[ebp]
	mov	eax, DWORD PTR [ecx+52]
	adc	eax, DWORD PTR _size$[ebp+4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+48], edx
	mov	DWORD PTR [ecx+52], eax
; Line 227
	mov	edx, DWORD PTR _size$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 228
	lea	ecx, DWORD PTR _nextStream$69281[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEIABV?$CMyComPtr@UIInStream@@@@@Z ; CObjectVector<CMyComPtr<IInStream> >::Add
; Line 230
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<IInStream> >::Size
	xor	edx, edx
	mov	DWORD PTR _numFiles$69296[ebp], eax
	mov	DWORD PTR _numFiles$69296[ebp+4], edx
; Line 231
	mov	esi, esp
	push	0
	lea	eax, DWORD PTR _numFiles$69296[ebp]
	push	eax
	mov	ecx, DWORD PTR _callback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _callback$[ebp]
	push	eax
	mov	ecx, DWORD PTR [edx+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$69297[ebp], eax
	cmp	DWORD PTR ___result__$69297[ebp], 0
	je	$LN3@Open2
	mov	edx, DWORD PTR ___result__$69297[ebp]
	mov	DWORD PTR $T70110[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _nextStream$69281[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _fullName$69278[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _seqName$[ebp]
	call	??1CSeqName@NSplit@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T70110[ebp]
	jmp	$LN32@Open2
$LN3@Open2:
; Line 233
	mov	BYTE PTR __$EHRec$[ebp+8], 11		; 0000000bH
	lea	ecx, DWORD PTR _nextStream$69281[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	lea	ecx, DWORD PTR _fullName$69278[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	jmp	$LN11@Open2
$LN10@Open2:
; Line 235
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<IInStream> >::Size
	cmp	eax, 1
	jne	SHORT $LN2@Open2
; Line 237
	movzx	eax, BYTE PTR _splitStyle$[ebp]
	test	eax, eax
	je	SHORT $LN2@Open2
; Line 238
	mov	DWORD PTR $T70111[ebp], 1
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _seqName$[ebp]
	call	??1CSeqName@NSplit@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T70111[ebp]
	jmp	SHORT $LN32@Open2
$LN2@Open2:
; Line 240
	mov	DWORD PTR $T70112[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR _seqName$[ebp]
	call	??1CSeqName@NSplit@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _ext2$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _ext$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _prefix$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _name$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	call	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
	mov	eax, DWORD PTR $T70112[ebp]
$LN32@Open2:
; Line 241
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN63@Open2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 440				; 000001b8H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
	npad	2
$LN63@Open2:
	DD	13					; 0000000dH
	DD	$LN62@Open2
$LN62@Open2:
	DD	-24					; ffffffe8H
	DD	4
	DD	$LN48@Open2
	DD	-44					; ffffffd4H
	DD	12					; 0000000cH
	DD	$LN49@Open2
	DD	-68					; ffffffbcH
	DD	16					; 00000010H
	DD	$LN50@Open2
	DD	-96					; ffffffa0H
	DD	12					; 0000000cH
	DD	$LN51@Open2
	DD	-116					; ffffff8cH
	DD	12					; 0000000cH
	DD	$LN52@Open2
	DD	-136					; ffffff78H
	DD	12					; 0000000cH
	DD	$LN53@Open2
	DD	-172					; ffffff54H
	DD	28					; 0000001cH
	DD	$LN54@Open2
	DD	-212					; ffffff2cH
	DD	16					; 00000010H
	DD	$LN55@Open2
	DD	-232					; ffffff18H
	DD	8
	DD	$LN56@Open2
	DD	-256					; ffffff00H
	DD	12					; 0000000cH
	DD	$LN57@Open2
	DD	-268					; fffffef4H
	DD	4
	DD	$LN58@Open2
	DD	-296					; fffffed8H
	DD	16					; 00000010H
	DD	$LN59@Open2
	DD	-316					; fffffec4H
	DD	8
	DD	$LN60@Open2
$LN60@Open2:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN59@Open2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN58@Open2:
	DB	110					; 0000006eH
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
$LN57@Open2:
	DB	102					; 00000066H
	DB	117					; 00000075H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN56@Open2:
	DB	110					; 0000006eH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN55@Open2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN54@Open2:
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	113					; 00000071H
	DB	78					; 0000004eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN53@Open2:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	50					; 00000032H
	DB	0
$LN52@Open2:
	DB	101					; 00000065H
	DB	120					; 00000078H
	DB	116					; 00000074H
	DB	0
$LN51@Open2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	102					; 00000066H
	DB	105					; 00000069H
	DB	120					; 00000078H
	DB	0
$LN50@Open2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
$LN49@Open2:
	DB	110					; 0000006eH
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	0
$LN48@Open2:
	DB	118					; 00000076H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	117					; 00000075H
	DB	109					; 0000006dH
	DB	101					; 00000065H
	DB	67					; 00000043H
	DB	97					; 00000061H
	DB	108					; 0000006cH
	DB	108					; 0000006cH
	DB	98					; 00000062H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$0:
	lea	ecx, DWORD PTR _volumeCallback$[ebp]
	jmp	??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$1:
	lea	ecx, DWORD PTR _name$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$2:
	lea	ecx, DWORD PTR _prop$69223[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$3:
	lea	ecx, DWORD PTR _prefix$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$4:
	lea	ecx, DWORD PTR _ext$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$5:
	lea	ecx, DWORD PTR _ext2$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$6:
	lea	ecx, DWORD PTR _seqName$[ebp]
	jmp	??1CSeqName@NSplit@NArchive@@QAE@XZ
__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$7:
	lea	ecx, DWORD PTR $T70101[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$8:
	lea	ecx, DWORD PTR $T70102[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$9:
	lea	ecx, DWORD PTR _prop$69263[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$10:
	lea	ecx, DWORD PTR $T70105[ebp]
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$11:
	lea	ecx, DWORD PTR _fullName$69278[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$12:
	lea	ecx, DWORD PTR _nextStream$69281[ebp]
	jmp	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
__unwindfunclet$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z$13:
	lea	ecx, DWORD PTR _prop$69289[ebp]
	jmp	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
__ehhandler$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-440]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z ENDP ; NArchive::NSplit::CHandler::Open2
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T70152 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T70152[ebp], ecx
	mov	edx, DWORD PTR $T70152[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Ptr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
?Ptr@UString@@QBEPB_WI@Z PROC				; UString::Ptr, COMDAT
; _this$ = ecx
; Line 478
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	lea	eax, DWORD PTR [ecx+edx*2]
	mov	esp, ebp
	pop	ebp
	ret	4
?Ptr@UString@@QBEPB_WI@Z ENDP				; UString::Ptr
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?RightPtr@UString@@QBEPB_WI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_num$ = 8						; size = 4
?RightPtr@UString@@QBEPB_WI@Z PROC			; UString::RightPtr, COMDAT
; _this$ = ecx
; Line 479
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	lea	eax, DWORD PTR [eax+ecx*2]
	mov	ecx, DWORD PTR _num$[ebp]
	shl	ecx, 1
	sub	eax, ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?RightPtr@UString@@QBEPB_WI@Z ENDP			; UString::RightPtr
_TEXT	ENDS
EXTRN	??0UString@@AAE@IABV0@@Z:PROC			; UString::UString
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Left@UString@@QBE?AV1@I@Z
_TEXT	SEGMENT
$T70164 = -8						; size = 4
_this$ = -4						; size = 4
___$ReturnUdt$ = 8					; size = 4
_count$ = 12						; size = 4
?Left@UString@@QBE?AV1@I@Z PROC				; UString::Left, COMDAT
; _this$ = ecx
; Line 540
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR $T70164[ebp], 0
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _count$[ebp]
	push	ecx
	mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
	call	??0UString@@AAE@IABV0@@Z		; UString::UString
	mov	edx, DWORD PTR $T70164[ebp]
	or	edx, 1
	mov	DWORD PTR $T70164[ebp], edx
	mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Left@UString@@QBE?AV1@I@Z ENDP				; UString::Left
_TEXT	ENDS
EXTRN	?MyStringLower_Ascii@@YGXPA_W@Z:PROC		; MyStringLower_Ascii
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?MakeLower_Ascii@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?MakeLower_Ascii@UString@@QAEXXZ PROC			; UString::MakeLower_Ascii, COMDAT
; _this$ = ecx
; Line 545
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	call	?MyStringLower_Ascii@@YGXPA_W@Z		; MyStringLower_Ascii
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?MakeLower_Ascii@UString@@QAEXXZ ENDP			; UString::MakeLower_Ascii
_TEXT	ENDS
EXTRN	?ReverseFind@UString@@QBEH_W@Z:PROC		; UString::ReverseFind
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReverseFind_Dot@UString@@QBEHXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?ReverseFind_Dot@UString@@QBEHXZ PROC			; UString::ReverseFind_Dot, COMDAT
; _this$ = ecx
; Line 575
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	46					; 0000002eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReverseFind@UString@@QBEH_W@Z		; UString::ReverseFind
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReverseFind_Dot@UString@@QBEHXZ ENDP			; UString::ReverseFind_Dot
_TEXT	ENDS
PUBLIC	?ReplaceOneCharAtPos@UString@@QAEXI_W@Z		; UString::ReplaceOneCharAtPos
EXTRN	?InsertAtFront@UString@@QAEX_W@Z:PROC		; UString::InsertAtFront
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\archive\splithandler.cpp
xdata$x	SEGMENT
__unwindtable$?GetNextName@CSeqName@NSplit@NArchive@@QAE_NAAVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?GetNextName@CSeqName@NSplit@NArchive@@QAE_NAAVUString@@@Z$0
__ehfuncinfo$?GetNextName@CSeqName@NSplit@NArchive@@QAE_NAAVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?GetNextName@CSeqName@NSplit@NArchive@@QAE_NAAVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?GetNextName@CSeqName@NSplit@NArchive@@QAE_NAAVUString@@@Z
_TEXT	SEGMENT
tv147 = -44						; size = 4
tv148 = -40						; size = 4
$T70172 = -36						; size = 12
_c$69162 = -24						; size = 2
_i$69158 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_s$ = 8							; size = 4
?GetNextName@CSeqName@NSplit@NArchive@@QAE_NAAVUString@@@Z PROC ; NArchive::NSplit::CSeqName::GetNextName, COMDAT
; _this$ = ecx
; Line 75
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetNextName@CSeqName@NSplit@NArchive@@QAE_NAAVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 77
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	DWORD PTR _i$69158[ebp], eax
$LN11@GetNextNam:
; Line 80
	mov	eax, DWORD PTR _i$69158[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$69158[ebp], eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	ecx, DWORD PTR _i$69158[ebp]
	mov	dx, WORD PTR [eax+ecx*2]
	mov	WORD PTR _c$69162[ebp], dx
; Line 82
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+24]
	test	ecx, ecx
	je	SHORT $LN9@GetNextNam
; Line 84
	movzx	edx, WORD PTR _c$69162[ebp]
	cmp	edx, 122				; 0000007aH
	jne	SHORT $LN8@GetNextNam
; Line 86
	push	97					; 00000061H
	mov	eax, DWORD PTR _i$69158[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ReplaceOneCharAtPos@UString@@QAEXI_W@Z	; UString::ReplaceOneCharAtPos
; Line 87
	cmp	DWORD PTR _i$69158[ebp], 0
	jne	SHORT $LN7@GetNextNam
; Line 88
	xor	al, al
	jmp	$LN12@GetNextNam
$LN7@GetNextNam:
; Line 89
	jmp	SHORT $LN11@GetNextNam
	jmp	SHORT $LN6@GetNextNam
$LN8@GetNextNam:
; Line 91
	movzx	ecx, WORD PTR _c$69162[ebp]
	cmp	ecx, 90					; 0000005aH
	jne	SHORT $LN6@GetNextNam
; Line 93
	push	65					; 00000041H
	mov	edx, DWORD PTR _i$69158[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ReplaceOneCharAtPos@UString@@QAEXI_W@Z	; UString::ReplaceOneCharAtPos
; Line 94
	cmp	DWORD PTR _i$69158[ebp], 0
	jne	SHORT $LN4@GetNextNam
; Line 95
	xor	al, al
	jmp	$LN12@GetNextNam
$LN4@GetNextNam:
; Line 96
	jmp	SHORT $LN11@GetNextNam
$LN6@GetNextNam:
; Line 99
	jmp	SHORT $LN3@GetNextNam
$LN9@GetNextNam:
; Line 101
	movzx	eax, WORD PTR _c$69162[ebp]
	cmp	eax, 57					; 00000039H
	jne	SHORT $LN3@GetNextNam
; Line 103
	push	48					; 00000030H
	mov	ecx, DWORD PTR _i$69158[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ReplaceOneCharAtPos@UString@@QAEXI_W@Z	; UString::ReplaceOneCharAtPos
; Line 104
	cmp	DWORD PTR _i$69158[ebp], 0
	jne	SHORT $LN1@GetNextNam
; Line 106
	push	49					; 00000031H
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?InsertAtFront@UString@@QAEX_W@Z	; UString::InsertAtFront
; Line 107
	jmp	SHORT $LN10@GetNextNam
$LN1@GetNextNam:
; Line 109
	jmp	$LN11@GetNextNam
$LN3@GetNextNam:
; Line 113
	mov	dx, WORD PTR _c$69162[ebp]
	add	dx, 1
	mov	WORD PTR _c$69162[ebp], dx
; Line 114
	movzx	eax, WORD PTR _c$69162[ebp]
	push	eax
	mov	ecx, DWORD PTR _i$69158[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?ReplaceOneCharAtPos@UString@@QAEXI_W@Z	; UString::ReplaceOneCharAtPos
; Line 115
	jmp	SHORT $LN10@GetNextNam
; Line 116
	jmp	$LN11@GetNextNam
$LN10@GetNextNam:
; Line 119
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 12					; 0000000cH
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	lea	ecx, DWORD PTR $T70172[ebp]
	push	ecx
	call	??H@YG?AVUString@@ABV0@0@Z		; operator+
	mov	DWORD PTR tv148[ebp], eax
	mov	edx, DWORD PTR tv148[ebp]
	mov	DWORD PTR tv147[ebp], edx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR tv147[ebp]
	push	eax
	mov	ecx, DWORD PTR _s$[ebp]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR $T70172[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
; Line 120
	mov	al, 1
$LN12@GetNextNam:
; Line 121
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?GetNextName@CSeqName@NSplit@NArchive@@QAE_NAAVUString@@@Z$0:
	lea	ecx, DWORD PTR $T70172[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$?GetNextName@CSeqName@NSplit@NArchive@@QAE_NAAVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetNextName@CSeqName@NSplit@NArchive@@QAE_NAAVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetNextName@CSeqName@NSplit@NArchive@@QAE_NAAVUString@@@Z ENDP ; NArchive::NSplit::CSeqName::GetNextName
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReplaceOneCharAtPos@UString@@QAEXI_W@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_c$ = 12						; size = 2
?ReplaceOneCharAtPos@UString@@QAEXI_W@Z PROC		; UString::ReplaceOneCharAtPos, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 482
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _pos$[ebp]
	mov	ax, WORD PTR _c$[ebp]
	mov	WORD PTR [ecx+edx*2], ax
	mov	esp, ebp
	pop	ebp
	ret	8
?ReplaceOneCharAtPos@UString@@QAEXI_W@Z ENDP		; UString::ReplaceOneCharAtPos
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CSeqName@NSplit@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CSeqName@NSplit@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CSeqName@NSplit@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CSeqName@NSplit@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CSeqName@NSplit@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CSeqName@NSplit@NArchive@@QAE@XZ PROC		; NArchive::NSplit::CSeqName::CSeqName, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CSeqName@NSplit@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CSeqName@NSplit@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??0CSeqName@NSplit@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CSeqName@NSplit@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CSeqName@NSplit@NArchive@@QAE@XZ ENDP		; NArchive::NSplit::CSeqName::CSeqName
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CSeqName@NSplit@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CSeqName@NSplit@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CSeqName@NSplit@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CSeqName@NSplit@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CSeqName@NSplit@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CSeqName@NSplit@NArchive@@QAE@XZ PROC		; NArchive::NSplit::CSeqName::~CSeqName, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CSeqName@NSplit@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CSeqName@NSplit@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1UString@@QAE@XZ			; UString::~UString
__ehhandler$??1CSeqName@NSplit@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CSeqName@NSplit@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CSeqName@NSplit@NArchive@@QAE@XZ ENDP		; NArchive::NSplit::CSeqName::~CSeqName
PUBLIC	?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ; NArchive::NSplit::CHandler::Open
xdata$x	SEGMENT
__catchsym$?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0
__unwindtable$?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	0ffffffffH
	DD	00H
__tryblocktable$?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 00H
	DD	00H
	DD	01H
	DD	01H
	DD	FLAT:__catchsym$?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$2
__ehfuncinfo$?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv77 = -28						; size = 4
$T70206 = -24						; size = 4
_res$69317 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_stream$ = 12						; size = 4
___formal$ = 16						; size = 4
_callback$ = 20						; size = 4
?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z PROC ; NArchive::NSplit::CHandler::Open
; File c:\workspace\7z1505-src\cpp\7zip\archive\splithandler.cpp
; Line 244
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 12					; 0000000cH
	push	ebx
	push	esi
	push	edi
	mov	DWORD PTR [ebp-28], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 245
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 246
	mov	eax, DWORD PTR _callback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _stream$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Open2@CHandler@NSplit@NArchive@@AAEJPAUIInStream@@PAUIArchiveOpenCallback@@@Z ; NArchive::NSplit::CHandler::Open2
	mov	DWORD PTR tv77[ebp], eax
	mov	edx, DWORD PTR tv77[ebp]
	mov	DWORD PTR _res$69317[ebp], edx
; Line 247
	cmp	DWORD PTR _res$69317[ebp], 0
	je	SHORT $LN1@Open
; Line 248
	mov	esi, esp
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@Open:
; Line 249
	mov	eax, DWORD PTR _res$69317[ebp]
	jmp	SHORT $LN3@Open
__catch$?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$0:
; Line 250
	mov	DWORD PTR $T70206[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN8@Open
	ret	0
	mov	eax, __tryend$?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1
	ret	0
__tryend$?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN3@Open
$LN8@Open:
	mov	eax, DWORD PTR $T70206[ebp]
$LN3@Open:
; Line 251
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_TEXT	ENDS
text$x	SEGMENT
__ehhandler$?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-32]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z ENDP ; NArchive::NSplit::CHandler::Open
PUBLIC	?Clear@?$CRecordVector@_K@@QAEXXZ		; CRecordVector<unsigned __int64>::Clear
PUBLIC	?Clear@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEXXZ ; CObjectVector<CMyComPtr<IInStream> >::Clear
PUBLIC	?Empty@UString@@QAEXXZ				; UString::Empty
PUBLIC	?Close@CHandler@NSplit@NArchive@@UAGJXZ		; NArchive::NSplit::CHandler::Close
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
?Close@CHandler@NSplit@NArchive@@UAGJXZ PROC		; NArchive::NSplit::CHandler::Close
; Line 254
	push	ebp
	mov	ebp, esp
; Line 255
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+48], 0
	mov	DWORD PTR [eax+52], 0
; Line 256
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	?Empty@UString@@QAEXXZ			; UString::Empty
; Line 257
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Clear@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEXXZ ; CObjectVector<CMyComPtr<IInStream> >::Clear
; Line 258
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Clear@?$CRecordVector@_K@@QAEXXZ	; CRecordVector<unsigned __int64>::Clear
; Line 259
	xor	eax, eax
; Line 260
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?Close@CHandler@NSplit@NArchive@@UAGJXZ ENDP		; NArchive::NSplit::CHandler::Close
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Empty@UString@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Empty@UString@@QAEXXZ PROC				; UString::Empty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 474
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	xor	eax, eax
	mov	WORD PTR [edx], ax
	mov	esp, ebp
	pop	ebp
	ret	0
?Empty@UString@@QAEXXZ ENDP				; UString::Empty
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBE_NXZ ; CObjectVector<CMyComPtr<IInStream> >::IsEmpty
PUBLIC	?GetNumberOfItems@CHandler@NSplit@NArchive@@UAGJPAI@Z ; NArchive::NSplit::CHandler::GetNumberOfItems
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = 8						; size = 4
_numItems$ = 12						; size = 4
?GetNumberOfItems@CHandler@NSplit@NArchive@@UAGJPAI@Z PROC ; NArchive::NSplit::CHandler::GetNumberOfItems
; File c:\workspace\7z1505-src\cpp\7zip\archive\splithandler.cpp
; Line 263
	push	ebp
	mov	ebp, esp
; Line 264
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?IsEmpty@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBE_NXZ ; CObjectVector<CMyComPtr<IInStream> >::IsEmpty
	movzx	eax, al
	neg	eax
	sbb	eax, eax
	add	eax, 1
	mov	ecx, DWORD PTR _numItems$[ebp]
	mov	DWORD PTR [ecx], eax
; Line 265
	xor	eax, eax
; Line 266
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
?GetNumberOfItems@CHandler@NSplit@NArchive@@UAGJPAI@Z ENDP ; NArchive::NSplit::CHandler::GetNumberOfItems
_TEXT	ENDS
PUBLIC	?GetProperty@CHandler@NSplit@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ; NArchive::NSplit::CHandler::GetProperty
EXTRN	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z:PROC ; NWindows::NCOM::CPropVariant::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv67 = -32						; size = 4
$T70223 = -28						; size = 4
_prop$ = -20						; size = 16
_this$ = 8						; size = 4
___formal$ = 12						; size = 4
_propID$ = 16						; size = 4
_value$ = 20						; size = 4
?GetProperty@CHandler@NSplit@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z PROC ; NArchive::NSplit::CHandler::GetProperty
; Line 269
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
; Line 270
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??0CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::CPropVariant
; Line 271
	mov	eax, DWORD PTR _propID$[ebp]
	mov	DWORD PTR tv67[ebp], eax
	cmp	DWORD PTR tv67[ebp], 3
	je	SHORT $LN2@GetPropert@2
	cmp	DWORD PTR tv67[ebp], 6
	jbe	SHORT $LN3@GetPropert@2
	cmp	DWORD PTR tv67[ebp], 8
	jbe	SHORT $LN1@GetPropert@2
	jmp	SHORT $LN3@GetPropert@2
$LN2@GetPropert@2:
; Line 273
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z ; NWindows::NCOM::CPropVariant::operator=
	jmp	SHORT $LN3@GetPropert@2
$LN1@GetPropert@2:
; Line 276
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+52]
	push	eax
	mov	ecx, DWORD PTR [edx+48]
	push	ecx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z ; NWindows::NCOM::CPropVariant::operator=
$LN3@GetPropert@2:
; Line 279
	mov	edx, DWORD PTR _value$[ebp]
	push	edx
	lea	ecx, DWORD PTR _prop$[ebp]
	call	?Detach@CPropVariant@NCOM@NWindows@@QAEJPAUtagPROPVARIANT@@@Z ; NWindows::NCOM::CPropVariant::Detach
; Line 280
	mov	DWORD PTR $T70223[ebp], 0
	lea	ecx, DWORD PTR _prop$[ebp]
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	mov	eax, DWORD PTR $T70223[ebp]
; Line 281
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN9@GetPropert@2
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN9@GetPropert@2:
	DD	1
	DD	$LN8@GetPropert@2
$LN8@GetPropert@2:
	DD	-20					; ffffffecH
	DD	16					; 00000010H
	DD	$LN7@GetPropert@2
$LN7@GetPropert@2:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	0
?GetProperty@CHandler@NSplit@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z ENDP ; NArchive::NSplit::CHandler::GetProperty
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
PUBLIC	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
PUBLIC	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
PUBLIC	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
PUBLIC	??A?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEAAV?$CMyComPtr@UIInStream@@@@I@Z ; CObjectVector<CMyComPtr<IInStream> >::operator[]
PUBLIC	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ	; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
PUBLIC	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
PUBLIC	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
PUBLIC	??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
PUBLIC	??0CCopyCoder@NCompress@@QAE@XZ			; NCompress::CCopyCoder::CCopyCoder
PUBLIC	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ	; CMyComPtr<ISequentialOutStream>::operator!
PUBLIC	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
PUBLIC	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
PUBLIC	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
PUBLIC	?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ; NArchive::NSplit::CHandler::Extract
EXTRN	?SetCur@CLocalProgress@@QAEJXZ:PROC		; CLocalProgress::SetCur
EXTRN	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z:PROC ; CLocalProgress::Init
EXTRN	??0CLocalProgress@@QAE@XZ:PROC			; CLocalProgress::CLocalProgress
EXTRN	??2@YAPAXI@Z:PROC				; operator new
xdata$x	SEGMENT
__catchsym$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0
__tryblocktable$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 00H
	DD	05H
	DD	06H
	DD	01H
	DD	FLAT:__catchsym$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$7
__ehfuncinfo$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2
	DD	01H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3
	DD	01H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4
	DD	03H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5
	DD	03H
	DD	FLAT:__unwindfunclet$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv299 = -244						; size = 4
tv298 = -240						; size = 4
tv297 = -236						; size = 4
tv296 = -232						; size = 4
tv201 = -228						; size = 4
tv295 = -224						; size = 4
tv294 = -220						; size = 4
tv293 = -216						; size = 4
tv292 = -212						; size = 4
tv291 = -208						; size = 4
tv160 = -204						; size = 4
tv159 = -200						; size = 4
tv290 = -196						; size = 4
tv145 = -192						; size = 4
tv144 = -188						; size = 4
tv288 = -184						; size = 4
tv254 = -180						; size = 4
tv253 = -176						; size = 4
tv252 = -169						; size = 1
tv251 = -168						; size = 4
tv250 = -164						; size = 4
tv249 = -160						; size = 4
tv248 = -156						; size = 4
$T70243 = -152						; size = 4
$T70242 = -148						; size = 4
$T70241 = -144						; size = 4
$T70240 = -140						; size = 4
$T70239 = -136						; size = 4
$T70236 = -132						; size = 4
$T70235 = -128						; size = 4
$T70232 = -124						; size = 4
$T70231 = -120						; size = 4
$T70230 = -116						; size = 4
$T70229 = -112						; size = 4
$T70228 = -108						; size = 4
___result__$69473 = -104				; size = 4
___result__$69470 = -100				; size = 4
_inStream$69469 = -96					; size = 4
___result__$69466 = -92					; size = 4
_i$69462 = -88						; size = 4
_progress$69461 = -80					; size = 4
_lps$69455 = -72					; size = 4
_copyCoder$69454 = -64					; size = 4
_copyCoderSpec$69412 = -56				; size = 4
___result__$69409 = -52					; size = 4
___result__$69403 = -48					; size = 4
_askMode$69402 = -44					; size = 4
_outStream$69401 = -36					; size = 4
___result__$69362 = -28					; size = 4
_currentTotalSize$69361 = -24				; size = 8
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_indices$ = 12						; size = 4
_numItems$ = 16						; size = 4
_testMode$ = 20						; size = 4
_extractCallback$ = 24					; size = 4
?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z PROC ; NArchive::NSplit::CHandler::Extract
; Line 285
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-244]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 286
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 287
	cmp	DWORD PTR _numItems$[ebp], 0
	jne	SHORT $LN13@Extract
; Line 288
	xor	eax, eax
	jmp	$LN15@Extract
$LN13@Extract:
; Line 289
	cmp	DWORD PTR _numItems$[ebp], -1
	je	SHORT $LN12@Extract
	cmp	DWORD PTR _numItems$[ebp], 1
	jne	SHORT $LN11@Extract
	mov	eax, DWORD PTR _indices$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN12@Extract
$LN11@Extract:
; Line 290
	mov	eax, -2147024809			; 80070057H
	jmp	$LN15@Extract
$LN12@Extract:
; Line 292
	mov	DWORD PTR _currentTotalSize$69361[ebp], 0
	mov	DWORD PTR _currentTotalSize$69361[ebp+4], 0
; Line 293
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+52]
	push	edx
	mov	eax, DWORD PTR [ecx+48]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+12]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv248[ebp], eax
	mov	edx, DWORD PTR tv248[ebp]
	mov	DWORD PTR ___result__$69362[ebp], edx
	cmp	DWORD PTR ___result__$69362[ebp], 0
	je	SHORT $LN10@Extract
	mov	eax, DWORD PTR ___result__$69362[ebp]
	jmp	$LN15@Extract
$LN10@Extract:
; Line 294
	lea	ecx, DWORD PTR _outStream$69401[ebp]
	call	??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
	mov	DWORD PTR tv249[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 1
; Line 297
	xor	eax, eax
	cmp	DWORD PTR _testMode$[ebp], 0
	setne	al
	mov	DWORD PTR _askMode$69402[ebp], eax
; Line 298
	lea	ecx, DWORD PTR _outStream$69401[ebp]
	call	??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator&
	mov	DWORD PTR tv250[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _askMode$69402[ebp]
	push	ecx
	mov	edx, DWORD PTR tv250[ebp]
	push	edx
	push	0
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _extractCallback$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+20]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv251[ebp], eax
	mov	ecx, DWORD PTR tv251[ebp]
	mov	DWORD PTR ___result__$69403[ebp], ecx
	cmp	DWORD PTR ___result__$69403[ebp], 0
	je	SHORT $LN9@Extract
	mov	edx, DWORD PTR ___result__$69403[ebp]
	mov	DWORD PTR $T70228[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _outStream$69401[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70228[ebp]
	jmp	$LN15@Extract
$LN9@Extract:
; Line 299
	cmp	DWORD PTR _testMode$[ebp], 0
	jne	SHORT $LN8@Extract
	lea	ecx, DWORD PTR _outStream$69401[ebp]
	call	??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ; CMyComPtr<ISequentialOutStream>::operator!
	mov	BYTE PTR tv252[ebp], al
	movzx	eax, BYTE PTR tv252[ebp]
	test	eax, eax
	je	SHORT $LN8@Extract
; Line 300
	mov	DWORD PTR $T70229[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _outStream$69401[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70229[ebp]
	jmp	$LN15@Extract
$LN8@Extract:
; Line 301
	mov	esi, esp
	mov	ecx, DWORD PTR _askMode$69402[ebp]
	push	ecx
	mov	edx, DWORD PTR _extractCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+24]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv253[ebp], eax
	mov	eax, DWORD PTR tv253[ebp]
	mov	DWORD PTR ___result__$69409[ebp], eax
	cmp	DWORD PTR ___result__$69409[ebp], 0
	je	SHORT $LN7@Extract
	mov	ecx, DWORD PTR ___result__$69409[ebp]
	mov	DWORD PTR $T70230[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _outStream$69401[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70230[ebp]
	jmp	$LN15@Extract
$LN7@Extract:
; Line 303
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv254[ebp], eax
	mov	edx, DWORD PTR tv254[ebp]
	mov	DWORD PTR $T70232[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	cmp	DWORD PTR $T70232[ebp], 0
	je	SHORT $LN17@Extract
	mov	ecx, DWORD PTR $T70232[ebp]
	call	??0CCopyCoder@NCompress@@QAE@XZ		; NCompress::CCopyCoder::CCopyCoder
	mov	DWORD PTR tv288[ebp], eax
	mov	eax, DWORD PTR tv288[ebp]
	mov	DWORD PTR tv144[ebp], eax
	jmp	SHORT $LN18@Extract
$LN17@Extract:
	mov	DWORD PTR tv144[ebp], 0
$LN18@Extract:
	mov	ecx, DWORD PTR tv144[ebp]
	mov	DWORD PTR $T70231[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	mov	edx, DWORD PTR $T70231[ebp]
	mov	DWORD PTR _copyCoderSpec$69412[ebp], edx
; Line 304
	mov	eax, DWORD PTR _copyCoderSpec$69412[ebp]
	push	eax
	lea	ecx, DWORD PTR _copyCoder$69454[ebp]
	call	??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 3
; Line 306
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv145[ebp], eax
	mov	ecx, DWORD PTR tv145[ebp]
	mov	DWORD PTR $T70236[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 4
	cmp	DWORD PTR $T70236[ebp], 0
	je	SHORT $LN19@Extract
	mov	ecx, DWORD PTR $T70236[ebp]
	call	??0CLocalProgress@@QAE@XZ		; CLocalProgress::CLocalProgress
	mov	DWORD PTR tv290[ebp], eax
	mov	edx, DWORD PTR tv290[ebp]
	mov	DWORD PTR tv159[ebp], edx
	jmp	SHORT $LN20@Extract
$LN19@Extract:
	mov	DWORD PTR tv159[ebp], 0
$LN20@Extract:
	mov	eax, DWORD PTR tv159[ebp]
	mov	DWORD PTR $T70235[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	mov	ecx, DWORD PTR $T70235[ebp]
	mov	DWORD PTR _lps$69455[ebp], ecx
; Line 307
	mov	edx, DWORD PTR _lps$69455[ebp]
	push	edx
	lea	ecx, DWORD PTR _progress$69461[ebp]
	call	??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 5
; Line 308
	push	0
	mov	eax, DWORD PTR _extractCallback$[ebp]
	push	eax
	mov	ecx, DWORD PTR _lps$69455[ebp]
	call	?Init@CLocalProgress@@QAEXPAUIProgress@@_N@Z ; CLocalProgress::Init
; Line 310
	mov	DWORD PTR _i$69462[ebp], 0
	jmp	SHORT $LN6@Extract
$LN5@Extract:
	mov	ecx, DWORD PTR _i$69462[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$69462[ebp], ecx
$LN6@Extract:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<IInStream> >::Size
	mov	DWORD PTR tv160[ebp], eax
	mov	edx, DWORD PTR _i$69462[ebp]
	cmp	edx, DWORD PTR tv160[ebp]
	jae	$LN4@Extract
; Line 312
	mov	eax, DWORD PTR _lps$69455[ebp]
	mov	ecx, DWORD PTR _currentTotalSize$69361[ebp]
	mov	DWORD PTR [eax+40], ecx
	mov	edx, DWORD PTR _currentTotalSize$69361[ebp+4]
	mov	DWORD PTR [eax+44], edx
	mov	eax, DWORD PTR _lps$69455[ebp]
	mov	ecx, DWORD PTR _currentTotalSize$69361[ebp]
	mov	DWORD PTR [eax+32], ecx
	mov	edx, DWORD PTR _currentTotalSize$69361[ebp+4]
	mov	DWORD PTR [eax+36], edx
; Line 313
	mov	ecx, DWORD PTR _lps$69455[ebp]
	call	?SetCur@CLocalProgress@@QAEJXZ		; CLocalProgress::SetCur
	mov	DWORD PTR tv291[ebp], eax
	mov	eax, DWORD PTR tv291[ebp]
	mov	DWORD PTR ___result__$69466[ebp], eax
	cmp	DWORD PTR ___result__$69466[ebp], 0
	je	SHORT $LN3@Extract
	mov	ecx, DWORD PTR ___result__$69466[ebp]
	mov	DWORD PTR $T70239[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$69461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _copyCoder$69454[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _outStream$69401[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70239[ebp]
	jmp	$LN15@Extract
$LN3@Extract:
; Line 314
	mov	edx, DWORD PTR _i$69462[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEAAV?$CMyComPtr@UIInStream@@@@I@Z ; CObjectVector<CMyComPtr<IInStream> >::operator[]
	mov	DWORD PTR tv292[ebp], eax
	mov	ecx, DWORD PTR tv292[ebp]
	call	??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator IInStream *
	mov	DWORD PTR tv293[ebp], eax
	mov	eax, DWORD PTR tv293[ebp]
	mov	DWORD PTR _inStream$69469[ebp], eax
; Line 315
	mov	esi, esp
	push	0
	push	0
	push	0
	push	0
	mov	ecx, DWORD PTR _inStream$69469[ebp]
	push	ecx
	mov	edx, DWORD PTR _inStream$69469[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv294[ebp], eax
	mov	edx, DWORD PTR tv294[ebp]
	mov	DWORD PTR ___result__$69470[ebp], edx
	cmp	DWORD PTR ___result__$69470[ebp], 0
	je	SHORT $LN2@Extract
	mov	eax, DWORD PTR ___result__$69470[ebp]
	mov	DWORD PTR $T70240[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$69461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _copyCoder$69454[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _outStream$69401[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70240[ebp]
	jmp	$LN15@Extract
$LN2@Extract:
; Line 316
	lea	ecx, DWORD PTR _copyCoder$69454[ebp]
	call	??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ; CMyComPtr<ICompressCoder>::operator->
	mov	DWORD PTR tv295[ebp], eax
	mov	ecx, DWORD PTR tv295[ebp]
	mov	DWORD PTR tv201[ebp], ecx
	lea	ecx, DWORD PTR _progress$69461[ebp]
	call	??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
	mov	DWORD PTR tv296[ebp], eax
	lea	ecx, DWORD PTR _outStream$69401[ebp]
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	mov	DWORD PTR tv297[ebp], eax
	mov	esi, esp
	mov	edx, DWORD PTR tv296[ebp]
	push	edx
	push	0
	push	0
	mov	eax, DWORD PTR tv297[ebp]
	push	eax
	mov	ecx, DWORD PTR _inStream$69469[ebp]
	push	ecx
	mov	edx, DWORD PTR tv201[ebp]
	push	edx
	mov	eax, DWORD PTR tv201[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+12]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv298[ebp], eax
	mov	eax, DWORD PTR tv298[ebp]
	mov	DWORD PTR ___result__$69473[ebp], eax
	cmp	DWORD PTR ___result__$69473[ebp], 0
	je	SHORT $LN1@Extract
	mov	ecx, DWORD PTR ___result__$69473[ebp]
	mov	DWORD PTR $T70241[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$69461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _copyCoder$69454[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _outStream$69401[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70241[ebp]
	jmp	$LN15@Extract
$LN1@Extract:
; Line 317
	mov	edx, DWORD PTR _copyCoderSpec$69412[ebp]
	mov	eax, DWORD PTR _currentTotalSize$69361[ebp]
	add	eax, DWORD PTR [edx+32]
	mov	ecx, DWORD PTR _currentTotalSize$69361[ebp+4]
	adc	ecx, DWORD PTR [edx+36]
	mov	DWORD PTR _currentTotalSize$69361[ebp], eax
	mov	DWORD PTR _currentTotalSize$69361[ebp+4], ecx
; Line 318
	jmp	$LN5@Extract
$LN4@Extract:
; Line 319
	lea	ecx, DWORD PTR _outStream$69401[ebp]
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 320
	mov	esi, esp
	push	0
	mov	edx, DWORD PTR _extractCallback$[ebp]
	push	edx
	mov	eax, DWORD PTR _extractCallback$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+28]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR tv299[ebp], eax
	mov	eax, DWORD PTR tv299[ebp]
	mov	DWORD PTR $T70242[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
	lea	ecx, DWORD PTR _progress$69461[ebp]
	call	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	lea	ecx, DWORD PTR _copyCoder$69454[ebp]
	call	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _outStream$69401[ebp]
	call	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
	mov	eax, DWORD PTR $T70242[ebp]
	jmp	SHORT $LN15@Extract
__catch$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$0:
; Line 321
	mov	DWORD PTR $T70243[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN29@Extract
	ret	0
	mov	eax, __tryend$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1
	ret	0
__tryend$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN15@Extract
$LN29@Extract:
	mov	eax, DWORD PTR $T70243[ebp]
$LN15@Extract:
; Line 322
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN36@Extract
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 244				; 000000f4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	1
$LN36@Extract:
	DD	3
	DD	$LN35@Extract
$LN35@Extract:
	DD	-36					; ffffffdcH
	DD	4
	DD	$LN31@Extract
	DD	-64					; ffffffc0H
	DD	4
	DD	$LN32@Extract
	DD	-80					; ffffffb0H
	DD	4
	DD	$LN33@Extract
$LN33@Extract:
	DB	112					; 00000070H
	DB	114					; 00000072H
	DB	111					; 0000006fH
	DB	103					; 00000067H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	115					; 00000073H
	DB	0
$LN32@Extract:
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	112					; 00000070H
	DB	121					; 00000079H
	DB	67					; 00000043H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN31@Extract:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$2:
	lea	ecx, DWORD PTR _outStream$69401[ebp]
	jmp	??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
__unwindfunclet$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$3:
	mov	eax, DWORD PTR $T70232[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$4:
	lea	ecx, DWORD PTR _copyCoder$69454[ebp]
	jmp	??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
__unwindfunclet$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$5:
	mov	eax, DWORD PTR $T70236[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z$6:
	lea	ecx, DWORD PTR _progress$69461[ebp]
	jmp	??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
__ehhandler$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-248]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z ENDP ; NArchive::NSplit::CHandler::Extract
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`vftable'
PUBLIC	??_7CCopyCoder@NCompress@@6BICompressCoder@@@	; NCompress::CCopyCoder::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0ICompressGetInStreamProcessedSize@@QAE@XZ	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??0ICompressSetInStream@@QAE@XZ			; ICompressSetInStream::ICompressSetInStream
PUBLIC	??0ICompressCoder@@QAE@XZ			; ICompressCoder::ICompressCoder
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressCoder@@@	; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCCopyCoder@NCompress@@@8		; NCompress::CCopyCoder `RTTI Type Descriptor'
PUBLIC	??_R3CCopyCoder@NCompress@@8			; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CCopyCoder@NCompress@@8			; NCompress::CCopyCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CCopyCoder@NCompress@@8		; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@ICompressCoder@@8			; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUICompressCoder@@@8			; ICompressCoder `RTTI Type Descriptor'
PUBLIC	??_R3ICompressCoder@@8				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressCoder@@8				; ICompressCoder::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
PUBLIC	??_R13?0A@EA@ICompressSetInStream@@8		; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUICompressSetInStream@@@8		; ICompressSetInStream `RTTI Type Descriptor'
PUBLIC	??_R3ICompressSetInStream@@8			; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressSetInStream@@8			; ICompressSetInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressSetInStream@@8		; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R13?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
PUBLIC	??_R17?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
PUBLIC	??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
PUBLIC	??_R0?AUICompressGetInStreamProcessedSize@@@8	; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
PUBLIC	??_R3ICompressGetInStreamProcessedSize@@8	; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ICompressGetInStreamProcessedSize@@8	; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1M@?0A@EC@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
PUBLIC	??_R1BA@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
PUBLIC	?AddRef@CCopyCoder@NCompress@@UAGKXZ		; NCompress::CCopyCoder::AddRef
PUBLIC	?Release@CCopyCoder@NCompress@@UAGKXZ		; NCompress::CCopyCoder::Release
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@W3AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}'
PUBLIC	?Release@CCopyCoder@NCompress@@W3AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}'
PUBLIC	??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@W7AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}'
PUBLIC	?Release@CCopyCoder@NCompress@@W7AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}'
PUBLIC	??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}'
PUBLIC	?AddRef@CCopyCoder@NCompress@@WM@AGKXZ		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}'
PUBLIC	?Release@CCopyCoder@NCompress@@WM@AGKXZ		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}'
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z:PROC ; NCompress::CCopyCoder::Code
EXTRN	?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z:PROC ; NCompress::CCopyCoder::SetInStream
EXTRN	?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ:PROC ; NCompress::CCopyCoder::ReleaseInStream
EXTRN	?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z:PROC	; NCompress::CCopyCoder::Read
EXTRN	?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z:PROC ; NCompress::CCopyCoder::GetInStreamProcessedSize
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	0cH
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	08H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ DD 00H ; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1BA@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (16,-1,0,64)'
	DD	00H
	DD	010H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1M@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1M@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (12,-1,0,66)'
	DD	00H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R2ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R1A@?0A@EA@ICompressGetInStreamProcessedSize@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R3ICompressGetInStreamProcessedSize@@8 DD 00H	; ICompressGetInStreamProcessedSize::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressGetInStreamProcessedSize@@@8
_DATA	SEGMENT
??_R0?AUICompressGetInStreamProcessedSize@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressGetInStreamProcessedSize `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressGetInStreamProcessedSize@@', 00H
_DATA	ENDS
;	COMDAT ??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
rdata$r	SEGMENT
??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8 DD FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8 ; ICompressGetInStreamProcessedSize::`RTTI Base Class Descriptor at (12,-1,0,64)'
	DD	01H
	DD	0cH
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R17?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (8,-1,0,66)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R17?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R17?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	01H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R13?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R13?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (4,-1,0,66)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressSetInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressSetInStream@@8 DD FLAT:??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressSetInStream@@8
rdata$r	SEGMENT
??_R2ICompressSetInStream@@8 DD FLAT:??_R1A@?0A@EA@ICompressSetInStream@@8 ; ICompressSetInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressSetInStream@@8
rdata$r	SEGMENT
??_R3ICompressSetInStream@@8 DD 00H			; ICompressSetInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressSetInStream@@@8
_DATA	SEGMENT
??_R0?AUICompressSetInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ICompressSetInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressSetInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@ICompressSetInStream@@8
rdata$r	SEGMENT
??_R13?0A@EA@ICompressSetInStream@@8 DD FLAT:??_R0?AUICompressSetInStream@@@8 ; ICompressSetInStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EC@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EC@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,66)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	042H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ICompressCoder@@8
rdata$r	SEGMENT
??_R2ICompressCoder@@8 DD FLAT:??_R1A@?0A@EA@ICompressCoder@@8 ; ICompressCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ICompressCoder@@8
rdata$r	SEGMENT
??_R3ICompressCoder@@8 DD 00H				; ICompressCoder::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUICompressCoder@@@8
_DATA	SEGMENT
??_R0?AUICompressCoder@@@8 DD FLAT:??_7type_info@@6B@	; ICompressCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUICompressCoder@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ICompressCoder@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ICompressCoder@@8 DD FLAT:??_R0?AUICompressCoder@@@8 ; ICompressCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CCopyCoder@NCompress@@8 DD FLAT:??_R0?AVCCopyCoder@NCompress@@@8 ; NCompress::CCopyCoder::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	09H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R2CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R2CCopyCoder@NCompress@@8 DD FLAT:??_R1A@?0A@EA@CCopyCoder@NCompress@@8 ; NCompress::CCopyCoder::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ICompressCoder@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@ICompressSetInStream@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R17?0A@EC@IUnknown@@8
	DD	FLAT:??_R1M@?0A@EA@ICompressGetInStreamProcessedSize@@8
	DD	FLAT:??_R1M@?0A@EC@IUnknown@@8
	DD	FLAT:??_R1BA@?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CCopyCoder@NCompress@@8
rdata$r	SEGMENT
??_R3CCopyCoder@NCompress@@8 DD 00H			; NCompress::CCopyCoder::`RTTI Class Hierarchy Descriptor'
	DD	05H
	DD	0aH
	DD	FLAT:??_R2CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCCopyCoder@NCompress@@@8
_DATA	SEGMENT
??_R0?AVCCopyCoder@NCompress@@@8 DD FLAT:??_7type_info@@6B@ ; NCompress::CCopyCoder `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCCopyCoder@NCompress@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CCopyCoder@NCompress@@6BICompressCoder@@@
rdata$r	SEGMENT
??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ DD 00H	; NCompress::CCopyCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCCopyCoder@NCompress@@@8
	DD	FLAT:??_R3CCopyCoder@NCompress@@8
rdata$r	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@WM@AGKXZ
	DD	FLAT:?GetInStreamProcessedSize@CCopyCoder@NCompress@@UAGJPA_K@Z
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BISequentialInStream@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BISequentialInStream@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@W7AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@W7AGKXZ
	DD	FLAT:?Read@CCopyCoder@NCompress@@UAGJPAXIPAI@Z
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressSetInStream@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@W3AGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@W3AGKXZ
	DD	FLAT:?SetInStream@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@@Z
	DD	FLAT:?ReleaseInStream@CCopyCoder@NCompress@@UAGJXZ
CONST	ENDS
;	COMDAT ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
CONST	SEGMENT
??_7CCopyCoder@NCompress@@6BICompressCoder@@@ DD FLAT:??_R4CCopyCoder@NCompress@@6BICompressCoder@@@ ; NCompress::CCopyCoder::`vftable'
	DD	FLAT:?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CCopyCoder@NCompress@@UAGKXZ
	DD	FLAT:?Release@CCopyCoder@NCompress@@UAGKXZ
	DD	FLAT:?Code@CCopyCoder@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CCopyCoder@NCompress@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CCopyCoder@NCompress@@QAE@XZ PROC			; NCompress::CCopyCoder::CCopyCoder, COMDAT
; _this$ = ecx
; Line 24
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ICompressCoder@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0ICompressSetInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0ISequentialInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0ICompressGetInStreamProcessedSize@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CCopyCoder@NCompress@@6BICompressCoder@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CCopyCoder@NCompress@@6BICompressSetInStream@@@
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], OFFSET ??_7CCopyCoder@NCompress@@6BISequentialInStream@@@
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+12], OFFSET ??_7CCopyCoder@NCompress@@6BICompressGetInStreamProcessedSize@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+20], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], 0
	mov	DWORD PTR [edx+36], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CCopyCoder@NCompress@@QAE@XZ ENDP			; NCompress::CCopyCoder::CCopyCoder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_ICompressGetInStreamProcessedSize:BYTE
EXTRN	_IID_ISequentialInStream:BYTE
EXTRN	_IID_ICompressSetInStream:BYTE
EXTRN	_IID_ICompressCoder:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv144 = -12						; size = 4
tv134 = -8						; size = 4
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z PROC ; NCompress::CCopyCoder::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN10@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter
$LN10@QueryInter:
	push	OFFSET _IID_ICompressCoder
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN8@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	$LN9@QueryInter
$LN8@QueryInter:
	push	OFFSET _IID_ICompressSetInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN13@QueryInter
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN14@QueryInter
$LN13@QueryInter:
	mov	DWORD PTR tv92[ebp], 0
$LN14@QueryInter:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN9@QueryInter
$LN6@QueryInter:
	push	OFFSET _IID_ISequentialInStream
	mov	edx, DWORD PTR _iid$[ebp]
	push	edx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN15@QueryInter
	mov	eax, DWORD PTR _this$[ebp]
	add	eax, 8
	mov	DWORD PTR tv134[ebp], eax
	jmp	SHORT $LN16@QueryInter
$LN15@QueryInter:
	mov	DWORD PTR tv134[ebp], 0
$LN16@QueryInter:
	mov	ecx, DWORD PTR _outObject$[ebp]
	mov	edx, DWORD PTR tv134[ebp]
	mov	DWORD PTR [ecx], edx
	jmp	SHORT $LN9@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_ICompressGetInStreamProcessedSize
	mov	eax, DWORD PTR _iid$[ebp]
	push	eax
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN17@QueryInter
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	mov	DWORD PTR tv144[ebp], ecx
	jmp	SHORT $LN18@QueryInter
$LN17@QueryInter:
	mov	DWORD PTR tv144[ebp], 0
$LN18@QueryInter:
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR tv144[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN9@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN11@QueryInter
$LN9@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], edx
	xor	eax, eax
$LN11@QueryInter:
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ENDP ; NCompress::CCopyCoder::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CCopyCoder@NCompress@@UAGKXZ PROC		; NCompress::CCopyCoder::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\compress\copycoder.h
; Line 31
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CCopyCoder@NCompress@@UAGKXZ ENDP		; NCompress::CCopyCoder::AddRef
_TEXT	ENDS
PUBLIC	??_GCCopyCoder@NCompress@@QAEPAXI@Z		; NCompress::CCopyCoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CCopyCoder@NCompress@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T70286 = -8						; size = 4
$T70285 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CCopyCoder@NCompress@@UAGKXZ PROC		; NCompress::CCopyCoder::Release, COMDAT
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+16], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T70286[ebp], edx
	mov	eax, DWORD PTR $T70286[ebp]
	mov	DWORD PTR $T70285[ebp], eax
	cmp	DWORD PTR $T70285[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T70285[ebp]
	call	??_GCCopyCoder@NCompress@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CCopyCoder@NCompress@@UAGKXZ ENDP		; NCompress::CCopyCoder::Release
_TEXT	ENDS
PUBLIC	??_7ICompressCoder@@6B@				; ICompressCoder::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ICompressCoder@@6B@			; ICompressCoder::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4ICompressCoder@@6B@
rdata$r	SEGMENT
??_R4ICompressCoder@@6B@ DD 00H				; ICompressCoder::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressCoder@@@8
	DD	FLAT:??_R3ICompressCoder@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressCoder@@6B@
CONST	SEGMENT
??_7ICompressCoder@@6B@ DD FLAT:??_R4ICompressCoder@@6B@ ; ICompressCoder::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressCoder@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressCoder@@QAE@XZ PROC				; ICompressCoder::ICompressCoder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressCoder@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressCoder@@QAE@XZ ENDP				; ICompressCoder::ICompressCoder
_TEXT	ENDS
PUBLIC	??_7ICompressSetInStream@@6B@			; ICompressSetInStream::`vftable'
PUBLIC	??_R4ICompressSetInStream@@6B@			; ICompressSetInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressSetInStream@@6B@
rdata$r	SEGMENT
??_R4ICompressSetInStream@@6B@ DD 00H			; ICompressSetInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressSetInStream@@@8
	DD	FLAT:??_R3ICompressSetInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressSetInStream@@6B@
CONST	SEGMENT
??_7ICompressSetInStream@@6B@ DD FLAT:??_R4ICompressSetInStream@@6B@ ; ICompressSetInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressSetInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressSetInStream@@QAE@XZ PROC			; ICompressSetInStream::ICompressSetInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressSetInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressSetInStream@@QAE@XZ ENDP			; ICompressSetInStream::ICompressSetInStream
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
_TEXT	ENDS
PUBLIC	??_7ICompressGetInStreamProcessedSize@@6B@	; ICompressGetInStreamProcessedSize::`vftable'
PUBLIC	??_R4ICompressGetInStreamProcessedSize@@6B@	; ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
;	COMDAT ??_R4ICompressGetInStreamProcessedSize@@6B@
rdata$r	SEGMENT
??_R4ICompressGetInStreamProcessedSize@@6B@ DD 00H	; ICompressGetInStreamProcessedSize::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUICompressGetInStreamProcessedSize@@@8
	DD	FLAT:??_R3ICompressGetInStreamProcessedSize@@8
rdata$r	ENDS
;	COMDAT ??_7ICompressGetInStreamProcessedSize@@6B@
CONST	SEGMENT
??_7ICompressGetInStreamProcessedSize@@6B@ DD FLAT:??_R4ICompressGetInStreamProcessedSize@@6B@ ; ICompressGetInStreamProcessedSize::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ICompressGetInStreamProcessedSize@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ICompressGetInStreamProcessedSize@@QAE@XZ PROC	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ICompressGetInStreamProcessedSize@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ICompressGetInStreamProcessedSize@@QAE@XZ ENDP	; ICompressGetInStreamProcessedSize::ICompressGetInStreamProcessedSize
_TEXT	ENDS
EXTRN	??1CCopyCoder@NCompress@@QAE@XZ:PROC		; NCompress::CCopyCoder::~CCopyCoder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCCopyCoder@NCompress@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCCopyCoder@NCompress@@QAEPAXI@Z PROC		; NCompress::CCopyCoder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCopyCoder@NCompress@@QAE@XZ		; NCompress::CCopyCoder::~CCopyCoder
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCCopyCoder@NCompress@@QAEPAXI@Z ENDP		; NCompress::CCopyCoder::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach
PUBLIC	?Init@CMultiStream@@QAEJXZ			; CMultiStream::Init
PUBLIC	??1CSubStreamInfo@CMultiStream@@QAE@XZ		; CMultiStream::CSubStreamInfo::~CSubStreamInfo
PUBLIC	?Add@?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEIABUCSubStreamInfo@CMultiStream@@@Z ; CObjectVector<CMultiStream::CSubStreamInfo>::Add
PUBLIC	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@ABV0@@Z ; CMyComPtr<IInStream>::operator=
PUBLIC	??0CSubStreamInfo@CMultiStream@@QAE@XZ		; CMultiStream::CSubStreamInfo::CSubStreamInfo
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??0CMultiStream@@QAE@XZ				; CMultiStream::CMultiStream
PUBLIC	?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z ; NArchive::NSplit::CHandler::GetStream
xdata$x	SEGMENT
__catchsym$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$5 DD 040H
	DD	00H
	DD	00H
	DD	FLAT:__catch$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$0
__tryblocktable$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z DD 00H
	DD	03H
	DD	04H
	DD	01H
	DD	FLAT:__catchsym$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$5
__ehfuncinfo$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
	DD	01H
	DD	FLAT:__tryblocktable$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z DD 0ffffffffH
	DD	00H
	DD	00H
	DD	FLAT:__unwindfunclet$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$2
	DD	00H
	DD	FLAT:__unwindfunclet$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$3
	DD	02H
	DD	FLAT:__unwindfunclet$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$4
	DD	0ffffffffH
	DD	00H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv150 = -124						; size = 4
tv149 = -120						; size = 4
tv148 = -116						; size = 4
tv147 = -112						; size = 4
tv73 = -108						; size = 4
tv72 = -104						; size = 4
tv146 = -100						; size = 4
tv144 = -96						; size = 4
$T70308 = -92						; size = 4
$T70307 = -88						; size = 4
$T70304 = -84						; size = 4
$T70303 = -80						; size = 4
_subStreamInfo$69498 = -72				; size = 32
_i$69494 = -36						; size = 4
_streamTemp$69493 = -28					; size = 4
_streamSpec$69487 = -20					; size = 4
__$EHRec$ = -16						; size = 16
_this$ = 8						; size = 4
_index$ = 12						; size = 4
_stream$ = 16						; size = 4
?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z PROC ; NArchive::NSplit::CHandler::GetStream
; File c:\workspace\7z1505-src\cpp\7zip\archive\splithandler.cpp
; Line 325
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	sub	esp, 108				; 0000006cH
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-124]
	mov	ecx, 27					; 0000001bH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR __$EHRec$[ebp], esp
; Line 326
	mov	DWORD PTR __$EHRec$[ebp+12], 0
; Line 327
	cmp	DWORD PTR _index$[ebp], 0
	je	SHORT $LN4@GetStream
; Line 328
	mov	eax, -2147024809			; 80070057H
	jmp	$LN6@GetStream
$LN4@GetStream:
; Line 329
	mov	eax, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax], 0
; Line 330
	push	40					; 00000028H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR tv144[ebp], eax
	mov	ecx, DWORD PTR tv144[ebp]
	mov	DWORD PTR $T70304[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+12], 1
	cmp	DWORD PTR $T70304[ebp], 0
	je	SHORT $LN8@GetStream
	mov	ecx, DWORD PTR $T70304[ebp]
	call	??0CMultiStream@@QAE@XZ
	mov	DWORD PTR tv146[ebp], eax
	mov	edx, DWORD PTR tv146[ebp]
	mov	DWORD PTR tv72[ebp], edx
	jmp	SHORT $LN9@GetStream
$LN8@GetStream:
	mov	DWORD PTR tv72[ebp], 0
$LN9@GetStream:
	mov	eax, DWORD PTR tv72[ebp]
	mov	DWORD PTR $T70303[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	mov	ecx, DWORD PTR $T70303[ebp]
	mov	DWORD PTR _streamSpec$69487[ebp], ecx
; Line 331
	mov	edx, DWORD PTR _streamSpec$69487[ebp]
	push	edx
	lea	ecx, DWORD PTR _streamTemp$69493[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	BYTE PTR __$EHRec$[ebp+12], 2
; Line 332
	mov	DWORD PTR _i$69494[ebp], 0
	jmp	SHORT $LN3@GetStream
$LN2@GetStream:
	mov	eax, DWORD PTR _i$69494[ebp]
	add	eax, 1
	mov	DWORD PTR _i$69494[ebp], eax
$LN3@GetStream:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	?Size@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBEIXZ ; CObjectVector<CMyComPtr<IInStream> >::Size
	mov	DWORD PTR tv73[ebp], eax
	mov	ecx, DWORD PTR _i$69494[ebp]
	cmp	ecx, DWORD PTR tv73[ebp]
	jae	SHORT $LN1@GetStream
; Line 334
	lea	ecx, DWORD PTR _subStreamInfo$69498[ebp]
	call	??0CSubStreamInfo@CMultiStream@@QAE@XZ	; CMultiStream::CSubStreamInfo::CSubStreamInfo
	mov	DWORD PTR tv147[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+12], 3
; Line 335
	mov	edx, DWORD PTR _i$69494[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??A?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEAAV?$CMyComPtr@UIInStream@@@@I@Z ; CObjectVector<CMyComPtr<IInStream> >::operator[]
	mov	DWORD PTR tv148[ebp], eax
	mov	eax, DWORD PTR tv148[ebp]
	push	eax
	lea	ecx, DWORD PTR _subStreamInfo$69498[ebp]
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@ABV0@@Z ; CMyComPtr<IInStream>::operator=
; Line 336
	mov	ecx, DWORD PTR _i$69494[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 20					; 00000014H
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	DWORD PTR tv149[ebp], eax
	mov	edx, DWORD PTR tv149[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _subStreamInfo$69498[ebp+8], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _subStreamInfo$69498[ebp+12], ecx
; Line 337
	lea	edx, DWORD PTR _subStreamInfo$69498[ebp]
	push	edx
	mov	ecx, DWORD PTR _streamSpec$69487[ebp]
	add	ecx, 28					; 0000001cH
	call	?Add@?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEIABUCSubStreamInfo@CMultiStream@@@Z ; CObjectVector<CMultiStream::CSubStreamInfo>::Add
; Line 338
	mov	BYTE PTR __$EHRec$[ebp+12], 2
	lea	ecx, DWORD PTR _subStreamInfo$69498[ebp]
	call	??1CSubStreamInfo@CMultiStream@@QAE@XZ
	jmp	$LN2@GetStream
$LN1@GetStream:
; Line 339
	mov	ecx, DWORD PTR _streamSpec$69487[ebp]
	call	?Init@CMultiStream@@QAEJXZ		; CMultiStream::Init
; Line 340
	lea	ecx, DWORD PTR _streamTemp$69493[ebp]
	call	?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::Detach
	mov	DWORD PTR tv150[ebp], eax
	mov	eax, DWORD PTR _stream$[ebp]
	mov	ecx, DWORD PTR tv150[ebp]
	mov	DWORD PTR [eax], ecx
; Line 341
	mov	DWORD PTR $T70307[ebp], 0
	mov	BYTE PTR __$EHRec$[ebp+12], 0
	lea	ecx, DWORD PTR _streamTemp$69493[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T70307[ebp]
	jmp	SHORT $LN6@GetStream
__catch$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$0:
; Line 342
	mov	DWORD PTR $T70308[ebp], -2147024882	; 8007000eH
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	mov	eax, $LN16@GetStream
	ret	0
	mov	eax, __tryend$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$1
	ret	0
__tryend$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$1:
	mov	DWORD PTR __$EHRec$[ebp+12], -1
	jmp	SHORT $LN6@GetStream
$LN16@GetStream:
	mov	eax, DWORD PTR $T70308[ebp]
$LN6@GetStream:
; Line 343
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN22@GetStream
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp+4]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 124				; 0000007cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN22@GetStream:
	DD	2
	DD	$LN21@GetStream
$LN21@GetStream:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN18@GetStream
	DD	-72					; ffffffb8H
	DD	32					; 00000020H
	DD	$LN19@GetStream
$LN19@GetStream:
	DB	115					; 00000073H
	DB	117					; 00000075H
	DB	98					; 00000062H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	73					; 00000049H
	DB	110					; 0000006eH
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	0
$LN18@GetStream:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	84					; 00000054H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$2:
	mov	eax, DWORD PTR $T70304[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$3:
	lea	ecx, DWORD PTR _streamTemp$69493[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__unwindfunclet$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z$4:
	lea	ecx, DWORD PTR _subStreamInfo$69498[ebp]
	jmp	??1CSubStreamInfo@CMultiStream@@QAE@XZ
__ehhandler$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-128]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z ENDP ; NArchive::NSplit::CHandler::GetStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CSubStreamInfo@CMultiStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CSubStreamInfo@CMultiStream@@QAE@XZ PROC		; CMultiStream::CSubStreamInfo::CSubStreamInfo, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\common\multistream.h
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
	mov	DWORD PTR [eax+12], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], 0
	mov	DWORD PTR [edx+28], 0
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CSubStreamInfo@CMultiStream@@QAE@XZ ENDP		; CMultiStream::CSubStreamInfo::CSubStreamInfo
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
PUBLIC	??A?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEAAUCSubStreamInfo@CMultiStream@@I@Z ; CObjectVector<CMultiStream::CSubStreamInfo>::operator[]
PUBLIC	?Size@?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QBEIXZ ; CObjectVector<CMultiStream::CSubStreamInfo>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@CMultiStream@@QAEJXZ
_TEXT	SEGMENT
tv83 = -28						; size = 4
___result__$68801 = -24					; size = 4
_s$68800 = -20						; size = 4
_i$68796 = -16						; size = 4
_total$ = -12						; size = 8
_this$ = -4						; size = 4
?Init@CMultiStream@@QAEJXZ PROC				; CMultiStream::Init, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 35
	mov	DWORD PTR _total$[ebp], 0
	mov	DWORD PTR _total$[ebp+4], 0
; Line 36
	mov	DWORD PTR _i$68796[ebp], 0
	jmp	SHORT $LN4@Init
$LN3@Init:
	mov	eax, DWORD PTR _i$68796[ebp]
	add	eax, 1
	mov	DWORD PTR _i$68796[ebp], eax
$LN4@Init:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	?Size@?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QBEIXZ ; CObjectVector<CMultiStream::CSubStreamInfo>::Size
	cmp	DWORD PTR _i$68796[ebp], eax
	jae	$LN2@Init
; Line 38
	mov	ecx, DWORD PTR _i$68796[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??A?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEAAUCSubStreamInfo@CMultiStream@@I@Z ; CObjectVector<CMultiStream::CSubStreamInfo>::operator[]
	mov	DWORD PTR _s$68800[ebp], eax
; Line 39
	mov	edx, DWORD PTR _s$68800[ebp]
	mov	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _total$[ebp+4]
	mov	DWORD PTR [edx+20], ecx
; Line 40
	mov	edx, DWORD PTR _i$68796[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??A?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEAAUCSubStreamInfo@CMultiStream@@I@Z ; CObjectVector<CMultiStream::CSubStreamInfo>::operator[]
	mov	ecx, DWORD PTR _total$[ebp]
	add	ecx, DWORD PTR [eax+8]
	mov	edx, DWORD PTR _total$[ebp+4]
	adc	edx, DWORD PTR [eax+12]
	mov	DWORD PTR _total$[ebp], ecx
	mov	DWORD PTR _total$[ebp+4], edx
; Line 41
	mov	ecx, DWORD PTR _s$68800[ebp]
	call	??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ; CMyComPtr<IInStream>::operator->
	mov	DWORD PTR tv83[ebp], eax
	mov	eax, DWORD PTR _s$68800[ebp]
	add	eax, 24					; 00000018H
	mov	esi, esp
	push	eax
	push	1
	push	0
	push	0
	mov	ecx, DWORD PTR tv83[ebp]
	push	ecx
	mov	edx, DWORD PTR tv83[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR [eax+16]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$68801[ebp], eax
	cmp	DWORD PTR ___result__$68801[ebp], 0
	je	SHORT $LN1@Init
	mov	eax, DWORD PTR ___result__$68801[ebp]
	jmp	SHORT $LN5@Init
$LN1@Init:
; Line 42
	jmp	$LN3@Init
$LN2@Init:
; Line 43
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _total$[ebp]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR _total$[ebp+4]
	mov	DWORD PTR [edx+20], ecx
; Line 44
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	DWORD PTR [edx+12], 0
; Line 45
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+24], 0
; Line 46
	xor	eax, eax
$LN5@Init:
; Line 47
	pop	esi
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Init@CMultiStream@@QAEJXZ ENDP				; CMultiStream::Init
_TEXT	ENDS
PUBLIC	??0?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ ; CObjectVector<CMultiStream::CSubStreamInfo>::CObjectVector<CMultiStream::CSubStreamInfo>
PUBLIC	??_7CMultiStream@@6B@				; CMultiStream::`vftable'
PUBLIC	??0IInStream@@QAE@XZ				; IInStream::IInStream
PUBLIC	??_R4CMultiStream@@6B@				; CMultiStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMultiStream@@@8			; CMultiStream `RTTI Type Descriptor'
PUBLIC	??_R3CMultiStream@@8				; CMultiStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMultiStream@@8				; CMultiStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMultiStream@@8			; CMultiStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IInStream@@8			; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIInStream@@@8				; IInStream `RTTI Type Descriptor'
PUBLIC	??_R3IInStream@@8				; IInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInStream@@8				; IInStream::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	?QueryInterface@CMultiStream@@UAGJABU_GUID@@PAPAX@Z ; CMultiStream::QueryInterface
PUBLIC	?AddRef@CMultiStream@@UAGKXZ			; CMultiStream::AddRef
PUBLIC	?Release@CMultiStream@@UAGKXZ			; CMultiStream::Release
EXTRN	?Read@CMultiStream@@UAGJPAXIPAI@Z:PROC		; CMultiStream::Read
EXTRN	?Seek@CMultiStream@@UAGJ_JIPA_K@Z:PROC		; CMultiStream::Seek
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IInStream@@8
rdata$r	SEGMENT
??_R2IInStream@@8 DD FLAT:??_R1A@?0A@EA@IInStream@@8	; IInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInStream@@8
rdata$r	SEGMENT
??_R3IInStream@@8 DD 00H				; IInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInStream@@@8
_DATA	SEGMENT
??_R0?AUIInStream@@@8 DD FLAT:??_7type_info@@6B@	; IInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInStream@@8 DD FLAT:??_R0?AUIInStream@@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMultiStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMultiStream@@8 DD FLAT:??_R0?AVCMultiStream@@@8 ; CMultiStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMultiStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CMultiStream@@8
rdata$r	SEGMENT
??_R2CMultiStream@@8 DD FLAT:??_R1A@?0A@EA@CMultiStream@@8 ; CMultiStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CMultiStream@@8
rdata$r	SEGMENT
??_R3CMultiStream@@8 DD 00H				; CMultiStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CMultiStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMultiStream@@@8
_DATA	SEGMENT
??_R0?AVCMultiStream@@@8 DD FLAT:??_7type_info@@6B@	; CMultiStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMultiStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMultiStream@@6B@
rdata$r	SEGMENT
??_R4CMultiStream@@6B@ DD 00H				; CMultiStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMultiStream@@@8
	DD	FLAT:??_R3CMultiStream@@8
rdata$r	ENDS
;	COMDAT ??_7CMultiStream@@6B@
CONST	SEGMENT
??_7CMultiStream@@6B@ DD FLAT:??_R4CMultiStream@@6B@	; CMultiStream::`vftable'
	DD	FLAT:?QueryInterface@CMultiStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CMultiStream@@UAGKXZ
	DD	FLAT:?Release@CMultiStream@@UAGKXZ
	DD	FLAT:?Read@CMultiStream@@UAGJPAXIPAI@Z
	DD	FLAT:?Seek@CMultiStream@@UAGJ_JIPA_K@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CMultiStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMultiStream@@QAE@XZ PROC				; CMultiStream::CMultiStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMultiStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ ; CObjectVector<CMultiStream::CSubStreamInfo>::CObjectVector<CMultiStream::CSubStreamInfo>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMultiStream@@QAE@XZ ENDP				; CMultiStream::CMultiStream
_TEXT	ENDS
EXTRN	_IID_IInStream:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CMultiStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CMultiStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CMultiStream::QueryInterface, COMDAT
; Line 49
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@2
$LN4@QueryInter@2:
	push	OFFSET _IID_IInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@2
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN3@QueryInter@2
$LN2@QueryInter@2:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN5@QueryInter@2
$LN3@QueryInter@2:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN5@QueryInter@2:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CMultiStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CMultiStream::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CMultiStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CMultiStream@@UAGKXZ PROC			; CMultiStream::AddRef, COMDAT
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CMultiStream@@UAGKXZ ENDP			; CMultiStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCMultiStream@@QAEPAXI@Z			; CMultiStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CMultiStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T70341 = -8						; size = 4
$T70340 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CMultiStream@@UAGKXZ PROC			; CMultiStream::Release, COMDAT
; Line 49
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release@2
$LN1@Release@2:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T70341[ebp], edx
	mov	eax, DWORD PTR $T70341[ebp]
	mov	DWORD PTR $T70340[ebp], eax
	cmp	DWORD PTR $T70340[ebp], 0
	je	SHORT $LN4@Release@2
	push	1
	mov	ecx, DWORD PTR $T70340[ebp]
	call	??_GCMultiStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@2
$LN4@Release@2:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@2:
	xor	eax, eax
$LN2@Release@2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CMultiStream@@UAGKXZ ENDP			; CMultiStream::Release
_TEXT	ENDS
PUBLIC	??1CMultiStream@@QAE@XZ				; CMultiStream::~CMultiStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCMultiStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMultiStream@@QAEPAXI@Z PROC			; CMultiStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMultiStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMultiStream@@QAEPAXI@Z ENDP			; CMultiStream::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ ; CObjectVector<CMultiStream::CSubStreamInfo>::~CObjectVector<CMultiStream::CSubStreamInfo>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMultiStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMultiStream@@QAE@XZ PROC				; CMultiStream::~CMultiStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ ; CObjectVector<CMultiStream::CSubStreamInfo>::~CObjectVector<CMultiStream::CSubStreamInfo>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMultiStream@@QAE@XZ ENDP				; CMultiStream::~CMultiStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CSubStreamInfo@CMultiStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CSubStreamInfo@CMultiStream@@QAE@XZ PROC		; CMultiStream::CSubStreamInfo::~CSubStreamInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CSubStreamInfo@CMultiStream@@QAE@XZ ENDP		; CMultiStream::CSubStreamInfo::~CSubStreamInfo
_TEXT	ENDS
PUBLIC	??_7IInStream@@6B@				; IInStream::`vftable'
PUBLIC	??_R4IInStream@@6B@				; IInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4IInStream@@6B@
rdata$r	SEGMENT
??_R4IInStream@@6B@ DD 00H				; IInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInStream@@@8
	DD	FLAT:??_R3IInStream@@8
rdata$r	ENDS
;	COMDAT ??_7IInStream@@6B@
CONST	SEGMENT
??_7IInStream@@6B@ DD FLAT:??_R4IInStream@@6B@		; IInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInStream@@QAE@XZ PROC				; IInStream::IInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInStream@@QAE@XZ ENDP				; IInStream::IInStream
_TEXT	ENDS
PUBLIC	??0CHandler@NSplit@NArchive@@QAE@XZ		; NArchive::NSplit::CHandler::CHandler
xdata$x	SEGMENT
__unwindtable$?CreateArc@NSplit@NArchive@@YGPAUIInArchive@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?CreateArc@NSplit@NArchive@@YGPAUIInArchive@@XZ$0
__ehfuncinfo$?CreateArc@NSplit@NArchive@@YGPAUIInArchive@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?CreateArc@NSplit@NArchive@@YGPAUIInArchive@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv74 = -24						; size = 4
$T70357 = -20						; size = 4
$T70356 = -16						; size = 4
__$EHRec$ = -12						; size = 12
?CreateArc@NSplit@NArchive@@YGPAUIInArchive@@XZ PROC	; NArchive::NSplit::CreateArc
; File c:\workspace\7z1505-src\cpp\7zip\archive\splithandler.cpp
; Line 349
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?CreateArc@NSplit@NArchive@@YGPAUIInArchive@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-24], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-20], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	push	56					; 00000038H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70357[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T70357[ebp], 0
	je	SHORT $LN3@CreateArc
	mov	ecx, DWORD PTR $T70357[ebp]
	call	??0CHandler@NSplit@NArchive@@QAE@XZ
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@CreateArc
$LN3@CreateArc:
	mov	DWORD PTR tv74[ebp], 0
$LN4@CreateArc:
	mov	eax, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T70356[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR $T70356[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?CreateArc@NSplit@NArchive@@YGPAUIInArchive@@XZ$0:
	mov	eax, DWORD PTR $T70357[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?CreateArc@NSplit@NArchive@@YGPAUIInArchive@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-16]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?CreateArc@NSplit@NArchive@@YGPAUIInArchive@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?CreateArc@NSplit@NArchive@@YGPAUIInArchive@@XZ ENDP	; NArchive::NSplit::CreateArc
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
PUBLIC	??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<IInStream> >::~CObjectVector<CMyComPtr<IInStream> >
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	??0?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<IInStream> >::CObjectVector<CMyComPtr<IInStream> >
PUBLIC	??_7CHandler@NSplit@NArchive@@6BIInArchiveGetStream@@@ ; NArchive::NSplit::CHandler::`vftable'
PUBLIC	??_7CHandler@NSplit@NArchive@@6BIInArchive@@@	; NArchive::NSplit::CHandler::`vftable'
PUBLIC	??0IInArchiveGetStream@@QAE@XZ			; IInArchiveGetStream::IInArchiveGetStream
PUBLIC	??0IInArchive@@QAE@XZ				; IInArchive::IInArchive
PUBLIC	??_R4CHandler@NSplit@NArchive@@6BIInArchive@@@	; NArchive::NSplit::CHandler::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCHandler@NSplit@NArchive@@@8		; NArchive::NSplit::CHandler `RTTI Type Descriptor'
PUBLIC	??_R3CHandler@NSplit@NArchive@@8		; NArchive::NSplit::CHandler::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CHandler@NSplit@NArchive@@8		; NArchive::NSplit::CHandler::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CHandler@NSplit@NArchive@@8	; NArchive::NSplit::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IInArchive@@8			; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIInArchive@@@8				; IInArchive `RTTI Type Descriptor'
PUBLIC	??_R3IInArchive@@8				; IInArchive::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInArchive@@8				; IInArchive::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@IInArchiveGetStream@@8		; IInArchiveGetStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AUIInArchiveGetStream@@@8			; IInArchiveGetStream `RTTI Type Descriptor'
PUBLIC	??_R3IInArchiveGetStream@@8			; IInArchiveGetStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInArchiveGetStream@@8			; IInArchiveGetStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IInArchiveGetStream@@8		; IInArchiveGetStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R17?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
PUBLIC	?QueryInterface@CHandler@NSplit@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NSplit::CHandler::QueryInterface
PUBLIC	?AddRef@CHandler@NSplit@NArchive@@UAGKXZ	; NArchive::NSplit::CHandler::AddRef
PUBLIC	?Release@CHandler@NSplit@NArchive@@UAGKXZ	; NArchive::NSplit::CHandler::Release
PUBLIC	??_R4CHandler@NSplit@NArchive@@6BIInArchiveGetStream@@@ ; NArchive::NSplit::CHandler::`RTTI Complete Object Locator'
PUBLIC	?QueryInterface@CHandler@NSplit@NArchive@@W3AGJABU_GUID@@PAPAX@Z ; [thunk]:NArchive::NSplit::CHandler::QueryInterface`adjustor{4}'
PUBLIC	?AddRef@CHandler@NSplit@NArchive@@W3AGKXZ	; [thunk]:NArchive::NSplit::CHandler::AddRef`adjustor{4}'
PUBLIC	?Release@CHandler@NSplit@NArchive@@W3AGKXZ	; [thunk]:NArchive::NSplit::CHandler::Release`adjustor{4}'
;	COMDAT ??_R4CHandler@NSplit@NArchive@@6BIInArchiveGetStream@@@
rdata$r	SEGMENT
??_R4CHandler@NSplit@NArchive@@6BIInArchiveGetStream@@@ DD 00H ; NArchive::NSplit::CHandler::`RTTI Complete Object Locator'
	DD	04H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NSplit@NArchive@@@8
	DD	FLAT:??_R3CHandler@NSplit@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R17?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (8,-1,0,64)'
	DD	00H
	DD	08H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@IInArchiveGetStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInArchiveGetStream@@8 DD FLAT:??_R0?AUIInArchiveGetStream@@@8 ; IInArchiveGetStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInArchiveGetStream@@8
rdata$r	ENDS
;	COMDAT ??_R2IInArchiveGetStream@@8
rdata$r	SEGMENT
??_R2IInArchiveGetStream@@8 DD FLAT:??_R1A@?0A@EA@IInArchiveGetStream@@8 ; IInArchiveGetStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInArchiveGetStream@@8
rdata$r	SEGMENT
??_R3IInArchiveGetStream@@8 DD 00H			; IInArchiveGetStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IInArchiveGetStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInArchiveGetStream@@@8
_DATA	SEGMENT
??_R0?AUIInArchiveGetStream@@@8 DD FLAT:??_7type_info@@6B@ ; IInArchiveGetStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInArchiveGetStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@IInArchiveGetStream@@8
rdata$r	SEGMENT
??_R13?0A@EA@IInArchiveGetStream@@8 DD FLAT:??_R0?AUIInArchiveGetStream@@@8 ; IInArchiveGetStream::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	01H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInArchiveGetStream@@8
rdata$r	ENDS
;	COMDAT ??_R2IInArchive@@8
rdata$r	SEGMENT
??_R2IInArchive@@8 DD FLAT:??_R1A@?0A@EA@IInArchive@@8	; IInArchive::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInArchive@@8
rdata$r	SEGMENT
??_R3IInArchive@@8 DD 00H				; IInArchive::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInArchive@@@8
_DATA	SEGMENT
??_R0?AUIInArchive@@@8 DD FLAT:??_7type_info@@6B@	; IInArchive `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IInArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInArchive@@8 DD FLAT:??_R0?AUIInArchive@@@8 ; IInArchive::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CHandler@NSplit@NArchive@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CHandler@NSplit@NArchive@@8 DD FLAT:??_R0?AVCHandler@NSplit@NArchive@@@8 ; NArchive::NSplit::CHandler::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	05H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CHandler@NSplit@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R2CHandler@NSplit@NArchive@@8
rdata$r	SEGMENT
??_R2CHandler@NSplit@NArchive@@8 DD FLAT:??_R1A@?0A@EA@CHandler@NSplit@NArchive@@8 ; NArchive::NSplit::CHandler::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInArchive@@8
	DD	FLAT:??_R1A@?0A@EC@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@IInArchiveGetStream@@8
	DD	FLAT:??_R13?0A@EC@IUnknown@@8
	DD	FLAT:??_R17?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CHandler@NSplit@NArchive@@8
rdata$r	SEGMENT
??_R3CHandler@NSplit@NArchive@@8 DD 00H			; NArchive::NSplit::CHandler::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	06H
	DD	FLAT:??_R2CHandler@NSplit@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCHandler@NSplit@NArchive@@@8
_DATA	SEGMENT
??_R0?AVCHandler@NSplit@NArchive@@@8 DD FLAT:??_7type_info@@6B@ ; NArchive::NSplit::CHandler `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCHandler@NSplit@NArchive@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CHandler@NSplit@NArchive@@6BIInArchive@@@
rdata$r	SEGMENT
??_R4CHandler@NSplit@NArchive@@6BIInArchive@@@ DD 00H	; NArchive::NSplit::CHandler::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCHandler@NSplit@NArchive@@@8
	DD	FLAT:??_R3CHandler@NSplit@NArchive@@8
rdata$r	ENDS
;	COMDAT ??_7CHandler@NSplit@NArchive@@6BIInArchiveGetStream@@@
CONST	SEGMENT
??_7CHandler@NSplit@NArchive@@6BIInArchiveGetStream@@@ DD FLAT:??_R4CHandler@NSplit@NArchive@@6BIInArchiveGetStream@@@ ; NArchive::NSplit::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NSplit@NArchive@@W3AGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NSplit@NArchive@@W3AGKXZ
	DD	FLAT:?Release@CHandler@NSplit@NArchive@@W3AGKXZ
	DD	FLAT:?GetStream@CHandler@NSplit@NArchive@@UAGJIPAPAUISequentialInStream@@@Z
CONST	ENDS
;	COMDAT ??_7CHandler@NSplit@NArchive@@6BIInArchive@@@
CONST	SEGMENT
??_7CHandler@NSplit@NArchive@@6BIInArchive@@@ DD FLAT:??_R4CHandler@NSplit@NArchive@@6BIInArchive@@@ ; NArchive::NSplit::CHandler::`vftable'
	DD	FLAT:?QueryInterface@CHandler@NSplit@NArchive@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CHandler@NSplit@NArchive@@UAGKXZ
	DD	FLAT:?Release@CHandler@NSplit@NArchive@@UAGKXZ
	DD	FLAT:?Open@CHandler@NSplit@NArchive@@UAGJPAUIInStream@@PB_KPAUIArchiveOpenCallback@@@Z
	DD	FLAT:?Close@CHandler@NSplit@NArchive@@UAGJXZ
	DD	FLAT:?GetNumberOfItems@CHandler@NSplit@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetProperty@CHandler@NSplit@NArchive@@UAGJIKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?Extract@CHandler@NSplit@NArchive@@UAGJPBIIHPAUIArchiveExtractCallback@@@Z
	DD	FLAT:?GetArchiveProperty@CHandler@NSplit@NArchive@@UAGJKPAUtagPROPVARIANT@@@Z
	DD	FLAT:?GetNumberOfProperties@CHandler@NSplit@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetPropertyInfo@CHandler@NSplit@NArchive@@UAGJIPAPA_WPAKPAG@Z
	DD	FLAT:?GetNumberOfArchiveProperties@CHandler@NSplit@NArchive@@UAGJPAI@Z
	DD	FLAT:?GetArchivePropertyInfo@CHandler@NSplit@NArchive@@UAGJIPAPA_WPAKPAG@Z
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CHandler@NSplit@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CHandler@NSplit@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CHandler@NSplit@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CHandler@NSplit@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CHandler@NSplit@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CHandler@NSplit@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CHandler@NSplit@NArchive@@QAE@XZ PROC		; NArchive::NSplit::CHandler::CHandler, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CHandler@NSplit@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0IInArchiveGetStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CHandler@NSplit@NArchive@@6BIInArchive@@@
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], OFFSET ??_7CHandler@NSplit@NArchive@@6BIInArchiveGetStream@@@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<IInStream> >::CObjectVector<CMyComPtr<IInStream> >
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CHandler@NSplit@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<IInStream> >::~CObjectVector<CMyComPtr<IInStream> >
__unwindfunclet$??0CHandler@NSplit@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__ehhandler$??0CHandler@NSplit@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CHandler@NSplit@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CHandler@NSplit@NArchive@@QAE@XZ ENDP		; NArchive::NSplit::CHandler::CHandler
EXTRN	_IID_IInArchiveGetStream:BYTE
EXTRN	_IID_IInArchive:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CHandler@NSplit@NArchive@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
tv92 = -4						; size = 4
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CHandler@NSplit@NArchive@@UAGJABU_GUID@@PAPAX@Z PROC ; NArchive::NSplit::CHandler::QueryInterface, COMDAT
; Line 46
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@3
$LN6@QueryInter@3:
	push	OFFSET _IID_IInArchive
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter@3
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter@3
$LN4@QueryInter@3:
	push	OFFSET _IID_IInArchiveGetStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter@3
	cmp	DWORD PTR _this$[ebp], 0
	je	SHORT $LN9@QueryInter@3
	mov	edx, DWORD PTR _this$[ebp]
	add	edx, 4
	mov	DWORD PTR tv92[ebp], edx
	jmp	SHORT $LN10@QueryInter@3
$LN9@QueryInter@3:
	mov	DWORD PTR tv92[ebp], 0
$LN10@QueryInter@3:
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	ecx, DWORD PTR tv92[ebp]
	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN5@QueryInter@3
$LN2@QueryInter@3:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter@3
$LN5@QueryInter@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], eax
	xor	eax, eax
$LN7@QueryInter@3:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CHandler@NSplit@NArchive@@UAGJABU_GUID@@PAPAX@Z ENDP ; NArchive::NSplit::CHandler::QueryInterface
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NSplit@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CHandler@NSplit@NArchive@@UAGKXZ PROC		; NArchive::NSplit::CHandler::AddRef, COMDAT
; Line 46
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CHandler@NSplit@NArchive@@UAGKXZ ENDP		; NArchive::NSplit::CHandler::AddRef
_TEXT	ENDS
PUBLIC	??_GCHandler@NSplit@NArchive@@QAEPAXI@Z		; NArchive::NSplit::CHandler::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CHandler@NSplit@NArchive@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T70384 = -8						; size = 4
$T70383 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CHandler@NSplit@NArchive@@UAGKXZ PROC		; NArchive::NSplit::CHandler::Release, COMDAT
; Line 46
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+8], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+8]
	jmp	SHORT $LN2@Release@3
$LN1@Release@3:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T70384[ebp], edx
	mov	eax, DWORD PTR $T70384[ebp]
	mov	DWORD PTR $T70383[ebp], eax
	cmp	DWORD PTR $T70383[ebp], 0
	je	SHORT $LN4@Release@3
	push	1
	mov	ecx, DWORD PTR $T70383[ebp]
	call	??_GCHandler@NSplit@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release@3
$LN4@Release@3:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release@3:
	xor	eax, eax
$LN2@Release@3:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CHandler@NSplit@NArchive@@UAGKXZ ENDP		; NArchive::NSplit::CHandler::Release
_TEXT	ENDS
PUBLIC	??1CHandler@NSplit@NArchive@@QAE@XZ		; NArchive::NSplit::CHandler::~CHandler
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCHandler@NSplit@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCHandler@NSplit@NArchive@@QAEPAXI@Z PROC		; NArchive::NSplit::CHandler::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CHandler@NSplit@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCHandler@NSplit@NArchive@@QAEPAXI@Z ENDP		; NArchive::NSplit::CHandler::`scalar deleting destructor'
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CHandler@NSplit@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CHandler@NSplit@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CHandler@NSplit@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CHandler@NSplit@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CHandler@NSplit@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CHandler@NSplit@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CHandler@NSplit@NArchive@@QAE@XZ PROC		; NArchive::NSplit::CHandler::~CHandler, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CHandler@NSplit@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<IInStream> >::~CObjectVector<CMyComPtr<IInStream> >
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CHandler@NSplit@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ ; CObjectVector<CMyComPtr<IInStream> >::~CObjectVector<CMyComPtr<IInStream> >
__unwindfunclet$??1CHandler@NSplit@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__ehhandler$??1CHandler@NSplit@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CHandler@NSplit@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CHandler@NSplit@NArchive@@QAE@XZ ENDP		; NArchive::NSplit::CHandler::~CHandler
PUBLIC	??_7IInArchive@@6B@				; IInArchive::`vftable'
PUBLIC	??_R4IInArchive@@6B@				; IInArchive::`RTTI Complete Object Locator'
;	COMDAT ??_R4IInArchive@@6B@
rdata$r	SEGMENT
??_R4IInArchive@@6B@ DD 00H				; IInArchive::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInArchive@@@8
	DD	FLAT:??_R3IInArchive@@8
rdata$r	ENDS
;	COMDAT ??_7IInArchive@@6B@
CONST	SEGMENT
??_7IInArchive@@6B@ DD FLAT:??_R4IInArchive@@6B@	; IInArchive::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInArchive@@QAE@XZ PROC				; IInArchive::IInArchive, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInArchive@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInArchive@@QAE@XZ ENDP				; IInArchive::IInArchive
_TEXT	ENDS
PUBLIC	??_7IInArchiveGetStream@@6B@			; IInArchiveGetStream::`vftable'
PUBLIC	??_R4IInArchiveGetStream@@6B@			; IInArchiveGetStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4IInArchiveGetStream@@6B@
rdata$r	SEGMENT
??_R4IInArchiveGetStream@@6B@ DD 00H			; IInArchiveGetStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInArchiveGetStream@@@8
	DD	FLAT:??_R3IInArchiveGetStream@@8
rdata$r	ENDS
;	COMDAT ??_7IInArchiveGetStream@@6B@
CONST	SEGMENT
??_7IInArchiveGetStream@@6B@ DD FLAT:??_R4IInArchiveGetStream@@6B@ ; IInArchiveGetStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInArchiveGetStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInArchiveGetStream@@QAE@XZ PROC			; IInArchiveGetStream::IInArchiveGetStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInArchiveGetStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInArchiveGetStream@@QAE@XZ ENDP			; IInArchiveGetStream::IInArchiveGetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z PROC ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@PAUICompressProgressInfo@@@Z ENDP ; CMyComPtr<ICompressProgressInfo>::CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ PROC	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ ENDP	; CMyComPtr<ICompressProgressInfo>::~CMyComPtr<ICompressProgressInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ PROC ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ ENDP ; CMyComPtr<ICompressProgressInfo>::operator ICompressProgressInfo *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z PROC ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ENDP ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_pt$ = -8						; size = 4
_this$ = -4						; size = 4
?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::Detach, COMDAT
; _this$ = ecx
; Line 45
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR _pt$[ebp], ecx
; Line 47
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 48
	mov	eax, DWORD PTR _pt$[ebp]
; Line 49
	mov	esp, ebp
	pop	ebp
	ret	0
?Detach@?$CMyComPtr@UISequentialInStream@@@@QAEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::Detach
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z PROC	; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@5
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@5:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIInStream@@@@QAE@PAUIInStream@@@Z ENDP	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIInStream@@@@QAE@XZ PROC		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@6
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@6:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIInStream@@@@QAE@XZ ENDP		; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator IInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator IInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIInStream@@@@QAEPAPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ PROC	; CMyComPtr<IInStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIInStream@@@@QBEPAUIInStream@@XZ ENDP	; CMyComPtr<IInStream>::operator->
_TEXT	ENDS
PUBLIC	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@ABV0@@Z PROC ; CMyComPtr<IInStream>::operator=, COMDAT
; _this$ = ecx
; Line 36
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _lp$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ; CMyComPtr<IInStream>::operator=
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@ABV0@@Z ENDP ; CMyComPtr<IInStream>::operator=
_TEXT	ENDS
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QBEIXZ PROC ; CObjectVector<CMultiStream::CSubStreamInfo>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QBEIXZ ENDP ; CObjectVector<CMultiStream::CSubStreamInfo>::Size
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ PROC ; CObjectVector<CMultiStream::CSubStreamInfo>::CObjectVector<CMultiStream::CSubStreamInfo>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ ENDP ; CObjectVector<CMultiStream::CSubStreamInfo>::CObjectVector<CMultiStream::CSubStreamInfo>
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEAAUCSubStreamInfo@CMultiStream@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEAAUCSubStreamInfo@CMultiStream@@I@Z PROC ; CObjectVector<CMultiStream::CSubStreamInfo>::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEAAUCSubStreamInfo@CMultiStream@@I@Z ENDP ; CObjectVector<CMultiStream::CSubStreamInfo>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
PUBLIC	??0CSubStreamInfo@CMultiStream@@QAE@ABU01@@Z	; CMultiStream::CSubStreamInfo::CSubStreamInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEIABUCSubStreamInfo@CMultiStream@@@Z
_TEXT	SEGMENT
tv72 = -12						; size = 4
$T70441 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEIABUCSubStreamInfo@CMultiStream@@@Z PROC ; CObjectVector<CMultiStream::CSubStreamInfo>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70441[ebp], eax
	cmp	DWORD PTR $T70441[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T70441[ebp]
	call	??0CSubStreamInfo@CMultiStream@@QAE@ABU01@@Z
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv72[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAEIABUCSubStreamInfo@CMultiStream@@@Z ENDP ; CObjectVector<CMultiStream::CSubStreamInfo>::Add
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GCSubStreamInfo@CMultiStream@@QAEPAXI@Z	; CMultiStream::CSubStreamInfo::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T70447 = -28						; size = 4
$T70446 = -24						; size = 4
_i$69614 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ PROC ; CObjectVector<CMultiStream::CSubStreamInfo>::~CObjectVector<CMultiStream::CSubStreamInfo>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$69614[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$69614[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$69614[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$69614[ebp], eax
	mov	ecx, DWORD PTR _i$69614[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T70447[ebp], edx
	mov	eax, DWORD PTR $T70447[ebp]
	mov	DWORD PTR $T70446[ebp], eax
	cmp	DWORD PTR $T70446[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T70446[ebp]
	call	??_GCSubStreamInfo@CMultiStream@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCSubStreamInfo@CMultiStream@@@@QAE@XZ ENDP ; CObjectVector<CMultiStream::CSubStreamInfo>::~CObjectVector<CMultiStream::CSubStreamInfo>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBEIXZ PROC ; CObjectVector<CMyComPtr<IInStream> >::Size, COMDAT
; _this$ = ecx
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBEIXZ ENDP ; CObjectVector<CMyComPtr<IInStream> >::Size
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBE_NXZ PROC ; CObjectVector<CMyComPtr<IInStream> >::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QBE_NXZ ENDP ; CObjectVector<CMyComPtr<IInStream> >::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ PROC ; CObjectVector<CMyComPtr<IInStream> >::CObjectVector<CMyComPtr<IInStream> >, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ ENDP ; CObjectVector<CMyComPtr<IInStream> >::CObjectVector<CMyComPtr<IInStream> >
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEAAV?$CMyComPtr@UIInStream@@@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEAAV?$CMyComPtr@UIInStream@@@@I@Z PROC ; CObjectVector<CMyComPtr<IInStream> >::operator[], COMDAT
; _this$ = ecx
; Line 451
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEAAV?$CMyComPtr@UIInStream@@@@I@Z ENDP ; CObjectVector<CMyComPtr<IInStream> >::operator[]
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z	; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEIABV?$CMyComPtr@UIInStream@@@@@Z
_TEXT	SEGMENT
tv72 = -12						; size = 4
$T70468 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEIABV?$CMyComPtr@UIInStream@@@@@Z PROC ; CObjectVector<CMyComPtr<IInStream> >::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	4
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70468[ebp], eax
	cmp	DWORD PTR $T70468[ebp], 0
	je	SHORT $LN3@Add@2
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T70468[ebp]
	call	??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	DWORD PTR tv72[ebp], eax
	jmp	SHORT $LN4@Add@2
$LN3@Add@2:
	mov	DWORD PTR tv72[ebp], 0
$LN4@Add@2:
	mov	ecx, DWORD PTR tv72[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEIABV?$CMyComPtr@UIInStream@@@@@Z ENDP ; CObjectVector<CMyComPtr<IInStream> >::Add
_TEXT	ENDS
PUBLIC	??_G?$CMyComPtr@UIInStream@@@@QAEPAXI@Z		; CMyComPtr<IInStream>::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T70474 = -28						; size = 4
$T70473 = -24						; size = 4
_i$69636 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ PROC ; CObjectVector<CMyComPtr<IInStream> >::~CObjectVector<CMyComPtr<IInStream> >, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$69636[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$69636[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$69636[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$69636[ebp], eax
	mov	ecx, DWORD PTR _i$69636[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T70474[ebp], edx
	mov	eax, DWORD PTR $T70474[ebp]
	mov	DWORD PTR $T70473[ebp], eax
	cmp	DWORD PTR $T70473[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T70473[ebp]
	call	??_G?$CMyComPtr@UIInStream@@@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAE@XZ ENDP ; CObjectVector<CMyComPtr<IInStream> >::~CObjectVector<CMyComPtr<IInStream> >
PUBLIC	?Clear@?$CRecordVector@PAX@@QAEXXZ		; CRecordVector<void *>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Clear@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEXXZ
_TEXT	SEGMENT
tv75 = -20						; size = 4
$T70487 = -16						; size = 4
$T70486 = -12						; size = 4
_i$69645 = -8						; size = 4
_this$ = -4						; size = 4
?Clear@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEXXZ PROC ; CObjectVector<CMyComPtr<IInStream> >::Clear, COMDAT
; _this$ = ecx
; Line 499
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 500
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$69645[ebp], eax
$LN2@Clear:
	cmp	DWORD PTR _i$69645[ebp], 0
	je	SHORT $LN1@Clear
; Line 501
	mov	eax, DWORD PTR _i$69645[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$69645[ebp], eax
	mov	ecx, DWORD PTR _i$69645[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T70487[ebp], edx
	mov	eax, DWORD PTR $T70487[ebp]
	mov	DWORD PTR $T70486[ebp], eax
	cmp	DWORD PTR $T70486[ebp], 0
	je	SHORT $LN5@Clear
	push	1
	mov	ecx, DWORD PTR $T70486[ebp]
	call	??_G?$CMyComPtr@UIInStream@@@@QAEPAXI@Z
	mov	DWORD PTR tv75[ebp], eax
	jmp	SHORT $LN6@Clear
$LN5@Clear:
	mov	DWORD PTR tv75[ebp], 0
$LN6@Clear:
	jmp	SHORT $LN2@Clear
$LN1@Clear:
; Line 502
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@PAX@@QAEXXZ	; CRecordVector<void *>::Clear
; Line 503
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CObjectVector@V?$CMyComPtr@UIInStream@@@@@@QAEXXZ ENDP ; CObjectVector<CMyComPtr<IInStream> >::Clear
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@_K@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@_K@@QBE_NXZ PROC		; CRecordVector<unsigned __int64>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@_K@@QBE_NXZ ENDP		; CRecordVector<unsigned __int64>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T70496 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T70496[ebp], ecx
	mov	edx, DWORD PTR $T70496[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_K@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_K@@QAEXXZ PROC			; CRecordVector<unsigned __int64>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_K@@QAEXXZ ENDP			; CRecordVector<unsigned __int64>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@_K@@QAEI_K@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?Add@?$CRecordVector@_K@@QAEI_K@Z PROC			; CRecordVector<unsigned __int64>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@?$CRecordVector@_K@@QAEI_K@Z ENDP			; CRecordVector<unsigned __int64>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ PROC ; CMyComPtr<IArchiveOpenVolumeCallback>::CMyComPtr<IArchiveOpenVolumeCallback>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveOpenVolumeCallback>::CMyComPtr<IArchiveOpenVolumeCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ PROC ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@7
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@7:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAE@XZ ENDP ; CMyComPtr<IArchiveOpenVolumeCallback>::~CMyComPtr<IArchiveOpenVolumeCallback>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ PROC ; CMyComPtr<IArchiveOpenVolumeCallback>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QAEPAPAUIArchiveOpenVolumeCallback@@XZ ENDP ; CMyComPtr<IArchiveOpenVolumeCallback>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ PROC ; CMyComPtr<IArchiveOpenVolumeCallback>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBEPAUIArchiveOpenVolumeCallback@@XZ ENDP ; CMyComPtr<IArchiveOpenVolumeCallback>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ PROC ; CMyComPtr<IArchiveOpenVolumeCallback>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIArchiveOpenVolumeCallback@@@@QBE_NXZ ENDP ; CMyComPtr<IArchiveOpenVolumeCallback>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@8
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@8:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialOutStream>::~CMyComPtr<ISequentialOutStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@4
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@4:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UISequentialOutStream@@@@QAEPAPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ PROC	; CMyComPtr<ISequentialOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ ENDP	; CMyComPtr<ISequentialOutStream>::operator!
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z PROC ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@9
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@9:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UICompressCoder@@@@QAE@PAUICompressCoder@@@Z ENDP ; CMyComPtr<ICompressCoder>::CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ PROC		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@10
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@10:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ ENDP		; CMyComPtr<ICompressCoder>::~CMyComPtr<ICompressCoder>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ PROC ; CMyComPtr<ICompressCoder>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ ENDP ; CMyComPtr<ICompressCoder>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CSubStreamInfo@CMultiStream@@QAE@ABU01@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___that$ = 8						; size = 4
??0CSubStreamInfo@CMultiStream@@QAE@ABU01@@Z PROC	; CMultiStream::CSubStreamInfo::CSubStreamInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___that$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z ; CMyComPtr<IInStream>::CMyComPtr<IInStream>
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR ___that$[ebp]
	mov	eax, DWORD PTR [edx+8]
	mov	DWORD PTR [ecx+8], eax
	mov	edx, DWORD PTR [edx+12]
	mov	DWORD PTR [ecx+12], edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR ___that$[ebp]
	mov	edx, DWORD PTR [ecx+16]
	mov	DWORD PTR [eax+16], edx
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [eax+20], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR ___that$[ebp]
	mov	ecx, DWORD PTR [eax+24]
	mov	DWORD PTR [edx+24], ecx
	mov	eax, DWORD PTR [eax+28]
	mov	DWORD PTR [edx+28], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0CSubStreamInfo@CMultiStream@@QAE@ABU01@@Z ENDP	; CMultiStream::CSubStreamInfo::CSubStreamInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_GCSubStreamInfo@CMultiStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCSubStreamInfo@CMultiStream@@QAEPAXI@Z PROC		; CMultiStream::CSubStreamInfo::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CSubStreamInfo@CMultiStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCSubStreamInfo@CMultiStream@@QAEPAXI@Z ENDP		; CMultiStream::CSubStreamInfo::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??_G?$CMyComPtr@UIInStream@@@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_G?$CMyComPtr@UIInStream@@@@QAEPAXI@Z PROC		; CMyComPtr<IInStream>::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CMyComPtr@UIInStream@@@@QAE@XZ	; CMyComPtr<IInStream>::~CMyComPtr<IInStream>
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@5
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@5:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_G?$CMyComPtr@UIInStream@@@@QAEPAXI@Z ENDP		; CMyComPtr<IInStream>::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ PROC		; CRecordVector<void *>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ENDP		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T70545 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T70545[ebp], ecx
	mov	edx, DWORD PTR $T70545[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@PAX@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@PAX@@QAEXXZ PROC			; CRecordVector<void *>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@PAX@@QAEXXZ ENDP			; CRecordVector<void *>::Clear
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_lp$ = 8						; size = 4
??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z PROC		; CMyComPtr<IInStream>::CMyComPtr<IInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 20
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _lp$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR [eax], edx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@11
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@11:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UIInStream@@@@QAE@ABV0@@Z ENDP		; CMyComPtr<IInStream>::CMyComPtr<IInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z PROC ; CMyComPtr<IInStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIInStream@@@@QAEPAUIInStream@@PAU1@@Z ENDP ; CMyComPtr<IInStream>::operator=
_TEXT	ENDS
EXTRN	_memcpy:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
_TEXT	SEGMENT
$T70559 = -20						; size = 4
$T70558 = -16						; size = 4
_p$69736 = -12						; size = 4
_newCapacity$69735 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ PROC	; CRecordVector<unsigned __int64>::ReserveOnePosition, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$69735[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$69735[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70558[ebp], eax
	mov	eax, DWORD PTR $T70558[ebp]
	mov	DWORD PTR _p$69736[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$69736[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T70559[ebp], edx
	mov	eax, DWORD PTR $T70559[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$69736[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$69735[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ENDP	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T70563 = -20						; size = 4
$T70562 = -16						; size = 4
_p$69747 = -12						; size = 4
_newCapacity$69746 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$69746[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$69746[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T70562[ebp], eax
	mov	eax, DWORD PTR $T70562[ebp]
	mov	DWORD PTR _p$69747[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$69747[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T70563[ebp], edx
	mov	eax, DWORD PTR $T70563[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$69747[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$69746[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@W3AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@W3AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@W3AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CHandler@NSplit@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CHandler@NSplit@NArchive@@W3AGKXZ PROC		; [thunk]:NArchive::NSplit::CHandler::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CHandler@NSplit@NArchive@@UAGKXZ ; NArchive::NSplit::CHandler::AddRef
?AddRef@CHandler@NSplit@NArchive@@W3AGKXZ ENDP		; [thunk]:NArchive::NSplit::CHandler::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@W7AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@W7AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@W7AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CHandler@NSplit@NArchive@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CHandler@NSplit@NArchive@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NArchive::NSplit::CHandler::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CHandler@NSplit@NArchive@@UAGJABU_GUID@@PAPAX@Z ; NArchive::NSplit::CHandler::QueryInterface
?QueryInterface@CHandler@NSplit@NArchive@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NArchive::NSplit::CHandler::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CCopyCoder@NCompress@@WM@AGKXZ
_TEXT	SEGMENT
?Release@CCopyCoder@NCompress@@WM@AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?Release@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::Release
?Release@CCopyCoder@NCompress@@WM@AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::Release`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@W3AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@W3AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@W3AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@W7AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@W7AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@W7AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@W3AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{4}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CCopyCoder@NCompress@@WM@AGKXZ
_TEXT	SEGMENT
?AddRef@CCopyCoder@NCompress@@WM@AGKXZ PROC		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?AddRef@CCopyCoder@NCompress@@UAGKXZ	; NCompress::CCopyCoder::AddRef
?AddRef@CCopyCoder@NCompress@@WM@AGKXZ ENDP		; [thunk]:NCompress::CCopyCoder::AddRef`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}', COMDAT
	sub	DWORD PTR [esp+4], 8
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@W7AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{8}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z PROC ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}', COMDAT
	sub	DWORD PTR [esp+4], 12			; 0000000cH
	jmp	?QueryInterface@CCopyCoder@NCompress@@UAGJABU_GUID@@PAPAX@Z ; NCompress::CCopyCoder::QueryInterface
?QueryInterface@CCopyCoder@NCompress@@WM@AGJABU_GUID@@PAPAX@Z ENDP ; [thunk]:NCompress::CCopyCoder::QueryInterface`adjustor{12}'
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@CHandler@NSplit@NArchive@@W3AGKXZ
_TEXT	SEGMENT
?Release@CHandler@NSplit@NArchive@@W3AGKXZ PROC		; [thunk]:NArchive::NSplit::CHandler::Release`adjustor{4}', COMDAT
	sub	DWORD PTR [esp+4], 4
	jmp	?Release@CHandler@NSplit@NArchive@@UAGKXZ ; NArchive::NSplit::CHandler::Release
?Release@CHandler@NSplit@NArchive@@W3AGKXZ ENDP		; [thunk]:NArchive::NSplit::CHandler::Release`adjustor{4}'
_TEXT	ENDS
PUBLIC	??0CRegisterArc@NSplit@NArchive@@QAE@XZ		; NArchive::NSplit::CRegisterArc::CRegisterArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??__Eg_RegisterArc@NSplit@NArchive@@YAXXZ
text$yc	SEGMENT
??__Eg_RegisterArc@NSplit@NArchive@@YAXXZ PROC		; NArchive::NSplit::`dynamic initializer for 'g_RegisterArc'', COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\archive\splithandler.cpp
; Line 349
	push	ebp
	mov	ebp, esp
	mov	ecx, OFFSET _g_RegisterArc
	call	??0CRegisterArc@NSplit@NArchive@@QAE@XZ	; NArchive::NSplit::CRegisterArc::CRegisterArc
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	0
??__Eg_RegisterArc@NSplit@NArchive@@YAXXZ ENDP		; NArchive::NSplit::`dynamic initializer for 'g_RegisterArc''
text$yc	ENDS
EXTRN	?RegisterArc@@YGXPBUCArcInfo@@@Z:PROC		; RegisterArc
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CRegisterArc@NSplit@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CRegisterArc@NSplit@NArchive@@QAE@XZ PROC		; NArchive::NSplit::CRegisterArc::CRegisterArc, COMDAT
; _this$ = ecx
; Line 349
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	push	OFFSET _g_ArcInfo
	call	?RegisterArc@@YGXPBUCArcInfo@@@Z	; RegisterArc
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CRegisterArc@NSplit@NArchive@@QAE@XZ ENDP		; NArchive::NSplit::CRegisterArc::CRegisterArc
_TEXT	ENDS
_BSS	SEGMENT
_g_RegisterArc DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_g_RegisterArc$initializer$ DD FLAT:??__Eg_RegisterArc@NSplit@NArchive@@YAXXZ
CRT$XCU	ENDS
END
