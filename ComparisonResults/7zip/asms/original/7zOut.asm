; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\workspace\7z1505-src\CPP\7zip\Archive\7z\7zOut.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?WriteDirect@COutArchive@N7z@NArchive@@AAEJPBXI@Z ; NArchive::N7z::COutArchive::WriteDirect
PUBLIC	__$ArrayPad$
PUBLIC	?WriteSignature@COutArchive@N7z@NArchive@@AAEJXZ ; NArchive::N7z::COutArchive::WriteSignature
EXTRN	_memcpy:PROC
EXTRN	?kSignature@N7z@NArchive@@3PAEA:FWORD		; NArchive::N7z::kSignature
EXTRN	___security_cookie:DWORD
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu
rtc$IMZ	ENDS
_TEXT	SEGMENT
_buf$ = -20						; size = 8
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?WriteSignature@COutArchive@N7z@NArchive@@AAEJXZ PROC	; NArchive::N7z::COutArchive::WriteSignature
; _this$ = ecx
; Line 17
	push	ebp
	mov	ebp, esp
	sub	esp, 24					; 00000018H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 19
	push	6
	push	OFFSET ?kSignature@N7z@NArchive@@3PAEA	; NArchive::N7z::kSignature
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 20
	mov	BYTE PTR _buf$[ebp+6], 0
; Line 21
	mov	BYTE PTR _buf$[ebp+7], 4
; Line 22
	push	8
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteDirect@COutArchive@N7z@NArchive@@AAEJPBXI@Z ; NArchive::N7z::COutArchive::WriteDirect
; Line 23
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@WriteSigna
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 24					; 00000018H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@WriteSigna:
	DD	1
	DD	$LN4@WriteSigna
$LN4@WriteSigna:
	DD	-20					; ffffffecH
	DD	8
	DD	$LN3@WriteSigna
$LN3@WriteSigna:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?WriteSignature@COutArchive@N7z@NArchive@@AAEJXZ ENDP	; NArchive::N7z::COutArchive::WriteSignature
_TEXT	ENDS
PUBLIC	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
EXTRN	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z:PROC ; WriteStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WriteDirect@COutArchive@N7z@NArchive@@AAEJPBXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?WriteDirect@COutArchive@N7z@NArchive@@AAEJPBXI@Z PROC	; NArchive::N7z::COutArchive::WriteDirect, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.h
; Line 231
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	call	?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z ; WriteStream
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?WriteDirect@COutArchive@N7z@NArchive@@AAEJPBXI@Z ENDP	; NArchive::N7z::COutArchive::WriteDirect
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?WriteStartHeader@COutArchive@N7z@NArchive@@AAEJABUCStartHeader@23@@Z ; NArchive::N7z::COutArchive::WriteStartHeader
EXTRN	@CrcCalc@8:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_buf$ = -36						; size = 24
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_h$ = 8							; size = 4
?WriteStartHeader@COutArchive@N7z@NArchive@@AAEJABUCStartHeader@23@@Z PROC ; NArchive::N7z::COutArchive::WriteStartHeader
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.cpp
; Line 50
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 52
	mov	eax, DWORD PTR _h$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	lea	eax, DWORD PTR _buf$[ebp+4]
	push	eax
	call	?SetUInt64@N7z@NArchive@@YGXPAE_K@Z	; NArchive::N7z::SetUInt64
; Line 53
	mov	ecx, DWORD PTR _h$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	mov	eax, DWORD PTR [ecx+8]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp+12]
	push	ecx
	call	?SetUInt64@N7z@NArchive@@YGXPAE_K@Z	; NArchive::N7z::SetUInt64
; Line 54
	mov	edx, DWORD PTR _h$[ebp]
	mov	eax, DWORD PTR [edx+16]
	push	eax
	lea	ecx, DWORD PTR _buf$[ebp+20]
	push	ecx
	call	?SetUInt32@N7z@NArchive@@YGXPAEI@Z	; NArchive::N7z::SetUInt32
; Line 55
	lea	ecx, DWORD PTR _buf$[ebp+4]
	mov	edx, 20					; 00000014H
	call	@CrcCalc@8
	push	eax
	lea	edx, DWORD PTR _buf$[ebp]
	push	edx
	call	?SetUInt32@N7z@NArchive@@YGXPAEI@Z	; NArchive::N7z::SetUInt32
; Line 56
	push	24					; 00000018H
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteDirect@COutArchive@N7z@NArchive@@AAEJPBXI@Z ; NArchive::N7z::COutArchive::WriteDirect
; Line 57
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@WriteStart
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN5@WriteStart:
	DD	1
	DD	$LN4@WriteStart
$LN4@WriteStart:
	DD	-36					; ffffffdcH
	DD	24					; 00000018H
	DD	$LN3@WriteStart
$LN3@WriteStart:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?WriteStartHeader@COutArchive@N7z@NArchive@@AAEJABUCStartHeader@23@@Z ENDP ; NArchive::N7z::COutArchive::WriteStartHeader
; Function compile flags: /Odtp /RTCsu
_i$72462 = -4						; size = 4
_p$ = 8							; size = 4
_d$ = 12						; size = 4
?SetUInt32@N7z@NArchive@@YGXPAEI@Z PROC			; NArchive::N7z::SetUInt32
; Line 38
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 39
	mov	DWORD PTR _i$72462[ebp], 0
	jmp	SHORT $LN3@SetUInt32
$LN2@SetUInt32:
	mov	eax, DWORD PTR _i$72462[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72462[ebp], eax
	mov	ecx, DWORD PTR _d$[ebp]
	shr	ecx, 8
	mov	DWORD PTR _d$[ebp], ecx
$LN3@SetUInt32:
	cmp	DWORD PTR _i$72462[ebp], 4
	jge	SHORT $LN4@SetUInt32
; Line 40
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _i$72462[ebp]
	mov	al, BYTE PTR _d$[ebp]
	mov	BYTE PTR [edx], al
	jmp	SHORT $LN2@SetUInt32
$LN4@SetUInt32:
; Line 41
	mov	esp, ebp
	pop	ebp
	ret	8
?SetUInt32@N7z@NArchive@@YGXPAEI@Z ENDP			; NArchive::N7z::SetUInt32
_TEXT	ENDS
EXTRN	__aullshr:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$72471 = -4						; size = 4
_p$ = 8							; size = 4
_d$ = 12						; size = 8
?SetUInt64@N7z@NArchive@@YGXPAE_K@Z PROC		; NArchive::N7z::SetUInt64
; Line 44
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 45
	mov	DWORD PTR _i$72471[ebp], 0
	jmp	SHORT $LN3@SetUInt64
$LN2@SetUInt64:
	mov	eax, DWORD PTR _i$72471[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72471[ebp], eax
	mov	eax, DWORD PTR _d$[ebp]
	mov	edx, DWORD PTR _d$[ebp+4]
	mov	cl, 8
	call	__aullshr
	mov	DWORD PTR _d$[ebp], eax
	mov	DWORD PTR _d$[ebp+4], edx
$LN3@SetUInt64:
	cmp	DWORD PTR _i$72471[ebp], 8
	jge	SHORT $LN4@SetUInt64
; Line 46
	mov	cl, BYTE PTR _d$[ebp]
	mov	edx, DWORD PTR _p$[ebp]
	add	edx, DWORD PTR _i$72471[ebp]
	mov	BYTE PTR [edx], cl
	jmp	SHORT $LN2@SetUInt64
$LN4@SetUInt64:
; Line 47
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?SetUInt64@N7z@NArchive@@YGXPAE_K@Z ENDP		; NArchive::N7z::SetUInt64
_TEXT	ENDS
PUBLIC	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
PUBLIC	??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ		; CMyComPtr<IOutStream>::operator!
PUBLIC	??$QueryInterface@UIOutStream@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::QueryInterface<IOutStream>
PUBLIC	??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator&
PUBLIC	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
PUBLIC	?Close@COutArchive@N7z@NArchive@@QAEXXZ		; NArchive::N7z::COutArchive::Close
PUBLIC	?Create@COutArchive@N7z@NArchive@@QAEJPAUISequentialOutStream@@_N@Z ; NArchive::N7z::COutArchive::Create
EXTRN	_IID_IOutStream:BYTE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv94 = -16						; size = 4
___result__$72497 = -12					; size = 4
___result__$72495 = -8					; size = 4
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
_endMarker$ = 12					; size = 1
?Create@COutArchive@N7z@NArchive@@QAEJPAUISequentialOutStream@@_N@Z PROC ; NArchive::N7z::COutArchive::Create
; _this$ = ecx
; Line 78
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 79
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Close@COutArchive@N7z@NArchive@@QAEXXZ	; NArchive::N7z::COutArchive::Close
; Line 84
	mov	eax, DWORD PTR _stream$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ; CMyComPtr<ISequentialOutStream>::operator=
; Line 85
	movzx	ecx, BYTE PTR _endMarker$[ebp]
	test	ecx, ecx
	jne	SHORT $LN5@Create
; Line 87
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator&
	push	eax
	push	OFFSET _IID_IOutStream
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??$QueryInterface@UIOutStream@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStream@@@Z ; CMyComPtr<ISequentialOutStream>::QueryInterface<IOutStream>
; Line 88
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ	; CMyComPtr<IOutStream>::operator!
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@Create
; Line 90
	mov	eax, -2147467263			; 80004001H
	jmp	SHORT $LN6@Create
$LN5@Create:
; Line 108
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ	; CMyComPtr<IOutStream>::operator!
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@Create
; Line 109
	mov	eax, -2147467259			; 80004005H
	jmp	SHORT $LN6@Create
$LN3@Create:
; Line 110
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteSignature@COutArchive@N7z@NArchive@@AAEJXZ ; NArchive::N7z::COutArchive::WriteSignature
	mov	DWORD PTR ___result__$72495[ebp], eax
	cmp	DWORD PTR ___result__$72495[ebp], 0
	je	SHORT $LN2@Create
	mov	eax, DWORD PTR ___result__$72495[ebp]
	jmp	SHORT $LN6@Create
$LN2@Create:
; Line 111
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv94[ebp], eax
	mov	esi, esp
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	push	1
	push	0
	push	0
	mov	edx, DWORD PTR tv94[ebp]
	push	edx
	mov	eax, DWORD PTR tv94[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [ecx+16]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$72497[ebp], eax
	cmp	DWORD PTR ___result__$72497[ebp], 0
	je	SHORT $LN1@Create
	mov	eax, DWORD PTR ___result__$72497[ebp]
	jmp	SHORT $LN6@Create
$LN1@Create:
; Line 113
	xor	eax, eax
$LN6@Create:
; Line 114
	pop	esi
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Create@COutArchive@N7z@NArchive@@QAEJPAUISequentialOutStream@@_N@Z ENDP ; NArchive::N7z::COutArchive::Create
_TEXT	ENDS
PUBLIC	?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ	; CMyComPtr<IOutStream>::Release
PUBLIC	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Close@COutArchive@N7z@NArchive@@QAEXXZ PROC		; NArchive::N7z::COutArchive::Close
; _this$ = ecx
; Line 117
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 118
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ; CMyComPtr<ISequentialOutStream>::Release
; Line 119
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ ; CMyComPtr<IOutStream>::Release
; Line 120
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Close@COutArchive@N7z@NArchive@@QAEXXZ ENDP		; NArchive::N7z::COutArchive::Close
_TEXT	ENDS
PUBLIC	__$ArrayPad$
PUBLIC	?SkipPrefixArchiveHeader@COutArchive@N7z@NArchive@@QAEJXZ ; NArchive::N7z::COutArchive::SkipPrefixArchiveHeader
EXTRN	_memset:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_buf$ = -36						; size = 24
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
?SkipPrefixArchiveHeader@COutArchive@N7z@NArchive@@QAEJXZ PROC ; NArchive::N7z::COutArchive::SkipPrefixArchiveHeader
; _this$ = ecx
; Line 123
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-40]
	mov	ecx, 10					; 0000000aH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 129
	push	24					; 00000018H
	push	0
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 130
	push	24					; 00000018H
	lea	ecx, DWORD PTR _buf$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteDirect@COutArchive@N7z@NArchive@@AAEJPBXI@Z ; NArchive::N7z::COutArchive::WriteDirect
; Line 131
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN5@SkipPrefix
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 40					; 00000028H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	3
$LN5@SkipPrefix:
	DD	1
	DD	$LN4@SkipPrefix
$LN4@SkipPrefix:
	DD	-36					; ffffffdcH
	DD	24					; 00000018H
	DD	$LN3@SkipPrefix
$LN3@SkipPrefix:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
?SkipPrefixArchiveHeader@COutArchive@N7z@NArchive@@QAEJXZ ENDP ; NArchive::N7z::COutArchive::SkipPrefixArchiveHeader
_TEXT	ENDS
PUBLIC	?GetPos@CWriteBufferLoc@N7z@NArchive@@QBEIXZ	; NArchive::N7z::CWriteBufferLoc::GetPos
PUBLIC	?GetPos@COutArchive@N7z@NArchive@@ABE_KXZ	; NArchive::N7z::COutArchive::GetPos
EXTRN	?GetProcessedSize@COutBuffer@@QBE_KXZ:PROC	; COutBuffer::GetProcessedSize
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPos@COutArchive@N7z@NArchive@@ABE_KXZ PROC		; NArchive::N7z::COutArchive::GetPos
; _this$ = ecx
; Line 134
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 135
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN2@GetPos
; Line 136
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	xor	edx, edx
	jmp	SHORT $LN3@GetPos
$LN2@GetPos:
; Line 137
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+9]
	test	ecx, ecx
	je	SHORT $LN1@GetPos
; Line 138
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?GetProcessedSize@COutBuffer@@QBE_KXZ	; COutBuffer::GetProcessedSize
	jmp	SHORT $LN3@GetPos
$LN1@GetPos:
; Line 139
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPos@CWriteBufferLoc@N7z@NArchive@@QBEIXZ ; NArchive::N7z::CWriteBufferLoc::GetPos
	xor	edx, edx
$LN3@GetPos:
; Line 140
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPos@COutArchive@N7z@NArchive@@ABE_KXZ ENDP		; NArchive::N7z::COutArchive::GetPos
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?GetPos@CWriteBufferLoc@N7z@NArchive@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?GetPos@CWriteBufferLoc@N7z@NArchive@@QBEIXZ PROC	; NArchive::N7z::CWriteBufferLoc::GetPos, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.h
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+8]
	mov	esp, ebp
	pop	ebp
	ret	0
?GetPos@CWriteBufferLoc@N7z@NArchive@@QBEIXZ ENDP	; NArchive::N7z::CWriteBufferLoc::GetPos
_TEXT	ENDS
PUBLIC	?WriteBytes@CWriteBufferLoc@N7z@NArchive@@QAEXPBXI@Z ; NArchive::N7z::CWriteBufferLoc::WriteBytes
PUBLIC	?WriteBytes@COutBuffer@@QAEXPBXI@Z		; COutBuffer::WriteBytes
PUBLIC	?WriteBytes@COutArchive@N7z@NArchive@@AAEXPBXI@Z ; NArchive::N7z::COutArchive::WriteBytes
EXTRN	@CrcUpdate@12:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?WriteBytes@COutArchive@N7z@NArchive@@AAEXPBXI@Z PROC	; NArchive::N7z::COutArchive::WriteBytes
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.cpp
; Line 143
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 144
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN4@WriteBytes
; Line 145
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, DWORD PTR _size$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN5@WriteBytes
$LN4@WriteBytes:
; Line 146
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	test	eax, eax
	je	SHORT $LN2@WriteBytes
; Line 148
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?WriteBytes@COutBuffer@@QAEXPBXI@Z	; COutBuffer::WriteBytes
; Line 149
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	edx, DWORD PTR _data$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	@CrcUpdate@12
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 151
	jmp	SHORT $LN5@WriteBytes
$LN2@WriteBytes:
; Line 152
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?WriteBytes@CWriteBufferLoc@N7z@NArchive@@QAEXPBXI@Z ; NArchive::N7z::CWriteBufferLoc::WriteBytes
$LN5@WriteBytes:
; Line 153
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?WriteBytes@COutArchive@N7z@NArchive@@AAEXPBXI@Z ENDP	; NArchive::N7z::COutArchive::WriteBytes
_TEXT	ENDS
PUBLIC	?WriteByte@COutBuffer@@QAEXE@Z			; COutBuffer::WriteByte
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WriteBytes@COutBuffer@@QAEXPBXI@Z
_TEXT	SEGMENT
_i$71915 = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?WriteBytes@COutBuffer@@QAEXPBXI@Z PROC			; COutBuffer::WriteBytes, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\outbuffer.h
; Line 55
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 56
	mov	DWORD PTR _i$71915[ebp], 0
	jmp	SHORT $LN3@WriteBytes@2
$LN2@WriteBytes@2:
	mov	eax, DWORD PTR _i$71915[ebp]
	add	eax, 1
	mov	DWORD PTR _i$71915[ebp], eax
$LN3@WriteBytes@2:
	mov	ecx, DWORD PTR _i$71915[ebp]
	cmp	ecx, DWORD PTR _size$[ebp]
	jae	SHORT $LN4@WriteBytes@2
; Line 57
	mov	edx, DWORD PTR _data$[ebp]
	add	edx, DWORD PTR _i$71915[ebp]
	movzx	eax, BYTE PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutBuffer@@QAEXE@Z		; COutBuffer::WriteByte
	jmp	SHORT $LN2@WriteBytes@2
$LN4@WriteBytes@2:
; Line 58
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?WriteBytes@COutBuffer@@QAEXPBXI@Z ENDP			; COutBuffer::WriteBytes
_TEXT	ENDS
EXTRN	?FlushWithCheck@COutBuffer@@QAEXXZ:PROC		; COutBuffer::FlushWithCheck
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?WriteByte@COutBuffer@@QAEXE@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?WriteByte@COutBuffer@@QAEXE@Z PROC			; COutBuffer::WriteByte, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 50
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	dl, BYTE PTR _b$[ebp]
	mov	BYTE PTR [ecx+eax], dl
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+4], ecx
; Line 51
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN2@WriteByte
; Line 52
	mov	ecx, DWORD PTR _this$[ebp]
	call	?FlushWithCheck@COutBuffer@@QAEXXZ	; COutBuffer::FlushWithCheck
$LN2@WriteByte:
; Line 53
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WriteByte@COutBuffer@@QAEXE@Z ENDP			; COutBuffer::WriteByte
_TEXT	ENDS
PUBLIC	__TI1H
PUBLIC	__CTA1H
PUBLIC	__CT??_R0H@84
PUBLIC	??_R0H@8					; int `RTTI Type Descriptor'
EXTRN	__CxxThrowException@8:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_R0H@8
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.h
_DATA	SEGMENT
??_R0H@8 DD	FLAT:??_7type_info@@6B@			; int `RTTI Type Descriptor'
	DD	00H
	DB	'.H', 00H
_DATA	ENDS
;	COMDAT __CT??_R0H@84
xdata$x	SEGMENT
__CT??_R0H@84 DD 01H
	DD	FLAT:??_R0H@8
	DD	00H
	DD	0ffffffffH
	ORG $+4
	DD	04H
	DD	00H
xdata$x	ENDS
;	COMDAT __CTA1H
xdata$x	SEGMENT
__CTA1H	DD	01H
	DD	FLAT:__CT??_R0H@84
xdata$x	ENDS
;	COMDAT __TI1H
xdata$x	SEGMENT
__TI1H	DD	00H
	DD	00H
	DD	00H
	DD	FLAT:__CTA1H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?WriteBytes@CWriteBufferLoc@N7z@NArchive@@QAEXPBXI@Z
_TEXT	SEGMENT
$T74146 = -8						; size = 4
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?WriteBytes@CWriteBufferLoc@N7z@NArchive@@QAEXPBXI@Z PROC ; NArchive::N7z::CWriteBufferLoc::WriteBytes, COMDAT
; _this$ = ecx
; Line 31
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 32
	cmp	DWORD PTR _size$[ebp], 0
	jne	SHORT $LN2@WriteBytes@3
; Line 33
	jmp	SHORT $LN4@WriteBytes@3
$LN2@WriteBytes@3:
; Line 34
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	sub	edx, DWORD PTR [ecx+8]
	cmp	DWORD PTR _size$[ebp], edx
	jbe	SHORT $LN1@WriteBytes@3
; Line 35
	mov	DWORD PTR $T74146[ebp], 1
	push	OFFSET __TI1H
	lea	eax, DWORD PTR $T74146[ebp]
	push	eax
	call	__CxxThrowException@8
$LN1@WriteBytes@3:
; Line 36
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	edx, DWORD PTR _data$[ebp]
	push	edx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	add	ecx, DWORD PTR [edx+8]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
; Line 37
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	add	ecx, DWORD PTR _size$[ebp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], ecx
$LN4@WriteBytes@3:
; Line 38
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?WriteBytes@CWriteBufferLoc@N7z@NArchive@@QAEXPBXI@Z ENDP ; NArchive::N7z::CWriteBufferLoc::WriteBytes
_TEXT	ENDS
PUBLIC	?WriteByte@CWriteBufferLoc@N7z@NArchive@@QAEXE@Z ; NArchive::N7z::CWriteBufferLoc::WriteByte
PUBLIC	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z	; NArchive::N7z::COutArchive::WriteByte
EXTRN	_g_CrcTable:BYTE
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z PROC	; NArchive::N7z::COutArchive::WriteByte
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.cpp
; Line 156
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 157
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+8]
	test	ecx, ecx
	je	SHORT $LN4@WriteByte@2
; Line 158
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+12], eax
	jmp	SHORT $LN5@WriteByte@2
$LN4@WriteByte@2:
; Line 159
	mov	edx, DWORD PTR _this$[ebp]
	movzx	eax, BYTE PTR [edx+9]
	test	eax, eax
	je	SHORT $LN2@WriteByte@2
; Line 161
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?WriteByte@COutBuffer@@QAEXE@Z		; COutBuffer::WriteByte
; Line 162
	movzx	edx, BYTE PTR _b$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	xor	edx, DWORD PTR [eax+16]
	and	edx, 255				; 000000ffH
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+16]
	shr	eax, 8
	xor	eax, DWORD PTR _g_CrcTable[edx*4]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], eax
; Line 164
	jmp	SHORT $LN5@WriteByte@2
$LN2@WriteByte@2:
; Line 165
	movzx	edx, BYTE PTR _b$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?WriteByte@CWriteBufferLoc@N7z@NArchive@@QAEXE@Z ; NArchive::N7z::CWriteBufferLoc::WriteByte
$LN5@WriteByte@2:
; Line 166
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ENDP	; NArchive::N7z::COutArchive::WriteByte
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?WriteByte@CWriteBufferLoc@N7z@NArchive@@QAEXE@Z
_TEXT	SEGMENT
$T74151 = -8						; size = 4
_this$ = -4						; size = 4
_b$ = 8							; size = 1
?WriteByte@CWriteBufferLoc@N7z@NArchive@@QAEXE@Z PROC	; NArchive::N7z::CWriteBufferLoc::WriteByte, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.h
; Line 40
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 41
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN1@WriteByte@3
; Line 42
	mov	DWORD PTR $T74151[ebp], 1
	push	OFFSET __TI1H
	lea	eax, DWORD PTR $T74151[ebp]
	push	eax
	call	__CxxThrowException@8
$LN1@WriteByte@3:
; Line 43
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	mov	al, BYTE PTR _b$[ebp]
	mov	BYTE PTR [edx+ecx], al
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+8]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], edx
$LN3@WriteByte@3:
; Line 44
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WriteByte@CWriteBufferLoc@N7z@NArchive@@QAEXE@Z ENDP	; NArchive::N7z::CWriteBufferLoc::WriteByte
_TEXT	ENDS
PUBLIC	?WriteUInt32@COutArchive@N7z@NArchive@@AAEXI@Z	; NArchive::N7z::COutArchive::WriteUInt32
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$72533 = -8						; size = 4
_this$ = -4						; size = 4
_value$ = 8						; size = 4
?WriteUInt32@COutArchive@N7z@NArchive@@AAEXI@Z PROC	; NArchive::N7z::COutArchive::WriteUInt32
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.cpp
; Line 169
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 170
	mov	DWORD PTR _i$72533[ebp], 0
	jmp	SHORT $LN3@WriteUInt3
$LN2@WriteUInt3:
	mov	eax, DWORD PTR _i$72533[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72533[ebp], eax
$LN3@WriteUInt3:
	cmp	DWORD PTR _i$72533[ebp], 4
	jge	SHORT $LN4@WriteUInt3
; Line 172
	movzx	ecx, BYTE PTR _value$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 173
	mov	edx, DWORD PTR _value$[ebp]
	shr	edx, 8
	mov	DWORD PTR _value$[ebp], edx
; Line 174
	jmp	SHORT $LN2@WriteUInt3
$LN4@WriteUInt3:
; Line 175
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WriteUInt32@COutArchive@N7z@NArchive@@AAEXI@Z ENDP	; NArchive::N7z::COutArchive::WriteUInt32
_TEXT	ENDS
PUBLIC	?WriteUInt64@COutArchive@N7z@NArchive@@AAEX_K@Z	; NArchive::N7z::COutArchive::WriteUInt64
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$72542 = -8						; size = 4
_this$ = -4						; size = 4
_value$ = 8						; size = 8
?WriteUInt64@COutArchive@N7z@NArchive@@AAEX_K@Z PROC	; NArchive::N7z::COutArchive::WriteUInt64
; _this$ = ecx
; Line 178
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 179
	mov	DWORD PTR _i$72542[ebp], 0
	jmp	SHORT $LN3@WriteUInt6
$LN2@WriteUInt6:
	mov	eax, DWORD PTR _i$72542[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72542[ebp], eax
$LN3@WriteUInt6:
	cmp	DWORD PTR _i$72542[ebp], 8
	jge	SHORT $LN4@WriteUInt6
; Line 181
	movzx	ecx, BYTE PTR _value$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 182
	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 8
	call	__aullshr
	mov	DWORD PTR _value$[ebp], eax
	mov	DWORD PTR _value$[ebp+4], edx
; Line 183
	jmp	SHORT $LN2@WriteUInt6
$LN4@WriteUInt6:
; Line 184
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?WriteUInt64@COutArchive@N7z@NArchive@@AAEX_K@Z ENDP	; NArchive::N7z::COutArchive::WriteUInt64
_TEXT	ENDS
PUBLIC	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z	; NArchive::N7z::COutArchive::WriteNumber
EXTRN	__allshl:PROC
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv133 = -20						; size = 8
_i$ = -12						; size = 4
_mask$ = -6						; size = 1
_firstByte$ = -5					; size = 1
_this$ = -4						; size = 4
_value$ = 8						; size = 8
?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z PROC	; NArchive::N7z::COutArchive::WriteNumber
; _this$ = ecx
; Line 187
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 188
	mov	BYTE PTR _firstByte$[ebp], 0
; Line 189
	mov	BYTE PTR _mask$[ebp], 128		; 00000080H
; Line 191
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@WriteNumbe
$LN6@WriteNumbe:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN7@WriteNumbe:
	cmp	DWORD PTR _i$[ebp], 8
	jge	SHORT $LN5@WriteNumbe
; Line 193
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	imul	ecx, 7
	mov	eax, 1
	xor	edx, edx
	call	__allshl
	mov	DWORD PTR tv133[ebp], eax
	mov	DWORD PTR tv133[ebp+4], edx
	mov	ecx, DWORD PTR _value$[ebp+4]
	cmp	ecx, DWORD PTR tv133[ebp+4]
	ja	SHORT $LN4@WriteNumbe
	jb	SHORT $LN10@WriteNumbe
	mov	edx, DWORD PTR _value$[ebp]
	cmp	edx, DWORD PTR tv133[ebp]
	jae	SHORT $LN4@WriteNumbe
$LN10@WriteNumbe:
; Line 195
	mov	ecx, DWORD PTR _i$[ebp]
	shl	ecx, 3
	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	call	__aullshr
	movzx	eax, al
	movzx	ecx, BYTE PTR _firstByte$[ebp]
	or	ecx, eax
	mov	BYTE PTR _firstByte$[ebp], cl
; Line 196
	jmp	SHORT $LN5@WriteNumbe
$LN4@WriteNumbe:
; Line 198
	movzx	edx, BYTE PTR _mask$[ebp]
	movzx	eax, BYTE PTR _firstByte$[ebp]
	or	eax, edx
	mov	BYTE PTR _firstByte$[ebp], al
; Line 199
	mov	cl, BYTE PTR _mask$[ebp]
	shr	cl, 1
	mov	BYTE PTR _mask$[ebp], cl
; Line 200
	jmp	SHORT $LN6@WriteNumbe
$LN5@WriteNumbe:
; Line 201
	movzx	edx, BYTE PTR _firstByte$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 202
	jmp	SHORT $LN3@WriteNumbe
$LN2@WriteNumbe:
	mov	eax, DWORD PTR _i$[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@WriteNumbe:
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN8@WriteNumbe
; Line 204
	movzx	ecx, BYTE PTR _value$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 205
	mov	eax, DWORD PTR _value$[ebp]
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	cl, 8
	call	__aullshr
	mov	DWORD PTR _value$[ebp], eax
	mov	DWORD PTR _value$[ebp+4], edx
; Line 206
	jmp	SHORT $LN2@WriteNumbe
$LN8@WriteNumbe:
; Line 207
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ENDP	; NArchive::N7z::COutArchive::WriteNumber
_TEXT	ENDS
PUBLIC	??B?$CObjArray2@I@@QBEPBIXZ			; CObjArray2<unsigned int>::operator unsigned int const *
PUBLIC	?Size@?$CObjArray2@I@@QBEIXZ			; CObjArray2<unsigned int>::Size
PUBLIC	??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *
PUBLIC	?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CBond>::Size
PUBLIC	??B?$CBuffer@E@@QBEPBEXZ			; CBuffer<unsigned char>::operator unsigned char const *
PUBLIC	?Size@?$CBuffer@E@@QBEIXZ			; CBuffer<unsigned char>::Size
PUBLIC	?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ	; NArchive::N7z::CCoderInfo::IsSimpleCoder
PUBLIC	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *
PUBLIC	?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
PUBLIC	__$ArrayPad$
PUBLIC	?WriteFolder@COutArchive@N7z@NArchive@@AAEXABUCFolder@23@@Z ; NArchive::N7z::COutArchive::WriteFolder
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv221 = -76						; size = 8
_bond$72601 = -68					; size = 4
_propsSize$72595 = -64					; size = 4
_isComplex$72594 = -58					; size = 1
_b$72592 = -57						; size = 1
_t$72587 = -56						; size = 4
_temp$72586 = -48					; size = 16
_idSize$72581 = -28					; size = 4
_id$72580 = -24						; size = 8
_coder$72579 = -16					; size = 4
_i$ = -12						; size = 4
_this$ = -8						; size = 4
__$ArrayPad$ = -4					; size = 4
_folder$ = 8						; size = 4
?WriteFolder@COutArchive@N7z@NArchive@@AAEXABUCFolder@23@@Z PROC ; NArchive::N7z::COutArchive::WriteFolder
; _this$ = ecx
; Line 254
	push	ebp
	mov	ebp, esp
	sub	esp, 76					; 0000004cH
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-76]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 255
	mov	ecx, DWORD PTR _folder$[ebp]
	call	?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
; Line 258
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@WriteFolde
$LN18@WriteFolde:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN19@WriteFolde:
	mov	ecx, DWORD PTR _folder$[ebp]
	call	?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN17@WriteFolde
; Line 260
	mov	ecx, DWORD PTR _folder$[ebp]
	call	??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 24					; 00000018H
	add	eax, ecx
	mov	DWORD PTR _coder$72579[ebp], eax
; Line 262
	mov	edx, DWORD PTR _coder$72579[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR _id$72580[ebp], eax
	mov	ecx, DWORD PTR [edx+4]
	mov	DWORD PTR _id$72580[ebp+4], ecx
; Line 264
	mov	DWORD PTR _idSize$72581[ebp], 1
	jmp	SHORT $LN16@WriteFolde
$LN15@WriteFolde:
	mov	edx, DWORD PTR _idSize$72581[ebp]
	add	edx, 1
	mov	DWORD PTR _idSize$72581[ebp], edx
$LN16@WriteFolde:
	cmp	DWORD PTR _idSize$72581[ebp], 8
	jae	SHORT $LN14@WriteFolde
; Line 265
	mov	ecx, DWORD PTR _idSize$72581[ebp]
	shl	ecx, 3
	mov	eax, DWORD PTR _id$72580[ebp]
	mov	edx, DWORD PTR _id$72580[ebp+4]
	call	__aullshr
	mov	DWORD PTR tv221[ebp], eax
	mov	DWORD PTR tv221[ebp+4], edx
	mov	eax, DWORD PTR tv221[ebp]
	or	eax, DWORD PTR tv221[ebp+4]
	jne	SHORT $LN13@WriteFolde
; Line 266
	jmp	SHORT $LN14@WriteFolde
$LN13@WriteFolde:
; Line 267
	jmp	SHORT $LN15@WriteFolde
$LN14@WriteFolde:
	mov	ecx, DWORD PTR _idSize$72581[ebp]
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR _idSize$72581[ebp], ecx
; Line 269
	mov	edx, DWORD PTR _idSize$72581[ebp]
	mov	DWORD PTR _t$72587[ebp], edx
	jmp	SHORT $LN12@WriteFolde
$LN11@WriteFolde:
	mov	eax, DWORD PTR _t$72587[ebp]
	sub	eax, 1
	mov	DWORD PTR _t$72587[ebp], eax
	mov	eax, DWORD PTR _id$72580[ebp]
	mov	edx, DWORD PTR _id$72580[ebp+4]
	mov	cl, 8
	call	__aullshr
	mov	DWORD PTR _id$72580[ebp], eax
	mov	DWORD PTR _id$72580[ebp+4], edx
$LN12@WriteFolde:
	cmp	DWORD PTR _t$72587[ebp], 0
	je	SHORT $LN10@WriteFolde
; Line 270
	mov	ecx, DWORD PTR _id$72580[ebp]
	and	ecx, 255				; 000000ffH
	mov	edx, DWORD PTR _id$72580[ebp+4]
	and	edx, 0
	mov	eax, DWORD PTR _t$72587[ebp]
	mov	BYTE PTR _temp$72586[ebp+eax], cl
	jmp	SHORT $LN11@WriteFolde
$LN10@WriteFolde:
; Line 272
	mov	cl, BYTE PTR _idSize$72581[ebp]
	mov	BYTE PTR _b$72592[ebp], cl
; Line 273
	mov	ecx, DWORD PTR _coder$72579[ebp]
	call	?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CCoderInfo::IsSimpleCoder
	movzx	edx, al
	neg	edx
	sbb	edx, edx
	add	edx, 1
	mov	BYTE PTR _isComplex$72594[ebp], dl
; Line 274
	movzx	eax, BYTE PTR _isComplex$72594[ebp]
	neg	eax
	sbb	eax, eax
	and	eax, 16					; 00000010H
	movzx	ecx, BYTE PTR _b$72592[ebp]
	or	ecx, eax
	mov	BYTE PTR _b$72592[ebp], cl
; Line 276
	mov	ecx, DWORD PTR _coder$72579[ebp]
	add	ecx, 8
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	mov	DWORD PTR _propsSize$72595[ebp], eax
; Line 277
	mov	edx, DWORD PTR _propsSize$72595[ebp]
	neg	edx
	sbb	edx, edx
	and	edx, 32					; 00000020H
	movzx	eax, BYTE PTR _b$72592[ebp]
	or	eax, edx
	mov	BYTE PTR _b$72592[ebp], al
; Line 278
	mov	cl, BYTE PTR _b$72592[ebp]
	mov	BYTE PTR _temp$72586[ebp], cl
; Line 279
	mov	edx, DWORD PTR _idSize$72581[ebp]
	add	edx, 1
	push	edx
	lea	eax, DWORD PTR _temp$72586[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBytes@COutArchive@N7z@NArchive@@AAEXPBXI@Z ; NArchive::N7z::COutArchive::WriteBytes
; Line 280
	movzx	ecx, BYTE PTR _isComplex$72594[ebp]
	test	ecx, ecx
	je	SHORT $LN9@WriteFolde
; Line 282
	mov	edx, DWORD PTR _coder$72579[ebp]
	mov	eax, DWORD PTR [edx+16]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
; Line 283
	push	0
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
$LN9@WriteFolde:
; Line 285
	cmp	DWORD PTR _propsSize$72595[ebp], 0
	jne	SHORT $LN8@WriteFolde
; Line 286
	jmp	$LN18@WriteFolde
$LN8@WriteFolde:
; Line 287
	mov	edx, DWORD PTR _propsSize$72595[ebp]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
; Line 288
	mov	ecx, DWORD PTR _propsSize$72595[ebp]
	push	ecx
	mov	ecx, DWORD PTR _coder$72579[ebp]
	add	ecx, 8
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBytes@COutArchive@N7z@NArchive@@AAEXPBXI@Z ; NArchive::N7z::COutArchive::WriteBytes
; Line 290
	jmp	$LN18@WriteFolde
$LN17@WriteFolde:
; Line 292
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@WriteFolde
$LN6@WriteFolde:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@WriteFolde:
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 8
	call	?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ; CObjArray2<NArchive::N7z::CBond>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN5@WriteFolde
; Line 294
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 8
	call	??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *
	mov	ecx, DWORD PTR _i$[ebp]
	lea	edx, DWORD PTR [eax+ecx*8]
	mov	DWORD PTR _bond$72601[ebp], edx
; Line 295
	mov	eax, DWORD PTR _bond$72601[ebp]
	mov	ecx, DWORD PTR [eax]
	xor	edx, edx
	push	edx
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
; Line 296
	mov	eax, DWORD PTR _bond$72601[ebp]
	mov	ecx, DWORD PTR [eax+4]
	xor	edx, edx
	push	edx
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
; Line 297
	jmp	SHORT $LN6@WriteFolde
$LN5@WriteFolde:
; Line 299
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjArray2@I@@QBEIXZ		; CObjArray2<unsigned int>::Size
	cmp	eax, 1
	jbe	SHORT $LN20@WriteFolde
; Line 300
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN3@WriteFolde
$LN2@WriteFolde:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN3@WriteFolde:
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 16					; 00000010H
	call	?Size@?$CObjArray2@I@@QBEIXZ		; CObjArray2<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN20@WriteFolde
; Line 301
	mov	ecx, DWORD PTR _folder$[ebp]
	add	ecx, 16					; 00000010H
	call	??B?$CObjArray2@I@@QBEPBIXZ		; CObjArray2<unsigned int>::operator unsigned int const *
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR [eax+ecx*4]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
	jmp	SHORT $LN2@WriteFolde
$LN20@WriteFolde:
; Line 302
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN24@WriteFolde
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 76					; 0000004cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	3
$LN24@WriteFolde:
	DD	1
	DD	$LN23@WriteFolde
$LN23@WriteFolde:
	DD	-48					; ffffffd0H
	DD	16					; 00000010H
	DD	$LN22@WriteFolde
$LN22@WriteFolde:
	DB	116					; 00000074H
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	0
?WriteFolder@COutArchive@N7z@NArchive@@AAEXABUCFolder@23@@Z ENDP ; NArchive::N7z::COutArchive::WriteFolder
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ PROC	; NArchive::N7z::CCoderInfo::IsSimpleCoder, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+16], 1
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsSimpleCoder@CCoderInfo@N7z@NArchive@@QBE_NXZ ENDP	; NArchive::N7z::CCoderInfo::IsSimpleCoder
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@_N@@QBEAB_NI@Z		; CRecordVector<bool>::operator[]
PUBLIC	?Size@?$CRecordVector@_N@@QBEIXZ		; CRecordVector<bool>::Size
PUBLIC	?WriteBoolVector@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@@Z ; NArchive::N7z::COutArchive::WriteBoolVector
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$72612 = -12						; size = 4
_mask$ = -6						; size = 1
_b$ = -5						; size = 1
_this$ = -4						; size = 4
_boolVector$ = 8					; size = 4
?WriteBoolVector@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@@Z PROC ; NArchive::N7z::COutArchive::WriteBoolVector
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.cpp
; Line 305
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 306
	mov	BYTE PTR _b$[ebp], 0
; Line 307
	mov	BYTE PTR _mask$[ebp], 128		; 00000080H
; Line 308
	mov	DWORD PTR _i$72612[ebp], 0
	jmp	SHORT $LN6@WriteBoolV
$LN5@WriteBoolV:
	mov	eax, DWORD PTR _i$72612[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72612[ebp], eax
$LN6@WriteBoolV:
	mov	ecx, DWORD PTR _boolVector$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _i$72612[ebp], eax
	jae	SHORT $LN4@WriteBoolV
; Line 310
	mov	ecx, DWORD PTR _i$72612[ebp]
	push	ecx
	mov	ecx, DWORD PTR _boolVector$[ebp]
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN3@WriteBoolV
; Line 311
	movzx	eax, BYTE PTR _mask$[ebp]
	movzx	ecx, BYTE PTR _b$[ebp]
	or	ecx, eax
	mov	BYTE PTR _b$[ebp], cl
$LN3@WriteBoolV:
; Line 312
	mov	dl, BYTE PTR _mask$[ebp]
	shr	dl, 1
	mov	BYTE PTR _mask$[ebp], dl
; Line 313
	movzx	eax, BYTE PTR _mask$[ebp]
	test	eax, eax
	jne	SHORT $LN2@WriteBoolV
; Line 315
	movzx	ecx, BYTE PTR _b$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 316
	mov	BYTE PTR _mask$[ebp], 128		; 00000080H
; Line 317
	mov	BYTE PTR _b$[ebp], 0
$LN2@WriteBoolV:
; Line 319
	jmp	SHORT $LN5@WriteBoolV
$LN4@WriteBoolV:
; Line 320
	movzx	edx, BYTE PTR _mask$[ebp]
	cmp	edx, 128				; 00000080H
	je	SHORT $LN7@WriteBoolV
; Line 321
	movzx	eax, BYTE PTR _b$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
$LN7@WriteBoolV:
; Line 322
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WriteBoolVector@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@@Z ENDP ; NArchive::N7z::COutArchive::WriteBoolVector
_TEXT	ENDS
PUBLIC	?WritePropBoolVector@COutArchive@N7z@NArchive@@AAEXEABV?$CRecordVector@_N@@@Z ; NArchive::N7z::COutArchive::WritePropBoolVector
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_id$ = 8						; size = 1
_boolVector$ = 12					; size = 4
?WritePropBoolVector@COutArchive@N7z@NArchive@@AAEXEABV?$CRecordVector@_N@@@Z PROC ; NArchive::N7z::COutArchive::WritePropBoolVector
; _this$ = ecx
; Line 327
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 328
	movzx	eax, BYTE PTR _id$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 329
	mov	ecx, DWORD PTR _boolVector$[ebp]
	push	ecx
	call	?Bv_GetSizeInBytes@N7z@NArchive@@YGIABV?$CRecordVector@_N@@@Z ; NArchive::N7z::Bv_GetSizeInBytes
	xor	edx, edx
	push	edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
; Line 330
	mov	eax, DWORD PTR _boolVector$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBoolVector@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@@Z ; NArchive::N7z::COutArchive::WriteBoolVector
; Line 331
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?WritePropBoolVector@COutArchive@N7z@NArchive@@AAEXEABV?$CRecordVector@_N@@@Z ENDP ; NArchive::N7z::COutArchive::WritePropBoolVector
; Function compile flags: /Odtp /RTCsu
_v$ = 8						; size = 4
?Bv_GetSizeInBytes@N7z@NArchive@@YGIABV?$CRecordVector@_N@@@Z PROC ; NArchive::N7z::Bv_GetSizeInBytes
; Line 324
	push	ebp
	mov	ebp, esp
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	add	eax, 7
	shr	eax, 3
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	4
?Bv_GetSizeInBytes@N7z@NArchive@@YGIABV?$CRecordVector@_N@@@Z ENDP ; NArchive::N7z::Bv_GetSizeInBytes
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@I@@QBEABII@Z			; CRecordVector<unsigned int>::operator[]
PUBLIC	?WriteHashDigests@COutArchive@N7z@NArchive@@AAEXABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WriteHashDigests
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -12						; size = 4
_numDefined$ = -8					; size = 4
_this$ = -4						; size = 4
_digests$ = 8						; size = 4
?WriteHashDigests@COutArchive@N7z@NArchive@@AAEXABUCUInt32DefVector@23@@Z PROC ; NArchive::N7z::COutArchive::WriteHashDigests
; _this$ = ecx
; Line 334
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 335
	mov	DWORD PTR _numDefined$[ebp], 0
; Line 337
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN11@WriteHashD
$LN10@WriteHashD:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN11@WriteHashD:
	mov	ecx, DWORD PTR _digests$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN9@WriteHashD
; Line 338
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _digests$[ebp]
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN8@WriteHashD
; Line 339
	mov	eax, DWORD PTR _numDefined$[ebp]
	add	eax, 1
	mov	DWORD PTR _numDefined$[ebp], eax
$LN8@WriteHashD:
; Line 340
	jmp	SHORT $LN10@WriteHashD
$LN9@WriteHashD:
	cmp	DWORD PTR _numDefined$[ebp], 0
	jne	SHORT $LN7@WriteHashD
; Line 341
	jmp	$LN12@WriteHashD
$LN7@WriteHashD:
; Line 343
	push	10					; 0000000aH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 344
	mov	ecx, DWORD PTR _digests$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _numDefined$[ebp], eax
	jne	SHORT $LN6@WriteHashD
; Line 345
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 346
	jmp	SHORT $LN5@WriteHashD
$LN6@WriteHashD:
; Line 348
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 349
	mov	ecx, DWORD PTR _digests$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBoolVector@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@@Z ; NArchive::N7z::COutArchive::WriteBoolVector
$LN5@WriteHashD:
; Line 351
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@WriteHashD
$LN3@WriteHashD:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN4@WriteHashD:
	mov	ecx, DWORD PTR _digests$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN12@WriteHashD
; Line 352
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _digests$[ebp]
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN1@WriteHashD
; Line 353
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _digests$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteUInt32@COutArchive@N7z@NArchive@@AAEXI@Z ; NArchive::N7z::COutArchive::WriteUInt32
$LN1@WriteHashD:
; Line 354
	jmp	SHORT $LN3@WriteHashD
$LN12@WriteHashD:
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?WriteHashDigests@COutArchive@N7z@NArchive@@AAEXABUCUInt32DefVector@23@@Z ENDP ; NArchive::N7z::COutArchive::WriteHashDigests
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@_K@@QBEAB_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	?Size@?$CRecordVector@_K@@QBEIXZ		; CRecordVector<unsigned __int64>::Size
PUBLIC	?IsEmpty@?$CRecordVector@_K@@QBE_NXZ		; CRecordVector<unsigned __int64>::IsEmpty
PUBLIC	?WritePackInfo@COutArchive@N7z@NArchive@@AAEX_KABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WritePackInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$72653 = -8						; size = 4
_this$ = -4						; size = 4
_dataOffset$ = 8					; size = 8
_packSizes$ = 16					; size = 4
_packCRCs$ = 20						; size = 4
?WritePackInfo@COutArchive@N7z@NArchive@@AAEX_KABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z PROC ; NArchive::N7z::COutArchive::WritePackInfo
; _this$ = ecx
; Line 360
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 361
	mov	ecx, DWORD PTR _packSizes$[ebp]
	call	?IsEmpty@?$CRecordVector@_K@@QBE_NXZ	; CRecordVector<unsigned __int64>::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN4@WritePackI
; Line 362
	jmp	$LN5@WritePackI
$LN4@WritePackI:
; Line 363
	push	6
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 364
	mov	ecx, DWORD PTR _dataOffset$[ebp+4]
	push	ecx
	mov	edx, DWORD PTR _dataOffset$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
; Line 365
	mov	ecx, DWORD PTR _packSizes$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
; Line 366
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 367
	mov	DWORD PTR _i$72653[ebp], 0
	jmp	SHORT $LN3@WritePackI
$LN2@WritePackI:
	mov	edx, DWORD PTR _i$72653[ebp]
	add	edx, 1
	mov	DWORD PTR _i$72653[ebp], edx
$LN3@WritePackI:
	mov	ecx, DWORD PTR _packSizes$[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _i$72653[ebp], eax
	jae	SHORT $LN1@WritePackI
; Line 368
	mov	eax, DWORD PTR _i$72653[ebp]
	push	eax
	mov	ecx, DWORD PTR _packSizes$[ebp]
	call	??A?$CRecordVector@_K@@QBEAB_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
	jmp	SHORT $LN2@WritePackI
$LN1@WritePackI:
; Line 370
	mov	eax, DWORD PTR _packCRCs$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteHashDigests@COutArchive@N7z@NArchive@@AAEXABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WriteHashDigests
; Line 372
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
$LN5@WritePackI:
; Line 373
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?WritePackInfo@COutArchive@N7z@NArchive@@AAEX_KABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z ENDP ; NArchive::N7z::COutArchive::WritePackInfo
_TEXT	ENDS
PUBLIC	??A?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEABUCFolder@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CFolder>::operator[]
PUBLIC	?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CFolder>::Size
PUBLIC	?IsEmpty@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::N7z::CFolder>::IsEmpty
PUBLIC	?WriteUnpackInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@@Z ; NArchive::N7z::COutArchive::WriteUnpackInfo
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$72668 = -12						; size = 4
_i$72664 = -8						; size = 4
_this$ = -4						; size = 4
_folders$ = 8						; size = 4
_outFolders$ = 12					; size = 4
?WriteUnpackInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@@Z PROC ; NArchive::N7z::COutArchive::WriteUnpackInfo
; _this$ = ecx
; Line 376
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 377
	mov	ecx, DWORD PTR _folders$[ebp]
	call	?IsEmpty@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::N7z::CFolder>::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN7@WriteUnpac
; Line 378
	jmp	$LN8@WriteUnpac
$LN7@WriteUnpac:
; Line 380
	push	7
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 382
	push	11					; 0000000bH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 383
	mov	ecx, DWORD PTR _folders$[ebp]
	call	?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CFolder>::Size
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
; Line 385
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 386
	mov	DWORD PTR _i$72664[ebp], 0
	jmp	SHORT $LN6@WriteUnpac
$LN5@WriteUnpac:
	mov	edx, DWORD PTR _i$72664[ebp]
	add	edx, 1
	mov	DWORD PTR _i$72664[ebp], edx
$LN6@WriteUnpac:
	mov	ecx, DWORD PTR _folders$[ebp]
	call	?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CFolder>::Size
	cmp	DWORD PTR _i$72664[ebp], eax
	jae	SHORT $LN4@WriteUnpac
; Line 387
	mov	eax, DWORD PTR _i$72664[ebp]
	push	eax
	mov	ecx, DWORD PTR _folders$[ebp]
	call	??A?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEABUCFolder@N7z@NArchive@@I@Z ; CObjectVector<NArchive::N7z::CFolder>::operator[]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteFolder@COutArchive@N7z@NArchive@@AAEXABUCFolder@23@@Z ; NArchive::N7z::COutArchive::WriteFolder
	jmp	SHORT $LN5@WriteUnpac
$LN4@WriteUnpac:
; Line 390
	push	12					; 0000000cH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 391
	mov	DWORD PTR _i$72668[ebp], 0
	jmp	SHORT $LN3@WriteUnpac
$LN2@WriteUnpac:
	mov	ecx, DWORD PTR _i$72668[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$72668[ebp], ecx
$LN3@WriteUnpac:
	mov	ecx, DWORD PTR _outFolders$[ebp]
	add	ecx, 36					; 00000024H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _i$72668[ebp], eax
	jae	SHORT $LN1@WriteUnpac
; Line 392
	mov	edx, DWORD PTR _i$72668[ebp]
	push	edx
	mov	ecx, DWORD PTR _outFolders$[ebp]
	add	ecx, 36					; 00000024H
	call	??A?$CRecordVector@_K@@QBEAB_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
	jmp	SHORT $LN2@WriteUnpac
$LN1@WriteUnpac:
; Line 394
	mov	eax, DWORD PTR _outFolders$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteHashDigests@COutArchive@N7z@NArchive@@AAEXABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WriteHashDigests
; Line 396
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
$LN8@WriteUnpac:
; Line 397
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?WriteUnpackInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@@Z ENDP ; NArchive::N7z::COutArchive::WriteUnpackInfo
_TEXT	ENDS
PUBLIC	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector
PUBLIC	?Add@?$CRecordVector@I@@QAEII@Z			; CRecordVector<unsigned int>::Add
PUBLIC	?Add@?$CRecordVector@_N@@QAEI_N@Z		; CRecordVector<bool>::Add
PUBLIC	?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt32DefVector::ValidAndDefined
PUBLIC	??0CUInt32DefVector@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CUInt32DefVector::CUInt32DefVector
PUBLIC	?Size@?$CRecordVector@I@@QBEIXZ			; CRecordVector<unsigned int>::Size
PUBLIC	?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WriteSubStreamsInfo
EXTRN	___CxxFrameHandler3:PROC
xdata$x	SEGMENT
__unwindtable$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z$0
__ehfuncinfo$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_j$72714 = -80						; size = 4
_numSubStreams$72710 = -76				; size = 4
_digestIndex$ = -72					; size = 4
_digests2$ = -64					; size = 24
_j$72700 = -36						; size = 4
_num$72699 = -32					; size = 4
_index$72695 = -28					; size = 4
_i$ = -24						; size = 4
_numUnpackStreamsInFolders$ = -20			; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_folders$ = 8						; size = 4
_outFolders$ = 12					; size = 4
_unpackSizes$ = 16					; size = 4
_digests$ = 20						; size = 4
?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z PROC ; NArchive::N7z::COutArchive::WriteSubStreamsInfo
; _this$ = ecx
; Line 403
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 68					; 00000044H
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-80]
	mov	ecx, 17					; 00000011H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 404
	mov	eax, DWORD PTR _outFolders$[ebp]
	add	eax, 24					; 00000018H
	mov	DWORD PTR _numUnpackStreamsInFolders$[ebp], eax
; Line 405
	push	8
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 408
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN26@WriteSubSt
$LN25@WriteSubSt:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN26@WriteSubSt:
	mov	ecx, DWORD PTR _numUnpackStreamsInFolders$[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN24@WriteSubSt
; Line 409
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _numUnpackStreamsInFolders$[ebp]
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	cmp	DWORD PTR [eax], 1
	je	SHORT $LN23@WriteSubSt
; Line 411
	push	13					; 0000000dH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 412
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN22@WriteSubSt
$LN21@WriteSubSt:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN22@WriteSubSt:
	mov	ecx, DWORD PTR _numUnpackStreamsInFolders$[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN20@WriteSubSt
; Line 413
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _numUnpackStreamsInFolders$[ebp]
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [eax]
	xor	eax, eax
	push	eax
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
	jmp	SHORT $LN21@WriteSubSt
$LN20@WriteSubSt:
; Line 414
	jmp	SHORT $LN24@WriteSubSt
$LN23@WriteSubSt:
	jmp	SHORT $LN25@WriteSubSt
$LN24@WriteSubSt:
; Line 417
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN19@WriteSubSt
$LN18@WriteSubSt:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN19@WriteSubSt:
	mov	ecx, DWORD PTR _numUnpackStreamsInFolders$[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN17@WriteSubSt
; Line 418
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _numUnpackStreamsInFolders$[ebp]
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	cmp	DWORD PTR [eax], 1
	jbe	$LN16@WriteSubSt
; Line 420
	push	9
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 421
	mov	DWORD PTR _index$72695[ebp], 0
; Line 422
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN15@WriteSubSt
$LN14@WriteSubSt:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN15@WriteSubSt:
	mov	ecx, DWORD PTR _numUnpackStreamsInFolders$[ebp]
	call	?Size@?$CRecordVector@I@@QBEIXZ		; CRecordVector<unsigned int>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN13@WriteSubSt
; Line 424
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _numUnpackStreamsInFolders$[ebp]
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR _num$72699[ebp], edx
; Line 425
	mov	DWORD PTR _j$72700[ebp], 0
	jmp	SHORT $LN12@WriteSubSt
$LN11@WriteSubSt:
	mov	eax, DWORD PTR _j$72700[ebp]
	add	eax, 1
	mov	DWORD PTR _j$72700[ebp], eax
$LN12@WriteSubSt:
	mov	ecx, DWORD PTR _j$72700[ebp]
	cmp	ecx, DWORD PTR _num$72699[ebp]
	jae	SHORT $LN10@WriteSubSt
; Line 427
	mov	edx, DWORD PTR _j$72700[ebp]
	add	edx, 1
	cmp	edx, DWORD PTR _num$72699[ebp]
	je	SHORT $LN9@WriteSubSt
; Line 428
	mov	eax, DWORD PTR _index$72695[ebp]
	push	eax
	mov	ecx, DWORD PTR _unpackSizes$[ebp]
	call	??A?$CRecordVector@_K@@QBEAB_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
$LN9@WriteSubSt:
; Line 429
	mov	eax, DWORD PTR _index$72695[ebp]
	add	eax, 1
	mov	DWORD PTR _index$72695[ebp], eax
; Line 430
	jmp	SHORT $LN11@WriteSubSt
$LN10@WriteSubSt:
; Line 431
	jmp	SHORT $LN14@WriteSubSt
$LN13@WriteSubSt:
; Line 432
	jmp	SHORT $LN17@WriteSubSt
$LN16@WriteSubSt:
	jmp	$LN18@WriteSubSt
$LN17@WriteSubSt:
; Line 435
	lea	ecx, DWORD PTR _digests2$[ebp]
	call	??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 437
	mov	DWORD PTR _digestIndex$[ebp], 0
; Line 438
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN8@WriteSubSt
$LN7@WriteSubSt:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN8@WriteSubSt:
	mov	ecx, DWORD PTR _folders$[ebp]
	call	?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CFolder>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN6@WriteSubSt
; Line 440
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _numUnpackStreamsInFolders$[ebp]
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	eax, DWORD PTR [eax]
	mov	DWORD PTR _numSubStreams$72710[ebp], eax
; Line 441
	cmp	DWORD PTR _numSubStreams$72710[ebp], 1
	jne	SHORT $LN5@WriteSubSt
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _outFolders$[ebp]
	call	?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt32DefVector::ValidAndDefined
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN5@WriteSubSt
; Line 442
	mov	eax, DWORD PTR _digestIndex$[ebp]
	add	eax, 1
	mov	DWORD PTR _digestIndex$[ebp], eax
; Line 443
	jmp	SHORT $LN4@WriteSubSt
$LN5@WriteSubSt:
; Line 444
	mov	DWORD PTR _j$72714[ebp], 0
	jmp	SHORT $LN3@WriteSubSt
$LN2@WriteSubSt:
	mov	ecx, DWORD PTR _j$72714[ebp]
	add	ecx, 1
	mov	DWORD PTR _j$72714[ebp], ecx
	mov	edx, DWORD PTR _digestIndex$[ebp]
	add	edx, 1
	mov	DWORD PTR _digestIndex$[ebp], edx
$LN3@WriteSubSt:
	mov	eax, DWORD PTR _j$72714[ebp]
	cmp	eax, DWORD PTR _numSubStreams$72710[ebp]
	jae	SHORT $LN4@WriteSubSt
; Line 446
	mov	ecx, DWORD PTR _digestIndex$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _digests$[ebp]
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	edx, BYTE PTR [eax]
	push	edx
	lea	ecx, DWORD PTR _digests2$[ebp]
	call	?Add@?$CRecordVector@_N@@QAEI_N@Z	; CRecordVector<bool>::Add
; Line 447
	mov	eax, DWORD PTR _digestIndex$[ebp]
	push	eax
	mov	ecx, DWORD PTR _digests$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@I@@QBEABII@Z		; CRecordVector<unsigned int>::operator[]
	mov	ecx, DWORD PTR [eax]
	push	ecx
	lea	ecx, DWORD PTR _digests2$[ebp+12]
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
; Line 448
	jmp	SHORT $LN2@WriteSubSt
$LN4@WriteSubSt:
; Line 449
	jmp	$LN7@WriteSubSt
$LN6@WriteSubSt:
; Line 450
	lea	edx, DWORD PTR _digests2$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteHashDigests@COutArchive@N7z@NArchive@@AAEXABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WriteHashDigests
; Line 451
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 452
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _digests2$[ebp]
	call	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN33@WriteSubSt
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	add	esp, 80					; 00000050H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
	npad	1
$LN33@WriteSubSt:
	DD	1
	DD	$LN32@WriteSubSt
$LN32@WriteSubSt:
	DD	-64					; ffffffc0H
	DD	24					; 00000018H
	DD	$LN30@WriteSubSt
$LN30@WriteSubSt:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	50					; 00000032H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z$0:
	lea	ecx, DWORD PTR _digests2$[ebp]
	jmp	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
__ehhandler$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-76]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z ENDP ; NArchive::N7z::COutArchive::WriteSubStreamsInfo
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_i$ = 8							; size = 4
?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z PROC ; NArchive::N7z::CUInt32DefVector::ValidAndDefined, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 113
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN3@ValidAndDe
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@ValidAndDe
	mov	DWORD PTR tv72[ebp], 1
	jmp	SHORT $LN4@ValidAndDe
$LN3@ValidAndDe:
	mov	DWORD PTR tv72[ebp], 0
$LN4@ValidAndDe:
	mov	al, BYTE PTR tv72[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ValidAndDefined@CUInt32DefVector@N7z@NArchive@@QBE_NI@Z ENDP ; NArchive::N7z::CUInt32DefVector::ValidAndDefined
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::~CRecordVector<bool>
PUBLIC	??0?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
PUBLIC	??0?$CRecordVector@_N@@QAE@XZ			; CRecordVector<bool>::CRecordVector<bool>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CUInt32DefVector@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CUInt32DefVector::CUInt32DefVector, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CUInt32DefVector@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CUInt32DefVector::CUInt32DefVector
PUBLIC	??1?$CRecordVector@I@@QAE@XZ			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0
__ehfuncinfo$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CUInt32DefVector@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CUInt32DefVector@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CUInt32DefVector::~CUInt32DefVector
PUBLIC	?SkipAlign@COutArchive@N7z@NArchive@@AAEXII@Z	; NArchive::N7z::COutArchive::SkipAlign
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$72733 = -12						; size = 4
_skip$ = -8						; size = 4
_this$ = -4						; size = 4
_pos$ = 8						; size = 4
_alignSize$ = 12					; size = 4
?SkipAlign@COutArchive@N7z@NArchive@@AAEXII@Z PROC	; NArchive::N7z::COutArchive::SkipAlign
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.cpp
; Line 457
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 458
	mov	eax, DWORD PTR _this$[ebp]
	movzx	ecx, BYTE PTR [eax+76]
	test	ecx, ecx
	jne	SHORT $LN6@SkipAlign
; Line 459
	jmp	SHORT $LN7@SkipAlign
$LN6@SkipAlign:
; Line 460
	mov	ecx, DWORD PTR _this$[ebp]
	call	?GetPos@COutArchive@N7z@NArchive@@ABE_KXZ ; NArchive::N7z::COutArchive::GetPos
	add	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], eax
; Line 461
	mov	edx, DWORD PTR _alignSize$[ebp]
	sub	edx, 1
	and	edx, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _pos$[ebp], edx
; Line 462
	jne	SHORT $LN5@SkipAlign
; Line 463
	jmp	SHORT $LN7@SkipAlign
$LN5@SkipAlign:
; Line 464
	mov	eax, DWORD PTR _alignSize$[ebp]
	sub	eax, DWORD PTR _pos$[ebp]
	mov	DWORD PTR _skip$[ebp], eax
; Line 465
	cmp	DWORD PTR _skip$[ebp], 2
	jae	SHORT $LN4@SkipAlign
; Line 466
	mov	ecx, DWORD PTR _skip$[ebp]
	add	ecx, DWORD PTR _alignSize$[ebp]
	mov	DWORD PTR _skip$[ebp], ecx
$LN4@SkipAlign:
; Line 467
	mov	edx, DWORD PTR _skip$[ebp]
	sub	edx, 2
	mov	DWORD PTR _skip$[ebp], edx
; Line 468
	push	25					; 00000019H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 469
	movzx	eax, BYTE PTR _skip$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 470
	mov	DWORD PTR _i$72733[ebp], 0
	jmp	SHORT $LN3@SkipAlign
$LN2@SkipAlign:
	mov	ecx, DWORD PTR _i$72733[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$72733[ebp], ecx
$LN3@SkipAlign:
	mov	edx, DWORD PTR _i$72733[ebp]
	cmp	edx, DWORD PTR _skip$[ebp]
	jae	SHORT $LN7@SkipAlign
; Line 471
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
	jmp	SHORT $LN2@SkipAlign
$LN7@SkipAlign:
; Line 472
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SkipAlign@COutArchive@N7z@NArchive@@AAEXII@Z ENDP	; NArchive::N7z::COutArchive::SkipAlign
_TEXT	ENDS
PUBLIC	?WriteAlignedBoolHeader@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@IEI@Z ; NArchive::N7z::COutArchive::WriteAlignedBoolHeader
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
tv69 = -20						; size = 4
_dataSize$ = -16					; size = 8
_bvSize$ = -8						; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
_numDefined$ = 12					; size = 4
_type$ = 16						; size = 1
_itemSize$ = 20						; size = 4
?WriteAlignedBoolHeader@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@IEI@Z PROC ; NArchive::N7z::COutArchive::WriteAlignedBoolHeader
; _this$ = ecx
; Line 475
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	esi
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 476
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _numDefined$[ebp], eax
	jne	SHORT $LN5@WriteAlign
	mov	DWORD PTR tv69[ebp], 0
	jmp	SHORT $LN6@WriteAlign
$LN5@WriteAlign:
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	call	?Bv_GetSizeInBytes@N7z@NArchive@@YGIABV?$CRecordVector@_N@@@Z ; NArchive::N7z::Bv_GetSizeInBytes
	mov	DWORD PTR tv69[ebp], eax
$LN6@WriteAlign:
	mov	ecx, DWORD PTR tv69[ebp]
	mov	DWORD PTR _bvSize$[ebp], ecx
; Line 477
	mov	eax, DWORD PTR _numDefined$[ebp]
	mov	edx, DWORD PTR _itemSize$[ebp]
	mul	edx
	mov	ecx, DWORD PTR _bvSize$[ebp]
	xor	esi, esi
	add	eax, ecx
	adc	edx, esi
	add	eax, 2
	adc	edx, 0
	mov	DWORD PTR _dataSize$[ebp], eax
	mov	DWORD PTR _dataSize$[ebp+4], edx
; Line 478
	mov	edx, DWORD PTR _itemSize$[ebp]
	push	edx
	mov	eax, DWORD PTR _dataSize$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _dataSize$[ebp]
	push	ecx
	call	?GetBigNumberSize@N7z@NArchive@@YGI_K@Z	; NArchive::N7z::GetBigNumberSize
	mov	edx, DWORD PTR _bvSize$[ebp]
	lea	eax, DWORD PTR [edx+eax+3]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkipAlign@COutArchive@N7z@NArchive@@AAEXII@Z ; NArchive::N7z::COutArchive::SkipAlign
; Line 480
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 481
	mov	edx, DWORD PTR _dataSize$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _dataSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
; Line 482
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _numDefined$[ebp], eax
	jne	SHORT $LN2@WriteAlign
; Line 483
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 484
	jmp	SHORT $LN1@WriteAlign
$LN2@WriteAlign:
; Line 486
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 487
	mov	ecx, DWORD PTR _v$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteBoolVector@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@@Z ; NArchive::N7z::COutArchive::WriteBoolVector
$LN1@WriteAlign:
; Line 489
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 490
	pop	esi
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?WriteAlignedBoolHeader@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@IEI@Z ENDP ; NArchive::N7z::COutArchive::WriteAlignedBoolHeader
; Function compile flags: /Odtp /RTCsu
tv80 = -12						; size = 8
_i$ = -4						; size = 4
_value$ = 8						; size = 8
?GetBigNumberSize@N7z@NArchive@@YGI_K@Z PROC		; NArchive::N7z::GetBigNumberSize
; Line 210
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
; Line 212
	mov	DWORD PTR _i$[ebp], 1
	jmp	SHORT $LN4@GetBigNumb
$LN3@GetBigNumb:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN4@GetBigNumb:
	cmp	DWORD PTR _i$[ebp], 9
	jge	SHORT $LN2@GetBigNumb
; Line 213
	mov	ecx, DWORD PTR _i$[ebp]
	imul	ecx, 7
	mov	eax, 1
	xor	edx, edx
	call	__allshl
	mov	DWORD PTR tv80[ebp], eax
	mov	DWORD PTR tv80[ebp+4], edx
	mov	ecx, DWORD PTR _value$[ebp+4]
	cmp	ecx, DWORD PTR tv80[ebp+4]
	ja	SHORT $LN1@GetBigNumb
	jb	SHORT $LN7@GetBigNumb
	mov	edx, DWORD PTR _value$[ebp]
	cmp	edx, DWORD PTR tv80[ebp]
	jae	SHORT $LN1@GetBigNumb
$LN7@GetBigNumb:
; Line 214
	jmp	SHORT $LN2@GetBigNumb
$LN1@GetBigNumb:
; Line 215
	jmp	SHORT $LN3@GetBigNumb
$LN2@GetBigNumb:
	mov	eax, DWORD PTR _i$[ebp]
; Line 216
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?GetBigNumberSize@N7z@NArchive@@YGI_K@Z ENDP		; NArchive::N7z::GetBigNumberSize
_TEXT	ENDS
PUBLIC	?WriteUInt64DefVector@COutArchive@N7z@NArchive@@AAEXABUCUInt64DefVector@23@E@Z ; NArchive::N7z::COutArchive::WriteUInt64DefVector
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_i$ = -12						; size = 4
_numDefined$ = -8					; size = 4
_this$ = -4						; size = 4
_v$ = 8							; size = 4
_type$ = 12						; size = 1
?WriteUInt64DefVector@COutArchive@N7z@NArchive@@AAEXABUCUInt64DefVector@23@E@Z PROC ; NArchive::N7z::COutArchive::WriteUInt64DefVector
; _this$ = ecx
; Line 493
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 494
	mov	DWORD PTR _numDefined$[ebp], 0
; Line 497
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@WriteUInt6@2
$LN8@WriteUInt6@2:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN9@WriteUInt6@2:
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN7@WriteUInt6@2
; Line 498
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	edx, BYTE PTR [eax]
	test	edx, edx
	je	SHORT $LN6@WriteUInt6@2
; Line 499
	mov	eax, DWORD PTR _numDefined$[ebp]
	add	eax, 1
	mov	DWORD PTR _numDefined$[ebp], eax
$LN6@WriteUInt6@2:
; Line 501
	jmp	SHORT $LN8@WriteUInt6@2
$LN7@WriteUInt6@2:
	cmp	DWORD PTR _numDefined$[ebp], 0
	jne	SHORT $LN5@WriteUInt6@2
; Line 502
	jmp	SHORT $LN10@WriteUInt6@2
$LN5@WriteUInt6@2:
; Line 504
	push	8
	movzx	ecx, BYTE PTR _type$[ebp]
	push	ecx
	mov	edx, DWORD PTR _numDefined$[ebp]
	push	edx
	mov	eax, DWORD PTR _v$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteAlignedBoolHeader@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@IEI@Z ; NArchive::N7z::COutArchive::WriteAlignedBoolHeader
; Line 506
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@WriteUInt6@2
$LN3@WriteUInt6@2:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@WriteUInt6@2:
	mov	ecx, DWORD PTR _v$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN10@WriteUInt6@2
; Line 507
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _v$[ebp]
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	eax, BYTE PTR [eax]
	test	eax, eax
	je	SHORT $LN1@WriteUInt6@2
; Line 508
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _v$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@_K@@QBEAB_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR [eax+4]
	push	edx
	mov	eax, DWORD PTR [eax]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteUInt64@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteUInt64
$LN1@WriteUInt6@2:
; Line 509
	jmp	SHORT $LN3@WriteUInt6@2
$LN10@WriteUInt6@2:
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?WriteUInt64DefVector@COutArchive@N7z@NArchive@@AAEXABUCUInt64DefVector@23@E@Z ENDP ; NArchive::N7z::COutArchive::WriteUInt64DefVector
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
PUBLIC	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
PUBLIC	?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CFolder>::AddNew
PUBLIC	?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z	; CBufInStream::Init
PUBLIC	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
PUBLIC	??0CBufInStream@@QAE@XZ				; CBufInStream::CBufInStream
PUBLIC	?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z ; NArchive::N7z::COutArchive::EncodeStream
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z:PROC ; NArchive::N7z::CEncoder::Encode
EXTRN	??2@YAPAXI@Z:PROC				; operator new
xdata$x	SEGMENT
__unwindtable$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z$1
__ehfuncinfo$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv71 = -88						; size = 4
$T74220 = -84						; size = 4
$T74219 = -80						; size = 4
$T74216 = -76						; size = 4
$T74215 = -72						; size = 4
___result__$72786 = -68					; size = 4
_unpackSize$ = -60					; size = 8
_dataSize64$ = -44					; size = 8
_stream$ = -28						; size = 4
_streamSpec$ = -20					; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_encoder$ = 8						; size = 4
_data$ = 12						; size = 4
_packSizes$ = 16					; size = 4
_folders$ = 20						; size = 4
_outFolders$ = 24					; size = 4
?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z PROC ; NArchive::N7z::COutArchive::EncodeStream
; _this$ = ecx
; Line 515
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 76					; 0000004cH
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-88]
	mov	ecx, 19					; 00000013H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 516
	push	32					; 00000020H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74216[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T74216[ebp], 0
	je	SHORT $LN4@EncodeStre
	mov	ecx, DWORD PTR $T74216[ebp]
	call	??0CBufInStream@@QAE@XZ
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN5@EncodeStre
$LN4@EncodeStre:
	mov	DWORD PTR tv71[ebp], 0
$LN5@EncodeStre:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T74215[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T74215[ebp]
	mov	DWORD PTR _streamSpec$[ebp], ecx
; Line 517
	mov	edx, DWORD PTR _streamSpec$[ebp]
	push	edx
	lea	ecx, DWORD PTR _stream$[ebp]
	call	??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
	mov	DWORD PTR __$EHRec$[ebp+8], 1
; Line 518
	push	0
	mov	ecx, DWORD PTR _data$[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	push	eax
	mov	ecx, DWORD PTR _data$[ebp]
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	push	eax
	mov	ecx, DWORD PTR _streamSpec$[ebp]
	call	?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z ; CBufInStream::Init
; Line 519
	push	1
	mov	ecx, DWORD PTR _outFolders$[ebp]
	call	?Add@?$CRecordVector@_N@@QAEI_N@Z	; CRecordVector<bool>::Add
; Line 520
	mov	ecx, DWORD PTR _data$[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	mov	esi, eax
	mov	ecx, DWORD PTR _data$[ebp]
	call	??B?$CBuffer@E@@QBEPBEXZ		; CBuffer<unsigned char>::operator unsigned char const *
	mov	edx, esi
	mov	ecx, eax
	call	@CrcCalc@8
	push	eax
	mov	ecx, DWORD PTR _outFolders$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
; Line 522
	mov	ecx, DWORD PTR _data$[ebp]
	call	?Size@?$CBuffer@E@@QBEIXZ		; CBuffer<unsigned char>::Size
	xor	ecx, ecx
	mov	DWORD PTR _dataSize64$[ebp], eax
	mov	DWORD PTR _dataSize64$[ebp+4], ecx
; Line 529
	push	0
	mov	edx, DWORD PTR _packSizes$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	lea	eax, DWORD PTR _unpackSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _outFolders$[ebp]
	add	ecx, 36					; 00000024H
	push	ecx
	mov	ecx, DWORD PTR _folders$[ebp]
	call	?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ ; CObjectVector<NArchive::N7z::CFolder>::AddNew
	push	eax
	lea	edx, DWORD PTR _dataSize64$[ebp]
	push	edx
	lea	ecx, DWORD PTR _stream$[ebp]
	call	??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
	push	eax
	mov	ecx, DWORD PTR _encoder$[ebp]
	call	?Encode@CEncoder@N7z@NArchive@@QAEJPAUISequentialInStream@@PB_KAAUCFolder@23@AAV?$CRecordVector@_K@@AA_KPAUISequentialOutStream@@3PAUICompressProgressInfo@@@Z ; NArchive::N7z::CEncoder::Encode
	mov	DWORD PTR ___result__$72786[ebp], eax
	cmp	DWORD PTR ___result__$72786[ebp], 0
	je	SHORT $LN1@EncodeStre
	mov	eax, DWORD PTR ___result__$72786[ebp]
	mov	DWORD PTR $T74219[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _stream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T74219[ebp]
	jmp	SHORT $LN2@EncodeStre
$LN1@EncodeStre:
; Line 530
	mov	DWORD PTR $T74220[ebp], 0
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _stream$[ebp]
	call	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
	mov	eax, DWORD PTR $T74220[ebp]
$LN2@EncodeStre:
; Line 531
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN13@EncodeStre
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	add	esp, 88					; 00000058H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	20					; 00000014H
	npad	3
$LN13@EncodeStre:
	DD	3
	DD	$LN12@EncodeStre
$LN12@EncodeStre:
	DD	-28					; ffffffe4H
	DD	4
	DD	$LN8@EncodeStre
	DD	-44					; ffffffd4H
	DD	8
	DD	$LN9@EncodeStre
	DD	-60					; ffffffc4H
	DD	8
	DD	$LN10@EncodeStre
$LN10@EncodeStre:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	0
$LN9@EncodeStre:
	DB	100					; 00000064H
	DB	97					; 00000061H
	DB	116					; 00000074H
	DB	97					; 00000061H
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	54					; 00000036H
	DB	52					; 00000034H
	DB	0
$LN8@EncodeStre:
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z$0:
	mov	eax, DWORD PTR $T74216[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z$1:
	lea	ecx, DWORD PTR _stream$[ebp]
	jmp	??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
__ehhandler$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-88]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z ENDP ; NArchive::N7z::COutArchive::EncodeStream
PUBLIC	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
_ref$ = 16						; size = 4
?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z PROC	; CBufInStream::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 45
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 46
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax+8], ecx
; Line 47
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 48
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], 0
	mov	DWORD PTR [ecx+20], 0
; Line 49
	mov	edx, DWORD PTR _ref$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ; CMyComPtr<IUnknown>::operator=
; Line 50
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?Init@CBufInStream@@QAEXPBEIPAUIUnknown@@@Z ENDP	; CBufInStream::Init
_TEXT	ENDS
PUBLIC	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
PUBLIC	??_7CBufInStream@@6B@				; CBufInStream::`vftable'
PUBLIC	??0CMyUnknownImp@@QAE@XZ			; CMyUnknownImp::CMyUnknownImp
PUBLIC	??0IInStream@@QAE@XZ				; IInStream::IInStream
PUBLIC	??_R4CBufInStream@@6B@				; CBufInStream::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCBufInStream@@@8			; CBufInStream `RTTI Type Descriptor'
PUBLIC	??_R3CBufInStream@@8				; CBufInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CBufInStream@@8				; CBufInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CBufInStream@@8			; CBufInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@IInStream@@8			; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIInStream@@@8				; IInStream `RTTI Type Descriptor'
PUBLIC	??_R3IInStream@@8				; IInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IInStream@@8				; IInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@ISequentialInStream@@8		; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUISequentialInStream@@@8			; ISequentialInStream `RTTI Type Descriptor'
PUBLIC	??_R3ISequentialInStream@@8			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2ISequentialInStream@@8			; ISequentialInStream::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@IUnknown@@8			; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AUIUnknown@@@8				; IUnknown `RTTI Type Descriptor'
PUBLIC	??_R3IUnknown@@8				; IUnknown::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2IUnknown@@8				; IUnknown::`RTTI Base Class Array'
PUBLIC	??_R13?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
PUBLIC	??_R0?AVCMyUnknownImp@@@8			; CMyUnknownImp `RTTI Type Descriptor'
PUBLIC	??_R3CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMyUnknownImp@@8				; CMyUnknownImp::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMyUnknownImp@@8			; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z ; CBufInStream::QueryInterface
PUBLIC	?AddRef@CBufInStream@@UAGKXZ			; CBufInStream::AddRef
PUBLIC	?Release@CBufInStream@@UAGKXZ			; CBufInStream::Release
EXTRN	?Read@CBufInStream@@UAGJPAXIPAI@Z:PROC		; CBufInStream::Read
EXTRN	?Seek@CBufInStream@@UAGJ_JIPA_K@Z:PROC		; CBufInStream::Seek
;	COMDAT ??_R1A@?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2CMyUnknownImp@@8
rdata$r	SEGMENT
??_R2CMyUnknownImp@@8 DD FLAT:??_R1A@?0A@EA@CMyUnknownImp@@8 ; CMyUnknownImp::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CMyUnknownImp@@8
rdata$r	SEGMENT
??_R3CMyUnknownImp@@8 DD 00H				; CMyUnknownImp::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMyUnknownImp@@@8
_DATA	SEGMENT
??_R0?AVCMyUnknownImp@@@8 DD FLAT:??_7type_info@@6B@	; CMyUnknownImp `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMyUnknownImp@@', 00H
_DATA	ENDS
;	COMDAT ??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	SEGMENT
??_R13?0A@EA@CMyUnknownImp@@8 DD FLAT:??_R0?AVCMyUnknownImp@@@8 ; CMyUnknownImp::`RTTI Base Class Descriptor at (4,-1,0,64)'
	DD	00H
	DD	04H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R2IUnknown@@8
rdata$r	SEGMENT
??_R2IUnknown@@8 DD FLAT:??_R1A@?0A@EA@IUnknown@@8	; IUnknown::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3IUnknown@@8
rdata$r	SEGMENT
??_R3IUnknown@@8 DD 00H					; IUnknown::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIUnknown@@@8
_DATA	SEGMENT
??_R0?AUIUnknown@@@8 DD FLAT:??_7type_info@@6B@		; IUnknown `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIUnknown@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IUnknown@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IUnknown@@8 DD FLAT:??_R0?AUIUnknown@@@8	; IUnknown::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R2ISequentialInStream@@8
rdata$r	SEGMENT
??_R2ISequentialInStream@@8 DD FLAT:??_R1A@?0A@EA@ISequentialInStream@@8 ; ISequentialInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3ISequentialInStream@@8
rdata$r	SEGMENT
??_R3ISequentialInStream@@8 DD 00H			; ISequentialInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUISequentialInStream@@@8
_DATA	SEGMENT
??_R0?AUISequentialInStream@@@8 DD FLAT:??_7type_info@@6B@ ; ISequentialInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUISequentialInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@ISequentialInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@ISequentialInStream@@8 DD FLAT:??_R0?AUISequentialInStream@@@8 ; ISequentialInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2IInStream@@8
rdata$r	SEGMENT
??_R2IInStream@@8 DD FLAT:??_R1A@?0A@EA@IInStream@@8	; IInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
rdata$r	ENDS
;	COMDAT ??_R3IInStream@@8
rdata$r	SEGMENT
??_R3IInStream@@8 DD 00H				; IInStream::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	03H
	DD	FLAT:??_R2IInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AUIInStream@@@8
_DATA	SEGMENT
??_R0?AUIInStream@@@8 DD FLAT:??_7type_info@@6B@	; IInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AUIInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@IInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@IInStream@@8 DD FLAT:??_R0?AUIInStream@@@8 ; IInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	02H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3IInStream@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CBufInStream@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CBufInStream@@8 DD FLAT:??_R0?AVCBufInStream@@@8 ; CBufInStream::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	04H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CBufInStream@@8
rdata$r	ENDS
;	COMDAT ??_R2CBufInStream@@8
rdata$r	SEGMENT
??_R2CBufInStream@@8 DD FLAT:??_R1A@?0A@EA@CBufInStream@@8 ; CBufInStream::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@IInStream@@8
	DD	FLAT:??_R1A@?0A@EA@ISequentialInStream@@8
	DD	FLAT:??_R1A@?0A@EA@IUnknown@@8
	DD	FLAT:??_R13?0A@EA@CMyUnknownImp@@8
rdata$r	ENDS
;	COMDAT ??_R3CBufInStream@@8
rdata$r	SEGMENT
??_R3CBufInStream@@8 DD 00H				; CBufInStream::`RTTI Class Hierarchy Descriptor'
	DD	01H
	DD	05H
	DD	FLAT:??_R2CBufInStream@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCBufInStream@@@8
_DATA	SEGMENT
??_R0?AVCBufInStream@@@8 DD FLAT:??_7type_info@@6B@	; CBufInStream `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCBufInStream@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CBufInStream@@6B@
rdata$r	SEGMENT
??_R4CBufInStream@@6B@ DD 00H				; CBufInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCBufInStream@@@8
	DD	FLAT:??_R3CBufInStream@@8
rdata$r	ENDS
;	COMDAT ??_7CBufInStream@@6B@
CONST	SEGMENT
??_7CBufInStream@@6B@ DD FLAT:??_R4CBufInStream@@6B@	; CBufInStream::`vftable'
	DD	FLAT:?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z
	DD	FLAT:?AddRef@CBufInStream@@UAGKXZ
	DD	FLAT:?Release@CBufInStream@@UAGKXZ
	DD	FLAT:?Read@CBufInStream@@UAGJPAXIPAI@Z
	DD	FLAT:?Seek@CBufInStream@@UAGJ_JIPA_K@Z
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0CBufInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CBufInStream@@QAE@XZ PROC				; CBufInStream::CBufInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IInStream@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 4
	call	??0CMyUnknownImp@@QAE@XZ		; CMyUnknownImp::CMyUnknownImp
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CBufInStream@@6B@
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??0?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0CBufInStream@@QAE@XZ ENDP				; CBufInStream::CBufInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0CMyUnknownImp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CMyUnknownImp@@QAE@XZ PROC				; CMyUnknownImp::CMyUnknownImp, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 167
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CMyUnknownImp@@QAE@XZ ENDP				; CMyUnknownImp::CMyUnknownImp
_TEXT	ENDS
PUBLIC	_==@8
EXTRN	_IID_IInStream:BYTE
EXTRN	_IID_ISequentialInStream:BYTE
EXTRN	_IID_IUnknown:BYTE
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z
_TEXT	SEGMENT
_this$ = 8						; size = 4
_iid$ = 12						; size = 4
_outObject$ = 16					; size = 4
?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z PROC ; CBufInStream::QueryInterface, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 53
	push	ebp
	mov	ebp, esp
	mov	eax, DWORD PTR _outObject$[ebp]
	mov	DWORD PTR [eax], 0
	push	OFFSET _IID_IUnknown
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN6@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter
$LN6@QueryInter:
	push	OFFSET _IID_ISequentialInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN4@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter
$LN4@QueryInter:
	push	OFFSET _IID_IInStream
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	call	_==@8
	test	eax, eax
	je	SHORT $LN2@QueryInter
	mov	edx, DWORD PTR _outObject$[ebp]
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], eax
	jmp	SHORT $LN5@QueryInter
$LN2@QueryInter:
	mov	eax, -2147467262			; 80004002H
	jmp	SHORT $LN7@QueryInter
$LN5@QueryInter:
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx+4]
	add	edx, 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], edx
	xor	eax, eax
$LN7@QueryInter:
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	12					; 0000000cH
?QueryInterface@CBufInStream@@UAGJABU_GUID@@PAPAX@Z ENDP ; CBufInStream::QueryInterface
_TEXT	ENDS
PUBLIC	_IsEqualGUID@8
; Function compile flags: /Odtp /RTCsu
;	COMDAT _==@8
_TEXT	SEGMENT
_guidOne$ = 8						; size = 4
_guidOther$ = 12					; size = 4
_==@8	PROC						; COMDAT
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\guiddef.h
; Line 193
	push	ebp
	mov	ebp, esp
; Line 194
	mov	eax, DWORD PTR _guidOther$[ebp]
	push	eax
	mov	ecx, DWORD PTR _guidOne$[ebp]
	push	ecx
	call	_IsEqualGUID@8
; Line 195
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_==@8	ENDP
_TEXT	ENDS
EXTRN	_memcmp:PROC
; Function compile flags: /Odtp /RTCsu
;	COMDAT _IsEqualGUID@8
_TEXT	SEGMENT
_rguid1$ = 8						; size = 4
_rguid2$ = 12						; size = 4
_IsEqualGUID@8 PROC					; COMDAT
; Line 160
	push	ebp
	mov	ebp, esp
; Line 161
	push	16					; 00000010H
	mov	eax, DWORD PTR _rguid2$[ebp]
	push	eax
	mov	ecx, DWORD PTR _rguid1$[ebp]
	push	ecx
	call	_memcmp
	add	esp, 12					; 0000000cH
	neg	eax
	sbb	eax, eax
	add	eax, 1
; Line 162
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	8
_IsEqualGUID@8 ENDP
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?AddRef@CBufInStream@@UAGKXZ
_TEXT	SEGMENT
tv70 = -4						; size = 4
_this$ = 8						; size = 4
?AddRef@CBufInStream@@UAGKXZ PROC			; CBufInStream::AddRef, COMDAT
; File c:\workspace\7z1505-src\cpp\7zip\common\streamobjects.h
; Line 53
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	add	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR tv70[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
?AddRef@CBufInStream@@UAGKXZ ENDP			; CBufInStream::AddRef
_TEXT	ENDS
PUBLIC	??_GCBufInStream@@QAEPAXI@Z			; CBufInStream::`scalar deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@CBufInStream@@UAGKXZ
_TEXT	SEGMENT
tv81 = -16						; size = 4
tv70 = -12						; size = 4
$T74249 = -8						; size = 4
$T74248 = -4						; size = 4
_this$ = 8						; size = 4
?Release@CBufInStream@@UAGKXZ PROC			; CBufInStream::Release, COMDAT
; Line 53
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	sub	ecx, 1
	mov	DWORD PTR tv70[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR tv70[ebp]
	mov	DWORD PTR [edx+4], eax
	cmp	DWORD PTR tv70[ebp], 0
	je	SHORT $LN1@Release
	mov	ecx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [ecx+4]
	jmp	SHORT $LN2@Release
$LN1@Release:
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR $T74249[ebp], edx
	mov	eax, DWORD PTR $T74249[ebp]
	mov	DWORD PTR $T74248[ebp], eax
	cmp	DWORD PTR $T74248[ebp], 0
	je	SHORT $LN4@Release
	push	1
	mov	ecx, DWORD PTR $T74248[ebp]
	call	??_GCBufInStream@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN5@Release
$LN4@Release:
	mov	DWORD PTR tv81[ebp], 0
$LN5@Release:
	xor	eax, eax
$LN2@Release:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Release@CBufInStream@@UAGKXZ ENDP			; CBufInStream::Release
_TEXT	ENDS
PUBLIC	??1CBufInStream@@QAE@XZ				; CBufInStream::~CBufInStream
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCBufInStream@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCBufInStream@@QAEPAXI@Z PROC			; CBufInStream::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CBufInStream@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCBufInStream@@QAEPAXI@Z ENDP			; CBufInStream::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ		; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CBufInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CBufInStream@@QAE@XZ PROC				; CBufInStream::~CBufInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 28					; 0000001cH
	call	??1?$CMyComPtr@UIUnknown@@@@QAE@XZ	; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CBufInStream@@QAE@XZ ENDP				; CBufInStream::~CBufInStream
_TEXT	ENDS
PUBLIC	??_7IInStream@@6B@				; IInStream::`vftable'
PUBLIC	??0ISequentialInStream@@QAE@XZ			; ISequentialInStream::ISequentialInStream
PUBLIC	??_R4IInStream@@6B@				; IInStream::`RTTI Complete Object Locator'
EXTRN	__purecall:PROC
;	COMDAT ??_R4IInStream@@6B@
rdata$r	SEGMENT
??_R4IInStream@@6B@ DD 00H				; IInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUIInStream@@@8
	DD	FLAT:??_R3IInStream@@8
rdata$r	ENDS
;	COMDAT ??_7IInStream@@6B@
CONST	SEGMENT
??_7IInStream@@6B@ DD FLAT:??_R4IInStream@@6B@		; IInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0IInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IInStream@@QAE@XZ PROC				; IInStream::IInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0ISequentialInStream@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7IInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0IInStream@@QAE@XZ ENDP				; IInStream::IInStream
_TEXT	ENDS
PUBLIC	??_7ISequentialInStream@@6B@			; ISequentialInStream::`vftable'
PUBLIC	??0IUnknown@@QAE@XZ				; IUnknown::IUnknown
PUBLIC	??_R4ISequentialInStream@@6B@			; ISequentialInStream::`RTTI Complete Object Locator'
;	COMDAT ??_R4ISequentialInStream@@6B@
rdata$r	SEGMENT
??_R4ISequentialInStream@@6B@ DD 00H			; ISequentialInStream::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AUISequentialInStream@@@8
	DD	FLAT:??_R3ISequentialInStream@@8
rdata$r	ENDS
;	COMDAT ??_7ISequentialInStream@@6B@
CONST	SEGMENT
??_7ISequentialInStream@@6B@ DD FLAT:??_R4ISequentialInStream@@6B@ ; ISequentialInStream::`vftable'
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
	DD	FLAT:__purecall
; Function compile flags: /Odtp /RTCsu
CONST	ENDS
;	COMDAT ??0ISequentialInStream@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0ISequentialInStream@@QAE@XZ PROC			; ISequentialInStream::ISequentialInStream, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0IUnknown@@QAE@XZ
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7ISequentialInStream@@6B@
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0ISequentialInStream@@QAE@XZ ENDP			; ISequentialInStream::ISequentialInStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0IUnknown@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0IUnknown@@QAE@XZ PROC				; IUnknown::IUnknown, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0IUnknown@@QAE@XZ ENDP				; IUnknown::IUnknown
_TEXT	ENDS
PUBLIC	??BUString@@QBEPB_WXZ				; UString::operator wchar_t const *
PUBLIC	?Len@UString@@QBEIXZ				; UString::Len
PUBLIC	?IsEmpty@UString@@QBE_NXZ			; UString::IsEmpty
PUBLIC	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
PUBLIC	?IsItemAnti@CArchiveDatabaseOut@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CArchiveDatabaseOut::IsItemAnti
PUBLIC	??A?$CRecordVector@_N@@QAEAA_NI@Z		; CRecordVector<bool>::operator[]
PUBLIC	?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z	; CRecordVector<bool>::ClearAndSetSize
PUBLIC	?IsEmpty@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CFileItem>::IsEmpty
PUBLIC	??1?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
PUBLIC	?Add@?$CRecordVector@_K@@QAEI_K@Z		; CRecordVector<unsigned __int64>::Add
PUBLIC	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
PUBLIC	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
PUBLIC	??0?$CRecordVector@_K@@QAE@XZ			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
PUBLIC	?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z ; NArchive::N7z::COutArchive::WriteHeader
xdata$x	SEGMENT
__ehfuncinfo$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z DD 019930522H
	DD	06H
	DD	FLAT:__unwindtable$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$4
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$5
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
_file$72870 = -228					; size = 4
_defined$72864 = -221					; size = 1
_numDefined$72860 = -220				; size = 4
_boolVector$72859 = -212				; size = 12
_c$72856 = -196						; size = 2
_t$72852 = -192						; size = 4
_name$72851 = -188					; size = 4
_i$72847 = -184						; size = 4
_name$72844 = -180					; size = 4
_i$72840 = -176						; size = 4
_namesDataSize$72839 = -172				; size = 4
_numDefined$72838 = -168				; size = 4
_isAnti$72834 = -161					; size = 1
_file$72831 = -160					; size = 4
_cur$72827 = -156					; size = 4
_thereAreAntiItems$72826 = -150				; size = 1
_thereAreEmptyFiles$72825 = -149			; size = 1
_antiVector$72824 = -144				; size = 12
_emptyFileVector$72823 = -124				; size = 12
_numEmptyStreams$72816 = -108				; size = 4
_emptyStreamVector$72815 = -100				; size = 12
_file$72811 = -84					; size = 4
_digests$72807 = -76					; size = 24
_unpackSizes$72806 = -44				; size = 12
_packedSize$ = -28					; size = 8
_i$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_db$ = 8						; size = 4
_headerOffset$ = 12					; size = 4
?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z PROC ; NArchive::N7z::COutArchive::WriteHeader
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.cpp
; Line 537
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 216				; 000000d8H
	push	ebx
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 54					; 00000036H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 541
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+76], 1
; Line 545
	mov	DWORD PTR _packedSize$[ebp], 0
	mov	DWORD PTR _packedSize$[ebp+4], 0
; Line 546
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN43@WriteHeade
$LN42@WriteHeade:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN43@WriteHeade:
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 48					; 00000030H
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN41@WriteHeade
; Line 547
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 48					; 00000030H
	call	??A?$CRecordVector@_K@@QBEAB_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR _packedSize$[ebp]
	add	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _packedSize$[ebp+4]
	adc	edx, DWORD PTR [eax+4]
	mov	DWORD PTR _packedSize$[ebp], ecx
	mov	DWORD PTR _packedSize$[ebp+4], edx
	jmp	SHORT $LN42@WriteHeade
$LN41@WriteHeade:
; Line 549
	mov	eax, DWORD PTR _headerOffset$[ebp]
	mov	ecx, DWORD PTR _packedSize$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _packedSize$[ebp+4]
	mov	DWORD PTR [eax+4], edx
; Line 551
	push	1
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 555
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 84					; 00000054H
	call	?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CFolder>::Size
	test	eax, eax
	jbe	$LN40@WriteHeade
; Line 557
	push	4
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 558
	mov	eax, DWORD PTR _db$[ebp]
	add	eax, 60					; 0000003cH
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 48					; 00000030H
	push	ecx
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WritePackInfo@COutArchive@N7z@NArchive@@AAEX_KABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WritePackInfo
; Line 559
	mov	edx, DWORD PTR _db$[ebp]
	push	edx
	mov	eax, DWORD PTR _db$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteUnpackInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@@Z ; NArchive::N7z::COutArchive::WriteUnpackInfo
; Line 561
	lea	ecx, DWORD PTR _unpackSizes$72806[ebp]
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 562
	lea	ecx, DWORD PTR _digests$72807[ebp]
	call	??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 563
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN39@WriteHeade
$LN38@WriteHeade:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN39@WriteHeade:
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN37@WriteHeade
; Line 565
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR _file$72811[ebp], eax
; Line 566
	mov	eax, DWORD PTR _file$72811[ebp]
	movzx	ecx, BYTE PTR [eax+16]
	test	ecx, ecx
	jne	SHORT $LN36@WriteHeade
; Line 567
	jmp	SHORT $LN38@WriteHeade
$LN36@WriteHeade:
; Line 568
	mov	edx, DWORD PTR _file$72811[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR [edx]
	push	ecx
	lea	ecx, DWORD PTR _unpackSizes$72806[ebp]
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
; Line 569
	mov	edx, DWORD PTR _file$72811[ebp]
	movzx	eax, BYTE PTR [edx+18]
	push	eax
	lea	ecx, DWORD PTR _digests$72807[ebp]
	call	?Add@?$CRecordVector@_N@@QAEI_N@Z	; CRecordVector<bool>::Add
; Line 570
	mov	ecx, DWORD PTR _file$72811[ebp]
	mov	edx, DWORD PTR [ecx+12]
	push	edx
	lea	ecx, DWORD PTR _digests$72807[ebp+12]
	call	?Add@?$CRecordVector@I@@QAEII@Z		; CRecordVector<unsigned int>::Add
; Line 571
	jmp	SHORT $LN38@WriteHeade
$LN37@WriteHeade:
; Line 573
	lea	eax, DWORD PTR _digests$72807[ebp]
	push	eax
	lea	ecx, DWORD PTR _unpackSizes$72806[ebp]
	push	ecx
	mov	edx, DWORD PTR _db$[ebp]
	push	edx
	mov	eax, DWORD PTR _db$[ebp]
	add	eax, 84					; 00000054H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteSubStreamsInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@ABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WriteSubStreamsInfo
; Line 574
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 575
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _digests$72807[ebp]
	call	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _unpackSizes$72806[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
$LN40@WriteHeade:
; Line 577
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	?IsEmpty@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CFileItem>::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN35@WriteHeade
; Line 579
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 580
	jmp	$LN44@WriteHeade
$LN35@WriteHeade:
; Line 583
	push	5
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 584
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	xor	edx, edx
	push	edx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
; Line 588
	lea	ecx, DWORD PTR _emptyStreamVector$72815[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], 2
; Line 589
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	push	eax
	lea	ecx, DWORD PTR _emptyStreamVector$72815[ebp]
	call	?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize
; Line 590
	mov	DWORD PTR _numEmptyStreams$72816[ebp], 0
; Line 591
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN34@WriteHeade
$LN33@WriteHeade:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN34@WriteHeade:
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN32@WriteHeade
; Line 592
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	movzx	edx, BYTE PTR [eax+16]
	test	edx, edx
	je	SHORT $LN31@WriteHeade
; Line 593
	mov	eax, DWORD PTR _i$[ebp]
	push	eax
	lea	ecx, DWORD PTR _emptyStreamVector$72815[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	BYTE PTR [eax], 0
; Line 594
	jmp	SHORT $LN30@WriteHeade
$LN31@WriteHeade:
; Line 596
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _emptyStreamVector$72815[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	BYTE PTR [eax], 1
; Line 597
	mov	edx, DWORD PTR _numEmptyStreams$72816[ebp]
	add	edx, 1
	mov	DWORD PTR _numEmptyStreams$72816[ebp], edx
$LN30@WriteHeade:
; Line 598
	jmp	SHORT $LN33@WriteHeade
$LN32@WriteHeade:
; Line 599
	cmp	DWORD PTR _numEmptyStreams$72816[ebp], 0
	je	$LN29@WriteHeade
; Line 601
	lea	eax, DWORD PTR _emptyStreamVector$72815[ebp]
	push	eax
	push	14					; 0000000eH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WritePropBoolVector@COutArchive@N7z@NArchive@@AAEXEABV?$CRecordVector@_N@@@Z ; NArchive::N7z::COutArchive::WritePropBoolVector
; Line 603
	lea	ecx, DWORD PTR _emptyFileVector$72823[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _antiVector$72824[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 604
	mov	ecx, DWORD PTR _numEmptyStreams$72816[ebp]
	push	ecx
	lea	ecx, DWORD PTR _emptyFileVector$72823[ebp]
	call	?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize
; Line 605
	mov	edx, DWORD PTR _numEmptyStreams$72816[ebp]
	push	edx
	lea	ecx, DWORD PTR _antiVector$72824[ebp]
	call	?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize
; Line 606
	mov	BYTE PTR _thereAreEmptyFiles$72825[ebp], 0
	mov	BYTE PTR _thereAreAntiItems$72826[ebp], 0
; Line 607
	mov	DWORD PTR _cur$72827[ebp], 0
; Line 608
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN28@WriteHeade
$LN27@WriteHeade:
	mov	eax, DWORD PTR _i$[ebp]
	add	eax, 1
	mov	DWORD PTR _i$[ebp], eax
$LN28@WriteHeade:
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	$LN26@WriteHeade
; Line 610
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR _file$72831[ebp], eax
; Line 611
	mov	edx, DWORD PTR _file$72831[ebp]
	movzx	eax, BYTE PTR [edx+16]
	test	eax, eax
	je	SHORT $LN25@WriteHeade
; Line 612
	jmp	SHORT $LN27@WriteHeade
$LN25@WriteHeade:
; Line 613
	mov	ecx, DWORD PTR _file$72831[ebp]
	movzx	ebx, BYTE PTR [ecx+17]
	neg	ebx
	sbb	ebx, ebx
	add	ebx, 1
	mov	edx, DWORD PTR _cur$72827[ebp]
	push	edx
	lea	ecx, DWORD PTR _emptyFileVector$72823[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	BYTE PTR [eax], bl
; Line 614
	mov	eax, DWORD PTR _file$72831[ebp]
	movzx	ecx, BYTE PTR [eax+17]
	test	ecx, ecx
	jne	SHORT $LN24@WriteHeade
; Line 615
	mov	BYTE PTR _thereAreEmptyFiles$72825[ebp], 1
$LN24@WriteHeade:
; Line 616
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	call	?IsItemAnti@CArchiveDatabaseOut@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CArchiveDatabaseOut::IsItemAnti
	mov	BYTE PTR _isAnti$72834[ebp], al
; Line 617
	mov	eax, DWORD PTR _cur$72827[ebp]
	push	eax
	lea	ecx, DWORD PTR _antiVector$72824[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	cl, BYTE PTR _isAnti$72834[ebp]
	mov	BYTE PTR [eax], cl
; Line 618
	movzx	edx, BYTE PTR _isAnti$72834[ebp]
	test	edx, edx
	je	SHORT $LN23@WriteHeade
; Line 619
	mov	BYTE PTR _thereAreAntiItems$72826[ebp], 1
$LN23@WriteHeade:
; Line 620
	mov	eax, DWORD PTR _cur$72827[ebp]
	add	eax, 1
	mov	DWORD PTR _cur$72827[ebp], eax
; Line 621
	jmp	$LN27@WriteHeade
$LN26@WriteHeade:
; Line 623
	movzx	ecx, BYTE PTR _thereAreEmptyFiles$72825[ebp]
	test	ecx, ecx
	je	SHORT $LN22@WriteHeade
; Line 624
	lea	edx, DWORD PTR _emptyFileVector$72823[ebp]
	push	edx
	push	15					; 0000000fH
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WritePropBoolVector@COutArchive@N7z@NArchive@@AAEXEABV?$CRecordVector@_N@@@Z ; NArchive::N7z::COutArchive::WritePropBoolVector
$LN22@WriteHeade:
; Line 625
	movzx	eax, BYTE PTR _thereAreAntiItems$72826[ebp]
	test	eax, eax
	je	SHORT $LN21@WriteHeade
; Line 626
	lea	ecx, DWORD PTR _antiVector$72824[ebp]
	push	ecx
	push	16					; 00000010H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WritePropBoolVector@COutArchive@N7z@NArchive@@AAEXEABV?$CRecordVector@_N@@@Z ; NArchive::N7z::COutArchive::WritePropBoolVector
$LN21@WriteHeade:
; Line 627
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _antiVector$72824[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _emptyFileVector$72823[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
$LN29@WriteHeade:
; Line 628
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _emptyStreamVector$72815[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
; Line 634
	mov	DWORD PTR _numDefined$72838[ebp], 0
; Line 635
	mov	DWORD PTR _namesDataSize$72839[ebp], 0
; Line 636
	mov	DWORD PTR _i$72840[ebp], 0
	jmp	SHORT $LN20@WriteHeade
$LN19@WriteHeade:
	mov	edx, DWORD PTR _i$72840[ebp]
	add	edx, 1
	mov	DWORD PTR _i$72840[ebp], edx
$LN20@WriteHeade:
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	cmp	DWORD PTR _i$72840[ebp], eax
	jae	SHORT $LN18@WriteHeade
; Line 638
	mov	eax, DWORD PTR _i$72840[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 108				; 0000006cH
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _name$72844[ebp], eax
; Line 639
	mov	ecx, DWORD PTR _name$72844[ebp]
	call	?IsEmpty@UString@@QBE_NXZ		; UString::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	jne	SHORT $LN17@WriteHeade
; Line 640
	mov	edx, DWORD PTR _numDefined$72838[ebp]
	add	edx, 1
	mov	DWORD PTR _numDefined$72838[ebp], edx
$LN17@WriteHeade:
; Line 641
	mov	ecx, DWORD PTR _name$72844[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	mov	ecx, DWORD PTR _namesDataSize$72839[ebp]
	lea	edx, DWORD PTR [ecx+eax*2+2]
	mov	DWORD PTR _namesDataSize$72839[ebp], edx
; Line 642
	jmp	SHORT $LN19@WriteHeade
$LN18@WriteHeade:
; Line 644
	cmp	DWORD PTR _numDefined$72838[ebp], 0
	jbe	$LN16@WriteHeade
; Line 646
	mov	eax, DWORD PTR _namesDataSize$72839[ebp]
	add	eax, 1
	mov	DWORD PTR _namesDataSize$72839[ebp], eax
; Line 647
	push	16					; 00000010H
	mov	ecx, DWORD PTR _namesDataSize$72839[ebp]
	xor	edx, edx
	push	edx
	push	ecx
	call	?GetBigNumberSize@N7z@NArchive@@YGI_K@Z	; NArchive::N7z::GetBigNumberSize
	add	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SkipAlign@COutArchive@N7z@NArchive@@AAEXII@Z ; NArchive::N7z::COutArchive::SkipAlign
; Line 649
	push	17					; 00000011H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 650
	mov	eax, DWORD PTR _namesDataSize$72839[ebp]
	xor	ecx, ecx
	push	ecx
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
; Line 651
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 652
	mov	DWORD PTR _i$72847[ebp], 0
	jmp	SHORT $LN15@WriteHeade
$LN14@WriteHeade:
	mov	edx, DWORD PTR _i$72847[ebp]
	add	edx, 1
	mov	DWORD PTR _i$72847[ebp], edx
$LN15@WriteHeade:
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	cmp	DWORD PTR _i$72847[ebp], eax
	jae	$LN16@WriteHeade
; Line 654
	mov	eax, DWORD PTR _i$72847[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 108				; 0000006cH
	call	??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ; CObjectVector<UString>::operator[]
	mov	DWORD PTR _name$72851[ebp], eax
; Line 655
	mov	DWORD PTR _t$72852[ebp], 0
	jmp	SHORT $LN12@WriteHeade
$LN11@WriteHeade:
	mov	ecx, DWORD PTR _t$72852[ebp]
	add	ecx, 1
	mov	DWORD PTR _t$72852[ebp], ecx
$LN12@WriteHeade:
	mov	ecx, DWORD PTR _name$72851[ebp]
	call	?Len@UString@@QBEIXZ			; UString::Len
	cmp	DWORD PTR _t$72852[ebp], eax
	ja	SHORT $LN10@WriteHeade
; Line 657
	mov	ecx, DWORD PTR _name$72851[ebp]
	call	??BUString@@QBEPB_WXZ			; UString::operator wchar_t const *
	mov	edx, DWORD PTR _t$72852[ebp]
	mov	ax, WORD PTR [eax+edx*2]
	mov	WORD PTR _c$72856[ebp], ax
; Line 658
	movzx	ecx, BYTE PTR _c$72856[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 659
	movzx	edx, WORD PTR _c$72856[ebp]
	sar	edx, 8
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 660
	jmp	SHORT $LN11@WriteHeade
$LN10@WriteHeade:
; Line 661
	jmp	$LN14@WriteHeade
$LN16@WriteHeade:
; Line 665
	push	18					; 00000012H
	mov	eax, DWORD PTR _db$[ebp]
	add	eax, 120				; 00000078H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteUInt64DefVector@COutArchive@N7z@NArchive@@AAEXABUCUInt64DefVector@23@E@Z ; NArchive::N7z::COutArchive::WriteUInt64DefVector
; Line 666
	push	19					; 00000013H
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 144				; 00000090H
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteUInt64DefVector@COutArchive@N7z@NArchive@@AAEXABUCUInt64DefVector@23@E@Z ; NArchive::N7z::COutArchive::WriteUInt64DefVector
; Line 667
	push	20					; 00000014H
	mov	edx, DWORD PTR _db$[ebp]
	add	edx, 168				; 000000a8H
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteUInt64DefVector@COutArchive@N7z@NArchive@@AAEXABUCUInt64DefVector@23@E@Z ; NArchive::N7z::COutArchive::WriteUInt64DefVector
; Line 668
	push	24					; 00000018H
	mov	eax, DWORD PTR _db$[ebp]
	add	eax, 192				; 000000c0H
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteUInt64DefVector@COutArchive@N7z@NArchive@@AAEXABUCUInt64DefVector@23@E@Z ; NArchive::N7z::COutArchive::WriteUInt64DefVector
; Line 672
	lea	ecx, DWORD PTR _boolVector$72859[ebp]
	call	??0?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::CRecordVector<bool>
	mov	DWORD PTR __$EHRec$[ebp+8], 5
; Line 673
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	push	eax
	lea	ecx, DWORD PTR _boolVector$72859[ebp]
	call	?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndSetSize
; Line 674
	mov	DWORD PTR _numDefined$72860[ebp], 0
; Line 675
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN9@WriteHeade
$LN8@WriteHeade:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN9@WriteHeade:
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN7@WriteHeade
; Line 677
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	al, BYTE PTR [eax+19]
	mov	BYTE PTR _defined$72864[ebp], al
; Line 678
	mov	ecx, DWORD PTR _i$[ebp]
	push	ecx
	lea	ecx, DWORD PTR _boolVector$72859[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	dl, BYTE PTR _defined$72864[ebp]
	mov	BYTE PTR [eax], dl
; Line 679
	movzx	eax, BYTE PTR _defined$72864[ebp]
	test	eax, eax
	je	SHORT $LN6@WriteHeade
; Line 680
	mov	ecx, DWORD PTR _numDefined$72860[ebp]
	add	ecx, 1
	mov	DWORD PTR _numDefined$72860[ebp], ecx
$LN6@WriteHeade:
; Line 681
	jmp	SHORT $LN8@WriteHeade
$LN7@WriteHeade:
; Line 682
	cmp	DWORD PTR _numDefined$72860[ebp], 0
	je	SHORT $LN5@WriteHeade
; Line 684
	push	4
	push	21					; 00000015H
	mov	edx, DWORD PTR _numDefined$72860[ebp]
	push	edx
	lea	eax, DWORD PTR _boolVector$72859[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteAlignedBoolHeader@COutArchive@N7z@NArchive@@AAEXABV?$CRecordVector@_N@@IEI@Z ; NArchive::N7z::COutArchive::WriteAlignedBoolHeader
; Line 685
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN4@WriteHeade
$LN3@WriteHeade:
	mov	ecx, DWORD PTR _i$[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$[ebp], ecx
$LN4@WriteHeade:
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	cmp	DWORD PTR _i$[ebp], eax
	jae	SHORT $LN5@WriteHeade
; Line 687
	mov	edx, DWORD PTR _i$[ebp]
	push	edx
	mov	ecx, DWORD PTR _db$[ebp]
	add	ecx, 96					; 00000060H
	call	??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
	mov	DWORD PTR _file$72870[ebp], eax
; Line 688
	mov	eax, DWORD PTR _file$72870[ebp]
	movzx	ecx, BYTE PTR [eax+19]
	test	ecx, ecx
	je	SHORT $LN1@WriteHeade
; Line 689
	mov	edx, DWORD PTR _file$72870[ebp]
	mov	eax, DWORD PTR [edx+8]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteUInt32@COutArchive@N7z@NArchive@@AAEXI@Z ; NArchive::N7z::COutArchive::WriteUInt32
$LN1@WriteHeade:
; Line 690
	jmp	SHORT $LN3@WriteHeade
$LN5@WriteHeade:
; Line 692
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _boolVector$72859[ebp]
	call	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
; Line 776
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 777
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
$LN44@WriteHeade:
; Line 778
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN60@WriteHeade
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	ebx
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
$LN60@WriteHeade:
	DD	6
	DD	$LN59@WriteHeade
$LN59@WriteHeade:
	DD	-44					; ffffffd4H
	DD	12					; 0000000cH
	DD	$LN52@WriteHeade
	DD	-76					; ffffffb4H
	DD	24					; 00000018H
	DD	$LN53@WriteHeade
	DD	-100					; ffffff9cH
	DD	12					; 0000000cH
	DD	$LN54@WriteHeade
	DD	-124					; ffffff84H
	DD	12					; 0000000cH
	DD	$LN55@WriteHeade
	DD	-144					; ffffff70H
	DD	12					; 0000000cH
	DD	$LN56@WriteHeade
	DD	-212					; ffffff2cH
	DD	12					; 0000000cH
	DD	$LN57@WriteHeade
$LN57@WriteHeade:
	DB	98					; 00000062H
	DB	111					; 0000006fH
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN56@WriteHeade:
	DB	97					; 00000061H
	DB	110					; 0000006eH
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN55@WriteHeade:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	70					; 00000046H
	DB	105					; 00000069H
	DB	108					; 0000006cH
	DB	101					; 00000065H
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN54@WriteHeade:
	DB	101					; 00000065H
	DB	109					; 0000006dH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	121					; 00000079H
	DB	83					; 00000053H
	DB	116					; 00000074H
	DB	114					; 00000072H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	109					; 0000006dH
	DB	86					; 00000056H
	DB	101					; 00000065H
	DB	99					; 00000063H
	DB	116					; 00000074H
	DB	111					; 0000006fH
	DB	114					; 00000072H
	DB	0
$LN53@WriteHeade:
	DB	100					; 00000064H
	DB	105					; 00000069H
	DB	103					; 00000067H
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	116					; 00000074H
	DB	115					; 00000073H
	DB	0
$LN52@WriteHeade:
	DB	117					; 00000075H
	DB	110					; 0000006eH
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$0:
	lea	ecx, DWORD PTR _unpackSizes$72806[ebp]
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$1:
	lea	ecx, DWORD PTR _digests$72807[ebp]
	jmp	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$2:
	lea	ecx, DWORD PTR _emptyStreamVector$72815[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$3:
	lea	ecx, DWORD PTR _emptyFileVector$72823[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$4:
	lea	ecx, DWORD PTR _antiVector$72824[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__unwindfunclet$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z$5:
	lea	ecx, DWORD PTR _boolVector$72859[ebp]
	jmp	??1?$CRecordVector@_N@@QAE@XZ		; CRecordVector<bool>::~CRecordVector<bool>
__ehhandler$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-228]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z ENDP ; NArchive::N7z::COutArchive::WriteHeader
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Len@UString@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Len@UString@@QBEIXZ PROC				; UString::Len, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 472
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Len@UString@@QBEIXZ ENDP				; UString::Len
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@UString@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@UString@@QBE_NXZ PROC				; UString::IsEmpty, COMDAT
; _this$ = ecx
; Line 473
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@UString@@QBE_NXZ ENDP				; UString::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??BUString@@QBEPB_WXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??BUString@@QBEPB_WXZ PROC				; UString::operator wchar_t const *, COMDAT
; _this$ = ecx
; Line 476
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??BUString@@QBEPB_WXZ ENDP				; UString::operator wchar_t const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsItemAnti@CArchiveDatabaseOut@N7z@NArchive@@QBE_NI@Z
_TEXT	SEGMENT
tv74 = -8						; size = 4
_this$ = -4						; size = 4
_index$ = 8						; size = 4
?IsItemAnti@CArchiveDatabaseOut@N7z@NArchive@@QBE_NI@Z PROC ; NArchive::N7z::CArchiveDatabaseOut::IsItemAnti, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.h
; Line 206
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _index$[ebp], eax
	jae	SHORT $LN3@IsItemAnti
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	??A?$CRecordVector@_N@@QBEAB_NI@Z	; CRecordVector<bool>::operator[]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN3@IsItemAnti
	mov	DWORD PTR tv74[ebp], 1
	jmp	SHORT $LN4@IsItemAnti
$LN3@IsItemAnti:
	mov	DWORD PTR tv74[ebp], 0
$LN4@IsItemAnti:
	mov	al, BYTE PTR tv74[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?IsItemAnti@CArchiveDatabaseOut@N7z@NArchive@@QBE_NI@Z ENDP ; NArchive::N7z::CArchiveDatabaseOut::IsItemAnti
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@_K@@QAEAA_KI@Z		; CRecordVector<unsigned __int64>::operator[]
PUBLIC	?WriteID@COutArchive@N7z@NArchive@@AAEX_K@Z	; NArchive::N7z::COutArchive::WriteID
PUBLIC	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode
PUBLIC	??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>
PUBLIC	??1COutFolders@N7z@NArchive@@QAE@XZ		; NArchive::N7z::COutFolders::~COutFolders
PUBLIC	??0COutFolders@N7z@NArchive@@QAE@XZ		; NArchive::N7z::COutFolders::COutFolders
PUBLIC	??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::CObjectVector<NArchive::N7z::CFolder>
PUBLIC	??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode
PUBLIC	??1?$CBuffer@E@@QAE@XZ				; CBuffer<unsigned char>::~CBuffer<unsigned char>
PUBLIC	?Init@CWriteBufferLoc@N7z@NArchive@@QAEXPAEI@Z	; NArchive::N7z::CWriteBufferLoc::Init
PUBLIC	??B?$CBuffer@E@@QAEPAEXZ			; CBuffer<unsigned char>::operator unsigned char *
PUBLIC	??0?$CBuffer@E@@QAE@I@Z				; CBuffer<unsigned char>::CBuffer<unsigned char>
PUBLIC	?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream
PUBLIC	?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CCompressionMethodMode::IsEmpty
PUBLIC	?IsEmpty@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CArchiveDatabaseOut::IsEmpty
PUBLIC	?CheckNumFiles@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CArchiveDatabaseOut::CheckNumFiles
PUBLIC	__$ArrayPad$
PUBLIC	?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z ; NArchive::N7z::COutArchive::WriteDatabase
EXTRN	?Flush@COutBuffer@@QAEJXZ:PROC			; COutBuffer::Flush
EXTRN	??1CEncoder@N7z@NArchive@@QAE@XZ:PROC		; NArchive::N7z::CEncoder::~CEncoder
EXTRN	??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z:PROC ; NArchive::N7z::CEncoder::CEncoder
EXTRN	??4UString@@QAEAAV0@ABV0@@Z:PROC		; UString::operator=
EXTRN	?Init@COutBuffer@@QAEXXZ:PROC			; COutBuffer::Init
xdata$x	SEGMENT
__ehfuncinfo$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z DD 019930522H
	DD	07H
	DD	FLAT:__unwindtable$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$1
	DD	01H
	DD	FLAT:__unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$2
	DD	02H
	DD	FLAT:__unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$3
	DD	03H
	DD	FLAT:__unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$4
	DD	04H
	DD	FLAT:__unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$5
	DD	05H
	DD	FLAT:__unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$6
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
_TEXT	SEGMENT
tv230 = -512						; size = 4
tv255 = -508						; size = 4
tv178 = -504						; size = 4
tv168 = -500						; size = 4
$T74301 = -496						; size = 24
$T74300 = -472						; size = 4
$T74299 = -468						; size = 4
$T74296 = -464						; size = 4
$T74295 = -460						; size = 4
___result__$72922 = -456				; size = 4
_h$72921 = -448						; size = 24
___result__$72919 = -420				; size = 4
_i$72915 = -416						; size = 4
___result__$72909 = -412				; size = 4
_outFolders$72908 = -404				; size = 48
_folders$72907 = -348					; size = 12
_packSizes$72905 = -328					; size = 12
_encoder$72898 = -308					; size = 180
_encryptOptions$72897 = -120				; size = 48
_buf$72892 = -64					; size = 8
_encodeHeaders$72885 = -49				; size = 1
_headerSize$ = -48					; size = 8
_headerCRC$ = -40					; size = 4
_headerOffset$ = -32					; size = 8
_this$ = -20						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_db$ = 8						; size = 4
_options$ = 12						; size = 4
_headerOptions$ = 16					; size = 4
?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z PROC ; NArchive::N7z::COutArchive::WriteDatabase
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.cpp
; Line 785
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 500				; 000001f4H
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-512]
	mov	ecx, 125				; 0000007dH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 786
	mov	ecx, DWORD PTR _db$[ebp]
	call	?CheckNumFiles@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CArchiveDatabaseOut::CheckNumFiles
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN17@WriteDatab
; Line 787
	mov	eax, -2147467259			; 80004005H
	jmp	$LN19@WriteDatab
$LN17@WriteDatab:
; Line 792
	mov	ecx, DWORD PTR _db$[ebp]
	call	?IsEmpty@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CArchiveDatabaseOut::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN16@WriteDatab
; Line 794
	mov	DWORD PTR _headerSize$[ebp], 0
	mov	DWORD PTR _headerSize$[ebp+4], 0
; Line 795
	mov	DWORD PTR _headerOffset$[ebp], 0
	mov	DWORD PTR _headerOffset$[ebp+4], 0
; Line 796
	xor	edx, edx
	xor	ecx, ecx
	call	@CrcCalc@8
	mov	DWORD PTR _headerCRC$[ebp], eax
; Line 798
	jmp	$LN15@WriteDatab
$LN16@WriteDatab:
; Line 800
	mov	BYTE PTR _encodeHeaders$72885[ebp], 0
; Line 801
	cmp	DWORD PTR _options$[ebp], 0
	je	SHORT $LN14@WriteDatab
; Line 802
	mov	ecx, DWORD PTR _options$[ebp]
	call	?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ ; NArchive::N7z::CCompressionMethodMode::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN14@WriteDatab
; Line 803
	mov	DWORD PTR _options$[ebp], 0
$LN14@WriteDatab:
; Line 804
	cmp	DWORD PTR _options$[ebp], 0
	je	SHORT $LN12@WriteDatab
; Line 805
	mov	eax, DWORD PTR _options$[ebp]
	movzx	ecx, BYTE PTR [eax+33]
	test	ecx, ecx
	jne	SHORT $LN10@WriteDatab
	mov	edx, DWORD PTR _headerOptions$[ebp]
	movzx	eax, BYTE PTR [edx]
	test	eax, eax
	je	SHORT $LN12@WriteDatab
$LN10@WriteDatab:
; Line 806
	mov	BYTE PTR _encodeHeaders$72885[ebp], 1
$LN12@WriteDatab:
; Line 808
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ; COutBuffer::SetStream
; Line 809
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Init@COutBuffer@@QAEXXZ		; COutBuffer::Init
; Line 810
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+16], -1
; Line 811
	mov	edx, DWORD PTR _this$[ebp]
	mov	al, BYTE PTR _encodeHeaders$72885[ebp]
	mov	BYTE PTR [edx+8], al
; Line 812
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+9], 1
; Line 813
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+12], 0
; Line 814
	lea	eax, DWORD PTR _headerOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z ; NArchive::N7z::COutArchive::WriteHeader
; Line 816
	movzx	edx, BYTE PTR _encodeHeaders$72885[ebp]
	test	edx, edx
	je	$LN9@WriteDatab
; Line 818
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	lea	ecx, DWORD PTR _buf$72892[ebp]
	call	??0?$CBuffer@E@@QAE@I@Z			; CBuffer<unsigned char>::CBuffer<unsigned char>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 819
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+12]
	push	eax
	lea	ecx, DWORD PTR _buf$72892[ebp]
	call	??B?$CBuffer@E@@QAEPAEXZ		; CBuffer<unsigned char>::operator unsigned char *
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?Init@CWriteBufferLoc@N7z@NArchive@@QAEXPAEI@Z ; NArchive::N7z::CWriteBufferLoc::Init
; Line 821
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+8], 0
; Line 822
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+9], 0
; Line 823
	lea	eax, DWORD PTR _headerOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _db$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteHeader@COutArchive@N7z@NArchive@@AAEXABUCArchiveDatabaseOut@23@AA_K@Z ; NArchive::N7z::COutArchive::WriteHeader
; Line 825
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 64					; 00000040H
	call	?GetPos@CWriteBufferLoc@N7z@NArchive@@QBEIXZ ; NArchive::N7z::CWriteBufferLoc::GetPos
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+12], eax
	je	SHORT $LN8@WriteDatab
; Line 826
	mov	DWORD PTR $T74295[ebp], -2147467259	; 80004005H
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buf$72892[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	eax, DWORD PTR $T74295[ebp]
	jmp	$LN19@WriteDatab
$LN8@WriteDatab:
; Line 828
	lea	ecx, DWORD PTR _encryptOptions$72897[ebp]
	call	??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode
	mov	BYTE PTR __$EHRec$[ebp+8], 1
; Line 829
	mov	eax, DWORD PTR _options$[ebp]
	mov	cl, BYTE PTR [eax+33]
	mov	BYTE PTR _encryptOptions$72897[ebp+33], cl
; Line 830
	mov	edx, DWORD PTR _options$[ebp]
	add	edx, 36					; 00000024H
	push	edx
	lea	ecx, DWORD PTR _encryptOptions$72897[ebp+36]
	call	??4UString@@QAEAAV0@ABV0@@Z		; UString::operator=
; Line 831
	mov	eax, DWORD PTR _headerOptions$[ebp]
	movzx	ecx, BYTE PTR [eax]
	test	ecx, ecx
	je	SHORT $LN20@WriteDatab
	mov	edx, DWORD PTR _options$[ebp]
	mov	DWORD PTR tv168[ebp], edx
	jmp	SHORT $LN21@WriteDatab
$LN20@WriteDatab:
	lea	eax, DWORD PTR _encryptOptions$72897[ebp]
	mov	DWORD PTR tv168[ebp], eax
$LN21@WriteDatab:
	mov	ecx, DWORD PTR tv168[ebp]
	mov	DWORD PTR $T74296[ebp], ecx
	mov	edx, DWORD PTR $T74296[ebp]
	push	edx
	lea	ecx, DWORD PTR _encoder$72898[ebp]
	call	??0CEncoder@N7z@NArchive@@QAE@ABUCCompressionMethodMode@12@@Z ; NArchive::N7z::CEncoder::CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 2
; Line 832
	lea	ecx, DWORD PTR _packSizes$72905[ebp]
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 3
; Line 833
	lea	ecx, DWORD PTR _folders$72907[ebp]
	call	??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::CObjectVector<NArchive::N7z::CFolder>
	mov	BYTE PTR __$EHRec$[ebp+8], 4
; Line 834
	lea	ecx, DWORD PTR _outFolders$72908[ebp]
	call	??0COutFolders@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 5
; Line 839
	lea	eax, DWORD PTR _outFolders$72908[ebp]
	push	eax
	lea	ecx, DWORD PTR _folders$72907[ebp]
	push	ecx
	lea	edx, DWORD PTR _packSizes$72905[ebp]
	push	edx
	lea	eax, DWORD PTR _buf$72892[ebp]
	push	eax
	lea	ecx, DWORD PTR _encoder$72898[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?EncodeStream@COutArchive@N7z@NArchive@@AAEJAAVCEncoder@23@ABV?$CBuffer@E@@AAV?$CRecordVector@_K@@AAV?$CObjectVector@UCFolder@N7z@NArchive@@@@AAUCOutFolders@23@@Z ; NArchive::N7z::COutArchive::EncodeStream
	mov	DWORD PTR ___result__$72909[ebp], eax
	cmp	DWORD PTR ___result__$72909[ebp], 0
	je	SHORT $LN7@WriteDatab
	mov	edx, DWORD PTR ___result__$72909[ebp]
	mov	DWORD PTR $T74299[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _outFolders$72908[ebp]
	call	??1COutFolders@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _folders$72907[ebp]
	call	??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _packSizes$72905[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _encoder$72898[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encryptOptions$72897[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buf$72892[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	mov	eax, DWORD PTR $T74299[ebp]
	jmp	$LN19@WriteDatab
$LN7@WriteDatab:
; Line 841
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+9], 1
; Line 843
	lea	ecx, DWORD PTR _folders$72907[ebp]
	call	?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ ; CObjectVector<NArchive::N7z::CFolder>::Size
	test	eax, eax
	jne	SHORT $LN6@WriteDatab
; Line 844
	mov	DWORD PTR $T74300[ebp], 1
	push	OFFSET __TI1H
	lea	ecx, DWORD PTR $T74300[ebp]
	push	ecx
	call	__CxxThrowException@8
$LN6@WriteDatab:
; Line 846
	push	0
	push	23					; 00000017H
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteID@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteID
; Line 847
	lea	ecx, DWORD PTR $T74301[ebp]
	call	??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR tv178[ebp], eax
	mov	edx, DWORD PTR tv178[ebp]
	mov	DWORD PTR tv255[ebp], edx
	mov	BYTE PTR __$EHRec$[ebp+8], 6
	mov	eax, DWORD PTR tv255[ebp]
	push	eax
	lea	ecx, DWORD PTR _packSizes$72905[ebp]
	push	ecx
	mov	edx, DWORD PTR _headerOffset$[ebp+4]
	push	edx
	mov	eax, DWORD PTR _headerOffset$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WritePackInfo@COutArchive@N7z@NArchive@@AAEX_KABV?$CRecordVector@_K@@ABUCUInt32DefVector@23@@Z ; NArchive::N7z::COutArchive::WritePackInfo
	mov	BYTE PTR __$EHRec$[ebp+8], 5
	lea	ecx, DWORD PTR $T74301[ebp]
	call	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
; Line 848
	lea	ecx, DWORD PTR _outFolders$72908[ebp]
	push	ecx
	lea	edx, DWORD PTR _folders$72907[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteUnpackInfo@COutArchive@N7z@NArchive@@AAEXABV?$CObjectVector@UCFolder@N7z@NArchive@@@@ABUCOutFolders@23@@Z ; NArchive::N7z::COutArchive::WriteUnpackInfo
; Line 849
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteByte@COutArchive@N7z@NArchive@@AAEXE@Z ; NArchive::N7z::COutArchive::WriteByte
; Line 850
	mov	DWORD PTR _i$72915[ebp], 0
	jmp	SHORT $LN5@WriteDatab
$LN4@WriteDatab:
	mov	eax, DWORD PTR _i$72915[ebp]
	add	eax, 1
	mov	DWORD PTR _i$72915[ebp], eax
$LN5@WriteDatab:
	lea	ecx, DWORD PTR _packSizes$72905[ebp]
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _i$72915[ebp], eax
	jae	SHORT $LN3@WriteDatab
; Line 851
	mov	ecx, DWORD PTR _i$72915[ebp]
	push	ecx
	lea	ecx, DWORD PTR _packSizes$72905[ebp]
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	edx, DWORD PTR _headerOffset$[ebp]
	add	edx, DWORD PTR [eax]
	mov	ecx, DWORD PTR _headerOffset$[ebp+4]
	adc	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR _headerOffset$[ebp], edx
	mov	DWORD PTR _headerOffset$[ebp+4], ecx
	jmp	SHORT $LN4@WriteDatab
$LN3@WriteDatab:
; Line 852
	mov	BYTE PTR __$EHRec$[ebp+8], 4
	lea	ecx, DWORD PTR _outFolders$72908[ebp]
	call	??1COutFolders@N7z@NArchive@@QAE@XZ
	mov	BYTE PTR __$EHRec$[ebp+8], 3
	lea	ecx, DWORD PTR _folders$72907[ebp]
	call	??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	lea	ecx, DWORD PTR _packSizes$72905[ebp]
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	lea	ecx, DWORD PTR _encoder$72898[ebp]
	call	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	lea	ecx, DWORD PTR _encryptOptions$72897[ebp]
	call	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	lea	ecx, DWORD PTR _buf$72892[ebp]
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
$LN9@WriteDatab:
; Line 853
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?Flush@COutBuffer@@QAEJXZ		; COutBuffer::Flush
	mov	DWORD PTR ___result__$72919[ebp], eax
	cmp	DWORD PTR ___result__$72919[ebp], 0
	je	SHORT $LN2@WriteDatab
	mov	eax, DWORD PTR ___result__$72919[ebp]
	jmp	$LN19@WriteDatab
$LN2@WriteDatab:
; Line 854
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+16]
	xor	eax, -1
	mov	DWORD PTR _headerCRC$[ebp], eax
; Line 855
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?GetProcessedSize@COutBuffer@@QBE_KXZ	; COutBuffer::GetProcessedSize
	mov	DWORD PTR _headerSize$[ebp], eax
	mov	DWORD PTR _headerSize$[ebp+4], edx
$LN15@WriteDatab:
; Line 875
	mov	ecx, DWORD PTR _headerSize$[ebp]
	mov	DWORD PTR _h$72921[ebp+8], ecx
	mov	edx, DWORD PTR _headerSize$[ebp+4]
	mov	DWORD PTR _h$72921[ebp+12], edx
; Line 876
	mov	eax, DWORD PTR _headerCRC$[ebp]
	mov	DWORD PTR _h$72921[ebp+16], eax
; Line 877
	mov	ecx, DWORD PTR _headerOffset$[ebp]
	mov	DWORD PTR _h$72921[ebp], ecx
	mov	edx, DWORD PTR _headerOffset$[ebp+4]
	mov	DWORD PTR _h$72921[ebp+4], edx
; Line 878
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 80					; 00000050H
	call	??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ; CMyComPtr<IOutStream>::operator->
	mov	DWORD PTR tv230[ebp], eax
	mov	esi, esp
	push	0
	push	0
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR tv230[ebp]
	push	eax
	mov	ecx, DWORD PTR tv230[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [edx+16]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	DWORD PTR ___result__$72922[ebp], eax
	cmp	DWORD PTR ___result__$72922[ebp], 0
	je	SHORT $LN1@WriteDatab
	mov	eax, DWORD PTR ___result__$72922[ebp]
	jmp	SHORT $LN19@WriteDatab
$LN1@WriteDatab:
; Line 879
	lea	ecx, DWORD PTR _h$72921[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteStartHeader@COutArchive@N7z@NArchive@@AAEJABUCStartHeader@23@@Z ; NArchive::N7z::COutArchive::WriteStartHeader
$LN19@WriteDatab:
; Line 881
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN39@WriteDatab
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 512				; 00000200H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
	npad	1
$LN39@WriteDatab:
	DD	8
	DD	$LN38@WriteDatab
$LN38@WriteDatab:
	DD	-32					; ffffffe0H
	DD	8
	DD	$LN29@WriteDatab
	DD	-64					; ffffffc0H
	DD	8
	DD	$LN30@WriteDatab
	DD	-120					; ffffff88H
	DD	48					; 00000030H
	DD	$LN31@WriteDatab
	DD	-308					; fffffeccH
	DD	180					; 000000b4H
	DD	$LN32@WriteDatab
	DD	-328					; fffffeb8H
	DD	12					; 0000000cH
	DD	$LN33@WriteDatab
	DD	-348					; fffffea4H
	DD	12					; 0000000cH
	DD	$LN34@WriteDatab
	DD	-404					; fffffe6cH
	DD	48					; 00000030H
	DD	$LN35@WriteDatab
	DD	-448					; fffffe40H
	DD	24					; 00000018H
	DD	$LN36@WriteDatab
$LN36@WriteDatab:
	DB	104					; 00000068H
	DB	0
$LN35@WriteDatab:
	DB	111					; 0000006fH
	DB	117					; 00000075H
	DB	116					; 00000074H
	DB	70					; 00000046H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN34@WriteDatab:
	DB	102					; 00000066H
	DB	111					; 0000006fH
	DB	108					; 0000006cH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	115					; 00000073H
	DB	0
$LN33@WriteDatab:
	DB	112					; 00000070H
	DB	97					; 00000061H
	DB	99					; 00000063H
	DB	107					; 0000006bH
	DB	83					; 00000053H
	DB	105					; 00000069H
	DB	122					; 0000007aH
	DB	101					; 00000065H
	DB	115					; 00000073H
	DB	0
$LN32@WriteDatab:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	111					; 0000006fH
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	0
$LN31@WriteDatab:
	DB	101					; 00000065H
	DB	110					; 0000006eH
	DB	99					; 00000063H
	DB	114					; 00000072H
	DB	121					; 00000079H
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	79					; 0000004fH
	DB	112					; 00000070H
	DB	116					; 00000074H
	DB	105					; 00000069H
	DB	111					; 0000006fH
	DB	110					; 0000006eH
	DB	115					; 00000073H
	DB	0
$LN30@WriteDatab:
	DB	98					; 00000062H
	DB	117					; 00000075H
	DB	102					; 00000066H
	DB	0
$LN29@WriteDatab:
	DB	104					; 00000068H
	DB	101					; 00000065H
	DB	97					; 00000061H
	DB	100					; 00000064H
	DB	101					; 00000065H
	DB	114					; 00000072H
	DB	79					; 0000004fH
	DB	102					; 00000066H
	DB	102					; 00000066H
	DB	115					; 00000073H
	DB	101					; 00000065H
	DB	116					; 00000074H
	DB	0
_TEXT	ENDS
text$x	SEGMENT
__unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$0:
	lea	ecx, DWORD PTR _buf$72892[ebp]
	jmp	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
__unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$1:
	lea	ecx, DWORD PTR _encryptOptions$72897[ebp]
	jmp	??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
__unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$2:
	lea	ecx, DWORD PTR _encoder$72898[ebp]
	jmp	??1CEncoder@N7z@NArchive@@QAE@XZ	; NArchive::N7z::CEncoder::~CEncoder
__unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$3:
	lea	ecx, DWORD PTR _packSizes$72905[ebp]
	jmp	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
__unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$4:
	lea	ecx, DWORD PTR _folders$72907[ebp]
	jmp	??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>
__unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$5:
	lea	ecx, DWORD PTR _outFolders$72908[ebp]
	jmp	??1COutFolders@N7z@NArchive@@QAE@XZ
__unwindfunclet$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z$6:
	lea	ecx, DWORD PTR $T74301[ebp]
	jmp	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
__ehhandler$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-512]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?WriteDatabase@COutArchive@N7z@NArchive@@QAEJABUCArchiveDatabaseOut@23@PBUCCompressionMethodMode@23@ABUCHeaderOptions@23@@Z ENDP ; NArchive::N7z::COutArchive::WriteDatabase
PUBLIC	?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::N7z::CMethodFull>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ PROC ; NArchive::N7z::CCompressionMethodMode::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zcompressionmode.h
; Line 60
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::N7z::CMethodFull>::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@IsEmpty
	mov	ecx, DWORD PTR _this$[ebp]
	movzx	edx, BYTE PTR [ecx+33]
	test	edx, edx
	jne	SHORT $LN3@IsEmpty
	mov	DWORD PTR tv71[ebp], 1
	jmp	SHORT $LN4@IsEmpty
$LN3@IsEmpty:
	mov	DWORD PTR tv71[ebp], 0
$LN4@IsEmpty:
	mov	al, BYTE PTR tv71[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@CCompressionMethodMode@N7z@NArchive@@QBE_NXZ ENDP ; NArchive::N7z::CCompressionMethodMode::IsEmpty
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
PUBLIC	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
PUBLIC	??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>
PUBLIC	??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>
EXTRN	??0UString@@QAE@XZ:PROC				; UString::UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode, COMDAT
; _this$ = ecx
; Line 69
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+24], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+25], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], 1
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+32], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+33], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0UString@@QAE@XZ			; UString::UString
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
__unwindfunclet$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
__ehhandler$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CCompressionMethodMode@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CCompressionMethodMode::CCompressionMethodMode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_stream$ = 8						; size = 4
?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z PROC ; COutBuffer::SetStream, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\common\outbuffer.h
; Line 43
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _stream$[ebp]
	mov	DWORD PTR [eax+20], ecx
	mov	esp, ebp
	pop	ebp
	ret	4
?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z ENDP ; COutBuffer::SetStream
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Init@CWriteBufferLoc@N7z@NArchive@@QAEXPAEI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_data$ = 8						; size = 4
_size$ = 12						; size = 4
?Init@CWriteBufferLoc@N7z@NArchive@@QAEXPAEI@Z PROC	; NArchive::N7z::CWriteBufferLoc::Init, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.h
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 26
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _data$[ebp]
	mov	DWORD PTR [eax], ecx
; Line 27
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
; Line 28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+8], 0
; Line 29
	mov	esp, ebp
	pop	ebp
	ret	8
?Init@CWriteBufferLoc@N7z@NArchive@@QAEXPAEI@Z ENDP	; NArchive::N7z::CWriteBufferLoc::Init
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CRecordVector@I@@QBE_NXZ		; CRecordVector<unsigned int>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv88 = -8						; size = 4
_this$ = -4						; size = 4
?IsEmpty@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ PROC	; NArchive::N7z::CArchiveDatabaseOut::IsEmpty, COMDAT
; _this$ = ecx
; Line 187
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 192
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 48					; 00000030H
	call	?IsEmpty@?$CRecordVector@_K@@QBE_NXZ	; CRecordVector<unsigned __int64>::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@IsEmpty@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	?IsEmpty@?$CRecordVector@I@@QBE_NXZ	; CRecordVector<unsigned int>::IsEmpty
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@IsEmpty@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 84					; 00000054H
	call	?IsEmpty@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBE_NXZ ; CObjectVector<NArchive::N7z::CFolder>::IsEmpty
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@IsEmpty@2
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	?IsEmpty@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBE_NXZ ; CRecordVector<NArchive::N7z::CFileItem>::IsEmpty
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@IsEmpty@2
	mov	DWORD PTR tv88[ebp], 1
	jmp	SHORT $LN4@IsEmpty@2
$LN3@IsEmpty@2:
	mov	DWORD PTR tv88[ebp], 0
$LN4@IsEmpty@2:
	mov	al, BYTE PTR tv88[ebp]
; Line 193
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ ENDP	; NArchive::N7z::CArchiveDatabaseOut::IsEmpty
_TEXT	ENDS
PUBLIC	?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt64DefVector::CheckSize
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?CheckNumFiles@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ
_TEXT	SEGMENT
tv131 = -12						; size = 4
_size$ = -8						; size = 4
_this$ = -4						; size = 4
?CheckNumFiles@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ PROC ; NArchive::N7z::CArchiveDatabaseOut::CheckNumFiles, COMDAT
; _this$ = ecx
; Line 196
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 197
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	mov	DWORD PTR _size$[ebp], eax
; Line 203
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt64DefVector::CheckSize
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@CheckNumFi
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt64DefVector::CheckSize
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN3@CheckNumFi
	mov	ecx, DWORD PTR _size$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt64DefVector::CheckSize
	movzx	edx, al
	test	edx, edx
	je	SHORT $LN3@CheckNumFi
	mov	eax, DWORD PTR _size$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	call	?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z ; NArchive::N7z::CUInt64DefVector::CheckSize
	movzx	ecx, al
	test	ecx, ecx
	je	SHORT $LN3@CheckNumFi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _size$[ebp], eax
	je	SHORT $LN4@CheckNumFi
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	test	eax, eax
	jne	SHORT $LN3@CheckNumFi
$LN4@CheckNumFi:
	mov	DWORD PTR tv131[ebp], 1
	jmp	SHORT $LN5@CheckNumFi
$LN3@CheckNumFi:
	mov	DWORD PTR tv131[ebp], 0
$LN5@CheckNumFi:
	mov	al, BYTE PTR tv131[ebp]
; Line 204
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?CheckNumFiles@CArchiveDatabaseOut@N7z@NArchive@@QBE_NXZ ENDP ; NArchive::N7z::CArchiveDatabaseOut::CheckNumFiles
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z
_TEXT	SEGMENT
tv70 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z PROC	; NArchive::N7z::CUInt64DefVector::CheckSize, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 146
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	eax, DWORD PTR _size$[ebp]
	je	SHORT $LN3@CheckSize
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	test	eax, eax
	je	SHORT $LN3@CheckSize
	mov	DWORD PTR tv70[ebp], 0
	jmp	SHORT $LN4@CheckSize
$LN3@CheckSize:
	mov	DWORD PTR tv70[ebp], 1
$LN4@CheckSize:
	mov	al, BYTE PTR tv70[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?CheckSize@CUInt64DefVector@N7z@NArchive@@QBE_NI@Z ENDP	; NArchive::N7z::CUInt64DefVector::CheckSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?WriteID@COutArchive@N7z@NArchive@@AAEX_K@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_value$ = 8						; size = 8
?WriteID@COutArchive@N7z@NArchive@@AAEX_K@Z PROC	; NArchive::N7z::COutArchive::WriteID, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.h
; Line 240
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _value$[ebp+4]
	push	eax
	mov	ecx, DWORD PTR _value$[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?WriteNumber@COutArchive@N7z@NArchive@@AAEX_K@Z ; NArchive::N7z::COutArchive::WriteNumber
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?WriteID@COutArchive@N7z@NArchive@@AAEX_K@Z ENDP	; NArchive::N7z::COutArchive::WriteID
_TEXT	ENDS
PUBLIC	??1UString@@QAE@XZ				; UString::~UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ PROC	; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1UString@@QAE@XZ			; UString::~UString
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
__unwindfunclet$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	jmp	??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
__ehhandler$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CCompressionMethodMode@N7z@NArchive@@QAE@XZ ENDP	; NArchive::N7z::CCompressionMethodMode::~CCompressionMethodMode
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1UString@@QAE@XZ
_TEXT	SEGMENT
$T74369 = -8						; size = 4
_this$ = -4						; size = 4
??1UString@@QAE@XZ PROC					; UString::~UString, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mystring.h
; Line 470
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74369[ebp], ecx
	mov	edx, DWORD PTR $T74369[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1UString@@QAE@XZ ENDP					; UString::~UString
_TEXT	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0COutFolders@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??0COutFolders@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0COutFolders@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0COutFolders@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0COutFolders@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::COutFolders::COutFolders, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0COutFolders@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??0?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::CRecordVector<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??0?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$??0COutFolders@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??0COutFolders@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0COutFolders@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0COutFolders@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::COutFolders::COutFolders
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1COutFolders@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??1COutFolders@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1COutFolders@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1COutFolders@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1COutFolders@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::COutFolders::~COutFolders, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1COutFolders@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 36					; 00000024H
	call	??1?$CRecordVector@_K@@QAE@XZ		; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	call	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CUInt32DefVector@N7z@NArchive@@QAE@XZ
__unwindfunclet$??1COutFolders@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 24					; 00000018H
	jmp	??1?$CRecordVector@I@@QAE@XZ		; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
__ehhandler$??1COutFolders@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1COutFolders@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1COutFolders@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::COutFolders::~COutFolders
PUBLIC	?SetItem@CUInt64DefVector@N7z@NArchive@@QAEXI_N_K@Z ; NArchive::N7z::CUInt64DefVector::SetItem
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_defined$ = 12						; size = 1
_value$ = 16						; size = 8
?SetItem@CUInt64DefVector@N7z@NArchive@@QAEXI_N_K@Z PROC ; NArchive::N7z::CUInt64DefVector::SetItem
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.cpp
; Line 884
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN5@SetItem:
; Line 885
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _index$[ebp], eax
	jb	SHORT $LN4@SetItem
; Line 886
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@_N@@QAEI_N@Z	; CRecordVector<bool>::Add
	jmp	SHORT $LN5@SetItem
$LN4@SetItem:
; Line 887
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	cl, BYTE PTR _defined$[ebp]
	mov	BYTE PTR [eax], cl
; Line 888
	movzx	edx, BYTE PTR _defined$[ebp]
	test	edx, edx
	jne	SHORT $LN2@SetItem
; Line 889
	jmp	SHORT $LN6@SetItem
$LN2@SetItem:
; Line 890
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Size@?$CRecordVector@_K@@QBEIXZ	; CRecordVector<unsigned __int64>::Size
	cmp	DWORD PTR _index$[ebp], eax
	jb	SHORT $LN1@SetItem
; Line 891
	push	0
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	?Add@?$CRecordVector@_K@@QAEI_K@Z	; CRecordVector<unsigned __int64>::Add
	jmp	SHORT $LN2@SetItem
$LN1@SetItem:
; Line 892
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 12					; 0000000cH
	call	??A?$CRecordVector@_K@@QAEAA_KI@Z	; CRecordVector<unsigned __int64>::operator[]
	mov	ecx, DWORD PTR _value$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _value$[ebp+4]
	mov	DWORD PTR [eax+4], edx
$LN6@SetItem:
; Line 893
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
?SetItem@CUInt64DefVector@N7z@NArchive@@QAEXI_N_K@Z ENDP ; NArchive::N7z::CUInt64DefVector::SetItem
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEIUCFileItem@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CFileItem>::Add
PUBLIC	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
PUBLIC	?SetItem_Anti@CArchiveDatabaseOut@N7z@NArchive@@QAEXI_N@Z ; NArchive::N7z::CArchiveDatabaseOut::SetItem_Anti
PUBLIC	?AddFile@CArchiveDatabaseOut@N7z@NArchive@@QAEXABUCFileItem@23@ABUCFileItem2@23@ABVUString@@@Z ; NArchive::N7z::CArchiveDatabaseOut::AddFile
; Function compile flags: /Odtp /RTCsu
_TEXT	SEGMENT
_index$ = -8						; size = 4
_this$ = -4						; size = 4
_file$ = 8						; size = 4
_file2$ = 12						; size = 4
_name$ = 16						; size = 4
?AddFile@CArchiveDatabaseOut@N7z@NArchive@@QAEXABUCFileItem@23@ABUCFileItem2@23@ABVUString@@@Z PROC ; NArchive::N7z::CArchiveDatabaseOut::AddFile
; _this$ = ecx
; Line 896
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 897
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ; CRecordVector<NArchive::N7z::CFileItem>::Size
	mov	DWORD PTR _index$[ebp], eax
; Line 898
	mov	eax, DWORD PTR _file2$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	mov	eax, DWORD PTR _file2$[ebp]
	movzx	ecx, BYTE PTR [eax+32]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 120				; 00000078H
	call	?SetItem@CUInt64DefVector@N7z@NArchive@@QAEXI_N_K@Z ; NArchive::N7z::CUInt64DefVector::SetItem
; Line 899
	mov	eax, DWORD PTR _file2$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR [eax+8]
	push	edx
	mov	eax, DWORD PTR _file2$[ebp]
	movzx	ecx, BYTE PTR [eax+33]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 144				; 00000090H
	call	?SetItem@CUInt64DefVector@N7z@NArchive@@QAEXI_N_K@Z ; NArchive::N7z::CUInt64DefVector::SetItem
; Line 900
	mov	eax, DWORD PTR _file2$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	push	ecx
	mov	edx, DWORD PTR [eax+16]
	push	edx
	mov	eax, DWORD PTR _file2$[ebp]
	movzx	ecx, BYTE PTR [eax+34]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 168				; 000000a8H
	call	?SetItem@CUInt64DefVector@N7z@NArchive@@QAEXI_N_K@Z ; NArchive::N7z::CUInt64DefVector::SetItem
; Line 901
	mov	eax, DWORD PTR _file2$[ebp]
	mov	ecx, DWORD PTR [eax+28]
	push	ecx
	mov	edx, DWORD PTR [eax+24]
	push	edx
	mov	eax, DWORD PTR _file2$[ebp]
	movzx	ecx, BYTE PTR [eax+35]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 192				; 000000c0H
	call	?SetItem@CUInt64DefVector@N7z@NArchive@@QAEXI_N_K@Z ; NArchive::N7z::CUInt64DefVector::SetItem
; Line 902
	mov	eax, DWORD PTR _file2$[ebp]
	movzx	ecx, BYTE PTR [eax+36]
	push	ecx
	mov	edx, DWORD PTR _index$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?SetItem_Anti@CArchiveDatabaseOut@N7z@NArchive@@QAEXI_N@Z ; NArchive::N7z::CArchiveDatabaseOut::SetItem_Anti
; Line 904
	mov	eax, DWORD PTR _name$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 108				; 0000006cH
	call	?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ; CObjectVector<UString>::Add
; Line 905
	mov	ecx, DWORD PTR _file$[ebp]
	sub	esp, 24					; 00000018H
	mov	edx, esp
	mov	eax, DWORD PTR [ecx]
	mov	DWORD PTR [edx], eax
	mov	eax, DWORD PTR [ecx+4]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR [ecx+8]
	mov	DWORD PTR [edx+8], eax
	mov	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR [edx+12], eax
	mov	eax, DWORD PTR [ecx+16]
	mov	DWORD PTR [edx+16], eax
	mov	ecx, DWORD PTR [ecx+20]
	mov	DWORD PTR [edx+20], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 96					; 00000060H
	call	?Add@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEIUCFileItem@N7z@NArchive@@@Z ; CRecordVector<NArchive::N7z::CFileItem>::Add
; Line 906
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
?AddFile@CArchiveDatabaseOut@N7z@NArchive@@QAEXABUCFileItem@23@ABUCFileItem2@23@ABVUString@@@Z ENDP ; NArchive::N7z::CArchiveDatabaseOut::AddFile
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?SetItem_Anti@CArchiveDatabaseOut@N7z@NArchive@@QAEXI_N@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
_isAnti$ = 12						; size = 1
?SetItem_Anti@CArchiveDatabaseOut@N7z@NArchive@@QAEXI_N@Z PROC ; NArchive::N7z::CArchiveDatabaseOut::SetItem_Anti, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zout.h
; Line 210
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
$LN2@SetItem_An:
; Line 211
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	?Size@?$CRecordVector@_N@@QBEIXZ	; CRecordVector<bool>::Size
	cmp	DWORD PTR _index$[ebp], eax
	jb	SHORT $LN1@SetItem_An
; Line 212
	push	0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	?Add@?$CRecordVector@_N@@QAEI_N@Z	; CRecordVector<bool>::Add
	jmp	SHORT $LN2@SetItem_An
$LN1@SetItem_An:
; Line 213
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 216				; 000000d8H
	call	??A?$CRecordVector@_N@@QAEAA_NI@Z	; CRecordVector<bool>::operator[]
	mov	cl, BYTE PTR _isAnti$[ebp]
	mov	BYTE PTR [eax], cl
; Line 214
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?SetItem_Anti@CArchiveDatabaseOut@N7z@NArchive@@QAEXI_N@Z ENDP ; NArchive::N7z::CArchiveDatabaseOut::SetItem_Anti
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CBuffer@E@@QAE@I@Z
_TEXT	SEGMENT
$T74398 = -8						; size = 4
_this$ = -4						; size = 4
_size$ = 8						; size = 4
??0?$CBuffer@E@@QAE@I@Z PROC				; CBuffer<unsigned char>::CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 25
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _size$[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74398[ebp], eax
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR $T74398[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _size$[ebp]
	mov	DWORD PTR [edx+4], eax
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CBuffer@E@@QAE@I@Z ENDP				; CBuffer<unsigned char>::CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CBuffer@E@@QAE@XZ
_TEXT	SEGMENT
$T74401 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CBuffer@E@@QAE@XZ PROC				; CBuffer<unsigned char>::~CBuffer<unsigned char>, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74401[ebp], ecx
	mov	edx, DWORD PTR $T74401[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CBuffer@E@@QAE@XZ ENDP				; CBuffer<unsigned char>::~CBuffer<unsigned char>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QAEPAEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QAEPAEXZ PROC				; CBuffer<unsigned char>::operator unsigned char *, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QAEPAEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CBuffer@E@@QBEPBEXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CBuffer@E@@QBEPBEXZ PROC				; CBuffer<unsigned char>::operator unsigned char const *, COMDAT
; _this$ = ecx
; Line 40
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CBuffer@E@@QBEPBEXZ ENDP				; CBuffer<unsigned char>::operator unsigned char const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CBuffer@E@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CBuffer@E@@QBEIXZ PROC				; CBuffer<unsigned char>::Size, COMDAT
; _this$ = ecx
; Line 41
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CBuffer@E@@QBEIXZ ENDP				; CBuffer<unsigned char>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 18
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UIUnknown@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ PROC			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ ENDP			; CMyComPtr<IUnknown>::~CMyComPtr<IUnknown>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z PROC ; CMyComPtr<IUnknown>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z ENDP ; CMyComPtr<IUnknown>::operator=
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ PROC ; CMyComPtr<ISequentialOutStream>::Release, COMDAT
; _this$ = ecx
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@2
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@2:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UISequentialOutStream@@@@QAEXXZ ENDP ; CMyComPtr<ISequentialOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ PROC ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ ENDP ; CMyComPtr<ISequentialOutStream>::operator ISequentialOutStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z PROC ; CMyComPtr<ISequentialOutStream>::operator=, COMDAT
; _this$ = ecx
; Line 28
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 29
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@operator@2
; Line 30
	mov	eax, DWORD PTR _p$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	esi, esp
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	eax, DWORD PTR [ecx+4]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@operator@2:
; Line 31
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx], 0
	je	SHORT $LN1@operator@2
; Line 32
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	mov	esi, esp
	push	edx
	mov	ecx, DWORD PTR [eax+8]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN1@operator@2:
; Line 33
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$[ebp]
	mov	DWORD PTR [edx], eax
; Line 34
	mov	eax, DWORD PTR _p$[ebp]
; Line 35
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z ENDP ; CMyComPtr<ISequentialOutStream>::operator=
_TEXT	ENDS
PUBLIC	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ PROC ; CObjectVector<NArchive::N7z::CMethodFull>::IsEmpty, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QBE_NXZ ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::IsEmpty
_TEXT	ENDS
PUBLIC	??0?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::CObjectVector<NArchive::N7z::CMethodFull>
_TEXT	ENDS
PUBLIC	??1?$CRecordVector@PAX@@QAE@XZ			; CRecordVector<void *>::~CRecordVector<void *>
PUBLIC	??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z		; NArchive::N7z::CMethodFull::`scalar deleting destructor'
PUBLIC	??A?$CRecordVector@PAX@@QAEAAPAXI@Z		; CRecordVector<void *>::operator[]
PUBLIC	?Size@?$CRecordVector@PAX@@QBEIXZ		; CRecordVector<void *>::Size
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T74428 = -28						; size = 4
$T74427 = -24						; size = 4
_i$73016 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ PROC ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$73016[ebp], eax
$LN2@CObjectVec:
	cmp	DWORD PTR _i$73016[ebp], 0
	je	SHORT $LN3@CObjectVec
; Line 489
	mov	eax, DWORD PTR _i$73016[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$73016[ebp], eax
	mov	ecx, DWORD PTR _i$73016[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T74428[ebp], edx
	mov	eax, DWORD PTR $T74428[ebp]
	mov	DWORD PTR $T74427[ebp], eax
	cmp	DWORD PTR $T74427[ebp], 0
	je	SHORT $LN5@CObjectVec
	push	1
	mov	ecx, DWORD PTR $T74427[ebp]
	call	??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec
$LN5@CObjectVec:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec:
	jmp	SHORT $LN2@CObjectVec
$LN3@CObjectVec:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCMethodFull@N7z@NArchive@@@@QAE@XZ ENDP ; CObjectVector<NArchive::N7z::CMethodFull>::~CObjectVector<NArchive::N7z::CMethodFull>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ PROC	; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ENDP	; CRecordVector<NArchive::N7z::CBond2>::CRecordVector<NArchive::N7z::CBond2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T74442 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ PROC	; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74442[ebp], ecx
	mov	edx, DWORD PTR $T74442[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@UCBond2@N7z@NArchive@@@@QAE@XZ ENDP	; CRecordVector<NArchive::N7z::CBond2>::~CRecordVector<NArchive::N7z::CBond2>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_p$ = 8							; size = 4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z PROC ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 19
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _p$[ebp]
	mov	DWORD PTR [eax], ecx
	cmp	DWORD PTR _p$[ebp], 0
	je	SHORT $LN2@CMyComPtr@2
	mov	edx, DWORD PTR _p$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	esi, esp
	mov	ecx, DWORD PTR _p$[ebp]
	push	ecx
	mov	edx, DWORD PTR [eax+4]
	call	edx
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z ENDP ; CMyComPtr<ISequentialInStream>::CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ PROC	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@CMyComPtr@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
$LN2@CMyComPtr@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ ENDP	; CMyComPtr<ISequentialInStream>::~CMyComPtr<ISequentialInStream>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ PROC ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *, COMDAT
; _this$ = ecx
; Line 23
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ ENDP ; CMyComPtr<ISequentialInStream>::operator ISequentialInStream *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::CRecordVector<unsigned int>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@I@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@I@@QBEIXZ PROC			; CRecordVector<unsigned int>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@I@@QBEIXZ ENDP			; CRecordVector<unsigned int>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@I@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@I@@QBE_NXZ PROC		; CRecordVector<unsigned int>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@I@@QBE_NXZ ENDP		; CRecordVector<unsigned int>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@I@@QAE@XZ
_TEXT	SEGMENT
$T74457 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@I@@QAE@XZ PROC			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74457[ebp], ecx
	mov	edx, DWORD PTR $T74457[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@I@@QAE@XZ ENDP			; CRecordVector<unsigned int>::~CRecordVector<unsigned int>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ	; CRecordVector<unsigned int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@I@@QAEII@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@I@@QAEII@Z PROC			; CRecordVector<unsigned int>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ; CRecordVector<unsigned int>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@I@@QAEII@Z ENDP			; CRecordVector<unsigned int>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@I@@QBEABII@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@I@@QBEABII@Z PROC			; CRecordVector<unsigned int>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@I@@QBEABII@Z ENDP			; CRecordVector<unsigned int>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::CRecordVector<unsigned __int64>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@_K@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@_K@@QBEIXZ PROC			; CRecordVector<unsigned __int64>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@_K@@QBEIXZ ENDP			; CRecordVector<unsigned __int64>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@_K@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@_K@@QBE_NXZ PROC		; CRecordVector<unsigned __int64>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@_K@@QBE_NXZ ENDP		; CRecordVector<unsigned __int64>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_K@@QAE@XZ
_TEXT	SEGMENT
$T74470 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_K@@QAE@XZ PROC			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74470[ebp], ecx
	mov	edx, DWORD PTR $T74470[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_K@@QAE@XZ ENDP			; CRecordVector<unsigned __int64>::~CRecordVector<unsigned __int64>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@_K@@QAEI_K@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 8
?Add@?$CRecordVector@_K@@QAEI_K@Z PROC			; CRecordVector<unsigned __int64>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ; CRecordVector<unsigned __int64>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*8], edx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+ecx*8+4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
?Add@?$CRecordVector@_K@@QAEI_K@Z ENDP			; CRecordVector<unsigned __int64>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QBEAB_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QBEAB_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QBEAB_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_K@@QAEAA_KI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_K@@QAEAA_KI@Z PROC			; CRecordVector<unsigned __int64>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*8]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_K@@QAEAA_KI@Z ENDP			; CRecordVector<unsigned __int64>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::CRecordVector<bool>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@_N@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@_N@@QBEIXZ PROC			; CRecordVector<bool>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@_N@@QBEIXZ ENDP			; CRecordVector<bool>::Size
_TEXT	ENDS
PUBLIC	?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z	; CRecordVector<bool>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_newSize$ = 8						; size = 4
?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z PROC	; CRecordVector<bool>::ClearAndSetSize, COMDAT
; _this$ = ecx
; Line 87
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 88
	mov	eax, DWORD PTR _newSize$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z ; CRecordVector<bool>::ClearAndReserve
; Line 89
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newSize$[ebp]
	mov	DWORD PTR [ecx+4], edx
; Line 90
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndSetSize@?$CRecordVector@_N@@QAEXI@Z ENDP	; CRecordVector<bool>::ClearAndSetSize
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@_N@@QAE@XZ
_TEXT	SEGMENT
$T74485 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@_N@@QAE@XZ PROC			; CRecordVector<bool>::~CRecordVector<bool>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74485[ebp], ecx
	mov	edx, DWORD PTR $T74485[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@_N@@QAE@XZ ENDP			; CRecordVector<bool>::~CRecordVector<bool>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ	; CRecordVector<bool>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@_N@@QAEI_N@Z
_TEXT	SEGMENT
tv71 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 1
?Add@?$CRecordVector@_N@@QAEI_N@Z PROC			; CRecordVector<bool>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ; CRecordVector<bool>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	mov	dl, BYTE PTR _item$[ebp]
	mov	BYTE PTR [ecx+eax], dl
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv71[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv71[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@_N@@QAEI_N@Z ENDP			; CRecordVector<bool>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_N@@QBEAB_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_N@@QBEAB_NI@Z PROC			; CRecordVector<bool>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _index$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_N@@QBEAB_NI@Z ENDP			; CRecordVector<bool>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@_N@@QAEAA_NI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@_N@@QAEAA_NI@Z PROC			; CRecordVector<bool>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	add	eax, DWORD PTR _index$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@_N@@QAEAA_NI@Z ENDP			; CRecordVector<bool>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ PROC ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 206
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEPBUCCoderInfo@N7z@NArchive@@XZ ENDP ; CObjArray2<NArchive::N7z::CCoderInfo>::operator NArchive::N7z::CCoderInfo const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ PROC ; CObjArray2<NArchive::N7z::CCoderInfo>::Size, COMDAT
; _this$ = ecx
; Line 208
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QBEIXZ ENDP ; CObjArray2<NArchive::N7z::CCoderInfo>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ PROC ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@UCBond@N7z@NArchive@@@@QBEPBUCBond@N7z@NArchive@@XZ ENDP ; CObjArray2<NArchive::N7z::CBond>::operator NArchive::N7z::CBond const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ PROC	; CObjArray2<NArchive::N7z::CBond>::Size, COMDAT
; _this$ = ecx
; Line 208
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjArray2@UCBond@N7z@NArchive@@@@QBEIXZ ENDP	; CObjArray2<NArchive::N7z::CBond>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??B?$CObjArray2@I@@QBEPBIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??B?$CObjArray2@I@@QBEPBIXZ PROC			; CObjArray2<unsigned int>::operator unsigned int const *, COMDAT
; _this$ = ecx
; Line 206
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??B?$CObjArray2@I@@QBEPBIXZ ENDP			; CObjArray2<unsigned int>::operator unsigned int const *
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjArray2@I@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjArray2@I@@QBEIXZ PROC			; CObjArray2<unsigned int>::Size, COMDAT
; _this$ = ecx
; Line 208
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjArray2@I@@QBEIXZ ENDP			; CObjArray2<unsigned int>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ PROC ; CObjectVector<NArchive::N7z::CFolder>::Size, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 415
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEIXZ ENDP ; CObjectVector<NArchive::N7z::CFolder>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBE_NXZ PROC ; CObjectVector<NArchive::N7z::CFolder>::IsEmpty, COMDAT
; _this$ = ecx
; Line 416
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ	; CRecordVector<void *>::IsEmpty
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CObjectVector@UCFolder@N7z@NArchive@@@@QBE_NXZ ENDP ; CObjectVector<NArchive::N7z::CFolder>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ PROC	; CObjectVector<NArchive::N7z::CFolder>::CObjectVector<NArchive::N7z::CFolder>, COMDAT
; _this$ = ecx
; Line 421
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::CRecordVector<void *>
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ENDP	; CObjectVector<NArchive::N7z::CFolder>::CObjectVector<NArchive::N7z::CFolder>
_TEXT	ENDS
PUBLIC	??A?$CRecordVector@PAX@@QBEABQAXI@Z		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??A?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEABUCFolder@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEABUCFolder@N7z@NArchive@@I@Z PROC ; CObjectVector<NArchive::N7z::CFolder>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@UCFolder@N7z@NArchive@@@@QBEABUCFolder@N7z@NArchive@@I@Z ENDP ; CObjectVector<NArchive::N7z::CFolder>::operator[]
_TEXT	ENDS
PUBLIC	?Add@?$CRecordVector@PAX@@QAEIQAX@Z		; CRecordVector<void *>::Add
PUBLIC	??0CFolder@N7z@NArchive@@QAE@XZ			; NArchive::N7z::CFolder::CFolder
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ$0
__ehfuncinfo$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
_TEXT	SEGMENT
tv71 = -32						; size = 4
$T74516 = -28						; size = 4
$T74515 = -24						; size = 4
_p$ = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ PROC ; CObjectVector<NArchive::N7z::CFolder>::AddNew, COMDAT
; _this$ = ecx
; Line 464
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 465
	push	24					; 00000018H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74516[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T74516[ebp], 0
	je	SHORT $LN3@AddNew
	mov	ecx, DWORD PTR $T74516[ebp]
	call	??0CFolder@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFolder::CFolder
	mov	DWORD PTR tv71[ebp], eax
	jmp	SHORT $LN4@AddNew
$LN3@AddNew:
	mov	DWORD PTR tv71[ebp], 0
$LN4@AddNew:
	mov	eax, DWORD PTR tv71[ebp]
	mov	DWORD PTR $T74515[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T74515[ebp]
	mov	DWORD PTR _p$[ebp], ecx
; Line 466
	mov	edx, DWORD PTR _p$[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
; Line 467
	mov	eax, DWORD PTR _p$[ebp]
; Line 468
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ$0:
	mov	eax, DWORD PTR $T74516[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?AddNew@?$CObjectVector@UCFolder@N7z@NArchive@@@@QAEAAUCFolder@N7z@NArchive@@XZ ENDP ; CObjectVector<NArchive::N7z::CFolder>::AddNew
PUBLIC	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ	; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
PUBLIC	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
PUBLIC	??0?$CObjArray2@I@@QAE@XZ			; CObjArray2<unsigned int>::CObjArray2<unsigned int>
PUBLIC	??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ	; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>
PUBLIC	??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
xdata$x	SEGMENT
__unwindtable$??0CFolder@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??0CFolder@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??0CFolder@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??0CFolder@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??0CFolder@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFolder::CFolder, COMDAT
; _this$ = ecx
; Line 43
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??0?$CObjArray2@I@@QAE@XZ		; CObjArray2<unsigned int>::CObjArray2<unsigned int>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
__unwindfunclet$??0CFolder@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
__ehhandler$??0CFolder@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CFolder@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CFolder@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFolder::CFolder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ PROC	; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ENDP	; CObjArray2<NArchive::N7z::CCoderInfo>::CObjArray2<NArchive::N7z::CCoderInfo>
_TEXT	ENDS
PUBLIC	??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z		; NArchive::N7z::CCoderInfo::`vector deleting destructor'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv68 = -16						; size = 4
$T74542 = -12						; size = 4
$T74541 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ PROC	; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74542[ebp], ecx
	mov	edx, DWORD PTR $T74542[ebp]
	mov	DWORD PTR $T74541[ebp], edx
	cmp	DWORD PTR $T74541[ebp], 0
	je	SHORT $LN3@CObjArray2
	push	3
	mov	ecx, DWORD PTR $T74541[ebp]
	call	??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv68[ebp], eax
	jmp	SHORT $LN1@CObjArray2
$LN3@CObjArray2:
	mov	DWORD PTR tv68[ebp], 0
$LN1@CObjArray2:
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ENDP	; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ PROC	; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>, COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ENDP	; CObjArray2<NArchive::N7z::CBond>::CObjArray2<NArchive::N7z::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
$T74549 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ PROC	; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>, COMDAT
; _this$ = ecx
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74549[ebp], ecx
	mov	edx, DWORD PTR $T74549[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ENDP	; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CObjArray2@I@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CObjArray2@I@@QAE@XZ PROC				; CObjArray2<unsigned int>::CObjArray2<unsigned int>, COMDAT
; _this$ = ecx
; Line 176
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CObjArray2@I@@QAE@XZ ENDP				; CObjArray2<unsigned int>::CObjArray2<unsigned int>
_TEXT	ENDS
PUBLIC	??_GCFolder@N7z@NArchive@@QAEPAXI@Z		; NArchive::N7z::CFolder::`scalar deleting destructor'
;	COMDAT xdata$x
; File c:\workspace\7z1505-src\cpp\common\myvector.h
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T74555 = -28						; size = 4
$T74554 = -24						; size = 4
_i$73335 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ PROC	; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$73335[ebp], eax
$LN2@CObjectVec@2:
	cmp	DWORD PTR _i$73335[ebp], 0
	je	SHORT $LN3@CObjectVec@2
; Line 489
	mov	eax, DWORD PTR _i$73335[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$73335[ebp], eax
	mov	ecx, DWORD PTR _i$73335[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T74555[ebp], edx
	mov	eax, DWORD PTR $T74555[ebp]
	mov	DWORD PTR $T74554[ebp], eax
	cmp	DWORD PTR $T74554[ebp], 0
	je	SHORT $LN5@CObjectVec@2
	push	1
	mov	ecx, DWORD PTR $T74554[ebp]
	call	??_GCFolder@N7z@NArchive@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@2
$LN5@CObjectVec@2:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@2:
	jmp	SHORT $LN2@CObjectVec@2
$LN3@CObjectVec@2:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCFolder@N7z@NArchive@@@@QAE@XZ ENDP	; CObjectVector<NArchive::N7z::CFolder>::~CObjectVector<NArchive::N7z::CFolder>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ PROC ; CRecordVector<NArchive::N7z::CFileItem>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEIXZ ENDP ; CRecordVector<NArchive::N7z::CFileItem>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBE_NXZ PROC ; CRecordVector<NArchive::N7z::CFileItem>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBE_NXZ ENDP ; CRecordVector<NArchive::N7z::CFileItem>::IsEmpty
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CFileItem>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEIUCFileItem@N7z@NArchive@@@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 24
?Add@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEIUCFileItem@N7z@NArchive@@@Z PROC ; CRecordVector<NArchive::N7z::CFileItem>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ ; CRecordVector<NArchive::N7z::CFileItem>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 24					; 00000018H
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	add	eax, ecx
	mov	ecx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _item$[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _item$[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _item$[ebp+12]
	mov	DWORD PTR [eax+12], edx
	mov	ecx, DWORD PTR _item$[ebp+16]
	mov	DWORD PTR [eax+16], ecx
	mov	edx, DWORD PTR _item$[ebp+20]
	mov	DWORD PTR [eax+20], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	24					; 00000018H
?Add@?$CRecordVector@UCFileItem@N7z@NArchive@@@@QAEIUCFileItem@N7z@NArchive@@@Z ENDP ; CRecordVector<NArchive::N7z::CFileItem>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z PROC ; CRecordVector<NArchive::N7z::CFileItem>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	imul	eax, 24					; 00000018H
	mov	ecx, DWORD PTR _this$[ebp]
	add	eax, DWORD PTR [ecx]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@UCFileItem@N7z@NArchive@@@@QBEABUCFileItem@N7z@NArchive@@I@Z ENDP ; CRecordVector<NArchive::N7z::CFileItem>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z PROC	; CObjectVector<UString>::operator[], COMDAT
; _this$ = ecx
; Line 450
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _index$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QBEABQAXI@Z	; CRecordVector<void *>::operator[]
	mov	eax, DWORD PTR [eax]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z ENDP	; CObjectVector<UString>::operator[]
_TEXT	ENDS
EXTRN	??0UString@@QAE@ABV0@@Z:PROC			; UString::UString
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0
__ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
_TEXT	SEGMENT
tv74 = -28						; size = 4
$T74578 = -24						; size = 4
$T74577 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
_item$ = 8						; size = 4
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z PROC ; CObjectVector<UString>::Add, COMDAT
; _this$ = ecx
; Line 459
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 16					; 00000010H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	push	12					; 0000000cH
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74578[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T74578[ebp], 0
	je	SHORT $LN3@Add
	mov	eax, DWORD PTR _item$[ebp]
	push	eax
	mov	ecx, DWORD PTR $T74578[ebp]
	call	??0UString@@QAE@ABV0@@Z			; UString::UString
	mov	DWORD PTR tv74[ebp], eax
	jmp	SHORT $LN4@Add
$LN3@Add:
	mov	DWORD PTR tv74[ebp], 0
$LN4@Add:
	mov	ecx, DWORD PTR tv74[ebp]
	mov	DWORD PTR $T74577[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	edx, DWORD PTR $T74577[ebp]
	push	edx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Add@?$CRecordVector@PAX@@QAEIQAX@Z	; CRecordVector<void *>::Add
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 28					; 0000001cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0:
	mov	eax, DWORD PTR $T74578[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-20]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z ENDP ; CObjectVector<UString>::Add
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ PROC		; CMyComPtr<IOutStream>::Release, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 22
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax], 0
	je	SHORT $LN2@Release@3
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [edx]
	mov	esi, esp
	push	ecx
	mov	eax, DWORD PTR [edx+8]
	call	eax
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx], 0
$LN2@Release@3:
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Release@?$CMyComPtr@UIOutStream@@@@QAEXXZ ENDP		; CMyComPtr<IOutStream>::Release
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ PROC ; CMyComPtr<IOutStream>::operator&, COMDAT
; _this$ = ecx
; Line 25
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??I?$CMyComPtr@UIOutStream@@@@QAEPAPAUIOutStream@@XZ ENDP ; CMyComPtr<IOutStream>::operator&
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ PROC	; CMyComPtr<IOutStream>::operator->, COMDAT
; _this$ = ecx
; Line 26
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax]
	mov	esp, ebp
	pop	ebp
	ret	0
??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ ENDP	; CMyComPtr<IOutStream>::operator->
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ PROC		; CMyComPtr<IOutStream>::operator!, COMDAT
; _this$ = ecx
; Line 37
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ ENDP		; CMyComPtr<IOutStream>::operator!
_TEXT	ENDS
PUBLIC	??1CMethodFull@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CMethodFull::~CMethodFull
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CMethodFull::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodFull@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMethodFull@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CMethodFull::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CCoderInfo@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CCoderInfo::~CCoderInfo
EXTRN	??_M@YGXPAXIHP6EX0@Z@Z:PROC			; `eh vector destructor iterator'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CCoderInfo::`vector deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 2
	je	SHORT $LN3@vector
	push	OFFSET ??1CCoderInfo@N7z@NArchive@@QAE@XZ
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx-4]
	push	edx
	push	24					; 00000018H
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??_M@YGXPAXIHP6EX0@Z@Z
	mov	ecx, DWORD PTR ___flags$[ebp]
	and	ecx, 1
	je	SHORT $LN2@vector
	mov	edx, DWORD PTR _this$[ebp]
	sub	edx, 4
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN2@vector:
	mov	eax, DWORD PTR _this$[ebp]
	sub	eax, 4
	jmp	SHORT $LN4@vector
$LN3@vector:
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CCoderInfo@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@vector
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@vector:
	mov	eax, DWORD PTR _this$[ebp]
$LN4@vector:
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_ECCoderInfo@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CCoderInfo::`vector deleting destructor'
_TEXT	ENDS
PUBLIC	??1CFolder@N7z@NArchive@@QAE@XZ			; NArchive::N7z::CFolder::~CFolder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCFolder@N7z@NArchive@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCFolder@N7z@NArchive@@QAEPAXI@Z PROC		; NArchive::N7z::CFolder::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CFolder@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCFolder@N7z@NArchive@@QAEPAXI@Z ENDP		; NArchive::N7z::CFolder::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	push	esi
$LN2@vector@2:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector@2
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	ecx, DWORD PTR ___t$[ebp]
	add	ecx, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], ecx
	jmp	SHORT $LN2@vector@2
$LN3@vector@2:
	pop	esi
	cmp	ebp, esp
	call	__RTC_CheckEsp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??1CMethodProps@@QAE@XZ				; CMethodProps::~CMethodProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodFull@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodFull@N7z@NArchive@@QAE@XZ PROC		; NArchive::N7z::CMethodFull::~CMethodFull, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMethodProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodFull@N7z@NArchive@@QAE@XZ ENDP		; NArchive::N7z::CMethodFull::~CMethodFull
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1CCoderInfo@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CCoderInfo@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CCoderInfo::~CCoderInfo, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CBuffer@E@@QAE@XZ			; CBuffer<unsigned char>::~CBuffer<unsigned char>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CCoderInfo@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CCoderInfo::~CCoderInfo
_TEXT	ENDS
PUBLIC	??1?$CObjArray2@I@@QAE@XZ			; CObjArray2<unsigned int>::~CObjArray2<unsigned int>
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1
__ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$??1CFolder@N7z@NArchive@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1CFolder@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1CFolder@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFolder::~CFolder, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	push	ecx
	mov	DWORD PTR [ebp-16], -858993460		; ccccccccH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 1
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 16					; 00000010H
	call	??1?$CObjArray2@I@@QAE@XZ		; CObjArray2<unsigned int>::~CObjArray2<unsigned int>
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 16					; 00000010H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CObjArray2@UCCoderInfo@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CCoderInfo>::~CObjArray2<NArchive::N7z::CCoderInfo>
__unwindfunclet$??1CFolder@N7z@NArchive@@QAE@XZ$1:
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	jmp	??1?$CObjArray2@UCBond@N7z@NArchive@@@@QAE@XZ ; CObjArray2<NArchive::N7z::CBond>::~CObjArray2<NArchive::N7z::CBond>
__ehhandler$??1CFolder@N7z@NArchive@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-8]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CFolder@N7z@NArchive@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CFolder@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFolder::~CFolder
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1?$CObjArray2@I@@QAE@XZ
_TEXT	SEGMENT
$T74623 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CObjArray2@I@@QAE@XZ PROC				; CObjArray2<unsigned int>::~CObjArray2<unsigned int>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mybuffer.h
; Line 203
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74623[ebp], ecx
	mov	edx, DWORD PTR $T74623[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CObjArray2@I@@QAE@XZ ENDP				; CObjArray2<unsigned int>::~CObjArray2<unsigned int>
_TEXT	ENDS
PUBLIC	??1CProps@@QAE@XZ				; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CMethodProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CMethodProps@@QAE@XZ PROC				; CMethodProps::~CMethodProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProps@@QAE@XZ
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CMethodProps@@QAE@XZ ENDP				; CMethodProps::~CMethodProps
_TEXT	ENDS
PUBLIC	??1?$CObjectVector@UCProp@@@@QAE@XZ		; CObjectVector<CProp>::~CObjectVector<CProp>
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProps@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProps@@QAE@XZ PROC					; CProps::~CProps, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CObjectVector@UCProp@@@@QAE@XZ	; CObjectVector<CProp>::~CObjectVector<CProp>
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProps@@QAE@XZ ENDP					; CProps::~CProps
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??0?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::CRecordVector<void *>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 34
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::CRecordVector<void *>
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Size@?$CRecordVector@PAX@@QBEIXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Size@?$CRecordVector@PAX@@QBEIXZ PROC			; CRecordVector<void *>::Size, COMDAT
; _this$ = ecx
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [eax+4]
	mov	esp, ebp
	pop	ebp
	ret	0
?Size@?$CRecordVector@PAX@@QBEIXZ ENDP			; CRecordVector<void *>::Size
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ PROC		; CRecordVector<void *>::IsEmpty, COMDAT
; _this$ = ecx
; Line 49
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	xor	ecx, ecx
	cmp	DWORD PTR [eax+4], 0
	sete	cl
	mov	al, cl
	mov	esp, ebp
	pop	ebp
	ret	0
?IsEmpty@?$CRecordVector@PAX@@QBE_NXZ ENDP		; CRecordVector<void *>::IsEmpty
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??1?$CRecordVector@PAX@@QAE@XZ
_TEXT	SEGMENT
$T74638 = -8						; size = 4
_this$ = -4						; size = 4
??1?$CRecordVector@PAX@@QAE@XZ PROC			; CRecordVector<void *>::~CRecordVector<void *>, COMDAT
; _this$ = ecx
; Line 121
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR $T74638[ebp], ecx
	mov	edx, DWORD PTR $T74638[ebp]
	push	edx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1?$CRecordVector@PAX@@QAE@XZ ENDP			; CRecordVector<void *>::~CRecordVector<void *>
_TEXT	ENDS
PUBLIC	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?Add@?$CRecordVector@PAX@@QAEIQAX@Z
_TEXT	SEGMENT
tv72 = -8						; size = 4
_this$ = -4						; size = 4
_item$ = 8						; size = 4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z PROC		; CRecordVector<void *>::Add, COMDAT
; _this$ = ecx
; Line 198
	push	ebp
	mov	ebp, esp
	sub	esp, 8
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 199
	mov	ecx, DWORD PTR _this$[ebp]
	call	?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ; CRecordVector<void *>::ReserveOnePosition
; Line 200
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	edx, DWORD PTR _item$[ebp]
	mov	DWORD PTR [eax+ecx*4], edx
; Line 201
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR tv72[ebp], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	add	eax, 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [ecx+4], eax
	mov	eax, DWORD PTR tv72[ebp]
; Line 202
	add	esp, 8
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?Add@?$CRecordVector@PAX@@QAEIQAX@Z ENDP		; CRecordVector<void *>::Add
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QBEABQAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QBEABQAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 227
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QBEABQAXI@Z ENDP		; CRecordVector<void *>::operator[]
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??A?$CRecordVector@PAX@@QAEAAPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_index$ = 8						; size = 4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z PROC		; CRecordVector<void *>::operator[], COMDAT
; _this$ = ecx
; Line 228
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR _index$[ebp]
	lea	eax, DWORD PTR [ecx+edx*4]
	mov	esp, ebp
	pop	ebp
	ret	4
??A?$CRecordVector@PAX@@QAEAAPAXI@Z ENDP		; CRecordVector<void *>::operator[]
_TEXT	ENDS
PUBLIC	??_GCProp@@QAEPAXI@Z				; CProp::`scalar deleting destructor'
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0
__ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1?$CObjectVector@UCProp@@@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ??1?$CObjectVector@UCProp@@@@QAE@XZ
_TEXT	SEGMENT
tv76 = -32						; size = 4
$T74648 = -28						; size = 4
$T74647 = -24						; size = 4
_i$73504 = -20						; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
??1?$CObjectVector@UCProp@@@@QAE@XZ PROC		; CObjectVector<CProp>::~CObjectVector<CProp>, COMDAT
; _this$ = ecx
; Line 487
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 488
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Size@?$CRecordVector@PAX@@QBEIXZ	; CRecordVector<void *>::Size
	mov	DWORD PTR _i$73504[ebp], eax
$LN2@CObjectVec@3:
	cmp	DWORD PTR _i$73504[ebp], 0
	je	SHORT $LN3@CObjectVec@3
; Line 489
	mov	eax, DWORD PTR _i$73504[ebp]
	sub	eax, 1
	mov	DWORD PTR _i$73504[ebp], eax
	mov	ecx, DWORD PTR _i$73504[ebp]
	push	ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??A?$CRecordVector@PAX@@QAEAAPAXI@Z	; CRecordVector<void *>::operator[]
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR $T74648[ebp], edx
	mov	eax, DWORD PTR $T74648[ebp]
	mov	DWORD PTR $T74647[ebp], eax
	cmp	DWORD PTR $T74647[ebp], 0
	je	SHORT $LN5@CObjectVec@3
	push	1
	mov	ecx, DWORD PTR $T74647[ebp]
	call	??_GCProp@@QAEPAXI@Z
	mov	DWORD PTR tv76[ebp], eax
	jmp	SHORT $LN6@CObjectVec@3
$LN5@CObjectVec@3:
	mov	DWORD PTR tv76[ebp], 0
$LN6@CObjectVec@3:
	jmp	SHORT $LN2@CObjectVec@3
$LN3@CObjectVec@3:
; Line 490
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 32					; 00000020H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1?$CRecordVector@PAX@@QAE@XZ		; CRecordVector<void *>::~CRecordVector<void *>
__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-24]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1?$CObjectVector@UCProp@@@@QAE@XZ ENDP		; CObjectVector<CProp>::~CObjectVector<CProp>
PUBLIC	??1CProp@@QAE@XZ				; CProp::~CProp
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??_GCProp@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
___flags$ = 8						; size = 4
??_GCProp@@QAEPAXI@Z PROC				; CProp::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CProp@@QAE@XZ
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@4
	mov	ecx, DWORD PTR _this$[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@4:
	mov	eax, DWORD PTR _this$[ebp]
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCProp@@QAEPAXI@Z ENDP				; CProp::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??1CPropVariant@NCOM@NWindows@@QAE@XZ		; NWindows::NCOM::CPropVariant::~CPropVariant
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CProp@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CProp@@QAE@XZ PROC					; CProp::~CProp, COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	add	ecx, 8
	call	??1CPropVariant@NCOM@NWindows@@QAE@XZ	; NWindows::NCOM::CPropVariant::~CPropVariant
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CProp@@QAE@XZ ENDP					; CProp::~CProp
_TEXT	ENDS
EXTRN	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ:PROC	; NWindows::NCOM::CPropVariant::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??1CPropVariant@NCOM@NWindows@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??1CPropVariant@NCOM@NWindows@@QAE@XZ PROC		; NWindows::NCOM::CPropVariant::~CPropVariant, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\windows\propvariant.h
; Line 56
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ ; NWindows::NCOM::CPropVariant::Clear
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
??1CPropVariant@NCOM@NWindows@@QAE@XZ ENDP		; NWindows::NCOM::CPropVariant::~CPropVariant
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ
_TEXT	SEGMENT
$T74667 = -20						; size = 4
$T74666 = -16						; size = 4
_p$73515 = -12						; size = 4
_newCapacity$73514 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ PROC	; CRecordVector<unsigned int>::ReserveOnePosition, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$73514[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$73514[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74666[ebp], eax
	mov	eax, DWORD PTR $T74666[ebp]
	mov	DWORD PTR _p$73515[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$73515[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T74667[ebp], edx
	mov	eax, DWORD PTR $T74667[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$73515[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$73514[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@I@@AAEXXZ ENDP	; CRecordVector<unsigned int>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ
_TEXT	SEGMENT
$T74671 = -20						; size = 4
$T74670 = -16						; size = 4
_p$73532 = -12						; size = 4
_newCapacity$73531 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ PROC	; CRecordVector<unsigned __int64>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@2
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$73531[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$73531[ebp]
	mov	edx, 8
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74670[ebp], eax
	mov	eax, DWORD PTR $T74670[ebp]
	mov	DWORD PTR _p$73532[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@2
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 3
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$73532[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@2:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T74671[ebp], edx
	mov	eax, DWORD PTR $T74671[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$73532[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$73531[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@2:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@_K@@AAEXXZ ENDP	; CRecordVector<unsigned __int64>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ
_TEXT	SEGMENT
$T74675 = -20						; size = 4
$T74674 = -16						; size = 4
_p$73543 = -12						; size = 4
_newCapacity$73542 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ PROC	; CRecordVector<bool>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	SHORT $LN3@ReserveOne@3
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$73542[ebp], ecx
; Line 23
	mov	edx, DWORD PTR _newCapacity$73542[ebp]
	push	edx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74674[ebp], eax
	mov	eax, DWORD PTR $T74674[ebp]
	mov	DWORD PTR _p$73543[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@3
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$73543[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@3:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T74675[ebp], edx
	mov	eax, DWORD PTR $T74675[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$73543[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$73542[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@3:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@_N@@AAEXXZ ENDP	; CRecordVector<bool>::ReserveOnePosition
_TEXT	ENDS
PUBLIC	?Clear@?$CRecordVector@_N@@QAEXXZ		; CRecordVector<bool>::Clear
; Function compile flags: /Odtp /RTCsu
;	COMDAT ?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z
_TEXT	SEGMENT
$T74679 = -12						; size = 4
$T74678 = -8						; size = 4
_this$ = -4						; size = 4
_newCapacity$ = 8					; size = 4
?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z PROC	; CRecordVector<bool>::ClearAndReserve, COMDAT
; _this$ = ecx
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	mov	DWORD PTR [ebp-12], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-8], -858993460		; ccccccccH
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 75
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Clear@?$CRecordVector@_N@@QAEXXZ	; CRecordVector<bool>::Clear
; Line 76
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	cmp	ecx, DWORD PTR [eax+8]
	jbe	SHORT $LN2@ClearAndRe
; Line 78
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T74678[ebp], eax
	mov	ecx, DWORD PTR $T74678[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 79
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx], 0
; Line 80
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+8], 0
; Line 81
	mov	ecx, DWORD PTR _newCapacity$[ebp]
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74679[ebp], eax
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T74679[ebp]
	mov	DWORD PTR [edx], eax
; Line 82
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newCapacity$[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN2@ClearAndRe:
; Line 84
	add	esp, 12					; 0000000cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
?ClearAndReserve@?$CRecordVector@_N@@QAEXI@Z ENDP	; CRecordVector<bool>::ClearAndReserve
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?Clear@?$CRecordVector@_N@@QAEXXZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
?Clear@?$CRecordVector@_N@@QAEXXZ PROC			; CRecordVector<bool>::Clear, COMDAT
; _this$ = ecx
; Line 131
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+4], 0
	mov	esp, ebp
	pop	ebp
	ret	0
?Clear@?$CRecordVector@_N@@QAEXXZ ENDP			; CRecordVector<bool>::Clear
_TEXT	ENDS
PUBLIC	??0CFileItem@N7z@NArchive@@QAE@XZ		; NArchive::N7z::CFileItem::CFileItem
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ$0
__ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu
xdata$x	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ
_TEXT	SEGMENT
tv86 = -44						; size = 4
$T74689 = -40						; size = 4
$T74686 = -36						; size = 4
$T74685 = -32						; size = 4
$T74684 = -28						; size = 4
_p$73560 = -24						; size = 4
_newCapacity$73559 = -20				; size = 4
_this$ = -16						; size = 4
__$EHRec$ = -12						; size = 12
?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ PROC ; CRecordVector<NArchive::N7z::CFileItem>::ReserveOnePosition, COMDAT
; _this$ = ecx
; Line 19
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-44], eax
	mov	DWORD PTR [ebp-40], eax
	mov	DWORD PTR [ebp-36], eax
	mov	DWORD PTR [ebp-32], eax
	mov	DWORD PTR [ebp-28], eax
	mov	DWORD PTR [ebp-24], eax
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@4
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$73559[ebp], ecx
; Line 23
	mov	edx, DWORD PTR _newCapacity$73559[ebp]
	mov	DWORD PTR $T74684[ebp], edx
	xor	ecx, ecx
	mov	eax, DWORD PTR $T74684[ebp]
	mov	edx, 24					; 00000018H
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74686[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	cmp	DWORD PTR $T74686[ebp], 0
	je	SHORT $LN5@ReserveOne@4
	push	OFFSET ??0CFileItem@N7z@NArchive@@QAE@XZ ; NArchive::N7z::CFileItem::CFileItem
	mov	eax, DWORD PTR $T74684[ebp]
	push	eax
	push	24					; 00000018H
	mov	ecx, DWORD PTR $T74686[ebp]
	push	ecx
	call	??_H@YGXPAXIHP6EPAX0@Z@Z
	mov	edx, DWORD PTR $T74686[ebp]
	mov	DWORD PTR tv86[ebp], edx
	jmp	SHORT $LN6@ReserveOne@4
$LN5@ReserveOne@4:
	mov	DWORD PTR tv86[ebp], 0
$LN6@ReserveOne@4:
	mov	eax, DWORD PTR tv86[ebp]
	mov	DWORD PTR $T74685[ebp], eax
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR $T74685[ebp]
	mov	DWORD PTR _p$73560[ebp], ecx
; Line 24
	mov	edx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [edx+4], 0
	je	SHORT $LN1@ReserveOne@4
; Line 25
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+4]
	imul	ecx, 24					; 00000018H
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	push	eax
	mov	ecx, DWORD PTR _p$73560[ebp]
	push	ecx
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@4:
; Line 26
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	DWORD PTR $T74689[ebp], eax
	mov	ecx, DWORD PTR $T74689[ebp]
	push	ecx
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR _p$73560[ebp]
	mov	DWORD PTR [edx], eax
; Line 28
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _newCapacity$73559[ebp]
	mov	DWORD PTR [ecx+8], edx
$LN3@ReserveOne@4:
; Line 30
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	add	esp, 44					; 0000002cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ$0:
	mov	eax, DWORD PTR $T74686[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-36]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ
	jmp	___CxxFrameHandler3
text$x	ENDS
?ReserveOnePosition@?$CRecordVector@UCFileItem@N7z@NArchive@@@@AAEXXZ ENDP ; CRecordVector<NArchive::N7z::CFileItem>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
;	COMDAT ??0CFileItem@N7z@NArchive@@QAE@XZ
_TEXT	SEGMENT
_this$ = -4						; size = 4
??0CFileItem@N7z@NArchive@@QAE@XZ PROC			; NArchive::N7z::CFileItem::CFileItem, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\7zip\archive\7z\7zitem.h
; Line 173
	push	ebp
	mov	ebp, esp
	push	ecx
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+16], 1
	mov	ecx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [ecx+17], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	BYTE PTR [edx+18], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	BYTE PTR [eax+19], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	esp, ebp
	pop	ebp
	ret	0
??0CFileItem@N7z@NArchive@@QAE@XZ ENDP			; NArchive::N7z::CFileItem::CFileItem
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ
_TEXT	SEGMENT
$T74702 = -20						; size = 4
$T74701 = -16						; size = 4
_p$73575 = -12						; size = 4
_newCapacity$73574 = -8					; size = 4
_this$ = -4						; size = 4
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ PROC	; CRecordVector<void *>::ReserveOnePosition, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\myvector.h
; Line 19
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	mov	eax, -858993460				; ccccccccH
	mov	DWORD PTR [ebp-20], eax
	mov	DWORD PTR [ebp-16], eax
	mov	DWORD PTR [ebp-12], eax
	mov	DWORD PTR [ebp-8], eax
	mov	DWORD PTR [ebp-4], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 20
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [eax+4]
	cmp	edx, DWORD PTR [ecx+8]
	jne	$LN3@ReserveOne@5
; Line 22
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+8]
	shr	ecx, 2
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+8]
	lea	ecx, DWORD PTR [eax+ecx+1]
	mov	DWORD PTR _newCapacity$73574[ebp], ecx
; Line 23
	xor	ecx, ecx
	mov	eax, DWORD PTR _newCapacity$73574[ebp]
	mov	edx, 4
	mul	edx
	seto	cl
	neg	ecx
	or	ecx, eax
	push	ecx
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T74701[ebp], eax
	mov	eax, DWORD PTR $T74701[ebp]
	mov	DWORD PTR _p$73575[ebp], eax
; Line 24
	mov	ecx, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [ecx+4], 0
	je	SHORT $LN1@ReserveOne@5
; Line 25
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	shl	eax, 2
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	push	edx
	mov	eax, DWORD PTR _p$73575[ebp]
	push	eax
	call	_memcpy
	add	esp, 12					; 0000000cH
$LN1@ReserveOne@5:
; Line 26
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	DWORD PTR $T74702[ebp], edx
	mov	eax, DWORD PTR $T74702[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
; Line 27
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR _p$73575[ebp]
	mov	DWORD PTR [ecx], edx
; Line 28
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR _newCapacity$73574[ebp]
	mov	DWORD PTR [eax+8], ecx
$LN3@ReserveOne@5:
; Line 30
	add	esp, 20					; 00000014H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ ENDP	; CRecordVector<void *>::ReserveOnePosition
; Function compile flags: /Odtp /RTCsu
_TEXT	ENDS
;	COMDAT ??$QueryInterface@UIOutStream@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStream@@@Z
_TEXT	SEGMENT
_this$ = -4						; size = 4
_iid$ = 8						; size = 4
_pp$ = 12						; size = 4
??$QueryInterface@UIOutStream@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStream@@@Z PROC ; CMyComPtr<ISequentialOutStream>::QueryInterface<IOutStream>, COMDAT
; _this$ = ecx
; File c:\workspace\7z1505-src\cpp\common\mycom.h
; Line 68
	push	ebp
	mov	ebp, esp
	push	ecx
	push	esi
	mov	DWORD PTR [ebp-4], -858993460		; ccccccccH
	mov	DWORD PTR _this$[ebp], ecx
; Line 70
	mov	esi, esp
	mov	eax, DWORD PTR _pp$[ebp]
	push	eax
	mov	ecx, DWORD PTR _iid$[ebp]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx]
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR [ecx]
	mov	eax, DWORD PTR [eax]
	push	edx
	mov	ecx, DWORD PTR [eax]
	call	ecx
	cmp	esi, esp
	call	__RTC_CheckEsp
; Line 71
	pop	esi
	add	esp, 4
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	8
??$QueryInterface@UIOutStream@@@?$CMyComPtr@UISequentialOutStream@@@@QBEJABU_GUID@@PAPAUIOutStream@@@Z ENDP ; CMyComPtr<ISequentialOutStream>::QueryInterface<IOutStream>
_TEXT	ENDS
END
