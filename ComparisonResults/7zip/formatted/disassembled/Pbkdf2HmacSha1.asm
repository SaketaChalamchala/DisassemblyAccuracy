?Pbkdf2Hmac@NSha1@NCrypto@@YGXPBEI0IIPAEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1C4h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1C4]']
mov ['ecx,', '71h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+this]']
push ['ecx']
lea ['ecx,', '[ebp+var_C8]']
call ['?SetKey@CHmac@NSha1@NCrypto@@QAEXPBEI@Z']
mov ['[ebp+var_D0],', '1']
jmp ['short', 'loc_55']
mov ['edx,', '[ebp+var_D0]']
add ['edx,', '1']
mov ['[ebp+var_D0],', 'edx']
cmp ['[ebp+arg_18],', '0']
jz ['loc_1FB']
mov ['ecx,', '30h']
lea ['esi,', '[ebp+var_C8]']
lea ['edi,', '[ebp+var_194]']
rep ['movsd']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
lea ['ecx,', '[ebp+var_194]']
call ['?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z']
mov ['edx,', '[ebp+var_D0]']
bswap ['edx']
mov ['dword', 'ptr', '[ebp+var_1B0],', 'edx']
push ['4']
lea ['eax,', '[ebp+var_1B0]']
push ['eax']
lea ['ecx,', '[ebp+var_194]']
call ['?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z']
push ['14h']
lea ['ecx,', '[ebp+var_1B0]']
push ['ecx']
lea ['ecx,', '[ebp+var_194]']
call ['?Final@CHmac@NSha1@NCrypto@@QAEXPAEI@Z']
cmp ['[ebp+arg_18],', '14h']
jnb ['short', 'loc_CC']
mov ['edx,', '[ebp+arg_18]']
mov ['[ebp+var_1C4],', 'edx']
jmp ['short', 'loc_D6']
mov ['[ebp+var_1C4],', '14h']
mov ['eax,', '[ebp+var_1C4]']
mov ['[ebp+var_1B8],', 'eax']
mov ['[ebp+var_1BC],', '0']
jmp ['short', 'loc_FD']
mov ['ecx,', '[ebp+var_1BC]']
add ['ecx,', '1']
mov ['[ebp+var_1BC],', 'ecx']
mov ['edx,', '[ebp+var_1BC]']
cmp ['edx,', '[ebp+var_1B8]']
jnb ['short', 'loc_125']
mov ['eax,', '[ebp+arg_14]']
add ['eax,', '[ebp+var_1BC]']
mov ['ecx,', '[ebp+var_1BC]']
mov ['dl,', '[ebp+ecx+var_1B0]']
mov ['[eax],', 'dl']
jmp ['short', 'loc_EE']
mov ['eax,', '[ebp+arg_10]']
mov ['[ebp+var_1C0],', 'eax']
jmp ['short', 'loc_13F']
mov ['ecx,', '[ebp+var_1C0]']
sub ['ecx,', '1']
mov ['[ebp+var_1C0],', 'ecx']
cmp ['[ebp+var_1C0],', '1']
jbe ['loc_1DE']
mov ['ecx,', '30h']
lea ['esi,', '[ebp+var_C8]']
lea ['edi,', '[ebp+var_194]']
rep ['movsd']
push ['14h']
lea ['edx,', '[ebp+var_1B0]']
push ['edx']
lea ['ecx,', '[ebp+var_194]']
call ['?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z']
push ['14h']
lea ['eax,', '[ebp+var_1B0]']
push ['eax']
lea ['ecx,', '[ebp+var_194]']
call ['?Final@CHmac@NSha1@NCrypto@@QAEXPAEI@Z']
mov ['[ebp+var_1BC],', '0']
jmp ['short', 'loc_1A2']
mov ['ecx,', '[ebp+var_1BC]']
add ['ecx,', '1']
mov ['[ebp+var_1BC],', 'ecx']
mov ['edx,', '[ebp+var_1BC]']
cmp ['edx,', '[ebp+var_1B8]']
jnb ['short', 'loc_1D9']
mov ['eax,', '[ebp+var_1BC]']
movzx ['ecx,', '[ebp+eax+var_1B0]']
mov ['edx,', '[ebp+arg_14]']
add ['edx,', '[ebp+var_1BC]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
xor ['eax,', 'ecx']
mov ['ecx,', '[ebp+arg_14]']
add ['ecx,', '[ebp+var_1BC]']
mov ['[ecx],', 'al']
jmp ['short', 'loc_193']
jmp ['loc_130']
mov ['edx,', '[ebp+arg_14]']
add ['edx,', '[ebp+var_1B8]']
mov ['[ebp+arg_14],', 'edx']
mov ['eax,', '[ebp+arg_18]']
sub ['eax,', '[ebp+var_1B8]']
mov ['[ebp+arg_18],', 'eax']
jmp ['loc_46']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN21']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1C4h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
?Pbkdf2Hmac32@NSha1@NCrypto@@YGXPBEIPBIIIPAII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1C0h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1C0]']
mov ['ecx,', '70h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+this]']
push ['ecx']
lea ['ecx,', '[ebp+var_C8]']
call ['?SetKey@CHmac32@NSha1@NCrypto@@QAEXPBEI@Z']
mov ['[ebp+var_D0],', '1']
jmp ['short', 'loc_2C5']
mov ['edx,', '[ebp+var_D0]']
add ['edx,', '1']
mov ['[ebp+var_D0],', 'edx']
cmp ['[ebp+arg_18],', '0']
jz ['loc_3E0']
mov ['ecx,', '30h']
lea ['esi,', '[ebp+var_C8]']
lea ['edi,', '[ebp+var_194]']
rep ['movsd']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
lea ['ecx,', '[ebp+var_194]']
call ['?Update@CHmac32@NSha1@NCrypto@@QAEXPBII@Z']
mov ['edx,', '[ebp+var_D0]']
mov ['[ebp+var_1B0],', 'edx']
push ['1']
lea ['eax,', '[ebp+var_1B0]']
push ['eax']
lea ['ecx,', '[ebp+var_194]']
call ['?Update@CHmac32@NSha1@NCrypto@@QAEXPBII@Z']
push ['5']
lea ['ecx,', '[ebp+var_1B0]']
push ['ecx']
lea ['ecx,', '[ebp+var_194]']
call ['?Final@CHmac32@NSha1@NCrypto@@QAEXPAII@Z']
mov ['ecx,', '30h']
lea ['esi,', '[ebp+var_C8]']
lea ['edi,', '[ebp+var_194]']
rep ['movsd']
mov ['edx,', '[ebp+arg_10]']
sub ['edx,', '1']
push ['edx']
lea ['eax,', '[ebp+var_1B0]']
push ['eax']
lea ['ecx,', '[ebp+var_194]']
call ['?GetLoopXorDigest@CHmac32@NSha1@NCrypto@@QAEXPAII@Z']
cmp ['[ebp+arg_18],', '5']
jnb ['short', 'loc_366']
mov ['ecx,', '[ebp+arg_18]']
mov ['[ebp+var_1C0],', 'ecx']
jmp ['short', 'loc_370']
mov ['[ebp+var_1C0],', '5']
mov ['edx,', '[ebp+var_1C0]']
mov ['[ebp+var_1B8],', 'edx']
mov ['[ebp+var_1BC],', '0']
jmp ['short', 'loc_397']
mov ['eax,', '[ebp+var_1BC]']
add ['eax,', '1']
mov ['[ebp+var_1BC],', 'eax']
mov ['ecx,', '[ebp+var_1BC]']
cmp ['ecx,', '[ebp+var_1B8]']
jnb ['short', 'loc_3C0']
mov ['edx,', '[ebp+var_1BC]']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[ebp+var_1BC]']
mov ['ecx,', '[ebp+ecx*4+var_1B0]']
mov ['[eax+edx*4],', 'ecx']
jmp ['short', 'loc_388']
mov ['edx,', '[ebp+var_1B8]']
mov ['eax,', '[ebp+arg_14]']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+arg_14],', 'ecx']
mov ['edx,', '[ebp+arg_18]']
sub ['edx,', '[ebp+var_1B8]']
mov ['[ebp+arg_18],', 'edx']
jmp ['loc_2B6']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1C0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_Sha1_Update@12']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Update@CHmac32@NSha1@NCrypto@@QAEXPBII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Update@CContext32@NSha1@NCrypto@@QAEXPBII@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Update@CContext32@NSha1@NCrypto@@QAEXPBII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_Sha1_32_Update@12']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
