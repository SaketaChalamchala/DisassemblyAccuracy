??0CCompressProgressWrap@@QAE@PAUICompressProgressInfo@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '?CompressProgress@@YGHPAX_K1@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?CompressProgress@@YGHPAX_K1@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
and ['ecx,', '[ebp+arg_10]']
cmp ['ecx,', '0FFFFFFFFh']
jnz ['short', 'loc_76']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_7C']
lea ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '[ebp+arg_8]']
cmp ['eax,', '0FFFFFFFFh']
jnz ['short', 'loc_90']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_96']
lea ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'ecx']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[edx]']
push ['ecx']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
?HRESULT_To_SRes@@YGHJH@Z proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '80070057h']
jg ['short', 'loc_120']
cmp ['[ebp+var_4],', '80070057h']
jz ['short', 'loc_139']
cmp ['[ebp+var_4],', '80004001h']
jz ['short', 'loc_14E']
cmp ['[ebp+var_4],', '80004004h']
jz ['short', 'loc_140']
cmp ['[ebp+var_4],', '8007000Eh']
jz ['short', 'loc_132']
jmp ['short', 'loc_155']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_12E']
cmp ['[ebp+var_4],', '1']
jz ['short', 'loc_147']
jmp ['short', 'loc_155']
xor ['eax,', 'eax']
jmp ['short', 'loc_158']
mov ['eax,', '2']
jmp ['short', 'loc_158']
mov ['eax,', '5']
jmp ['short', 'loc_158']
mov ['eax,', '0Ah']
jmp ['short', 'loc_158']
mov ['eax,', '1']
jmp ['short', 'loc_158']
mov ['eax,', '4']
jmp ['short', 'loc_158']
mov ['eax,', '[ebp+arg_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??0CSeqInStreamWrap@@QAE@PAUISequentialInStream@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '?MyRead@@YGHPAX0PAI@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+10h],', '0']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?MyRead@@YGHPAX0PAI@Z proc near         
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[ecx],', '80000000h']
jnb ['short', 'loc_1D6']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_1DD']
mov ['[ebp+var_14],', '80000000h']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_C],', 'ecx']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[eax]']
push ['edx']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_C]']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['edx,', '[ecx+10h]']
adc ['eax,', '[ecx+14h]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+10h],', 'edx']
mov ['[ecx+14h],', 'eax']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jnz ['short', 'loc_23E']
xor ['eax,', 'eax']
jmp ['short', 'loc_24C']
push ['8']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['?HRESULT_To_SRes@@YGHJH@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
??0CSeqOutStreamWrap@@QAE@PAUISequentialOutStream@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '?MyWrite@@YGIPAXPBXI@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['dword', 'ptr', '[ecx+14h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?MyWrite@@YGIPAXPBXI@Z proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_323']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jz ['short', 'loc_321']
xor ['eax,', 'eax']
jmp ['short', 'loc_347']
jmp ['short', 'loc_32D']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+arg_8]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['ecx,', '[eax+10h]']
adc ['edx,', '[eax+14h]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+10h],', 'ecx']
mov ['[eax+14h],', 'edx']
mov ['eax,', '[ebp+arg_8]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?SResToHRESULT@@YGJH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0Ah']
ja ['short', '$LN7_0']
mov ['ecx,', '[ebp+var_4]']
jmp ['ds:$LN11[ecx*4]']
xor ['eax,', 'eax']
jmp ['short', 'loc_3AD']
mov ['eax,', '8007000Eh']
jmp ['short', 'loc_3AD']
mov ['eax,', '80070057h']
jmp ['short', 'loc_3AD']
mov ['eax,', '80004004h']
jmp ['short', 'loc_3AD']
mov ['eax,', '1']
jmp ['short', 'loc_3AD']
mov ['eax,', '80004001h']
jmp ['short', 'loc_3AD']
mov ['eax,', '80004005h']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0CSeekInStreamWrap@@QAE@PAUIInStream@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', 'offset', '?InStreamWrap_Read@@YGHPAX0PAI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', 'offset', '?InStreamWrap_Seek@@YGHPAXPA_JW4ESzSeek@@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?InStreamWrap_Read@@YGHPAX0PAI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[ecx],', '80000000h']
jnb ['short', 'loc_456']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_45D']
mov ['[ebp+var_14],', '80000000h']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_C],', 'ecx']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[eax]']
push ['edx']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
neg ['eax']
sbb ['eax,', 'eax']
and ['eax,', '8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?InStreamWrap_Seek@@YGHPAXPA_JW4ESzSeek@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_1C],', 'ecx']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_531']
cmp ['[ebp+var_1C],', '1']
jz ['short', 'loc_53A']
cmp ['[ebp+var_1C],', '2']
jz ['short', 'loc_543']
jmp ['short', 'loc_54C']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_553']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_553']
mov ['[ebp+var_8],', '2']
jmp ['short', 'loc_553']
mov ['eax,', '5']
jmp ['short', 'loc_5A3']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ecx]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[edx]']
push ['ecx']
mov ['eax,', '[edx+10h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['[edx+4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
neg ['eax']
sbb ['eax,', 'eax']
and ['eax,', '8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?Free@CByteInBufWrap@@QAEXXZ proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['_MidFree@4']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Alloc@CByteInBufWrap@@QAE_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
jz ['short', 'loc_65B']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
cmp ['edx,', '[ecx+10h]']
jz ['short', 'loc_693']
mov ['ecx,', '[ebp+var_4]']
call ['?Free@CByteInBufWrap@@QAEXXZ']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MidAlloc@4']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+0Ch],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+10h],', 'edx']
mov ['eax,', '[ebp+var_4]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
setnz ['cl']
mov ['al,', 'cl']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?ReadByteFromNewBlock@CByteInBufWrap@@QAEEXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+24h],', '0']
jnz ['loc_77F']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+4]']
sub ['eax,', '[edx+0Ch]']
cdq
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+18h]']
adc ['edx,', '[ecx+1Ch]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+18h],', 'eax']
mov ['[ecx+1Ch],', 'edx']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+10h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[edx]']
push ['ecx']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+24h],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
mov ['[edx+4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
add ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_77F']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['cl,', '[eax]']
mov ['byte', 'ptr', '[ebp+var_14+3],', 'cl']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
mov ['al,', 'byte', 'ptr', '[ebp+var_14+3]']
jmp ['short', 'loc_788']
mov ['edx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[edx+20h],', '1']
xor ['al,', 'al']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CByteInBufWrap@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', 'offset', '?Wrap_ReadByte@@YGEPAX@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Wrap_ReadByte@@YGEPAX@Z proc near      
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+4]']
cmp ['eax,', '[edx+8]']
jz ['short', 'loc_847']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['al,', '[edx]']
mov ['byte', 'ptr', '[ebp+var_8+3],', 'al']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+4],', 'edx']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
jmp ['short', 'loc_84F']
mov ['ecx,', '[ebp+var_4]']
call ['?ReadByteFromNewBlock@CByteInBufWrap@@QAEEXZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Free@CByteOutBufWrap@@QAEXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['_MidFree@4']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Alloc@CByteOutBufWrap@@QAE_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
jz ['short', 'loc_8C2']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
cmp ['edx,', '[ecx+10h]']
jz ['short', 'loc_8E2']
mov ['ecx,', '[ebp+var_4]']
call ['?Free@CByteOutBufWrap@@QAEXXZ']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MidAlloc@4']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx+10h],', 'eax']
mov ['ecx,', '[ebp+var_4]']
xor ['eax,', 'eax']
cmp ['dword', 'ptr', '[ecx+0Ch],', '0']
setnz ['al']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Flush@CByteOutBufWrap@@QAEJXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+20h],', '0']
jnz ['short', 'loc_978']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+4]']
sub ['eax,', '[edx+0Ch]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+14h]']
push ['edx']
call ['?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+20h],', 'eax']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+20h],', '0']
jnz ['short', 'loc_96C']
mov ['eax,', '[ebp+var_8]']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['eax,', '[edx+18h]']
adc ['ecx,', '[edx+1Ch]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+18h],', 'eax']
mov ['[edx+1Ch],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+20h]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CByteOutBufWrap@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', 'offset', '?Wrap_WriteByte@@YGXPAXE@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Wrap_WriteByte@@YGXPAXE@Z proc near    
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[ebp+arg_4]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[edx+8]']
jnz ['short', 'loc_A10']
mov ['ecx,', '[ebp+var_4]']
call ['?Flush@CByteOutBufWrap@@QAEJXZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
