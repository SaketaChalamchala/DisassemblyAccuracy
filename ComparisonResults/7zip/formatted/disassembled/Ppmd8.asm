_Ppmd8_Construct@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+2Ch],', '0']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_5D']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '26h']
jnb ['short', 'loc_B2']
cmp ['[ebp+var_4],', '0Ch']
jb ['short', 'loc_72']
mov ['[ebp+var_14],', '4']
jmp ['short', 'loc_7E']
mov ['edx,', '[ebp+var_4]']
shr ['edx,', '2']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_8]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_4]']
mov ['[ecx+7Eh],', 'dl']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_10]']
sub ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
jnz ['short', 'loc_84']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_4]']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['[edx+58h],', 'al']
jmp ['short', 'loc_54']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+230h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+231h],', '2']
push ['9']
push ['4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '232h']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
push ['0F5h']
push ['6']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '23Bh']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_106']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '5']
jnb ['short', 'loc_11D']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_4]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_4]']
mov ['[eax+330h],', 'cl']
jmp ['short', 'loc_FD']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'edx']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_135']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '104h']
jnb ['short', 'loc_16C']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_C]']
mov ['[ecx+330h],', 'dl']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jnz ['short', 'loc_16A']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '4']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_12C']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_Ppmd8_Free@8   proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+24h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+2Ch],', '0']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_Ppmd8_Alloc@12 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+2Ch],', '0']
jz ['short', 'loc_1E0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+24h]']
cmp ['edx,', '[ebp+arg_4]']
jz ['short', 'loc_23B']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ppmd8_Free@8']
mov ['edx,', '4']
sub ['edx,', '[ebp+arg_4]']
and ['edx,', '3']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+40h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+40h]']
add ['edx,', '[ebp+arg_4]']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+2Ch],', 'ecx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_232']
xor ['eax,', 'eax']
jmp ['short', 'loc_240']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+24h],', 'eax']
mov ['eax,', '1']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_Ppmd8_Init@12  proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+18h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+44h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_RestartModel@4']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+436h],', '7']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+434h],', 'ax']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+437h],', '40h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
_RestartModel@4 proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '30h']
push ['edi']
lea ['edi,', '[ebp+var_30]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['98h']
push ['0']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '100h']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
push ['98h']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '198h']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+2Ch]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+40h]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+38h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+24h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+34h],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+24h]']
shr ['eax,', '3']
xor ['edx,', 'edx']
mov ['ecx,', '0Ch']
div ['ecx']
imul ['eax,', '7']
imul ['eax,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+34h]']
sub ['ecx,', 'eax']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_24]']
mov ['[edx+3Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_24]']
mov ['[ecx+30h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+28h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+18h],', '0Ch']
jnb ['short', 'loc_37A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['[ebp+var_28],', 'eax']
jmp ['short', 'loc_381']
mov ['[ebp+var_28],', '0Ch']
mov ['ecx,', '[ebp+var_28]']
neg ['ecx']
sub ['ecx,', '1']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_2C]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_2C]']
mov ['[ecx+1Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
sub ['edx,', '0Ch']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_30]']
mov ['[eax+34h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_30]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_30]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['byte', 'ptr', '[eax],', '0FFh']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['byte', 'ptr', '[edx+1],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '101h']
mov ['[ecx+2],', 'dx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
add ['ecx,', '600h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+30h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+4],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_437']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '100h']
jnb ['short', 'loc_46B']
mov ['edx,', '[ebp+var_4]']
imul ['edx,', '6']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+8]']
mov ['[ebp+var_14],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_4]']
mov ['[ecx],', 'dl']
mov ['eax,', '[ebp+var_14]']
mov ['byte', 'ptr', '[eax+1],', '1']
push ['0']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_SetSuccessor@8']
jmp ['short', 'loc_42E']
mov ['[ebp+var_C],', '0']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_483']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '19h']
jnb ['loc_52A']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+330h]']
cmp ['edx,', '[ebp+var_C]']
jnz ['short', 'loc_4AA']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_48D']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_4BC']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '8']
jnb ['short', 'loc_525']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', '_kInitBinEsc[edx*2]']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
xor ['edx,', 'edx']
div ['ecx']
mov ['edx,', '4000h']
sub ['edx,', 'eax']
mov ['[ebp+var_18],', 'dx']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '7']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+1038h]']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[edx+eax*2]']
mov ['[ebp+var_1C],', 'ecx']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_50D']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '8']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_10],', '40h']
jnb ['short', 'loc_523']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_1C]']
mov ['dx,', '[ebp+var_18]']
mov ['[ecx+eax*2],', 'dx']
jmp ['short', 'loc_504']
jmp ['short', 'loc_4B3']
jmp ['loc_47A']
mov ['[ebp+var_C],', '0']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_542']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '18h']
jnb ['short', 'loc_5C2']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+333h]']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '3']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_56A']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_548']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_57C']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '20h']
jnb ['short', 'loc_5BD']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '7']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+438h]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[eax+ecx*4]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[eax+2],', '3']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '1']
lea ['edx,', 'ds:28h[ecx*8]']
mov ['eax,', '[ebp+var_20]']
mov ['[eax],', 'dx']
mov ['ecx,', '[ebp+var_20]']
mov ['byte', 'ptr', '[ecx+3],', '7']
jmp ['short', 'loc_573']
jmp ['loc_539']
pop ['edi']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_SetSuccessor@8 proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '0FFFFh']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2],', 'ax']
mov ['edx,', '[ebp+arg_4]']
shr ['edx,', '10h']
and ['edx,', '0FFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'dx']
pop ['ebp']
retn ['8']
endp
_Ppmd8_MakeEscFreq@12 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', '0FFh']
jz ['loc_6E1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx+332h]']
sub ['ecx,', '3']
shl ['ecx,', '7']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+438h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
movzx ['ecx,', 'word', 'ptr', '[edx+2]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx]']
movzx ['edx,', 'byte', 'ptr', '[edx]']
add ['edx,', '1']
imul ['edx,', '0Bh']
cmp ['edx,', 'ecx']
sbb ['ecx,', 'ecx']
neg ['ecx']
lea ['edx,', '[eax+ecx*4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['eax,', 'byte', 'ptr', '[ecx]']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx]']
mov ['ecx,', '[ecx+8]']
movzx ['ecx,', 'byte', 'ptr', '[ecx]']
add ['ecx,', '[ebp+arg_4]']
cmp ['eax,', 'ecx']
sbb ['eax,', 'eax']
neg ['eax']
shl ['eax,', '1']
lea ['ecx,', '[edx+eax*4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['edx,', 'byte', 'ptr', '[eax+1]']
lea ['eax,', '[ecx+edx*4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2]']
sar ['edx,', 'cl']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
sub ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'dx']
xor ['ecx,', 'ecx']
cmp ['[ebp+var_8],', '0']
setz ['cl']
add ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_6F5']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '434h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[ecx],', '1']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_Ppmd8_Update1@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
add ['eax,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+1],', 'al']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
add ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[eax+2],', 'cx']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax-5]']
cmp ['edx,', 'ecx']
jle ['short', 'loc_782']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '6']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_SwapStates@8']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '6']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
cmp ['edx,', '7Ch']
jle ['short', 'loc_782']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Rescale@4']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_NextContext@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_SwapStates@8   proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['dx,', '[eax+4]']
mov ['word', 'ptr', '[ebp+var_8],', 'dx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['ax,', '[eax+4]']
mov ['[ecx+4],', 'ax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx],', 'edx']
mov ['ax,', 'word', 'ptr', '[ebp+var_8]']
mov ['[ecx+4],', 'ax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Rescale@4      proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '5Ch']
push ['edi']
lea ['edi,', '[ebp+var_5C]']
mov ['ecx,', '17h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx]']
mov ['[ebp+var_24],', 'eax']
mov ['cx,', '[edx+4]']
mov ['[ebp+var_20],', 'cx']
jmp ['short', 'loc_865']
mov ['edx,', '[ebp+var_18]']
sub ['edx,', '6']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[ebp+var_14]']
jz ['short', 'loc_884']
mov ['ecx,', '[ebp+var_18]']
sub ['ecx,', '6']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ecx]']
mov ['[edx],', 'eax']
mov ['cx,', '[ecx+4]']
mov ['[edx+4],', 'cx']
jmp ['short', 'loc_85C']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_24]']
mov ['[edx],', 'eax']
mov ['cx,', '[ebp+var_20]']
mov ['[edx+4],', 'cx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
sub ['ecx,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
add ['edx,', '4']
mov ['eax,', '[ebp+var_18]']
mov ['[eax+1],', 'dl']
mov ['ecx,', '[ebp+arg_0]']
xor ['edx,', 'edx']
cmp ['dword', 'ptr', '[ecx+0Ch],', '0']
setnz ['dl']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
add ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1']
mov ['edx,', '[ebp+var_18]']
mov ['[edx+1],', 'cl']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '6']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
mov ['edx,', '[ebp+var_10]']
sub ['edx,', 'ecx']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
add ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1']
mov ['edx,', '[ebp+var_18]']
mov ['[edx+1],', 'cl']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
add ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx-5]']
cmp ['eax,', 'edx']
jle ['short', 'loc_993']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_38],', 'edx']
mov ['ax,', '[ecx+4]']
mov ['[ebp+var_34],', 'ax']
mov ['ecx,', '[ebp+var_2C]']
sub ['ecx,', '6']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[ecx]']
mov ['[edx],', 'eax']
mov ['cx,', '[ecx+4]']
mov ['[edx+4],', 'cx']
mov ['edx,', '[ebp+var_2C]']
sub ['edx,', '6']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_14]']
jz ['short', 'loc_983']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_38+1]']
mov ['edx,', '[ebp+var_2C]']
movzx ['eax,', 'byte', 'ptr', '[edx-5]']
cmp ['ecx,', 'eax']
jg ['short', 'loc_94E']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx],', 'edx']
mov ['ax,', '[ebp+var_34]']
mov ['[ecx+4],', 'ax']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
jnz ['loc_8EF']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
test ['eax,', 'eax']
jnz ['loc_B64']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_40],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_18]']
sub ['edx,', '6']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
test ['ecx,', 'ecx']
jz ['short', 'loc_9BC']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_4]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
sub ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ecx],', 'dl']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['loc_A9E']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx]']
mov ['[ebp+var_54],', 'eax']
mov ['cx,', '[edx+4]']
mov ['[ebp+var_50],', 'cx']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_54+1]']
mov ['eax,', '[ebp+var_10]']
lea ['eax,', '[eax+edx*2-1]']
xor ['edx,', 'edx']
div ['[ebp+var_10]']
mov ['byte', 'ptr', '[ebp+var_54+1],', 'al']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_54+1]']
cmp ['ecx,', '29h']
jle ['short', 'loc_A34']
mov ['byte', 'ptr', '[ebp+var_54+1],', '29h']
mov ['edx,', '[ebp+var_40]']
add ['edx,', '2']
shr ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx+7Dh]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_InsertNode@12']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
and ['eax,', '10h']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_54]']
xor ['edx,', 'edx']
cmp ['ecx,', '40h']
setnl ['dl']
lea ['eax,', '[eax+edx*8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[edx+1],', 'al']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
add ['ecx,', '2']
mov ['[ebp+var_5C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_5C]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+var_5C]']
mov ['edx,', '[ebp+var_54]']
mov ['[ecx],', 'edx']
mov ['ax,', '[ebp+var_50]']
mov ['[ecx+4],', 'ax']
jmp ['loc_B9C']
mov ['ecx,', '[ebp+var_40]']
add ['ecx,', '2']
shr ['ecx,', '1']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
add ['ecx,', '2']
sar ['ecx,', '1']
mov ['[ebp+var_48],', 'ecx']
mov ['edx,', '[ebp+var_44]']
cmp ['edx,', '[ebp+var_48]']
jz ['short', 'loc_ADE']
mov ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ShrinkUnits@16']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
and ['edx,', '0FFFFFFF7h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ecx+1],', 'dl']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
xor ['ecx,', 'ecx']
cmp ['edx,', '40h']
setnl ['cl']
shl ['ecx,', '3']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx]']
movzx ['edx,', 'byte', 'ptr', '[edx+1]']
or ['edx,', 'ecx']
mov ['[eax+1],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '6']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
xor ['eax,', 'eax']
cmp ['ecx,', '40h']
setnl ['al']
shl ['eax,', '3']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx]']
movzx ['ecx,', 'byte', 'ptr', '[ecx+1]']
or ['ecx,', 'eax']
mov ['[edx+1],', 'cl']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
jnz ['short', 'loc_B2C']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_10]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx]']
mov ['[ecx+2],', 'ax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
or ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[eax+1],', 'cl']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+4]']
mov ['[eax+8],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN28']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '5Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_InsertNode@12  proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[eax+edx*4+100h]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+58h]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+eax*4+100h],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+198h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+eax*4+198h],', 'edx']
pop ['ebp']
retn ['0Ch']
endp
_ShrinkUnits@16 proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7Dh]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+7Dh]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+var_8]']
jnz ['short', 'loc_CA7']
mov ['eax,', '[ebp+arg_4]']
jmp ['loc_D46']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+edx*4+100h],', '0']
jz ['short', 'loc_D2E']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_RemoveNode@8']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '0Ch']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_18]']
sub ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
jnz ['short', 'loc_CD9']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_InsertNode@12']
mov ['eax,', '[ebp+var_C]']
jmp ['short', 'loc_D46']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_SplitBlock@16']
mov ['eax,', '[ebp+arg_4]']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_RemoveNode@8   proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+100h]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['edx,', '[edx+4]']
mov ['[ecx+eax*4+100h],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+198h]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+eax*4+198h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_SplitBlock@16  proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+58h]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+58h]']
sub ['ecx,', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+58h]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7Dh]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+58h]']
cmp ['eax,', '[ebp+var_8]']
jz ['short', 'loc_E56']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+58h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[ebp+var_C]']
sub ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_InsertNode@12']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_InsertNode@12']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_NextContext@4  proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['eax,', 'word', 'ptr', '[ecx+4]']
shl ['eax,', '10h']
or ['edx,', 'eax']
mov ['[ebp+var_4],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '0']
jnz ['short', 'loc_ECE']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[edx+3Ch]']
jb ['short', 'loc_ECE']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_EE2']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_UpdateModel@4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_UpdateModel@4  proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '60h']
push ['edi']
lea ['edi,', '[ebp+var_60]']
mov ['ecx,', '18h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['eax,', 'word', 'ptr', '[ecx+4]']
shl ['eax,', '10h']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['al,', '[edx]']
mov ['[ebp+var_1A],', 'al']
mov ['[ebp+var_20],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
cmp ['eax,', '1Fh']
jge ['loc_1040']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jz ['loc_1040']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_FB0']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '2']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
cmp ['ecx,', '20h']
jge ['short', 'loc_FAB']
mov ['edx,', '[ebp+var_20]']
mov ['al,', '[edx+1]']
add ['al,', '1']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx+1],', 'al']
jmp ['loc_1040']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['eax,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', 'eax']
jz ['short', 'loc_1013']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '6']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
movzx ['ecx,', 'byte', 'ptr', '[edx]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_FCC']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
mov ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx-5]']
cmp ['eax,', 'edx']
jl ['short', 'loc_1013']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '6']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['_SwapStates@8']
mov ['edx,', '[ebp+var_20]']
sub ['edx,', '6']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
cmp ['ecx,', '73h']
jge ['short', 'loc_1040']
mov ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
add ['eax,', '2']
mov ['ecx,', '[ebp+var_20]']
mov ['[ecx+1],', 'al']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
add ['eax,', '2']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+2],', 'ax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '0']
jnz ['short', 'loc_10B1']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_10B1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
push ['1']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_CreateSuccessors@16']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '0']
jnz ['short', 'loc_1093']
push ['0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_SetSuccessor@8']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_RestoreModel@8']
jmp ['short', 'loc_10AC']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
call ['_SetSuccessor@8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_24]']
mov ['[ecx+4],', 'edx']
jmp ['loc_1499']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+38h]']
mov ['cl,', '[ecx]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+38h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+38h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+38h]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+38h]']
cmp ['eax,', '[edx+3Ch]']
jb ['short', 'loc_10F9']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_RestoreModel@8']
jmp ['loc_1499']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1135']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ReduceOrder@12']
mov ['[ebp+var_28],', 'eax']
cmp ['[ebp+var_28],', '0']
jnz ['short', 'loc_112D']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_RestoreModel@8']
jmp ['loc_1499']
mov ['eax,', '[ebp+var_28]']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_1176']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+3Ch]']
jnb ['short', 'loc_1176']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_CreateSuccessors@16']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jnz ['short', 'loc_1170']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_RestoreModel@8']
jmp ['loc_1499']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
sub ['edx,', '1']
mov ['[ebp+var_60],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_60]']
mov ['[eax+0Ch],', 'ecx']
cmp ['[ebp+var_60],', '0']
jnz ['short', 'loc_11B5']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+4]']
xor ['eax,', 'eax']
cmp ['edx,', '[ecx]']
setnz ['al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+38h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
sub ['eax,', '[ebp+var_14]']
sub ['eax,', '[ebp+var_18]']
mov ['[ebp+var_10],', 'eax']
movzx ['ecx,', '[ebp+var_1A]']
xor ['edx,', 'edx']
cmp ['ecx,', '40h']
setnl ['dl']
shl ['edx,', '3']
mov ['[ebp+var_19],', 'dl']
jmp ['short', 'loc_11EF']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[edx]']
jz ['loc_1488']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['[ebp+var_30],', 'edx']
cmp ['[ebp+var_30],', '0']
jz ['loc_130B']
mov ['eax,', '[ebp+var_30]']
and ['eax,', '1']
jz ['loc_12E6']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
shr ['ecx,', '1']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_3C]']
movzx ['eax,', 'byte', 'ptr', '[edx+7Dh]']
mov ['[ebp+var_40],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_3C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+7Eh]']
cmp ['[ebp+var_40],', 'edx']
jz ['loc_12E6']
mov ['eax,', '[ebp+var_40]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_AllocUnits@8']
mov ['[ebp+var_44],', 'eax']
cmp ['[ebp+var_44],', '0']
jnz ['short', 'loc_1272']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_RestoreModel@8']
jmp ['loc_1499']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_4C],', 'eax']
mov ['ecx,', '[ebp+var_48]']
mov ['[ebp+var_50],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
mov ['[ebp+var_54],', 'edx']
mov ['eax,', '[ebp+var_4C]']
mov ['ecx,', '[ebp+var_50]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4C]']
mov ['ecx,', '[ebp+var_50]']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_4C]']
mov ['ecx,', '[ebp+var_50]']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '0Ch']
mov ['[ebp+var_50],', 'eax']
mov ['ecx,', '[ebp+var_4C]']
add ['ecx,', '0Ch']
mov ['[ebp+var_4C],', 'ecx']
mov ['edx,', '[ebp+var_54]']
sub ['edx,', '1']
mov ['[ebp+var_54],', 'edx']
jnz ['short', 'loc_128D']
mov ['eax,', '[ebp+var_40]']
push ['eax']
mov ['ecx,', '[ebp+var_48]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_InsertNode@12']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_44]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+var_30]']
imul ['ecx,', '3']
add ['ecx,', '1']
cmp ['ecx,', '[ebp+var_14]']
sbb ['edx,', 'edx']
neg ['edx']
add ['eax,', 'edx']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+2],', 'ax']
jmp ['loc_1394']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_AllocUnits@8']
mov ['[ebp+var_58],', 'eax']
cmp ['[ebp+var_58],', '0']
jnz ['short', 'loc_1331']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_RestoreModel@8']
jmp ['loc_1499']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '2']
mov ['eax,', '[ebp+var_58]']
mov ['ecx,', '[edx]']
mov ['[eax],', 'ecx']
mov ['dx,', '[edx+4]']
mov ['[eax+4],', 'dx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_58]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_58]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
cmp ['eax,', '1Eh']
jge ['short', 'loc_136B']
mov ['ecx,', '[ebp+var_58]']
mov ['dl,', '[ecx+1]']
shl ['dl,', '1']
mov ['eax,', '[ebp+var_58]']
mov ['[eax+1],', 'dl']
jmp ['short', 'loc_1372']
mov ['ecx,', '[ebp+var_58]']
mov ['byte', 'ptr', '[ecx+1],', '78h']
mov ['edx,', '[ebp+var_58]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+10h]']
mov ['edx,', '2']
cmp ['edx,', '[ebp+var_14]']
sbb ['ecx,', 'ecx']
neg ['ecx']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+2],', 'ax']
mov ['eax,', '[ebp+var_18]']
shl ['eax,', '1']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
add ['edx,', '6']
imul ['eax,', 'edx']
mov ['[ebp+var_34],', 'eax']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
add ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_38],', 'ecx']
mov ['edx,', '[ebp+var_38]']
imul ['edx,', '6']
cmp ['[ebp+var_34],', 'edx']
jnb ['short', 'loc_13F3']
mov ['eax,', '[ebp+var_34]']
cmp ['[ebp+var_38],', 'eax']
sbb ['ecx,', 'ecx']
neg ['ecx']
mov ['edx,', '[ebp+var_38]']
shl ['edx,', '2']
cmp ['[ebp+var_34],', 'edx']
sbb ['eax,', 'eax']
add ['eax,', '1']
lea ['ecx,', '[ecx+eax+1]']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
add ['eax,', '4']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+2],', 'ax']
jmp ['short', 'loc_1434']
mov ['edx,', '[ebp+var_38]']
imul ['edx,', '9']
cmp ['edx,', '[ebp+var_34]']
sbb ['eax,', 'eax']
neg ['eax']
mov ['ecx,', '[ebp+var_38]']
imul ['ecx,', '0Ch']
cmp ['ecx,', '[ebp+var_34]']
sbb ['edx,', 'edx']
neg ['edx']
lea ['eax,', '[eax+edx+4]']
mov ['ecx,', '[ebp+var_38]']
imul ['ecx,', '0Fh']
cmp ['ecx,', '[ebp+var_34]']
sbb ['edx,', 'edx']
neg ['edx']
add ['eax,', 'edx']
mov ['[ebp+var_34],', 'eax']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
add ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+2],', 'cx']
mov ['eax,', '[ebp+var_30]']
imul ['eax,', '6']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+4]']
lea ['eax,', '[edx+eax+6]']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+var_5C]']
push ['edx']
call ['_SetSuccessor@8']
mov ['eax,', '[ebp+var_5C]']
mov ['cl,', '[ebp+var_1A]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_5C]']
mov ['al,', 'byte', 'ptr', '[ebp+var_34]']
mov ['[edx+1],', 'al']
movzx ['ecx,', '[ebp+var_19]']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
or ['eax,', 'ecx']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+1],', 'al']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_C]']
mov ['[eax],', 'dl']
jmp ['loc_11E6']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+4],', 'ecx']
pop ['edi']
add ['esp,', '60h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_AllocUnits@8   proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+eax*4+100h],', '0']
jz ['short', 'loc_14E3']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_RemoveNode@8']
jmp ['short', 'loc_152E']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+58h]']
imul ['edx,', '0Ch']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+34h]']
sub ['edx,', '[ecx+30h]']
cmp ['[ebp+var_4],', 'edx']
ja ['short', 'loc_1521']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
add ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+30h],', 'eax']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_152E']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_AllocUnitsRare@8']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_AllocUnitsRare@8 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+28h],', '0']
jnz ['short', 'loc_158E']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_GlueFreeBlocks@4']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+edx*4+100h],', '0']
jz ['short', 'loc_158E']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_RemoveNode@8']
jmp ['loc_1634']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '26h']
jnz ['short', 'loc_15FC']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+58h]']
imul ['eax,', '0Ch']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+28h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+3Ch]']
sub ['eax,', '[edx+38h]']
cmp ['eax,', '[ebp+var_C]']
jbe ['short', 'loc_15F0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
sub ['edx,', '[ebp+var_C]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax+3Ch],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_15F7']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_1634']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+eax*4+100h],', '0']
jz ['short', 'loc_1594']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_RemoveNode@8']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_SplitBlock@16']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_GlueFreeBlocks@4 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
lea ['eax,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+28h],', '2000h']
push ['98h']
push ['0']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '198h']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+30h]']
cmp ['edx,', '[ecx+34h]']
jz ['short', 'loc_16B0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_16C2']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '26h']
jnb ['loc_1758']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+100h]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+eax*4+100h],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_1753']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_1C]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_1748']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_18]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '4']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ecx+8]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
jnz ['short', 'loc_1748']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+var_20]']
add ['edx,', '[eax+8]']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ecx+8],', 'edx']
mov ['edx,', '[ebp+var_20]']
mov ['dword', 'ptr', '[edx+8],', '0']
jmp ['short', 'loc_1713']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_18],', 'ecx']
jmp ['short', 'loc_16ED']
jmp ['loc_16B9']
mov ['edx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[edx],', '0']
cmp ['[ebp+var_8],', '0']
jz ['loc_1823']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_28],', 'ecx']
cmp ['[ebp+var_28],', '0']
jnz ['short', 'loc_178B']
jmp ['short', 'loc_1761']
jmp ['short', 'loc_17A4']
mov ['edx,', '[ebp+var_28]']
sub ['edx,', '80h']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '600h']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_28],', '80h']
jbe ['short', 'loc_17BE']
push ['25h']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_InsertNode@12']
jmp ['short', 'loc_178D']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_28]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7Dh]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx+58h]']
cmp ['eax,', '[ebp+var_28]']
jz ['short', 'loc_180D']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx+58h]']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_28]']
sub ['ecx,', '[ebp+var_2C]']
sub ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_InsertNode@12']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_InsertNode@12']
jmp ['loc_1761']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN22']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_RestoreModel@8 proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2Ch]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+40h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+38h],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_18B1']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_4]']
jz ['loc_1955']
mov ['eax,', '[ebp+var_4]']
mov ['cl,', '[eax]']
sub ['cl,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'cl']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1935']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
and ['edx,', '10h']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
xor ['eax,', 'eax']
cmp ['ecx,', '40h']
setnl ['al']
lea ['ecx,', '[edx+eax*8]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+1],', 'cl']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '2']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['ax,', '[eax+4]']
mov ['[ecx+4],', 'ax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_SpecialFreeUnit@8']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+3]']
add ['ecx,', '0Bh']
shr ['ecx,', '3']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+3],', 'cl']
jmp ['short', 'loc_1950']
push ['0']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
add ['ecx,', '3']
sar ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Refresh@16']
jmp ['loc_18A8']
jmp ['short', 'loc_1960']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[eax]']
jz ['short', 'loc_19DB']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
test ['eax,', 'eax']
jnz ['short', 'loc_198E']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+3]']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+3]']
sar ['ecx,', '1']
sub ['edx,', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+3],', 'dl']
jmp ['short', 'loc_19D6']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
add ['edx,', '4']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['cx,', 'word', 'ptr', '[ebp+var_C]']
mov ['[eax+2],', 'cx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_C]']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
lea ['eax,', 'ds:80h[ecx*4]']
cmp ['edx,', 'eax']
jle ['short', 'loc_19D6']
push ['1']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
add ['edx,', '2']
sar ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Refresh@16']
jmp ['loc_1957']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+44h],', '0']
jz ['short', 'loc_19F9']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_GetUsedMemory@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+24h]']
shr ['edx,', '1']
cmp ['eax,', 'edx']
jnb ['short', 'loc_1A04']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_RestartModel@4']
jmp ['short', 'loc_1A6B']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jz ['short', 'loc_1A21']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+8]']
mov ['[edx+4],', 'eax']
jmp ['short', 'loc_1A04']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_CutOff@12']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ExpandTextArea@4']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_GetUsedMemory@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+24h]']
shr ['edx,', '2']
imul ['edx,', '3']
cmp ['eax,', 'edx']
ja ['short', 'loc_1A21']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+28h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['[ecx+0Ch],', 'eax']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_SpecialFreeUnit@8 proc near            
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+3Ch]']
jz ['short', 'loc_1A9F']
push ['0']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_InsertNode@12']
jmp ['short', 'loc_1AAE']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
add ['edx,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+3Ch],', 'edx']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_ExpandTextArea@4 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0B8h']
push ['edi']
lea ['edi,', '[ebp+var_B8]']
mov ['ecx,', '2Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
push ['98h']
push ['0']
lea ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+30h]']
cmp ['eax,', '[edx+34h]']
jz ['short', 'loc_1B16']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+3Ch]']
mov ['[ebp+var_AC],', 'ecx']
jmp ['short', 'loc_1B3C']
mov ['edx,', '[ebp+var_AC]']
mov ['eax,', '[edx+8]']
imul ['eax,', '0Ch']
add ['eax,', '[ebp+var_AC]']
mov ['[ebp+var_AC],', 'eax']
mov ['ecx,', '[ebp+var_AC]']
cmp ['dword', 'ptr', '[ecx],', '0FFFFFFFFh']
jnz ['short', 'loc_1B88']
mov ['edx,', '[ebp+var_AC]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_AC]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx+7Dh]']
mov ['ecx,', '[ebp+eax*4+Dst]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_AC]']
mov ['eax,', '[edx+8]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+eax+7Dh]']
mov ['[ebp+eax*4+Dst],', 'ecx']
jmp ['short', 'loc_1B24']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_AC]']
mov ['[ecx+3Ch],', 'edx']
mov ['[ebp+var_A8],', '0']
jmp ['short', 'loc_1BAF']
mov ['eax,', '[ebp+var_A8]']
add ['eax,', '1']
mov ['[ebp+var_A8],', 'eax']
cmp ['[ebp+var_A8],', '26h']
jnb ['loc_1C93']
mov ['ecx,', '[ebp+var_A8]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx*4+100h]']
mov ['[ebp+var_B0],', 'eax']
mov ['ecx,', '[ebp+var_A8]']
cmp ['[ebp+ecx*4+Dst],', '0']
jz ['loc_1C8E']
mov ['edx,', '[ebp+var_B0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_B4],', 'eax']
mov ['ecx,', '[ebp+var_B4]']
cmp ['dword', 'ptr', '[ecx],', '0']
jnz ['short', 'loc_1C7A']
mov ['edx,', '[ebp+var_B0]']
mov ['eax,', '[ebp+var_B4]']
mov ['ecx,', '[eax+4]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+var_B0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_B4],', 'eax']
mov ['ecx,', '[ebp+var_A8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4+198h]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_A8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*4+198h],', 'eax']
mov ['eax,', '[ebp+var_A8]']
mov ['ecx,', '[ebp+eax*4+Dst]']
sub ['ecx,', '1']
mov ['[ebp+var_B8],', 'ecx']
mov ['edx,', '[ebp+var_A8]']
mov ['eax,', '[ebp+var_B8]']
mov ['[ebp+edx*4+Dst],', 'eax']
cmp ['[ebp+var_B8],', '0']
jnz ['short', 'loc_1C75']
jmp ['short', 'loc_1C7A']
jmp ['loc_1BF4']
mov ['ecx,', '[ebp+var_B4]']
add ['ecx,', '4']
mov ['[ebp+var_B0],', 'ecx']
jmp ['loc_1BD2']
jmp ['loc_1BA0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN17']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0B8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_Refresh@16     proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '2']
shr ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ShrinkUnits@16']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
mov ['edx,', '[ebp+arg_C]']
lea ['eax,', 'ds:10h[edx*4]']
and ['ecx,', 'eax']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
xor ['edx,', 'edx']
cmp ['eax,', '40h']
setnl ['dl']
lea ['eax,', '[ecx+edx*8]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
sub ['edx,', 'ecx']
mov ['[ebp+var_8],', 'edx']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
add ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_C]']
shr ['eax,', 'cl']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_18]']
mov ['[ecx+1],', 'dl']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_18]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '6']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
add ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_C]']
shr ['eax,', 'cl']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_1C]']
mov ['[ecx+1],', 'dl']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_1C]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
xor ['eax,', 'eax']
cmp ['edx,', '40h']
setnl ['al']
shl ['eax,', '3']
or ['eax,', '[ebp+var_10]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
jnz ['short', 'loc_1D8E']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_C]']
shr ['edx,', 'cl']
add ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+2],', 'dx']
mov ['ecx,', '[ebp+arg_4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_10]']
mov ['[ecx+1],', 'dl']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_CutOff@12      proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['loc_1EE6']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '2']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx+4]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+3Ch]']
jb ['short', 'loc_1ED2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[eax+18h]']
jnb ['short', 'loc_1EA4']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx+4]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_CutOff@12']
push ['eax']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_SetSuccessor@8']
jmp ['short', 'loc_1EAF']
push ['0']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_SetSuccessor@8']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax+4]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
jnz ['short', 'loc_1ECA']
cmp ['[ebp+arg_8],', '9']
ja ['short', 'loc_1ED2']
mov ['eax,', '[ebp+arg_4]']
jmp ['loc_20B8']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_SpecialFreeUnit@8']
xor ['eax,', 'eax']
jmp ['loc_20B8']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
add ['edx,', '2']
shr ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MoveUnitsUp@12']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
imul ['ecx,', '6']
mov ['edx,', '[ebp+arg_4]']
add ['ecx,', '[edx+4]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_1F31']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', '6']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ecx+4]']
jb ['loc_1FD8']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx+4]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['ecx,', '[edx+3Ch]']
jnb ['short', 'loc_1F8D']
mov ['eax,', '[ebp+var_4]']
imul ['eax,', '6']
mov ['ecx,', '[ebp+arg_4]']
add ['eax,', '[ecx+4]']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
push ['0']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_SetSuccessor@8']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_SwapStates@8']
jmp ['short', 'loc_1FD3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[eax+18h]']
jnb ['short', 'loc_1FC8']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx+4]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_CutOff@12']
push ['eax']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_SetSuccessor@8']
jmp ['short', 'loc_1FD3']
push ['0']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_SetSuccessor@8']
jmp ['loc_1F28']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['[ebp+var_4],', 'edx']
jz ['loc_20B5']
cmp ['[ebp+arg_8],', '0']
jz ['loc_20B5']
mov ['eax,', '[ebp+arg_4]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_4]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_4],', '0']
jge ['short', 'loc_202D']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_FreeUnits@12']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_SpecialFreeUnit@8']
xor ['eax,', 'eax']
jmp ['loc_20B8']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_208F']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
and ['ecx,', '10h']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
xor ['edx,', 'edx']
cmp ['eax,', '40h']
setnl ['dl']
lea ['eax,', '[ecx+edx*8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+1],', 'al']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
mov ['ecx,', '[edx]']
mov ['[eax],', 'ecx']
mov ['dx,', '[edx+4]']
mov ['[eax+4],', 'dx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FreeUnits@12']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+3]']
add ['ecx,', '0Bh']
shr ['ecx,', '3']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+3],', 'cl']
jmp ['short', 'loc_20B5']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '4']
xor ['eax,', 'eax']
cmp ['ecx,', 'edx']
setnle ['al']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Refresh@16']
mov ['eax,', '[ebp+arg_4]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_FreeUnits@12   proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7Dh]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_InsertNode@12']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
_MoveUnitsUp@12 proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+7Dh]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+3Ch]']
add ['eax,', '4000h']
cmp ['[ebp+arg_4],', 'eax']
ja ['short', 'loc_2149']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+ecx*4+100h]']
jbe ['short', 'loc_2151']
mov ['eax,', '[ebp+arg_4]']
jmp ['loc_21EC']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_RemoveNode@8']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '0Ch']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '0Ch']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_14]']
sub ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
jnz ['short', 'loc_2173']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[eax+3Ch]']
jz ['short', 'loc_21D0']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_InsertNode@12']
jmp ['short', 'loc_21E9']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+58h]']
imul ['eax,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+3Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+3Ch],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_GetUsedMemory@4 proc near              
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_222D']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '26h']
jnb ['short', 'loc_2253']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+58h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
imul ['edx,', '[ecx+eax*4+198h]']
add ['edx,', '[ebp+var_4]']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_2224']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+34h]']
sub ['ecx,', '[eax+30h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
sub ['eax,', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+3Ch]']
sub ['ecx,', '[edx+38h]']
sub ['eax,', 'ecx']
mov ['edx,', '[ebp+var_4]']
imul ['edx,', '0Ch']
sub ['eax,', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_CreateSuccessors@16 proc near          
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '88h']
push ['ebx']
push ['edi']
lea ['edi,', '[ebp+var_88]']
mov ['ecx,', '22h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['eax,', 'word', 'ptr', '[ecx+4]']
shl ['eax,', '10h']
or ['edx,', 'eax']
mov ['[ebp+var_18],', 'edx']
mov ['[ebp+var_68],', '0']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_22EC']
mov ['ecx,', '[ebp+var_68]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ebp+ecx*4+var_60],', 'eax']
mov ['ecx,', '[ebp+var_68]']
add ['ecx,', '1']
mov ['[ebp+var_68],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jz ['loc_2401']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+arg_C],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_231A']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_70],', 'edx']
mov ['[ebp+arg_8],', '0']
jmp ['loc_23B5']
mov ['eax,', '[ebp+arg_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_237C']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_70],', 'eax']
jmp ['short', 'loc_2338']
mov ['ecx,', '[ebp+var_70]']
add ['ecx,', '6']
mov ['[ebp+var_70],', 'ecx']
mov ['edx,', '[ebp+var_70]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
movzx ['ecx,', 'byte', 'ptr', '[edx]']
cmp ['eax,', 'ecx']
jz ['short', 'loc_234D']
jmp ['short', 'loc_232F']
mov ['edx,', '[ebp+var_70]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
cmp ['eax,', '73h']
jge ['short', 'loc_237A']
mov ['ecx,', '[ebp+var_70]']
mov ['dl,', '[ecx+1]']
add ['dl,', '1']
mov ['eax,', '[ebp+var_70]']
mov ['[eax+1],', 'dl']
mov ['ecx,', '[ebp+arg_C]']
mov ['dx,', '[ecx+2]']
add ['dx,', '1']
mov ['eax,', '[ebp+arg_C]']
mov ['[eax+2],', 'dx']
jmp ['short', 'loc_23B5']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '2']
mov ['[ebp+var_70],', 'ecx']
mov ['edx,', '[ebp+var_70]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ecx+8]']
movzx ['ecx,', 'byte', 'ptr', '[edx]']
neg ['ecx']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_70]']
movzx ['edx,', 'byte', 'ptr', '[edx+1]']
xor ['ebx,', 'ebx']
cmp ['edx,', '18h']
setl ['bl']
and ['ecx,', 'ebx']
add ['eax,', 'ecx']
mov ['ecx,', '[ebp+var_70]']
mov ['[ecx+1],', 'al']
mov ['edx,', '[ebp+var_70]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+var_70]']
movzx ['edx,', 'word', 'ptr', '[ecx+4]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['[ebp+var_6C],', 'eax']
mov ['eax,', '[ebp+var_6C]']
cmp ['eax,', '[ebp+var_18]']
jz ['short', 'loc_23E9']
mov ['ecx,', '[ebp+var_6C]']
mov ['[ebp+arg_C],', 'ecx']
cmp ['[ebp+var_68],', '0']
jnz ['short', 'loc_23E7']
mov ['eax,', '[ebp+arg_C]']
jmp ['loc_259D']
jmp ['short', 'loc_2401']
mov ['edx,', '[ebp+var_68]']
mov ['eax,', '[ebp+var_70]']
mov ['[ebp+edx*4+var_60],', 'eax']
mov ['ecx,', '[ebp+var_68]']
add ['ecx,', '1']
mov ['[ebp+var_68],', 'ecx']
jmp ['loc_22EC']
mov ['edx,', '[ebp+var_18]']
mov ['al,', '[edx]']
mov ['byte', 'ptr', '[ebp+var_C],', 'al']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '1']
push ['ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
call ['_SetSuccessor@8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
xor ['eax,', 'eax']
cmp ['edx,', '40h']
setnl ['al']
shl ['eax,', '4']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_C]']
xor ['edx,', 'edx']
cmp ['ecx,', '40h']
setnl ['dl']
lea ['eax,', '[eax+edx*8]']
mov ['[ebp+var_11],', 'al']
mov ['ecx,', '[ebp+arg_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
test ['edx,', 'edx']
jnz ['short', 'loc_2457']
mov ['eax,', '[ebp+arg_C]']
mov ['cl,', '[eax+3]']
mov ['byte', 'ptr', '[ebp+var_C+1],', 'cl']
jmp ['loc_24DD']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_7C],', 'eax']
jmp ['short', 'loc_246B']
mov ['ecx,', '[ebp+var_7C]']
add ['ecx,', '6']
mov ['[ebp+var_7C],', 'ecx']
mov ['edx,', '[ebp+var_7C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_C]']
cmp ['eax,', 'ecx']
jz ['short', 'loc_247B']
jmp ['short', 'loc_2462']
mov ['edx,', '[ebp+var_7C]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
sub ['eax,', '1']
mov ['[ebp+var_74],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+arg_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
sub ['edx,', 'ecx']
sub ['edx,', '[ebp+var_74]']
mov ['[ebp+var_78],', 'edx']
mov ['edx,', '[ebp+var_74]']
shl ['edx,', '1']
cmp ['edx,', '[ebp+var_78]']
ja ['short', 'loc_24BC']
mov ['eax,', '[ebp+var_74]']
imul ['eax,', '5']
cmp ['[ebp+var_78],', 'eax']
sbb ['ecx,', 'ecx']
neg ['ecx']
mov ['[ebp+var_84],', 'ecx']
jmp ['short', 'loc_24D1']
mov ['edx,', '[ebp+var_78]']
mov ['eax,', '[ebp+var_74]']
lea ['eax,', '[eax+edx*2-3]']
xor ['edx,', 'edx']
div ['[ebp+var_78]']
mov ['[ebp+var_84],', 'eax']
mov ['ecx,', '[ebp+var_84]']
add ['ecx,', '1']
mov ['byte', 'ptr', '[ebp+var_C+1],', 'cl']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+34h]']
cmp ['ecx,', '[eax+30h]']
jz ['short', 'loc_2511']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
sub ['eax,', '0Ch']
mov ['[ebp+var_88],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_88]']
mov ['[ecx+34h],', 'edx']
mov ['eax,', '[ebp+var_88]']
mov ['[ebp+var_80],', 'eax']
jmp ['short', 'loc_2545']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+100h],', '0']
jz ['short', 'loc_252D']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_RemoveNode@8']
mov ['[ebp+var_80],', 'eax']
jmp ['short', 'loc_2545']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_AllocUnitsRare@8']
mov ['[ebp+var_80],', 'eax']
cmp ['[ebp+var_80],', '0']
jnz ['short', 'loc_2545']
xor ['eax,', 'eax']
jmp ['short', 'loc_259D']
mov ['ecx,', '[ebp+var_80]']
mov ['byte', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+var_80]']
mov ['al,', '[ebp+var_11]']
mov ['[edx+1],', 'al']
mov ['ecx,', '[ebp+var_80]']
add ['ecx,', '2']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx],', 'edx']
mov ['ax,', '[ebp+var_8]']
mov ['[ecx+4],', 'ax']
mov ['ecx,', '[ebp+var_80]']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+var_68]']
sub ['eax,', '1']
mov ['[ebp+var_68],', 'eax']
mov ['ecx,', '[ebp+var_80]']
push ['ecx']
mov ['edx,', '[ebp+var_68]']
mov ['eax,', '[ebp+edx*4+var_60]']
push ['eax']
call ['_SetSuccessor@8']
mov ['ecx,', '[ebp+var_80]']
mov ['[ebp+arg_C],', 'ecx']
cmp ['[ebp+var_68],', '0']
jnz ['loc_24DD']
mov ['eax,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN34']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['ebx']
add ['esp,', '88h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_ReduceOrder@12 proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+38h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
call ['_SetSuccessor@8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2660']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'edx']
mov ['[ebp+arg_4],', '0']
jmp ['loc_2712']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jnz ['short', 'loc_2671']
mov ['eax,', '[ebp+arg_8]']
jmp ['loc_2820']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_26EB']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['eax,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', 'eax']
jz ['short', 'loc_26BC']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '6']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
movzx ['ecx,', 'byte', 'ptr', '[edx]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_26A0']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
cmp ['eax,', '73h']
jge ['short', 'loc_26E9']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
add ['edx,', '2']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+1],', 'dl']
mov ['ecx,', '[ebp+arg_8]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
add ['edx,', '2']
mov ['eax,', '[ebp+arg_8]']
mov ['[eax+2],', 'dx']
jmp ['short', 'loc_2712']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '2']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
xor ['ecx,', 'ecx']
cmp ['edx,', '20h']
setl ['cl']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+1],', 'al']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[edx+4]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
jz ['short', 'loc_2729']
jmp ['short', 'loc_274A']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_SetSuccessor@8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'ecx']
jmp ['loc_263F']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[edx+4]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
cmp ['ecx,', '[ebp+var_C]']
ja ['short', 'loc_27B1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
push ['0']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_CreateSuccessors@16']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_279B']
push ['0']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_SetSuccessor@8']
jmp ['short', 'loc_27A8']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_SetSuccessor@8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+0Ch],', '1']
jnz ['short', 'loc_27F4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+4]']
jnz ['short', 'loc_27F4']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[edx+4]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
call ['_SetSuccessor@8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+38h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[edx+4]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
jnz ['short', 'loc_280D']
xor ['eax,', 'eax']
jmp ['short', 'loc_2820']
mov ['ecx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[ecx+2]']
mov ['edx,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[edx+4]']
shl ['ecx,', '10h']
or ['eax,', 'ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_Ppmd8_Update1_0@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['eax,', 'word', 'ptr', '[ecx+2]']
xor ['ecx,', 'ecx']
cmp ['edx,', 'eax']
setnl ['cl']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+14h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1Ch],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
add ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[edx+2],', 'ax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
add ['edx,', '4']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_4]']
mov ['[ecx+1],', 'dl']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_4]']
cmp ['eax,', '7Ch']
jle ['short', 'loc_28B2']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Rescale@4']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_NextContext@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_Ppmd8_UpdateBin@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['eax,', 'byte', 'ptr', '[ecx+1]']
xor ['ecx,', 'ecx']
cmp ['eax,', '0C4h']
setl ['cl']
add ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ecx+1],', 'dl']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+14h],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_NextContext@4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_Ppmd8_Update2@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
add ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ecx+2],', 'dx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
add ['ecx,', '4']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_4]']
mov ['[eax+1],', 'cl']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4]']
cmp ['edx,', '7Ch']
jle ['short', 'loc_297E']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Rescale@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
mov ['[ecx+1Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_UpdateModel@4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[edx],', 'ecx']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
