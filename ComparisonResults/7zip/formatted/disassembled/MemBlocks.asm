?AllocateSpace@CMemBlockManager@@QAE_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?FreeSpace@CMemBlockManager@@QAEXXZ']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+4],', '4']
jb ['short', 'loc_31']
cmp ['[ebp+arg_0],', '1']
jnb ['short', 'loc_38']
xor ['al,', 'al']
jmp ['loc_CA']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
imul ['edx,', '[ecx+4]']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
xor ['edx,', 'edx']
div ['dword', 'ptr', '[ecx+4]']
cmp ['eax,', '[ebp+arg_0]']
jz ['short', 'loc_59']
xor ['al,', 'al']
jmp ['short', 'loc_CA']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_MidAlloc@4']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jnz ['short', 'loc_73']
xor ['al,', 'al']
jmp ['short', 'loc_CA']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_99']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[eax+4]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '1']
cmp ['edx,', '[ebp+arg_0]']
jnb ['short', 'loc_B4']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_C]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_84']
mov ['eax,', '[ebp+var_C]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['[ecx+8],', 'eax']
mov ['al,', '1']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?FreeSpace@CMemBlockManager@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_MidFree@4']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+8],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?AllocateBlock@CMemBlockManager@@QAEPAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jnz ['short', 'loc_144']
xor ['eax,', 'eax']
jmp ['short', 'loc_15E']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?FreeBlock@CMemBlockManager@@QAEXPAX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_186']
jmp ['short', 'loc_19A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?AllocateSpace@CMemBlockManagerMt@@QAEHII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_0]']
jbe ['short', 'loc_1C6']
mov ['eax,', '80070057h']
jmp ['short', 'loc_207']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?AllocateSpace@CMemBlockManager@@QAE_NI@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_1E0']
mov ['eax,', '8007000Eh']
jmp ['short', 'loc_207']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '24h']
call ['?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '24h']
call ['?Create@CSemaphore@NSynchronization@NWindows@@QAEIII@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?AllocateSpaceAlways@CMemBlockManagerMt@@QAEHII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_0]']
jbe ['short', 'loc_23D']
mov ['eax,', '80070057h']
jmp ['short', 'loc_274']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?AllocateSpace@CMemBlockManagerMt@@QAEHII@Z']
test ['eax,', 'eax']
jnz ['short', 'loc_255']
xor ['eax,', 'eax']
jmp ['short', 'loc_274']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_264']
mov ['eax,', '8007000Eh']
jmp ['short', 'loc_274']
mov ['ecx,', '[ebp+arg_0]']
sub ['ecx,', '[ebp+arg_4]']
shr ['ecx,', '1']
add ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
jmp ['short', 'loc_23D']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?FreeSpace@CMemBlockManagerMt@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '24h']
call ['?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ']
mov ['ecx,', '[ebp+var_4]']
call ['?FreeSpace@CMemBlockManager@@QAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '0Ch']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?AllocateBlock@CMemBlockManager@@QAEPAXXZ']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ']
mov ['eax,', '[ebp+var_20]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_3C1']
jmp ['short', 'loc_405']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '0Ch']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
call ['??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?FreeBlock@CMemBlockManager@@QAEXPAX@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ']
movzx ['edx,', '[ebp+arg_4]']
test ['edx,', 'edx']
jz ['short', 'loc_405']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '24h']
call ['?Release@CSemaphore@NSynchronization@NWindows@@QAEIXZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Free@CMemBlocks@@AAEXPAVCMemBlockManagerMt@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
test ['eax,', 'eax']
jbe ['short', 'loc_489']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?Back@?$CRecordVector@PAX@@QAEAAPAXXZ']
mov ['eax,', '[eax]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z']
mov ['ecx,', '[ebp+var_4]']
call ['?DeleteBack@?$CRecordVector@PAX@@QAEXXZ']
jmp ['short', 'loc_45E']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['dword', 'ptr', '[ecx+14h],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?FreeOpt@CMemBlocks@@QAEXPAVCMemBlockManagerMt@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?Free@CMemBlocks@@AAEXPAVCMemBlockManagerMt@@@Z']
mov ['ecx,', '[ebp+var_4]']
call ['?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?WriteToStream@CMemBlocks@@QBEJIPAUISequentialOutStream@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[eax+14h]']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_537']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_8],', '0']
ja ['short', 'loc_547']
cmp ['[ebp+var_C],', '0']
jbe ['loc_5C8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
xor ['eax,', 'eax']
mov ['[ebp+var_20],', 'edx']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+var_1C]']
ja ['short', 'loc_570']
jb ['short', 'loc_56A']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+var_20]']
jnb ['short', 'loc_570']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
cmp ['[ebp+var_10],', 'eax']
jb ['short', 'loc_584']
mov ['eax,', '80004005h']
jmp ['short', 'loc_5CA']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CRecordVector@PAX@@QBEABQAXI@Z']
mov ['eax,', '[eax]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_5AE']
mov ['eax,', '[ebp+var_18]']
jmp ['short', 'loc_5CA']
mov ['edx,', '[ebp+var_14]']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', 'edx']
mov ['edx,', '[ebp+var_8]']
sbb ['edx,', 'eax']
mov ['[ebp+var_C],', 'ecx']
mov ['[ebp+var_8],', 'edx']
jmp ['loc_52E']
xor ['eax,', 'eax']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?FreeBlock@CMemLockBlocks@@QAEXHPAVCMemBlockManagerMt@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+18h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CRecordVector@PAX@@QAEAAPAXI@Z']
mov ['eax,', '[eax]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CRecordVector@PAX@@QAEAAPAXI@Z']
mov ['dword', 'ptr', '[eax],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Free@CMemLockBlocks@@QAEXPAVCMemBlockManagerMt@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
test ['eax,', 'eax']
jbe ['short', 'loc_66C']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
sub ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?FreeBlock@CMemLockBlocks@@QAEXHPAVCMemBlockManagerMt@@@Z']
mov ['ecx,', '[ebp+var_4]']
call ['?DeleteBack@?$CRecordVector@PAX@@QAEXXZ']
jmp ['short', 'loc_63E']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['dword', 'ptr', '[ecx+14h],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?SwitchToNoLockMode@CMemLockBlocks@@QAEHPAVCMemBlockManagerMt@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+18h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_6E4']
mov ['ecx,', '[ebp+var_4]']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
test ['eax,', 'eax']
jbe ['short', 'loc_6DD']
mov ['ecx,', '[ebp+var_4]']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?ReleaseLockedBlocks@CMemBlockManagerMt@@QAEHH@Z']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_6DD']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_6E6']
mov ['edx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[edx+18h],', '0']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Detach@CMemLockBlocks@@QAEXAAU1@PAVCMemBlockManagerMt@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?Free@CMemLockBlocks@@QAEXPAVCMemBlockManagerMt@@@Z']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['al,', '[edx+18h]']
mov ['[ecx+18h],', 'al']
mov ['[ebp+var_C],', '0']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+arg_4]']
call ['?GetBlockSize@CMemBlockManager@@QBEIXZ']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_763']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
cmp ['[ebp+var_14],', 'eax']
jnb ['short', 'loc_7DF']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+14h]']
ja ['short', 'loc_7A7']
jb ['short', 'loc_78E']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[edx+10h]']
jnb ['short', 'loc_7A7']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CRecordVector@PAX@@QAEAAPAXI@Z']
mov ['edx,', '[eax]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['?Add@?$CRecordVector@PAX@@QAEIQAX@Z']
jmp ['short', 'loc_7B7']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?FreeBlock@CMemLockBlocks@@QAEXHPAVCMemBlockManagerMt@@@Z']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CRecordVector@PAX@@QAEAAPAXI@Z']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_10]']
xor ['ecx,', 'ecx']
add ['eax,', '[ebp+var_C]']
adc ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'ecx']
jmp ['loc_75A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+10h]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[eax+14h]']
mov ['[edx+14h],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Free@CMemLockBlocks@@QAEXPAVCMemBlockManagerMt@@@Z']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Close@CSemaphore@NSynchronization@NWindows@@QAEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_HandlePtr_Close@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Create@CSemaphore@NSynchronization@NWindows@@QAEIII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_Semaphore_Create@12']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ']
endp
__ehhandler$?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ']
endp
__ehhandler$?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?FreeBlock@CMemBlockManagerMt@@QAEXPAX_N@Z']
jmp ['___CxxFrameHandler3']
endp
??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[edx]']
call ['?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+lpCriticalSection],', '0CCCCCCCCh']
mov ['[ebp+lpCriticalSection],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+lpCriticalSection]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__EnterCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
call ['?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+lpCriticalSection],', '0CCCCCCCCh']
mov ['[ebp+lpCriticalSection],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+lpCriticalSection]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__LeaveCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Release@CSemaphore@NSynchronization@NWindows@@QAEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_Semaphore_Release1@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?ReleaseLockedBlocks@CMemBlockManagerMt@@QAEHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '24h']
call ['?Release@CSemaphore@NSynchronization@NWindows@@QAEII@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Release@CSemaphore@NSynchronization@NWindows@@QAEII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_Semaphore_ReleaseN@8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?GetBlockSize@CMemBlockManager@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Size@?$CRecordVector@PAX@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?ClearAndFree@?$CRecordVector@PAX@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?DeleteBack@?$CRecordVector@PAX@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['edx,', '[ebp+arg_0]']
mov ['[eax+ecx*4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Back@?$CRecordVector@PAX@@QAEAAPAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
lea ['eax,', '[eax+ecx*4-4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+Dst],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+4]']
cmp ['edx,', '[ecx+8]']
jnz ['loc_C9C']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
shr ['ecx,', '2']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
lea ['ecx,', '[eax+ecx+1]']
mov ['[ebp+var_8],', 'ecx']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '4']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_C77']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+Dst]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+8],', 'ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
