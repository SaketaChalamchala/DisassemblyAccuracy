_AesGenTables@0 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '30h']
push ['edi']
lea ['edi,', '[ebp+var_30]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_134']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '100h']
jnb ['short', 'loc_152']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', '_Sbox[ecx]']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['ds:_InvS[edx],', 'al']
jmp ['short', 'loc_12B']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_164']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '100h']
jnb ['loc_35C']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', '_Sbox[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '1']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '80h']
neg ['edx']
sbb ['edx,', 'edx']
and ['edx,', '1Bh']
xor ['ecx,', 'edx']
and ['ecx,', '0FFh']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+var_C]']
xor ['eax,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '8']
or ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '10h']
or ['ecx,', 'edx']
mov ['eax,', '[ebp+var_10]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['ds:_T[edx*4],', 'ecx']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '8']
or ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '10h']
or ['eax,', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '18h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['ds:dword_17C0[ecx*4],', 'eax']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '8']
or ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '10h']
or ['edx,', 'eax']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '18h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ds:dword_1BC0[eax*4],', 'edx']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '8']
or ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '10h']
or ['ecx,', 'edx']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['ds:dword_1FC0[edx*4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'ds:_InvS[eax]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
shl ['edx,', '1']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '80h']
neg ['eax']
sbb ['eax,', 'eax']
and ['eax,', '1Bh']
xor ['edx,', 'eax']
and ['edx,', '0FFh']
mov ['[ebp+var_18],', 'edx']
mov ['ecx,', '[ebp+var_18]']
shl ['ecx,', '1']
mov ['edx,', '[ebp+var_18]']
and ['edx,', '80h']
neg ['edx']
sbb ['edx,', 'edx']
and ['edx,', '1Bh']
xor ['ecx,', 'edx']
and ['ecx,', '0FFh']
mov ['[ebp+var_1C],', 'ecx']
mov ['eax,', '[ebp+var_1C]']
shl ['eax,', '1']
mov ['ecx,', '[ebp+var_1C]']
and ['ecx,', '80h']
neg ['ecx']
sbb ['ecx,', 'ecx']
and ['ecx,', '1Bh']
xor ['eax,', 'ecx']
and ['eax,', '0FFh']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_20]']
xor ['edx,', '[ebp+var_14]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_20]']
xor ['eax,', '[ebp+var_18]']
xor ['eax,', '[ebp+var_14]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_20]']
xor ['ecx,', '[ebp+var_1C]']
xor ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_20]']
xor ['edx,', '[ebp+var_1C]']
xor ['edx,', '[ebp+var_18]']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_24]']
shl ['eax,', '8']
or ['eax,', '[ebp+var_30]']
mov ['ecx,', '[ebp+var_2C]']
shl ['ecx,', '10h']
or ['eax,', 'ecx']
mov ['edx,', '[ebp+var_28]']
shl ['edx,', '18h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['ds:_D[ecx*4],', 'eax']
mov ['edx,', '[ebp+var_30]']
shl ['edx,', '8']
or ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+var_24]']
shl ['eax,', '10h']
or ['edx,', 'eax']
mov ['ecx,', '[ebp+var_2C]']
shl ['ecx,', '18h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ds:dword_27C0[eax*4],', 'edx']
mov ['ecx,', '[ebp+var_28]']
shl ['ecx,', '8']
or ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ebp+var_30]']
shl ['edx,', '10h']
or ['ecx,', 'edx']
mov ['eax,', '[ebp+var_24]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['ds:dword_2BC0[edx*4],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
shl ['eax,', '8']
or ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_28]']
shl ['ecx,', '10h']
or ['eax,', 'ecx']
mov ['edx,', '[ebp+var_30]']
shl ['edx,', '18h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['ds:dword_2FC0[ecx*4],', 'eax']
jmp ['loc_15B']
mov ['dword', 'ptr', 'ds:_g_AesCbc_Encode,', 'offset', '@AesCbc_Encode@12']
mov ['dword', 'ptr', 'ds:_g_AesCbc_Decode,', 'offset', '@AesCbc_Decode@12']
mov ['dword', 'ptr', 'ds:_g_AesCtr_Code,', 'offset', '@AesCtr_Code@12']
call ['_CPU_Is_Aes_Supported@0']
test ['eax,', 'eax']
jz ['short', 'loc_3A1']
mov ['dword', 'ptr', 'ds:_g_AesCbc_Encode,', 'offset', '@AesCbc_Encode_Intel@12']
mov ['dword', 'ptr', 'ds:_g_AesCbc_Decode,', 'offset', '@AesCbc_Decode_Intel@12']
mov ['dword', 'ptr', 'ds:_g_AesCtr_Code,', 'offset', '@AesCtr_Code_Intel@12']
pop ['edi']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
@Aes_SetKey_Enc@12 proc near            
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1Ch']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '2']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '1']
add ['edx,', '3']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_422']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_43A']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['ecx,', '[ecx]']
mov ['[eax+edx*4],', 'ecx']
jmp ['short', 'loc_410']
jmp ['short', 'loc_445']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+var_10]']
jnb ['loc_55D']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+ecx*4-4]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_C]']
xor ['edx,', 'edx']
div ['[ebp+arg_0]']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_4DA']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
movzx ['ecx,', '_Sbox[ecx]']
mov ['eax,', '[ebp+var_C]']
xor ['edx,', 'edx']
div ['[ebp+arg_0]']
movzx ['edx,', '_Rcon[eax]']
xor ['ecx,', 'edx']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
movzx ['edx,', '_Sbox[eax]']
shl ['edx,', '8']
or ['ecx,', 'edx']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
movzx ['edx,', '_Sbox[eax]']
shl ['edx,', '10h']
or ['ecx,', 'edx']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '0FFh']
movzx ['edx,', '_Sbox[eax]']
shl ['edx,', '18h']
or ['ecx,', 'edx']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_540']
cmp ['[ebp+arg_0],', '6']
jbe ['short', 'loc_540']
cmp ['[ebp+var_18],', '4']
jnz ['short', 'loc_540']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '0FFh']
movzx ['ecx,', '_Sbox[eax]']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '8']
and ['edx,', '0FFh']
movzx ['eax,', '_Sbox[edx]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
movzx ['eax,', '_Sbox[edx]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
movzx ['eax,', '_Sbox[edx]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+ecx*4]']
xor ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+ecx*4],', 'eax']
jmp ['loc_43C']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
@Aes_SetKey_Dec@12 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['edx,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
call ['@Aes_SetKey_Enc@12']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '14h']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '20h']
mov ['[ebp+var_4],', 'edx']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_5BF']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_10]']
jnb ['short', 'loc_646']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
and ['edx,', '0FFh']
movzx ['eax,', '_Sbox[edx]']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
movzx ['edx,', '_Sbox[ecx]']
mov ['eax,', 'ds:_D[eax*4]']
xor ['eax,', 'ds:dword_27C0[edx*4]']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
movzx ['edx,', '_Sbox[ecx]']
xor ['eax,', 'ds:dword_2BC0[edx*4]']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
movzx ['edx,', '_Sbox[ecx]']
xor ['eax,', 'ds:dword_2FC0[edx*4]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+ecx*4],', 'eax']
jmp ['loc_5B6']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_AesCbc_Init@8  proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_67A']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '4']
jnb ['short', 'loc_694']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['esi,', '[ebp+arg_4]']
mov ['eax,', '[esi+eax*4]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_671']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
@AesCbc_Encode@12 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_6CA']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '10h']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['loc_760']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[edx]']
xor ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[eax+4]']
xor ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ecx+8]']
xor ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[edx+0Ch]']
xor ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '10h']
push ['edx']
call ['_Aes_Encode@12']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+0Ch],', 'edx']
jmp ['loc_6B8']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_Aes_Encode@12  proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_38],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '10h']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
xor ['edx,', '[ecx]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+4]']
xor ['edx,', '[ecx+4]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
xor ['edx,', '[ecx+8]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0Ch]']
xor ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '10h']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+var_18]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_14]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', 'ds:_T[ecx*4]']
xor ['eax,', 'ds:dword_17C0[edx*4]']
mov ['ecx,', '[ebp+var_10]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
xor ['eax,', 'ds:dword_1BC0[ecx*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
xor ['eax,', 'ds:dword_1FC0[edx*4]']
mov ['ecx,', '[ebp+arg_0]']
xor ['eax,', '[ecx]']
mov ['[ebp+var_30],', 'eax']
mov ['edx,', '[ebp+var_14]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_10]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', 'ds:_T[edx*4]']
xor ['ecx,', 'ds:dword_17C0[eax*4]']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
xor ['ecx,', 'ds:dword_1BC0[edx*4]']
mov ['eax,', '[ebp+var_18]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
xor ['ecx,', 'ds:dword_1FC0[eax*4]']
mov ['edx,', '[ebp+arg_0]']
xor ['ecx,', '[edx+4]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+var_10]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', 'ds:_T[eax*4]']
xor ['edx,', 'ds:dword_17C0[ecx*4]']
mov ['eax,', '[ebp+var_18]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
xor ['edx,', 'ds:dword_1BC0[eax*4]']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
xor ['edx,', 'ds:dword_1FC0[ecx*4]']
mov ['eax,', '[ebp+arg_0]']
xor ['edx,', '[eax+8]']
mov ['[ebp+var_28],', 'edx']
mov ['ecx,', '[ebp+var_C]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_18]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', 'ds:_T[ecx*4]']
xor ['eax,', 'ds:dword_17C0[edx*4]']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
xor ['eax,', 'ds:dword_1BC0[ecx*4]']
mov ['edx,', '[ebp+var_10]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
xor ['eax,', 'ds:dword_1FC0[edx*4]']
mov ['ecx,', '[ebp+arg_0]']
xor ['eax,', '[ecx+0Ch]']
mov ['[ebp+var_24],', 'eax']
mov ['edx,', '[ebp+var_38]']
sub ['edx,', '1']
mov ['[ebp+var_38],', 'edx']
jnz ['short', 'loc_943']
jmp ['loc_A93']
mov ['eax,', '[ebp+var_30]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_2C]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', 'ds:_T[eax*4]']
xor ['edx,', 'ds:dword_17C0[ecx*4]']
mov ['eax,', '[ebp+var_28]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
xor ['edx,', 'ds:dword_1BC0[eax*4]']
mov ['ecx,', '[ebp+var_24]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
xor ['edx,', 'ds:dword_1FC0[ecx*4]']
mov ['eax,', '[ebp+arg_0]']
xor ['edx,', '[eax+10h]']
mov ['[ebp+var_18],', 'edx']
mov ['ecx,', '[ebp+var_2C]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_28]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', 'ds:_T[ecx*4]']
xor ['eax,', 'ds:dword_17C0[edx*4]']
mov ['ecx,', '[ebp+var_24]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
xor ['eax,', 'ds:dword_1BC0[ecx*4]']
mov ['edx,', '[ebp+var_30]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
xor ['eax,', 'ds:dword_1FC0[edx*4]']
mov ['ecx,', '[ebp+arg_0]']
xor ['eax,', '[ecx+14h]']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_28]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_24]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', 'ds:_T[edx*4]']
xor ['ecx,', 'ds:dword_17C0[eax*4]']
mov ['edx,', '[ebp+var_30]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
xor ['ecx,', 'ds:dword_1BC0[edx*4]']
mov ['eax,', '[ebp+var_2C]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
xor ['ecx,', 'ds:dword_1FC0[eax*4]']
mov ['edx,', '[ebp+arg_0]']
xor ['ecx,', '[edx+18h]']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_24]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_30]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', 'ds:_T[eax*4]']
xor ['edx,', 'ds:dword_17C0[ecx*4]']
mov ['eax,', '[ebp+var_2C]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
xor ['edx,', 'ds:dword_1BC0[eax*4]']
mov ['ecx,', '[ebp+var_28]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
xor ['edx,', 'ds:dword_1FC0[ecx*4]']
mov ['eax,', '[ebp+arg_0]']
xor ['edx,', '[eax+1Ch]']
mov ['[ebp+var_C],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '20h']
mov ['[ebp+arg_0],', 'ecx']
jmp ['loc_7F0']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '10h']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+var_30]']
and ['eax,', '0FFh']
movzx ['ecx,', '_Sbox[eax]']
mov ['edx,', '[ebp+var_2C]']
shr ['edx,', '8']
and ['edx,', '0FFh']
movzx ['eax,', '_Sbox[edx]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_28]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
movzx ['eax,', '_Sbox[edx]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_24]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
movzx ['eax,', '_Sbox[edx]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
xor ['ecx,', '[edx]']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['ecx,', '[ebp+var_2C]']
and ['ecx,', '0FFh']
movzx ['edx,', '_Sbox[ecx]']
mov ['eax,', '[ebp+var_28]']
shr ['eax,', '8']
and ['eax,', '0FFh']
movzx ['ecx,', '_Sbox[eax]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_24]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
movzx ['ecx,', '_Sbox[eax]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_30]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
movzx ['ecx,', '_Sbox[eax]']
shl ['ecx,', '18h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
xor ['edx,', '[eax+4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[ebp+var_28]']
and ['edx,', '0FFh']
movzx ['eax,', '_Sbox[edx]']
mov ['ecx,', '[ebp+var_24]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
movzx ['edx,', '_Sbox[ecx]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+var_30]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
movzx ['edx,', '_Sbox[ecx]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+var_2C]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
movzx ['edx,', '_Sbox[ecx]']
shl ['edx,', '18h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
xor ['eax,', '[ecx+8]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+var_24]']
and ['eax,', '0FFh']
movzx ['ecx,', '_Sbox[eax]']
mov ['edx,', '[ebp+var_30]']
shr ['edx,', '8']
and ['edx,', '0FFh']
movzx ['eax,', '_Sbox[edx]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_2C]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
movzx ['eax,', '_Sbox[edx]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_28]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
movzx ['eax,', '_Sbox[edx]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
xor ['ecx,', '[edx+0Ch]']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+0Ch],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
@AesCbc_Decode@12 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '3Ch']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_3C]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_C],', 'edx']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_CA8']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '10h']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['loc_D4B']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+var_14],', 'eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
lea ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '10h']
push ['eax']
call ['_Aes_Decode@12']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
xor ['edx,', '[ebp+var_38]']
mov ['eax,', '[ebp+var_C]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
xor ['edx,', '[ebp+var_34]']
mov ['eax,', '[ebp+var_C]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
xor ['edx,', '[ebp+var_30]']
mov ['eax,', '[ebp+var_C]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0Ch]']
xor ['edx,', '[ebp+var_2C]']
mov ['eax,', '[ebp+var_C]']
mov ['[eax+0Ch],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_1C]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_18]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+0Ch],', 'edx']
jmp ['loc_C96']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '3Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_Aes_Decode@12  proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '38h']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_38],', 'ecx']
mov ['edx,', '[ebp+var_38]']
shl ['edx,', '3']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx*4+10h]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx]']
xor ['ecx,', '[eax]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+4]']
xor ['ecx,', '[eax+4]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+8]']
xor ['ecx,', '[eax+8]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+0Ch]']
xor ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
sub ['edx,', '20h']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+var_18]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', 'ds:_D[eax*4]']
xor ['edx,', 'ds:dword_27C0[ecx*4]']
mov ['eax,', '[ebp+var_10]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
xor ['edx,', 'ds:dword_2BC0[eax*4]']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
xor ['edx,', 'ds:dword_2FC0[ecx*4]']
mov ['eax,', '[ebp+arg_0]']
xor ['edx,', '[eax+10h]']
mov ['[ebp+var_30],', 'edx']
mov ['ecx,', '[ebp+var_14]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_18]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', 'ds:_D[ecx*4]']
xor ['eax,', 'ds:dword_27C0[edx*4]']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
xor ['eax,', 'ds:dword_2BC0[ecx*4]']
mov ['edx,', '[ebp+var_10]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
xor ['eax,', 'ds:dword_2FC0[edx*4]']
mov ['ecx,', '[ebp+arg_0]']
xor ['eax,', '[ecx+14h]']
mov ['[ebp+var_2C],', 'eax']
mov ['edx,', '[ebp+var_10]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', 'ds:_D[edx*4]']
xor ['ecx,', 'ds:dword_27C0[eax*4]']
mov ['edx,', '[ebp+var_18]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
xor ['ecx,', 'ds:dword_2BC0[edx*4]']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
xor ['ecx,', 'ds:dword_2FC0[eax*4]']
mov ['edx,', '[ebp+arg_0]']
xor ['ecx,', '[edx+18h]']
mov ['[ebp+var_28],', 'ecx']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', 'ds:_D[eax*4]']
xor ['edx,', 'ds:dword_27C0[ecx*4]']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
xor ['edx,', 'ds:dword_2BC0[eax*4]']
mov ['ecx,', '[ebp+var_18]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
xor ['edx,', 'ds:dword_2FC0[ecx*4]']
mov ['eax,', '[ebp+arg_0]']
xor ['edx,', '[eax+1Ch]']
mov ['[ebp+var_24],', 'edx']
mov ['ecx,', '[ebp+var_38]']
sub ['ecx,', '1']
mov ['[ebp+var_38],', 'ecx']
jnz ['short', 'loc_F79']
jmp ['loc_10BF']
mov ['edx,', '[ebp+var_30]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_24]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', 'ds:_D[edx*4]']
xor ['ecx,', 'ds:dword_27C0[eax*4]']
mov ['edx,', '[ebp+var_28]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
xor ['ecx,', 'ds:dword_2BC0[edx*4]']
mov ['eax,', '[ebp+var_2C]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
xor ['ecx,', 'ds:dword_2FC0[eax*4]']
mov ['edx,', '[ebp+arg_0]']
xor ['ecx,', '[edx]']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_30]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['edx,', 'ds:_D[eax*4]']
xor ['edx,', 'ds:dword_27C0[ecx*4]']
mov ['eax,', '[ebp+var_24]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
xor ['edx,', 'ds:dword_2BC0[eax*4]']
mov ['ecx,', '[ebp+var_28]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
xor ['edx,', 'ds:dword_2FC0[ecx*4]']
mov ['eax,', '[ebp+arg_0]']
xor ['edx,', '[eax+4]']
mov ['[ebp+var_14],', 'edx']
mov ['ecx,', '[ebp+var_28]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_2C]']
shr ['edx,', '8']
and ['edx,', '0FFh']
mov ['eax,', 'ds:_D[ecx*4]']
xor ['eax,', 'ds:dword_27C0[edx*4]']
mov ['ecx,', '[ebp+var_30]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
xor ['eax,', 'ds:dword_2BC0[ecx*4]']
mov ['edx,', '[ebp+var_24]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
xor ['eax,', 'ds:dword_2FC0[edx*4]']
mov ['ecx,', '[ebp+arg_0]']
xor ['eax,', '[ecx+8]']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+var_24]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_28]']
shr ['eax,', '8']
and ['eax,', '0FFh']
mov ['ecx,', 'ds:_D[edx*4]']
xor ['ecx,', 'ds:dword_27C0[eax*4]']
mov ['edx,', '[ebp+var_2C]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
xor ['ecx,', 'ds:dword_2BC0[edx*4]']
mov ['eax,', '[ebp+var_30]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
xor ['ecx,', 'ds:dword_2FC0[eax*4]']
mov ['edx,', '[ebp+arg_0]']
xor ['ecx,', '[edx+0Ch]']
mov ['[ebp+var_C],', 'ecx']
jmp ['loc_E1E']
mov ['eax,', '[ebp+var_30]']
and ['eax,', '0FFh']
movzx ['ecx,', 'ds:_InvS[eax]']
mov ['edx,', '[ebp+var_24]']
shr ['edx,', '8']
and ['edx,', '0FFh']
movzx ['eax,', 'ds:_InvS[edx]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_28]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
movzx ['eax,', 'ds:_InvS[edx]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_2C]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
movzx ['eax,', 'ds:_InvS[edx]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
xor ['ecx,', '[edx]']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['ecx,', '[ebp+var_2C]']
and ['ecx,', '0FFh']
movzx ['edx,', 'ds:_InvS[ecx]']
mov ['eax,', '[ebp+var_30]']
shr ['eax,', '8']
and ['eax,', '0FFh']
movzx ['ecx,', 'ds:_InvS[eax]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_24]']
shr ['eax,', '10h']
and ['eax,', '0FFh']
movzx ['ecx,', 'ds:_InvS[eax]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_28]']
shr ['eax,', '18h']
and ['eax,', '0FFh']
movzx ['ecx,', 'ds:_InvS[eax]']
shl ['ecx,', '18h']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
xor ['edx,', '[eax+4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[ebp+var_28]']
and ['edx,', '0FFh']
movzx ['eax,', 'ds:_InvS[edx]']
mov ['ecx,', '[ebp+var_2C]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
movzx ['edx,', 'ds:_InvS[ecx]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+var_30]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
movzx ['edx,', 'ds:_InvS[ecx]']
shl ['edx,', '10h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+var_24]']
shr ['ecx,', '18h']
and ['ecx,', '0FFh']
movzx ['edx,', 'ds:_InvS[ecx]']
shl ['edx,', '18h']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
xor ['eax,', '[ecx+8]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+var_24]']
and ['eax,', '0FFh']
movzx ['ecx,', 'ds:_InvS[eax]']
mov ['edx,', '[ebp+var_28]']
shr ['edx,', '8']
and ['edx,', '0FFh']
movzx ['eax,', 'ds:_InvS[edx]']
shl ['eax,', '8']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_2C]']
shr ['edx,', '10h']
and ['edx,', '0FFh']
movzx ['eax,', 'ds:_InvS[edx]']
shl ['eax,', '10h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+var_30]']
shr ['edx,', '18h']
and ['edx,', '0FFh']
movzx ['eax,', 'ds:_InvS[edx]']
shl ['eax,', '18h']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
xor ['ecx,', '[edx+0Ch]']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+0Ch],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
@AesCtr_Code@12 proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '40h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_40]']
mov ['ecx,', '10h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_C],', 'edx']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_12CF']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
cmp ['[ebp+arg_0],', '0']
jz ['loc_1366']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_8]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx],', '0']
jnz ['short', 'loc_12FD']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_8]']
push ['edx']
lea ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '10h']
push ['ecx']
call ['_Aes_Encode@12']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_2C],', 'edx']
mov ['[ebp+var_40],', '0']
jmp ['short', 'loc_133B']
mov ['eax,', '[ebp+var_40]']
add ['eax,', '1']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '10h']
jge ['short', 'loc_1361']
mov ['ecx,', '[ebp+var_40]']
movzx ['edx,', 'byte', 'ptr', '[ebp+ecx+var_38]']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
xor ['ecx,', 'edx']
mov ['edx,', '[ebp+var_C]']
mov ['[edx],', 'cl']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_1332']
jmp ['loc_12C6']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '40h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
