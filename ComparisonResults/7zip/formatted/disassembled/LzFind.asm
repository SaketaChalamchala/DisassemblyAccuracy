_MatchFinder_GetPointerToCurrentPos@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax]']
pop ['ebp']
retn ['4']
endp
_MatchFinder_GetNumAvailableBytes@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
pop ['ebp']
retn ['4']
endp
_MatchFinder_ReduceOffsets@8 proc near  
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
sub ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'ecx']
pop ['ebp']
retn ['8']
endp
_MatchFinder_MoveBlock@4 proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0Ch]']
sub ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+40h]']
mov ['esi,', 'esp']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
sub ['eax,', '[edx+40h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+40h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_MatchFinder_NeedMove@4 proc near       
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1Fh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_E2']
xor ['eax,', 'eax']
jmp ['short', 'loc_FE']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+3Ch]']
mov ['edx,', '[ebp+arg_0]']
sub ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['[ecx+44h],', 'eax']
sbb ['eax,', 'eax']
add ['eax,', '1']
pop ['ebp']
retn ['4']
endp
_MatchFinder_ReadIfRequired@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1Ch]']
test ['ecx,', 'ecx']
jz ['short', 'loc_120']
jmp ['short', 'loc_13D']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
cmp ['[edx+44h],', 'ecx']
jb ['short', 'loc_13D']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinder_ReadBlock@4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_MatchFinder_ReadBlock@4 proc near      
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1Ch]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_17F']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+5Ch],', '0']
jz ['short', 'loc_184']
jmp ['loc_278']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1Fh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1E2']
mov ['edx,', '[ebp+arg_0]']
or ['eax,', '0FFFFFFFFh']
sub ['eax,', '[edx+0Ch]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ecx+4Ch]']
jbe ['short', 'loc_1AF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4Ch]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4Ch]']
sub ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+4Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
add ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+4Ch],', '0']
jnz ['short', 'loc_1DD']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+1Ch],', '1']
jmp ['loc_278']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+0Ch]']
sub ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx]']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+3Ch]']
sub ['eax,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'eax']
jnz ['short', 'loc_20C']
jmp ['short', 'loc_278']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+38h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
mov ['edx,', '[ecx]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+5Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+5Ch],', '0']
jz ['short', 'loc_23F']
jmp ['short', 'loc_278']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_24E']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+1Ch],', '1']
jmp ['short', 'loc_278']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
add ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+0Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+0Ch]']
sub ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['eax,', '[ecx+44h]']
jbe ['short', 'loc_273']
jmp ['short', 'loc_278']
jmp ['loc_1E2']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN16']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_MatchFinder_Construct@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+34h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+1Fh],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+24h],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinder_SetDefaultSettings@4']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_311']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '100h']
jnb ['short', 'loc_364']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_332']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '8']
jnb ['short', 'loc_355']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '1']
sub ['edx,', '1']
not ['edx']
and ['edx,', '0EDB88320h']
xor ['ecx,', 'edx']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_329']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+eax*4+60h],', 'edx']
jmp ['short', 'loc_308']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_MatchFinder_SetDefaultSettings@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+30h],', '20h']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+1Dh],', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+48h],', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+1Eh],', '0']
pop ['ebp']
retn ['4']
endp
_MatchFinder_Free@8 proc near           
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinder_FreeThisClassMemory@8']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_LzInWindow_Free@8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_LzInWindow_Free@8 proc near            
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1Fh]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_415']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+34h],', '0']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_MatchFinder_FreeThisClassMemory@8 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+24h],', '0']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_MatchFinder_Create@24 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0E0000000h']
jbe ['short', 'loc_4A7']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinder_Free@8']
xor ['eax,', 'eax']
jmp ['loc_6E8']
mov ['edx,', '[ebp+arg_4]']
shr ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+arg_4],', '0C0000000h']
jb ['short', 'loc_4C3']
mov ['eax,', '[ebp+arg_4]']
shr ['eax,', '3']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_4D5']
cmp ['[ebp+arg_4],', '80000000h']
jb ['short', 'loc_4D5']
mov ['ecx,', '[ebp+arg_4]']
shr ['ecx,', '2']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '[ebp+arg_C]']
add ['edx,', '[ebp+arg_10]']
shr ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
lea ['ecx,', '[eax+edx+80000h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_4]']
lea ['ecx,', '[eax+edx+1]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+40h],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+44h],', 'eax']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_LzInWindow_Create@12']
test ['eax,', 'eax']
jz ['loc_6D9']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax+20h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+54h],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+48h],', '2']
jnz ['short', 'loc_550']
mov ['[ebp+var_C],', '0FFFFh']
jmp ['short', 'loc_5BF']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '1']
or ['edx,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '2']
or ['eax,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
shr ['ecx,', '4']
or ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '8']
or ['edx,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
or ['ecx,', '0FFFFh']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '1000000h']
jbe ['short', 'loc_5BF']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+48h],', '3']
jnz ['short', 'loc_5B7']
mov ['[ebp+var_C],', '0FFFFFFh']
jmp ['short', 'loc_5BF']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx+2Ch],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+48h],', '2']
jbe ['short', 'loc_5EB']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+54h]']
add ['eax,', '400h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+54h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+48h],', '3']
jbe ['short', 'loc_606']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+54h]']
add ['ecx,', '10000h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+54h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+48h],', '4']
jbe ['short', 'loc_621']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+54h]']
add ['edx,', '100000h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+54h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ecx+54h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+50h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx+58h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1Dh]']
test ['edx,', 'edx']
jz ['short', 'loc_661']
mov ['eax,', '[ebp+var_14]']
shl ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+24h],', '0']
jz ['short', 'loc_688']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+460h]']
cmp ['ecx,', '[ebp+var_10]']
jnz ['short', 'loc_688']
mov ['eax,', '1']
jmp ['short', 'loc_6E8']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinder_FreeThisClassMemory@8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx+460h],', 'edx']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['_AllocRefs@8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+24h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+24h],', '0']
jz ['short', 'loc_6D9']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+58h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
lea ['edx,', '[ecx+edx*4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+28h],', 'edx']
mov ['eax,', '1']
jmp ['short', 'loc_6E8']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_Free@8']
xor ['eax,', 'eax']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
endp
_LzInWindow_Create@12 proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+40h]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+44h]']
add ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1Fh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_739']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+3Ch],', 'eax']
mov ['eax,', '1']
jmp ['short', 'loc_78D']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+34h],', '0']
jz ['short', 'loc_74D']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+3Ch]']
cmp ['eax,', '[ebp+var_4]']
jz ['short', 'loc_781']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_LzInWindow_Free@8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+3Ch],', 'ecx']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+34h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
xor ['eax,', 'eax']
cmp ['dword', 'ptr', '[edx+34h],', '0']
setnz ['al']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_AllocRefs@8    proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shr ['ecx,', '2']
cmp ['ecx,', '[ebp+arg_0]']
jz ['short', 'loc_7C4']
xor ['eax,', 'eax']
jmp ['short', 'loc_7DC']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_MatchFinder_Init@4 proc near           
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+58h]']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_82F']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+var_C]']
jnb ['short', 'loc_846']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+eax*4],', '0']
jmp ['short', 'loc_826']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+14h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+5Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+1Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_ReadBlock@4']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinder_SetLimits@4']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_MatchFinder_SetLimits@4 proc near      
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
or ['ecx,', '0FFFFFFFFh']
sub ['ecx,', '[eax+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+18h]']
sub ['ecx,', '[eax+14h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_4]']
jnb ['short', 'loc_8F4']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+0Ch]']
sub ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+44h]']
ja ['short', 'loc_91D']
cmp ['[ebp+var_8],', '0']
jbe ['short', 'loc_91B']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_929']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[eax+44h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_4]']
jnb ['short', 'loc_937']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+0Ch]']
sub ['eax,', '[edx+4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ecx+20h]']
jbe ['short', 'loc_95A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx+10h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+8],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_MatchFinder_Normalize3@12 proc near    
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_9A6']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_8]']
jnb ['short', 'loc_9E2']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+arg_0]']
ja ['short', 'loc_9CB']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_9D4']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_99D']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_GetMatchesSpec1@40 proc near           
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_14]']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_10]']
lea ['edx,', '[ecx+eax*4+4]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_14]']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_10]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_C],', '0']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_1C]']
mov ['edx,', '[ebp+arg_1C]']
sub ['edx,', '1']
mov ['[ebp+arg_1C],', 'edx']
test ['ecx,', 'ecx']
jnz ['short', 'loc_A53']
mov ['[ebp+var_24],', '1']
jmp ['short', 'loc_A5A']
mov ['[ebp+var_24],', '0']
cmp ['[ebp+var_24],', '0']
jnz ['short', 'loc_A68']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+arg_18]']
jb ['short', 'loc_A82']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_20]']
jmp ['loc_BDE']
mov ['eax,', '[ebp+arg_14]']
sub ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_14]']
cmp ['[ebp+arg_14],', 'ecx']
sbb ['edx,', 'edx']
and ['edx,', '[ebp+arg_18]']
add ['eax,', 'edx']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_10]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_10]']
jnb ['short', 'loc_AB9']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_28],', 'edx']
jmp ['short', 'loc_ABF']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jnz ['loc_B86']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[ebp+arg_0]']
jz ['short', 'loc_B31']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_B31']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[ebp+arg_0]']
jz ['short', 'loc_B31']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jz ['short', 'loc_B2F']
jmp ['short', 'loc_B31']
jmp ['short', 'loc_B06']
mov ['eax,', '[ebp+arg_24]']
cmp ['eax,', '[ebp+var_20]']
jnb ['short', 'loc_B86']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+arg_24],', 'ecx']
mov ['edx,', '[ebp+arg_20]']
mov ['eax,', '[ebp+arg_24]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_20]']
add ['ecx,', '4']
mov ['[ebp+arg_20],', 'ecx']
mov ['edx,', '[ebp+var_14]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_20]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_20]']
add ['ecx,', '4']
mov ['[ebp+arg_20],', 'ecx']
mov ['edx,', '[ebp+var_20]']
cmp ['edx,', '[ebp+arg_0]']
jnz ['short', 'loc_B86']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_20]']
jmp ['short', 'loc_BDE']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_C]']
add ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jge ['short', 'loc_BBD']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_BD9']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_C],', 'eax']
jmp ['loc_A31']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['28h']
endp
_Bt3Zip_MatchFinder_GetMatches@8 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '3']
jnb ['short', 'loc_C2C']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_MovePos@4']
xor ['eax,', 'eax']
jmp ['loc_D17']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['ecx,', '[ebp+arg_0]']
xor ['eax,', '[ecx+edx*4+60h]']
and ['eax,', '0FFFFh']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[eax+ecx*4]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+4]']
mov ['[ecx+edx*4],', 'eax']
mov ['[ebp+var_4],', '0']
push ['2']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_GetMatchesSpec1@40']
sub ['eax,', '[ebp+arg_4]']
sar ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_18]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_18]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_D14']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinder_CheckLimits@4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_MatchFinder_CheckLimits@4 proc near    
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+4],', '0FFFFFFFFh']
jnz ['short', 'loc_D45']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinder_Normalize@4']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+1Ch]']
test ['eax,', 'eax']
jnz ['short', 'loc_D6D']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+0Ch]']
sub ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['[ecx+44h],', 'eax']
jnz ['short', 'loc_D6D']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_CheckAndMoveAndRead@4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+14h]']
cmp ['edx,', '[ecx+18h]']
jnz ['short', 'loc_D85']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinder_SetLimits@4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_MatchFinder_CheckAndMoveAndRead@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinder_NeedMove@4']
test ['eax,', 'eax']
jz ['short', 'loc_DB9']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinder_MoveBlock@4']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_ReadBlock@4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_MatchFinder_Normalize@4 proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinder_GetSubValue@4']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+460h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_MatchFinder_Normalize3@12']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinder_ReduceOffsets@8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_MatchFinder_GetSubValue@4 proc near    
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[eax+4]']
sub ['eax,', '[ecx+50h]']
sub ['eax,', '1']
and ['eax,', '0FFFFFC00h']
pop ['ebp']
retn ['4']
endp
_MatchFinder_MovePos@4 proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_E90']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinder_CheckLimits@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_Hc3Zip_MatchFinder_GetMatches@8 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '3']
jnb ['short', 'loc_EDC']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_MovePos@4']
xor ['eax,', 'eax']
jmp ['loc_FBA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['ecx,', '[ebp+arg_0]']
xor ['eax,', '[ecx+edx*4+60h]']
and ['eax,', '0FFFFh']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[eax+ecx*4]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+4]']
mov ['[ecx+edx*4],', 'eax']
push ['2']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_Hc_GetMatchesSpec@40']
sub ['eax,', '[ebp+arg_4]']
sar ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[edx+8]']
jnz ['short', 'loc_FB7']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinder_CheckLimits@4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Hc_GetMatchesSpec@40 proc near         
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_1C]']
mov ['edx,', '[ebp+arg_1C]']
sub ['edx,', '1']
mov ['[ebp+arg_1C],', 'edx']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1015']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_101C']
mov ['[ebp+var_10],', '0']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_102A']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_18]']
jb ['short', 'loc_1032']
mov ['eax,', '[ebp+arg_20]']
jmp ['loc_10F8']
mov ['ecx,', '[ebp+arg_C]']
sub ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_14]']
sub ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
cmp ['[ebp+arg_14],', 'eax']
sbb ['ecx,', 'ecx']
and ['ecx,', '[ebp+arg_18]']
add ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax+edx*4]']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+arg_24]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '[ebp+arg_24]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jnz ['loc_10F3']
mov ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jnz ['short', 'loc_10F3']
mov ['[ebp+var_C],', '0']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+arg_0]']
jz ['short', 'loc_10B3']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_C]']
add ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jz ['short', 'loc_10B1']
jmp ['short', 'loc_10B3']
jmp ['short', 'loc_1088']
mov ['ecx,', '[ebp+arg_24]']
cmp ['ecx,', '[ebp+var_C]']
jnb ['short', 'loc_10F3']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+arg_24],', 'edx']
mov ['eax,', '[ebp+arg_20]']
mov ['ecx,', '[ebp+arg_24]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_20]']
add ['edx,', '4']
mov ['[ebp+arg_20],', 'edx']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_20]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_20]']
add ['edx,', '4']
mov ['[ebp+arg_20],', 'edx']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+arg_0]']
jnz ['short', 'loc_10F3']
mov ['eax,', '[ebp+arg_20]']
jmp ['short', 'loc_10F8']
jmp ['loc_FF3']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['28h']
endp
_Bt3Zip_MatchFinder_Skip@8 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '3']
jnb ['short', 'loc_1137']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_MovePos@4']
jmp ['loc_1203']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['ecx,', '[ebp+arg_0]']
xor ['eax,', '[ecx+edx*4+60h]']
and ['eax,', '0FFFFh']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[eax+ecx*4]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+4]']
mov ['[ecx+edx*4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_SkipMatchesSpec@32']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_14]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_1203']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinder_CheckLimits@4']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
jnz ['loc_111A']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_SkipMatchesSpec@32 proc near           
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_14]']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_10]']
lea ['edx,', '[ecx+eax*4+4]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_14]']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_10]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_C],', '0']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_1C]']
mov ['edx,', '[ebp+arg_1C]']
sub ['edx,', '1']
mov ['[ebp+arg_1C],', 'edx']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1293']
mov ['[ebp+var_24],', '1']
jmp ['short', 'loc_129A']
mov ['[ebp+var_24],', '0']
cmp ['[ebp+var_24],', '0']
jnz ['short', 'loc_12A8']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+arg_18]']
jb ['short', 'loc_12BF']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
jmp ['loc_13BA']
mov ['eax,', '[ebp+arg_14]']
sub ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_14]']
cmp ['[ebp+arg_14],', 'ecx']
sbb ['edx,', 'edx']
and ['edx,', '[ebp+arg_18]']
add ['eax,', 'edx']
shl ['eax,', '1']
mov ['ecx,', '[ebp+arg_10]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_10]']
jnb ['short', 'loc_12F6']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_28],', 'edx']
jmp ['short', 'loc_12FC']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_1362']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[ebp+arg_0]']
jz ['short', 'loc_1343']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '[ebp+var_20]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jz ['short', 'loc_1341']
jmp ['short', 'loc_1343']
jmp ['short', 'loc_1318']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+arg_0]']
jnz ['short', 'loc_1362']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx]']
mov ['[ecx],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+4]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_13BA']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+var_20]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jge ['short', 'loc_1399']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '4']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_13B5']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_C],', 'ecx']
jmp ['loc_1271']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['20h']
endp
_Hc3Zip_MatchFinder_Skip@8 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '3']
jnb ['short', 'loc_1407']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_MovePos@4']
jmp ['loc_14AF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['ecx,', '[ebp+arg_0]']
xor ['eax,', '[ecx+edx*4+60h]']
and ['eax,', '0FFFFh']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[eax+ecx*4]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+4]']
mov ['[ecx+edx*4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
mov ['eax,', '[ebp+var_10]']
mov ['[ecx+edx*4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[edx+8]']
jnz ['short', 'loc_14AF']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinder_CheckLimits@4']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
jnz ['loc_13EA']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_MatchFinder_CreateVTable@8 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '_MatchFinder_Init@4']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+4],', 'offset', '_MatchFinder_GetNumAvailableBytes@4']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+8],', 'offset', '_MatchFinder_GetPointerToCurrentPos@4']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1Dh]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_1511']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+0Ch],', 'offset', '_Hc4_MatchFinder_GetMatches@8']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+10h],', 'offset', '_Hc4_MatchFinder_Skip@8']
jmp ['short', 'loc_1563']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+48h],', '2']
jnz ['short', 'loc_1530']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+0Ch],', 'offset', '_Bt2_MatchFinder_GetMatches@8']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+10h],', 'offset', '_Bt2_MatchFinder_Skip@8']
jmp ['short', 'loc_1563']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+48h],', '3']
jnz ['short', 'loc_154F']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+0Ch],', 'offset', '_Bt3_MatchFinder_GetMatches@8']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+10h],', 'offset', '_Bt3_MatchFinder_Skip@8']
jmp ['short', 'loc_1563']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', 'offset', '_Bt4_MatchFinder_GetMatches@8']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+10h],', 'offset', '_Bt4_MatchFinder_Skip@8']
pop ['ebp']
retn ['8']
endp
_Bt2_MatchFinder_GetMatches@8 proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '2']
jnb ['short', 'loc_15AC']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_MovePos@4']
xor ['eax,', 'eax']
jmp ['loc_1684']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ecx+edx*4]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+24h]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+4]']
mov ['[edx+eax*4],', 'ecx']
mov ['[ebp+var_4],', '0']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_GetMatchesSpec1@40']
sub ['eax,', '[ebp+arg_4]']
sar ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[edx+8]']
jnz ['short', 'loc_1681']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinder_CheckLimits@4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Bt3_MatchFinder_GetMatches@8 proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '40h']
push ['edi']
lea ['edi,', '[ebp+var_40]']
mov ['ecx,', '10h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_1C],', 'ecx']
cmp ['[ebp+var_1C],', '3']
jnb ['short', 'loc_16D5']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_MovePos@4']
xor ['eax,', 'eax']
jmp ['loc_1923']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_24]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['ecx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+eax*4+60h]']
mov ['[ebp+var_2C],', 'edx']
mov ['edx,', '[ebp+var_2C]']
and ['edx,', '3FFh']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_24]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2]']
shl ['ecx,', '8']
xor ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ebp+arg_0]']
and ['ecx,', '[edx+2Ch]']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+ecx*4+1000h]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+ecx*4],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+ecx*4+1000h],', 'eax']
mov ['[ebp+var_C],', '2']
mov ['[ebp+var_10],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+18h]']
jnb ['loc_188E']
mov ['eax,', '[ebp+var_24]']
sub ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_24]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jnz ['loc_188E']
xor ['ecx,', 'ecx']
sub ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+var_24]']
add ['edx,', '[ebp+var_C]']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_38],', 'eax']
jmp ['short', 'loc_17BC']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '1']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_34]']
cmp ['edx,', '[ebp+var_38]']
jz ['short', 'loc_17DB']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '[ebp+var_30]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_34]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jz ['short', 'loc_17D9']
jmp ['short', 'loc_17DB']
jmp ['short', 'loc_17B3']
mov ['ecx,', '[ebp+var_34]']
sub ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx+4],', 'ecx']
mov ['[ebp+var_10],', '2']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+var_1C]']
jnz ['loc_188E']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
call ['_SkipMatchesSpec@32']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '1']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_3C]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_3C]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_1886']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinder_CheckLimits@4']
mov ['eax,', '[ebp+var_10]']
jmp ['loc_1923']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+arg_4]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
call ['_GetMatchesSpec1@40']
sub ['eax,', '[ebp+arg_4]']
sar ['eax,', '2']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['[ebp+var_40],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_40]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_40]']
cmp ['eax,', '[edx+8]']
jnz ['short', 'loc_1920']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinder_CheckLimits@4']
mov ['eax,', '[ebp+var_10]']
pop ['edi']
add ['esp,', '40h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Bt4_MatchFinder_GetMatches@8 proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '48h']
push ['edi']
lea ['edi,', '[ebp+var_48]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_24],', 'ecx']
cmp ['[ebp+var_24],', '4']
jnb ['short', 'loc_1975']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_MovePos@4']
xor ['eax,', 'eax']
jmp ['loc_1C78']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_2C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['ecx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+eax*4+60h]']
mov ['[ebp+var_34],', 'edx']
mov ['edx,', '[ebp+var_34]']
and ['edx,', '3FFh']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_2C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2]']
shl ['ecx,', '8']
xor ['ecx,', '[ebp+var_34]']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_34]']
and ['edx,', '0FFFFh']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_2C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+3]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4+60h]']
shl ['eax,', '5']
xor ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+arg_0]']
and ['eax,', '[ecx+2Ch]']
mov ['[ebp+var_28],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_1C]']
sub ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_1C]']
sub ['edx,', '[ecx+eax*4+1000h]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4+41000h]']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+eax*4+1000h],', 'edx']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+eax*4+41000h],', 'edx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[eax+18h]']
jnb ['short', 'loc_1A97']
mov ['edx,', '[ebp+var_2C]']
sub ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_2C]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_1A97']
mov ['[ebp+var_14],', '2']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+4],', 'edx']
mov ['[ebp+var_18],', '2']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_10]']
jz ['short', 'loc_1AE3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_10]']
cmp ['eax,', '[edx+18h]']
jnb ['short', 'loc_1AE3']
mov ['ecx,', '[ebp+var_2C]']
sub ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_2C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jnz ['short', 'loc_1AE3']
mov ['[ebp+var_14],', '3']
mov ['edx,', '[ebp+var_10]']
sub ['edx,', '1']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+eax*4+4],', 'edx']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '2']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['loc_1BD6']
xor ['ecx,', 'ecx']
sub ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_38],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '[ebp+var_14]']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '[ebp+var_24]']
mov ['[ebp+var_40],', 'eax']
jmp ['short', 'loc_1B12']
mov ['ecx,', '[ebp+var_3C]']
add ['ecx,', '1']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
cmp ['edx,', '[ebp+var_40]']
jz ['short', 'loc_1B31']
mov ['eax,', '[ebp+var_3C]']
add ['eax,', '[ebp+var_38]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_3C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jz ['short', 'loc_1B2F']
jmp ['short', 'loc_1B31']
jmp ['short', 'loc_1B09']
mov ['ecx,', '[ebp+var_3C]']
sub ['ecx,', '[ebp+var_2C]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+edx*4-8],', 'ecx']
mov ['edx,', '[ebp+var_14]']
cmp ['edx,', '[ebp+var_24]']
jnz ['loc_1BD6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
call ['_SkipMatchesSpec@32']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+14h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_44]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_44]']
cmp ['ecx,', '[eax+8]']
jnz ['short', 'loc_1BCE']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_CheckLimits@4']
mov ['eax,', '[ebp+var_18]']
jmp ['loc_1C78']
cmp ['[ebp+var_14],', '3']
jnb ['short', 'loc_1BE3']
mov ['[ebp+var_14],', '3']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[edx+ecx*4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+var_24]']
push ['edx']
call ['_GetMatchesSpec1@40']
sub ['eax,', '[ebp+arg_4]']
sar ['eax,', '2']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '1']
mov ['[ebp+var_48],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_48]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_48]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_1C75']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinder_CheckLimits@4']
mov ['eax,', '[ebp+var_18]']
pop ['edi']
add ['esp,', '48h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Hc4_MatchFinder_GetMatches@8 proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '48h']
push ['edi']
lea ['edi,', '[ebp+var_48]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_24],', 'ecx']
cmp ['[ebp+var_24],', '4']
jnb ['short', 'loc_1CC5']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_MovePos@4']
xor ['eax,', 'eax']
jmp ['loc_1FA0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_2C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['ecx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+eax*4+60h]']
mov ['[ebp+var_34],', 'edx']
mov ['edx,', '[ebp+var_34]']
and ['edx,', '3FFh']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_2C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2]']
shl ['ecx,', '8']
xor ['ecx,', '[ebp+var_34]']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_34]']
and ['edx,', '0FFFFh']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_2C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+3]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4+60h]']
shl ['eax,', '5']
xor ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+arg_0]']
and ['eax,', '[ecx+2Ch]']
mov ['[ebp+var_28],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_1C]']
sub ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_1C]']
sub ['edx,', '[ecx+eax*4+1000h]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ecx+eax*4+41000h]']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+eax*4+1000h],', 'edx']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+eax*4+41000h],', 'edx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[eax+18h]']
jnb ['short', 'loc_1DE7']
mov ['edx,', '[ebp+var_2C]']
sub ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_2C]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_1DE7']
mov ['[ebp+var_14],', '2']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax+4],', 'edx']
mov ['[ebp+var_18],', '2']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_10]']
jz ['short', 'loc_1E33']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_10]']
cmp ['eax,', '[edx+18h]']
jnb ['short', 'loc_1E33']
mov ['ecx,', '[ebp+var_2C]']
sub ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_2C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jnz ['short', 'loc_1E33']
mov ['[ebp+var_14],', '3']
mov ['edx,', '[ebp+var_10]']
sub ['edx,', '1']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+eax*4+4],', 'edx']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '2']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['loc_1EFE']
xor ['ecx,', 'ecx']
sub ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_38],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '[ebp+var_14]']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '[ebp+var_24]']
mov ['[ebp+var_40],', 'eax']
jmp ['short', 'loc_1E62']
mov ['ecx,', '[ebp+var_3C]']
add ['ecx,', '1']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
cmp ['edx,', '[ebp+var_40]']
jz ['short', 'loc_1E81']
mov ['eax,', '[ebp+var_3C]']
add ['eax,', '[ebp+var_38]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_3C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jz ['short', 'loc_1E7F']
jmp ['short', 'loc_1E81']
jmp ['short', 'loc_1E59']
mov ['ecx,', '[ebp+var_3C]']
sub ['ecx,', '[ebp+var_2C]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+edx*4-8],', 'ecx']
mov ['edx,', '[ebp+var_14]']
cmp ['edx,', '[ebp+var_24]']
jnz ['short', 'loc_1EFE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
mov ['edx,', '[ebp+var_30]']
mov ['[eax+ecx*4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '1']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_44]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_44]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_1EF6']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinder_CheckLimits@4']
mov ['eax,', '[ebp+var_18]']
jmp ['loc_1FA0']
cmp ['[ebp+var_14],', '3']
jnb ['short', 'loc_1F0B']
mov ['[ebp+var_14],', '3']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+arg_4]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_30]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
call ['_Hc_GetMatchesSpec@40']
sub ['eax,', '[ebp+arg_4]']
sar ['eax,', '2']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_48]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[edx+8]']
jnz ['short', 'loc_1F9D']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinder_CheckLimits@4']
mov ['eax,', '[ebp+var_18]']
pop ['edi']
add ['esp,', '48h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Bt2_MatchFinder_Skip@8 proc near       
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '2']
jnb ['short', 'loc_1FF7']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_MovePos@4']
jmp ['loc_20B0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '8']
or ['eax,', 'edx']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ecx+edx*4]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+24h]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+4]']
mov ['[edx+eax*4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_SkipMatchesSpec@32']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[edx+8]']
jnz ['short', 'loc_20B0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinder_CheckLimits@4']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
jnz ['loc_1FDA']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Bt3_MatchFinder_Skip@8 proc near       
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '3']
jnb ['short', 'loc_2111']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_MovePos@4']
jmp ['loc_220F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['ecx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+eax*4+60h]']
mov ['[ebp+var_1C],', 'edx']
mov ['edx,', '[ebp+var_1C]']
and ['edx,', '3FFh']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_14]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2]']
shl ['ecx,', '8']
xor ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+arg_0]']
and ['ecx,', '[edx+2Ch]']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+edx*4+1000h]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+4]']
mov ['[eax+edx*4+1000h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_10]']
mov ['esi,', '[ebp+var_8]']
mov ['ecx,', '[esi+ecx*4+1000h]']
mov ['[eax+edx*4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_SkipMatchesSpec@32']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[edx+8]']
jnz ['short', 'loc_220F']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinder_CheckLimits@4']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
jnz ['loc_20F4']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Bt4_MatchFinder_Skip@8 proc near       
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_10],', '4']
jnb ['short', 'loc_2274']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_MovePos@4']
jmp ['loc_23AF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['ecx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+eax*4+60h]']
mov ['[ebp+var_20],', 'edx']
mov ['edx,', '[ebp+var_20]']
and ['edx,', '3FFh']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2]']
shl ['ecx,', '8']
xor ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_20]']
and ['edx,', '0FFFFh']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+3]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4+60h]']
shl ['eax,', '5']
xor ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_0]']
and ['eax,', '[ecx+2Ch]']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx*4+41000h]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+4]']
mov ['[edx+ecx*4+41000h],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_14]']
mov ['esi,', '[ebp+var_C]']
mov ['eax,', '[esi+eax*4+41000h]']
mov ['[edx+ecx*4+1000h],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_8]']
mov ['esi,', '[ebp+var_C]']
mov ['eax,', '[esi+eax*4+1000h]']
mov ['[edx+ecx*4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['_SkipMatchesSpec@32']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_24]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_24]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_23AF']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinder_CheckLimits@4']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
jnz ['loc_2257']
pop ['esi']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Hc4_MatchFinder_Skip@8 proc near       
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_10],', '4']
jnb ['short', 'loc_2414']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinder_MovePos@4']
jmp ['loc_252B']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['ecx,', '[ebp+arg_0]']
xor ['edx,', '[ecx+eax*4+60h]']
mov ['[ebp+var_20],', 'edx']
mov ['edx,', '[ebp+var_20]']
and ['edx,', '3FFh']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2]']
shl ['ecx,', '8']
xor ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_20]']
and ['edx,', '0FFFFh']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+3]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4+60h]']
shl ['eax,', '5']
xor ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_0]']
and ['eax,', '[ecx+2Ch]']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+ecx*4+41000h]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+4]']
mov ['[edx+ecx*4+41000h],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_14]']
mov ['esi,', '[ebp+var_C]']
mov ['eax,', '[esi+eax*4+41000h]']
mov ['[edx+ecx*4+1000h],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_8]']
mov ['esi,', '[ebp+var_C]']
mov ['eax,', '[esi+eax*4+1000h]']
mov ['[edx+ecx*4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
mov ['eax,', '[ebp+var_1C]']
mov ['[ecx+edx*4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_24]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_24]']
cmp ['eax,', '[edx+8]']
jnz ['short', 'loc_252B']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinder_CheckLimits@4']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
jnz ['loc_23F7']
pop ['esi']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
