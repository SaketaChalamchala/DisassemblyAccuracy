@XzCrc64UpdateT4@20 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_38']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_8],', '0']
jbe ['short', 'loc_87']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '3']
jz ['short', 'loc_87']
mov ['ecx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[ecx]']
cdq
xor ['eax,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_4]']
and ['eax,', '0FFh']
and ['edx,', '0']
push ['0']
push ['8']
push ['edx']
push ['eax']
call ['__allmul']
mov ['esi,', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['cl,', '8']
call ['__aullshr']
mov ['ecx,', '[ebp+arg_8]']
xor ['eax,', '[ecx+esi]']
xor ['edx,', '[ecx+esi+4]']
mov ['[ebp+arg_0],', 'eax']
mov ['[ebp+arg_4],', 'edx']
jmp ['short', 'loc_26']
jmp ['short', 'loc_9B']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '4']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '4']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_8],', '4']
jb ['loc_12C']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
xor ['ecx,', '[edx]']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['cl,', '20h']
call ['__aullshr']
mov ['ecx,', '[ebp+var_10]']
and ['ecx,', '0FFh']
mov ['esi,', '[ebp+arg_8]']
xor ['eax,', '[esi+ecx*8+1800h]']
xor ['edx,', '[esi+ecx*8+1804h]']
mov ['ecx,', '[ebp+var_10]']
shr ['ecx,', '8']
and ['ecx,', '0FFh']
mov ['esi,', '[ebp+arg_8]']
xor ['eax,', '[esi+ecx*8+1000h]']
xor ['edx,', '[esi+ecx*8+1004h]']
mov ['ecx,', '[ebp+var_10]']
shr ['ecx,', '10h']
and ['ecx,', '0FFh']
mov ['esi,', '[ebp+arg_8]']
xor ['eax,', '[esi+ecx*8+800h]']
xor ['edx,', '[esi+ecx*8+804h]']
mov ['ecx,', '[ebp+var_10]']
shr ['ecx,', '18h']
mov ['esi,', '[ebp+arg_8]']
xor ['eax,', '[esi+ecx*8]']
xor ['edx,', '[esi+ecx*8+4]']
mov ['[ebp+arg_0],', 'eax']
mov ['[ebp+arg_4],', 'edx']
jmp ['loc_89']
jmp ['short', 'loc_140']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_8],', '0']
jbe ['short', 'loc_187']
mov ['ecx,', '[ebp+var_C]']
movzx ['eax,', 'byte', 'ptr', '[ecx]']
cdq
xor ['eax,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_4]']
and ['eax,', '0FFh']
and ['edx,', '0']
push ['0']
push ['8']
push ['edx']
push ['eax']
call ['__allmul']
mov ['esi,', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['cl,', '8']
call ['__aullshr']
mov ['ecx,', '[ebp+arg_8]']
xor ['eax,', '[ecx+esi]']
xor ['edx,', '[ecx+esi+4]']
mov ['[ebp+arg_0],', 'eax']
mov ['[ebp+arg_4],', 'edx']
jmp ['short', 'loc_12E']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
