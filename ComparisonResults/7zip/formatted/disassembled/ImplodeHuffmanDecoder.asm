??0CDecoder@NHuffman@NImplode@NCompress@@QAE@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+90h],', 'ecx']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+90h]']
mov ['edx,', '4']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+94h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1CDecoder@NHuffman@NImplode@NCompress@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+94h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?SetCodeLengths@CDecoder@NHuffman@NImplode@NCompress@@QAE_NPBE@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0B4h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_B4]']
mov ['ecx,', '2Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_A8],', '0']
jmp ['short', 'loc_F6']
mov ['eax,', '[ebp+var_A8]']
add ['eax,', '1']
mov ['[ebp+var_A8],', 'eax']
cmp ['[ebp+var_A8],', '10h']
ja ['short', 'loc_10F']
mov ['ecx,', '[ebp+var_A8]']
mov ['[ebp+ecx*4+var_54],', '0']
jmp ['short', 'loc_E7']
mov ['[ebp+var_AC],', '0']
jmp ['short', 'loc_12A']
mov ['edx,', '[ebp+var_AC]']
add ['edx,', '1']
mov ['[ebp+var_AC],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_AC]']
cmp ['ecx,', '[eax+90h]']
jnb ['short', 'loc_160']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_AC]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+eax*4+var_54]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_AC]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['[ebp+eax*4+var_54],', 'ecx']
jmp ['short', 'loc_11B']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+44h],', '0']
mov ['edx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[edx+8Ch],', '0']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_B0],', '0']
mov ['[ebp+var_A8],', '10h']
jmp ['short', 'loc_1A3']
mov ['eax,', '[ebp+var_A8]']
sub ['eax,', '1']
mov ['[ebp+var_A8],', 'eax']
cmp ['[ebp+var_A8],', '0']
jbe ['loc_245']
mov ['ecx,', '10h']
sub ['ecx,', '[ebp+var_A8]']
mov ['edx,', '[ebp+var_A8]']
mov ['eax,', '[ebp+edx*4+var_54]']
shl ['eax,', 'cl']
add ['eax,', '[ebp+var_B0]']
mov ['[ebp+var_B0],', 'eax']
cmp ['[ebp+var_B0],', '10000h']
jbe ['short', 'loc_1E6']
xor ['al,', 'al']
jmp ['loc_2E5']
mov ['ecx,', '[ebp+var_A8]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_B0]']
mov ['[edx+ecx*4],', 'eax']
mov ['ecx,', '[ebp+var_A8]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+ecx*4+4Ch]']
mov ['ecx,', '[ebp+var_A8]']
add ['eax,', '[ebp+ecx*4+var_50]']
mov ['edx,', '[ebp+var_A8]']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+edx*4+48h],', 'eax']
mov ['edx,', '[ebp+var_A8]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+edx*4+48h]']
mov ['edx,', '[ebp+var_A8]']
add ['ecx,', '[ebp+edx*4+var_54]']
mov ['eax,', '[ebp+var_A8]']
mov ['[ebp+eax*4+var_A0],', 'ecx']
jmp ['loc_194']
cmp ['[ebp+var_B0],', '10000h']
jz ['short', 'loc_258']
xor ['al,', 'al']
jmp ['loc_2E5']
mov ['[ebp+var_AC],', '0']
jmp ['short', 'loc_273']
mov ['ecx,', '[ebp+var_AC]']
add ['ecx,', '1']
mov ['[ebp+var_AC],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_AC]']
cmp ['eax,', '[edx+90h]']
jnb ['short', 'loc_2E3']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_AC]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
test ['edx,', 'edx']
jz ['short', 'loc_2E1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_AC]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+ecx*4+var_A0]']
sub ['edx,', '1']
mov ['[ebp+var_B4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_AC]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_B4]']
mov ['[ebp+ecx*4+var_A0],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+94h]']
mov ['edx,', '[ebp+var_B4]']
mov ['eax,', '[ebp+var_AC]']
mov ['[ecx+edx*4],', 'eax']
jmp ['short', 'loc_264']
mov ['al,', '1']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN21']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?DecodeSymbol@CDecoder@NHuffman@NImplode@NCompress@@QAEIPAV?$CDecoder@VCInBuffer@@@NBitl@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
push ['10h']
mov ['ecx,', '[ebp+arg_0]']
call ['?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_10],', '10h']
jmp ['short', 'loc_383']
mov ['eax,', '[ebp+var_10]']
sub ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jbe ['short', 'loc_3A1']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[edx+ecx*4]']
jnb ['short', 'loc_39F']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_3A1']
jmp ['short', 'loc_37A']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_3AC']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_3FE']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '[ecx+eax*4+4]']
mov ['ecx,', '10h']
sub ['ecx,', '[ebp+var_8]']
shr ['edx,', 'cl']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
add ['edx,', '[ecx+eax*4+48h]']
mov ['[ebp+var_14],', 'edx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[edx+90h]']
jb ['short', 'loc_3EF']
or ['eax,', '0FFFFFFFFh']
jmp ['short', 'loc_3FE']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+94h]']
mov ['eax,', '[ebp+var_14]']
mov ['eax,', '[edx+eax*4]']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?GetValue@?$CDecoder@VCInBuffer@@@NBitl@@QAEII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '8']
sub ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
shr ['eax,', 'cl']
and ['eax,', '0FFFFFFh']
mov ['ecx,', '18h']
sub ['ecx,', '[ebp+arg_0]']
shr ['eax,', 'cl']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?MovePos@?$CDecoder@VCInBuffer@@@NBitl@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[eax+30h]']
mov ['ecx,', '[ebp+arg_0]']
shr ['edx,', 'cl']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+30h],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Normalize@?$CDecoder@VCInBuffer@@@NBitl@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_4BA']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
sub ['ecx,', '8']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '8']
jb ['short', 'loc_50A']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?ReadByte@CInBufferBase@@QAEEXZ']
mov ['byte', 'ptr', '[ebp+var_8+3],', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '20h']
sub ['ecx,', '[eax]']
shl ['edx,', 'cl']
mov ['ecx,', '[ebp+var_4]']
or ['edx,', '[ecx+30h]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+30h],', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
shl ['edx,', '8']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_8+3]']
movzx ['ecx,', 'byte', 'ptr', 'ds:?kInvertTable@NBitl@@3PAEA[eax]']
or ['edx,', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+4],', 'edx']
jmp ['short', 'loc_4AD']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?ReadByte@CInBufferBase@@QAEEXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx+4]']
jb ['short', 'loc_546']
mov ['ecx,', '[ebp+var_4]']
call ['?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ']
jmp ['short', 'loc_560']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['dl,', '[ecx]']
mov ['byte', 'ptr', '[ebp+var_8+3],', 'dl']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'ecx']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
