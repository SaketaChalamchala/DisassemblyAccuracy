?SetPassword@CKeyInfo@NZipStrong@NCrypto@@QAEXPBEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '70h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_70]']
mov ['ecx,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+Dst],', 'ecx']
lea ['ecx,', '[ebp+var_6C]']
call ['?Init@CContextBase@NSha1@NCrypto@@QAEXXZ']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['ecx,', '[ebp+var_6C]']
call ['?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z']
mov ['edx,', '[ebp+Dst]']
push ['edx']
lea ['eax,', '[ebp+var_6C]']
push ['eax']
call ['?DeriveKey@NZipStrong@NCrypto@@YGXAAVCContext@NSha1@2@PAE@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '70h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?DeriveKey@NZipStrong@NCrypto@@YGXAAVCContext@NSha1@2@PAE@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '50h']
push ['edi']
lea ['edi,', '[ebp+var_50]']
mov ['ecx,', '14h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z']
lea ['ecx,', '[ebp+Src]']
push ['ecx']
push ['36h']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
call ['?DeriveKey2@NZipStrong@NCrypto@@YGXPBEEPAE@Z']
lea ['eax,', '[ebp+var_38]']
push ['eax']
push ['5Ch']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['?DeriveKey2@NZipStrong@NCrypto@@YGXPBEEPAE@Z']
push ['20h']
lea ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '50h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?DeriveKey2@NZipStrong@NCrypto@@YGXPBEEPAE@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0B8h']
push ['edi']
lea ['edi,', '[ebp+var_B8]']
mov ['ecx,', '2Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
push ['40h']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
mov ['[ebp+var_50],', '0']
jmp ['short', 'loc_19B']
mov ['edx,', '[ebp+var_50]']
add ['edx,', '1']
mov ['[ebp+var_50],', 'edx']
cmp ['[ebp+var_50],', '14h']
jnb ['short', 'loc_1BD']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_50]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_50]']
movzx ['eax,', '[ebp+edx+Dst]']
xor ['eax,', 'ecx']
mov ['ecx,', '[ebp+var_50]']
mov ['[ebp+ecx+Dst],', 'al']
jmp ['short', 'loc_192']
lea ['ecx,', '[ebp+var_B4]']
call ['?Init@CContextBase@NSha1@NCrypto@@QAEXXZ']
push ['40h']
lea ['edx,', '[ebp+Dst]']
push ['edx']
lea ['ecx,', '[ebp+var_B4]']
call ['?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_B4]']
call ['?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0B8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?CryptoSetPassword@CBaseCoder@NZipStrong@NCrypto@@UAGJPBEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '4']
call ['?SetPassword@CKeyInfo@NZipStrong@NCrypto@@QAEXPBEI@Z']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
?Init@CBaseCoder@NZipStrong@NCrypto@@UAGJXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn ['4']
endp
?ReadHeader@CDecoder@NZipStrong@NCrypto@@QAEJPAUISequentialInStream@@I_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
push ['2']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_2C7']
mov ['eax,', '[ebp+var_14]']
jmp ['loc_433']
movzx ['edx,', 'word', 'ptr', '[ebp+var_C]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+180h],', 'edx']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+180h],', '0']
jnz ['short', 'loc_326']
push ['10h']
push ['0']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '184h']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+184h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_8]']
mov ['[edx+188h],', 'eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_8+4]']
mov ['[edx+18Ch],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+180h],', '0Ch']
jmp ['short', 'loc_36B']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+180h],', '10h']
jnz ['short', 'loc_361']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+180h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '184h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_35F']
mov ['eax,', '[ebp+var_18]']
jmp ['loc_433']
jmp ['short', 'loc_36B']
mov ['eax,', '80004001h']
jmp ['loc_433']
push ['4']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_38B']
mov ['eax,', '[ebp+var_1C]']
jmp ['loc_433']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx+194h],', 'edx']
mov ['[ebp+var_20],', '10h']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+194h],', '10h']
jb ['short', 'loc_3B9']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+194h],', '40000h']
jbe ['short', 'loc_3C0']
mov ['eax,', '80004001h']
jmp ['short', 'loc_433']
mov ['edx,', '[ebp+var_4]']
mov ['esi,', '[edx+194h]']
add ['esi,', '10h']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '174h']
call ['?Size@?$CBuffer@E@@QBEIXZ']
cmp ['esi,', 'eax']
jbe ['short', 'loc_416']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+194h]']
add ['ecx,', '10h']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '174h']
call ['?Alloc@?$CBuffer@E@@QAEXI@Z']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '174h']
call ['??B?$CBuffer@E@@QAEPAEXZ']
add ['eax,', '0Fh']
and ['eax,', '0FFFFFFF0h']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+17Ch],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+194h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+17Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?ReadStream_FALSE@@YGJPAUISequentialInStream@@PAXI@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
?Init_and_CheckPassword@CDecoder@NZipStrong@NCrypto@@QAEJAA_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0CCh']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_CC]']
mov ['ecx,', '33h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx+194h],', '10h']
jnb ['short', 'loc_4C8']
mov ['eax,', '80004001h']
jmp ['loc_83E']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+17Ch]']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+Dst]']
mov ['dx,', '[ecx]']
mov ['[ebp+var_10],', 'dx']
movzx ['eax,', '[ebp+var_10]']
cmp ['eax,', '3']
jz ['short', 'loc_4F1']
mov ['eax,', '80004001h']
jmp ['loc_83E']
mov ['ecx,', '[ebp+Dst]']
mov ['dx,', '[ecx+2]']
mov ['[ebp+var_14],', 'dx']
movzx ['eax,', '[ebp+var_14]']
cmp ['eax,', '660Eh']
jge ['short', 'loc_511']
mov ['eax,', '80004001h']
jmp ['loc_83E']
movzx ['ecx,', '[ebp+var_14]']
sub ['ecx,', '660Eh']
mov ['[ebp+var_14],', 'cx']
movzx ['edx,', '[ebp+var_14]']
cmp ['edx,', '2']
jle ['short', 'loc_532']
mov ['eax,', '80004001h']
jmp ['loc_83E']
mov ['eax,', '[ebp+Dst]']
mov ['cx,', '[eax+4]']
mov ['[ebp+var_18],', 'cx']
mov ['edx,', '[ebp+Dst]']
mov ['ax,', '[edx+6]']
mov ['[ebp+var_1C],', 'ax']
movzx ['ecx,', '[ebp+var_14]']
shl ['ecx,', '6']
add ['ecx,', '80h']
movzx ['edx,', '[ebp+var_18]']
cmp ['ecx,', 'edx']
jz ['short', 'loc_567']
mov ['eax,', '80004001h']
jmp ['loc_83E']
movzx ['eax,', '[ebp+var_14]']
lea ['ecx,', 'ds:10h[eax*8]']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+170h],', 'ecx']
movzx ['eax,', '[ebp+var_1C]']
and ['eax,', '1']
jnz ['short', 'loc_58E']
mov ['eax,', '80004001h']
jmp ['loc_83E']
movzx ['ecx,', '[ebp+var_1C]']
and ['ecx,', '4000h']
jz ['short', 'loc_5A4']
mov ['eax,', '80004001h']
jmp ['loc_83E']
mov ['edx,', '[ebp+Dst]']
movzx ['eax,', 'word', 'ptr', '[edx+8]']
mov ['[ebp+Size],', 'eax']
mov ['ecx,', '[ebp+Size]']
and ['ecx,', '0Fh']
jnz ['short', 'loc_5C7']
mov ['edx,', '[ebp+Size]']
add ['edx,', '10h']
mov ['eax,', '[ebp+var_8]']
cmp ['edx,', '[eax+194h]']
jbe ['short', 'loc_5D1']
mov ['eax,', '80004001h']
jmp ['loc_83E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '0Ah']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+Size]']
mov ['edx,', '[ebp+Dst]']
lea ['eax,', '[edx+ecx+10h]']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
cmp ['dword', 'ptr', '[ecx-6],', '0']
jz ['short', 'loc_612']
mov ['eax,', '80004001h']
jmp ['loc_83E']
mov ['edx,', '[ebp+var_24]']
movzx ['eax,', 'word', 'ptr', '[edx-2]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
and ['ecx,', '0Fh']
jnz ['short', 'loc_639']
mov ['edx,', '[ebp+var_28]']
mov ['eax,', '[ebp+Size]']
lea ['ecx,', '[eax+edx+10h]']
mov ['edx,', '[ebp+var_8]']
cmp ['ecx,', '[edx+194h]']
jz ['short', 'loc_643']
mov ['eax,', '80004001h']
jmp ['loc_83E']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+170h]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '150h']
push ['edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '4']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
push ['eax']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jz ['short', 'loc_683']
mov ['eax,', '[ebp+var_2C]']
jmp ['loc_83E']
mov ['esi,', 'esp']
push ['10h']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '184h']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '4']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
push ['edx']
mov ['edx,', '[ecx+10h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_30],', 'eax']
cmp ['[ebp+var_30],', '0']
jz ['short', 'loc_6BB']
mov ['eax,', '[ebp+var_30]']
jmp ['loc_83E']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ecx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_34],', 'eax']
cmp ['[ebp+var_34],', '0']
jz ['short', 'loc_6E3']
mov ['eax,', '[ebp+var_34]']
jmp ['loc_83E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ecx+10h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
lea ['ecx,', '[ebp+var_C0]']
call ['?Init@CContextBase@NSha1@NCrypto@@QAEXXZ']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+180h]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '184h']
push ['eax']
lea ['ecx,', '[ebp+var_C0]']
call ['?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z']
mov ['ecx,', '[ebp+Size]']
sub ['ecx,', '10h']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
lea ['ecx,', '[ebp+var_C0]']
call ['?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z']
lea ['eax,', '[ebp+var_58]']
push ['eax']
lea ['ecx,', '[ebp+var_C0]']
push ['ecx']
call ['?DeriveKey@NZipStrong@NCrypto@@YGXAAVCContext@NSha1@2@PAE@Z']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+170h]']
push ['eax']
lea ['ecx,', '[ebp+var_58]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '4']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
push ['edx']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C8],', 'eax']
cmp ['[ebp+var_C8],', '0']
jz ['short', 'loc_794']
mov ['eax,', '[ebp+var_C8]']
jmp ['loc_83E']
mov ['esi,', 'esp']
push ['10h']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '184h']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '4']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
push ['ecx']
mov ['ecx,', '[eax+10h]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_CC],', 'eax']
cmp ['[ebp+var_CC],', '0']
jz ['short', 'loc_7D1']
mov ['eax,', '[ebp+var_CC]']
jmp ['short', 'loc_83E']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[eax+0Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[eax+10h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['[ebp+var_28],', '4']
jnb ['short', 'loc_814']
mov ['eax,', '80004001h']
jmp ['short', 'loc_83E']
mov ['eax,', '[ebp+var_28]']
sub ['eax,', '4']
mov ['[ebp+var_28],', 'eax']
mov ['edx,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_24]']
call ['@CrcCalc@8']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '[ebp+var_28]']
cmp ['[ecx],', 'eax']
jz ['short', 'loc_836']
xor ['eax,', 'eax']
jmp ['short', 'loc_83E']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx],', '1']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN25']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0CCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Init@CContextBase@NSha1@NCrypto@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_Sha1_Init@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_Sha1_Update@12']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Final@CContext@NSha1@NCrypto@@QAEXPAE@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_Sha1_Final@8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??B?$CBuffer@E@@QAEPAEXZ proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Size@?$CBuffer@E@@QBEIXZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Alloc@?$CBuffer@E@@QAEXI@Z proc near   
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+4]']
jz ['short', 'loc_9A8']
mov ['ecx,', '[ebp+var_4]']
call ['?Free@?$CBuffer@E@@QAEXXZ']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_9A8']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx+4],', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Free@?$CBuffer@E@@QAEXXZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_9F4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
