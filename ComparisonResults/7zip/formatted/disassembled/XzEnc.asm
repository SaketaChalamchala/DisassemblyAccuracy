_Xz_WriteHeader@8 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+Dst],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
push ['6']
push ['offset', '_XZ_SIG']
lea ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
movzx ['ecx,', '[ebp+arg_0]']
sar ['ecx,', '8']
mov ['byte', 'ptr', '[ebp+var_14+2],', 'cl']
movzx ['edx,', '[ebp+arg_0]']
and ['edx,', '0FFh']
mov ['byte', 'ptr', '[ebp+var_14+3],', 'dl']
lea ['ecx,', '[ebp+var_14+2]']
mov ['edx,', '2']
call ['@CrcCalc@8']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'eax']
push ['0Ch']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_WriteBytes@12']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_WriteBytes@12  proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '[ebp+arg_8]']
neg ['eax']
sbb ['eax,', 'eax']
and ['eax,', '9']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
_XzBlock_WriteHeader@8 proc near        
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '41Ch']
push ['edi']
lea ['edi,', '[ebp+var_41C]']
mov ['ecx,', '107h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_410],', '1']
mov ['eax,', '[ebp+var_410]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx+10h]']
mov ['byte', 'ptr', '[ebp+eax+Dst],', 'dl']
mov ['eax,', '[ebp+var_410]']
add ['eax,', '1']
mov ['[ebp+var_410],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+10h]']
and ['edx,', '40h']
jz ['short', 'loc_187']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[eax]']
push ['edx']
mov ['eax,', '[ebp+var_410]']
lea ['ecx,', '[ebp+eax+Dst]']
push ['ecx']
call ['_Xz_WriteVarInt@12']
add ['eax,', '[ebp+var_410]']
mov ['[ebp+var_410],', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+10h]']
and ['eax,', '80h']
jz ['short', 'loc_1BF']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ecx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_410]']
lea ['edx,', '[ebp+ecx+Dst]']
push ['edx']
call ['_Xz_WriteVarInt@12']
add ['eax,', '[ebp+var_410]']
mov ['[ebp+var_410],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+10h]']
and ['ecx,', '3']
add ['ecx,', '1']
mov ['[ebp+var_414],', 'ecx']
mov ['[ebp+var_418],', '0']
jmp ['short', 'loc_1ED']
mov ['edx,', '[ebp+var_418]']
add ['edx,', '1']
mov ['[ebp+var_418],', 'edx']
mov ['eax,', '[ebp+var_418]']
cmp ['eax,', '[ebp+var_414]']
jnb ['loc_2B1']
mov ['ecx,', '[ebp+var_418]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+18h]']
mov ['[ebp+var_41C],', 'eax']
mov ['ecx,', '[ebp+var_41C]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ecx]']
push ['eax']
mov ['ecx,', '[ebp+var_410]']
lea ['edx,', '[ebp+ecx+Dst]']
push ['edx']
call ['_Xz_WriteVarInt@12']
add ['eax,', '[ebp+var_410]']
mov ['[ebp+var_410],', 'eax']
mov ['eax,', '[ebp+var_41C]']
mov ['ecx,', '[eax+8]']
xor ['edx,', 'edx']
push ['edx']
push ['ecx']
mov ['eax,', '[ebp+var_410]']
lea ['ecx,', '[ebp+eax+Dst]']
push ['ecx']
call ['_Xz_WriteVarInt@12']
add ['eax,', '[ebp+var_410]']
mov ['[ebp+var_410],', 'eax']
mov ['edx,', '[ebp+var_41C]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_41C]']
add ['ecx,', '0Ch']
push ['ecx']
mov ['edx,', '[ebp+var_410]']
lea ['eax,', '[ebp+edx+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_41C]']
mov ['edx,', '[ebp+var_410]']
add ['edx,', '[ecx+8]']
mov ['[ebp+var_410],', 'edx']
jmp ['loc_1DE']
mov ['eax,', '[ebp+var_410]']
and ['eax,', '3']
jz ['short', 'loc_2DB']
mov ['ecx,', '[ebp+var_410]']
mov ['byte', 'ptr', '[ebp+ecx+Dst],', '0']
mov ['edx,', '[ebp+var_410]']
add ['edx,', '1']
mov ['[ebp+var_410],', 'edx']
jmp ['short', 'loc_2B1']
mov ['eax,', '[ebp+var_410]']
shr ['eax,', '2']
mov ['byte', 'ptr', '[ebp+Dst],', 'al']
mov ['edx,', '[ebp+var_410]']
lea ['ecx,', '[ebp+Dst]']
call ['@CrcCalc@8']
mov ['ecx,', '[ebp+var_410]']
mov ['[ebp+ecx+Dst],', 'eax']
mov ['edx,', '[ebp+var_410]']
add ['edx,', '4']
push ['edx']
lea ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_WriteBytes@12']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '41Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Xz_WriteFooter@8 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '60h']
push ['edi']
lea ['edi,', '[ebp+var_60]']
mov ['ecx,', '18h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_3C],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
xor ['edx,', 'edx']
push ['edx']
push ['ecx']
lea ['eax,', '[ebp+var_28+1]']
push ['eax']
call ['_Xz_WriteVarInt@12']
add ['eax,', '1']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_44]']
xor ['edx,', 'edx']
mov ['[ebp+var_34],', 'ecx']
mov ['[ebp+var_30],', 'edx']
mov ['byte', 'ptr', '[ebp+var_28],', '0']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_44]']
push ['ecx']
lea ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_WriteBytesAndCrc@16']
mov ['[ebp+var_4C],', 'eax']
cmp ['[ebp+var_4C],', '0']
jz ['short', 'loc_3E5']
mov ['eax,', '[ebp+var_4C]']
jmp ['loc_57D']
mov ['[ebp+var_48],', '0']
jmp ['short', 'loc_3F7']
mov ['ecx,', '[ebp+var_48]']
add ['ecx,', '1']
mov ['[ebp+var_48],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_48]']
cmp ['eax,', '[edx+4]']
jnb ['short', 'loc_481']
mov ['ecx,', '[ebp+var_48]']
shl ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+0Ch]']
mov ['[ebp+var_50],', 'ecx']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[eax+8]']
push ['edx']
lea ['eax,', '[ebp+var_28]']
push ['eax']
call ['_Xz_WriteVarInt@12']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_50]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ecx]']
push ['eax']
mov ['ecx,', '[ebp+var_44]']
lea ['edx,', '[ebp+ecx+var_28]']
push ['edx']
call ['_Xz_WriteVarInt@12']
add ['eax,', '[ebp+var_44]']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_44]']
xor ['ecx,', 'ecx']
add ['eax,', '[ebp+var_34]']
adc ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_34],', 'eax']
mov ['[ebp+var_30],', 'ecx']
lea ['edx,', '[ebp+var_3C]']
push ['edx']
mov ['eax,', '[ebp+var_44]']
push ['eax']
lea ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_WriteBytesAndCrc@16']
mov ['[ebp+var_54],', 'eax']
cmp ['[ebp+var_54],', '0']
jz ['short', 'loc_47C']
mov ['eax,', '[ebp+var_54]']
jmp ['loc_57D']
jmp ['loc_3EE']
mov ['eax,', '[ebp+var_34]']
and ['eax,', '3']
mov ['[ebp+var_44],', 'eax']
jz ['short', 'loc_4DD']
mov ['byte', 'ptr', '[ebp+var_28+2],', '0']
mov ['cl,', 'byte', 'ptr', '[ebp+var_28+2]']
mov ['byte', 'ptr', '[ebp+var_28+1],', 'cl']
mov ['dl,', 'byte', 'ptr', '[ebp+var_28+1]']
mov ['byte', 'ptr', '[ebp+var_28],', 'dl']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '4']
sub ['ecx,', '[ebp+var_44]']
push ['ecx']
lea ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_WriteBytesAndCrc@16']
mov ['[ebp+var_58],', 'eax']
cmp ['[ebp+var_58],', '0']
jz ['short', 'loc_4C7']
mov ['eax,', '[ebp+var_58]']
jmp ['loc_57D']
mov ['ecx,', '4']
sub ['ecx,', '[ebp+var_44]']
xor ['edx,', 'edx']
add ['ecx,', '[ebp+var_34]']
adc ['edx,', '[ebp+var_30]']
mov ['[ebp+var_34],', 'ecx']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_3C]']
xor ['eax,', '0FFFFFFFFh']
mov ['[ebp+var_28],', 'eax']
push ['4']
lea ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_WriteBytes@12']
mov ['[ebp+var_5C],', 'eax']
cmp ['[ebp+var_5C],', '0']
jz ['short', 'loc_503']
mov ['eax,', '[ebp+var_5C]']
jmp ['short', 'loc_57D']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '4']
mov ['ecx,', '[ebp+var_30]']
adc ['ecx,', '0']
mov ['[ebp+var_34],', 'eax']
mov ['[ebp+var_30],', 'ecx']
mov ['eax,', '[ebp+var_34]']
mov ['edx,', '[ebp+var_30]']
mov ['cl,', '2']
call ['__aullshr']
sub ['eax,', '1']
sbb ['edx,', '0']
mov ['[ebp+var_60],', 'eax']
mov ['edx,', '[ebp+var_60]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
sar ['ecx,', '8']
mov ['[ebp+var_20],', 'cl']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx]']
and ['eax,', '0FFh']
mov ['[ebp+var_1F],', 'al']
lea ['ecx,', '[ebp+var_24]']
mov ['edx,', '6']
call ['@CrcCalc@8']
mov ['[ebp+var_28],', 'eax']
push ['2']
push ['offset', '_XZ_FOOTER_SIG']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
push ['0Ch']
lea ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_WriteBytes@12']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '60h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_WriteBytesAndCrc@16 proc near          
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_C]']
mov ['ecx,', '[ecx]']
call ['@CrcUpdate@12']
mov ['edx,', '[ebp+arg_C]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_WriteBytes@12']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['10h']
endp
_Xz_AddIndexRecord@24 proc near         
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+Dst],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
jz ['short', 'loc_653']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+8]']
cmp ['eax,', '[edx+4]']
jnz ['loc_6EE']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
lea ['eax,', '[edx+edx+2]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '4']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '4']
cmp ['edx,', '[ebp+var_4]']
jz ['short', 'loc_67E']
mov ['eax,', '2']
jmp ['loc_72E']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_14]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0']
jnz ['short', 'loc_6A9']
mov ['eax,', '2']
jmp ['loc_72E']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_6DC']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
shl ['eax,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Xz_Free@8']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+Dst]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
shl ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+0Ch]']
mov ['[ebp+var_10],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['[ecx+4],', 'eax']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
endp
_XzProps_Init@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+8],', '1']
pop ['ebp']
retn ['4']
endp
_XzFilterProps_Init@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
pop ['ebp']
retn ['4']
endp
_Xz_Encode@16   proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '64h']
push ['edi']
lea ['edi,', '[ebp+var_64]']
mov ['ecx,', '19h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
lea ['eax,', '[ebp+var_20]']
push ['eax']
call ['_Xz_Construct@4']
push ['offset', '_g_BigAlloc']
push ['offset', '_g_Alloc']
lea ['ecx,', '[ebp+var_60]']
push ['ecx']
call ['_Lzma2WithFilters_Construct@12']
lea ['edx,', '[ebp+var_60]']
push ['edx']
call ['_Lzma2WithFilters_Create@4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_804']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_60]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
call ['_Xz_Compress@24']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_60]']
push ['eax']
call ['_Lzma2WithFilters_Free@4']
push ['offset', '_g_Alloc']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['_Xz_Free@8']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '64h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_Lzma2WithFilters_Construct@12 proc near 
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+30h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+34h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
push ['edx']
call ['_SeqInFilter_Construct@4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
_SeqInFilter_Construct@4 proc near      
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+1Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', 'offset', '_SeqInFilter_Read@12']
pop ['ebp']
retn ['4']
endp
_SeqInFilter_Read@12 proc near          
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_902']
xor ['eax,', 'eax']
jmp ['loc_A07']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+28h],', '0']
jnz ['short', 'loc_982']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+20h]']
cmp ['ecx,', '[eax+24h]']
jnz ['short', 'loc_982']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+20h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+24h],', '100000h']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '24h']
mov ['esi,', 'esp']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+1Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_96F']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_A07']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+24h],', '0']
jnz ['short', 'loc_982']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+28h],', '1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+24h]']
sub ['ecx,', '[eax+20h]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+28h]']
push ['eax']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+1Ch]']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+20h]']
push ['eax']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_28],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+20h]']
add ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+20h],', 'eax']
mov ['edx,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[edx],', '0']
jnz ['short', 'loc_9FD']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_9FD']
cmp ['[ebp+var_28],', '0']
jz ['short', 'loc_A02']
mov ['eax,', '[ebp+var_28]']
jmp ['short', 'loc_A07']
jmp ['loc_90B']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_Lzma2WithFilters_Create@4 proc near    
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
push ['eax']
call ['_Lzma2Enc_Create@8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx],', '0']
jnz ['short', 'loc_A8A']
mov ['eax,', '2']
jmp ['short', 'loc_A8C']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_Lzma2WithFilters_Free@4 proc near      
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
push ['eax']
call ['_SeqInFilter_Free@4']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx],', '0']
jz ['short', 'loc_ACB']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_Lzma2Enc_Destroy@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '0']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_SeqInFilter_Free@4 proc near           
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+1Ch],', '0']
jz ['short', 'loc_B12']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
push ['edx']
push ['offset', '_g_Alloc']
call ['dword', 'ptr', 'ds:_g_Alloc+4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+1Ch],', '0']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_Xz_Compress@24 proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '214h']
push ['edi']
lea ['edi,', '[ebp+var_214]']
mov ['ecx,', '85h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_10]']
movzx ['cx,', 'byte', 'ptr', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
push ['eax']
call ['_Lzma2Enc_SetProps@8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_B76']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_F44']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx]']
push ['eax']
call ['_Xz_WriteHeader@8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_B97']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_F44']
mov ['[ebp+var_158],', '0']
mov ['[ebp+var_15C],', '0']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_160],', 'edx']
mov ['[ebp+var_140],', '0']
xor ['eax,', 'eax']
cmp ['[ebp+var_160],', '0']
setnz ['al']
movzx ['ecx,', '[ebp+var_140]']
or ['ecx,', 'eax']
mov ['[ebp+var_140],', 'cl']
cmp ['[ebp+var_160],', '0']
jz ['loc_C87']
mov ['edx,', '[ebp+var_158]']
shl ['edx,', '5']
lea ['eax,', '[ebp+edx+var_138]']
mov ['[ebp+var_15C],', 'eax']
mov ['ecx,', '[ebp+var_158]']
add ['ecx,', '1']
mov ['[ebp+var_158],', 'ecx']
mov ['edx,', '[ebp+var_160]']
mov ['eax,', '[edx]']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+var_15C]']
mov ['[edx],', 'eax']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+var_15C]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_160]']
cmp ['dword', 'ptr', '[ecx],', '3']
jnz ['short', 'loc_C5C']
mov ['edx,', '[ebp+var_160]']
mov ['eax,', '[edx+4]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_15C]']
mov ['[ecx+0Ch],', 'al']
mov ['edx,', '[ebp+var_15C]']
mov ['dword', 'ptr', '[edx+8],', '1']
jmp ['short', 'loc_C87']
mov ['eax,', '[ebp+var_160]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
jz ['short', 'loc_C87']
mov ['ecx,', '[ebp+var_15C]']
mov ['edx,', '[ebp+var_160]']
mov ['eax,', '[edx+8]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+var_15C]']
mov ['dword', 'ptr', '[ecx+8],', '4']
mov ['edx,', '[ebp+var_158]']
shl ['edx,', '5']
lea ['eax,', '[ebp+edx+var_138]']
mov ['[ebp+var_164],', 'eax']
mov ['ecx,', '[ebp+var_158]']
add ['ecx,', '1']
mov ['[ebp+var_158],', 'ecx']
mov ['edx,', '[ebp+var_164]']
mov ['dword', 'ptr', '[edx],', '21h']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_164]']
mov ['dword', 'ptr', '[eax+8],', '1']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_Lzma2Enc_WriteProperties@4']
mov ['ecx,', '[ebp+var_164]']
mov ['[ecx+0Ch],', 'al']
mov ['[ebp+var_B0],', 'offset', '_MyWrite@12']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_AC],', 'edx']
mov ['[ebp+var_A8],', '0']
mov ['[ebp+var_A4],', '0']
lea ['eax,', '[ebp+var_B0]']
push ['eax']
lea ['ecx,', '[ebp+var_150]']
push ['ecx']
call ['_XzBlock_WriteHeader@8']
mov ['[ebp+var_168],', 'eax']
cmp ['[ebp+var_168],', '0']
jz ['short', 'loc_D34']
mov ['eax,', '[ebp+var_168]']
jmp ['loc_F44']
mov ['[ebp+var_98],', 'offset', '_SeqCheckInStream_Read@12']
mov ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_94],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
and ['ecx,', '0Fh']
push ['ecx']
lea ['edx,', '[ebp+var_98]']
push ['edx']
call ['_SeqCheckInStream_Init@8']
cmp ['[ebp+var_160],', '0']
jz ['short', 'loc_D9F']
mov ['eax,', '[ebp+arg_4]']
lea ['ecx,', '[ebp+var_98]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_15C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
push ['eax']
call ['_SeqInFilter_Init@8']
mov ['[ebp+var_16C],', 'eax']
cmp ['[ebp+var_16C],', '0']
jz ['short', 'loc_D9F']
mov ['eax,', '[ebp+var_16C]']
jmp ['loc_F44']
mov ['ecx,', '[ebp+var_A8]']
mov ['[ebp+var_174],', 'ecx']
mov ['edx,', '[ebp+var_A4]']
mov ['[ebp+var_170],', 'edx']
cmp ['[ebp+var_160],', '0']
jz ['short', 'loc_DCE']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+var_214],', 'eax']
jmp ['short', 'loc_DDA']
lea ['ecx,', '[ebp+var_98]']
mov ['[ebp+var_214],', 'ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+var_214]']
push ['eax']
lea ['ecx,', '[ebp+var_B0]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
push ['eax']
call ['_Lzma2Enc_Encode@16']
mov ['[ebp+var_178],', 'eax']
mov ['ecx,', '[ebp+var_178]']
mov ['[ebp+var_17C],', 'ecx']
cmp ['[ebp+var_17C],', '0']
jz ['short', 'loc_E1D']
mov ['eax,', '[ebp+var_17C]']
jmp ['loc_F44']
mov ['edx,', '[ebp+var_90]']
mov ['[ebp+var_148],', 'edx']
mov ['eax,', '[ebp+var_8C]']
mov ['[ebp+var_144],', 'eax']
mov ['ecx,', '[ebp+var_A8]']
sub ['ecx,', '[ebp+var_174]']
mov ['edx,', '[ebp+var_A4]']
sbb ['edx,', '[ebp+var_170]']
mov ['[ebp+var_150],', 'ecx']
mov ['[ebp+var_14C],', 'edx']
mov ['[ebp+var_180],', '0']
mov ['eax,', '[ebp+var_150]']
add ['eax,', '[ebp+var_180]']
and ['eax,', '3']
jz ['short', 'loc_E93']
mov ['ecx,', '[ebp+var_180]']
mov ['[ebp+ecx+var_204],', '0']
mov ['edx,', '[ebp+var_180]']
add ['edx,', '1']
mov ['[ebp+var_180],', 'edx']
jmp ['short', 'loc_E63']
mov ['eax,', '[ebp+var_180]']
lea ['ecx,', '[ebp+eax+var_204]']
push ['ecx']
lea ['edx,', '[ebp+var_98]']
push ['edx']
call ['_SeqCheckInStream_GetDigest@8']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
push ['ecx']
call ['_XzFlags_GetCheckSize@4']
add ['eax,', '[ebp+var_180]']
push ['eax']
lea ['edx,', '[ebp+var_204]']
push ['edx']
lea ['eax,', '[ebp+var_B0]']
push ['eax']
call ['_WriteBytes@12']
mov ['[ebp+var_20C],', 'eax']
cmp ['[ebp+var_20C],', '0']
jz ['short', 'loc_EEA']
mov ['eax,', '[ebp+var_20C]']
jmp ['short', 'loc_F44']
push ['offset', '_g_Alloc']
mov ['ecx,', '[ebp+var_180]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_A8]']
sub ['eax,', 'ecx']
mov ['ecx,', '[ebp+var_A4]']
sbb ['ecx,', 'edx']
push ['ecx']
push ['eax']
mov ['edx,', '[ebp+var_144]']
push ['edx']
mov ['eax,', '[ebp+var_148]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Xz_AddIndexRecord@24']
mov ['[ebp+var_210],', 'eax']
cmp ['[ebp+var_210],', '0']
jz ['short', 'loc_F37']
mov ['eax,', '[ebp+var_210]']
jmp ['short', 'loc_F44']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Xz_WriteFooter@8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN24']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '214h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
endp
_SeqCheckInStream_Init@8 proc near      
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '10h']
push ['edx']
call ['_XzCheck_Init@8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_SeqCheckInStream_GetDigest@8 proc near 
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '10h']
push ['ecx']
call ['_XzCheck_Final@8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_SeqCheckInStream_Read@12 proc near     
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[eax]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '10h']
push ['edx']
call ['_XzCheck_Update@12']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['ecx,', '[eax+8]']
adc ['edx,', '[eax+0Ch]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+8],', 'ecx']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+var_8]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_MyWrite@12     proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[eax]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+arg_8],', 'eax']
mov ['edx,', '[ebp+arg_8]']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['edx,', '[ecx+8]']
adc ['eax,', '[ecx+0Ch]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'edx']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+arg_8]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_SeqInFilter_Init@8 proc near           
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+1Ch],', '0']
jnz ['short', 'loc_1180']
mov ['esi,', 'esp']
push ['100000h']
push ['offset', '_g_Alloc']
call ['dword', 'ptr', 'ds:_g_Alloc']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+1Ch],', '0']
jnz ['short', 'loc_1180']
mov ['eax,', '2']
jmp ['loc_121C']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+24h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+20h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+28h],', '0']
push ['offset', '_g_Alloc']
push ['1']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[eax]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '8']
push ['eax']
call ['_BraState_SetFromMethod@20']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_11C9']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_121C']
mov ['esi,', 'esp']
push ['offset', '_g_Alloc']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '0Ch']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1202']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_121C']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Xz_EncodeEmpty@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_20]']
push ['eax']
call ['_Xz_Construct@4']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_20]']
push ['edx']
call ['_Xz_WriteHeader@8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_1286']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['_Xz_WriteFooter@8']
mov ['[ebp+var_4],', 'eax']
push ['offset', '_g_Alloc']
lea ['edx,', '[ebp+var_20]']
push ['edx']
call ['_Xz_Free@8']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
