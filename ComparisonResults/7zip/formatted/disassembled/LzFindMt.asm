_MtSync_Init@4  proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '1']
pop ['ebp']
retn ['4']
endp
_BtThreadFunc@4 proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2Ch']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+14h]']
push ['edx']
call ['_Handle_WaitObject@4']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '18h']
push ['eax']
call ['_Event_Set@4']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+8],', '0']
jz ['short', 'loc_6E']
jmp ['short', 'loc_D8']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+0Ch],', '0']
jz ['short', 'loc_9D']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+48h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '128h']
push ['edx']
call ['_MtSync_StopWriting@4']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1Ch']
push ['eax']
call ['_Event_Set@4']
jmp ['short', 'loc_D3']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+20h]']
push ['edx']
call ['_Handle_WaitObject@4']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_BtFillBlock@8']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '24h']
push ['ecx']
call ['_Semaphore_Release1@4']
jmp ['short', 'loc_63']
jmp ['loc_44']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_MtSync_StopWriting@4 proc near         
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+48h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+10h],', '0']
jz ['short', 'loc_120']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_125']
jmp ['loc_1C0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0Ch],', '1']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+2Ch],', '0']
jz ['short', 'loc_158']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '30h']
mov ['esi,', 'esp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__LeaveCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+2Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '20h']
push ['edx']
call ['_Semaphore_Release1@4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
push ['ecx']
call ['_Handle_WaitObject@4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[edx+48h]']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
cmp ['eax,', 'ecx']
jz ['short', 'loc_18F']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_196']
mov ['[ebp+var_8],', '0']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1B6']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
push ['ecx']
call ['_Handle_WaitObject@4']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '20h']
push ['edx']
call ['_Semaphore_Release1@4']
jmp ['short', 'loc_170']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '1']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_BtFillBlock@8  proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '128h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jnz ['short', 'loc_229']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '30h']
mov ['esi,', 'esp']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__EnterCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+2Ch],', '1']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '3Fh']
shl ['ecx,', '0Eh']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
lea ['ecx,', '[eax+ecx*4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_BtGetMatches@8']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+114h],', '0FFFFBFFFh']
jbe ['short', 'loc_29D']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+114h]']
sub ['eax,', '[edx+120h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+120h]']
shl ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+108h]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_MatchFinder_Normalize3@12']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+114h]']
sub ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+114h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jnz ['short', 'loc_2C6']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '30h']
mov ['esi,', 'esp']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__LeaveCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+2Ch],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_BtGetMatches@8 proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '30h']
push ['edi']
lea ['edi,', '[ebp+var_30]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '2']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10Ch]']
shl ['ecx,', '1']
mov ['edx,', '4000h']
sub ['edx,', 'ecx']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+104h]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+var_C]']
jnb ['loc_5D6']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+0FCh]']
cmp ['eax,', '[edx+100h]']
jnz ['loc_3D6']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MatchFinderMt_GetNextBlock_Hash@4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[edx+104h]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+104h]']
cmp ['ecx,', '[eax+110h]']
jb ['short', 'loc_37D']
jmp ['short', 'loc_328']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[edx+104h]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_4]']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+arg_4],', 'ecx']
jmp ['short', 'loc_3B1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+104h]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+104h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+104h],', '0']
jz ['short', 'loc_3D1']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '4']
mov ['[ebp+arg_4],', 'ecx']
jmp ['short', 'loc_39C']
jmp ['loc_5DE']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+100h]']
sub ['ecx,', '[eax+0FCh]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10Ch]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+114h]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+11Ch]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[edx+104h]']
jb ['short', 'loc_429']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+104h]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+104h]']
sub ['ecx,', '[ebp+var_14]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+var_20]']
cmp ['edx,', '[ebp+var_10]']
jnb ['short', 'loc_449']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+120h]']
sub ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
cmp ['eax,', '[ebp+var_10]']
jnb ['short', 'loc_466']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_C]']
jnb ['loc_572']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_10]']
sub ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
test ['eax,', 'eax']
jz ['short', 'loc_48B']
mov ['[ebp+var_2C],', '1']
jmp ['short', 'loc_492']
mov ['[ebp+var_2C],', '0']
cmp ['[ebp+var_2C],', '0']
jz ['loc_572']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_4]']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0FCh]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0F8h]']
mov ['ecx,', '[ebp+var_18]']
sub ['ecx,', '[edx+eax*4]']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0FCh]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0FCh],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+110h]']
sub ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '4']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+124h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+120h]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+108h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+118h]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['_GetMatchesSpec1@40']
sub ['eax,', '[ebp+var_24]']
sar ['eax,', '2']
mov ['[ebp+var_28],', 'eax']
mov ['edx,', '[ebp+var_28]']
sub ['edx,', '1']
mov ['eax,', '[ebp+var_24]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '1']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+118h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+118h],', 'edx']
jmp ['loc_466']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_18]']
sub ['edx,', '[ecx+114h]']
add ['edx,', '[ebp+var_4]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_18]']
sub ['ecx,', '[eax+114h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+104h]']
sub ['eax,', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+104h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_18]']
mov ['[edx+114h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_1C]']
cmp ['edx,', '[ecx+120h]']
jnz ['short', 'loc_5C5']
mov ['[ebp+var_1C],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_1C]']
mov ['[eax+11Ch],', 'ecx']
jmp ['loc_328']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
pop ['edi']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_MatchFinderMt_GetNextBlock_Hash@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '128h']
push ['eax']
call ['_MtSync_GetNextBlock@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+170h]']
sub ['edx,', '1']
and ['edx,', '7']
shl ['edx,', '0Dh']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+0FCh],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+100h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0FCh]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F8h]']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+100h]']
add ['eax,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+100h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0FCh]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0FCh],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0FCh]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0F8h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[edx+eax*4]']
mov ['[ecx+104h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0FCh]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0FCh],', 'ecx']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_MtSync_GetNextBlock@4 proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_727']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+48h],', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '18h']
push ['edx']
call ['_Event_Reset@4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1Ch']
push ['eax']
call ['_Event_Reset@4']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '14h']
push ['ecx']
call ['_Event_Set@4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
push ['eax']
call ['_Handle_WaitObject@4']
jmp ['short', 'loc_762']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '30h']
mov ['esi,', 'esp']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__LeaveCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+2Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+48h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+48h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '20h']
push ['eax']
call ['_Semaphore_Release1@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+24h]']
push ['edx']
call ['_Handle_WaitObject@4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '30h']
mov ['esi,', 'esp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__EnterCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+2Ch],', '1']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_MatchFinderMt_Construct@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0F8h],', '0']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '128h']
push ['ecx']
call ['_MtSync_Construct@4']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2Ch']
push ['edx']
call ['_MtSync_Construct@4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_MtSync_Construct@4 proc near           
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+28h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+2Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+10h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+14h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+18h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+1Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+20h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+24h],', '0']
pop ['ebp']
retn ['4']
endp
_MatchFinderMt_Destruct@8 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '128h']
push ['eax']
call ['_MtSync_Destruct@4']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '2Ch']
push ['ecx']
call ['_MtSync_Destruct@4']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinderMt_FreeMem@8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_MtSync_Destruct@4 proc near            
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+10h],', '0']
jz ['short', 'loc_8CD']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MtSync_StopWriting@4']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+8],', '1']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_8B5']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '14h']
push ['ecx']
call ['_Event_Set@4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
push ['eax']
call ['_Handle_WaitObject@4']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '10h']
push ['ecx']
call ['_HandlePtr_Close@4']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+28h],', '0']
jz ['short', 'loc_8F6']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '30h']
mov ['esi,', 'esp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__DeleteCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+28h],', '0']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '14h']
push ['edx']
call ['_HandlePtr_Close@4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '18h']
push ['eax']
call ['_HandlePtr_Close@4']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1Ch']
push ['ecx']
call ['_HandlePtr_Close@4']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '20h']
push ['edx']
call ['_HandlePtr_Close@4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '24h']
push ['eax']
call ['_HandlePtr_Close@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '0']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_MatchFinderMt_FreeMem@8 proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F8h]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+0F8h],', '0']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_MatchFinderMt_Create@24 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+178h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
shl ['ecx,', '2']
cmp ['ecx,', '4000h']
jb ['short', 'loc_9D9']
mov ['eax,', '5']
jmp ['loc_ABF']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+0F8h],', '0']
jnz ['short', 'loc_A32']
mov ['esi,', 'esp']
push ['440000h']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
mov ['edx,', '[ecx]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0F8h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+0F8h],', '0']
jnz ['short', 'loc_A1D']
mov ['eax,', '2']
jmp ['loc_ABF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F8h]']
add ['ecx,', '40000h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '110000h']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
add ['ecx,', '2000h']
mov ['[ebp+arg_10],', 'ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_MatchFinder_Create@24']
test ['eax,', 'eax']
jnz ['short', 'loc_A71']
mov ['eax,', '2']
jmp ['short', 'loc_ABF']
push ['8']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['offset', '_HashThreadFunc2@4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '128h']
push ['eax']
call ['_MtSync_Create@16']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_A98']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_ABF']
push ['40h']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['offset', '_BtThreadFunc2@4']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2Ch']
push ['edx']
call ['_MtSync_Create@16']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_ABD']
mov ['eax,', '[ebp+var_C]']
jmp ['short', 'loc_ABF']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
endp
_MtSync_Create@16 proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MtSync_Create2@16']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_B02']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MtSync_Destruct@4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_MtSync_Create2@16 proc near            
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_B32']
xor ['eax,', 'eax']
jmp ['loc_C11']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '30h']
push ['ecx']
call ['_CriticalSection_Init@4']
test ['eax,', 'eax']
jz ['short', 'loc_B4C']
mov ['eax,', '0Ch']
jmp ['loc_C11']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+28h],', '1']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '14h']
push ['eax']
call ['_AutoResetEvent_CreateNotSignaled@4']
test ['eax,', 'eax']
jz ['short', 'loc_B70']
mov ['eax,', '0Ch']
jmp ['loc_C11']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '18h']
push ['ecx']
call ['_AutoResetEvent_CreateNotSignaled@4']
test ['eax,', 'eax']
jz ['short', 'loc_B8A']
mov ['eax,', '0Ch']
jmp ['loc_C11']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1Ch']
push ['edx']
call ['_AutoResetEvent_CreateNotSignaled@4']
test ['eax,', 'eax']
jz ['short', 'loc_BA1']
mov ['eax,', '0Ch']
jmp ['short', 'loc_C11']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '20h']
push ['edx']
call ['_Semaphore_Create@12']
test ['eax,', 'eax']
jz ['short', 'loc_BC0']
mov ['eax,', '0Ch']
jmp ['short', 'loc_C11']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '24h']
push ['ecx']
call ['_Semaphore_Create@12']
test ['eax,', 'eax']
jz ['short', 'loc_BDD']
mov ['eax,', '0Ch']
jmp ['short', 'loc_C11']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '1']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '10h']
push ['edx']
call ['_Thread_Create@12']
test ['eax,', 'eax']
jz ['short', 'loc_C06']
mov ['eax,', '0Ch']
jmp ['short', 'loc_C11']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '1']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['10h']
endp
_HashThreadFunc2@4 proc near            
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_HashThreadFunc@4']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_HashThreadFunc@4 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '128h']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+14h]']
push ['edx']
call ['_Handle_WaitObject@4']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '18h']
push ['eax']
call ['_Event_Set@4']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+8],', '0']
jz ['short', 'loc_C9C']
jmp ['loc_EE4']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+0Ch],', '0']
jz ['short', 'loc_CBF']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+48h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1Ch']
push ['edx']
call ['_Event_Set@4']
jmp ['loc_EDF']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+178h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_MatchFinder_NeedMove@4']
test ['eax,', 'eax']
jz ['loc_D8C']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '5Ch']
mov ['esi,', 'esp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__EnterCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '158h']
mov ['esi,', 'esp']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__EnterCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_MatchFinder_GetPointerToCurrentPos@4']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['_MatchFinder_MoveBlock@4']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_MatchFinder_GetPointerToCurrentPos@4']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_10]']
sub ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
sub ['ecx,', 'edx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_10]']
sub ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+118h]']
sub ['edx,', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+118h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '5Ch']
mov ['esi,', 'esp']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__LeaveCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '158h']
mov ['esi,', 'esp']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__LeaveCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_C8E']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
call ['_Handle_WaitObject@4']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_MatchFinder_ReadIfRequired@4']
mov ['eax,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[eax+4],', '0FFFFDFFFh']
jbe ['short', 'loc_DEF']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ecx+4]']
sub ['eax,', '[edx+50h]']
sub ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['_MatchFinder_ReduceOffsets@8']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+2Ch]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+54h]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+24h]']
lea ['eax,', '[edx+eax*4]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['_MatchFinder_Normalize3@12']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '7']
shl ['edx,', '0Dh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0F8h]']
lea ['edx,', '[ecx+edx*4]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ecx+0Ch]']
sub ['eax,', '[edx+4]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['dword', 'ptr', '[ecx],', '2']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_20]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_20]']
cmp ['edx,', '[ecx+48h]']
jb ['short', 'loc_EB2']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_20]']
sub ['ecx,', '[eax+48h]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+var_20],', '1FFEh']
jbe ['short', 'loc_E5B']
mov ['[ebp+var_20],', '1FFEh']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '60h']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '8']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+2Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+54h]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+24h]']
lea ['edx,', '[ecx+edx*4]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+174h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_1C]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_C]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '24h']
push ['eax']
call ['_Semaphore_Release1@4']
jmp ['loc_C8E']
jmp ['loc_C6F']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_BtThreadFunc2@4 proc near              
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '190h']
push ['edi']
lea ['edi,', '[ebp+var_190]']
mov ['ecx,', '64h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_190],', '0']
mov ['[ebp+var_190],', '0']
jmp ['short', 'loc_F4B']
mov ['eax,', '[ebp+var_190]']
add ['eax,', '1']
mov ['[ebp+var_190],', 'eax']
cmp ['[ebp+var_190],', '10h']
jnb ['short', 'loc_F64']
mov ['ecx,', '[ebp+var_190]']
mov ['[ebp+ecx+var_188],', '0']
jmp ['short', 'loc_F3C']
movzx ['edx,', '[ebp+var_188]']
test ['edx,', 'edx']
jnz ['short', 'loc_F78']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_BtThreadFunc@4']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '190h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_MatchFinderMt_Init@4 proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+178h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+100h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+0FCh],', '0']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_MatchFinder_Init@4']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_MatchFinder_GetPointerToCurrentPos@4']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+20h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+24h]']
mov ['[ecx+18h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+54h]']
mov ['[ecx+1Ch],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '60h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+24h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+28h]']
mov ['[eax+108h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+20h]']
mov ['[eax+10Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+48h]']
mov ['[eax+110h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax+114h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[eax+118h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+14h]']
mov ['[eax+11Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+18h]']
mov ['[eax+120h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+30h]']
mov ['[eax+124h],', 'edx']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_MatchFinderMt_ReleaseStream@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2Ch']
push ['eax']
call ['_MtSync_StopWriting@4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_MatchFinderMt_CreateVTable@8 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '_MatchFinderMt_Init@4']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+4],', 'offset', '_MatchFinderMt_GetNumAvailableBytes@4']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+8],', 'offset', '_MatchFinderMt_GetPointerToCurrentPos@4']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+0Ch],', 'offset', '_MatchFinderMt_GetMatches@8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+178h]']
mov ['eax,', '[edx+48h]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '2']
jz ['short', 'loc_1168']
cmp ['[ebp+var_4],', '3']
jz ['short', 'loc_1195']
jmp ['short', 'loc_11B8']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+174h],', 'offset', '_GetHeads2@28']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+28h],', '0']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax+10h],', 'offset', '_MatchFinderMt0_Skip@8']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', 'offset', '_MatchFinderMt2_GetMatches@8']
jmp ['short', 'loc_11F9']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+174h],', 'offset', '_GetHeads3@28']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+28h],', 'offset', '_MixMatches2@12']
mov ['ecx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[ecx+10h],', 'offset', '_MatchFinderMt2_Skip@8']
jmp ['short', 'loc_11F9']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+178h]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1Eh]']
test ['ecx,', 'ecx']
jz ['short', 'loc_11D2']
mov ['[ebp+var_8],', 'offset', '_GetHeads4b@28']
jmp ['short', 'loc_11D9']
mov ['[ebp+var_8],', 'offset', '_GetHeads4@28']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+174h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+28h],', 'offset', '_MixMatches3@12']
mov ['edx,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[edx+10h],', 'offset', '_MatchFinderMt3_Skip@8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_GetHeads2@28   proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
jmp ['short', 'loc_1216']
mov ['eax,', '[ebp+arg_14]']
sub ['eax,', '1']
mov ['[ebp+arg_14],', 'eax']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_126B']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
shl ['ecx,', '8']
or ['edx,', 'ecx']
mov ['[ebp+var_4],', 'edx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+arg_10]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_10]']
add ['ecx,', '4']
mov ['[ebp+arg_10],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+edx*4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
jmp ['short', 'loc_120D']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
_GetHeads3@28   proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
jmp ['short', 'loc_1296']
mov ['eax,', '[ebp+arg_14]']
sub ['eax,', '1']
mov ['[ebp+arg_14],', 'eax']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_12FB']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
mov ['eax,', '[ebp+arg_18]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '8']
xor ['ecx,', 'eax']
and ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_10]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+ecx*4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
jmp ['short', 'loc_128D']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
_GetHeads4@28   proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
jmp ['short', 'loc_1326']
mov ['eax,', '[ebp+arg_14]']
sub ['eax,', '1']
mov ['[ebp+arg_14],', 'eax']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_139D']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
mov ['eax,', '[ebp+arg_18]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '8']
xor ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+3]']
mov ['edx,', '[ebp+arg_18]']
mov ['eax,', '[edx+eax*4]']
shl ['eax,', '5']
xor ['ecx,', 'eax']
and ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_10]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+ecx*4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
jmp ['short', 'loc_131D']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
_GetHeads4b@28  proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
jmp ['short', 'loc_13C6']
mov ['eax,', '[ebp+arg_14]']
sub ['eax,', '1']
mov ['[ebp+arg_14],', 'eax']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_1437']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
mov ['eax,', '[ebp+arg_18]']
xor ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
shl ['eax,', '8']
xor ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+3]']
shl ['eax,', '10h']
xor ['ecx,', 'eax']
and ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_10]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
add ['eax,', '4']
mov ['[ebp+arg_10],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+ecx*4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
jmp ['short', 'loc_13BD']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
_MatchFinderMt_GetPointerToCurrentPos@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax]']
pop ['ebp']
retn ['4']
endp
_MatchFinderMt_GetNumAvailableBytes@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+0Ch]']
jnz ['short', 'loc_146A']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinderMt_GetNextBlock_Bt@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+14h]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_MatchFinderMt_GetNextBlock_Bt@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2Ch']
push ['eax']
call ['_MtSync_GetNextBlock@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+74h]']
sub ['edx,', '1']
and ['edx,', '3Fh']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
shl ['eax,', '0Eh']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+0Ch]']
add ['ecx,', '[edx+eax*4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[eax+ecx*4]']
mov ['[edx+14h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+10h],', '0FFFFBFFFh']
jb ['short', 'loc_152D']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MatchFinderMt_Normalize@4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_MatchFinderMt_Normalize@4 proc near    
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+10h]']
sub ['eax,', '[edx+20h]']
sub ['eax,', '1']
push ['eax']
call ['_MatchFinder_Normalize3@12']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+20h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+10h],', 'edx']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_MixMatches2@12 proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
mov ['edx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[edx+1]']
xor ['edx,', '[eax+ecx*4]']
and ['edx,', '3FFh']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jb ['short', 'loc_1633']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_10]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_1633']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '2']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '4']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+var_14]']
sub ['edx,', '[ebp+var_8]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_8]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '4']
mov ['[ebp+arg_8],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_MixMatches3@12 proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
mov ['edx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[edx+1]']
xor ['edx,', '[eax+ecx*4]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
and ['eax,', '3FFh']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2]']
shl ['edx,', '8']
xor ['edx,', '[ebp+var_20]']
and ['edx,', '0FFFFh']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+eax*4+1000h]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+eax*4],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+eax*4+1000h],', 'edx']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+arg_4]']
jb ['short', 'loc_1759']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx+ecx]']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_1759']
mov ['eax,', '[ebp+var_1C]']
sub ['eax,', '[ebp+var_C]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx+2]']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx+2]']
cmp ['ecx,', 'eax']
jnz ['short', 'loc_1747']
mov ['ecx,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[ecx],', '3']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '8']
jmp ['short', 'loc_17A4']
mov ['edx,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[edx],', '2']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '8']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[ebp+arg_4]']
jb ['short', 'loc_17A1']
mov ['edx,', '[ebp+var_10]']
sub ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx]']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jnz ['short', 'loc_17A1']
mov ['ecx,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[ecx],', '3']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '4']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+var_1C]']
sub ['eax,', '[ebp+var_10]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '4']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_MatchFinderMt2_GetMatches@8 proc near  
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
lea ['ecx,', '[eax+ecx*4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax+1]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'edx']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_1822']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '2']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+var_8]']
jnb ['short', 'loc_1864']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '4']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_1819']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_MatchFinderMt_GetMatches@8 proc near   
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
lea ['ecx,', '[eax+ecx*4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax+1]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+8],', 'edx']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1948']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
sub ['ecx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'ecx']
cmp ['edx,', '4']
jb ['short', 'loc_1907']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_190E']
mov ['[ebp+var_10],', '0']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_1943']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+10h]']
sub ['ecx,', '[eax+20h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '[ebp+arg_4]']
sar ['eax,', '2']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_19CF']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+14h],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+10h]']
sub ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '4']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '4']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '2']
mov ['[ebp+var_8],', 'ecx']
jnz ['short', 'loc_1980']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '[ebp+arg_4]']
sar ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+10h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+10h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_8]']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_MatchFinderMt0_Skip@8 proc near        
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+0Ch]']
jnz ['short', 'loc_1A1A']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinderMt_GetNextBlock_Bt@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ecx+edx*4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
lea ['edx,', '[edx+ecx+1]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
jnz ['short', 'loc_1A03']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_MatchFinderMt2_Skip@8 proc near        
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+0Ch]']
jnz ['short', 'loc_1AAE']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinderMt_GetNextBlock_Bt@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
sub ['ecx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'ecx']
cmp ['edx,', '2']
jb ['short', 'loc_1AD1']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_1AD8']
mov ['[ebp+var_10],', '0']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_1B1D']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+24h]']
mov ['ecx,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[ecx+1]']
xor ['ecx,', '[edx+eax*4]']
and ['ecx,', '3FFh']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+10h]']
mov ['[eax+edx*4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+10h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx+eax*4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
lea ['eax,', '[eax+edx+1]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
jnz ['loc_1A97']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_MatchFinderMt3_Skip@8 proc near        
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+0Ch]']
jnz ['short', 'loc_1BB5']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MatchFinderMt_GetNextBlock_Bt@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
sub ['ecx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'ecx']
cmp ['edx,', '3']
jb ['short', 'loc_1BD8']
mov ['[ebp+var_18],', '1']
jmp ['short', 'loc_1BDF']
mov ['[ebp+var_18],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_1C56']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+24h]']
mov ['ecx,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[ecx+1]']
xor ['ecx,', '[edx+eax*4]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
and ['edx,', '3FFh']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2]']
shl ['ecx,', '8']
xor ['ecx,', '[ebp+var_14]']
and ['ecx,', '0FFFFh']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+10h]']
mov ['[eax+edx*4],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_C]']
mov ['esi,', '[ebp+var_8]']
mov ['ecx,', '[esi+ecx*4]']
mov ['[eax+edx*4+1000h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+10h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[edx+eax*4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
lea ['eax,', '[eax+edx+1]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
jnz ['loc_1B9E']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
