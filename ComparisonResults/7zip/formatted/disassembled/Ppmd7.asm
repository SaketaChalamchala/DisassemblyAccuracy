_Ppmd7_Construct@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+30h],', '0']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_5D']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '26h']
jnb ['short', 'loc_B2']
cmp ['[ebp+var_4],', '0Ch']
jb ['short', 'loc_72']
mov ['[ebp+var_14],', '4']
jmp ['short', 'loc_7E']
mov ['edx,', '[ebp+var_4]']
shr ['edx,', '2']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_8]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_4]']
mov ['[ecx+6Eh],', 'dl']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_10]']
sub ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
jnz ['short', 'loc_84']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_4]']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['[edx+48h],', 'al']
jmp ['short', 'loc_54']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+288h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+289h],', '2']
push ['9']
push ['4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '28Ah']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
push ['0F5h']
push ['6']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '293h']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_106']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '3']
jnb ['short', 'loc_11D']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_4]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_4]']
mov ['[eax+188h],', 'cl']
jmp ['short', 'loc_FD']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'edx']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_135']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '100h']
jnb ['short', 'loc_16C']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_4]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_C]']
mov ['[ecx+188h],', 'dl']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
jnz ['short', 'loc_16A']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_12C']
push ['40h']
push ['0']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '388h']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
push ['0C0h']
push ['8']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '3C8h']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_Ppmd7_Free@8   proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+28h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+30h],', '0']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_Ppmd7_Alloc@12 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+30h],', '0']
jz ['short', 'loc_210']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
cmp ['edx,', '[ebp+arg_4]']
jz ['short', 'loc_26B']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Ppmd7_Free@8']
mov ['edx,', '4']
sub ['edx,', '[ebp+arg_4]']
and ['edx,', '3']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+44h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
add ['edx,', '[ebp+arg_4]']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax+30h],', 'ecx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_262']
xor ['eax,', 'eax']
jmp ['short', 'loc_270']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+28h],', 'eax']
mov ['eax,', '1']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_Ppmd7_Init@8   proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+18h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_RestartModel@4']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+48Ah],', '7']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+488h],', 'cx']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+48Bh],', '40h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_RestartModel@4 proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
push ['98h']
push ['0']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0F0h']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+44h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+3Ch],', 'edx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+3Ch]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+28h]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+38h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+28h]']
shr ['eax,', '3']
xor ['edx,', 'edx']
mov ['ecx,', '0Ch']
div ['ecx']
imul ['eax,', '7']
imul ['eax,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+38h]']
sub ['ecx,', 'eax']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_20]']
mov ['[edx+40h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+34h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+2Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+18h],', '0Ch']
jnb ['short', 'loc_381']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+18h]']
mov ['[ebp+var_24],', 'eax']
jmp ['short', 'loc_388']
mov ['[ebp+var_24],', '0Ch']
mov ['ecx,', '[ebp+var_24]']
neg ['ecx']
sub ['ecx,', '1']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_28]']
mov ['[edx+24h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_28]']
mov ['[ecx+20h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+38h]']
sub ['edx,', '0Ch']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_2C]']
mov ['[eax+38h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_2C]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_2C]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '100h']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '101h']
mov ['[eax+2],', 'cx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['[edx+8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
add ['eax,', '600h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+34h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['[eax+4],', 'edx']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_439']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '100h']
jnb ['short', 'loc_46D']
mov ['ecx,', '[ebp+var_4]']
imul ['ecx,', '6']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+8]']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_4]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_10]']
mov ['byte', 'ptr', '[edx+1],', '1']
push ['0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['_SetSuccessor@8']
jmp ['short', 'loc_430']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_47F']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '80h']
jnb ['loc_50C']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_49E']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '8']
jnb ['short', 'loc_507']
mov ['eax,', '[ebp+var_4]']
shl ['eax,', '7']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+0ACCh]']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[edx+eax*2]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', '_kInitBinEsc[edx*2]']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '2']
xor ['edx,', 'edx']
div ['ecx']
mov ['edx,', '4000h']
sub ['edx,', 'eax']
mov ['[ebp+var_18],', 'dx']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_4EF']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '8']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '40h']
jnb ['short', 'loc_505']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_14]']
mov ['ax,', '[ebp+var_18]']
mov ['[edx+ecx*2],', 'ax']
jmp ['short', 'loc_4E6']
jmp ['short', 'loc_495']
jmp ['loc_476']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_51E']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '19h']
jnb ['short', 'loc_57A']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_536']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '10h']
jnb ['short', 'loc_578']
mov ['eax,', '[ebp+var_4]']
shl ['eax,', '6']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+48Ch]']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[edx+eax*4]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['byte', 'ptr', '[edx+2],', '3']
mov ['eax,', '[ebp+var_4]']
imul ['eax,', '5']
lea ['ecx,', 'ds:50h[eax*8]']
mov ['edx,', '[ebp+var_1C]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+var_1C]']
mov ['byte', 'ptr', '[eax+3],', '4']
jmp ['short', 'loc_52D']
jmp ['short', 'loc_515']
pop ['edi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_SetSuccessor@8 proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '0FFFFh']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2],', 'ax']
mov ['edx,', '[ebp+arg_4]']
shr ['edx,', '10h']
and ['edx,', '0FFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'dx']
pop ['ebp']
retn ['8']
endp
_Ppmd7_MakeEscFreq@12 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['ebx']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
sub ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
cmp ['edx,', '100h']
jz ['loc_6A7']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+187h]']
shl ['ecx,', '6']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+48Ch]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[edx+8]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx]']
movzx ['ecx,', 'word', 'ptr', '[ecx]']
sub ['edx,', 'ecx']
cmp ['[ebp+var_8],', 'edx']
sbb ['edx,', 'edx']
neg ['edx']
lea ['eax,', '[eax+edx*4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
movzx ['ecx,', 'word', 'ptr', '[edx+2]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx]']
movzx ['edx,', 'word', 'ptr', '[edx]']
imul ['edx,', '0Bh']
xor ['ebx,', 'ebx']
cmp ['ecx,', 'edx']
setl ['bl']
shl ['ebx,', '1']
lea ['eax,', '[eax+ebx*4]']
mov ['ecx,', '[ebp+arg_4]']
cmp ['[ebp+var_8],', 'ecx']
sbb ['edx,', 'edx']
neg ['edx']
shl ['edx,', '2']
lea ['eax,', '[eax+edx*4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+1Ch]']
lea ['eax,', '[eax+edx*4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2]']
sar ['edx,', 'cl']
mov ['[ebp+var_C],', 'edx']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
sub ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'dx']
xor ['ecx,', 'ecx']
cmp ['[ebp+var_C],', '0']
setz ['cl']
add ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_6BB']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '488h']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[ecx],', '1']
mov ['eax,', '[ebp+var_4]']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_Ppmd7_Update1@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
add ['eax,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+1],', 'al']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
add ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[eax+2],', 'cx']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax-5]']
cmp ['edx,', 'ecx']
jle ['short', 'loc_752']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '6']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_SwapStates@8']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '6']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
cmp ['edx,', '7Ch']
jle ['short', 'loc_752']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Rescale@4']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_NextContext@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_SwapStates@8   proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['dx,', '[eax+4]']
mov ['word', 'ptr', '[ebp+var_8],', 'dx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['ax,', '[eax+4]']
mov ['[ecx+4],', 'ax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx],', 'edx']
mov ['ax,', 'word', 'ptr', '[ebp+var_8]']
mov ['[ecx+4],', 'ax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Rescale@4      proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '5Ch']
push ['edi']
lea ['edi,', '[ebp+var_5C]']
mov ['ecx,', '17h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx]']
mov ['[ebp+var_24],', 'eax']
mov ['cx,', '[edx+4]']
mov ['[ebp+var_20],', 'cx']
jmp ['short', 'loc_835']
mov ['edx,', '[ebp+var_18]']
sub ['edx,', '6']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[ebp+var_14]']
jz ['short', 'loc_854']
mov ['ecx,', '[ebp+var_18]']
sub ['ecx,', '6']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ecx]']
mov ['[edx],', 'eax']
mov ['cx,', '[ecx+4]']
mov ['[edx+4],', 'cx']
jmp ['short', 'loc_82C']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_24]']
mov ['[edx],', 'eax']
mov ['cx,', '[ebp+var_20]']
mov ['[edx+4],', 'cx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
sub ['ecx,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
add ['edx,', '4']
mov ['eax,', '[ebp+var_18]']
mov ['[eax+1],', 'dl']
mov ['ecx,', '[ebp+arg_0]']
xor ['edx,', 'edx']
cmp ['dword', 'ptr', '[ecx+0Ch],', '0']
setnz ['dl']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
add ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1']
mov ['edx,', '[ebp+var_18]']
mov ['[edx+1],', 'cl']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
sub ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '6']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
mov ['edx,', '[ebp+var_10]']
sub ['edx,', 'ecx']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
add ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1']
mov ['edx,', '[ebp+var_18]']
mov ['[edx+1],', 'cl']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
add ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
mov ['ecx,', '[ebp+var_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx-5]']
cmp ['eax,', 'edx']
jle ['short', 'loc_966']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_38],', 'edx']
mov ['ax,', '[ecx+4]']
mov ['[ebp+var_34],', 'ax']
mov ['ecx,', '[ebp+var_2C]']
sub ['ecx,', '6']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[ecx]']
mov ['[edx],', 'eax']
mov ['cx,', '[ecx+4]']
mov ['[edx+4],', 'cx']
mov ['edx,', '[ebp+var_2C]']
sub ['edx,', '6']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_14]']
jz ['short', 'loc_956']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_38+1]']
mov ['edx,', '[ebp+var_2C]']
movzx ['eax,', 'byte', 'ptr', '[edx-5]']
cmp ['ecx,', 'eax']
jg ['short', 'loc_921']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ebp+var_38]']
mov ['[ecx],', 'edx']
mov ['ax,', '[ebp+var_34]']
mov ['[ecx+4],', 'ax']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
jnz ['loc_8C2']
mov ['edx,', '[ebp+var_18]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
test ['eax,', 'eax']
jnz ['loc_A86']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
movzx ['eax,', 'word', 'ptr', '[edx]']
mov ['[ebp+var_40],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_18]']
sub ['edx,', '6']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
test ['ecx,', 'ecx']
jz ['short', 'loc_98F']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_4]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
sub ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ecx],', 'dx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '1']
jnz ['short', 'loc_A46']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx]']
mov ['[ebp+var_54],', 'eax']
mov ['cx,', '[edx+4]']
mov ['[ebp+var_50],', 'cx']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_54+1]']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_54+1]']
sar ['eax,', '1']
sub ['edx,', 'eax']
mov ['byte', 'ptr', '[ebp+var_54+1],', 'dl']
mov ['ecx,', '[ebp+var_10]']
shr ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_10],', '1']
ja ['short', 'loc_9E5']
mov ['edx,', '[ebp+var_40]']
add ['edx,', '1']
shr ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx+6Dh]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_InsertNode@12']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
add ['edx,', '2']
mov ['[ebp+var_5C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_5C]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_5C]']
mov ['eax,', '[ebp+var_54]']
mov ['[edx],', 'eax']
mov ['cx,', '[ebp+var_50]']
mov ['[edx+4],', 'cx']
jmp ['short', 'loc_AAA']
mov ['edx,', '[ebp+var_40]']
add ['edx,', '1']
shr ['edx,', '1']
mov ['[ebp+var_44],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
add ['edx,', '1']
sar ['edx,', '1']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+var_44]']
cmp ['eax,', '[ebp+var_48]']
jz ['short', 'loc_A86']
mov ['ecx,', '[ebp+var_48]']
push ['ecx']
mov ['edx,', '[ebp+var_44]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_ShrinkUnits@16']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_10]']
shr ['eax,', '1']
sub ['edx,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
mov ['[eax+2],', 'dx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+4]']
mov ['[eax+8],', 'ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN27']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '5Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_InsertNode@12  proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+ecx*4+0F0h]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+edx*4+0F0h],', 'ecx']
pop ['ebp']
retn ['0Ch']
endp
_ShrinkUnits@16 proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6Dh]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+6Dh]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+var_8]']
jnz ['short', 'loc_B87']
mov ['eax,', '[ebp+arg_4]']
jmp ['loc_C26']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+edx*4+0F0h],', '0']
jz ['short', 'loc_C0E']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_RemoveNode@8']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '0Ch']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_18]']
sub ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
jnz ['short', 'loc_BB9']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_InsertNode@12']
mov ['eax,', '[ebp+var_C]']
jmp ['short', 'loc_C26']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_SplitBlock@16']
mov ['eax,', '[ebp+arg_4]']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_RemoveNode@8   proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+0F0h]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['edx,', '[edx]']
mov ['[ecx+eax*4+0F0h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_SplitBlock@16  proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+48h]']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_C]']
movzx ['eax,', 'byte', 'ptr', '[edx+48h]']
sub ['ecx,', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+48h]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+arg_4]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6Dh]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+48h]']
cmp ['eax,', '[ebp+var_8]']
jz ['short', 'loc_D16']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+48h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[ebp+var_C]']
sub ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
imul ['edx,', '0Ch']
add ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_InsertNode@12']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_InsertNode@12']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_NextContext@4  proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['eax,', 'word', 'ptr', '[ecx+4]']
shl ['eax,', '10h']
or ['edx,', 'eax']
mov ['[ebp+var_4],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '0']
jnz ['short', 'loc_D8E']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[edx+3Ch]']
jbe ['short', 'loc_D8E']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_D97']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_UpdateModel@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_UpdateModel@4  proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '58h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_58]']
mov ['ecx,', '16h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['eax,', 'word', 'ptr', '[ecx+4]']
shl ['eax,', '10h']
or ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
cmp ['eax,', '1Fh']
jge ['loc_ED3']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jz ['loc_ED3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '1']
jnz ['short', 'loc_E43']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '2']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
cmp ['ecx,', '20h']
jge ['short', 'loc_E3E']
mov ['edx,', '[ebp+var_18]']
mov ['al,', '[edx+1]']
add ['al,', '1']
mov ['ecx,', '[ebp+var_18]']
mov ['[ecx+1],', 'al']
jmp ['loc_ED3']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['eax,', 'byte', 'ptr', '[ecx]']
cmp ['edx,', 'eax']
jz ['short', 'loc_EA6']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '6']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
movzx ['ecx,', 'byte', 'ptr', '[edx]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_E5F']
mov ['edx,', '[ebp+var_1C]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
mov ['ecx,', '[ebp+var_1C]']
movzx ['edx,', 'byte', 'ptr', '[ecx-5]']
cmp ['eax,', 'edx']
jl ['short', 'loc_EA6']
mov ['eax,', '[ebp+var_1C]']
sub ['eax,', '6']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['_SwapStates@8']
mov ['edx,', '[ebp+var_1C]']
sub ['edx,', '6']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_1C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
cmp ['ecx,', '73h']
jge ['short', 'loc_ED3']
mov ['edx,', '[ebp+var_1C]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
add ['eax,', '2']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ecx+1],', 'al']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
add ['eax,', '2']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+2],', 'ax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+0Ch],', '0']
jnz ['short', 'loc_F28']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_CreateSuccessors@8']
mov ['[ebp+var_54],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_54]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_54]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx],', '0']
jnz ['short', 'loc_F11']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_RestartModel@4']
jmp ['loc_12F3']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_SetSuccessor@8']
jmp ['loc_12F3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
mov ['al,', '[eax]']
mov ['[edx],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+3Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+3Ch]']
cmp ['edx,', '[ecx+40h]']
jb ['short', 'loc_F6C']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_RestartModel@4']
jmp ['loc_12F3']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_FE3']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+var_4]']
ja ['short', 'loc_FA2']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_CreateSuccessors@8']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jnz ['short', 'loc_F9C']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_RestartModel@4']
jmp ['loc_12F3']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
sub ['eax,', '1']
mov ['[ebp+var_58],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_58]']
mov ['[ecx+0Ch],', 'edx']
cmp ['[ebp+var_58],', '0']
jnz ['short', 'loc_FE1']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+4]']
xor ['ecx,', 'ecx']
cmp ['eax,', '[edx]']
setnz ['cl']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+3Ch]']
sub ['eax,', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+3Ch],', 'eax']
jmp ['short', 'loc_FFB']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_SetSuccessor@8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
movzx ['eax,', 'word', 'ptr', '[edx]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
movzx ['ecx,', 'word', 'ptr', '[edx+2]']
sub ['ecx,', '[ebp+var_14]']
sub ['ecx,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_1038']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[eax]']
jz ['loc_12E2']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx]']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '1']
jz ['loc_1170']
mov ['ecx,', '[ebp+var_24]']
and ['ecx,', '1']
jnz ['loc_1128']
mov ['edx,', '[ebp+var_24]']
shr ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+var_30]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6Dh]']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_30]']
movzx ['eax,', 'byte', 'ptr', '[edx+6Eh]']
cmp ['[ebp+var_34],', 'eax']
jz ['loc_1128']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_AllocUnits@8']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '0']
jnz ['short', 'loc_10B4']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_RestartModel@4']
jmp ['loc_12F3']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_40],', 'eax']
mov ['ecx,', '[ebp+var_3C]']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+var_30]']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[ebp+var_44]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[ebp+var_44]']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[ebp+var_44]']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '0Ch']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_40]']
add ['ecx,', '0Ch']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '[ebp+var_48]']
sub ['edx,', '1']
mov ['[ebp+var_48],', 'edx']
jnz ['short', 'loc_10CF']
mov ['eax,', '[ebp+var_34]']
push ['eax']
mov ['ecx,', '[ebp+var_3C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_InsertNode@12']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_38]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+var_24]']
shl ['ecx,', '1']
cmp ['ecx,', '[ebp+var_14]']
sbb ['edx,', 'edx']
neg ['edx']
add ['eax,', 'edx']
mov ['ecx,', '[ebp+var_24]']
shl ['ecx,', '2']
cmp ['[ebp+var_14],', 'ecx']
sbb ['edx,', 'edx']
add ['edx,', '1']
mov ['ecx,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[ecx+2]']
mov ['esi,', '[ebp+var_24]']
shl ['esi,', '3']
cmp ['esi,', 'ecx']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
and ['edx,', 'ecx']
lea ['edx,', '[eax+edx*2]']
mov ['eax,', '[ebp+var_C]']
mov ['[eax+2],', 'dx']
jmp ['loc_11F5']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_AllocUnits@8']
mov ['[ebp+var_4C],', 'eax']
cmp ['[ebp+var_4C],', '0']
jnz ['short', 'loc_1192']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_RestartModel@4']
jmp ['loc_12F3']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '2']
mov ['ecx,', '[ebp+var_4C]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['ax,', '[eax+4]']
mov ['[ecx+4],', 'ax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4C]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
cmp ['ecx,', '1Eh']
jge ['short', 'loc_11CC']
mov ['edx,', '[ebp+var_4C]']
mov ['al,', '[edx+1]']
shl ['al,', '1']
mov ['ecx,', '[ebp+var_4C]']
mov ['[ecx+1],', 'al']
jmp ['short', 'loc_11D3']
mov ['edx,', '[ebp+var_4C]']
mov ['byte', 'ptr', '[edx+1],', '78h']
mov ['eax,', '[ebp+var_4C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+10h]']
mov ['eax,', '3']
cmp ['eax,', '[ebp+var_14]']
sbb ['edx,', 'edx']
neg ['edx']
add ['ecx,', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[eax+2],', 'cx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
shl ['eax,', '1']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
add ['edx,', '6']
imul ['eax,', 'edx']
mov ['[ebp+var_28],', 'eax']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
add ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
imul ['edx,', '6']
cmp ['[ebp+var_28],', 'edx']
jnb ['short', 'loc_125B']
mov ['eax,', '[ebp+var_28]']
cmp ['[ebp+var_2C],', 'eax']
sbb ['ecx,', 'ecx']
neg ['ecx']
mov ['edx,', '[ebp+var_2C]']
shl ['edx,', '2']
cmp ['[ebp+var_28],', 'edx']
sbb ['eax,', 'eax']
add ['eax,', '1']
lea ['ecx,', '[ecx+eax+1]']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_C]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
add ['eax,', '3']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+2],', 'ax']
jmp ['short', 'loc_129F']
mov ['edx,', '[ebp+var_2C]']
imul ['edx,', '9']
cmp ['[ebp+var_28],', 'edx']
sbb ['eax,', 'eax']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_2C]']
imul ['ecx,', '0Ch']
cmp ['[ebp+var_28],', 'ecx']
sbb ['edx,', 'edx']
add ['edx,', '1']
lea ['eax,', '[eax+edx+4]']
mov ['ecx,', '[ebp+var_2C]']
imul ['ecx,', '0Fh']
cmp ['[ebp+var_28],', 'ecx']
sbb ['edx,', 'edx']
add ['edx,', '1']
add ['eax,', 'edx']
mov ['[ebp+var_28],', 'eax']
mov ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
add ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+2],', 'cx']
mov ['eax,', '[ebp+var_24]']
imul ['eax,', '6']
mov ['ecx,', '[ebp+var_C]']
add ['eax,', '[ecx+4]']
mov ['[ebp+var_50],', 'eax']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+var_50]']
push ['eax']
call ['_SetSuccessor@8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+var_50]']
mov ['cl,', '[edx]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_50]']
mov ['al,', 'byte', 'ptr', '[ebp+var_28]']
mov ['[edx+1],', 'al']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_C]']
mov ['[edx],', 'cx']
jmp ['loc_102F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+4],', 'eax']
pop ['edi']
pop ['esi']
add ['esp,', '58h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_AllocUnits@8   proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+eax*4+0F0h],', '0']
jz ['short', 'loc_1343']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_RemoveNode@8']
jmp ['short', 'loc_138E']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+48h]']
imul ['edx,', '0Ch']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+38h]']
sub ['edx,', '[ecx+34h]']
cmp ['[ebp+var_4],', 'edx']
ja ['short', 'loc_1381']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
add ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+34h],', 'eax']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_138E']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_AllocUnitsRare@8']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_AllocUnitsRare@8 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+2Ch],', '0']
jnz ['short', 'loc_13EE']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_GlueFreeBlocks@4']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+edx*4+0F0h],', '0']
jz ['short', 'loc_13EE']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_RemoveNode@8']
jmp ['loc_1494']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '26h']
jnz ['short', 'loc_145C']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+48h]']
imul ['eax,', '0Ch']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2Ch]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+2Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+40h]']
sub ['eax,', '[edx+3Ch]']
cmp ['eax,', '[ebp+var_C]']
jbe ['short', 'loc_1450']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+40h]']
sub ['edx,', '[ebp+var_C]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax+40h],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_1457']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_1494']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+eax*4+0F0h],', '0']
jz ['short', 'loc_13F4']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_RemoveNode@8']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_SplitBlock@16']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_GlueFreeBlocks@4 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '48h']
push ['edi']
lea ['edi,', '[ebp+var_48]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
lea ['eax,', '[ebp+var_10]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+2Ch],', '0FFh']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_14EE']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '26h']
jnb ['short', 'loc_156A']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_20]']
movzx ['dx,', 'byte', 'ptr', '[ecx+48h]']
mov ['[ebp+var_24],', 'dx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+0F0h]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+eax*4+0F0h],', '0']
cmp ['[ebp+var_28],', '0']
jz ['short', 'loc_1565']
mov ['edx,', '[ebp+var_28]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_1C]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+var_28]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[edx]']
mov ['[ebp+var_28],', 'eax']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+var_2C]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+var_2C]']
mov ['cx,', '[ebp+var_24]']
mov ['[eax+2],', 'cx']
jmp ['short', 'loc_1524']
jmp ['loc_14E5']
mov ['edx,', '1']
mov ['eax,', '[ebp+var_18]']
mov ['[eax],', 'dx']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+34h]']
cmp ['ecx,', '[eax+38h]']
jz ['short', 'loc_15A3']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
mov ['ecx,', '1']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+var_1C]']
cmp ['edx,', '[ebp+var_18]']
jz ['short', 'loc_161F']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+var_34]']
imul ['eax,', '0Ch']
add ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_38]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
add ['edx,', '[ebp+var_34]']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+var_38]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_15E7']
cmp ['[ebp+var_34],', '10000h']
jb ['short', 'loc_15E9']
jmp ['short', 'loc_1614']
mov ['edx,', '[ebp+var_38]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_38]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['ecx,', '[ebp+var_30]']
mov ['dx,', 'word', 'ptr', '[ebp+var_34]']
mov ['[ecx+2],', 'dx']
jmp ['short', 'loc_15BB']
mov ['eax,', '[ebp+var_30]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_15A3']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
cmp ['ecx,', '[ebp+var_18]']
jz ['loc_16EC']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+var_3C]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
mov ['[ebp+var_40],', 'eax']
jmp ['short', 'loc_1667']
mov ['ecx,', '[ebp+var_40]']
sub ['ecx,', '80h']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '[ebp+var_3C]']
add ['edx,', '600h']
mov ['[ebp+var_3C],', 'edx']
cmp ['[ebp+var_40],', '80h']
jbe ['short', 'loc_1681']
push ['25h']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_InsertNode@12']
jmp ['short', 'loc_164F']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_40]']
movzx ['eax,', 'byte', 'ptr', '[edx+6Dh]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx+48h]']
cmp ['edx,', '[ebp+var_40]']
jz ['short', 'loc_16D0']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_20]']
movzx ['edx,', 'byte', 'ptr', '[ecx+48h]']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+var_40]']
sub ['eax,', '[ebp+var_48]']
sub ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+var_48]']
imul ['ecx,', '0Ch']
add ['ecx,', '[ebp+var_3C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_InsertNode@12']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_3C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_InsertNode@12']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_1C],', 'eax']
jmp ['loc_1628']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN23_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '48h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_CreateSuccessors@8 proc near           
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '144h']
push ['edi']
lea ['edi,', '[ebp+var_144]']
mov ['ecx,', '51h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
movzx ['edx,', 'word', 'ptr', '[eax+4]']
shl ['edx,', '10h']
or ['ecx,', 'edx']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_124],', '0']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_17A2']
mov ['eax,', '[ebp+var_124]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['[ebp+eax*4+var_11C],', 'edx']
mov ['eax,', '[ebp+var_124]']
add ['eax,', '1']
mov ['[ebp+var_124],', 'eax']
mov ['ecx,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[ecx+8],', '0']
jz ['loc_1873']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
cmp ['edx,', '1']
jz ['short', 'loc_17FA']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_12C],', 'ecx']
jmp ['short', 'loc_17E0']
mov ['edx,', '[ebp+var_12C]']
add ['edx,', '6']
mov ['[ebp+var_12C],', 'edx']
mov ['eax,', '[ebp+var_12C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
movzx ['edx,', 'byte', 'ptr', '[eax]']
cmp ['ecx,', 'edx']
jz ['short', 'loc_17F8']
jmp ['short', 'loc_17D1']
jmp ['short', 'loc_1806']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '2']
mov ['[ebp+var_12C],', 'eax']
mov ['ecx,', '[ebp+var_12C]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
mov ['eax,', '[ebp+var_12C]']
movzx ['ecx,', 'word', 'ptr', '[eax+4]']
shl ['ecx,', '10h']
or ['edx,', 'ecx']
mov ['[ebp+var_128],', 'edx']
mov ['edx,', '[ebp+var_128]']
cmp ['edx,', '[ebp+var_18]']
jz ['short', 'loc_184C']
mov ['eax,', '[ebp+var_128]']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_124],', '0']
jnz ['short', 'loc_184A']
mov ['eax,', '[ebp+var_14]']
jmp ['loc_1A44']
jmp ['short', 'loc_1873']
mov ['ecx,', '[ebp+var_124]']
mov ['edx,', '[ebp+var_12C]']
mov ['[ebp+ecx*4+var_11C],', 'edx']
mov ['eax,', '[ebp+var_124]']
add ['eax,', '1']
mov ['[ebp+var_124],', 'eax']
jmp ['loc_17A2']
mov ['ecx,', '[ebp+var_18]']
mov ['dl,', '[ecx]']
mov ['byte', 'ptr', '[ebp+var_C],', 'dl']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_SetSuccessor@8']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'word', 'ptr', '[edx]']
cmp ['eax,', '1']
jnz ['short', 'loc_18A4']
mov ['ecx,', '[ebp+var_14]']
mov ['dl,', '[ecx+3]']
mov ['byte', 'ptr', '[ebp+var_C+1],', 'dl']
jmp ['loc_195E']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_138],', 'ecx']
jmp ['short', 'loc_18C1']
mov ['edx,', '[ebp+var_138]']
add ['edx,', '6']
mov ['[ebp+var_138],', 'edx']
mov ['eax,', '[ebp+var_138]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_C]']
cmp ['ecx,', 'edx']
jz ['short', 'loc_18D4']
jmp ['short', 'loc_18B2']
mov ['eax,', '[ebp+var_138]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
sub ['ecx,', '1']
mov ['[ebp+var_130],', 'ecx']
mov ['edx,', '[ebp+var_14]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
sub ['eax,', 'edx']
sub ['eax,', '[ebp+var_130]']
mov ['[ebp+var_134],', 'eax']
mov ['eax,', '[ebp+var_130]']
shl ['eax,', '1']
cmp ['eax,', '[ebp+var_134]']
ja ['short', 'loc_192D']
mov ['ecx,', '[ebp+var_130]']
imul ['ecx,', '5']
cmp ['[ebp+var_134],', 'ecx']
sbb ['edx,', 'edx']
neg ['edx']
mov ['[ebp+var_140],', 'edx']
jmp ['short', 'loc_1952']
mov ['eax,', '[ebp+var_134]']
imul ['eax,', '3']
mov ['ecx,', '[ebp+var_130]']
lea ['eax,', '[eax+ecx*2-1]']
mov ['ecx,', '[ebp+var_134]']
shl ['ecx,', '1']
xor ['edx,', 'edx']
div ['ecx']
mov ['[ebp+var_140],', 'eax']
mov ['edx,', '[ebp+var_140]']
add ['edx,', '1']
mov ['byte', 'ptr', '[ebp+var_C+1],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+38h]']
cmp ['edx,', '[ecx+34h]']
jz ['short', 'loc_1995']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
sub ['ecx,', '0Ch']
mov ['[ebp+var_144],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_144]']
mov ['[edx+38h],', 'eax']
mov ['ecx,', '[ebp+var_144]']
mov ['[ebp+var_13C],', 'ecx']
jmp ['short', 'loc_19D2']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+0F0h],', '0']
jz ['short', 'loc_19B4']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_RemoveNode@8']
mov ['[ebp+var_13C],', 'eax']
jmp ['short', 'loc_19D2']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_AllocUnitsRare@8']
mov ['[ebp+var_13C],', 'eax']
cmp ['[ebp+var_13C],', '0']
jnz ['short', 'loc_19D2']
xor ['eax,', 'eax']
jmp ['short', 'loc_1A44']
mov ['edx,', '1']
mov ['eax,', '[ebp+var_13C]']
mov ['[eax],', 'dx']
mov ['ecx,', '[ebp+var_13C]']
add ['ecx,', '2']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx],', 'edx']
mov ['ax,', '[ebp+var_8]']
mov ['[ecx+4],', 'ax']
mov ['ecx,', '[ebp+var_13C]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+var_124]']
sub ['eax,', '1']
mov ['[ebp+var_124],', 'eax']
mov ['ecx,', '[ebp+var_13C]']
push ['ecx']
mov ['edx,', '[ebp+var_124]']
mov ['eax,', '[ebp+edx*4+var_11C]']
push ['eax']
call ['_SetSuccessor@8']
mov ['ecx,', '[ebp+var_13C]']
mov ['[ebp+var_14],', 'ecx']
cmp ['[ebp+var_124],', '0']
jnz ['loc_195E']
mov ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN31']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '144h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Ppmd7_Update1_0@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
shl ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['eax,', 'word', 'ptr', '[ecx+2]']
xor ['ecx,', 'ecx']
cmp ['edx,', 'eax']
setnle ['cl']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
mov ['edx,', '[ebp+arg_0]']
add ['ecx,', '[edx+14h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+20h],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
add ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[edx+2],', 'ax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
add ['edx,', '4']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_4]']
mov ['[ecx+1],', 'dl']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_4]']
cmp ['eax,', '7Ch']
jle ['short', 'loc_1B22']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Rescale@4']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_NextContext@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_Ppmd7_UpdateBin@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
movzx ['eax,', 'byte', 'ptr', '[ecx+1]']
xor ['ecx,', 'ecx']
cmp ['eax,', '80h']
setl ['cl']
add ['edx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
mov ['[ecx+1],', 'dl']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+14h],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+20h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_NextContext@4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_Ppmd7_Update2@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
movzx ['edx,', 'word', 'ptr', '[ecx+2]']
add ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ecx+2],', 'dx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
add ['ecx,', '4']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_4]']
mov ['[eax+1],', 'cl']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4]']
cmp ['edx,', '7Ch']
jle ['short', 'loc_1BEE']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Rescale@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
mov ['[ecx+20h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_UpdateModel@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
