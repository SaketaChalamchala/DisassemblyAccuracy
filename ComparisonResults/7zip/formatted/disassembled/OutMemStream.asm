?Free@COutMemStream@@QAEXXZ proc near   
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '28h']
call ['?Free@CMemLockBlocks@@QAEXPAVCMemBlockManagerMt@@@Z']
mov ['edx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[edx+40h],', '1']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Init@COutMemStream@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1Ch']
call ['?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ']
mov ['eax,', '[ebp+var_4]']
mov ['byte', 'ptr', '[eax+15h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[ecx+14h],', '0']
mov ['ecx,', '[ebp+var_4]']
call ['?Free@COutMemStream@@QAEXXZ']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+10h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?DetachData@COutMemStream@@QAEXAAUCMemLockBlocks@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '28h']
call ['?Detach@CMemLockBlocks@@QAEXAAU1@PAVCMemBlockManagerMt@@@Z']
mov ['ecx,', '[ebp+var_4]']
call ['?Free@COutMemStream@@QAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?WriteToRealStream@COutMemStream@@QAEJXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '48h']
call ['??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ']
push ['eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
call ['?GetBlockSize@CMemBlockManager@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '28h']
call ['?WriteToStream@CMemBlocks@@QBEJIPAUISequentialOutStream@@@Z']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_128']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_13C']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '28h']
call ['?Free@CMemLockBlocks@@QAEXPAVCMemBlockManagerMt@@@Z']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Write@COutMemStream@@UAGJPBXIPAI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '4Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_4C]']
mov ['ecx,', '13h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+this]']
movzx ['ecx,', 'byte', 'ptr', '[eax+14h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1A8']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '48h']
call ['??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ']
mov ['[ebp+var_40],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+var_40]']
push ['edx']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_3F2']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_1B7']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0']
cmp ['[ebp+arg_8],', '0']
jz ['loc_3F0']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '28h']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
mov ['ecx,', '[ebp+this]']
cmp ['[ecx+0Ch],', 'eax']
jnb ['loc_2CB']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '28h']
call ['??A?$CRecordVector@PAX@@QAEAAPAXI@Z']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+this]']
add ['ecx,', '[edx+10h]']
mov ['[ebp+Dst],', 'ecx']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+8]']
call ['?GetBlockSize@CMemBlockManager@@QBEIXZ']
mov ['ecx,', '[ebp+this]']
sub ['eax,', '[ecx+10h]']
mov ['[ebp+Size],', 'eax']
mov ['edx,', '[ebp+arg_8]']
cmp ['edx,', '[ebp+Size]']
jnb ['short', 'loc_217']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+Size],', 'eax']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_23E']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ecx]']
add ['edx,', '[ebp+Size]']
mov ['eax,', '[ebp+arg_C]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+Src]']
add ['ecx,', '[ebp+Size]']
mov ['[ebp+Src],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '[ebp+Size]']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+10h]']
add ['ecx,', '[ebp+Size]']
mov ['edx,', '[ebp+this]']
mov ['[edx+10h],', 'ecx']
mov ['ecx,', '[ebp+this]']
call ['?GetPos@COutMemStream@@ABE_KXZ']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+this]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_44]']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ecx+3Ch]']
jb ['short', 'loc_29A']
ja ['short', 'loc_28B']
mov ['eax,', '[ebp+var_44]']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[eax+38h]']
jbe ['short', 'loc_29A']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx+38h],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['[edx+3Ch],', 'ecx']
mov ['edx,', '[ebp+this]']
mov ['ecx,', '[edx+8]']
call ['?GetBlockSize@CMemBlockManager@@QBEIXZ']
mov ['ecx,', '[ebp+this]']
cmp ['[ecx+10h],', 'eax']
jnz ['short', 'loc_2C6']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[edx+0Ch]']
add ['eax,', '1']
mov ['ecx,', '[ebp+this]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+this]']
mov ['dword', 'ptr', '[edx+10h],', '0']
jmp ['loc_1B7']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '18h']
call ['??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ']
mov ['[ebp+Handles],', 'eax']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '1Ch']
call ['??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '24h']
call ['??BCSemaphore@NSynchronization@NWindows@@QAEPAXXZ']
mov ['[ebp+var_18],', 'eax']
mov ['esi,', 'esp']
push ['0FFFFFFFFh']
push ['0']
lea ['ecx,', '[ebp+Handles]']
push ['ecx']
mov ['edx,', '[ebp+this]']
movzx ['eax,', 'byte', 'ptr', '[edx+40h]']
neg ['eax']
sbb ['eax,', 'eax']
neg ['eax']
add ['eax,', '2']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__WaitForMultipleObjects@16']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_48],', 'ecx']
cmp ['[ebp+var_48],', '0']
jz ['short', 'loc_33D']
cmp ['[ebp+var_48],', '1']
jz ['short', 'loc_348']
cmp ['[ebp+var_48],', '2']
jz ['short', 'loc_3B4']
jmp ['short', 'loc_3B6']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[edx+20h]']
jmp ['loc_3F2']
mov ['eax,', '[ebp+this]']
mov ['byte', 'ptr', '[eax+14h],', '1']
mov ['ecx,', '[ebp+this]']
call ['?WriteToRealStream@COutMemStream@@QAEJXZ']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '0']
jz ['short', 'loc_368']
mov ['eax,', '[ebp+var_2C]']
jmp ['loc_3F2']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '48h']
call ['??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ']
mov ['[ebp+var_4C],', 'eax']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_4C]']
push ['ecx']
mov ['edx,', '[ebp+var_4C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_3AF']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_3C]']
jmp ['short', 'loc_3F2']
jmp ['short', 'loc_3BD']
mov ['eax,', '80004005h']
jmp ['short', 'loc_3F2']
mov ['edx,', '[ebp+this]']
mov ['ecx,', '[edx+8]']
call ['?AllocateBlock@CMemBlockManagerMt@@QAEPAXXZ']
push ['eax']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '28h']
call ['?Add@?$CRecordVector@PAX@@QAEIQAX@Z']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '28h']
call ['?Back@?$CRecordVector@PAX@@QAEAAPAXXZ']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_3EB']
mov ['eax,', '80004005h']
jmp ['short', 'loc_3F2']
jmp ['loc_1B7']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN26']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '4Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
?Seek@COutMemStream@@UAGJ_JIPA_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+this]']
movzx ['ecx,', 'byte', 'ptr', '[eax+14h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_4BA']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '4Ch']
call ['??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_483']
mov ['eax,', '80004005h']
jmp ['loc_51B']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '4Ch']
call ['??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ']
mov ['[ebp+var_4],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_4+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+10h]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_51B']
cmp ['[ebp+arg_C],', '1']
jnz ['short', 'loc_4D1']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_4]']
or ['edx,', 'dword', 'ptr', '[ebp+arg_4+4]']
jz ['short', 'loc_4CF']
mov ['eax,', '80004001h']
jmp ['short', 'loc_51B']
jmp ['short', 'loc_503']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_4FC']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_4]']
or ['eax,', 'dword', 'ptr', '[ebp+arg_4+4]']
jz ['short', 'loc_4E6']
mov ['eax,', '80004001h']
jmp ['short', 'loc_51B']
mov ['ecx,', '[ebp+this]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
mov ['edx,', '[ebp+this]']
mov ['dword', 'ptr', '[edx+10h],', '0']
jmp ['short', 'loc_503']
mov ['eax,', '80004001h']
jmp ['short', 'loc_51B']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_519']
mov ['ecx,', '[ebp+this]']
call ['?GetPos@COutMemStream@@ABE_KXZ']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
?SetSize@COutMemStream@@UAGJ_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+this]']
movzx ['ecx,', 'byte', 'ptr', '[eax+14h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_58F']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '4Ch']
call ['??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_560']
mov ['eax,', '80004005h']
jmp ['short', 'loc_5A0']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '4Ch']
call ['??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ']
mov ['[ebp+var_4],', 'eax']
mov ['esi,', 'esp']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_4+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+14h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_5A0']
mov ['eax,', '[ebp+this]']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_4]']
mov ['[eax+38h],', 'ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_4+4]']
mov ['[eax+3Ch],', 'edx']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?Reset@CBaseEvent@NSynchronization@NWindows@@QAEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_Event_Reset@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetBlockSize@CMemBlockManager@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??BCBaseEvent@NSynchronization@NWindows@@QAEPAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??BCSemaphore@NSynchronization@NWindows@@QAEPAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetPos@COutMemStream@@ABE_KXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esi,', '[eax+0Ch]']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+8]']
call ['?GetBlockSize@CMemBlockManager@@QBEIXZ']
mov ['edx,', 'eax']
mov ['eax,', 'esi']
mul ['edx']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+10h]']
xor ['esi,', 'esi']
add ['eax,', 'ecx']
adc ['edx,', 'esi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Size@?$CRecordVector@PAX@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['edx,', '[ebp+arg_0]']
mov ['[eax+ecx*4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Back@?$CRecordVector@PAX@@QAEAAPAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
lea ['eax,', '[eax+ecx*4-4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??C?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??C?$CMyComPtr@UIOutStream@@@@QBEPAUIOutStream@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??7?$CMyComPtr@UIOutStream@@@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax],', '0']
setz ['cl']
mov ['al,', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+Dst],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+4]']
cmp ['edx,', '[ecx+8]']
jnz ['loc_844']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
shr ['ecx,', '2']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
lea ['ecx,', '[eax+ecx+1]']
mov ['[ebp+var_8],', 'ecx']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '4']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_81F']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+Dst]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+8],', 'ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
