_Xz_WriteVarInt@12 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '7Fh']
mov ['ecx,', '[ebp+arg_8]']
and ['ecx,', '0']
or ['eax,', '80h']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_4]']
mov ['[edx],', 'al']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['cl,', '7']
call ['__aullshr']
mov ['[ebp+arg_4],', 'eax']
mov ['[ebp+arg_8],', 'edx']
mov ['ecx,', '[ebp+arg_4]']
or ['ecx,', '[ebp+arg_8]']
jnz ['short', 'loc_1E']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx-1]']
and ['eax,', '7Fh']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_4]']
mov ['[ecx-1],', 'al']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_Xz_Construct@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'ax']
pop ['ebp']
retn ['4']
endp
_Xz_Free@8      proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_XzFlags_GetCheckSize@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
movzx ['eax,', '[ebp+arg_0]']
and ['eax,', '0Fh']
mov ['[ebp+var_4],', 'eax']
jnz ['short', 'loc_135']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_150']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '1']
xor ['edx,', 'edx']
mov ['ecx,', '3']
div ['ecx']
mov ['edx,', '4']
mov ['ecx,', 'eax']
shl ['edx,', 'cl']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_XzCheck_Init@8 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '1']
jz ['short', 'loc_189']
cmp ['[ebp+var_4],', '4']
jz ['short', 'loc_195']
cmp ['[ebp+var_4],', '0Ah']
jz ['short', 'loc_1A8']
jmp ['short', 'loc_1B4']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0FFFFFFFFh']
jmp ['short', 'loc_1B4']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+8],', '0FFFFFFFFh']
mov ['dword', 'ptr', '[ecx+0Ch],', '0FFFFFFFFh']
jmp ['short', 'loc_1B4']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '10h']
push ['edx']
call ['_Sha256_Init@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_XzCheck_Update@12 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '1']
jz ['short', 'loc_1F3']
cmp ['[ebp+var_4],', '4']
jz ['short', 'loc_20D']
cmp ['[ebp+var_4],', '0Ah']
jz ['short', 'loc_22E']
jmp ['short', 'loc_242']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
call ['@CrcUpdate@12']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'eax']
jmp ['short', 'loc_242']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[edx+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_4]']
call ['@Crc64Update@16']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['[ecx+0Ch],', 'edx']
jmp ['short', 'loc_242']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '10h']
push ['ecx']
call ['_Sha256_Update@12']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_XzCheck_Final@8 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+var_10],', '1']
jz ['short', 'loc_28F']
cmp ['[ebp+var_10],', '4']
jz ['short', 'loc_29F']
cmp ['[ebp+var_10],', '0Ah']
jz ['short', 'loc_2F9']
jmp ['short', 'loc_30B']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
xor ['eax,', '0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_30F']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
xor ['eax,', '0FFFFFFFFh']
mov ['ecx,', '[edx+0Ch]']
xor ['ecx,', '0FFFFFFFFh']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_2D9']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_8]']
mov ['cl,', '8']
call ['__aullshr']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_4],', '8']
jge ['short', 'loc_2F7']
mov ['eax,', '[ebp+var_C]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '0']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_4]']
mov ['[edx],', 'al']
jmp ['short', 'loc_2BD']
jmp ['short', 'loc_30F']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '10h']
push ['ecx']
call ['_Sha256_Final@8']
jmp ['short', 'loc_30F']
xor ['eax,', 'eax']
jmp ['short', 'loc_314']
mov ['eax,', '1']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
