?Create@COutBuffer@@QAE_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '1']
cmp ['[ebp+arg_0],', '1']
jnb ['short', 'loc_2B']
mov ['[ebp+arg_0],', '1']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_42']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
cmp ['edx,', '[ebp+arg_0]']
jnz ['short', 'loc_42']
mov ['al,', '1']
jmp ['short', 'loc_6C']
mov ['ecx,', '[ebp+var_4]']
call ['?Free@COutBuffer@@QAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+10h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MidAlloc@4']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_4]']
xor ['eax,', 'eax']
cmp ['dword', 'ptr', '[edx],', '0']
setnz ['al']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Free@COutBuffer@@QAEXXZ proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_MidFree@4']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Init@COutBuffer@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
mov ['[ecx+8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+18h],', '0']
mov ['dword', 'ptr', '[edx+1Ch],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['byte', 'ptr', '[eax+24h],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetProcessedSize@COutBuffer@@QBE_KXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['ecx,', '[eax+18h]']
adc ['edx,', '[eax+1Ch]']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
xor ['esi,', 'esi']
sub ['ecx,', 'eax']
sbb ['edx,', 'esi']
mov ['[ebp+var_C],', 'ecx']
mov ['[ebp+var_8],', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+0Ch]']
cmp ['eax,', '[edx+4]']
jbe ['short', 'loc_164']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
xor ['eax,', 'eax']
add ['edx,', '[ebp+var_C]']
adc ['eax,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'edx']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_8]']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?FlushPart@COutBuffer@@IAEJXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+Size],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+0Ch]']
cmp ['edx,', '[ecx+4]']
jb ['short', 'loc_1B6']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+10h]']
sub ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_1C5']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+4]']
sub ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+Size],', 'eax']
mov ['[ebp+var_C],', '0']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+20h],', '0']
jz ['short', 'loc_209']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_4]']
add ['ecx,', '[edx+0Ch]']
push ['ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+20h]']
add ['eax,', '[ebp+Size]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+20h],', 'eax']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+14h],', '0']
jz ['short', 'loc_253']
mov ['[ebp+var_14],', '0']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+0Ch]']
push ['eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+14h]']
mov ['eax,', '[eax]']
push ['edx']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+Size],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
add ['ecx,', '[ebp+Size]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+0Ch]']
cmp ['edx,', '[ecx+10h]']
jnz ['short', 'loc_27A']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+4]']
cmp ['eax,', '[edx+10h]']
jnz ['short', 'loc_299']
mov ['ecx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[ecx+24h],', '1']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+0Ch]']
cmp ['edx,', '[ecx+4]']
jbe ['short', 'loc_2B2']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_20],', 'ecx']
jmp ['short', 'loc_2BB']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+Size]']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['eax,', '[edx+18h]']
adc ['ecx,', '[edx+1Ch]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+18h],', 'eax']
mov ['[edx+1Ch],', 'ecx']
mov ['eax,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Flush@COutBuffer@@QAEJXZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+0Ch]']
cmp ['edx,', '[ecx+4]']
jz ['short', 'loc_36D']
mov ['ecx,', '[ebp+var_4]']
call ['?FlushPart@COutBuffer@@IAEJXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_36B']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_36F']
jmp ['short', 'loc_347']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?FlushWithCheck@COutBuffer@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Flush@COutBuffer@@QAEJXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_3CA']
mov ['eax,', '[ebp+var_8]']
push ['eax']
lea ['ecx,', '[ebp+var_10]']
call ['??0COutBufferException@@QAE@J@Z']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
push ['offset', '__TI2?AUCOutBufferException@@']
lea ['edx,', '[ebp+var_C]']
push ['edx']
call ['__CxxThrowException@8']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0COutBufferException@@QAE@J@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0CSystemException@@QAE@J@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0CSystemException@@QAE@J@Z proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
