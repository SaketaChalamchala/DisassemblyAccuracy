?Read@CBenchmarkInStream@@UAGJPAXIPAI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[eax+10h]']
sub ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_4],', 'edx']
mov ['[ebp+var_8],', '100000h']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_8]']
jbe ['short', 'loc_47F']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
cmp ['edx,', '[ebp+var_4]']
jbe ['short', 'loc_48D']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+arg_8],', 'eax']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_49F']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+arg_8]']
jnb ['short', 'loc_4C3']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+0Ch]']
add ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[edx+8]']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_C]']
mov ['al,', '[ecx+eax]']
mov ['[edx],', 'al']
jmp ['short', 'loc_496']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ecx+0Ch]']
add ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+this]']
mov ['[eax+0Ch],', 'edx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_4E0']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx],', 'edx']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
?Write@CBenchmarkOutStream@@UAGJPBXIPAI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[eax+8]']
sub ['edx,', '[ecx+14h]']
mov ['[ebp+Size],', 'edx']
mov ['eax,', '[ebp+Size]']
cmp ['eax,', '[ebp+arg_8]']
jbe ['short', 'loc_518']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+Size],', 'ecx']
cmp ['[ebp+Size],', '0']
jz ['short', 'loc_578']
mov ['edx,', '[ebp+this]']
movzx ['eax,', 'byte', 'ptr', '[edx+18h]']
test ['eax,', 'eax']
jz ['short', 'loc_546']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+this]']
add ['ecx,', '[edx+14h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+this]']
movzx ['ecx,', 'byte', 'ptr', '[eax+19h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_569']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['edx,', '[ebp+Src]']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+1Ch]']
call ['@CrcUpdate@12']
mov ['ecx,', '[ebp+this]']
mov ['[ecx+1Ch],', 'eax']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[edx+14h]']
add ['eax,', '[ebp+Size]']
mov ['ecx,', '[ebp+this]']
mov ['[ecx+14h],', 'eax']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_586']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+Size]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+Size]']
cmp ['ecx,', '[ebp+arg_8]']
jz ['short', 'loc_595']
mov ['eax,', '80004005h']
jmp ['short', 'loc_597']
xor ['eax,', 'eax']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
?Write@CCrcOutStream@@UAGJPBXIPAI@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+this]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
test ['ecx,', 'ecx']
jz ['short', 'loc_5D6']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+0Ch]']
call ['@CrcUpdate@12']
mov ['ecx,', '[ebp+this]']
mov ['[ecx+0Ch],', 'eax']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_5E4']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx],', 'eax']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['10h']
endp
?GetWinUserTime@@YG_KXZ proc near       
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '40h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_40]']
mov ['ecx,', '10h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+UserTime]']
push ['eax']
lea ['ecx,', '[ebp+KernelTime]']
push ['ecx']
lea ['edx,', '[ebp+ExitTime]']
push ['edx']
lea ['eax,', '[ebp+CreationTime]']
push ['eax']
mov ['edi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetCurrentProcess@0']
cmp ['edi,', 'esp']
call ['__RTC_CheckEsp']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__GetProcessTimes@20']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_66A']
lea ['ecx,', '[ebp+UserTime]']
push ['ecx']
call ['?GetTime64@@YG_KABU_FILETIME@@@Z']
mov ['esi,', 'eax']
mov ['edi,', 'edx']
lea ['edx,', '[ebp+KernelTime]']
push ['edx']
call ['?GetTime64@@YG_KABU_FILETIME@@@Z']
add ['esi,', 'eax']
adc ['edi,', 'edx']
mov ['eax,', 'esi']
mov ['edx,', 'edi']
jmp ['short', 'loc_680']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetTickCount@0']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '2710h']
mul ['ecx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '40h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetTime64@@YG_KABU_FILETIME@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
mov ['eax,', '[eax+4]']
xor ['edx,', 'edx']
mov ['cl,', '20h']
call ['__allshl']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx]']
xor ['esi,', 'esi']
or ['eax,', 'ecx']
or ['edx,', 'esi']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
?SetStartTime@CBenchInfoCalc@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
call ['?GetFreq@@YG_KXZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['[ecx+0Ch],', 'edx']
call ['?GetUserFreq@@YG_KXZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+18h],', 'eax']
mov ['[ecx+1Ch],', 'edx']
call ['?GetTimeCount@@YG_KXZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+10h],', '0']
mov ['dword', 'ptr', '[edx+14h],', '0']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '38h']
call ['?Init@CUserTime@@QAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetTimeCount@@YG_KXZ proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetTickCount@0']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
xor ['edx,', 'edx']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn
endp
?GetFreq@@YG_KXZ proc near              
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '3E8h']
xor ['edx,', 'edx']
pop ['ebp']
retn
endp
?GetUserFreq@@YG_KXZ proc near          
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '989680h']
xor ['edx,', 'edx']
pop ['ebp']
retn
endp
?SetFinishTime@CBenchInfoCalc@@QAEXAAUCBenchInfo@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', '[ebp+var_4]']
mov ['ecx,', '0Eh']
mov ['edi,', '[ebp+arg_0]']
rep ['movsd']
call ['?GetTimeCount@@YG_KXZ']
mov ['ecx,', '[ebp+var_4]']
sub ['eax,', '[ecx]']
sbb ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '38h']
call ['?GetUserTime@CUserTime@@QAE_KXZ']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+10h],', 'eax']
mov ['[ecx+14h],', 'edx']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?SetRatioInfo@CBenchProgressInfo@@UAGJPB_K0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '44h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_44]']
mov ['ecx,', '11h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+48h]']
call ['?GetResult@CBenchProgressStatus@@QAEJXZ']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_883']
mov ['eax,', '[ebp+var_4]']
jmp ['loc_97B']
mov ['ecx,', '[ebp+this]']
cmp ['dword', 'ptr', '[ecx+50h],', '0']
jnz ['short', 'loc_894']
mov ['eax,', '[ebp+var_4]']
jmp ['loc_97B']
lea ['ecx,', '[ebp+var_40]']
call ['??0CBenchInfo@@QAE@XZ']
lea ['edx,', '[ebp+var_40]']
push ['edx']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '8']
call ['?SetFinishTime@CBenchInfoCalc@@QAEXAAUCBenchInfo@@@Z']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+48h]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1Ch]']
test ['edx,', 'edx']
jz ['short', 'loc_910']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax+28h]']
add ['edx,', '[ecx]']
mov ['eax,', '[eax+2Ch]']
adc ['eax,', '[ecx+4]']
mov ['[ebp+var_20],', 'edx']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ecx+30h]']
add ['eax,', '[edx]']
mov ['ecx,', '[ecx+34h]']
adc ['ecx,', '[edx+4]']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['esi,', 'esp']
push ['0']
lea ['edx,', '[ebp+var_40]']
push ['edx']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+50h]']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[edx+50h]']
mov ['edx,', '[ecx]']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_963']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+30h]']
add ['eax,', '[edx]']
mov ['ecx,', '[ecx+34h]']
adc ['ecx,', '[edx+4]']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[edx+28h]']
add ['ecx,', '[eax]']
mov ['edx,', '[edx+2Ch]']
adc ['edx,', '[eax+4]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_1C],', 'edx']
mov ['esi,', 'esp']
push ['0']
lea ['eax,', '[ebp+var_40]']
push ['eax']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ecx+50h]']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+50h]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_978']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+this]']
mov ['ecx,', '[edx+48h]']
call ['?SetResult@CBenchProgressStatus@@QAEXJ@Z']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '44h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?GetUsage@CBenchInfo@@QBE_KXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '44h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_44]']
mov ['ecx,', '11h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[eax+14h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[eax+1Ch]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '[eax+0Ch]']
mov ['[ebp+var_3C],', 'edx']
lea ['eax,', '[ebp+var_20]']
push ['eax']
lea ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['?NormalizeVals@@YGXAA_K0@Z']
lea ['edx,', '[ebp+var_30]']
push ['edx']
lea ['eax,', '[ebp+var_40]']
push ['eax']
call ['?NormalizeVals@@YGXAA_K0@Z']
mov ['ecx,', '[ebp+var_20]']
or ['ecx,', '[ebp+var_1C]']
jnz ['short', 'loc_A46']
mov ['[ebp+var_20],', '1']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_30]']
or ['edx,', '[ebp+var_2C]']
jnz ['short', 'loc_A5C']
mov ['[ebp+var_30],', '1']
mov ['[ebp+var_2C],', '0']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+var_40]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['__allmul']
push ['0']
push ['0F4240h']
push ['edx']
push ['eax']
call ['__allmul']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
push ['edx']
push ['eax']
call ['__aulldiv']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
push ['edx']
push ['eax']
call ['__aulldiv']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '44h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?NormalizeVals@@YGXAA_K0@Z proc near    
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
ja ['short', 'loc_B45']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0F4240h']
jbe ['short', 'loc_B75']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx]']
mov ['edx,', '[ecx+4]']
mov ['cl,', '1']
call ['__aullshr']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['edx,', '[edx+4]']
mov ['cl,', '1']
call ['__aullshr']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
jmp ['short', 'loc_B2B']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?GetRatingPerUsage@CBenchInfo@@QBE_K_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '44h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_44]']
mov ['ecx,', '11h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+10h]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[eax+14h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[eax+1Ch]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_30],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '[eax+0Ch]']
mov ['[ebp+var_3C],', 'edx']
lea ['eax,', '[ebp+var_10]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['?NormalizeVals@@YGXAA_K0@Z']
lea ['edx,', '[ebp+var_40]']
push ['edx']
lea ['eax,', '[ebp+var_30]']
push ['eax']
call ['?NormalizeVals@@YGXAA_K0@Z']
mov ['ecx,', '[ebp+var_40]']
or ['ecx,', '[ebp+var_3C]']
jnz ['short', 'loc_C16']
mov ['[ebp+var_40],', '1']
mov ['[ebp+var_3C],', '0']
mov ['edx,', '[ebp+var_10]']
or ['edx,', '[ebp+var_C]']
jnz ['short', 'loc_C2C']
mov ['[ebp+var_10],', '1']
mov ['[ebp+var_C],', '0']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['__allmul']
mov ['ecx,', '[ebp+var_3C]']
push ['ecx']
mov ['ecx,', '[ebp+var_40]']
push ['ecx']
push ['edx']
push ['eax']
call ['__aulldiv']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_0+4]']
push ['ecx']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_0]']
push ['ecx']
push ['edx']
push ['eax']
call ['__allmul']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
push ['edx']
push ['eax']
call ['__aulldiv']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '44h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?GetSpeed@CBenchInfo@@QBE_K_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[eax+8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[eax]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_0]']
push ['ecx']
call ['?MyMultDiv64@@YG_K_K00@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?MyMultDiv64@@YG_K_K00@Z proc near      
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_8],', 'ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
lea ['eax,', '[ebp+arg_10]']
push ['eax']
call ['?NormalizeVals@@YGXAA_K0@Z']
mov ['ecx,', '[ebp+var_C]']
or ['ecx,', '[ebp+var_8]']
jnz ['short', 'loc_D76']
mov ['[ebp+var_C],', '1']
mov ['[ebp+var_8],', '0']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__allmul']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
push ['edx']
push ['eax']
call ['__aulldiv']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6_4']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
endp
?SetLzmaCompexity@CBenchProps@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '4B0h']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '4']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0BEh']
mov ['eax,', '[ebp+var_4]']
mov ['byte', 'ptr', '[eax],', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetCompressRating@CBenchProps@@QAE_KI_K00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '40000h']
jnb ['short', 'loc_E53']
mov ['[ebp+arg_0],', '40000h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
xor ['edx,', 'edx']
mov ['[ebp+var_C],', 'ecx']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_EB6']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?GetLogSize@@YGII@Z']
sub ['eax,', '1200h']
xor ['ecx,', 'ecx']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['__allmul']
push ['0']
push ['5']
push ['edx']
push ['eax']
call ['__allmul']
mov ['cl,', '10h']
call ['__aullshr']
add ['eax,', '366h']
adc ['edx,', '0']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_14+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_14]']
push ['eax']
call ['__allmul']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'edx']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_C+4]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_C]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_4+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
call ['?MyMultDiv64@@YG_K_K00@Z']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
?GetLogSize@@YGII@Z proc near           
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '8']
jmp ['short', 'loc_F26']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '20h']
jge ['short', 'loc_F72']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_F3E']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '100h']
jnb ['short', 'loc_F70']
mov ['edx,', '1']
mov ['ecx,', '[ebp+var_4]']
shl ['edx,', 'cl']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '8']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', 'cl']
add ['edx,', 'eax']
cmp ['[ebp+arg_0],', 'edx']
ja ['short', 'loc_F6E']
mov ['eax,', '[ebp+var_4]']
shl ['eax,', '8']
add ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_F77']
jmp ['short', 'loc_F35']
jmp ['short', 'loc_F1D']
mov ['eax,', '2000h']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?GetDecompressRating@CBenchProps@@QAE_K_K0000@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
push ['edi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
xor ['edx,', 'edx']
push ['edx']
push ['ecx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_18+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_18]']
push ['ecx']
call ['__allmul']
mov ['esi,', 'eax']
mov ['edi,', 'edx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
xor ['ecx,', 'ecx']
push ['ecx']
push ['eax']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_10+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_10]']
push ['eax']
call ['__allmul']
add ['esi,', 'eax']
adc ['edi,', 'edx']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_20+4]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_20]']
push ['edx']
push ['edi']
push ['esi']
call ['__allmul']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_8+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_0+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
call ['?MyMultDiv64@@YG_K_K00@Z']
pop ['edi']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['28h']
endp
?GetCompressRating@@YG_KI_K00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
lea ['ecx,', '[ebp+var_14]']
call ['??0CBenchProps@@QAE@XZ']
lea ['ecx,', '[ebp+var_14]']
call ['?SetLzmaCompexity@CBenchProps@@QAEXXZ']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_14+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_C+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_4+4]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_14]']
call ['?GetCompressRating@CBenchProps@@QAE_KI_K00@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
?GetDecompressRating@@YG_K_K0000@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
lea ['ecx,', '[ebp+var_14]']
call ['??0CBenchProps@@QAE@XZ']
lea ['ecx,', '[ebp+var_14]']
call ['?SetLzmaCompexity@CBenchProps@@QAEXXZ']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_20+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_20]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_18+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_10+4]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_10]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_8+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_0+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_14]']
call ['?GetDecompressRating@CBenchProps@@QAE_K_K0000@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['28h']
endp
?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0F0h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_FC]']
mov ['ecx,', '3Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '0C8h']
call ['?Set@CBenchRandomGenerator@@QAEXPAVCBaseRandomGenerator@@@Z']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+0C0h],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+0C0h]']
add ['ecx,', '400h']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+0C0h]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '0C8h']
call ['?Alloc@CBenchBuffer@@QAE_NI@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_11ED']
mov ['eax,', '8007000Eh']
jmp ['loc_18D9']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_1203']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '0C8h']
call ['?GenerateSimpleRandom@CBenchRandomGenerator@@QAEXXZ']
jmp ['short', 'loc_1215']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '0C8h']
call ['?Generate@CBenchRandomGenerator@@QAEXI@Z']
mov ['eax,', '[ebp+var_14]']
mov ['edx,', '[eax+0CCh]']
mov ['ecx,', '[ebp+var_14]']
mov ['ecx,', '[ecx+0D0h]']
call ['@CrcCalc@8']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+0BCh],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '10h']
call ['??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_126D']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+0CCh]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '0D8h']
call ['?Alloc@CBenchBuffer@@QAE_NI@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_126D']
mov ['eax,', '8007000Eh']
jmp ['loc_18D9']
push ['20h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_A8],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_A8],', '0']
jz ['short', 'loc_12A0']
mov ['ecx,', '[ebp+var_A8]']
call ['??0CBenchmarkOutStream@@QAE@XZ']
mov ['[ebp+var_DC],', 'eax']
jmp ['short', 'loc_12AA']
mov ['[ebp+var_DC],', '0']
mov ['eax,', '[ebp+var_DC]']
mov ['[ebp+var_A4],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_A4]']
mov ['[ecx+0ACh],', 'edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['ecx,', '[ecx+0ACh]']
add ['ecx,', '4']
call ['?Alloc@CBenchBuffer@@QAE_NI@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_12F2']
mov ['eax,', '8007000Eh']
jmp ['loc_18D9']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+0ACh]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '0B0h']
call ['??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z']
mov ['edx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[edx+0E4h],', '0']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '0E8h']
call ['??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_13A3']
push ['20h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_B0],', 'eax']
mov ['[ebp+var_4],', '1']
cmp ['[ebp+var_B0],', '0']
jz ['short', 'loc_135F']
mov ['ecx,', '[ebp+var_B0]']
call ['??0CBenchmarkOutStream@@QAE@XZ']
mov ['[ebp+var_E0],', 'eax']
jmp ['short', 'loc_1369']
mov ['[ebp+var_E0],', '0']
mov ['ecx,', '[ebp+var_E0]']
mov ['[ebp+var_AC],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+var_AC]']
mov ['[edx+0E4h],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+0E4h]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '0E8h']
call ['??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z']
push ['5']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+0E4h]']
add ['ecx,', '4']
call ['?Alloc@CBenchBuffer@@QAE_NI@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_13C7']
mov ['eax,', '8007000Eh']
jmp ['loc_18D9']
push ['0']
push ['1']
mov ['edx,', '[ebp+var_14]']
mov ['ecx,', '[edx+0E4h]']
call ['?Init@CBenchmarkOutStream@@QAEX_N0@Z']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '10h']
call ['??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_140D']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '10h']
call ['??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z']
jmp ['short', 'loc_1421']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '0Ch']
call ['??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z']
lea ['ecx,', '[ebp+var_2C]']
call ['??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_2C]']
call ['??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ']
push ['eax']
push ['offset', '_IID_ICompressSetCoderProperties']
lea ['ecx,', '[ebp+var_20]']
call ['??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z']
lea ['ecx,', '[ebp+var_2C]']
call ['??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_14A9']
mov ['eax,', '[ebp+arg_4]']
xor ['ecx,', 'ecx']
mov ['dword', 'ptr', '[ebp+var_3C],', 'eax']
mov ['dword', 'ptr', '[ebp+var_3C+4],', 'ecx']
lea ['edx,', '[ebp+var_3C]']
push ['edx']
lea ['ecx,', '[ebp+var_2C]']
call ['??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z']
mov ['[ebp+var_44],', 'eax']
cmp ['[ebp+var_44],', '0']
jz ['short', 'loc_14A7']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_B4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['eax,', '[ebp+var_B4]']
jmp ['loc_18D9']
jmp ['short', 'loc_14E8']
mov ['ecx,', '[ebp+arg_0]']
call ['?AreThereNonOptionalProps@CProps@@QBE_NXZ']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_14E8']
mov ['[ebp+var_B8],', '80070057h']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['eax,', '[ebp+var_B8]']
jmp ['loc_18D9']
lea ['ecx,', '[ebp+var_4C]']
call ['??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
lea ['ecx,', '[ebp+var_4C]']
call ['??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ']
push ['eax']
push ['offset', '_IID_ICompressWriteCoderProperties']
lea ['ecx,', '[ebp+var_20]']
call ['??$QueryInterface@UICompressWriteCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressWriteCoderProperties@@@Z']
lea ['ecx,', '[ebp+var_4C]']
call ['??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_1594']
lea ['ecx,', '[ebp+var_4C]']
call ['??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ']
mov ['[ebp+var_E4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '0E8h']
call ['??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ']
mov ['esi,', 'esp']
push ['eax']
mov ['edx,', '[ebp+var_E4]']
push ['edx']
mov ['eax,', '[ebp+var_E4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_54],', 'eax']
cmp ['[ebp+var_54],', '0']
jz ['short', 'loc_1594']
mov ['eax,', '[ebp+var_54]']
mov ['[ebp+var_BC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_4C]']
call ['??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['eax,', '[ebp+var_BC]']
jmp ['loc_18D9']
lea ['ecx,', '[ebp+var_5C]']
call ['??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_5C]']
call ['??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ']
push ['eax']
push ['offset', '_IID_ICryptoSetPassword']
lea ['ecx,', '[ebp+var_20]']
call ['??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z']
lea ['ecx,', '[ebp+var_5C]']
call ['??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ']
test ['eax,', 'eax']
jz ['loc_1896']
lea ['ecx,', '[ebp+var_5C]']
call ['??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ']
mov ['[ebp+var_E8],', 'eax']
mov ['esi,', 'esp']
push ['10h']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '64h']
push ['ecx']
mov ['edx,', '[ebp+var_E8]']
push ['edx']
mov ['eax,', '[ebp+var_E8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_64],', 'eax']
cmp ['[ebp+var_64],', '0']
jz ['short', 'loc_164A']
mov ['eax,', '[ebp+var_64]']
mov ['[ebp+var_C0],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
lea ['ecx,', '[ebp+var_5C]']
call ['??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_4C]']
call ['??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['eax,', '[ebp+var_C0]']
jmp ['loc_18D9']
push ['14h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_C8],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
cmp ['[ebp+var_C8],', '0']
jz ['short', 'loc_167A']
mov ['ecx,', '[ebp+var_C8]']
call ['??0CBenchmarkInStream@@QAE@XZ']
mov ['[ebp+var_EC],', 'eax']
jmp ['short', 'loc_1684']
mov ['[ebp+var_EC],', '0']
mov ['ecx,', '[ebp+var_EC]']
mov ['[ebp+var_C4],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['edx,', '[ebp+var_C4]']
mov ['[ebp+var_68],', 'edx']
mov ['eax,', '[ebp+var_68]']
push ['eax']
lea ['ecx,', '[ebp+var_70]']
call ['??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
push ['10h']
push ['0']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
push ['10h']
lea ['edx,', '[ebp+Dst]']
push ['edx']
mov ['ecx,', '[ebp+var_68]']
call ['?Init@CBenchmarkInStream@@QAEXPBEI@Z']
push ['10h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_D0],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
cmp ['[ebp+var_D0],', '0']
jz ['short', 'loc_1701']
mov ['ecx,', '[ebp+var_D0]']
call ['??0CCrcOutStream@@QAE@XZ']
mov ['[ebp+var_F0],', 'eax']
jmp ['short', 'loc_170B']
mov ['[ebp+var_F0],', '0']
mov ['eax,', '[ebp+var_F0]']
mov ['[ebp+var_CC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
mov ['ecx,', '[ebp+var_CC]']
mov ['[ebp+var_90],', 'ecx']
mov ['edx,', '[ebp+var_90]']
push ['edx']
lea ['ecx,', '[ebp+var_98]']
call ['??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '9']
mov ['ecx,', '[ebp+var_90]']
call ['?Init@CCrcOutStream@@QAEXXZ']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '10h']
call ['??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_17C1']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '10h']
call ['??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
mov ['[ebp+var_F4],', 'eax']
mov ['eax,', '[ebp+var_F4]']
mov ['ecx,', '[eax]']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_F4]']
push ['edx']
mov ['eax,', '[ecx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '10h']
call ['??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
mov ['[ebp+var_F8],', 'eax']
mov ['esi,', 'esp']
push ['10h']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+var_F8]']
push ['edx']
mov ['eax,', '[ebp+var_F8]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+10h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_187B']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '0Ch']
call ['??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ']
mov ['[ebp+var_FC],', 'eax']
mov ['esi,', 'esp']
push ['0']
push ['0']
push ['0']
lea ['ecx,', '[ebp+var_98]']
call ['??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_70]']
call ['??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ']
push ['eax']
mov ['eax,', '[ebp+var_FC]']
push ['eax']
mov ['ecx,', '[ebp+var_FC]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_A0],', 'eax']
cmp ['[ebp+var_A0],', '0']
jz ['short', 'loc_187B']
mov ['ecx,', '[ebp+var_A0]']
mov ['[ebp+var_D4],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_98]']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_70]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
lea ['ecx,', '[ebp+var_5C]']
call ['??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_4C]']
call ['??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['eax,', '[ebp+var_D4]']
jmp ['short', 'loc_18D9']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_98]']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_70]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
lea ['ecx,', '[ebp+var_5C]']
call ['??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_4C]']
call ['??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['[ebp+var_D8],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['eax,', '[ebp+var_D8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN52']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0FCh']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
?Encode@CEncoderInfo@@QAEJXZ proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Encode@CEncoderInfo@@QAEJXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0C4h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_D0]']
mov ['ecx,', '31h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+14h]']
add ['ecx,', '8']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['dword', 'ptr', '[edx+20h],', '0']
mov ['dword', 'ptr', '[edx+24h],', '0']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax+28h],', '0']
mov ['dword', 'ptr', '[eax+2Ch],', '0']
lea ['ecx,', '[ebp+var_1C]']
call ['??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_28]']
call ['??0?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_1A6F']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_28]']
call ['??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z']
jmp ['short', 'loc_1A83']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_28]']
call ['??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z']
lea ['ecx,', '[ebp+var_1C]']
call ['??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ']
push ['eax']
push ['offset', '_IID_ICryptoProperties']
lea ['ecx,', '[ebp+var_28]']
call ['??$QueryInterface@UICryptoProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoProperties@@@Z']
push ['14h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_74],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
cmp ['[ebp+var_74],', '0']
jz ['short', 'loc_1AC0']
mov ['ecx,', '[ebp+var_74]']
call ['??0CBenchmarkInStream@@QAE@XZ']
mov ['[ebp+var_94],', 'eax']
jmp ['short', 'loc_1ACA']
mov ['[ebp+var_94],', '0']
mov ['ecx,', '[ebp+var_94]']
mov ['[ebp+var_70],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_70]']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
lea ['ecx,', '[ebp+var_38]']
call ['??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['[ebp+var_44],', '0']
mov ['[ebp+var_40],', '0']
mov ['[ebp+var_48],', '0']
lea ['ecx,', '[ebp+var_1C]']
call ['??B?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ']
test ['eax,', 'eax']
jz ['loc_1BF6']
lea ['ecx,', '[ebp+var_1C]']
call ['??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ']
mov ['[ebp+var_98],', 'eax']
mov ['esi,', 'esp']
push ['20h']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '34h']
push ['ecx']
mov ['edx,', '[ebp+var_98]']
push ['edx']
mov ['eax,', '[ebp+var_98]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4C],', 'eax']
cmp ['[ebp+var_4C],', '0']
jz ['short', 'loc_1B84']
mov ['eax,', '[ebp+var_4C]']
mov ['[ebp+var_78],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_28]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['eax,', '[ebp+var_78]']
jmp ['loc_20B8']
lea ['ecx,', '[ebp+var_1C]']
call ['??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ']
mov ['[ebp+var_9C],', 'eax']
mov ['esi,', 'esp']
push ['10h']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '54h']
push ['ecx']
mov ['edx,', '[ebp+var_9C]']
push ['edx']
mov ['eax,', '[ebp+var_9C]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+10h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_50],', 'eax']
cmp ['[ebp+var_50],', '0']
jz ['short', 'loc_1BF6']
mov ['eax,', '[ebp+var_50]']
mov ['[ebp+var_7C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_28]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['eax,', '[ebp+var_7C]']
jmp ['loc_20B8']
mov ['[ebp+var_58],', '0']
mov ['[ebp+var_54],', '0']
jmp ['short', 'loc_1C18']
mov ['ecx,', '[ebp+var_58]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_54]']
adc ['edx,', '0']
mov ['[ebp+var_58],', 'ecx']
mov ['[ebp+var_54],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_A0],', 'eax']
mov ['ecx,', '[ebp+var_A0]']
mov ['edx,', '[ebp+var_54]']
cmp ['edx,', '[ecx+2Ch]']
ja ['loc_206B']
jb ['short', 'loc_1C47']
mov ['eax,', '[ebp+var_A0]']
mov ['ecx,', '[ebp+var_58]']
cmp ['ecx,', '[eax+28h]']
jnb ['loc_206B']
mov ['edx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[edx+0B8h],', '0']
jz ['loc_1CF8']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+20h]']
sub ['ecx,', '[ebp+var_44]']
mov ['edx,', '[eax+24h]']
sbb ['edx,', '[ebp+var_40]']
mov ['[ebp+var_A8],', 'ecx']
mov ['[ebp+var_A4],', 'edx']
cmp ['[ebp+var_A4],', '0']
ja ['short', 'loc_1C87']
cmp ['[ebp+var_A8],', '100000h']
jbe ['short', 'loc_1CF8']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+0B8h]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0B8h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_5C],', 'eax']
cmp ['[ebp+var_5C],', '0']
jz ['short', 'loc_1CE9']
mov ['ecx,', '[ebp+var_5C]']
mov ['[ebp+var_80],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_28]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['eax,', '[ebp+var_80]']
jmp ['loc_20B8']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+20h]']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[edx+24h]']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+28h]']
sub ['eax,', '1']
mov ['ecx,', '[edx+2Ch]']
sbb ['ecx,', '0']
mov ['[ebp+var_B0],', 'eax']
mov ['[ebp+var_AC],', 'ecx']
mov ['edx,', '[ebp+var_58]']
cmp ['edx,', '[ebp+var_B0]']
jnz ['short', 'loc_1D35']
mov ['eax,', '[ebp+var_54]']
cmp ['eax,', '[ebp+var_AC]']
jnz ['short', 'loc_1D35']
mov ['[ebp+var_B4],', '1']
jmp ['short', 'loc_1D3F']
mov ['[ebp+var_B4],', '0']
mov ['cl,', 'byte', 'ptr', '[ebp+var_B4]']
mov ['[ebp+var_5D],', 'cl']
movzx ['edx,', '[ebp+var_5D]']
test ['edx,', 'edx']
jnz ['short', 'loc_1D81']
mov ['eax,', '[ebp+var_58]']
and ['eax,', '7Fh']
mov ['ecx,', '[ebp+var_54]']
and ['ecx,', '0']
mov ['[ebp+var_BC],', 'eax']
mov ['[ebp+var_B8],', 'ecx']
mov ['edx,', '[ebp+var_BC]']
or ['edx,', '[ebp+var_B8]']
jz ['short', 'loc_1D81']
mov ['eax,', '[ebp+var_10]']
movzx ['ecx,', 'byte', 'ptr', '[eax+74h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1DAE']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_C0],', 'edx']
mov ['eax,', '[ebp+var_C0]']
cmp ['dword', 'ptr', '[eax+28h],', '1']
jnz ['short', 'loc_1DA2']
mov ['ecx,', '[ebp+var_C0]']
cmp ['dword', 'ptr', '[ecx+2Ch],', '0']
jz ['short', 'loc_1DAE']
mov ['[ebp+var_C4],', '1']
jmp ['short', 'loc_1DB8']
mov ['[ebp+var_C4],', '0']
mov ['dl,', 'byte', 'ptr', '[ebp+var_C4]']
mov ['[ebp+var_5E],', 'dl']
movzx ['eax,', '[ebp+var_5E]']
push ['eax']
movzx ['ecx,', '[ebp+var_5D]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['ecx,', '[edx+0ACh]']
call ['?Init@CBenchmarkOutStream@@QAEX_N0@Z']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
test ['eax,', 'eax']
jz ['loc_1EF3']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+0CCh]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0D0h]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0E0h]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
mov ['[ebp+var_C8],', 'eax']
mov ['eax,', '[ebp+var_C8]']
mov ['ecx,', '[eax]']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_C8]']
push ['edx']
mov ['eax,', '[ecx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
mov ['[ebp+var_CC],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0CCh]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+0E0h]']
push ['ecx']
mov ['edx,', '[ebp+var_CC]']
push ['edx']
mov ['eax,', '[ebp+var_CC]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+10h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+0CCh]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0E0h]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0B0h']
call ['??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ']
push ['eax']
call ['?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z']
mov ['[ebp+var_64],', 'eax']
cmp ['[ebp+var_64],', '0']
jz ['short', 'loc_1EEE']
mov ['ecx,', '[ebp+var_64]']
mov ['[ebp+var_84],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_28]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['eax,', '[ebp+var_84]']
jmp ['loc_20B8']
jmp ['loc_1FA9']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0CCh]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0D0h]']
push ['edx']
mov ['ecx,', '[ebp+var_30]']
call ['?Init@CBenchmarkInStream@@QAEXPBEI@Z']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1Ch']
call ['??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ']
mov ['esi,', 'esp']
push ['eax']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0B0h']
call ['??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_38]']
call ['??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ']
push ['eax']
mov ['eax,', '[ebp+var_D0]']
push ['eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_68],', 'eax']
cmp ['[ebp+var_68],', '0']
jz ['short', 'loc_1FA9']
mov ['ecx,', '[ebp+var_68]']
mov ['[ebp+var_88],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_28]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['eax,', '[ebp+var_88]']
jmp ['loc_20B8']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0ACh]']
mov ['ecx,', '[eax+1Ch]']
xor ['ecx,', '0FFFFFFFFh']
mov ['[ebp+var_6C],', 'ecx']
mov ['edx,', '[ebp+var_58]']
or ['edx,', '[ebp+var_54]']
jnz ['short', 'loc_1FCB']
mov ['eax,', '[ebp+var_6C]']
mov ['[ebp+var_48],', 'eax']
jmp ['short', 'loc_2017']
movzx ['ecx,', '[ebp+var_5E]']
test ['ecx,', 'ecx']
jz ['short', 'loc_2017']
mov ['edx,', '[ebp+var_48]']
cmp ['edx,', '[ebp+var_6C]']
jz ['short', 'loc_2017']
mov ['[ebp+var_8C],', '80004005h']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_28]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['eax,', '[ebp+var_8C]']
jmp ['loc_20B8']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+0ACh]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ecx+14h]']
mov ['[edx+0C4h],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0CCh]']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_14]']
add ['edx,', '[ecx+20h]']
adc ['eax,', '[ecx+24h]']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+20h],', 'edx']
mov ['[ecx+24h],', 'eax']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0C4h]']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+var_14]']
add ['eax,', '[edx+28h]']
adc ['ecx,', '[edx+2Ch]']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+28h],', 'eax']
mov ['[edx+2Ch],', 'ecx']
jmp ['loc_1C06']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['?Release@?$CMyComPtr@UICompressCoder@@@@QAEXXZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['?Release@?$CMyComPtr@UICompressFilter@@@@QAEXXZ']
mov ['[ebp+var_90],', '0']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_28]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['eax,', '[ebp+var_90]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN39']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '0D0h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Decode@CEncoderInfo@@QAEJI@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Decode@CEncoderInfo@@QAEJI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '150h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_15C]']
mov ['ecx,', '54h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['14h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_DC],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_DC],', '0']
jz ['short', 'loc_21A4']
mov ['ecx,', '[ebp+var_DC]']
call ['??0CBenchmarkInStream@@QAE@XZ']
mov ['[ebp+var_120],', 'eax']
jmp ['short', 'loc_21AE']
mov ['[ebp+var_120],', '0']
mov ['eax,', '[ebp+var_120]']
mov ['[ebp+var_D8],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_D8]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
lea ['ecx,', '[ebp+var_1C]']
call ['??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_10]']
lea ['edx,', '[ecx+eax*4+98h]']
mov ['[ebp+var_24],', 'edx']
lea ['ecx,', '[ebp+var_2C]']
call ['??0?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0A0h']
call ['??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_225A']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_2241']
mov ['[ebp+var_E0],', '80004005h']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['eax,', '[ebp+var_E0]']
jmp ['loc_2E2E']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0A0h']
call ['??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
call ['??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z']
jmp ['short', 'loc_226B']
mov ['ecx,', '[ebp+var_24]']
call ['??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
call ['??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z']
lea ['ecx,', '[ebp+var_38]']
call ['??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_38]']
call ['??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ']
push ['eax']
push ['offset', '_IID_ICompressSetDecoderProperties2']
lea ['ecx,', '[ebp+var_2C]']
call ['??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z']
lea ['ecx,', '[ebp+var_38]']
call ['??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_22E7']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0E4h]']
cmp ['dword', 'ptr', '[edx+14h],', '0']
jz ['short', 'loc_22E7']
mov ['[ebp+var_E4],', '80004005h']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['eax,', '[ebp+var_E4]']
jmp ['loc_2E2E']
push ['10h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_EC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
cmp ['[ebp+var_EC],', '0']
jz ['short', 'loc_2317']
mov ['ecx,', '[ebp+var_EC]']
call ['??0CCrcOutStream@@QAE@XZ']
mov ['[ebp+var_124],', 'eax']
jmp ['short', 'loc_2321']
mov ['[ebp+var_124],', '0']
mov ['eax,', '[ebp+var_124]']
mov ['[ebp+var_E8],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['ecx,', '[ebp+var_E8]']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '[ebp+var_40]']
push ['edx']
lea ['ecx,', '[ebp+var_48]']
call ['??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+eax*4+14h]']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+var_50]']
mov ['dword', 'ptr', '[eax+28h],', '0']
mov ['dword', 'ptr', '[eax+2Ch],', '0']
mov ['ecx,', '[ebp+var_50]']
mov ['dword', 'ptr', '[ecx+30h],', '0']
mov ['dword', 'ptr', '[ecx+34h],', '0']
lea ['ecx,', '[ebp+var_58]']
call ['??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_58]']
call ['??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ']
push ['eax']
push ['offset', '_IID_ICompressSetCoderMt']
lea ['ecx,', '[ebp+var_2C]']
call ['??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z']
lea ['ecx,', '[ebp+var_58]']
call ['??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ']
test ['eax,', 'eax']
jz ['loc_2439']
lea ['ecx,', '[ebp+var_58]']
call ['??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ']
mov ['[ebp+var_128],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_128]']
push ['ecx']
mov ['edx,', '[ebp+var_128]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_60],', 'eax']
cmp ['[ebp+var_60],', '0']
jz ['short', 'loc_2439']
mov ['edx,', '[ebp+var_60]']
mov ['[ebp+var_F0],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_58]']
call ['??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_48]']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['eax,', '[ebp+var_F0]']
jmp ['loc_2E2E']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_58]']
call ['??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ']
lea ['ecx,', '[ebp+var_68]']
call ['??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_68]']
call ['??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ']
push ['eax']
push ['offset', '_IID_ICompressSetCoderProperties']
lea ['ecx,', '[ebp+var_2C]']
call ['??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z']
lea ['ecx,', '[ebp+var_68]']
call ['??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ']
test ['eax,', 'eax']
jz ['loc_24FF']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+110h]']
xor ['edx,', 'edx']
mov ['dword', 'ptr', '[ebp+var_78],', 'ecx']
mov ['dword', 'ptr', '[ebp+var_78+4],', 'edx']
lea ['eax,', '[ebp+var_78]']
push ['eax']
lea ['ecx,', '[ebp+var_68]']
call ['??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0ECh']
call ['?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z']
mov ['[ebp+var_80],', 'eax']
cmp ['[ebp+var_80],', '0']
jz ['short', 'loc_24FF']
mov ['ecx,', '[ebp+var_80]']
mov ['[ebp+var_F4],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_68]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_48]']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['eax,', '[ebp+var_F4]']
jmp ['loc_2E2E']
lea ['ecx,', '[ebp+var_88]']
call ['??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
lea ['ecx,', '[ebp+var_88]']
call ['??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ']
push ['eax']
push ['offset', '_IID_ICryptoProperties']
lea ['ecx,', '[ebp+var_2C]']
call ['??$QueryInterface@UICryptoProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoProperties@@@Z']
lea ['ecx,', '[ebp+var_38]']
call ['??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ']
test ['eax,', 'eax']
jz ['loc_25F0']
lea ['ecx,', '[ebp+var_38]']
call ['??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ']
mov ['[ebp+var_12C],', 'eax']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0E4h]']
mov ['esi,', 'esp']
mov ['ecx,', '[eax+14h]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0E4h]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_12C]']
push ['edx']
mov ['eax,', '[ebp+var_12C]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_90],', 'eax']
cmp ['[ebp+var_90],', '0']
jz ['short', 'loc_25F0']
mov ['eax,', '[ebp+var_90]']
mov ['[ebp+var_F8],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_88]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_68]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_48]']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['eax,', '[ebp+var_F8]']
jmp ['loc_2E2E']
lea ['ecx,', '[ebp+var_98]']
call ['??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '9']
lea ['ecx,', '[ebp+var_98]']
call ['??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ']
push ['eax']
push ['offset', '_IID_ICryptoSetPassword']
lea ['ecx,', '[ebp+var_2C]']
call ['??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z']
lea ['ecx,', '[ebp+var_98]']
call ['??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ']
test ['eax,', 'eax']
jz ['loc_26E5']
lea ['ecx,', '[ebp+var_98]']
call ['??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ']
mov ['[ebp+var_130],', 'eax']
mov ['esi,', 'esp']
push ['10h']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '64h']
push ['ecx']
mov ['edx,', '[ebp+var_130]']
push ['edx']
mov ['eax,', '[ebp+var_130]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_A0],', 'eax']
cmp ['[ebp+var_A0],', '0']
jz ['short', 'loc_26E5']
mov ['eax,', '[ebp+var_A0]']
mov ['[ebp+var_FC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
lea ['ecx,', '[ebp+var_98]']
call ['??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_88]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_68]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_48]']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['eax,', '[ebp+var_FC]']
jmp ['loc_2E2E']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
lea ['ecx,', '[ebp+var_98]']
call ['??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ']
mov ['[ebp+var_A8],', '0']
mov ['[ebp+var_A4],', '0']
lea ['ecx,', '[ebp+var_88]']
call ['??B?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ']
test ['eax,', 'eax']
jz ['loc_2871']
lea ['ecx,', '[ebp+var_88]']
call ['??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ']
mov ['[ebp+var_134],', 'eax']
mov ['esi,', 'esp']
push ['20h']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '34h']
push ['ecx']
mov ['edx,', '[ebp+var_134]']
push ['edx']
mov ['eax,', '[ebp+var_134]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_AC],', 'eax']
cmp ['[ebp+var_AC],', '0']
jz ['short', 'loc_27C6']
mov ['eax,', '[ebp+var_AC]']
mov ['[ebp+var_100],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_88]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_68]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_48]']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['eax,', '[ebp+var_100]']
jmp ['loc_2E2E']
lea ['ecx,', '[ebp+var_88]']
call ['??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ']
mov ['[ebp+var_138],', 'eax']
mov ['esi,', 'esp']
push ['10h']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '54h']
push ['ecx']
mov ['edx,', '[ebp+var_138]']
push ['edx']
mov ['eax,', '[ebp+var_138]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+10h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_B0],', 'eax']
cmp ['[ebp+var_B0],', '0']
jz ['short', 'loc_2871']
mov ['eax,', '[ebp+var_B0]']
mov ['[ebp+var_104],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_88]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_68]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_48]']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['eax,', '[ebp+var_104]']
jmp ['loc_2E2E']
mov ['[ebp+var_B8],', '0']
mov ['[ebp+var_B4],', '0']
jmp ['short', 'loc_28A5']
mov ['ecx,', '[ebp+var_B8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_B4]']
adc ['edx,', '0']
mov ['[ebp+var_B8],', 'ecx']
mov ['[ebp+var_B4],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_13C],', 'eax']
mov ['ecx,', '[ebp+var_13C]']
mov ['edx,', '[ebp+var_B4]']
cmp ['edx,', '[ecx+2Ch]']
ja ['loc_2DBA']
jb ['short', 'loc_28DA']
mov ['eax,', '[ebp+var_13C]']
mov ['ecx,', '[ebp+var_B8]']
cmp ['ecx,', '[eax+28h]']
jnb ['loc_2DBA']
mov ['edx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[edx+0B8h],', '0']
jz ['loc_29D1']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[eax+28h]']
sub ['ecx,', '[ebp+var_A8]']
mov ['edx,', '[eax+2Ch]']
sbb ['edx,', '[ebp+var_A4]']
mov ['[ebp+var_144],', 'ecx']
mov ['[ebp+var_140],', 'edx']
cmp ['[ebp+var_140],', '0']
ja ['short', 'loc_2924']
cmp ['[ebp+var_144],', '100000h']
jbe ['loc_29D1']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+0B8h]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0B8h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_BC],', 'eax']
cmp ['[ebp+var_BC],', '0']
jz ['short', 'loc_29BC']
mov ['ecx,', '[ebp+var_BC]']
mov ['[ebp+var_108],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_88]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_68]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_48]']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['eax,', '[ebp+var_108]']
jmp ['loc_2E2E']
mov ['edx,', '[ebp+var_50]']
mov ['eax,', '[edx+28h]']
mov ['[ebp+var_A8],', 'eax']
mov ['ecx,', '[edx+2Ch]']
mov ['[ebp+var_A4],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0C4h]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0ACh]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?Init@CBenchmarkInStream@@QAEXPBEI@Z']
mov ['ecx,', '[ebp+var_40]']
call ['?Init@CCrcOutStream@@QAEXXZ']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0C0h]']
xor ['eax,', 'eax']
mov ['[ebp+var_C8],', 'edx']
mov ['[ebp+var_C4],', 'eax']
mov ['ecx,', '[ebp+var_B8]']
and ['ecx,', '7Fh']
mov ['edx,', '[ebp+var_B4]']
and ['edx,', '0']
mov ['[ebp+var_14C],', 'ecx']
mov ['[ebp+var_148],', 'edx']
mov ['eax,', '[ebp+var_14C]']
or ['eax,', '[ebp+var_148]']
jz ['short', 'loc_2A52']
mov ['ecx,', '[ebp+var_10]']
movzx ['edx,', 'byte', 'ptr', '[ecx+75h]']
test ['edx,', 'edx']
jnz ['short', 'loc_2A52']
mov ['[ebp+var_150],', '0']
jmp ['short', 'loc_2A5C']
mov ['[ebp+var_150],', '1']
mov ['eax,', '[ebp+var_40]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_150]']
mov ['[eax+8],', 'cl']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0A0h']
call ['??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
test ['eax,', 'eax']
jz ['loc_2C2F']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[edx+0C4h]']
cmp ['ecx,', '[eax+0DCh]']
jbe ['short', 'loc_2AF5']
mov ['[ebp+var_10C],', '80004005h']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_88]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_68]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_48]']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['eax,', '[ebp+var_10C]']
jmp ['loc_2E2E']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0C4h]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0ACh]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0E0h]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0A0h']
call ['??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
mov ['[ebp+var_154],', 'eax']
mov ['eax,', '[ebp+var_154]']
mov ['ecx,', '[eax]']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_154]']
push ['edx']
mov ['eax,', '[ecx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0A0h']
call ['??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ']
mov ['[ebp+var_158],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0C4h]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+0E0h]']
push ['ecx']
mov ['edx,', '[ebp+var_158]']
push ['edx']
mov ['eax,', '[ebp+var_158]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+10h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+0CCh]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0E0h]']
push ['eax']
lea ['ecx,', '[ebp+var_48]']
call ['??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ']
push ['eax']
call ['?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z']
mov ['[ebp+var_D0],', 'eax']
cmp ['[ebp+var_D0],', '0']
jz ['short', 'loc_2C2A']
mov ['ecx,', '[ebp+var_D0]']
mov ['[ebp+var_110],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_88]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_68]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_48]']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['eax,', '[ebp+var_110]']
jmp ['loc_2E2E']
jmp ['loc_2CF9']
mov ['ecx,', '[ebp+var_24]']
call ['??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ']
mov ['[ebp+var_15C],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_10]']
lea ['ecx,', '[eax+edx*4+1Ch]']
call ['??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ']
mov ['esi,', 'esp']
push ['eax']
lea ['ecx,', '[ebp+var_C8]']
push ['ecx']
push ['0']
lea ['ecx,', '[ebp+var_48]']
call ['??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
call ['??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ']
push ['eax']
mov ['edx,', '[ebp+var_15C]']
push ['edx']
mov ['eax,', '[ebp+var_15C]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_D4],', 'eax']
cmp ['[ebp+var_D4],', '0']
jz ['short', 'loc_2CF9']
mov ['eax,', '[ebp+var_D4]']
mov ['[ebp+var_114],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_88]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_68]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_48]']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['eax,', '[ebp+var_114]']
jmp ['loc_2E2E']
mov ['ecx,', '[ebp+var_40]']
movzx ['edx,', 'byte', 'ptr', '[ecx+8]']
test ['edx,', 'edx']
jz ['short', 'loc_2D7B']
mov ['eax,', '[ebp+var_40]']
mov ['ecx,', '[eax+0Ch]']
xor ['ecx,', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_10]']
cmp ['ecx,', '[edx+0BCh]']
jz ['short', 'loc_2D7B']
mov ['[ebp+var_118],', '1']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_88]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_68]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_48]']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['eax,', '[ebp+var_118]']
jmp ['loc_2E2E']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+0C0h]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_50]']
add ['ecx,', '[eax+28h]']
adc ['edx,', '[eax+2Ch]']
mov ['eax,', '[ebp+var_50]']
mov ['[eax+28h],', 'ecx']
mov ['[eax+2Ch],', 'edx']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0C4h]']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_50]']
add ['edx,', '[ecx+30h]']
adc ['eax,', '[ecx+34h]']
mov ['ecx,', '[ebp+var_50]']
mov ['[ecx+30h],', 'edx']
mov ['[ecx+34h],', 'eax']
jmp ['loc_2887']
mov ['ecx,', '[ebp+var_24]']
call ['?Release@?$CMyComPtr@UICompressCoder@@@@QAEXXZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0A0h']
call ['?Release@?$CMyComPtr@UICompressFilter@@@@QAEXXZ']
mov ['[ebp+var_11C],', '0']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_88]']
call ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_68]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_48]']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_38]']
call ['??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
mov ['eax,', '[ebp+var_11C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN59']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '15Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?GetBenchMemoryUsage@@YG_KII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shr ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '1']
cmp ['edx,', '[ebp+arg_0]']
sbb ['eax,', 'eax']
neg ['eax']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
xor ['edx,', 'edx']
div ['[ebp+var_C]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '[ebp+var_8]']
mov ['esi,', 'ecx']
xor ['edi,', 'edi']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
cmp ['[ebp+arg_0],', '1']
setnbe ['al']
movzx ['ecx,', 'al']
push ['ecx']
call ['?GetLZMAUsage@@YG_K_NI@Z']
add ['esi,', 'eax']
adc ['edi,', 'edx']
add ['esi,', '200000h']
adc ['edi,', '0']
mov ['edx,', '[ebp+var_10]']
xor ['eax,', 'eax']
push ['eax']
push ['edx']
push ['edi']
push ['esi']
call ['__allmul']
pop ['edi']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?CrcInternalTest@@YG_NXZ proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?CrcInternalTest@@YG_NXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '44h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_50]']
mov ['ecx,', '11h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
lea ['ecx,', '[ebp+var_1C]']
call ['??0CBenchBuffer@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_24],', '100h']
mov ['[ebp+var_28],', '400h']
mov ['[ebp+var_2C],', '20h']
push ['500h']
lea ['ecx,', '[ebp+var_1C]']
call ['?Alloc@CBenchBuffer@@QAE_NI@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_3049']
mov ['[ebp+var_4D],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['al,', '[ebp+var_4D]']
jmp ['loc_3155']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_30],', 'ecx']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_3061']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '1']
mov ['[ebp+var_34],', 'edx']
cmp ['[ebp+var_34],', '100h']
jnb ['short', 'loc_3077']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '[ebp+var_34]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_34]']
mov ['[eax],', 'cl']
jmp ['short', 'loc_3058']
push ['100h']
mov ['edx,', '[ebp+var_30]']
push ['edx']
call ['?CrcCalc1@@YGIPBEI@Z']
mov ['[ebp+var_38],', 'eax']
cmp ['[ebp+var_38],', '29058C73h']
jz ['short', 'loc_30AC']
mov ['[ebp+var_4E],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['al,', '[ebp+var_4E]']
jmp ['loc_3155']
lea ['ecx,', '[ebp+var_44]']
call ['??0CBaseRandomGenerator@@QAE@XZ']
lea ['eax,', '[ebp+var_44]']
push ['eax']
push ['400h']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '100h']
push ['ecx']
call ['?RandGen@@YGXPAEIAAVCBaseRandomGenerator@@@Z']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_30DE']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '1']
mov ['[ebp+var_34],', 'edx']
cmp ['[ebp+var_34],', '4E0h']
jnb ['short', 'loc_313F']
mov ['[ebp+var_4C],', '0']
jmp ['short', 'loc_30F9']
mov ['eax,', '[ebp+var_4C]']
add ['eax,', '1']
mov ['[ebp+var_4C],', 'eax']
cmp ['[ebp+var_4C],', '20h']
jnb ['short', 'loc_313D']
mov ['ecx,', '[ebp+var_4C]']
push ['ecx']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '[ebp+var_34]']
push ['edx']
call ['?CrcCalc1@@YGIPBEI@Z']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ebp+var_4C]']
call ['@CrcCalc@8']
cmp ['esi,', 'eax']
jz ['short', 'loc_313B']
mov ['[ebp+var_4F],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['al,', '[ebp+var_4F]']
jmp ['short', 'loc_3155']
jmp ['short', 'loc_30F0']
jmp ['short', 'loc_30D5']
mov ['[ebp+var_50],', '1']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['al,', '[ebp+var_50]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '50h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?CrcCalc1@@YGIPBEI@Z proc near          
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_31DD']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['short', 'loc_3208']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
xor ['eax,', '[ebp+var_4]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_4]']
shr ['ecx,', '8']
xor ['ecx,', 'dword', 'ptr', 'ds:_g_CrcTable[eax*4]']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_31D4']
mov ['eax,', '[ebp+var_4]']
xor ['eax,', '0FFFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?RandGen@@YGXPAEIAAVCBaseRandomGenerator@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_323D']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['short', 'loc_3257']
mov ['ecx,', '[ebp+arg_8]']
call ['?GetRnd@CBaseRandomGenerator@@QAEIXZ']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_4]']
mov ['[edx],', 'al']
jmp ['short', 'loc_3234']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?SetFreq@CBenchCallbackToPrint@@UAEJ_N_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['cl,', '[ebp+arg_0]']
mov ['[eax+68h],', 'cl']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_4]']
mov ['[edx+70h],', 'eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_4+4]']
mov ['[edx+74h],', 'ecx']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?SetEncodeResult@CBenchCallbackToPrint@@UAEJABUCBenchInfo@@_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['dword', 'ptr', '[ebp+var_10],', 'eax']
mov ['dword', 'ptr', '[ebp+var_10+4],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+58h]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+58h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_32EA']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_33A2']
movzx ['ecx,', '[ebp+arg_4]']
test ['ecx,', 'ecx']
jz ['loc_33A0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
push ['ecx']
mov ['eax,', '[eax+30h]']
push ['eax']
mov ['ecx,', '[edx+24h]']
push ['ecx']
mov ['edx,', '[edx+20h]']
push ['edx']
call ['__allmul']
push ['edx']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[eax+8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[eax]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+5Ch]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['?GetCompressRating@CBenchProps@@QAE_KI_K00@Z']
mov ['dword', 'ptr', '[ebp+var_10],', 'eax']
mov ['dword', 'ptr', '[ebp+var_10+4],', 'edx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '18h']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+74h]']
push ['ecx']
mov ['edx,', '[eax+70h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+68h]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+var_10+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+78h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+58h]']
push ['edx']
call ['?PrintResults@@YGXPAUIBenchPrintCallback@@ABUCBenchInfo@@I_K_N2PAUCTotalBenchRes@@@Z']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+60h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_33A0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+58h]']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+58h]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?PrintResults@@YGXPAUIBenchPrintCallback@@ABUCBenchInfo@@I_K_N2PAUCTotalBenchRes@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+34h]']
push ['edx']
mov ['ecx,', '[ecx+30h]']
push ['ecx']
mov ['edx,', '[eax+24h]']
push ['edx']
mov ['eax,', '[eax+20h]']
push ['eax']
call ['__allmul']
push ['edx']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['?GetSpeed@CBenchInfo@@QBE_K_K@Z']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_3444']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '[ebp+var_4]']
jz ['short', 'loc_3439']
push ['9']
push ['0']
push ['400h']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['__aulldiv']
push ['edx']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z']
jmp ['short', 'loc_3444']
push ['0Ah']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z']
mov ['ecx,', '[ebp+arg_4]']
call ['?GetUsage@CBenchInfo@@QBE_KXZ']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_C+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['?GetRatingPerUsage@CBenchInfo@@QBE_K_K@Z']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_349C']
mov ['edx,', '[ebp+arg_1C]']
push ['edx']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
movzx ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_C+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?PrintResults@@YGXAAUIBenchPrintCallback@@_K11_N1@Z']
cmp ['[ebp+arg_20],', '0']
jz ['loc_352D']
mov ['eax,', '[ebp+arg_8]']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_20]']
add ['eax,', '[edx]']
adc ['ecx,', '[edx+4]']
mov ['edx,', '[ebp+arg_20]']
mov ['[edx],', 'eax']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
xor ['ecx,', 'ecx']
push ['ecx']
push ['eax']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
call ['__allmul']
mov ['ecx,', '[ebp+arg_20]']
add ['eax,', '[ecx+18h]']
adc ['edx,', '[ecx+1Ch]']
mov ['ecx,', '[ebp+arg_20]']
mov ['[ecx+18h],', 'eax']
mov ['[ecx+1Ch],', 'edx']
mov ['edx,', '[ebp+arg_8]']
xor ['eax,', 'eax']
push ['eax']
push ['edx']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_C+4]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_C]']
push ['edx']
call ['__allmul']
mov ['ecx,', '[ebp+arg_20]']
add ['eax,', '[ecx+8]']
adc ['edx,', '[ecx+0Ch]']
mov ['ecx,', '[ebp+arg_20]']
mov ['[ecx+8],', 'eax']
mov ['[ecx+0Ch],', 'edx']
mov ['edx,', '[ebp+arg_8]']
xor ['eax,', 'eax']
push ['eax']
push ['edx']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['__allmul']
mov ['ecx,', '[ebp+arg_20]']
add ['eax,', '[ecx+10h]']
adc ['edx,', '[ecx+14h]']
mov ['ecx,', '[ebp+arg_20]']
mov ['[ecx+10h],', 'eax']
mov ['[ecx+14h],', 'edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['24h']
endp
?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '94h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_94]']
mov ['ecx,', '25h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+Size],', '60h']
mov ['eax,', '[ebp+Size]']
push ['eax']
push ['20h']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+Size]']
lea ['eax,', '[ebp+edx+Dst]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_4+4]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_4]']
push ['edx']
call ['?ConvertUInt64ToString@@YGX_KPAD@Z']
mov ['eax,', '[ebp+Size]']
sub ['eax,', '1']
mov ['[ebp+Size],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '1']
mov ['[ebp+arg_C],', 'ecx']
mov ['edx,', '[ebp+Size]']
lea ['eax,', '[ebp+edx+Dst]']
push ['eax']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+var_94],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
cmp ['ecx,', '[ebp+var_94]']
jle ['short', 'loc_3606']
mov ['edx,', '[ebp+arg_C]']
sub ['edx,', '[ebp+var_94]']
mov ['eax,', '[ebp+Size]']
sub ['eax,', 'edx']
mov ['[ebp+Size],', 'eax']
jns ['short', 'loc_3606']
mov ['[ebp+Size],', '0']
mov ['ecx,', '[ebp+Size]']
lea ['edx,', '[ebp+ecx+Dst]']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_2']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '94h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+Size]']
push ['eax']
push ['20h']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?PrintChars@@YGXAAUIBenchPrintCallback@@DI@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
?PrintChars@@YGXAAUIBenchPrintCallback@@DI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_10C]']
mov ['ecx,', '43h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+Size]']
push ['eax']
movzx ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Size]']
mov ['[ebp+eax+Dst],', '0']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '10Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?PrintResults@@YGXAAUIBenchPrintCallback@@_K11_N1@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['5']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1388h']
mov ['ecx,', '[ebp+arg_8]']
adc ['ecx,', '0']
push ['0']
push ['2710h']
push ['ecx']
push ['eax']
call ['__aulldiv']
push ['edx']
push ['eax']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z']
push ['6']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?PrintRating@@YGXAAUIBenchPrintCallback@@_KH@Z']
push ['6']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?PrintRating@@YGXAAUIBenchPrintCallback@@_KH@Z']
movzx ['eax,', '[ebp+arg_1C]']
test ['eax,', 'eax']
jz ['loc_3857']
mov ['ecx,', '[ebp+arg_20]']
or ['ecx,', '[ebp+arg_24]']
jnz ['short', 'loc_37D7']
push ['0Ch']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z']
jmp ['loc_3857']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_24]']
push ['edx']
mov ['eax,', '[ebp+arg_20]']
push ['eax']
call ['__allmul']
push ['0']
push ['64h']
push ['edx']
push ['eax']
call ['__aulldiv']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'edx']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '[ebp+var_4]']
jnz ['short', 'loc_3813']
mov ['[ebp+var_8],', '1']
mov ['[ebp+var_4],', '0']
push ['5']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
push ['2710h']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
call ['__allmul']
push ['edx']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?PrintPercents@@YGXAAUIBenchPrintCallback@@_K1H@Z']
push ['5']
mov ['ecx,', '[ebp+arg_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_20]']
push ['edx']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?PrintPercents@@YGXAAUIBenchPrintCallback@@_K1H@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['28h']
endp
?PrintRating@@YGXAAUIBenchPrintCallback@@_KH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '7A120h']
mov ['edx,', '[ebp+arg_8]']
adc ['edx,', '0']
push ['0']
push ['0F4240h']
push ['edx']
push ['ecx']
call ['__aulldiv']
push ['edx']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['10h']
endp
?PrintPercents@@YGXAAUIBenchPrintCallback@@_K1H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
push ['edi']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
push ['0']
push ['64h']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['__allmul']
mov ['esi,', 'eax']
mov ['edi,', 'edx']
push ['0']
push ['2']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
call ['__aulldiv']
add ['esi,', 'eax']
adc ['edi,', 'edx']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
push ['edi']
push ['esi']
call ['__aulldiv']
push ['edx']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z']
pop ['edi']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['18h']
endp
?SetDecodeResult@CBenchCallbackToPrint@@UAEJABUCBenchInfo@@_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '50h']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_50]']
mov ['ecx,', '14h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+58h]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+58h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_395B']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_3A7C']
movzx ['ecx,', '[ebp+arg_4]']
test ['ecx,', 'ecx']
jz ['loc_3A7A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
push ['eax']
mov ['ecx,', '[edx+30h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+2Ch]']
push ['eax']
mov ['ecx,', '[edx+28h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
push ['eax']
mov ['ecx,', '[edx+20h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[edx+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[edx]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['?GetDecompressRating@CBenchProps@@QAE_K_K0000@Z']
mov ['dword', 'ptr', '[ebp+var_10],', 'eax']
mov ['dword', 'ptr', '[ebp+var_10+4],', 'edx']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+60h]']
test ['eax,', 'eax']
jz ['short', 'loc_39DD']
mov ['esi,', 'esp']
mov ['ecx,', 'ds:_kSep']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+58h]']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+58h]']
mov ['edx,', '[eax]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_39F0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+64h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+58h]']
push ['ecx']
call ['?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z']
mov ['esi,', '[ebp+arg_0]']
mov ['ecx,', '0Eh']
lea ['edi,', '[ebp+var_4C]']
rep ['movsd']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
call ['__allmul']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_20]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
call ['__allmul']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'edx']
mov ['[ebp+var_1C],', '1']
mov ['[ebp+var_18],', '0']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '38h']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+74h]']
push ['eax']
mov ['ecx,', '[edx+70h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+68h]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_10+4]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+7Ch]']
push ['ecx']
lea ['edx,', '[ebp+var_4C]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+58h]']
push ['ecx']
call ['?PrintResults@@YGXPAUIBenchPrintCallback@@ABUCBenchInfo@@I_K_N2PAUCTotalBenchRes@@@Z']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '50h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Print@CBenchCallbackToPrint@@QAEXPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+58h]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+58h]']
mov ['edx,', '[edx]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?NewLine@CBenchCallbackToPrint@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+58h]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+58h]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', 'eax']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['?MyStringLen@@YGIPBD@Z']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', 'eax']
mov ['[ebp+Size],', 'edx']
cmp ['[ebp+Size],', '0']
jle ['short', 'loc_3B89']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?MyStringLen@@YGIPBD@Z']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', 'eax']
mov ['[ebp+Size],', 'ecx']
cmp ['[ebp+Size],', '0']
jle ['short', 'loc_3BD0']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?GetCpuName@@YGXAAVAString@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?Empty@AString@@QAEXXZ']
lea ['eax,', '[ebp+var_28]']
push ['eax']
call ['_x86cpuid_CheckAndRead@4']
test ['eax,', 'eax']
jz ['short', 'loc_3C44']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_28]']
push ['edx']
call ['?x86cpuid_to_String@@YGXABUCx86cpuid@@AAVAString@@@Z']
jmp ['short', 'loc_3C51']
push ['offset', '$SG71417']
mov ['ecx,', '[ebp+arg_0]']
call ['??4AString@@QAEAAV0@PBD@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6_6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?x86cpuid_to_String@@YGXABUCx86cpuid@@AAVAString@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '74h']
push ['edi']
lea ['edi,', '[ebp+var_74]']
mov ['ecx,', '1Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
call ['?Empty@AString@@QAEXXZ']
mov ['[ebp+var_C],', '0']
lea ['eax,', '[ebp+var_18]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
lea ['edx,', '[ebp+var_20]']
push ['edx']
lea ['eax,', '[ebp+var_C]']
push ['eax']
push ['80000000h']
call ['_MyCPUID@20']
cmp ['[ebp+var_C],', '80000004h']
sbb ['ecx,', 'ecx']
add ['ecx,', '1']
mov ['[ebp+var_25],', 'cl']
movzx ['edx,', '[ebp+var_25]']
test ['edx,', 'edx']
jnz ['short', 'loc_3D30']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_3D12']
mov ['eax,', '[ebp+var_2C]']
add ['eax,', '1']
mov ['[ebp+var_2C],', 'eax']
cmp ['[ebp+var_2C],', '3']
jge ['short', 'loc_3D2E']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4+4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['?PrintCpuChars@@YGXAAVAString@@I@Z']
jmp ['short', 'loc_3D09']
jmp ['short', 'loc_3DA6']
mov ['[ebp+var_30],', '0']
jmp ['short', 'loc_3D42']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
cmp ['[ebp+var_30],', '3']
jge ['short', 'loc_3DA6']
mov ['[ebp+var_44],', '0']
xor ['eax,', 'eax']
mov ['[ebp+var_40],', 'eax']
mov ['[ebp+var_3C],', 'eax']
mov ['[ebp+var_38],', 'eax']
lea ['ecx,', '[ebp+var_38]']
push ['ecx']
lea ['edx,', '[ebp+var_3C]']
push ['edx']
lea ['eax,', '[ebp+var_40]']
push ['eax']
lea ['ecx,', '[ebp+var_44]']
push ['ecx']
mov ['edx,', '[ebp+var_30]']
sub ['edx,', '7FFFFFFEh']
push ['edx']
call ['_MyCPUID@20']
mov ['[ebp+var_4C],', '0']
jmp ['short', 'loc_3D8B']
mov ['eax,', '[ebp+var_4C]']
add ['eax,', '1']
mov ['[ebp+var_4C],', 'eax']
cmp ['[ebp+var_4C],', '4']
jge ['short', 'loc_3DA4']
mov ['ecx,', '[ebp+var_4C]']
mov ['edx,', '[ebp+ecx*4+var_44]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?PrintCpuChars@@YGXAAVAString@@I@Z']
jmp ['short', 'loc_3D82']
jmp ['short', 'loc_3D39']
mov ['ecx,', '[ebp+arg_4]']
call ['?Add_Space_if_NotEmpty@AString@@QAEXXZ']
lea ['ecx,', '[ebp+var_70]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
push ['eax']
call ['?ConvertUInt32ToHex@@YGXIPAD@Z']
push ['28h']
mov ['ecx,', '[ebp+arg_4]']
call ['??YAString@@QAEAAV0@D@Z']
lea ['ecx,', '[ebp+var_70]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??YAString@@QAEAAV0@PBD@Z']
push ['29h']
mov ['ecx,', '[ebp+arg_4]']
call ['??YAString@@QAEAAV0@D@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN19_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '74h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?PrintCpuChars@@YGXAAVAString@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_3E86']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '4']
jge ['short', 'loc_3EBA']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '0FFh']
mov ['byte', 'ptr', '[ebp+var_8+3],', 'cl']
mov ['edx,', '[ebp+arg_4]']
shr ['edx,', '8']
mov ['[ebp+arg_4],', 'edx']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_8+3]']
test ['eax,', 'eax']
jnz ['short', 'loc_3EAB']
jmp ['short', 'loc_3EBA']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_8+3]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??YAString@@QAEAAV0@D@Z']
jmp ['short', 'loc_3E7D']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '42Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_438]']
mov ['ecx,', '10Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
call ['?CrcInternalTest@@YG_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_3F25']
mov ['eax,', '1']
jmp ['loc_5D6B']
mov ['[ebp+var_14],', '1']
mov ['[ebp+var_1C],', '20000000h']
mov ['[ebp+var_18],', '0']
call ['?GetNumberOfProcessors@NSystem@NWindows@@YGIXZ']
mov ['[ebp+var_14],', 'eax']
call ['?GetRamSize@NSystem@NWindows@@YG_KXZ']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'edx']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_24],', 'ecx']
mov ['[ebp+var_30],', '4']
mov ['[ebp+var_35],', '0']
lea ['ecx,', '[ebp+var_60]']
call ['??0COneMethodInfo@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_68],', '0']
jmp ['short', 'loc_3F7F']
mov ['edx,', '[ebp+var_68]']
add ['edx,', '1']
mov ['[ebp+var_68],', 'edx']
mov ['ecx,', '[ebp+arg_8]']
call ['?Size@?$CObjectVector@UCProperty@@@@QBEIXZ']
cmp ['[ebp+var_68],', 'eax']
jnb ['loc_42C6']
mov ['eax,', '[ebp+var_68]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
call ['??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z']
mov ['[ebp+var_6C],', 'eax']
lea ['ecx,', '[ebp+var_80]']
call ['??0CPropVariant@NCOM@NWindows@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_6C]']
push ['ecx']
lea ['ecx,', '[ebp+var_94]']
call ['??0UString@@QAE@ABV0@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_94]']
call ['?MakeLower_Ascii@UString@@QAEXXZ']
mov ['ecx,', '[ebp+var_6C]']
add ['ecx,', '0Ch']
call ['?IsEmpty@UString@@QBE_NXZ']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_3FEB']
lea ['eax,', '[ebp+var_80]']
push ['eax']
mov ['ecx,', '[ebp+var_6C]']
add ['ecx,', '0Ch']
push ['ecx']
call ['?ParseNumberString@@YGXABVUString@@AAVCPropVariant@NCOM@NWindows@@@Z']
push ['offset', '$SG71508']
lea ['ecx,', '[ebp+var_94]']
call ['?IsEqualTo@UString@@QBE_NPBD@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_40AD']
push ['offset', '$SG71511']
lea ['ecx,', '[ebp+var_3D8]']
call ['??0UString@@QAE@PB_W@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['eax,', '[ebp+var_30]']
push ['eax']
lea ['ecx,', '[ebp+var_80]']
push ['ecx']
lea ['edx,', '[ebp+var_3D8]']
push ['edx']
call ['?ParsePropToUInt32@@YGJABVUString@@ABUtagPROPVARIANT@@AAI@Z']
mov ['[ebp+var_9C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_3D8]']
call ['??1UString@@QAE@XZ']
cmp ['[ebp+var_9C],', '0']
jz ['short', 'loc_408D']
mov ['eax,', '[ebp+var_9C]']
mov ['[ebp+var_3DC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_94]']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_80]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_3DC]']
jmp ['loc_5D6B']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_94]']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_80]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
jmp ['loc_3F76']
push ['offset', '$SG71515']
lea ['ecx,', '[ebp+var_94]']
call ['?IsPrefixedBy_Ascii_NoCase@UString@@QBE_NPBD@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['loc_4243']
push ['2']
lea ['ecx,', '[ebp+var_94]']
call ['?Ptr@UString@@QBEPB_WI@Z']
push ['eax']
lea ['ecx,', '[ebp+var_AC]']
call ['??0UString@@QAE@PB_W@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
push ['offset', '$SG71518']
lea ['edx,', '[ebp+var_AC]']
push ['edx']
call ['??8@YG_NABVUString@@PB_W@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_4130']
mov ['[ebp+var_35],', '1']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_AC]']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_94]']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_80]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
jmp ['loc_3F76']
lea ['ecx,', '[ebp+var_AC]']
call ['?IsEmpty@UString@@QBE_NXZ']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_419D']
movzx ['edx,', 'word', 'ptr', '[ebp+var_80.anonymous_0]']
cmp ['edx,', '8']
jnz ['short', 'loc_419D']
mov ['esi,', 'esp']
push ['offset', '$SG71521']
mov ['eax,', 'dword', 'ptr', '[ebp+var_80.anonymous_0+8]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__wcscmp']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_419D']
mov ['[ebp+var_35],', '1']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_AC]']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_94]']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_80]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
jmp ['loc_3F76']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
lea ['eax,', '[ebp+var_80]']
push ['eax']
lea ['ecx,', '[ebp+var_AC]']
push ['ecx']
call ['?ParseMtProp@@YGJABVUString@@ABUtagPROPVARIANT@@IAAI@Z']
mov ['[ebp+var_B4],', 'eax']
cmp ['[ebp+var_B4],', '0']
jz ['short', 'loc_4214']
mov ['edx,', '[ebp+var_B4]']
mov ['[ebp+var_3E0],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_AC]']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_94]']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_80]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_3E0]']
jmp ['loc_5D6B']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_AC]']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_94]']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_80]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
jmp ['loc_3F76']
lea ['eax,', '[ebp+var_80]']
push ['eax']
lea ['ecx,', '[ebp+var_94]']
push ['ecx']
lea ['ecx,', '[ebp+var_60]']
call ['?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z']
mov ['[ebp+var_B8],', 'eax']
cmp ['[ebp+var_B8],', '0']
jz ['short', 'loc_42A6']
mov ['edx,', '[ebp+var_B8]']
mov ['[ebp+var_3E4],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_94]']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_80]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_3E4]']
jmp ['loc_5D6B']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_94]']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_80]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
jmp ['loc_3F76']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_432D']
lea ['ecx,', '[ebp+var_C8]']
call ['??0AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['eax,', '[ebp+var_C8]']
push ['eax']
call ['?GetCpuName@@YGXAAVAString@@@Z']
lea ['ecx,', '[ebp+var_C8]']
call ['??BAString@@QBEPBDXZ']
mov ['esi,', 'esp']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_C8]']
call ['??1AString@@QAE@XZ']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_434D']
mov ['esi,', 'esp']
push ['offset', '$SG71531']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_D8],', '0']
mov ['[ebp+var_D4],', '4']
cmp ['[ebp+arg_0],', '0']
jz ['loc_458E']
mov ['[ebp+var_E4],', '40h']
mov ['[ebp+var_E0],', '0']
mov ['[ebp+var_E8],', '0']
jmp ['short', 'loc_439A']
mov ['ecx,', '[ebp+var_E8]']
add ['ecx,', '1']
mov ['[ebp+var_E8],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_43EB']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_EC],', 'eax']
cmp ['[ebp+var_EC],', '0']
jz ['short', 'loc_43EB']
mov ['eax,', '[ebp+var_EC]']
mov ['[ebp+var_3E8],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_3E8]']
jmp ['loc_5D6B']
call ['?GetTimeCount@@YG_KXZ']
mov ['[ebp+var_F4],', 'eax']
mov ['[ebp+var_F0],', 'edx']
mov ['ecx,', '[ebp+var_F4]']
mov ['[ebp+var_F8],', 'ecx']
mov ['edx,', 'ds:?g_BenchCpuFreqTemp@@3IA']
push ['edx']
push ['0']
push ['0F4240h']
mov ['eax,', '[ebp+var_E0]']
push ['eax']
mov ['ecx,', '[ebp+var_E4]']
push ['ecx']
call ['__allmul']
push ['0']
push ['80h']
push ['edx']
push ['eax']
call ['__aulldiv']
push ['eax']
mov ['edx,', '[ebp+var_F8]']
push ['edx']
call ['_CountCpuFreq@12']
mov ['[ebp+var_F8],', 'eax']
call ['?GetTimeCount@@YG_KXZ']
sub ['eax,', '[ebp+var_F4]']
sbb ['edx,', '[ebp+var_F0]']
mov ['[ebp+var_F4],', 'eax']
mov ['[ebp+var_F0],', 'edx']
mov ['eax,', '[ebp+var_F4]']
or ['eax,', '[ebp+var_F0]']
jnz ['short', 'loc_4489']
mov ['[ebp+var_F4],', '1']
mov ['[ebp+var_F0],', '0']
call ['?GetFreq@@YG_KXZ']
mov ['[ebp+var_100],', 'eax']
mov ['[ebp+var_FC],', 'edx']
mov ['ecx,', '[ebp+var_FC]']
push ['ecx']
mov ['edx,', '[ebp+var_100]']
push ['edx']
mov ['eax,', '[ebp+var_E0]']
push ['eax']
mov ['ecx,', '[ebp+var_E4]']
push ['ecx']
call ['__allmul']
mov ['ecx,', '[ebp+var_F0]']
push ['ecx']
mov ['ecx,', '[ebp+var_F4]']
push ['ecx']
push ['edx']
push ['eax']
call ['__aulldiv']
mov ['[ebp+var_108],', 'eax']
mov ['[ebp+var_104],', 'edx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_450C']
xor ['edx,', 'edx']
cmp ['[ebp+var_F8],', '0F1541213h']
setz ['dl']
add ['edx,', '5']
push ['edx']
mov ['eax,', '[ebp+var_104]']
push ['eax']
mov ['ecx,', '[ebp+var_108]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z']
cmp ['[ebp+var_E8],', '3']
jl ['short', 'loc_4589']
lea ['eax,', '[ebp+var_D8]']
push ['eax']
push ['0']
push ['0F4240h']
mov ['ecx,', '[ebp+var_104]']
push ['ecx']
mov ['edx,', '[ebp+var_108]']
push ['edx']
call ['__allmul']
push ['edx']
push ['eax']
mov ['eax,', '[ebp+var_30]']
push ['eax']
call ['?SetComplexCommands@@YGXI_KAA_K@Z']
cmp ['[ebp+var_E8],', '8']
jge ['short', 'loc_4568']
mov ['ecx,', '[ebp+var_F0]']
cmp ['ecx,', '[ebp+var_FC]']
jb ['short', 'loc_456A']
ja ['short', 'loc_4568']
mov ['edx,', '[ebp+var_F4]']
cmp ['edx,', '[ebp+var_100]']
jb ['short', 'loc_456A']
jmp ['short', 'loc_458E']
mov ['eax,', '[ebp+var_E4]']
mov ['edx,', '[ebp+var_E0]']
mov ['cl,', '1']
call ['__allshl']
mov ['[ebp+var_E4],', 'eax']
mov ['[ebp+var_E0],', 'edx']
jmp ['loc_438B']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_45DF']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
push ['offset', '$SG71555']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
push ['offset', '$SG71556']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?PrintRequirements@@YGXAAUIBenchPrintCallback@@PBD_K1I@Z']
cmp ['[ebp+var_24],', '1']
jb ['short', 'loc_45EE']
cmp ['[ebp+var_24],', '1000h']
jbe ['short', 'loc_4612']
mov ['[ebp+var_3EC],', '80070057h']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_3EC]']
jmp ['loc_5D6B']
lea ['edx,', '[ebp+var_110]']
push ['edx']
lea ['ecx,', '[ebp+var_60]']
call ['?Get_DicSize@CMethodProps@@QBE_NAAI@Z']
mov ['[ebp+var_115],', 'al']
lea ['ecx,', '[ebp+var_54]']
call ['?IsEmpty@AString@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_4643']
push ['offset', '$SG71564']
lea ['ecx,', '[ebp+var_54]']
call ['??4AString@@QAEAAV0@PBD@Z']
cmp ['[ebp+arg_4],', '0']
jz ['loc_46D8']
lea ['ecx,', '[ebp+var_12C]']
call ['??0CBenchProps@@QAE@XZ']
lea ['ecx,', '[ebp+var_12C]']
call ['?SetLzmaCompexity@CBenchProps@@QAEXXZ']
lea ['ecx,', '[ebp+var_60]']
call ['?Get_Lzma_DicSize@CMethodProps@@QBEIXZ']
mov ['dword', 'ptr', '[ebp+var_138+4],', 'eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_138+4]']
add ['ecx,', '10000h']
mov ['dword', 'ptr', '[ebp+var_138],', 'ecx']
lea ['edx,', '[ebp+var_12C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['1Eh']
mov ['edx,', 'dword', 'ptr', '[ebp+var_138]']
push ['edx']
lea ['eax,', '[ebp+var_60]']
push ['eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
push ['1']
mov ['edx,', '[ebp+var_D4]']
push ['edx']
mov ['eax,', '[ebp+var_D8]']
push ['eax']
call ['?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z']
mov ['[ebp+var_3F0],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_3F0]']
jmp ['loc_5D6B']
lea ['ecx,', '[ebp+var_54]']
push ['ecx']
lea ['ecx,', '[ebp+var_148]']
call ['??0AString@@QAE@ABV0@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
push ['offset', '$SG71572']
lea ['ecx,', '[ebp+var_148]']
call ['?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_4712']
push ['offset', '$SG71573']
lea ['ecx,', '[ebp+var_148]']
call ['??4AString@@QAEAAV0@PBD@Z']
lea ['eax,', '[ebp+var_148]']
push ['eax']
lea ['ecx,', '[ebp+var_54]']
call ['??4AString@@QAEAAV0@ABV0@@Z']
lea ['ecx,', '[ebp+var_158]']
push ['ecx']
lea ['edx,', '[ebp+var_148]']
push ['edx']
call ['?FindHashMethod@@YG_NABVAString@@AA_K@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['loc_4E7D']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_4778']
mov ['[ebp+var_3F4],', '1']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_148]']
call ['??1AString@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_3F4]']
jmp ['loc_5D6B']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_160],', 'ecx']
movzx ['edx,', '[ebp+var_115]']
test ['edx,', 'edx']
jnz ['short', 'loc_4796']
mov ['[ebp+var_110],', '1000000h']
mov ['[ebp+var_164],', '2710h']
mov ['[ebp+var_168],', '0']
mov ['[ebp+var_16C],', '0']
jmp ['short', 'loc_47C5']
mov ['eax,', '[ebp+var_16C]']
add ['eax,', '1']
mov ['[ebp+var_16C],', 'eax']
cmp ['[ebp+var_16C],', '6']
jnb ['loc_48FE']
mov ['ecx,', '[ebp+var_16C]']
shl ['ecx,', '4']
add ['ecx,', 'offset', '_g_Hash']
mov ['[ebp+var_170],', 'ecx']
mov ['edx,', '[ebp+var_170]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
lea ['ecx,', '[ebp+var_180]']
call ['??0AString@@QAE@PBD@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_194]']
call ['??0AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
push ['3Ah']
lea ['ecx,', '[ebp+var_180]']
call ['?Find@AString@@QBEHD@Z']
mov ['[ebp+var_19C],', 'eax']
cmp ['[ebp+var_19C],', '0']
jl ['short', 'loc_485E']
mov ['ecx,', '[ebp+var_19C]']
add ['ecx,', '1']
push ['ecx']
lea ['ecx,', '[ebp+var_180]']
call ['?Ptr@AString@@QBEPBDI@Z']
push ['eax']
lea ['ecx,', '[ebp+var_194]']
call ['??4AString@@QAEAAV0@PBD@Z']
mov ['edx,', '[ebp+var_19C]']
push ['edx']
lea ['ecx,', '[ebp+var_180]']
call ['?DeleteFrom@AString@@QAEXI@Z']
lea ['ecx,', '[ebp+var_148]']
call ['??BAString@@QBEPBDXZ']
push ['eax']
lea ['ecx,', '[ebp+var_180]']
call ['??BAString@@QBEPBDXZ']
push ['eax']
call ['?AreSameMethodNames@@YG_NPBD0@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_48DB']
mov ['ecx,', '[ebp+var_170]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_164],', 'edx']
mov ['eax,', '[ebp+var_170]']
add ['eax,', '8']
mov ['[ebp+var_168],', 'eax']
lea ['ecx,', '[ebp+var_194]']
call ['??BAString@@QBEPBDXZ']
push ['eax']
lea ['ecx,', '[ebp+var_48]']
call ['?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_48DB']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_194]']
call ['??1AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_180]']
call ['??1AString@@QAE@XZ']
jmp ['short', 'loc_48FE']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_194]']
call ['??1AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_180]']
call ['??1AString@@QAE@XZ']
jmp ['loc_47B6']
mov ['edx,', '[ebp+var_160]']
mov ['eax,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_160]']
mov ['edx,', '[eax+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['offset', '$SG71594']
mov ['eax,', '[ebp+var_160]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_160]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1A0],', '6']
mov ['[ebp+var_1A4],', '0']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_1A4]']
push ['edx']
call ['?GetNumThreadsNext@@YGIII@Z']
mov ['[ebp+var_1A8],', 'eax']
push ['6']
mov ['eax,', '[ebp+var_1A8]']
xor ['ecx,', 'ecx']
push ['ecx']
push ['eax']
mov ['edx,', '[ebp+var_160]']
push ['edx']
call ['?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z']
mov ['eax,', '[ebp+var_1A4]']
add ['eax,', '1']
mov ['[ebp+var_1A4],', 'eax']
mov ['ecx,', '[ebp+var_1A8]']
cmp ['ecx,', '[ebp+var_24]']
jb ['short', 'loc_4998']
jmp ['short', 'loc_499A']
jmp ['short', 'loc_494E']
mov ['edx,', '[ebp+var_160]']
mov ['eax,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_160]']
mov ['edx,', '[eax+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_160]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_160]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_1A4]']
push ['ecx']
lea ['ecx,', '[ebp+var_1B0]']
call ['??0CTempValues@@QAE@I@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '9']
mov ['[ebp+var_1B8],', '0']
jmp ['short', 'loc_4A03']
mov ['edx,', '[ebp+var_1B8]']
add ['edx,', '1']
mov ['[ebp+var_1B8],', 'edx']
mov ['eax,', '[ebp+var_1B8]']
cmp ['eax,', '[ebp+var_1A4]']
jnb ['short', 'loc_4A2E']
mov ['ecx,', '[ebp+var_1B8]']
mov ['edx,', '[ebp+var_1B0]']
mov ['dword', 'ptr', '[edx+ecx*8],', '0']
mov ['dword', 'ptr', '[edx+ecx*8+4],', '0']
jmp ['short', 'loc_49F4']
mov ['[ebp+var_1C0],', '0']
mov ['[ebp+var_1BC],', '0']
mov ['[ebp+var_1C4],', '0']
jmp ['short', 'loc_4A5D']
mov ['eax,', '[ebp+var_1C4]']
add ['eax,', '1']
mov ['[ebp+var_1C4],', 'eax']
mov ['ecx,', '[ebp+var_1C4]']
cmp ['ecx,', '[ebp+arg_C]']
jnb ['loc_4D67']
mov ['[ebp+var_1C8],', '0Ah']
jmp ['short', 'loc_4A87']
mov ['edx,', '[ebp+var_1C8]']
add ['edx,', '1']
mov ['[ebp+var_1C8],', 'edx']
cmp ['[ebp+var_1C8],', '20h']
jnb ['loc_4D62']
mov ['eax,', '1']
mov ['ecx,', '[ebp+var_1C8]']
shl ['eax,', 'cl']
mov ['[ebp+var_1CC],', 'eax']
mov ['ecx,', '[ebp+var_1CC]']
cmp ['ecx,', '[ebp+var_110]']
jbe ['short', 'loc_4ABA']
jmp ['loc_4D62']
lea ['edx,', '[ebp+var_1E0]']
push ['edx']
mov ['eax,', '[ebp+var_1C8]']
push ['eax']
call ['?ConvertUInt32ToString@@YGXIPAD@Z']
lea ['ecx,', '[ebp+var_1E0]']
push ['ecx']
call ['?MyStringLen@@YGIPBD@Z']
mov ['[ebp+var_1E8],', 'eax']
mov ['edx,', '[ebp+var_1E8]']
mov ['[ebp+edx+var_1E0],', '3Ah']
mov ['eax,', '[ebp+var_1E8]']
add ['eax,', '1']
mov ['[ebp+var_1E8],', 'eax']
mov ['ecx,', '[ebp+var_1E8]']
mov ['[ebp+ecx+var_1E0],', '20h']
mov ['edx,', '[ebp+var_1E8]']
add ['edx,', '1']
mov ['[ebp+var_1E8],', 'edx']
mov ['eax,', '[ebp+var_1E8]']
mov ['[ebp+eax+var_1E0],', '0']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_1E0]']
push ['ecx']
mov ['edx,', '[ebp+var_160]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_160]']
mov ['edx,', '[eax]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1EC],', '0']
jmp ['short', 'loc_4B64']
mov ['eax,', '[ebp+var_1EC]']
add ['eax,', '1']
mov ['[ebp+var_1EC],', 'eax']
mov ['ecx,', '[ebp+var_1EC]']
cmp ['ecx,', '[ebp+var_1A4]']
jnb ['loc_4D23']
mov ['edx,', '[ebp+var_160]']
mov ['eax,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_160]']
mov ['edx,', '[eax+8]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1F0],', 'eax']
cmp ['[ebp+var_1F0],', '0']
jz ['short', 'loc_4BE5']
mov ['eax,', '[ebp+var_1F0]']
mov ['[ebp+var_3F8],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_1B0]']
call ['??1CTempValues@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_148]']
call ['??1AString@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_3F8]']
jmp ['loc_5D6B']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_1EC]']
push ['edx']
call ['?GetNumThreadsNext@@YGIII@Z']
mov ['[ebp+var_1F4],', 'eax']
mov ['[ebp+var_200],', '0']
mov ['[ebp+var_1FC],', '0']
cmp ['[ebp+var_1C8],', '11h']
jnz ['short', 'loc_4C26']
mov ['eax,', '[ebp+var_168]']
mov ['[ebp+var_42C],', 'eax']
jmp ['short', 'loc_4C30']
mov ['[ebp+var_42C],', '0']
push ['0']
push ['0']
push ['0']
push ['0']
push ['0']
lea ['ecx,', '[ebp+var_60]']
push ['ecx']
mov ['edx,', '[ebp+var_42C]']
push ['edx']
push ['1']
mov ['eax,', '[ebp+var_164]']
push ['eax']
lea ['ecx,', '[ebp+var_200]']
push ['ecx']
mov ['edx,', '[ebp+var_1CC]']
push ['edx']
mov ['eax,', '[ebp+var_1F4]']
push ['eax']
mov ['ecx,', '[ebp+var_D4]']
push ['ecx']
mov ['edx,', '[ebp+var_D8]']
push ['edx']
call ['?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z']
mov ['[ebp+var_208],', 'eax']
cmp ['[ebp+var_208],', '0']
jz ['short', 'loc_4CC9']
mov ['eax,', '[ebp+var_208]']
mov ['[ebp+var_3FC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_1B0]']
call ['??1CTempValues@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_148]']
call ['??1AString@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_3FC]']
jmp ['loc_5D6B']
push ['6']
mov ['eax,', '[ebp+var_200]']
mov ['edx,', '[ebp+var_1FC]']
mov ['cl,', '14h']
call ['__aullshr']
push ['edx']
push ['eax']
mov ['ecx,', '[ebp+var_160]']
push ['ecx']
call ['?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z']
mov ['edx,', '[ebp+var_1EC]']
mov ['eax,', '[ebp+var_1B0]']
mov ['ecx,', '[eax+edx*8]']
add ['ecx,', '[ebp+var_200]']
mov ['edx,', '[eax+edx*8+4]']
adc ['edx,', '[ebp+var_1FC]']
mov ['eax,', '[ebp+var_1EC]']
mov ['esi,', '[ebp+var_1B0]']
mov ['[esi+eax*8],', 'ecx']
mov ['[esi+eax*8+4],', 'edx']
jmp ['loc_4B55']
mov ['ecx,', '[ebp+var_160]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_160]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_1C0]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_1BC]']
adc ['edx,', '0']
mov ['[ebp+var_1C0],', 'ecx']
mov ['[ebp+var_1BC],', 'edx']
jmp ['loc_4A78']
jmp ['loc_4A4E']
mov ['eax,', '[ebp+var_1C0]']
or ['eax,', '[ebp+var_1BC]']
jz ['loc_4E3B']
mov ['ecx,', '[ebp+var_160]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_160]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
push ['offset', '$SG71634']
mov ['ecx,', '[ebp+var_160]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_160]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20C],', '0']
jmp ['short', 'loc_4DD0']
mov ['ecx,', '[ebp+var_20C]']
add ['ecx,', '1']
mov ['[ebp+var_20C],', 'ecx']
mov ['edx,', '[ebp+var_20C]']
cmp ['edx,', '[ebp+var_1A4]']
jnb ['short', 'loc_4E1F']
push ['6']
mov ['eax,', '[ebp+var_20C]']
mov ['ecx,', '[ebp+var_1B0]']
mov ['edx,', '[ebp+var_1BC]']
push ['edx']
mov ['edx,', '[ebp+var_1C0]']
push ['edx']
mov ['edx,', '[ecx+eax*8+4]']
push ['edx']
mov ['eax,', '[ecx+eax*8]']
push ['eax']
call ['__aulldiv']
mov ['cl,', '14h']
call ['__aullshr']
push ['edx']
push ['eax']
mov ['ecx,', '[ebp+var_160]']
push ['ecx']
call ['?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z']
jmp ['short', 'loc_4DC1']
mov ['edx,', '[ebp+var_160]']
mov ['eax,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_160]']
mov ['edx,', '[eax+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_400],', '0']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_1B0]']
call ['??1CTempValues@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_148]']
call ['??1AString@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_400]']
jmp ['loc_5D6B']
mov ['[ebp+var_20D],', '0']
push ['offset', '$SG71643']
lea ['ecx,', '[ebp+var_54]']
call ['?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z']
mov ['[ebp+var_20E],', 'al']
mov ['[ebp+var_214],', '0']
jmp ['short', 'loc_4EB2']
mov ['eax,', '[ebp+var_214]']
add ['eax,', '1']
mov ['[ebp+var_214],', 'eax']
cmp ['[ebp+var_214],', '3']
jnb ['loc_5D3D']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_218],', 'ecx']
movzx ['edx,', '[ebp+var_35]']
test ['edx,', 'edx']
jnz ['short', 'loc_4EE0']
cmp ['[ebp+var_214],', '0']
jz ['short', 'loc_4EDE']
jmp ['loc_5D3D']
jmp ['short', 'loc_4F2E']
mov ['[ebp+var_218],', '1']
cmp ['[ebp+var_214],', '0']
jz ['short', 'loc_4F2E']
cmp ['[ebp+var_14],', '2']
jnb ['short', 'loc_4EFE']
jmp ['loc_5D3D']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_218],', 'eax']
cmp ['[ebp+var_214],', '1']
jnz ['short', 'loc_4F23']
cmp ['[ebp+var_14],', '4']
jb ['short', 'loc_4F21']
mov ['ecx,', '[ebp+var_14]']
shr ['ecx,', '1']
mov ['[ebp+var_218],', 'ecx']
jmp ['short', 'loc_4F2E']
cmp ['[ebp+var_14],', '4']
jnb ['short', 'loc_4F2E']
jmp ['loc_5D3D']
lea ['ecx,', '[ebp+var_29C]']
call ['??0CBenchCallbackToPrint@@QAE@XZ']
lea ['ecx,', '[ebp+var_29C]']
call ['?Init@CBenchCallbackToPrint@@QAEXXZ']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_244],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_2A4],', 'eax']
cmp ['[ebp+var_214],', '0']
jbe ['short', 'loc_4F97']
mov ['ecx,', '[ebp+var_2A4]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_2A4]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_2A4]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_2A4]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['ecx,', '[ebp+var_115]']
test ['ecx,', 'ecx']
jnz ['loc_5031']
movzx ['edx,', '[ebp+var_20E]']
neg ['edx']
sbb ['edx,', 'edx']
add ['edx,', '19h']
mov ['[ebp+var_2A8],', 'edx']
jmp ['short', 'loc_4FCB']
mov ['eax,', '[ebp+var_2A8]']
sub ['eax,', '1']
mov ['[ebp+var_2A8],', 'eax']
cmp ['[ebp+var_2A8],', '12h']
jbe ['short', 'loc_501E']
mov ['edx,', '1']
mov ['ecx,', '[ebp+var_2A8]']
shl ['edx,', 'cl']
push ['edx']
mov ['eax,', '[ebp+var_218]']
push ['eax']
call ['?GetBenchMemoryUsage@@YG_KII@Z']
add ['eax,', '800000h']
adc ['edx,', '0']
mov ['[ebp+var_434],', 'eax']
mov ['[ebp+var_430],', 'edx']
mov ['ecx,', '[ebp+var_430]']
cmp ['ecx,', '[ebp+var_18]']
ja ['short', 'loc_501C']
jb ['short', 'loc_501A']
mov ['edx,', '[ebp+var_434]']
cmp ['edx,', '[ebp+var_1C]']
ja ['short', 'loc_501C']
jmp ['short', 'loc_501E']
jmp ['short', 'loc_4FBC']
mov ['eax,', '1']
mov ['ecx,', '[ebp+var_2A8]']
shl ['eax,', 'cl']
mov ['[ebp+var_110],', 'eax']
mov ['ecx,', '[ebp+var_218]']
push ['ecx']
push ['offset', '$SG71669']
mov ['edx,', '[ebp+var_110]']
push ['edx']
mov ['eax,', '[ebp+var_218]']
push ['eax']
call ['?GetBenchMemoryUsage@@YG_KII@Z']
push ['edx']
push ['eax']
push ['offset', '$SG71670']
mov ['ecx,', '[ebp+var_2A4]']
push ['ecx']
call ['?PrintRequirements@@YGXAAUIBenchPrintCallback@@PBD_K1I@Z']
mov ['edx,', '[ebp+var_2A4]']
mov ['eax,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_2A4]']
mov ['edx,', '[eax+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['eax,', '[ebp+var_20E]']
test ['eax,', 'eax']
jz ['short', 'loc_509D']
mov ['[ebp+var_238],', '0Ch']
mov ['[ebp+var_20D],', '0']
jmp ['short', 'loc_50AE']
mov ['[ebp+var_238],', '4']
mov ['[ebp+var_20D],', '1']
mov ['cl,', '[ebp+var_20D]']
mov ['[ebp+var_23C],', 'cl']
mov ['[ebp+var_2A9],', '0']
mov ['dword', 'ptr', '[ebp+var_2B8],', '0']
mov ['dword', 'ptr', '[ebp+var_2B8+4],', '0']
movzx ['edx,', '[ebp+var_20E]']
test ['edx,', 'edx']
jz ['short', 'loc_50E7']
mov ['[ebp+var_2A9],', '1']
mov ['[ebp+Size],', '1Eh']
movzx ['eax,', '[ebp+var_2A9]']
test ['eax,', 'eax']
jz ['short', 'loc_510B']
mov ['ecx,', '[ebp+Size]']
add ['ecx,', '0Ch']
mov ['[ebp+Size],', 'ecx']
movzx ['edx,', '[ebp+var_20D]']
test ['edx,', 'edx']
jz ['short', 'loc_517B']
mov ['eax,', '[ebp+var_238]']
push ['eax']
mov ['ecx,', '[ebp+var_2A4]']
push ['ecx']
call ['?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z']
mov ['edx,', '[ebp+Size]']
push ['edx']
push ['offset', '$SG71679']
mov ['eax,', '[ebp+var_2A4]']
push ['eax']
call ['?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z']
mov ['esi,', 'esp']
mov ['ecx,', 'ds:_kSep']
push ['ecx']
mov ['edx,', '[ebp+var_2A4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_2A4]']
mov ['edx,', '[eax]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+Size]']
push ['eax']
push ['offset', '$SG71680']
mov ['ecx,', '[ebp+var_2A4]']
push ['ecx']
call ['?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z']
mov ['edx,', '[ebp+var_2A4]']
mov ['eax,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_2A4]']
mov ['edx,', '[eax+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['eax,', '[ebp+var_20E]']
test ['eax,', 'eax']
jz ['short', 'loc_51AE']
mov ['[ebp+var_438],', 'offset', '$SG71681']
jmp ['short', 'loc_51B8']
mov ['[ebp+var_438],', 'offset', '$SG71682']
mov ['ecx,', '[ebp+var_238]']
push ['ecx']
mov ['edx,', '[ebp+var_438]']
push ['edx']
mov ['eax,', '[ebp+var_2A4]']
push ['eax']
call ['?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z']
mov ['[ebp+var_2C4],', '0']
jmp ['short', 'loc_51ED']
mov ['ecx,', '[ebp+var_2C4]']
add ['ecx,', '1']
mov ['[ebp+var_2C4],', 'ecx']
cmp ['[ebp+var_2C4],', '2']
jge ['loc_52B4']
push ['0Ah']
push ['offset', '$SG71687']
mov ['edx,', '[ebp+var_2A4]']
push ['edx']
call ['?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z']
push ['6']
push ['offset', '$SG71688']
mov ['eax,', '[ebp+var_2A4]']
push ['eax']
call ['?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z']
push ['7']
push ['offset', '$SG71689']
mov ['ecx,', '[ebp+var_2A4]']
push ['ecx']
call ['?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z']
push ['7']
push ['offset', '$SG71690']
mov ['edx,', '[ebp+var_2A4]']
push ['edx']
call ['?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z']
movzx ['eax,', '[ebp+var_2A9]']
test ['eax,', 'eax']
jz ['short', 'loc_5277']
push ['6']
push ['offset', '$SG71692']
mov ['ecx,', '[ebp+var_2A4]']
push ['ecx']
call ['?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z']
push ['6']
push ['offset', '$SG71693']
mov ['edx,', '[ebp+var_2A4]']
push ['edx']
call ['?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z']
movzx ['eax,', '[ebp+var_20D]']
test ['eax,', 'eax']
jnz ['short', 'loc_5284']
jmp ['short', 'loc_52B4']
cmp ['[ebp+var_2C4],', '0']
jnz ['short', 'loc_52AF']
mov ['esi,', 'esp']
mov ['ecx,', 'ds:_kSep']
push ['ecx']
mov ['edx,', '[ebp+var_2A4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_2A4]']
mov ['edx,', '[eax]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_51DE']
mov ['eax,', '[ebp+var_2A4]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_2A4]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_238]']
push ['ecx']
mov ['edx,', '[ebp+var_2A4]']
push ['edx']
call ['?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z']
mov ['[ebp+var_2C4],', '0']
jmp ['short', 'loc_52FE']
mov ['eax,', '[ebp+var_2C4]']
add ['eax,', '1']
mov ['[ebp+var_2C4],', 'eax']
cmp ['[ebp+var_2C4],', '2']
jge ['loc_53C4']
push ['0Ah']
push ['offset', '$SG71699']
mov ['ecx,', '[ebp+var_2A4]']
push ['ecx']
call ['?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z']
push ['6']
push ['offset', '$SG71700']
mov ['edx,', '[ebp+var_2A4]']
push ['edx']
call ['?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z']
push ['7']
push ['offset', '$SG71701']
mov ['eax,', '[ebp+var_2A4]']
push ['eax']
call ['?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z']
push ['7']
push ['offset', '$SG71702']
mov ['ecx,', '[ebp+var_2A4]']
push ['ecx']
call ['?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z']
movzx ['edx,', '[ebp+var_2A9]']
test ['edx,', 'edx']
jz ['short', 'loc_5388']
push ['6']
push ['offset', '$SG71704']
mov ['eax,', '[ebp+var_2A4]']
push ['eax']
call ['?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z']
push ['6']
push ['offset', '$SG71705']
mov ['ecx,', '[ebp+var_2A4]']
push ['ecx']
call ['?PrintRight@@YGXAAUIBenchPrintCallback@@PBDI@Z']
movzx ['edx,', '[ebp+var_20D]']
test ['edx,', 'edx']
jnz ['short', 'loc_5395']
jmp ['short', 'loc_53C4']
cmp ['[ebp+var_2C4],', '0']
jnz ['short', 'loc_53BF']
mov ['esi,', 'esp']
mov ['eax,', 'ds:_kSep']
push ['eax']
mov ['ecx,', '[ebp+var_2A4]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_2A4]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_52EF']
mov ['ecx,', '[ebp+var_2A4]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_2A4]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_2A4]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_2A4]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['ecx,', '[ebp+var_20E]']
test ['ecx,', 'ecx']
jz ['loc_575B']
movzx ['edx,', '[ebp+var_115]']
test ['edx,', 'edx']
jnz ['short', 'loc_5420']
mov ['[ebp+var_110],', '1000000h']
mov ['[ebp+var_2C8],', '0']
jmp ['short', 'loc_543B']
mov ['eax,', '[ebp+var_2C8]']
add ['eax,', '1']
mov ['[ebp+var_2C8],', 'eax']
mov ['ecx,', '[ebp+var_2C8]']
cmp ['ecx,', '[ebp+arg_C]']
jnb ['loc_5756']
cmp ['[ebp+var_2C8],', '0']
jz ['short', 'loc_5469']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_2D4],', '3']
mov ['[ebp+var_2D0],', '0']
jmp ['short', 'loc_548E']
mov ['eax,', '[ebp+var_2D0]']
add ['eax,', '1']
mov ['[ebp+var_2D0],', 'eax']
cmp ['[ebp+var_2D0],', '3']
jge ['loc_5563']
push ['0Ch']
push ['offset', '$SG71722']
mov ['ecx,', '[ebp+var_2A4]']
push ['ecx']
call ['?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z']
lea ['edx,', '[ebp+var_2DC]']
push ['edx']
lea ['eax,', '[ebp+var_2B8]']
push ['eax']
cmp ['[ebp+var_2D0],', '2']
setz ['cl']
movzx ['edx,', 'cl']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_218]']
push ['ecx']
mov ['edx,', '[ebp+var_D4]']
push ['edx']
mov ['eax,', '[ebp+var_D8]']
push ['eax']
call ['?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z']
mov ['[ebp+var_2E4],', 'eax']
cmp ['[ebp+var_2E4],', '0']
jz ['short', 'loc_552C']
mov ['ecx,', '[ebp+var_2E4]']
mov ['[ebp+var_404],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_148]']
call ['??1AString@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_404]']
jmp ['loc_5D6B']
lea ['ecx,', '[ebp+var_29C]']
call ['?NewLine@CBenchCallbackToPrint@@QAEXXZ']
cmp ['[ebp+var_2D0],', '2']
jnz ['short', 'loc_555E']
lea ['edx,', '[ebp+var_D8]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_2B8+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_2B8]']
push ['ecx']
mov ['edx,', '[ebp+var_30]']
push ['edx']
call ['?SetComplexCommands@@YGXI_KAA_K@Z']
jmp ['loc_547F']
lea ['ecx,', '[ebp+var_29C]']
call ['?NewLine@CBenchCallbackToPrint@@QAEXXZ']
mov ['eax,', 'dword', 'ptr', '[ebp+var_2B8+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_2B8]']
push ['ecx']
push ['1']
lea ['ecx,', '[ebp+var_29C]']
call ['?SetFreq@CBenchCallbackToPrint@@UAEJ_N_K@Z']
lea ['edx,', '[ebp+var_29C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_110]']
push ['ecx']
movzx ['edx,', '[ebp+var_115]']
push ['edx']
mov ['eax,', '[ebp+var_218]']
push ['eax']
mov ['ecx,', '[ebp+var_D4]']
push ['ecx']
mov ['edx,', '[ebp+var_D8]']
push ['edx']
call ['?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z']
mov ['[ebp+var_2CC],', 'eax']
mov ['eax,', '[ebp+var_2CC]']
mov ['[ebp+var_2E8],', 'eax']
cmp ['[ebp+var_2E8],', '0']
jz ['short', 'loc_560D']
mov ['ecx,', '[ebp+var_2E8]']
mov ['[ebp+var_408],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_148]']
call ['??1AString@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_408]']
jmp ['loc_5D6B']
mov ['edx,', 'dword', 'ptr', '[ebp+var_2B8+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_2B8]']
push ['eax']
push ['1']
lea ['ecx,', '[ebp+var_284]']
push ['ecx']
lea ['edx,', '[ebp+var_29C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['20000h']
mov ['ecx,', '[ebp+var_218]']
push ['ecx']
mov ['edx,', '[ebp+var_D4]']
push ['edx']
mov ['eax,', '[ebp+var_D8]']
push ['eax']
call ['?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z']
mov ['[ebp+var_2CC],', 'eax']
mov ['ecx,', '[ebp+var_2CC]']
mov ['[ebp+var_2EC],', 'ecx']
cmp ['[ebp+var_2EC],', '0']
jz ['short', 'loc_569E']
mov ['edx,', '[ebp+var_2EC]']
mov ['[ebp+var_40C],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_148]']
call ['??1AString@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_40C]']
jmp ['loc_5D6B']
lea ['ecx,', '[ebp+var_29C]']
call ['?NewLine@CBenchCallbackToPrint@@QAEXXZ']
push ['0Ch']
push ['offset', '$SG71734']
mov ['eax,', '[ebp+var_2A4]']
push ['eax']
call ['?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_2B8]']
mov ['[ebp+var_304],', 'ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+var_2B8+4]']
mov ['[ebp+var_300],', 'edx']
lea ['eax,', '[ebp+var_2F4]']
push ['eax']
lea ['ecx,', '[ebp+var_304]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_218]']
push ['eax']
mov ['ecx,', '[ebp+var_D4]']
push ['ecx']
mov ['edx,', '[ebp+var_D8]']
push ['edx']
call ['?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z']
mov ['[ebp+var_30C],', 'eax']
cmp ['[ebp+var_30C],', '0']
jz ['short', 'loc_5746']
mov ['eax,', '[ebp+var_30C]']
mov ['[ebp+var_410],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_148]']
call ['??1AString@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_410]']
jmp ['loc_5D6B']
lea ['ecx,', '[ebp+var_29C]']
call ['?NewLine@CBenchCallbackToPrint@@QAEXXZ']
jmp ['loc_542C']
jmp ['loc_5B92']
mov ['[ebp+var_30D],', '1']
push ['offset', '$SG71743']
lea ['ecx,', '[ebp+var_148]']
call ['?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['loc_584D']
mov ['[ebp+var_314],', '0']
jmp ['short', 'loc_5798']
mov ['edx,', '[ebp+var_314]']
add ['edx,', '1']
mov ['[ebp+var_314],', 'edx']
cmp ['[ebp+var_314],', '11h']
jnb ['loc_584D']
mov ['eax,', '[ebp+var_314]']
imul ['eax,', '18h']
add ['eax,', 'offset', '_g_Bench']
mov ['[ebp+var_318],', 'eax']
mov ['ecx,', '[ebp+var_318]']
mov ['edx,', '[ecx+14h]']
push ['edx']
lea ['ecx,', '[ebp+var_328]']
call ['??0AString@@QAE@PBD@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '0Ah']
lea ['ecx,', '[ebp+var_148]']
call ['??BAString@@QBEPBDXZ']
push ['eax']
mov ['eax,', '[ebp+var_318]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
call ['?AreSameMethodNames@@YG_NPBD0@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_5839']
mov ['eax,', '[ebp+var_318]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+var_294],', 'ecx']
mov ['edx,', '[ebp+var_318]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+var_290],', 'eax']
mov ['ecx,', '[ebp+var_318]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_28C],', 'edx']
mov ['[ebp+var_30D],', '0']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_328]']
call ['??1AString@@QAE@XZ']
jmp ['short', 'loc_584D']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_328]']
call ['??1AString@@QAE@XZ']
jmp ['loc_5789']
movzx ['eax,', '[ebp+var_30D]']
test ['eax,', 'eax']
jz ['short', 'loc_5863']
lea ['ecx,', '[ebp+var_298]']
call ['?SetLzmaCompexity@CBenchProps@@QAEXXZ']
mov ['[ebp+var_68],', '0']
jmp ['short', 'loc_5875']
mov ['ecx,', '[ebp+var_68]']
add ['ecx,', '1']
mov ['[ebp+var_68],', 'ecx']
mov ['edx,', '[ebp+var_68]']
cmp ['edx,', '[ebp+arg_C]']
jnb ['loc_5B92']
mov ['[ebp+var_330],', '16h']
cmp ['[ebp+var_110],', '400000h']
sbb ['eax,', 'eax']
and ['eax,', '0FFFFFFFCh']
add ['eax,', '16h']
mov ['[ebp+var_334],', 'eax']
movzx ['ecx,', '[ebp+arg_10]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_58B5']
mov ['[ebp+var_334],', '1Fh']
mov ['edx,', '1']
mov ['ecx,', '[ebp+var_334]']
shl ['edx,', 'cl']
cmp ['edx,', '[ebp+var_110]']
jbe ['short', 'loc_58E4']
cmp ['[ebp+var_334],', '0']
jbe ['short', 'loc_58E4']
mov ['eax,', '[ebp+var_334]']
sub ['eax,', '1']
mov ['[ebp+var_334],', 'eax']
jmp ['short', 'loc_58B5']
jmp ['short', 'loc_58F5']
mov ['ecx,', '[ebp+var_334]']
add ['ecx,', '1']
mov ['[ebp+var_334],', 'ecx']
mov ['edx,', '1']
mov ['ecx,', '[ebp+var_334]']
shl ['edx,', 'cl']
cmp ['edx,', '[ebp+var_110]']
ja ['loc_5B8D']
lea ['eax,', '[ebp+var_348]']
push ['eax']
mov ['ecx,', '[ebp+var_334]']
push ['ecx']
call ['?ConvertUInt32ToString@@YGXIPAD@Z']
lea ['edx,', '[ebp+var_348]']
push ['edx']
call ['?MyStringLen@@YGIPBD@Z']
mov ['[ebp+var_350],', 'eax']
mov ['eax,', '[ebp+var_350]']
mov ['[ebp+eax+var_348],', '3Ah']
mov ['ecx,', '[ebp+var_350]']
add ['ecx,', '1']
mov ['[ebp+var_350],', 'ecx']
mov ['edx,', '[ebp+var_350]']
mov ['[ebp+edx+var_348],', '0']
push ['4']
lea ['eax,', '[ebp+var_348]']
push ['eax']
mov ['ecx,', '[ebp+var_2A4]']
push ['ecx']
call ['?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z']
mov ['edx,', '1']
mov ['ecx,', '[ebp+var_334]']
shl ['edx,', 'cl']
mov ['[ebp+var_240],', 'edx']
lea ['eax,', '[ebp+var_60]']
push ['eax']
lea ['ecx,', '[ebp+var_378]']
call ['??0COneMethodInfo@@QAE@ABV0@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '0Bh']
push ['offset', '$SG71772']
lea ['ecx,', '[ebp+var_36C]']
call ['??BAString@@QBEPBDXZ']
push ['eax']
call ['?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['loc_5A7D']
mov ['edx,', '[ebp+var_334]']
push ['edx']
lea ['ecx,', '[ebp+var_390]']
call ['??0CPropVariant@NCOM@NWindows@@QAE@I@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '0Ch']
push ['offset', '$SG71777']
lea ['ecx,', '[ebp+var_41C]']
call ['??0UString@@QAE@PB_W@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '0Dh']
lea ['eax,', '[ebp+var_390]']
push ['eax']
lea ['ecx,', '[ebp+var_41C]']
push ['ecx']
lea ['ecx,', '[ebp+var_378]']
call ['?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z']
mov ['dword', 'ptr', '[ebp+var_39C+4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0Ch']
lea ['ecx,', '[ebp+var_41C]']
call ['??1UString@@QAE@XZ']
cmp ['dword', 'ptr', '[ebp+var_39C+4],', '0']
jz ['short', 'loc_5A6E']
mov ['edx,', 'dword', 'ptr', '[ebp+var_39C+4]']
mov ['[ebp+var_420],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0Bh']
lea ['ecx,', '[ebp+var_390]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_378]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_148]']
call ['??1AString@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_420]']
jmp ['loc_5D6B']
mov ['byte', 'ptr', '[ebp+var_4],', '0Bh']
lea ['ecx,', '[ebp+var_390]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
mov ['eax,', '[ebp+var_240]']
mov ['dword', 'ptr', '[ebp+var_39C],', 'eax']
cmp ['dword', 'ptr', '[ebp+var_39C],', '40000h']
jb ['short', 'loc_5AA7']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_39C]']
add ['ecx,', '10000h']
mov ['dword', 'ptr', '[ebp+var_39C],', 'ecx']
lea ['edx,', '[ebp+var_298]']
push ['edx']
lea ['eax,', '[ebp+var_29C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['1Eh']
mov ['edx,', 'dword', 'ptr', '[ebp+var_39C]']
push ['edx']
lea ['eax,', '[ebp+var_378]']
push ['eax']
mov ['ecx,', '[ebp+var_218]']
push ['ecx']
push ['1']
mov ['edx,', '[ebp+var_D4]']
push ['edx']
mov ['eax,', '[ebp+var_D8]']
push ['eax']
call ['?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z']
mov ['[ebp+var_3A0],', 'eax']
mov ['ecx,', '[ebp+var_2A4]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_2A4]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_3A0]']
mov ['[ebp+var_3A4],', 'ecx']
cmp ['[ebp+var_3A4],', '0']
jz ['short', 'loc_5B60']
mov ['edx,', '[ebp+var_3A4]']
mov ['[ebp+var_424],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_378]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_148]']
call ['??1AString@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_424]']
jmp ['loc_5D6B']
movzx ['eax,', '[ebp+arg_10]']
test ['eax,', 'eax']
jnz ['short', 'loc_5B79']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_378]']
call ['??1COneMethodInfo@@QAE@XZ']
jmp ['short', 'loc_5B8D']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_378]']
call ['??1COneMethodInfo@@QAE@XZ']
jmp ['loc_58E6']
jmp ['loc_586C']
mov ['ecx,', '[ebp+var_238]']
add ['ecx,', '[ebp+Size]']
push ['ecx']
push ['2Dh']
mov ['edx,', '[ebp+var_2A4]']
push ['edx']
call ['?PrintChars@@YGXAAUIBenchPrintCallback@@DI@Z']
movzx ['eax,', '[ebp+var_20D]']
test ['eax,', 'eax']
jz ['short', 'loc_5BEF']
mov ['esi,', 'esp']
mov ['ecx,', 'ds:_kSep']
push ['ecx']
mov ['edx,', '[ebp+var_2A4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_2A4]']
mov ['edx,', '[eax]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+Size]']
push ['eax']
push ['2Dh']
mov ['ecx,', '[ebp+var_2A4]']
push ['ecx']
call ['?PrintChars@@YGXAAUIBenchPrintCallback@@DI@Z']
mov ['edx,', '[ebp+var_2A4]']
mov ['eax,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_2A4]']
mov ['edx,', '[eax+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
movzx ['eax,', '[ebp+var_20D]']
test ['eax,', 'eax']
jz ['loc_5CC2']
mov ['ecx,', '[ebp+var_238]']
push ['ecx']
push ['offset', '$SG71789']
mov ['edx,', '[ebp+var_2A4]']
push ['edx']
call ['?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z']
lea ['eax,', '[ebp+var_284]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_2B8+4]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+var_2B8]']
push ['edx']
movzx ['eax,', '[ebp+var_2A9]']
push ['eax']
mov ['ecx,', '[ebp+var_2A4]']
push ['ecx']
call ['?PrintTotals@@YGXAAUIBenchPrintCallback@@_N_KABUCTotalBenchRes@@@Z']
mov ['esi,', 'esp']
mov ['edx,', 'ds:_kSep']
push ['edx']
mov ['eax,', '[ebp+var_2A4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_2A4]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
lea ['ecx,', '[ebp+var_264]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+var_2B8+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_2B8]']
push ['eax']
movzx ['ecx,', '[ebp+var_2A9]']
push ['ecx']
mov ['edx,', '[ebp+var_2A4]']
push ['edx']
call ['?PrintTotals@@YGXAAUIBenchPrintCallback@@_N_KABUCTotalBenchRes@@@Z']
mov ['eax,', '[ebp+var_2A4]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_2A4]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_238]']
push ['ecx']
push ['offset', '$SG71790']
mov ['edx,', '[ebp+var_2A4]']
push ['edx']
call ['?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z']
lea ['eax,', '[ebp+var_264]']
push ['eax']
lea ['ecx,', '[ebp+var_284]']
push ['ecx']
lea ['ecx,', '[ebp+var_3C8]']
call ['?SetSum@CTotalBenchRes@@QAEXABU1@0@Z']
lea ['edx,', '[ebp+var_3C8]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_2B8+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_2B8]']
push ['ecx']
movzx ['edx,', '[ebp+var_2A9]']
push ['edx']
mov ['eax,', '[ebp+var_2A4]']
push ['eax']
call ['?PrintTotals@@YGXAAUIBenchPrintCallback@@_N_KABUCTotalBenchRes@@@Z']
mov ['ecx,', '[ebp+var_2A4]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_2A4]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_4EA3']
mov ['[ebp+var_428],', '0']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_148]']
call ['??1AString@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_60]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_428]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN187']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '438h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
?SetComplexCommands@@YGXI_KAA_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['dword', 'ptr', '[eax+4],', '4']
mov ['[ebp+var_8],', '1C9C380h']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_10],', '0A817C800h']
mov ['[ebp+var_C],', '4']
cmp ['[ebp+arg_8],', '0']
ja ['short', 'loc_6032']
jb ['short', 'loc_6024']
cmp ['[ebp+arg_4],', '1C9C380h']
jnb ['short', 'loc_6032']
mov ['[ebp+arg_4],', '1C9C380h']
mov ['[ebp+arg_8],', '0']
cmp ['[ebp+arg_8],', '4']
ja ['short', 'loc_607C']
jb ['short', 'loc_6043']
cmp ['[ebp+arg_4],', '0A817C800h']
jnb ['short', 'loc_607C']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_6067']
mov ['ecx,', '[ebp+arg_0]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
push ['edx']
push ['ecx']
call ['__allmul']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
jmp ['short', 'loc_607C']
mov ['eax,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['cl,', '2']
call ['__aullshr']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1F8h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_204]']
mov ['ecx,', '7Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
lea ['ecx,', '[ebp+var_34]']
call ['??0COneMethodInfo@@QAE@ABV0@@Z']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_50]']
push ['ecx']
lea ['edx,', '[ebp+var_44]']
push ['edx']
lea ['eax,', '[ebp+var_28]']
push ['eax']
call ['?FindMethod@@YG_NABVAString@@AA_KAAI@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_611B']
mov ['[ebp+var_1AC],', '80004001h']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1AC]']
jmp ['loc_6FC8']
cmp ['[ebp+var_50],', '1']
jz ['short', 'loc_6145']
mov ['[ebp+var_1B0],', '80070057h']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1B0]']
jmp ['loc_6FC8']
mov ['[ebp+var_58],', '1']
mov ['[ebp+var_5C],', '1']
mov ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_58],', 'edx']
movzx ['eax,', '[ebp+arg_8]']
test ['eax,', 'eax']
jz ['short', 'loc_61B2']
cmp ['dword', 'ptr', '[ebp+var_44],', '30101h']
jnz ['short', 'loc_61B2']
cmp ['dword', 'ptr', '[ebp+var_44+4],', '0']
jnz ['short', 'loc_61B2']
lea ['ecx,', '[ebp+var_61]']
push ['ecx']
lea ['ecx,', '[ebp+var_34]']
call ['?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z']
mov ['[ebp+var_6C],', 'eax']
movzx ['edx,', '[ebp+var_61]']
test ['edx,', 'edx']
jnz ['short', 'loc_6197']
cmp ['[ebp+arg_C],', '1']
jnz ['short', 'loc_6197']
push ['1']
lea ['ecx,', '[ebp+var_34]']
call ['?AddProp_NumThreads@CMethodProps@@QAEXI@Z']
cmp ['[ebp+arg_C],', '1']
jbe ['short', 'loc_61B2']
cmp ['[ebp+var_6C],', '1']
jbe ['short', 'loc_61B2']
mov ['eax,', '[ebp+arg_C]']
shr ['eax,', '1']
mov ['[ebp+var_58],', 'eax']
mov ['[ebp+var_5C],', '2']
mov ['ecx,', '[ebp+var_58]']
push ['ecx']
lea ['ecx,', '[ebp+var_74]']
call ['??0CBenchEncoders@@QAE@I@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_74]']
mov ['[ebp+var_7C],', 'edx']
mov ['[ebp+var_80],', '0']
jmp ['short', 'loc_61DA']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
mov ['ecx,', '[ebp+var_80]']
cmp ['ecx,', '[ebp+var_58]']
jnb ['loc_64FE']
mov ['edx,', '[ebp+var_80]']
imul ['edx,', '118h']
add ['edx,', '[ebp+var_7C]']
mov ['[ebp+var_84],', 'edx']
mov ['eax,', '[ebp+var_80]']
neg ['eax']
sbb ['eax,', 'eax']
not ['eax']
and ['eax,', '[ebp+arg_20]']
mov ['ecx,', '[ebp+var_84]']
mov ['[ecx+0B4h],', 'eax']
mov ['edx,', '[ebp+var_84]']
mov ['eax,', '[ebp+arg_1C]']
mov ['[edx+0B8h],', 'eax']
lea ['ecx,', '[ebp+var_98]']
call ['??0CCreatedCoder@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_98]']
push ['ecx']
mov ['edx,', '[ebp+var_84]']
add ['edx,', '10h']
push ['edx']
push ['1']
mov ['eax,', 'dword', 'ptr', '[ebp+var_44+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_44]']
push ['ecx']
call ['?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z']
mov ['[ebp+var_A0],', 'eax']
cmp ['[ebp+var_A0],', '0']
jz ['short', 'loc_629E']
mov ['edx,', '[ebp+var_A0]']
mov ['[ebp+var_1B4],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_98]']
call ['??1CCreatedCoder@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1B4]']
jmp ['loc_6FC8']
lea ['eax,', '[ebp+var_98]']
push ['eax']
mov ['ecx,', '[ebp+var_84]']
add ['ecx,', '0Ch']
call ['??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z']
mov ['ecx,', '[ebp+var_84]']
add ['ecx,', '0Ch']
call ['??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_631C']
mov ['ecx,', '[ebp+var_84]']
add ['ecx,', '10h']
call ['??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_631C']
mov ['[ebp+var_1B8],', '80004001h']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_98]']
call ['??1CCreatedCoder@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1B8]']
jmp ['loc_6FC8']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_98]']
call ['??1CCreatedCoder@@QAE@XZ']
mov ['eax,', '[ebp+arg_24]']
mov ['ecx,', '1Eh']
cmp ['ecx,', '[eax+4]']
sbb ['edx,', 'edx']
neg ['edx']
mov ['eax,', '[ebp+var_84]']
mov ['[eax+74h],', 'dl']
mov ['ecx,', '[ebp+arg_24]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+arg_24]']
add ['edx,', '[eax+0Ch]']
mov ['ecx,', '1Eh']
cmp ['ecx,', 'edx']
sbb ['edx,', 'edx']
neg ['edx']
mov ['eax,', '[ebp+var_84]']
mov ['[eax+75h],', 'dl']
push ['10h']
push ['0']
mov ['ecx,', '[ebp+var_84]']
add ['ecx,', '54h']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
push ['20h']
push ['0']
mov ['edx,', '[ebp+var_84]']
add ['edx,', '34h']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
push ['10h']
push ['0']
mov ['eax,', '[ebp+var_84]']
add ['eax,', '64h']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['[ebp+var_A4],', '0']
jmp ['short', 'loc_63C0']
mov ['ecx,', '[ebp+var_A4]']
add ['ecx,', '1']
mov ['[ebp+var_A4],', 'ecx']
mov ['edx,', '[ebp+var_A4]']
cmp ['edx,', '[ebp+var_5C]']
jnb ['loc_64F9']
lea ['ecx,', '[ebp+var_B8]']
call ['??0CCreatedCoder@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['eax,', '[ebp+var_A4]']
mov ['ecx,', '[ebp+var_84]']
lea ['edx,', '[ecx+eax*4+98h]']
mov ['[ebp+var_C0],', 'edx']
lea ['eax,', '[ebp+var_B8]']
push ['eax']
mov ['ecx,', '[ebp+var_84]']
add ['ecx,', '0A0h']
push ['ecx']
push ['0']
mov ['edx,', 'dword', 'ptr', '[ebp+var_44+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_44]']
push ['eax']
call ['?CreateCoder@@YGJ_K_NAAV?$CMyComPtr@UICompressFilter@@@@AAUCCreatedCoder@@@Z']
mov ['[ebp+var_C4],', 'eax']
cmp ['[ebp+var_C4],', '0']
jz ['short', 'loc_646A']
mov ['ecx,', '[ebp+var_C4]']
mov ['[ebp+var_1BC],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_B8]']
call ['??1CCreatedCoder@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1BC]']
jmp ['loc_6FC8']
lea ['edx,', '[ebp+var_B8]']
push ['edx']
mov ['ecx,', '[ebp+var_C0]']
call ['??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z']
mov ['ecx,', '[ebp+var_84]']
add ['ecx,', '0A0h']
call ['??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_64E5']
mov ['ecx,', '[ebp+var_C0]']
call ['??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_64E5']
mov ['[ebp+var_1C0],', '80004001h']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_B8]']
call ['??1CCreatedCoder@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1C0]']
jmp ['loc_6FC8']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_B8]']
call ['??1CCreatedCoder@@QAE@XZ']
jmp ['loc_63B1']
jmp ['loc_61D1']
lea ['ecx,', '[ebp+var_D0]']
call ['??0CBaseRandomGenerator@@QAE@XZ']
lea ['ecx,', '[ebp+var_D0]']
call ['?Init@CBaseRandomGenerator@@QAEXXZ']
mov ['[ebp+var_80],', '0']
jmp ['short', 'loc_6526']
mov ['edx,', '[ebp+var_80]']
add ['edx,', '1']
mov ['[ebp+var_80],', 'edx']
mov ['eax,', '[ebp+var_80]']
cmp ['eax,', '[ebp+var_58]']
jnb ['loc_65D2']
mov ['ecx,', '[ebp+var_80]']
imul ['ecx,', '118h']
add ['ecx,', '[ebp+var_7C]']
mov ['[ebp+var_D8],', 'ecx']
lea ['edx,', '[ebp+var_34]']
push ['edx']
mov ['ecx,', '[ebp+var_D8]']
add ['ecx,', '0ECh']
call ['??4COneMethodInfo@@QAEAAV0@ABV0@@Z']
mov ['eax,', '[ebp+var_D8]']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_14]']
mov ['[eax+110h],', 'ecx']
lea ['edx,', '[ebp+var_D0]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_14+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_14]']
push ['ecx']
lea ['edx,', '[ebp+var_34]']
push ['edx']
mov ['ecx,', '[ebp+var_80]']
imul ['ecx,', '118h']
add ['ecx,', '[ebp+var_7C]']
call ['?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z']
mov ['[ebp+var_DC],', 'eax']
cmp ['[ebp+var_DC],', '0']
jz ['short', 'loc_65CD']
mov ['eax,', '[ebp+var_DC]']
mov ['[ebp+var_1C4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1C4]']
jmp ['loc_6FC8']
jmp ['loc_651D']
lea ['ecx,', '[ebp+var_100]']
call ['??0CBenchProgressStatus@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['[ebp+var_E8],', '0']
mov ['[ebp+var_E4],', '1']
mov ['[ebp+var_80],', '0']
jmp ['short', 'loc_6604']
mov ['ecx,', '[ebp+var_80]']
add ['ecx,', '1']
mov ['[ebp+var_80],', 'ecx']
mov ['edx,', '[ebp+var_80]']
cmp ['edx,', '[ebp+var_58]']
jnb ['loc_682B']
mov ['eax,', '[ebp+var_80]']
imul ['eax,', '118h']
add ['eax,', '[ebp+var_7C]']
mov ['[ebp+var_108],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_14]']
xor ['ecx,', 'ecx']
push ['ecx']
push ['eax']
mov ['ecx,', '[ebp+arg_24]']
call ['?GeComprCommands@CBenchProps@@QAE_K_K@Z']
push ['edx']
push ['eax']
call ['?GetNumIterations@@YG_K_K0@Z']
mov ['ecx,', '[ebp+var_108]']
mov ['[ecx+28h],', 'eax']
mov ['[ecx+2Ch],', 'edx']
mov ['[ebp+var_10C],', '0']
jmp ['short', 'loc_6667']
mov ['edx,', '[ebp+var_10C]']
add ['edx,', '1']
mov ['[ebp+var_10C],', 'edx']
cmp ['[ebp+var_10C],', '2']
jge ['loc_6710']
push ['58h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_1CC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
cmp ['[ebp+var_1CC],', '0']
jz ['short', 'loc_66A4']
mov ['ecx,', '[ebp+var_1CC]']
call ['??0CBenchProgressInfo@@QAE@XZ']
mov ['[ebp+var_1FC],', 'eax']
jmp ['short', 'loc_66AE']
mov ['[ebp+var_1FC],', '0']
mov ['eax,', '[ebp+var_1FC]']
mov ['[ebp+var_1C8],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['ecx,', '[ebp+var_1C8]']
mov ['[ebp+var_110],', 'ecx']
mov ['edx,', '[ebp+var_10C]']
mov ['eax,', '[ebp+var_108]']
mov ['ecx,', '[ebp+var_110]']
mov ['[eax+edx*4+14h],', 'ecx']
mov ['edx,', '[ebp+var_110]']
push ['edx']
mov ['eax,', '[ebp+var_10C]']
mov ['ecx,', '[ebp+var_108]']
lea ['ecx,', '[ecx+eax*4+1Ch]']
call ['??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z']
mov ['edx,', '[ebp+var_110]']
lea ['eax,', '[ebp+var_100]']
mov ['[edx+48h],', 'eax']
jmp ['loc_6658']
cmp ['[ebp+var_80],', '0']
jnz ['short', 'loc_6750']
mov ['ecx,', '[ebp+var_108]']
mov ['edx,', '[ecx+14h]']
mov ['[ebp+var_114],', 'edx']
mov ['eax,', '[ebp+var_114]']
mov ['ecx,', '[ebp+arg_20]']
mov ['[eax+50h],', 'ecx']
mov ['edx,', '[ebp+var_58]']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_114]']
mov ['[ecx+38h],', 'edx']
mov ['[ecx+3Ch],', 'eax']
mov ['ecx,', '[ebp+var_114]']
add ['ecx,', '8']
call ['?SetStartTime@CBenchInfoCalc@@QAEXXZ']
cmp ['[ebp+var_58],', '1']
jbe ['short', 'loc_67CB']
mov ['edx,', '[ebp+var_80]']
shl ['edx,', '4']
imul ['edx,', '15h']
and ['edx,', '7FFh']
mov ['eax,', '[ebp+var_108]']
mov ['[eax+30h],', 'edx']
mov ['ecx,', '[ebp+var_108]']
call ['?CreateEncoderThread@CEncoderInfo@@QAEJXZ']
mov ['[ebp+var_118],', 'eax']
cmp ['[ebp+var_118],', '0']
jz ['short', 'loc_67C9']
mov ['ecx,', '[ebp+var_118]']
mov ['[ebp+var_1D0],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_100]']
call ['??1CBenchProgressStatus@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1D0]']
jmp ['loc_6FC8']
jmp ['short', 'loc_6826']
mov ['ecx,', '[ebp+var_108]']
call ['?Encode@CEncoderInfo@@QAEJXZ']
mov ['[ebp+var_11C],', 'eax']
cmp ['[ebp+var_11C],', '0']
jz ['short', 'loc_6826']
mov ['edx,', '[ebp+var_11C]']
mov ['[ebp+var_1D4],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_100]']
call ['??1CBenchProgressStatus@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1D4]']
jmp ['loc_6FC8']
jmp ['loc_65FB']
cmp ['[ebp+var_58],', '1']
jbe ['short', 'loc_685E']
mov ['[ebp+var_80],', '0']
jmp ['short', 'loc_6843']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
mov ['ecx,', '[ebp+var_80]']
cmp ['ecx,', '[ebp+var_58]']
jnb ['short', 'loc_685E']
mov ['ecx,', '[ebp+var_80]']
imul ['ecx,', '118h']
add ['ecx,', '[ebp+var_7C]']
call ['?Wait@CThread@NWindows@@QAEIXZ']
jmp ['short', 'loc_683A']
mov ['edx,', '[ebp+var_E8]']
mov ['[ebp+var_120],', 'edx']
cmp ['[ebp+var_120],', '0']
jz ['short', 'loc_68B4']
mov ['eax,', '[ebp+var_120]']
mov ['[ebp+var_1D8],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_100]']
call ['??1CBenchProgressStatus@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1D8]']
jmp ['loc_6FC8']
lea ['ecx,', '[ebp+var_15C]']
call ['??0CBenchInfo@@QAE@XZ']
lea ['ecx,', '[ebp+var_15C]']
push ['ecx']
mov ['edx,', '[ebp+var_7C]']
mov ['ecx,', '[edx+14h]']
add ['ecx,', '8']
call ['?SetFinishTime@CBenchInfoCalc@@QAEXAAUCBenchInfo@@@Z']
mov ['[ebp+var_13C],', '0']
mov ['[ebp+var_138],', '0']
mov ['[ebp+var_134],', '0']
mov ['[ebp+var_130],', '0']
mov ['eax,', '[ebp+var_7C]']
mov ['ecx,', '[eax+28h]']
mov ['[ebp+var_12C],', 'ecx']
mov ['edx,', '[eax+2Ch]']
mov ['[ebp+var_128],', 'edx']
mov ['[ebp+var_80],', '0']
jmp ['short', 'loc_6923']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
mov ['ecx,', '[ebp+var_80]']
cmp ['ecx,', '[ebp+var_58]']
jnb ['short', 'loc_698B']
mov ['edx,', '[ebp+var_80]']
imul ['edx,', '118h']
add ['edx,', '[ebp+var_7C]']
mov ['[ebp+var_164],', 'edx']
mov ['eax,', '[ebp+var_164]']
mov ['ecx,', '[eax+0C0h]']
xor ['edx,', 'edx']
add ['ecx,', '[ebp+var_13C]']
adc ['edx,', '[ebp+var_138]']
mov ['[ebp+var_13C],', 'ecx']
mov ['[ebp+var_138],', 'edx']
mov ['eax,', '[ebp+var_164]']
mov ['ecx,', '[eax+0C4h]']
xor ['edx,', 'edx']
add ['ecx,', '[ebp+var_134]']
adc ['edx,', '[ebp+var_130]']
mov ['[ebp+var_134],', 'ecx']
mov ['[ebp+var_130],', 'edx']
jmp ['short', 'loc_691A']
mov ['esi,', 'esp']
push ['1']
lea ['eax,', '[ebp+var_15C]']
push ['eax']
mov ['ecx,', '[ebp+arg_20]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_20]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_168],', 'eax']
cmp ['[ebp+var_168],', '0']
jz ['short', 'loc_69FA']
mov ['ecx,', '[ebp+var_168]']
mov ['[ebp+var_1DC],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_100]']
call ['??1CBenchProgressStatus@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1DC]']
jmp ['loc_6FC8']
mov ['[ebp+var_E8],', '0']
mov ['[ebp+var_E4],', '0']
mov ['edx,', '[ebp+var_58]']
imul ['edx,', '[ebp+var_5C]']
mov ['[ebp+var_16C],', 'edx']
mov ['[ebp+var_80],', '0']
jmp ['short', 'loc_6A2A']
mov ['eax,', '[ebp+var_80]']
add ['eax,', '1']
mov ['[ebp+var_80],', 'eax']
mov ['ecx,', '[ebp+var_80]']
cmp ['ecx,', '[ebp+var_58]']
jnb ['loc_6C76']
mov ['edx,', '[ebp+var_80]']
imul ['edx,', '118h']
add ['edx,', '[ebp+var_7C]']
mov ['[ebp+var_170],', 'edx']
cmp ['[ebp+var_80],', '0']
jnz ['loc_6AD4']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_170]']
mov ['eax,', '[edx+0C0h]']
xor ['ecx,', 'ecx']
push ['ecx']
push ['eax']
mov ['edx,', '[ebp+var_170]']
mov ['eax,', '[edx+0C4h]']
xor ['ecx,', 'ecx']
push ['ecx']
push ['eax']
mov ['ecx,', '[ebp+arg_24]']
call ['?GeDecomprCommands@CBenchProps@@QAE_K_K0@Z']
push ['edx']
push ['eax']
call ['?GetNumIterations@@YG_K_K0@Z']
mov ['ecx,', '[ebp+var_170]']
mov ['[ecx+28h],', 'eax']
mov ['[ecx+2Ch],', 'edx']
mov ['edx,', '[ebp+var_170]']
mov ['eax,', '[edx+14h]']
mov ['[ebp+var_174],', 'eax']
mov ['ecx,', '[ebp+var_174]']
mov ['edx,', '[ebp+arg_20]']
mov ['[ecx+50h],', 'edx']
mov ['eax,', '[ebp+var_16C]']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+var_174]']
mov ['[edx+38h],', 'eax']
mov ['[edx+3Ch],', 'ecx']
mov ['ecx,', '[ebp+var_174]']
add ['ecx,', '8']
call ['?SetStartTime@CBenchInfoCalc@@QAEXXZ']
jmp ['short', 'loc_6AE9']
mov ['eax,', '[ebp+var_170]']
mov ['ecx,', '[ebp+var_7C]']
mov ['edx,', '[ecx+28h]']
mov ['[eax+28h],', 'edx']
mov ['ecx,', '[ecx+2Ch]']
mov ['[eax+2Ch],', 'ecx']
lea ['ecx,', '[ebp+var_34]']
call ['?Get_NumThreads@CMethodProps@@QBEHXZ']
mov ['[ebp+var_178],', 'eax']
cmp ['[ebp+var_178],', '0']
jg ['short', 'loc_6B0C']
mov ['[ebp+var_200],', '1']
jmp ['short', 'loc_6B18']
mov ['edx,', '[ebp+var_178]']
mov ['[ebp+var_200],', 'edx']
mov ['eax,', '[ebp+var_170]']
mov ['ecx,', '[ebp+var_200]']
mov ['[eax+8],', 'ecx']
cmp ['[ebp+var_16C],', '1']
jbe ['loc_6C14']
mov ['[ebp+var_17C],', '0']
jmp ['short', 'loc_6B4F']
mov ['edx,', '[ebp+var_17C]']
add ['edx,', '1']
mov ['[ebp+var_17C],', 'edx']
mov ['eax,', '[ebp+var_17C]']
cmp ['eax,', '[ebp+var_5C]']
jnb ['loc_6C12']
cmp ['[ebp+var_80],', '0']
jnz ['short', 'loc_6B76']
cmp ['[ebp+var_17C],', '0']
jnz ['short', 'loc_6B76']
mov ['[ebp+var_201],', '1']
jmp ['short', 'loc_6B7D']
mov ['[ebp+var_201],', '0']
mov ['ecx,', '[ebp+var_80]']
imul ['ecx,', '[ebp+var_5C]']
add ['ecx,', '[ebp+var_17C]']
shl ['ecx,', '4']
imul ['ecx,', '15h']
and ['ecx,', '7FFh']
push ['ecx']
movzx ['edx,', '[ebp+var_201]']
push ['edx']
mov ['eax,', '[ebp+var_17C]']
push ['eax']
mov ['ecx,', '[ebp+var_170]']
call ['?CreateDecoderThread@CEncoderInfo@@QAEJI_NI@Z']
mov ['[ebp+var_180],', 'eax']
mov ['ecx,', '[ebp+var_180]']
mov ['[ebp+var_184],', 'ecx']
cmp ['[ebp+var_184],', '0']
jz ['short', 'loc_6C0D']
mov ['edx,', '[ebp+var_184]']
mov ['[ebp+var_1E0],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_100]']
call ['??1CBenchProgressStatus@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1E0]']
jmp ['loc_6FC8']
jmp ['loc_6B40']
jmp ['short', 'loc_6C71']
push ['0']
mov ['ecx,', '[ebp+var_170]']
call ['?Decode@CEncoderInfo@@QAEJI@Z']
mov ['[ebp+var_188],', 'eax']
cmp ['[ebp+var_188],', '0']
jz ['short', 'loc_6C71']
mov ['eax,', '[ebp+var_188]']
mov ['[ebp+var_1E4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_100]']
call ['??1CBenchProgressStatus@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1E4]']
jmp ['loc_6FC8']
jmp ['loc_6A21']
mov ['[ebp+var_18C],', '0']
cmp ['[ebp+var_16C],', '1']
jbe ['loc_6D2D']
mov ['[ebp+var_80],', '0']
jmp ['short', 'loc_6C9F']
mov ['ecx,', '[ebp+var_80]']
add ['ecx,', '1']
mov ['[ebp+var_80],', 'ecx']
mov ['edx,', '[ebp+var_80]']
cmp ['edx,', '[ebp+var_58]']
jnb ['loc_6D2D']
mov ['[ebp+var_190],', '0']
jmp ['short', 'loc_6CC6']
mov ['eax,', '[ebp+var_190]']
add ['eax,', '1']
mov ['[ebp+var_190],', 'eax']
mov ['ecx,', '[ebp+var_190]']
cmp ['ecx,', '[ebp+var_5C]']
jnb ['short', 'loc_6D28']
mov ['edx,', '[ebp+var_80]']
imul ['edx,', '118h']
add ['edx,', '[ebp+var_7C]']
mov ['[ebp+var_194],', 'edx']
mov ['eax,', '[ebp+var_190]']
mov ['ecx,', '[ebp+var_194]']
lea ['ecx,', '[ecx+eax*4]']
call ['?Wait@CThread@NWindows@@QAEIXZ']
mov ['edx,', '[ebp+var_190]']
mov ['eax,', '[ebp+var_194]']
cmp ['dword', 'ptr', '[eax+edx*4+0A4h],', '0']
jz ['short', 'loc_6D26']
mov ['ecx,', '[ebp+var_190]']
mov ['edx,', '[ebp+var_194]']
mov ['eax,', '[edx+ecx*4+0A4h]']
mov ['[ebp+var_18C],', 'eax']
jmp ['short', 'loc_6CB7']
jmp ['loc_6C96']
mov ['ecx,', '[ebp+var_18C]']
mov ['[ebp+var_198],', 'ecx']
cmp ['[ebp+var_198],', '0']
jz ['short', 'loc_6D83']
mov ['edx,', '[ebp+var_198]']
mov ['[ebp+var_1E8],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_100]']
call ['??1CBenchProgressStatus@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1E8]']
jmp ['loc_6FC8']
mov ['eax,', '[ebp+var_E8]']
mov ['[ebp+var_19C],', 'eax']
cmp ['[ebp+var_19C],', '0']
jz ['short', 'loc_6DD9']
mov ['ecx,', '[ebp+var_19C]']
mov ['[ebp+var_1EC],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_100]']
call ['??1CBenchProgressStatus@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1EC]']
jmp ['loc_6FC8']
lea ['edx,', '[ebp+var_15C]']
push ['edx']
mov ['eax,', '[ebp+var_7C]']
mov ['ecx,', '[eax+14h]']
add ['ecx,', '8']
call ['?SetFinishTime@CBenchInfoCalc@@QAEXAAUCBenchInfo@@@Z']
mov ['[ebp+var_13C],', '0']
mov ['[ebp+var_138],', '0']
mov ['[ebp+var_134],', '0']
mov ['[ebp+var_130],', '0']
mov ['ecx,', '[ebp+var_5C]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_7C]']
mov ['esi,', '[eax+2Ch]']
push ['esi']
mov ['eax,', '[eax+28h]']
push ['eax']
push ['edx']
push ['ecx']
call ['__allmul']
mov ['[ebp+var_12C],', 'eax']
mov ['[ebp+var_128],', 'edx']
mov ['[ebp+var_80],', '0']
jmp ['short', 'loc_6E4B']
mov ['ecx,', '[ebp+var_80]']
add ['ecx,', '1']
mov ['[ebp+var_80],', 'ecx']
mov ['edx,', '[ebp+var_80]']
cmp ['edx,', '[ebp+var_58]']
jnb ['short', 'loc_6EB3']
mov ['eax,', '[ebp+var_80]']
imul ['eax,', '118h']
add ['eax,', '[ebp+var_7C]']
mov ['[ebp+var_1A0],', 'eax']
mov ['ecx,', '[ebp+var_1A0]']
mov ['edx,', '[ecx+0C0h]']
xor ['eax,', 'eax']
add ['edx,', '[ebp+var_13C]']
adc ['eax,', '[ebp+var_138]']
mov ['[ebp+var_13C],', 'edx']
mov ['[ebp+var_138],', 'eax']
mov ['ecx,', '[ebp+var_1A0]']
mov ['edx,', '[ecx+0C4h]']
xor ['eax,', 'eax']
add ['edx,', '[ebp+var_134]']
adc ['eax,', '[ebp+var_130]']
mov ['[ebp+var_134],', 'edx']
mov ['[ebp+var_130],', 'eax']
jmp ['short', 'loc_6E42']
mov ['esi,', 'esp']
push ['0']
lea ['ecx,', '[ebp+var_15C]']
push ['ecx']
mov ['edx,', '[ebp+arg_20]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_20]']
mov ['edx,', '[eax+8]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1A4],', 'eax']
cmp ['[ebp+var_1A4],', '0']
jz ['short', 'loc_6F22']
mov ['eax,', '[ebp+var_1A4]']
mov ['[ebp+var_1F0],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_100]']
call ['??1CBenchProgressStatus@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1F0]']
jmp ['loc_6FC8']
mov ['esi,', 'esp']
push ['1']
lea ['ecx,', '[ebp+var_15C]']
push ['ecx']
mov ['edx,', '[ebp+arg_20]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_20]']
mov ['edx,', '[eax+8]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1A8],', 'eax']
cmp ['[ebp+var_1A8],', '0']
jz ['short', 'loc_6F8E']
mov ['eax,', '[ebp+var_1A8]']
mov ['[ebp+var_1F4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_100]']
call ['??1CBenchProgressStatus@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1F4]']
jmp ['short', 'loc_6FC8']
mov ['[ebp+var_1F8],', '0']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_100]']
call ['??1CBenchProgressStatus@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_74]']
call ['??1CBenchEncoders@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_34]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1F8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN93']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '204h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['28h']
endp
?GetNumIterations@@YG_K_K0@Z proc near  
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
ja ['short', 'loc_7103']
jb ['short', 'loc_70F5']
cmp ['[ebp+arg_0],', '10h']
jnb ['short', 'loc_7103']
mov ['[ebp+arg_0],', '10h']
mov ['[ebp+arg_4],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['__aulldiv']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'edx']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '[ebp+var_4]']
jnz ['short', 'loc_7136']
mov ['[ebp+var_10],', '1']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_7142']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_C]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_CountCpuFreq@12 proc near              
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_717D']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['loc_760E']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['ecx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
xor ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_0],', 'eax']
jmp ['loc_7174']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?PrintTotals@@YGXAAUIBenchPrintCallback@@_N_KABUCTotalBenchRes@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['0Ah']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?PrintSpaces@@YGXAAUIBenchPrintCallback@@I@Z']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ecx+4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_8]']
or ['ecx,', '[ebp+var_4]']
jnz ['short', 'loc_7663']
mov ['[ebp+var_8],', '1']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
movzx ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[edx+8]']
push ['ecx']
call ['__aulldiv']
push ['edx']
push ['eax']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['eax,', '[edx+1Ch]']
push ['eax']
mov ['ecx,', '[edx+18h]']
push ['ecx']
call ['__aulldiv']
push ['edx']
push ['eax']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[edx+10h]']
push ['ecx']
call ['__aulldiv']
push ['edx']
push ['eax']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?PrintResults@@YGXAAUIBenchPrintCallback@@_K11_N1@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
?PrintRequirements@@YGXAAUIBenchPrintCallback@@PBD_K1I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
push ['offset', '$SG70992']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['6']
mov ['eax,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_C]']
mov ['cl,', '14h']
call ['__aullshr']
push ['edx']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z']
mov ['esi,', 'esp']
push ['offset', '$SG70993']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
push ['3']
mov ['eax,', '[ebp+arg_14]']
xor ['ecx,', 'ecx']
push ['ecx']
push ['eax']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?PrintNumber@@YGXAAUIBenchPrintCallback@@_KH@Z']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['18h']
endp
?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '78h']
push ['edi']
lea ['edi,', '[ebp+var_84]']
mov ['ecx,', '1Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_77EA']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '11h']
jnb ['loc_79AF']
mov ['ecx,', '[ebp+var_10]']
imul ['ecx,', '18h']
add ['ecx,', 'offset', '_g_Bench']
mov ['[ebp+var_14],', 'ecx']
push ['0Ch']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
mov ['edx,', '[ecx+58h]']
push ['edx']
call ['?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z']
mov ['eax,', '[ebp+arg_18]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+10h]']
mov ['[eax+10h],', 'edx']
mov ['eax,', '[ebp+arg_18]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+0Ch]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_18]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
lea ['ecx,', '[ebp+var_3C]']
call ['??0COneMethodInfo@@QAE@XZ']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??0CPropVariant@NCOM@NWindows@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+14h]']
push ['ecx']
lea ['ecx,', '[ebp+var_54]']
call ['??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z']
lea ['edx,', '[ebp+var_54]']
push ['edx']
lea ['ecx,', '[ebp+var_74]']
call ['??0UString@@QAE@XZ']
mov ['[ebp+var_80],', 'eax']
mov ['eax,', '[ebp+var_80]']
mov ['[ebp+var_84],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_84]']
push ['ecx']
lea ['ecx,', '[ebp+var_3C]']
call ['?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z']
mov ['dword', 'ptr', '[ebp+var_60+4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_74]']
call ['??1UString@@QAE@XZ']
cmp ['dword', 'ptr', '[ebp+var_60+4],', '0']
jz ['short', 'loc_78CF']
mov ['edx,', 'dword', 'ptr', '[ebp+var_60+4]']
mov ['[ebp+var_78],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_3C]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_78]']
jmp ['loc_79B1']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[ebp+var_60],', 'eax']
movzx ['ecx,', '[ebp+arg_C]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_78ED']
mov ['edx,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jnz ['short', 'loc_78ED']
mov ['dword', 'ptr', '[ebp+var_60],', '0C000h']
mov ['eax,', '[ebp+arg_18]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx]']
mov ['[eax+78h],', 'edx']
mov ['eax,', '[ebp+arg_18]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx]']
mov ['[eax+7Ch],', 'edx']
mov ['eax,', '[ebp+arg_18]']
add ['eax,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+var_60]']
push ['edx']
lea ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z']
mov ['[ebp+var_64],', 'eax']
cmp ['[ebp+var_64],', '80004001h']
jnz ['short', 'loc_7955']
mov ['ecx,', '[ebp+arg_18]']
movzx ['edx,', 'byte', 'ptr', '[ecx+60h]']
test ['edx,', 'edx']
jnz ['short', 'loc_7953']
mov ['ecx,', '[ebp+arg_18]']
call ['?NewLine@CBenchCallbackToPrint@@QAEXXZ']
jmp ['short', 'loc_7987']
mov ['eax,', '[ebp+var_64]']
mov ['[ebp+var_68],', 'eax']
cmp ['[ebp+var_68],', '0']
jz ['short', 'loc_7987']
mov ['ecx,', '[ebp+var_68]']
mov ['[ebp+var_7C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_3C]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_7C]']
jmp ['short', 'loc_79B1']
mov ['ecx,', '[ebp+arg_18]']
call ['?NewLine@CBenchCallbackToPrint@@QAEXXZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_3C]']
call ['??1COneMethodInfo@@QAE@XZ']
jmp ['loc_77E1']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN19_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '84h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '114h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_120]']
mov ['ecx,', '45h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_14]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['[ebp+var_10],', '100000h']
mov ['[ebp+var_14],', '80h']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_7A90']
mov ['[ebp+arg_8],', '1']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_7AA2']
mov ['[ebp+var_114],', '1']
jmp ['short', 'loc_7AAB']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_114],', 'edx']
mov ['eax,', '[ebp+var_114]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_14]']
xor ['edx,', 'edx']
push ['edx']
push ['ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['__aulldiv']
mov ['ecx,', '[ebp+var_18]']
xor ['esi,', 'esi']
push ['esi']
push ['ecx']
push ['edx']
push ['eax']
call ['__aulldiv']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'edx']
mov ['edx,', '[ebp+var_20]']
or ['edx,', '[ebp+var_1C]']
jnz ['short', 'loc_7AF2']
mov ['[ebp+var_20],', '1']
mov ['[ebp+var_1C],', '0']
lea ['ecx,', '[ebp+var_64]']
call ['??0CBenchInfoCalc@@QAE@XZ']
lea ['ecx,', '[ebp+var_74]']
call ['??0CFreqThreads@@QAE@XZ']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_8],', '1']
jbe ['loc_7D04']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_F4],', 'eax']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+var_F4]']
mov ['edx,', '20h']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
xor ['eax,', 'eax']
add ['ecx,', '4']
setb ['al']
neg ['eax']
or ['eax,', 'ecx']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_FC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
cmp ['[ebp+var_FC],', '0']
jz ['short', 'loc_7B9B']
mov ['ecx,', '[ebp+var_FC]']
mov ['edx,', '[ebp+var_F4]']
mov ['[ecx],', 'edx']
push ['offset', '??1CFreqInfo@@QAE@XZ']
push ['offset', '??0CFreqInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_F4]']
push ['eax']
push ['20h']
mov ['ecx,', '[ebp+var_FC]']
add ['ecx,', '4']
push ['ecx']
call ['??_L@YGXPAXIHP6EX0@Z1@Z']
mov ['edx,', '[ebp+var_FC]']
add ['edx,', '4']
mov ['[ebp+var_118],', 'edx']
jmp ['short', 'loc_7BA5']
mov ['[ebp+var_118],', '0']
mov ['eax,', '[ebp+var_118]']
mov ['[ebp+var_F8],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_F8]']
mov ['[ebp+var_74],', 'ecx']
mov ['[ebp+var_7C],', '0']
jmp ['short', 'loc_7BD0']
mov ['edx,', '[ebp+var_7C]']
add ['edx,', '1']
mov ['[ebp+var_7C],', 'edx']
mov ['eax,', '[ebp+var_7C]']
cmp ['eax,', '[ebp+arg_8]']
jnb ['short', 'loc_7C11']
mov ['ecx,', '[ebp+var_7C]']
shl ['ecx,', '5']
add ['ecx,', '[ebp+var_74]']
mov ['[ebp+var_80],', 'ecx']
mov ['edx,', '[ebp+var_80]']
mov ['eax,', '[ebp+arg_C]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_80]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_80]']
mov ['eax,', '[ebp+var_20]']
mov ['[edx+18h],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['[edx+1Ch],', 'ecx']
mov ['edx,', '[ebp+var_80]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx+10h],', 'eax']
jmp ['short', 'loc_7BC7']
lea ['ecx,', '[ebp+var_64]']
call ['?SetStartTime@CBenchInfoCalc@@QAEXXZ']
mov ['[ebp+var_7C],', '0']
jmp ['short', 'loc_7C2B']
mov ['ecx,', '[ebp+var_7C]']
add ['ecx,', '1']
mov ['[ebp+var_7C],', 'ecx']
mov ['edx,', '[ebp+var_7C]']
cmp ['edx,', '[ebp+arg_8]']
jnb ['short', 'loc_7C99']
mov ['eax,', '[ebp+var_7C]']
shl ['eax,', '5']
add ['eax,', '[ebp+var_74]']
mov ['[ebp+var_84],', 'eax']
mov ['ecx,', '[ebp+var_84]']
push ['ecx']
push ['offset', '?FreqThreadFunction@@YGIPAX@Z']
mov ['ecx,', '[ebp+var_84]']
call ['?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z']
mov ['[ebp+var_88],', 'eax']
cmp ['[ebp+var_88],', '0']
jz ['short', 'loc_7C8E']
mov ['edx,', '[ebp+var_88]']
mov ['[ebp+var_100],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_74]']
call ['??1CFreqThreads@@QAE@XZ']
mov ['eax,', '[ebp+var_100]']
jmp ['loc_7F8A']
mov ['eax,', '[ebp+var_70]']
add ['eax,', '1']
mov ['[ebp+var_70],', 'eax']
jmp ['short', 'loc_7C22']
lea ['ecx,', '[ebp+var_74]']
call ['?WaitAll@CFreqThreads@@QAEXXZ']
mov ['[ebp+var_7C],', '0']
jmp ['short', 'loc_7CB3']
mov ['ecx,', '[ebp+var_7C]']
add ['ecx,', '1']
mov ['[ebp+var_7C],', 'ecx']
mov ['edx,', '[ebp+var_7C]']
cmp ['edx,', '[ebp+arg_8]']
jnb ['short', 'loc_7CFF']
mov ['eax,', '[ebp+var_7C]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+var_74]']
mov ['edx,', '[ecx+eax+8]']
mov ['[ebp+var_8C],', 'edx']
cmp ['[ebp+var_8C],', '0']
jz ['short', 'loc_7CFD']
mov ['eax,', '[ebp+var_8C]']
mov ['[ebp+var_104],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_74]']
call ['??1CFreqThreads@@QAE@XZ']
mov ['eax,', '[ebp+var_104]']
jmp ['loc_7F8A']
jmp ['short', 'loc_7CAA']
jmp ['loc_7DD9']
lea ['ecx,', '[ebp+var_64]']
call ['?SetStartTime@CBenchInfoCalc@@QAEXXZ']
mov ['ecx,', 'ds:?g_BenchCpuFreqTemp@@3IA']
mov ['[ebp+var_90],', 'ecx']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_98],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_94],', 'eax']
jmp ['short', 'loc_7D4A']
mov ['ecx,', '[ebp+var_98]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_94]']
sbb ['edx,', '0']
mov ['[ebp+var_98],', 'ecx']
mov ['[ebp+var_94],', 'edx']
cmp ['[ebp+var_94],', '0']
ja ['short', 'loc_7D5C']
cmp ['[ebp+var_98],', '0']
jbe ['short', 'loc_7DC9']
mov ['eax,', '[ebp+arg_C]']
mov ['edx,', '[eax]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_C]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_9C],', 'eax']
cmp ['[ebp+var_9C],', '0']
jz ['short', 'loc_7DA7']
mov ['ecx,', '[ebp+var_9C]']
mov ['[ebp+var_108],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_74]']
call ['??1CFreqThreads@@QAE@XZ']
mov ['eax,', '[ebp+var_108]']
jmp ['loc_7F8A']
mov ['edx,', 'ds:?g_BenchCpuFreqTemp@@3IA']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_90]']
push ['ecx']
call ['_CountCpuFreq@12']
mov ['[ebp+var_90],', 'eax']
jmp ['loc_7D2C']
mov ['edx,', '[ebp+arg_18]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+var_90]']
mov ['ecx,', '[ebp+arg_18]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_D8]']
call ['??0CBenchInfo@@QAE@XZ']
lea ['edx,', '[ebp+var_D8]']
push ['edx']
lea ['ecx,', '[ebp+var_64]']
call ['?SetFinishTime@CBenchInfoCalc@@QAEXAAUCBenchInfo@@@Z']
mov ['[ebp+var_B8],', '0']
mov ['[ebp+var_B4],', '0']
mov ['[ebp+var_B0],', '0']
mov ['[ebp+var_AC],', '0']
mov ['[ebp+var_A8],', '1']
mov ['[ebp+var_A4],', '0']
cmp ['[ebp+arg_C],', '0']
jz ['loc_7F6B']
mov ['eax,', '[ebp+var_10]']
xor ['ecx,', 'ecx']
push ['ecx']
push ['eax']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['__allmul']
mov ['ecx,', '[ebp+arg_8]']
xor ['esi,', 'esi']
push ['esi']
push ['ecx']
push ['edx']
push ['eax']
call ['__allmul']
mov ['ecx,', '[ebp+var_14]']
xor ['esi,', 'esi']
push ['esi']
push ['ecx']
push ['edx']
push ['eax']
call ['__allmul']
mov ['dword', 'ptr', '[ebp+var_E4],', 'eax']
mov ['dword', 'ptr', '[ebp+var_E4+4],', 'edx']
mov ['edx,', 'dword', 'ptr', '[ebp+var_E4+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_E4]']
push ['eax']
lea ['ecx,', '[ebp+var_D8]']
call ['?GetSpeed@CBenchInfo@@QBE_K_K@Z']
mov ['dword', 'ptr', '[ebp+var_EC],', 'eax']
mov ['dword', 'ptr', '[ebp+var_EC+4],', 'edx']
mov ['ecx,', '[ebp+arg_8]']
xor ['edx,', 'edx']
push ['edx']
push ['ecx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_EC+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_EC]']
push ['ecx']
call ['__aulldiv']
mov ['ecx,', '[ebp+arg_14]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
movzx ['edx,', '[ebp+arg_10]']
test ['edx,', 'edx']
jz ['short', 'loc_7EDA']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_120],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_11C],', 'edx']
jmp ['short', 'loc_7EEE']
mov ['[ebp+var_120],', '0']
mov ['[ebp+var_11C],', '0']
push ['0']
mov ['eax,', '[ebp+var_11C]']
push ['eax']
mov ['ecx,', '[ebp+var_120]']
push ['ecx']
movzx ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_EC+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_EC]']
push ['ecx']
push ['0']
lea ['edx,', '[ebp+var_D8]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['?PrintResults@@YGXPAUIBenchPrintCallback@@ABUCBenchInfo@@I_K_N2PAUCTotalBenchRes@@@Z']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_C]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_F0],', 'eax']
cmp ['[ebp+var_F0],', '0']
jz ['short', 'loc_7F6B']
mov ['ecx,', '[ebp+var_F0]']
mov ['[ebp+var_10C],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_74]']
call ['??1CFreqThreads@@QAE@XZ']
mov ['eax,', '[ebp+var_10C]']
jmp ['short', 'loc_7F8A']
mov ['[ebp+var_110],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_74]']
call ['??1CFreqThreads@@QAE@XZ']
mov ['eax,', '[ebp+var_110]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN38_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '120h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
?FreqThreadFunction@@YGIPAX@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', 'ds:?g_BenchCpuFreqTemp@@3IA']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+18h]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[edx+1Ch]']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_805A']
mov ['edx,', '[ebp+var_10]']
sub ['edx,', '1']
mov ['eax,', '[ebp+var_C]']
sbb ['eax,', '0']
mov ['[ebp+var_10],', 'edx']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
ja ['short', 'loc_8066']
cmp ['[ebp+var_10],', '0']
jbe ['short', 'loc_80B0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jz ['short', 'loc_8095']
xor ['eax,', 'eax']
jmp ['short', 'loc_80BB']
mov ['eax,', 'ds:?g_BenchCpuFreqTemp@@3IA']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_CountCpuFreq@12']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_8048']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+0Ch],', 'edx']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '200h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_20C]']
mov ['ecx,', '80h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_8119']
mov ['[ebp+arg_8],', '1']
mov ['eax,', '[ebp+arg_20]']
add ['eax,', '0Ch']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
call ['??0AString@@QAE@ABV0@@Z']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
call ['?FindHashMethod@@YG_NABVAString@@AA_K@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_8167']
mov ['[ebp+var_1C0],', '80004001h']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+var_1C0]']
jmp ['loc_8C93']
lea ['ecx,', '[ebp+var_40]']
call ['??0CBenchBuffer@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+arg_C]']
imul ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_48],', 'ecx']
mov ['eax,', '[ebp+var_48]']
xor ['edx,', 'edx']
div ['[ebp+arg_8]']
cmp ['eax,', '[ebp+arg_C]']
jz ['short', 'loc_81BA']
mov ['[ebp+var_1C4],', '8007000Eh']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_40]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+var_1C4]']
jmp ['loc_8C93']
mov ['edx,', '[ebp+var_48]']
push ['edx']
lea ['ecx,', '[ebp+var_40]']
call ['?Alloc@CBenchBuffer@@QAE_NI@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_81FD']
mov ['[ebp+var_1C8],', '8007000Eh']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_40]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+var_1C8]']
jmp ['loc_8C93']
mov ['ecx,', '[ebp+var_38]']
mov ['[ebp+var_4C],', 'ecx']
lea ['ecx,', '[ebp+var_58]']
call ['??0CBaseRandomGenerator@@QAE@XZ']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_821D']
mov ['[ebp+var_204],', '1']
jmp ['short', 'loc_8226']
mov ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_204],', 'edx']
mov ['eax,', '[ebp+var_204]']
mov ['[ebp+var_60],', 'eax']
push ['0']
push ['100h']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['__allmul']
mov ['ecx,', '[ebp+arg_14]']
xor ['esi,', 'esi']
push ['esi']
push ['ecx']
push ['edx']
push ['eax']
call ['__aulldiv']
mov ['ecx,', '[ebp+var_60]']
xor ['esi,', 'esi']
push ['esi']
push ['ecx']
push ['edx']
push ['eax']
call ['__aulldiv']
mov ['[ebp+var_68],', 'eax']
mov ['[ebp+var_64],', 'edx']
mov ['edx,', '[ebp+var_68]']
or ['edx,', '[ebp+var_64]']
jnz ['short', 'loc_827B']
mov ['[ebp+var_68],', '1']
mov ['[ebp+var_64],', '0']
lea ['ecx,', '[ebp+var_AC]']
call ['??0CBenchInfoCalc@@QAE@XZ']
lea ['ecx,', '[ebp+var_BC]']
call ['??0CCrcThreads@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
cmp ['[ebp+arg_8],', '1']
jbe ['loc_87A9']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_1CC],', 'eax']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+var_1CC]']
mov ['edx,', '38h']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
xor ['eax,', 'eax']
add ['ecx,', '4']
setb ['al']
neg ['eax']
or ['eax,', 'ecx']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_1D4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
cmp ['[ebp+var_1D4],', '0']
jz ['short', 'loc_8327']
mov ['ecx,', '[ebp+var_1D4]']
mov ['edx,', '[ebp+var_1CC]']
mov ['[ecx],', 'edx']
push ['offset', '??1CCrcInfo@@QAE@XZ']
push ['offset', '??0CCrcInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_1CC]']
push ['eax']
push ['38h']
mov ['ecx,', '[ebp+var_1D4]']
add ['ecx,', '4']
push ['ecx']
call ['??_L@YGXPAXIHP6EX0@Z1@Z']
mov ['edx,', '[ebp+var_1D4]']
add ['edx,', '4']
mov ['[ebp+var_208],', 'edx']
jmp ['short', 'loc_8331']
mov ['[ebp+var_208],', '0']
mov ['eax,', '[ebp+var_208]']
mov ['[ebp+var_1D0],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_1D0]']
mov ['[ebp+var_BC],', 'ecx']
mov ['[ebp+var_C4],', '0']
jmp ['short', 'loc_8368']
mov ['edx,', '[ebp+var_C4]']
add ['edx,', '1']
mov ['[ebp+var_C4],', 'edx']
mov ['eax,', '[ebp+var_C4]']
cmp ['eax,', '[ebp+arg_8]']
jnb ['loc_8649']
mov ['ecx,', '[ebp+var_C4]']
imul ['ecx,', '38h']
add ['ecx,', '[ebp+var_BC]']
mov ['[ebp+var_C8],', 'ecx']
lea ['ecx,', '[ebp+var_D8]']
call ['??0AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['edx,', '[ebp+var_C8]']
add ['edx,', '28h']
push ['edx']
lea ['eax,', '[ebp+var_D8]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_2C+4]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+var_2C]']
push ['edx']
call ['?CreateHasher@@YGJ_KAAVAString@@AAV?$CMyComPtr@UIHasher@@@@@Z']
mov ['[ebp+var_E0],', 'eax']
cmp ['[ebp+var_E0],', '0']
jz ['short', 'loc_8418']
mov ['eax,', '[ebp+var_E0]']
mov ['[ebp+var_1D8],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_D8]']
call ['??1AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_BC]']
call ['??1CCrcThreads@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_40]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+var_1D8]']
jmp ['loc_8C93']
mov ['ecx,', '[ebp+var_C8]']
add ['ecx,', '28h']
call ['??7?$CMyComPtr@UIHasher@@@@QBE_NXZ']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_847B']
mov ['[ebp+var_1DC],', '80004001h']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_D8]']
call ['??1AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_BC]']
call ['??1CCrcThreads@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_40]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+var_1DC]']
jmp ['loc_8C93']
lea ['ecx,', '[ebp+var_E8]']
call ['??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_E8]']
call ['??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ']
push ['eax']
push ['offset', '_IID_ICompressSetCoderProperties']
mov ['ecx,', '[ebp+var_C8]']
add ['ecx,', '28h']
call ['??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIHasher@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z']
lea ['ecx,', '[ebp+var_E8]']
call ['??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ']
test ['eax,', 'eax']
jz ['loc_8559']
mov ['dword', 'ptr', '[ebp+var_F8],', '1']
mov ['dword', 'ptr', '[ebp+var_F8+4],', '0']
lea ['edx,', '[ebp+var_F8]']
push ['edx']
lea ['ecx,', '[ebp+var_E8]']
call ['??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_20]']
call ['?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z']
mov ['[ebp+var_100],', 'eax']
cmp ['[ebp+var_100],', '0']
jz ['short', 'loc_8559']
mov ['eax,', '[ebp+var_100]']
mov ['[ebp+var_1E0],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
lea ['ecx,', '[ebp+var_E8]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_D8]']
call ['??1AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_BC]']
call ['??1CCrcThreads@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_40]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+var_1E0]']
jmp ['loc_8C93']
mov ['ecx,', '[ebp+arg_C]']
imul ['ecx,', '[ebp+var_C4]']
add ['ecx,', '[ebp+var_4C]']
mov ['[ebp+var_104],', 'ecx']
mov ['edx,', '[ebp+var_C8]']
mov ['eax,', '[ebp+arg_24]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_C8]']
mov ['edx,', '[ebp+var_104]']
mov ['[ecx+0Ch],', 'edx']
mov ['eax,', '[ebp+var_C8]']
mov ['ecx,', '[ebp+var_68]']
mov ['[eax+18h],', 'ecx']
mov ['edx,', '[ebp+var_64]']
mov ['[eax+1Ch],', 'edx']
mov ['eax,', '[ebp+var_C8]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax+10h],', 'ecx']
lea ['edx,', '[ebp+var_58]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+var_104]']
push ['ecx']
call ['?RandGenCrc@@YGIPAEIAAVCBaseRandomGenerator@@@Z']
mov ['edx,', '[ebp+var_C8]']
mov ['byte', 'ptr', '[edx+20h],', '0']
cmp ['[ebp+arg_1C],', '0']
jz ['short', 'loc_860B']
mov ['eax,', '[ebp+var_C8]']
mov ['ecx,', '[ebp+arg_1C]']
mov ['edx,', '[ecx]']
mov ['[eax+24h],', 'edx']
cmp ['[ebp+arg_1C],', '0']
jz ['short', 'loc_85F2']
cmp ['[ebp+var_C4],', '0']
jnz ['short', 'loc_85F2']
mov ['[ebp+var_20C],', '1']
jmp ['short', 'loc_85FC']
mov ['[ebp+var_20C],', '0']
mov ['eax,', '[ebp+var_C8]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_20C]']
mov ['[eax+20h],', 'cl']
mov ['edx,', '[ebp+var_C4]']
shl ['edx,', '4']
imul ['edx,', '15h']
and ['edx,', '7FFh']
mov ['eax,', '[ebp+var_C8]']
mov ['[eax+30h],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
lea ['ecx,', '[ebp+var_E8]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_D8]']
call ['??1AString@@QAE@XZ']
jmp ['loc_8359']
lea ['ecx,', '[ebp+var_AC]']
call ['?SetStartTime@CBenchInfoCalc@@QAEXXZ']
mov ['[ebp+var_C4],', '0']
jmp ['short', 'loc_866F']
mov ['ecx,', '[ebp+var_C4]']
add ['ecx,', '1']
mov ['[ebp+var_C4],', 'ecx']
mov ['edx,', '[ebp+var_C4]']
cmp ['edx,', '[ebp+arg_8]']
jnb ['loc_870E']
mov ['eax,', '[ebp+var_C4]']
imul ['eax,', '38h']
add ['eax,', '[ebp+var_BC]']
mov ['[ebp+var_108],', 'eax']
mov ['ecx,', '[ebp+var_108]']
push ['ecx']
push ['offset', '?CrcThreadFunction@@YGIPAX@Z']
mov ['ecx,', '[ebp+var_108]']
call ['?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z']
mov ['[ebp+var_10C],', 'eax']
cmp ['[ebp+var_10C],', '0']
jz ['short', 'loc_86FA']
mov ['edx,', '[ebp+var_10C]']
mov ['[ebp+var_1E4],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_BC]']
call ['??1CCrcThreads@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_40]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+var_1E4]']
jmp ['loc_8C93']
mov ['eax,', '[ebp+var_B8]']
add ['eax,', '1']
mov ['[ebp+var_B8],', 'eax']
jmp ['loc_8660']
lea ['ecx,', '[ebp+var_BC]']
call ['?WaitAll@CCrcThreads@@QAEXXZ']
mov ['[ebp+var_C4],', '0']
jmp ['short', 'loc_8734']
mov ['ecx,', '[ebp+var_C4]']
add ['ecx,', '1']
mov ['[ebp+var_C4],', 'ecx']
mov ['edx,', '[ebp+var_C4]']
cmp ['edx,', '[ebp+arg_8]']
jnb ['short', 'loc_87A4']
mov ['eax,', '[ebp+var_C4]']
imul ['eax,', '38h']
mov ['ecx,', '[ebp+var_BC]']
mov ['edx,', '[ecx+eax+2Ch]']
mov ['[ebp+var_110],', 'edx']
cmp ['[ebp+var_110],', '0']
jz ['short', 'loc_87A2']
mov ['eax,', '[ebp+var_110]']
mov ['[ebp+var_1E8],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_BC]']
call ['??1CCrcThreads@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_40]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+var_1E8]']
jmp ['loc_8C93']
jmp ['short', 'loc_8725']
jmp ['loc_8A98']
lea ['ecx,', '[ebp+var_58]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_4C]']
push ['eax']
call ['?RandGenCrc@@YGIPAEIAAVCBaseRandomGenerator@@@Z']
lea ['ecx,', '[ebp+var_AC]']
call ['?SetStartTime@CBenchInfoCalc@@QAEXXZ']
lea ['ecx,', '[ebp+var_118]']
call ['??0?$CMyComPtr@UIHasher@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_12C]']
call ['??0AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_118]']
push ['ecx']
lea ['edx,', '[ebp+var_12C]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_2C+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_2C]']
push ['ecx']
call ['?CreateHasher@@YGJ_KAAVAString@@AAV?$CMyComPtr@UIHasher@@@@@Z']
mov ['[ebp+var_134],', 'eax']
cmp ['[ebp+var_134],', '0']
jz ['short', 'loc_886C']
mov ['edx,', '[ebp+var_134]']
mov ['[ebp+var_1EC],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_12C]']
call ['??1AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_118]']
call ['??1?$CMyComPtr@UIHasher@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_BC]']
call ['??1CCrcThreads@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_40]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+var_1EC]']
jmp ['loc_8C93']
lea ['ecx,', '[ebp+var_118]']
call ['??7?$CMyComPtr@UIHasher@@@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_88DB']
mov ['[ebp+var_1F0],', '80004001h']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_12C]']
call ['??1AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_118]']
call ['??1?$CMyComPtr@UIHasher@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_BC]']
call ['??1CCrcThreads@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_40]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+var_1F0]']
jmp ['loc_8C93']
lea ['ecx,', '[ebp+var_13C]']
call ['??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
lea ['ecx,', '[ebp+var_13C]']
call ['??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ']
push ['eax']
push ['offset', '_IID_ICompressSetCoderProperties']
lea ['ecx,', '[ebp+var_118]']
call ['??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIHasher@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z']
lea ['ecx,', '[ebp+var_13C]']
call ['??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ']
test ['eax,', 'eax']
jz ['loc_89C5']
mov ['dword', 'ptr', '[ebp+var_14C],', '1']
mov ['dword', 'ptr', '[ebp+var_14C+4],', '0']
lea ['ecx,', '[ebp+var_14C]']
push ['ecx']
lea ['ecx,', '[ebp+var_13C]']
call ['??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_20]']
call ['?SetCoderProps@CProps@@QBEJPAUICompressSetCoderProperties@@PB_K@Z']
mov ['[ebp+var_154],', 'eax']
cmp ['[ebp+var_154],', '0']
jz ['short', 'loc_89C5']
mov ['edx,', '[ebp+var_154]']
mov ['[ebp+var_1F4],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_13C]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_12C]']
call ['??1AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_118]']
call ['??1?$CMyComPtr@UIHasher@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_BC]']
call ['??1CCrcThreads@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_40]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+var_1F4]']
jmp ['loc_8C93']
mov ['eax,', '[ebp+arg_24]']
push ['eax']
lea ['ecx,', '[ebp+var_118]']
call ['??B?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_64]']
push ['edx']
mov ['eax,', '[ebp+var_68]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+var_4C]']
push ['edx']
call ['?CrcBig@@YGJPBXI_KPBIPAUIHasher@@PAUIBenchPrintCallback@@@Z']
mov ['[ebp+var_158],', 'eax']
cmp ['[ebp+var_158],', '0']
jz ['short', 'loc_8A6B']
mov ['eax,', '[ebp+var_158]']
mov ['[ebp+var_1F8],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_13C]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_12C]']
call ['??1AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_118]']
call ['??1?$CMyComPtr@UIHasher@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_BC]']
call ['??1CCrcThreads@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_40]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+var_1F8]']
jmp ['loc_8C93']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_13C]']
call ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_12C]']
call ['??1AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_118]']
call ['??1?$CMyComPtr@UIHasher@@@@QAE@XZ']
lea ['ecx,', '[ebp+var_194]']
call ['??0CBenchInfo@@QAE@XZ']
lea ['ecx,', '[ebp+var_194]']
push ['ecx']
lea ['ecx,', '[ebp+var_AC]']
call ['?SetFinishTime@CBenchInfoCalc@@QAEXAAUCBenchInfo@@@Z']
mov ['edx,', '[ebp+arg_C]']
xor ['eax,', 'eax']
push ['eax']
push ['edx']
mov ['ecx,', '[ebp+var_64]']
push ['ecx']
mov ['edx,', '[ebp+var_68]']
push ['edx']
call ['__allmul']
mov ['[ebp+var_1A0],', 'eax']
mov ['[ebp+var_19C],', 'edx']
mov ['eax,', '[ebp+arg_8]']
xor ['ecx,', 'ecx']
push ['ecx']
push ['eax']
mov ['edx,', '[ebp+var_19C]']
push ['edx']
mov ['eax,', '[ebp+var_1A0]']
push ['eax']
call ['__allmul']
mov ['dword', 'ptr', '[ebp+var_1A8],', 'eax']
mov ['dword', 'ptr', '[ebp+var_1A8+4],', 'edx']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_1A8]']
mov ['[ebp+var_174],', 'ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+var_1A8+4]']
mov ['[ebp+var_170],', 'edx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_1A8]']
mov ['[ebp+var_16C],', 'eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_1A8+4]']
mov ['[ebp+var_168],', 'ecx']
mov ['[ebp+var_164],', '1']
mov ['[ebp+var_160],', '0']
cmp ['[ebp+arg_24],', '0']
jz ['loc_8C38']
mov ['edx,', '[ebp+arg_14]']
xor ['eax,', 'eax']
push ['eax']
push ['edx']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_1A8+4]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+var_1A8]']
push ['edx']
call ['__allmul']
push ['0']
push ['100h']
push ['edx']
push ['eax']
call ['__aulldiv']
mov ['dword', 'ptr', '[ebp+var_1B0],', 'eax']
mov ['dword', 'ptr', '[ebp+var_1B0+4],', 'edx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_1B0+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_1B0]']
push ['ecx']
lea ['ecx,', '[ebp+var_194]']
call ['?GetSpeed@CBenchInfo@@QBE_K_K@Z']
mov ['dword', 'ptr', '[ebp+var_1B8],', 'eax']
mov ['dword', 'ptr', '[ebp+var_1B8+4],', 'edx']
mov ['edx,', '[ebp+arg_28]']
push ['edx']
mov ['eax,', '[ebp+arg_34]']
push ['eax']
mov ['ecx,', '[ebp+arg_30]']
push ['ecx']
movzx ['edx,', '[ebp+arg_2C]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+var_1B8+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_1B8]']
push ['ecx']
mov ['edx,', '[ebp+arg_18]']
push ['edx']
lea ['eax,', '[ebp+var_194]']
push ['eax']
mov ['ecx,', '[ebp+arg_24]']
push ['ecx']
call ['?PrintResults@@YGXPAUIBenchPrintCallback@@ABUCBenchInfo@@I_K_N2PAUCTotalBenchRes@@@Z']
mov ['edx,', '[ebp+arg_24]']
mov ['eax,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_24]']
mov ['edx,', '[eax+8]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_1BC],', 'eax']
cmp ['[ebp+var_1BC],', '0']
jz ['short', 'loc_8C38']
mov ['eax,', '[ebp+var_1BC]']
mov ['[ebp+var_1FC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_BC]']
call ['??1CCrcThreads@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_40]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+var_1FC]']
jmp ['short', 'loc_8C93']
mov ['ecx,', 'dword', 'ptr', '[ebp+var_1A8+4]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+var_1A8]']
push ['edx']
lea ['ecx,', '[ebp+var_194]']
call ['?GetSpeed@CBenchInfo@@QBE_K_K@Z']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
mov ['[ebp+var_200],', '0']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_BC]']
call ['??1CCrcThreads@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_40]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+var_200]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN64']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '20Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['38h']
endp
?CrcBig@@YGJPBXI_KPBIPAUIHasher@@PAUIBenchPrintCallback@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '6Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_6C]']
mov ['ecx,', '1Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_54],', '0']
mov ['[ebp+var_50],', '0']
jmp ['short', 'loc_8E23']
mov ['eax,', '[ebp+var_54]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_50]']
adc ['ecx,', '0']
mov ['[ebp+var_54],', 'eax']
mov ['[ebp+var_50],', 'ecx']
cmp ['[ebp+var_50],', '0']
ja ['short', 'loc_8E3B']
jb ['short', 'loc_8E31']
cmp ['[ebp+var_54],', '40h']
jnb ['short', 'loc_8E3B']
mov ['edx,', '[ebp+var_54]']
mov ['byte', 'ptr', '[ebp+edx+var_48],', '0']
jmp ['short', 'loc_8E11']
mov ['[ebp+var_54],', '0']
mov ['[ebp+var_50],', '0']
jmp ['short', 'loc_8E5D']
mov ['eax,', '[ebp+var_54]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_50]']
adc ['ecx,', '0']
mov ['[ebp+var_54],', 'eax']
mov ['[ebp+var_50],', 'ecx']
mov ['edx,', '[ebp+var_50]']
cmp ['edx,', '[ebp+arg_C]']
ja ['loc_8F85']
jb ['short', 'loc_8E77']
mov ['eax,', '[ebp+var_54]']
cmp ['eax,', '[ebp+arg_8]']
jnb ['loc_8F85']
cmp ['[ebp+arg_18],', '0']
jz ['short', 'loc_8EC1']
mov ['ecx,', '[ebp+var_54]']
and ['ecx,', '0FFh']
mov ['edx,', '[ebp+var_50]']
and ['edx,', '0']
mov ['[ebp+var_6C],', 'ecx']
mov ['[ebp+var_68],', 'edx']
mov ['eax,', '[ebp+var_6C]']
or ['eax,', '[ebp+var_68]']
jnz ['short', 'loc_8EC1']
mov ['ecx,', '[ebp+arg_18]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_18]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_58],', 'eax']
cmp ['[ebp+var_58],', '0']
jz ['short', 'loc_8EC1']
mov ['eax,', '[ebp+var_58]']
jmp ['loc_8F87']
mov ['ecx,', '[ebp+arg_14]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[edx+0Ch]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[edx+10h]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_48]']
push ['edx']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ecx+14h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_14]']
mov ['edx,', '[ecx]']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[edx+18h]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_5C],', 'eax']
cmp ['[ebp+var_5C],', '40h']
jbe ['short', 'loc_8F39']
mov ['eax,', '1']
jmp ['short', 'loc_8F87']
mov ['[ebp+var_60],', '0']
mov ['[ebp+var_64],', '0']
jmp ['short', 'loc_8F52']
mov ['edx,', '[ebp+var_64]']
add ['edx,', '4']
mov ['[ebp+var_64],', 'edx']
mov ['eax,', '[ebp+var_64]']
cmp ['eax,', '[ebp+var_5C]']
jnb ['short', 'loc_8F69']
mov ['ecx,', '[ebp+var_64]']
mov ['edx,', '[ebp+var_60]']
xor ['edx,', '[ebp+ecx+var_48]']
mov ['[ebp+var_60],', 'edx']
jmp ['short', 'loc_8F49']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_8F80']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_60]']
cmp ['ecx,', '[eax]']
jz ['short', 'loc_8F80']
mov ['eax,', '1']
jmp ['short', 'loc_8F87']
jmp ['loc_8E4B']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN20_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '6Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
?CrcThreadFunction@@YGIPAX@Z proc near  
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[ecx+30h]']
call ['__alloca_probe_16']
mov ['edx,', '[ebp+var_8]']
movzx ['eax,', 'byte', 'ptr', '[edx+20h]']
test ['eax,', 'eax']
jz ['short', 'loc_901C']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '24h']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_9023']
mov ['[ebp+var_C],', '0']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '28h']
call ['??B?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+1Ch]']
push ['eax']
mov ['ecx,', '[edx+18h]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['?CrcBig@@YGJPBXI_KPBIPAUIHasher@@PAUIBenchPrintCallback@@@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+2Ch],', 'eax']
xor ['eax,', 'eax']
lea ['esp,', '[ebp-0Ch]']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?RandGenCrc@@YGIPAEIAAVCBaseRandomGenerator@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?RandGen@@YGXPAEIAAVCBaseRandomGenerator@@@Z']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?CrcCalc1@@YGIPBEI@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '84h']
push ['edi']
lea ['edi,', '[ebp+var_90]']
mov ['ecx,', '21h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', '0']
jmp ['short', 'loc_90FD']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '6']
jnb ['loc_927E']
mov ['ecx,', '[ebp+var_10]']
shl ['ecx,', '4']
add ['ecx,', 'offset', '_g_Hash']
mov ['[ebp+var_14],', 'ecx']
push ['0Ch']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
mov ['edx,', '[ecx+58h]']
push ['edx']
call ['?PrintLeft@@YGXAAUIBenchPrintCallback@@PBDI@Z']
lea ['ecx,', '[ebp+var_3C]']
call ['??0COneMethodInfo@@QAE@XZ']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??0CPropVariant@NCOM@NWindows@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
lea ['ecx,', '[ebp+var_54]']
call ['??4CPropVariant@NCOM@NWindows@@QAEAAV012@PBD@Z']
lea ['edx,', '[ebp+var_54]']
push ['edx']
lea ['ecx,', '[ebp+var_80]']
call ['??0UString@@QAE@XZ']
mov ['[ebp+var_8C],', 'eax']
mov ['eax,', '[ebp+var_8C]']
mov ['[ebp+var_90],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_90]']
push ['ecx']
lea ['ecx,', '[ebp+var_3C]']
call ['?ParseMethodFromPROPVARIANT@COneMethodInfo@@QAEJABVUString@@ABUtagPROPVARIANT@@@Z']
mov ['[ebp+var_5C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_80]']
call ['??1UString@@QAE@XZ']
cmp ['[ebp+var_5C],', '0']
jz ['short', 'loc_91CA']
mov ['edx,', '[ebp+var_5C]']
mov ['[ebp+var_84],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_3C]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_84]']
jmp ['loc_9280']
mov ['eax,', '[ebp+arg_24]']
push ['eax']
mov ['ecx,', '[ebp+arg_20]']
push ['ecx']
movzx ['edx,', '[ebp+arg_1C]']
push ['edx']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
lea ['edx,', '[ebp+var_3C]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '8']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
lea ['edx,', '[ebp+var_68]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z']
mov ['[ebp+var_70],', 'eax']
cmp ['[ebp+var_70],', '80004001h']
jnz ['short', 'loc_921E']
jmp ['short', 'loc_9256']
mov ['ecx,', '[ebp+var_70]']
mov ['[ebp+var_74],', 'ecx']
cmp ['[ebp+var_74],', '0']
jz ['short', 'loc_9256']
mov ['edx,', '[ebp+var_74]']
mov ['[ebp+var_88],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_3C]']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_88]']
jmp ['short', 'loc_9280']
mov ['ecx,', '[ebp+arg_14]']
call ['?NewLine@CBenchCallbackToPrint@@QAEXXZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_54]']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_3C]']
call ['??1COneMethodInfo@@QAE@XZ']
jmp ['loc_90F4']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18_3']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '90h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['28h']
endp
?ParseNumberString@@YGXABVUString@@AAVCPropVariant@NCOM@NWindows@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??BUString@@QBEPB_WXZ']
push ['eax']
call ['?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'edx']
mov ['ecx,', '[ebp+var_8]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
test ['edx,', 'edx']
jnz ['short', 'loc_934B']
mov ['ecx,', '[ebp+arg_0]']
call ['?IsEmpty@UString@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_9359']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??4CPropVariant@NCOM@NWindows@@QAEAAV012@ABVUString@@@Z']
jmp ['short', 'loc_9385']
cmp ['[ebp+var_10],', '0']
ja ['short', 'loc_9375']
jb ['short', 'loc_9367']
cmp ['[ebp+var_14],', '0FFFFFFFFh']
ja ['short', 'loc_9375']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', '[ebp+arg_4]']
call ['??4CPropVariant@NCOM@NWindows@@QAEAAV012@I@Z']
jmp ['short', 'loc_9385']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??4CPropVariant@NCOM@NWindows@@QAEAAV012@_K@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?GetNumThreadsNext@@YGIII@Z proc near   
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '2']
jnb ['short', 'loc_93E2']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1']
jmp ['short', 'loc_9417']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '1']
add ['edx,', '2']
mov ['ecx,', '[ebp+arg_0]']
shr ['ecx,', '1']
shl ['edx,', 'cl']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_4]']
ja ['short', 'loc_940E']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_9414']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?AreSameMethodNames@@YG_NPBD0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['cl,', '[eax]']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'cl']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
movsx ['eax,', 'byte', 'ptr', '[ebp+var_4+3]']
test ['eax,', 'eax']
jnz ['short', 'loc_9449']
mov ['al,', '1']
jmp ['short', 'loc_947E']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx]']
mov ['byte', 'ptr', '[ebp+var_4+2],', 'dl']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_4+2]']
push ['ecx']
call ['?MyCharLower_Ascii@@YGDD@Z']
movsx ['esi,', 'al']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['edx']
call ['?MyCharLower_Ascii@@YGDD@Z']
movsx ['eax,', 'al']
cmp ['esi,', 'eax']
jz ['short', 'loc_947C']
xor ['al,', 'al']
jmp ['short', 'loc_947E']
jmp ['short', 'loc_942C']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Init@CUserTime@@QAEXXZ proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
call ['?GetWinUserTime@@YG_KXZ']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetUserTime@CUserTime@@QAE_KXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
call ['?GetWinUserTime@@YG_KXZ']
mov ['ecx,', '[ebp+var_4]']
sub ['eax,', '[ecx]']
sbb ['edx,', '[ecx+4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CBenchInfo@@QAE@XZ proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+30h],', '0']
mov ['dword', 'ptr', '[eax+34h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?SetResult@CBenchProgressStatus@@QAEXJ@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
call ['??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'edx']
lea ['ecx,', '[ebp+var_C]']
call ['??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[edx]']
call ['?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Enter@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+lpCriticalSection],', '0CCCCCCCCh']
mov ['[ebp+lpCriticalSection],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+lpCriticalSection]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__EnterCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Unlock@CCriticalSectionLock@NSynchronization@NWindows@@AAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
call ['?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Leave@CCriticalSection@NSynchronization@NWindows@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+lpCriticalSection],', '0CCCCCCCCh']
mov ['[ebp+lpCriticalSection],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+lpCriticalSection]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__LeaveCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetResult@CBenchProgressStatus@@QAEJXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
call ['??0CCriticalSectionLock@NSynchronization@NWindows@@QAE@AAVCCriticalSection@12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+18h]']
mov ['[ebp+var_14],', 'edx']
lea ['ecx,', '[ebp+var_C]']
call ['??1CCriticalSectionLock@NSynchronization@NWindows@@QAE@XZ']
mov ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6_1']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CBenchProps@@QAE@XZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$0 proc near
mov ['eax,', '[ebp-0A8h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$1 proc near
mov ['eax,', '[ebp-0B0h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$2 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
endp
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$3 proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
endp
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$4 proc near
lea ['ecx,', '[ebp-4Ch]']
jmp ['??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ']
endp
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$5 proc near
lea ['ecx,', '[ebp-5Ch]']
jmp ['??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ']
endp
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$6 proc near
mov ['eax,', '[ebp-0C8h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$7 proc near
lea ['ecx,', '[ebp-70h]']
jmp ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
endp
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$8 proc near
mov ['eax,', '[ebp-0D0h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z$9 proc near
lea ['ecx,', '[ebp-98h]']
jmp ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
endp
__ehhandler$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0FCh]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Init@CEncoderInfo@@QAEJABVCOneMethodInfo@@IIPAVCBaseRandomGenerator@@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?Encode@CEncoderInfo@@QAEJXZ$0 proc near
lea ['ecx,', '[ebp-1Ch]']
jmp ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
endp
__unwindfunclet$?Encode@CEncoderInfo@@QAEJXZ$1 proc near
lea ['ecx,', '[ebp-28h]']
jmp ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
endp
__unwindfunclet$?Encode@CEncoderInfo@@QAEJXZ$2 proc near
mov ['eax,', '[ebp-74h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?Encode@CEncoderInfo@@QAEJXZ$3 proc near
lea ['ecx,', '[ebp-38h]']
jmp ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
endp
__ehhandler$?Encode@CEncoderInfo@@QAEJXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0D0h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Encode@CEncoderInfo@@QAEJXZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$0 proc near
mov ['eax,', '[ebp-0DCh]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$1 proc near
lea ['ecx,', '[ebp-1Ch]']
jmp ['??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ']
endp
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$2 proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$CMyComPtr@UIUnknown@@@@QAE@XZ']
endp
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$3 proc near
lea ['ecx,', '[ebp-38h]']
jmp ['??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ']
endp
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$4 proc near
mov ['eax,', '[ebp-0ECh]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$5 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
endp
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$6 proc near
lea ['ecx,', '[ebp-58h]']
jmp ['??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ']
endp
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$7 proc near
lea ['ecx,', '[ebp-68h]']
jmp ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
endp
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$8 proc near
lea ['ecx,', '[ebp-88h]']
jmp ['??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ']
endp
__unwindfunclet$?Decode@CEncoderInfo@@QAEJI@Z$9 proc near
lea ['ecx,', '[ebp-98h]']
jmp ['??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ']
endp
__ehhandler$?Decode@CEncoderInfo@@QAEJI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-15Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Decode@CEncoderInfo@@QAEJI@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?CrcInternalTest@@YG_NXZ$0 proc near
lea ['ecx,', '[ebp-1Ch]']
jmp ['??1CBenchBuffer@@UAE@XZ']
endp
__ehhandler$?CrcInternalTest@@YG_NXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-50h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?CrcInternalTest@@YG_NXZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$0 proc near
lea ['ecx,', '[ebp-60h]']
jmp ['??1COneMethodInfo@@QAE@XZ']
endp
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$1 proc near
lea ['ecx,', '[ebp-80h]']
jmp ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
endp
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$2 proc near
lea ['ecx,', '[ebp-94h]']
jmp ['??1UString@@QAE@XZ']
endp
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$3 proc near
lea ['ecx,', '[ebp-3D8h]']
jmp ['??1UString@@QAE@XZ']
endp
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$4 proc near
lea ['ecx,', '[ebp-0ACh]']
jmp ['??1UString@@QAE@XZ']
endp
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$5 proc near
lea ['ecx,', '[ebp-0C8h]']
jmp ['??1AString@@QAE@XZ']
endp
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$6 proc near
lea ['ecx,', '[ebp-148h]']
jmp ['??1AString@@QAE@XZ']
endp
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$7 proc near
lea ['ecx,', '[ebp-180h]']
jmp ['??1AString@@QAE@XZ']
endp
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$8 proc near
lea ['ecx,', '[ebp-194h]']
jmp ['??1AString@@QAE@XZ']
endp
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$9 proc near
lea ['ecx,', '[ebp-1B0h]']
jmp ['??1CTempValues@@QAE@XZ']
endp
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$10 proc near
lea ['ecx,', '[ebp-328h]']
jmp ['??1AString@@QAE@XZ']
endp
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$11 proc near
lea ['ecx,', '[ebp-378h]']
jmp ['??1COneMethodInfo@@QAE@XZ']
endp
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$12 proc near
lea ['ecx,', '[ebp-390h]']
jmp ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
endp
__unwindfunclet$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z$13 proc near
lea ['ecx,', '[ebp-41Ch]']
jmp ['??1UString@@QAE@XZ']
endp
__ehhandler$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-438h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Bench@@YGJPAUIBenchPrintCallback@@PAUIBenchCallback@@ABV?$CObjectVector@UCProperty@@@@I_N@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$0 proc near
lea ['ecx,', '[ebp-34h]']
jmp ['??1COneMethodInfo@@QAE@XZ']
endp
__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$1 proc near
lea ['ecx,', '[ebp-74h]']
jmp ['??1CBenchEncoders@@QAE@XZ']
endp
__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$2 proc near
lea ['ecx,', '[ebp-98h]']
jmp ['??1CCreatedCoder@@QAE@XZ']
endp
__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$3 proc near
lea ['ecx,', '[ebp-0B8h]']
jmp ['??1CCreatedCoder@@QAE@XZ']
endp
__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$4 proc near
lea ['ecx,', '[ebp-100h]']
jmp ['??1CBenchProgressStatus@@QAE@XZ']
endp
__unwindfunclet$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z$5 proc near
mov ['eax,', '[ebp-1CCh]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__ehhandler$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-204h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?MethodBench@@YGJ_K_NIABVCOneMethodInfo@@IIPAUIBenchPrintCallback@@PAUIBenchCallback@@PAUCBenchProps@@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z$0 proc near
lea ['ecx,', '[ebp-3Ch]']
jmp ['??1COneMethodInfo@@QAE@XZ']
endp
__unwindfunclet$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z$1 proc near
lea ['ecx,', '[ebp-54h]']
jmp ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
endp
__unwindfunclet$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z$2 proc near
lea ['ecx,', '[ebp-74h]']
jmp ['??1UString@@QAE@XZ']
endp
__ehhandler$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-80h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?TotalBench@@YGJ_KI_NIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z$0 proc near
lea ['ecx,', '[ebp-74h]']
jmp ['??1CFreqThreads@@QAE@XZ']
endp
__unwindfunclet$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z$1 proc near
mov ['eax,', '[ebp-0FCh]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__ehhandler$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-120h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?FreqBench@@YGJ_KIPAUIBenchPrintCallback@@_NAA_KAAI@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$0 proc near
lea ['ecx,', '[ebp-1Ch]']
jmp ['??1AString@@QAE@XZ']
endp
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$1 proc near
lea ['ecx,', '[ebp-40h]']
jmp ['??1CBenchBuffer@@UAE@XZ']
endp
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$2 proc near
lea ['ecx,', '[ebp-0BCh]']
jmp ['??1CCrcThreads@@QAE@XZ']
endp
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$3 proc near
mov ['eax,', '[ebp-1D4h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$4 proc near
lea ['ecx,', '[ebp-0D8h]']
jmp ['??1AString@@QAE@XZ']
endp
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$5 proc near
lea ['ecx,', '[ebp-0E8h]']
jmp ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
endp
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$6 proc near
lea ['ecx,', '[ebp-118h]']
jmp ['??1?$CMyComPtr@UIHasher@@@@QAE@XZ']
endp
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$7 proc near
lea ['ecx,', '[ebp-12Ch]']
jmp ['??1AString@@QAE@XZ']
endp
__unwindfunclet$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z$8 proc near
lea ['ecx,', '[ebp-13Ch]']
jmp ['??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ']
endp
__ehhandler$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?CrcBench@@YGJ_KIIAA_KIIPBIABVCOneMethodInfo@@PAUIBenchPrintCallback@@PAUCTotalBenchRes@@_N0@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z$0 proc near
lea ['ecx,', '[ebp-3Ch]']
jmp ['??1COneMethodInfo@@QAE@XZ']
endp
__unwindfunclet$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z$1 proc near
lea ['ecx,', '[ebp-54h]']
jmp ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
endp
__unwindfunclet$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z$2 proc near
lea ['ecx,', '[ebp-80h]']
jmp ['??1UString@@QAE@XZ']
endp
__ehhandler$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?TotalBench_Hash@@YGJ_KIIPAUIBenchPrintCallback@@PAUCBenchCallbackToPrint@@PAUCTotalBenchRes@@_N0@Z']
jmp ['___CxxFrameHandler3']
endp
?AreThereNonOptionalProps@CProps@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_9E35']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?Size@?$CObjectVector@UCProp@@@@QBEIXZ']
cmp ['[ebp+var_8],', 'eax']
jnb ['short', 'loc_9E5C']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z']
movzx ['edx,', 'byte', 'ptr', '[eax+4]']
test ['edx,', 'edx']
jnz ['short', 'loc_9E5A']
mov ['al,', '1']
jmp ['short', 'loc_9E5E']
jmp ['short', 'loc_9E2C']
xor ['al,', 'al']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Alloc@CBenchBuffer@@QAE_NI@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_9E9B']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
cmp ['edx,', '[ebp+arg_0]']
jnz ['short', 'loc_9E9B']
mov ['al,', '1']
jmp ['short', 'loc_9EDD']
mov ['ecx,', '[ebp+var_4]']
call ['?Free@CBenchBuffer@@QAEXXZ']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MidAlloc@4']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+8],', '0']
jnz ['short', 'loc_9ED3']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_9ED3']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_9EDA']
mov ['[ebp+var_8],', '1']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Free@CBenchBuffer@@QAEXXZ proc near    
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['_MidFree@4']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Set@CBenchRandomGenerator@@QAEXPAVCBaseRandomGenerator@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+0Ch],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?GenerateSimpleRandom@CBenchRandomGenerator@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_9F6D']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+4]']
jnb ['short', 'loc_9F91']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
call ['?GetRnd@CBaseRandomGenerator@@QAEIXZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['ecx,', '[ebp+var_8]']
mov ['[edx+ecx],', 'al']
jmp ['short', 'loc_9F64']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetRnd@CBaseRandomGenerator@@QAEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
and ['ecx,', '0FFFFh']
imul ['ecx,', '9069h']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
shr ['eax,', '10h']
add ['ecx,', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
and ['ecx,', '0FFFFh']
imul ['ecx,', '4650h']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
shr ['eax,', '10h']
add ['ecx,', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
shl ['eax,', '10h']
add ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Generate@CBenchRandomGenerator@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_C],', '1']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+4]']
jnb ['loc_A18F']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[edx+0Ch]']
call ['?GetRnd@CBaseRandomGenerator@@QAEIXZ']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
shr ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
push ['1']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?GetVal@CBenchRandomGenerator@@QAEIAAII@Z']
test ['eax,', 'eax']
jz ['short', 'loc_A088']
cmp ['[ebp+var_8],', '400h']
jnb ['short', 'loc_A0AB']
mov ['edx,', '[ebp+var_14]']
and ['edx,', '0FFh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['eax,', '[ebp+var_8]']
mov ['[ecx+eax],', 'dl']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
jmp ['loc_A18A']
lea ['edx,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?GetLen@CBenchRandomGenerator@@QAEIAAI@Z']
add ['eax,', '1']
mov ['[ebp+var_1C],', 'eax']
push ['3']
lea ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?GetVal@CBenchRandomGenerator@@QAEIAAII@Z']
test ['eax,', 'eax']
jz ['short', 'loc_A13F']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?GetLen@CBenchRandomGenerator@@QAEIAAI@Z']
add ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_1C],', 'eax']
push ['5']
lea ['edx,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?GetVal@CBenchRandomGenerator@@QAEIAAII@Z']
add ['eax,', '6']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
call ['?GetRnd@CBaseRandomGenerator@@QAEIXZ']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_20]']
cmp ['ecx,', '[ebp+arg_0]']
jbe ['short', 'loc_A10D']
jmp ['short', 'loc_A12E']
mov ['edx,', '[ebp+var_20]']
push ['edx']
lea ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?GetVal@CBenchRandomGenerator@@QAEIAAII@Z']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+0Ch]']
call ['?GetRnd@CBaseRandomGenerator@@QAEIXZ']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+var_8]']
jnb ['short', 'loc_A0E1']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_A15A']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_24]']
cmp ['eax,', '[ebp+var_1C]']
jnb ['short', 'loc_A18A']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+4]']
jnb ['short', 'loc_A18A']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+8]']
mov ['esi,', '[ebp+var_8]']
mov ['dl,', '[eax+edx]']
mov ['[ecx+esi],', 'dl']
jmp ['short', 'loc_A148']
jmp ['loc_A048']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?GetVal@CBenchRandomGenerator@@QAEIAAII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '1']
mov ['ecx,', '[ebp+arg_4]']
shl ['eax,', 'cl']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
and ['eax,', '[ecx]']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_4]']
shr ['eax,', 'cl']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?GetLen@CBenchRandomGenerator@@QAEIAAI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['2']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?GetVal@CBenchRandomGenerator@@QAEIAAII@Z']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?GetVal@CBenchRandomGenerator@@QAEIAAII@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Init@CBenchmarkInStream@@QAEXPBEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+10h],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Init@CBenchmarkOutStream@@QAEX_N0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+1Ch],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_4]']
mov ['dl,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'dl']
mov ['eax,', '[ebp+var_4]']
mov ['cl,', '[ebp+arg_4]']
mov ['[eax+19h],', 'cl']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+14h],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??0CCrcOutStream@@QAE@XZ proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0ISequentialOutStream@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??0CMyUnknownImp@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7CCrcOutStream@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[ecx+8],', '1']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CMyUnknownImp@@QAE@XZ proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?QueryInterface@CCrcOutStream@@UAGJABU_GUID@@PAPAX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
push ['offset', '_IID_IUnknown']
mov ['ecx,', '[ebp+Buf1]']
push ['ecx']
call ['___@8']
test ['eax,', 'eax']
jz ['short', 'loc_A4EC']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+this]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_A4F3']
mov ['eax,', '80004002h']
jmp ['short', 'loc_A504']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['eax,', '[ebp+this]']
mov ['[eax+4],', 'edx']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
___@8           proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+Buf2]']
push ['eax']
mov ['ecx,', '[ebp+Buf1]']
push ['ecx']
call ['_IsEqualGUID@8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_IsEqualGUID@8  proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['10h']
mov ['eax,', '[ebp+Buf2]']
push ['eax']
mov ['ecx,', '[ebp+Buf1]']
push ['ecx']
call ['_memcmp']
add ['esp,', '0Ch']
neg ['eax']
sbb ['eax,', 'eax']
add ['eax,', '1']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
?AddRef@CCrcOutStream@@UAGKXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Release@CCrcOutStream@@UAGKXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+4],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_A5B7']
mov ['ecx,', '[ebp+this]']
mov ['eax,', '[ecx+4]']
jmp ['short', 'loc_A5CB']
mov ['edx,', '[ebp+this]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Init@CCrcOutStream@@QAEXXZ proc near   
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0FFFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0ISequentialOutStream@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0IUnknown@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7ISequentialOutStream@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0IUnknown@@QAE@XZ proc near           
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CBenchmarkOutStream@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0CBenchmarkOutStream@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0ISequentialOutStream@@QAE@XZ']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??0CBenchBuffer@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??0CMyUnknownImp@@QAE@XZ']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7CBenchmarkOutStream@@6BISequentialOutStream@@@']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+4],', 'offset', '??_7CBenchmarkOutStream@@6BCBenchBuffer@@@']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0CBenchmarkOutStream@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '4']
jmp ['??1CBenchBuffer@@UAE@XZ']
endp
__ehhandler$??0CBenchmarkOutStream@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0CBenchmarkOutStream@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0CBenchBuffer@@QAE@XZ proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7CBenchBuffer@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1CBenchBuffer@@UAE@XZ proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7CBenchBuffer@@6B@']
mov ['ecx,', '[ebp+var_4]']
call ['?Free@CBenchBuffer@@QAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??_GCBenchBuffer@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_A916']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?QueryInterface@CBenchmarkOutStream@@UAGJABU_GUID@@PAPAX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
push ['offset', '_IID_IUnknown']
mov ['ecx,', '[ebp+Buf1]']
push ['ecx']
call ['___@8']
test ['eax,', 'eax']
jz ['short', 'loc_A954']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+this]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_A95B']
mov ['eax,', '80004002h']
jmp ['short', 'loc_A96C']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ecx+10h]']
add ['edx,', '1']
mov ['eax,', '[ebp+this]']
mov ['[eax+10h],', 'edx']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
?AddRef@CBenchmarkOutStream@@UAGKXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+10h]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+10h],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Release@CBenchmarkOutStream@@UAGKXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+10h]']
sub ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx+10h],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_A9DF']
mov ['ecx,', '[ebp+this]']
mov ['eax,', '[ecx+10h]']
jmp ['short', 'loc_AA1A']
mov ['edx,', '[ebp+this]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_AA11']
mov ['esi,', 'esp']
push ['1']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['edx,', '[eax]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_AA18']
mov ['[ebp+var_10],', '0']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0CBenchmarkInStream@@QAE@XZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0ISequentialInStream@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??0CMyUnknownImp@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7CBenchmarkInStream@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?QueryInterface@CBenchmarkInStream@@UAGJABU_GUID@@PAPAX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
push ['offset', '_IID_IUnknown']
mov ['ecx,', '[ebp+Buf1]']
push ['ecx']
call ['___@8']
test ['eax,', 'eax']
jz ['short', 'loc_AB78']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+this]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_AB7F']
mov ['eax,', '80004002h']
jmp ['short', 'loc_AB90']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['eax,', '[ebp+this]']
mov ['[eax+4],', 'edx']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
?AddRef@CBenchmarkInStream@@UAGKXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Release@CBenchmarkInStream@@UAGKXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+4],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_ABFF']
mov ['ecx,', '[ebp+this]']
mov ['eax,', '[ecx+4]']
jmp ['short', 'loc_AC13']
mov ['edx,', '[ebp+this]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0ISequentialInStream@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0IUnknown@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7ISequentialInStream@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??_ECEncoderInfo@@QAEPAXI@Z proc near   
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '2']
jz ['short', 'loc_ACCB']
push ['offset', '??1CEncoderInfo@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx-4]']
push ['edx']
push ['118h']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '1']
jz ['short', 'loc_ACC3']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '4']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '4']
jmp ['short', 'loc_ACEA']
mov ['ecx,', '[ebp+var_4]']
call ['??1CEncoderInfo@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_ACE7']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1CEncoderInfo@@QAE@XZ proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1CEncoderInfo@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '9']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0ECh']
call ['??1COneMethodInfo@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0E8h']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0D8h']
call ['??1CBenchBuffer@@UAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0C8h']
call ['??1CBenchRandomGenerator@@UAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0B0h']
call ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0A0h']
call ['??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
push ['offset', '??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ']
push ['2']
push ['4']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '98h']
push ['eax']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
push ['offset', '??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ']
push ['2']
push ['4']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1Ch']
push ['ecx']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
push ['offset', '??1CThread@NWindows@@QAE@XZ']
push ['2']
push ['4']
mov ['edx,', '[ebp+var_10]']
push ['edx']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$0 proc near
push ['offset', '??1CThread@NWindows@@QAE@XZ']
push ['2']
push ['4']
mov ['eax,', '[ebp-10h]']
push ['eax']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
retn
endp
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ']
endp
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$2 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '10h']
jmp ['??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ']
endp
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$3 proc near
push ['offset', '??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ']
push ['2']
push ['4']
mov ['eax,', '[ebp-10h]']
add ['eax,', '1Ch']
push ['eax']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
retn
endp
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$4 proc near
push ['offset', '??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ']
push ['2']
push ['4']
mov ['eax,', '[ebp-10h]']
add ['eax,', '98h']
push ['eax']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
retn
endp
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$5 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0A0h']
jmp ['??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ']
endp
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$6 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0B0h']
jmp ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
endp
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$7 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0C8h']
jmp ['??1CBenchRandomGenerator@@UAE@XZ']
endp
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$8 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0D8h']
jmp ['??1CBenchBuffer@@UAE@XZ']
endp
__unwindfunclet$??1CEncoderInfo@@QAE@XZ$9 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0E8h']
jmp ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
endp
__ehhandler$??1CEncoderInfo@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1CEncoderInfo@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1CThread@NWindows@@QAE@XZ proc near   
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Close@CThread@NWindows@@QAEIXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Close@CThread@NWindows@@QAEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_HandlePtr_Close@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1CBenchRandomGenerator@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1CBenchBuffer@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1COneMethodInfo@@QAE@XZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1COneMethodInfo@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??1AString@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1CMethodProps@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1COneMethodInfo@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1CMethodProps@@QAE@XZ']
endp
__unwindfunclet$??1COneMethodInfo@@QAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1AString@@QAE@XZ']
endp
__ehhandler$??1COneMethodInfo@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1COneMethodInfo@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1AString@@QAE@XZ proc near            
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1UString@@QAE@XZ proc near            
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1CMethodProps@@QAE@XZ proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1CProps@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1CProps@@QAE@XZ proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$CObjectVector@UCProp@@@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetLZMAUsage@@YG_K_NI@Z proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shr ['ecx,', '1']
or ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shr ['edx,', '2']
or ['edx,', '[ebp+var_4]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
shr ['eax,', '4']
or ['eax,', '[ebp+var_4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shr ['ecx,', '8']
or ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shr ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
or ['eax,', '0FFFFh']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '1000000h']
jbe ['short', 'loc_B1BD']
mov ['ecx,', '[ebp+var_4]']
shr ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '10000h']
mov ['ecx,', 'eax']
xor ['esi,', 'esi']
mov ['eax,', '[ebp+arg_4]']
mov ['edx,', '2']
mul ['edx']
add ['ecx,', 'eax']
adc ['esi,', 'edx']
push ['0']
push ['4']
push ['esi']
push ['ecx']
call ['__allmul']
mov ['esi,', 'eax']
mov ['edi,', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '3']
mul ['ecx']
push ['0']
push ['2']
push ['edx']
push ['eax']
call ['__aulldiv']
add ['esi,', 'eax']
adc ['edi,', 'edx']
add ['esi,', '100000h']
adc ['edi,', '0']
movzx ['eax,', '[ebp+arg_0]']
neg ['eax']
sbb ['eax,', 'eax']
and ['eax,', '600000h']
cdq
add ['esi,', 'eax']
adc ['edi,', 'edx']
mov ['eax,', 'esi']
mov ['edx,', 'edi']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??_ECFreqInfo@@QAEPAXI@Z proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '2']
jz ['short', 'loc_B288']
push ['offset', '??1CFreqInfo@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx-4]']
push ['edx']
push ['20h']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '1']
jz ['short', 'loc_B280']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '4']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '4']
jmp ['short', 'loc_B2A7']
mov ['ecx,', '[ebp+var_4]']
call ['??1CFreqInfo@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_B2A4']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1CFreqInfo@@QAE@XZ proc near          
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1CThread@NWindows@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??_ECCrcInfo@@QAEPAXI@Z proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '2']
jz ['short', 'loc_B328']
push ['offset', '??1CCrcInfo@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx-4]']
push ['edx']
push ['38h']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '1']
jz ['short', 'loc_B320']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '4']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '4']
jmp ['short', 'loc_B347']
mov ['ecx,', '[ebp+var_4]']
call ['??1CCrcInfo@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_B344']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1CCrcInfo@@QAE@XZ proc near           
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1CCrcInfo@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??1?$CMyComPtr@UIHasher@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1CThread@NWindows@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1CCrcInfo@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1CThread@NWindows@@QAE@XZ']
endp
__ehhandler$??1CCrcInfo@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1CCrcInfo@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0CBaseRandomGenerator@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Init@CBaseRandomGenerator@@QAEXXZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Init@CBaseRandomGenerator@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '159A55E5h']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '1F123BB5h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?MyStringLen@@YGIPBD@Z proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_B47D']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
test ['edx,', 'edx']
jz ['short', 'loc_B48C']
jmp ['short', 'loc_B474']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Empty@AString@@QAEXXZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['byte', 'ptr', '[edx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??YAString@@QAEAAV0@D@Z proc near       
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+4]']
jnz ['short', 'loc_B4F0']
mov ['ecx,', '[ebp+var_4]']
call ['?Grow_1@AString@@AAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+var_8]']
mov ['dl,', '[ebp+arg_0]']
mov ['[ecx],', 'dl']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+var_8]']
mov ['byte', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?IsEmpty@AString@@QBE_NXZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax+4],', '0']
setz ['cl']
mov ['al,', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??BAString@@QBEPBDXZ proc near          
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Ptr@AString@@QBEPBDI@Z proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
add ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?IsEqualTo_Ascii_NoCase@AString@@QBE_NPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?StringsAreEqualNoCase_Ascii@@YG_NPBD0@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Find@AString@@QBEHD@Z proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?FindCharPosInString@@YGHPBDD@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?DeleteFrom@AString@@QAEXI@Z proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+4]']
jnb ['short', 'loc_B61E']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[edx+eax],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?IsEmpty@UString@@QBE_NXZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax+4],', '0']
setz ['cl']
mov ['al,', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Ptr@UString@@QBEPB_WI@Z proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*2]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?MakeLower_Ascii@UString@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['?MyStringLower_Ascii@@YGXPA_W@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?IsEqualTo@UString@@QBE_NPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?IsEqualTo_Ascii_NoCase@UString@@QBE_NPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?StringsAreEqualNoCase_Ascii@@YG_NPB_WPBD@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??8@YG_NABVUString@@PB_W@Z proc near    
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+Str2]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??BUString@@QBEPB_WXZ']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__wcscmp']
add ['esp,', '8']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
neg ['eax']
sbb ['eax,', 'eax']
add ['eax,', '1']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
??BUString@@QBEPB_WXZ proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CPropVariant@NCOM@NWindows@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'ax']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+2],', 'dx']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1CPropVariant@NCOM@NWindows@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Clear@CPropVariant@NCOM@NWindows@@QAEJXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CPropVariant@NCOM@NWindows@@QAE@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '13h']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'ax']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+2],', 'dx']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Get_DicSize@CMethodProps@@QBE_NAAI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?FindProp@CMethodProps@@QBEHK@Z']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_B824']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z']
movzx ['edx,', 'word', 'ptr', '[eax+8]']
cmp ['edx,', '13h']
jnz ['short', 'loc_B824']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+10h]']
mov ['[ecx],', 'edx']
mov ['al,', '1']
jmp ['short', 'loc_B826']
xor ['al,', 'al']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Get_Lzma_DicSize@CMethodProps@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?FindProp@CMethodProps@@QBEHK@Z']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_B88B']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z']
movzx ['ecx,', 'word', 'ptr', '[eax+8]']
cmp ['ecx,', '13h']
jnz ['short', 'loc_B88B']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z']
mov ['eax,', '[eax+10h]']
jmp ['short', 'loc_B8C9']
mov ['ecx,', '[ebp+var_4]']
call ['?GetLevel@CMethodProps@@QBEHXZ']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '5']
jg ['short', 'loc_B8AF']
mov ['eax,', '[ebp+var_C]']
lea ['ecx,', '[eax+eax+0Eh]']
mov ['edx,', '1']
shl ['edx,', 'cl']
mov ['[ebp+var_10],', 'edx']
jmp ['short', 'loc_B8C6']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', '6']
neg ['eax']
sbb ['eax,', 'eax']
and ['eax,', '2000000h']
add ['eax,', '2000000h']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0COneMethodInfo@@QAE@XZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0COneMethodInfo@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0CMethodProps@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??0AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0UString@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0COneMethodInfo@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1CMethodProps@@QAE@XZ']
endp
__unwindfunclet$??0COneMethodInfo@@QAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1AString@@QAE@XZ']
endp
__ehhandler$??0COneMethodInfo@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0COneMethodInfo@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0CMethodProps@@QAE@XZ proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0CProps@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CProps@@QAE@XZ proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$CObjectVector@UCProp@@@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Wait@CThread@NWindows@@QAEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_Handle_WaitObject@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Get_NumThreads@CMethodProps@@QBEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0Dh']
mov ['ecx,', '[ebp+var_4]']
call ['?FindProp@CMethodProps@@QBEHK@Z']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_BA80']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z']
movzx ['ecx,', 'word', 'ptr', '[eax+8]']
cmp ['ecx,', '13h']
jnz ['short', 'loc_BA80']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z']
mov ['eax,', '[eax+10h]']
jmp ['short', 'loc_BA83']
or ['eax,', '0FFFFFFFFh']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Get_Lzma_NumThreads@CMethodProps@@QBEIAA_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
call ['?Get_NumThreads@CMethodProps@@QBEHXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_BAD6']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx],', '1']
xor ['eax,', 'eax']
cmp ['[ebp+var_8],', '2']
setnl ['al']
add ['eax,', '1']
jmp ['short', 'loc_BAE7']
mov ['ecx,', '[ebp+var_4]']
call ['?Get_Lzma_Algo@CMethodProps@@QBEIXZ']
neg ['eax']
sbb ['eax,', 'eax']
neg ['eax']
add ['eax,', '1']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Get_Lzma_Algo@CMethodProps@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
push ['0Ch']
mov ['ecx,', '[ebp+var_4]']
call ['?FindProp@CMethodProps@@QBEHK@Z']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jl ['short', 'loc_BB48']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z']
movzx ['ecx,', 'word', 'ptr', '[eax+8]']
cmp ['ecx,', '13h']
jnz ['short', 'loc_BB48']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z']
mov ['eax,', '[eax+10h]']
jmp ['short', 'loc_BB5A']
mov ['ecx,', '[ebp+var_4]']
call ['?GetLevel@CMethodProps@@QBEHXZ']
xor ['ecx,', 'ecx']
cmp ['eax,', '5']
setnl ['cl']
mov ['eax,', 'ecx']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?AddProp_NumThreads@CMethodProps@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0Dh']
mov ['ecx,', '[ebp+var_4]']
call ['?AddProp32@CProps@@QAEXKI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0CBenchProgressInfo@@QAE@XZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0ICompressProgressInfo@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??0CMyUnknownImp@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??0CBenchInfoCalc@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7CBenchProgressInfo@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+50h],', '0']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?QueryInterface@CBenchProgressInfo@@UAGJABU_GUID@@PAPAX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
push ['offset', '_IID_IUnknown']
mov ['ecx,', '[ebp+Buf1]']
push ['ecx']
call ['___@8']
test ['eax,', 'eax']
jz ['short', 'loc_BD68']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+this]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_BD6F']
mov ['eax,', '80004002h']
jmp ['short', 'loc_BD80']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['eax,', '[ebp+this]']
mov ['[eax+4],', 'edx']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
?AddRef@CBenchProgressInfo@@UAGKXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Release@CBenchProgressInfo@@UAGKXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+4],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_BDEF']
mov ['ecx,', '[ebp+this]']
mov ['eax,', '[ecx+4]']
jmp ['short', 'loc_BE03']
mov ['edx,', '[ebp+this]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0ICompressProgressInfo@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0IUnknown@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7ICompressProgressInfo@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CBenchInfoCalc@@QAE@XZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0CBenchInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GeComprCommands@CBenchProps@@QAE_K_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
xor ['edx,', 'edx']
push ['edx']
push ['ecx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_0]']
push ['ecx']
call ['__allmul']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?GeDecomprCommands@CBenchProps@@QAE_K_K0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
push ['edi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
xor ['edx,', 'edx']
push ['edx']
push ['ecx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_0]']
push ['ecx']
call ['__allmul']
mov ['esi,', 'eax']
mov ['edi,', 'edx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
xor ['ecx,', 'ecx']
push ['ecx']
push ['eax']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_8+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_8]']
push ['eax']
call ['__allmul']
add ['esi,', 'eax']
adc ['edi,', 'edx']
mov ['eax,', 'esi']
mov ['edx,', 'edi']
pop ['edi']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
?CreateEncoderThread@CEncoderInfo@@QAEJXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
push ['offset', '?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z']
mov ['ecx,', '[ebp+var_4]']
call ['?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_Thread_Create@12']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '10h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_14],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_1C]']
mov ['eax,', '[ecx+30h]']
call ['__alloca_probe_16']
mov ['[ebp+var_10],', 'esp']
mov ['ecx,', '[ebp+var_1C]']
call ['?Encode@CEncoderInfo@@QAEJXZ']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax+0A4h],', 'ecx']
jmp ['short', 'loc_C016']
endp
__catch$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z$0 proc near
mov ['dword', 'ptr', '[ebp-18h],', '80004005h']
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', 'offset', '__tryend$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z$1']
retn
endp
__ehhandler$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?EncodeThreadFunction@CEncoderInfo@@SGIPAX@Z']
jmp ['___CxxFrameHandler3']
endp
?CreateDecoderThread@CEncoderInfo@@QAEJI_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '4']
mov ['ecx,', '[ebp+var_4]']
lea ['edx,', '[ecx+eax+78h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+0Ch],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['cl,', '[ebp+arg_4]']
mov ['[eax+8],', 'cl']
mov ['edx,', '[ebp+var_8]']
push ['edx']
push ['offset', '?DecodeThreadFunction@CEncoderInfo@@SGIPAX@Z']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
lea ['ecx,', '[ecx+eax*4]']
call ['?Create@CThread@NWindows@@QAEIP6GIPAX@Z0@Z']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?DecodeThreadFunction@CEncoderInfo@@SGIPAX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[ecx+0Ch]']
call ['__alloca_probe_16']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+var_C]']
call ['?Decode@CEncoderInfo@@QAEJI@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+edx*4+0A4h],', 'eax']
xor ['eax,', 'eax']
lea ['esp,', '[ebp-0Ch]']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0CBenchEncoders@@QAE@I@Z proc near    
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0CBenchEncoders@@QAE@I@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'ecx']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['edx,', '118h']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
xor ['eax,', 'eax']
add ['ecx,', '4']
setb ['al']
neg ['eax']
or ['eax,', 'ecx']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_C275']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx],', 'edx']
push ['offset', '??1CEncoderInfo@@QAE@XZ']
push ['offset', '??0CEncoderInfo@@QAE@XZ']
mov ['eax,', '[ebp+var_14]']
push ['eax']
push ['118h']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '4']
push ['ecx']
call ['??_L@YGXPAXIHP6EX0@Z1@Z']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_C27C']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_18]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0CBenchEncoders@@QAE@I@Z$0 proc near
mov ['eax,', '[ebp-1Ch]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__ehhandler$??0CBenchEncoders@@QAE@I@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0CBenchEncoders@@QAE@I@Z']
jmp ['___CxxFrameHandler3']
endp
??0CEncoderInfo@@QAE@XZ proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0CEncoderInfo@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['offset', '??1CThread@NWindows@@QAE@XZ']
push ['offset', '??0CThread@NWindows@@QAE@XZ']
push ['2']
push ['4']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['??_L@YGXPAXIHP6EX0@Z1@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '10h']
call ['??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
push ['offset', '??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ']
push ['offset', '??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ']
push ['2']
push ['4']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1Ch']
push ['ecx']
call ['??_L@YGXPAXIHP6EX0@Z1@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_10]']
mov ['byte', 'ptr', '[edx+74h],', '1']
mov ['eax,', '[ebp+var_10]']
mov ['byte', 'ptr', '[eax+75h],', '1']
push ['offset', '??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ']
push ['offset', '??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ']
push ['2']
push ['4']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '98h']
push ['ecx']
call ['??_L@YGXPAXIHP6EX0@Z1@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0A0h']
call ['??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['edx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[edx+0ACh],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0B0h']
call ['??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+0B4h],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+0B8h],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0C8h']
call ['??0CBenchRandomGenerator@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0D8h']
call ['??0CBenchBuffer@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
mov ['edx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[edx+0E4h],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0E8h']
call ['??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '9']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0ECh']
call ['??0COneMethodInfo@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$0 proc near
push ['offset', '??1CThread@NWindows@@QAE@XZ']
push ['2']
push ['4']
mov ['eax,', '[ebp-10h]']
push ['eax']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
retn
endp
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ']
endp
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$2 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '10h']
jmp ['??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ']
endp
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$3 proc near
push ['offset', '??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ']
push ['2']
push ['4']
mov ['eax,', '[ebp-10h]']
add ['eax,', '1Ch']
push ['eax']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
retn
endp
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$4 proc near
push ['offset', '??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ']
push ['2']
push ['4']
mov ['eax,', '[ebp-10h]']
add ['eax,', '98h']
push ['eax']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
retn
endp
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$5 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0A0h']
jmp ['??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ']
endp
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$6 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0B0h']
jmp ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
endp
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$7 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0C8h']
jmp ['??1CBenchRandomGenerator@@UAE@XZ']
endp
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$8 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0D8h']
jmp ['??1CBenchBuffer@@UAE@XZ']
endp
__unwindfunclet$??0CEncoderInfo@@QAE@XZ$9 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0E8h']
jmp ['??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ']
endp
__ehhandler$??0CEncoderInfo@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0CEncoderInfo@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0CThread@NWindows@@QAE@XZ proc near   
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CBenchRandomGenerator@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0CBenchBuffer@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7CBenchRandomGenerator@@6B@']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??_GCBenchRandomGenerator@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1CBenchRandomGenerator@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_C69A']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1CBenchEncoders@@QAE@XZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_C6ED']
push ['3']
mov ['ecx,', '[ebp+var_8]']
call ['??_ECEncoderInfo@@QAEPAXI@Z']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_C6F4']
mov ['[ebp+var_10],', '0']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0COneMethodInfo@@QAE@ABV0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0CMethodProps@@QAE@ABV0@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '0Ch']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??0AString@@QAE@ABV0@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '18h']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '18h']
call ['??0UString@@QAE@ABV0@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1CMethodProps@@QAE@XZ']
endp
__unwindfunclet$??0COneMethodInfo@@QAE@ABV0@@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1AString@@QAE@XZ']
endp
__ehhandler$??0COneMethodInfo@@QAE@ABV0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0COneMethodInfo@@QAE@ABV0@@Z']
jmp ['___CxxFrameHandler3']
endp
??0CCreatedCoder@@QAE@XZ proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0CCreatedCoder@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0CCreatedCoder@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ']
endp
__ehhandler$??0CCreatedCoder@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0CCreatedCoder@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1CCreatedCoder@@QAE@XZ proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1CCreatedCoder@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1CCreatedCoder@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ']
endp
__ehhandler$??1CCreatedCoder@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1CCreatedCoder@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??4COneMethodInfo@@QAEAAV0@ABV0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??4CMethodProps@@QAEAAV0@ABV0@@Z']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '0Ch']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['??4AString@@QAEAAV0@ABV0@@Z']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '18h']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '18h']
call ['??4UString@@QAEAAV0@ABV0@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0CBenchProgressStatus@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_CriticalSection_Init@4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1CBenchProgressStatus@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1CCriticalSection@NSynchronization@NWindows@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+lpCriticalSection],', '0CCCCCCCCh']
mov ['[ebp+lpCriticalSection],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+lpCriticalSection]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__DeleteCriticalSection@4']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CMethodProps@@QAE@ABV0@@Z proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0CProps@@QAE@ABU0@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??4CMethodProps@@QAEAAV0@ABV0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??4CProps@@QAEAAU0@ABU0@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0CProps@@QAE@ABU0@@Z proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??4CProps@@QAEAAU0@ABU0@@Z proc near    
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?SetSum@CTotalBenchRes@@QAEXABU1@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax+8]']
add ['edx,', '[ecx+8]']
mov ['eax,', '[eax+0Ch]']
adc ['eax,', '[ecx+0Ch]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'edx']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[edx+10h]']
add ['ecx,', '[eax+10h]']
mov ['edx,', '[edx+14h]']
adc ['edx,', '[eax+14h]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+10h],', 'ecx']
mov ['[eax+14h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ecx+18h]']
add ['eax,', '[edx+18h]']
mov ['ecx,', '[ecx+1Ch]']
adc ['ecx,', '[edx+1Ch]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+18h],', 'eax']
mov ['[edx+1Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
add ['edx,', '[ecx]']
mov ['eax,', '[eax+4]']
adc ['eax,', '[ecx+4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'edx']
mov ['[ecx+4],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??0CBenchCallbackToPrint@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0IBenchCallback@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7CBenchCallbackToPrint@@6B@']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??0CBenchProps@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[ecx+60h],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+64h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['byte', 'ptr', '[eax+68h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+70h],', '0']
mov ['dword', 'ptr', '[ecx+74h],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+78h],', '1']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+7Ch],', '1']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Init@CBenchCallbackToPrint@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '18h']
call ['?Init@CTotalBenchRes@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '38h']
call ['?Init@CTotalBenchRes@@QAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Init@CTotalBenchRes@@QAEXXZ proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+10h],', '0']
mov ['dword', 'ptr', '[edx+14h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+18h],', '0']
mov ['dword', 'ptr', '[eax+1Ch],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0IBenchCallback@@QAE@XZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7IBenchCallback@@6B@']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CFreqThreads@@QAE@XZ proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?WaitAll@CFreqThreads@@QAEXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_CE15']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+4]']
jnb ['short', 'loc_CE32']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '5']
mov ['eax,', '[ebp+var_4]']
add ['ecx,', '[eax]']
call ['?Wait@CFreqInfo@@QAEXXZ']
jmp ['short', 'loc_CE0C']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Wait@CFreqInfo@@QAEXXZ proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Wait@CThread@NWindows@@QAEIXZ']
mov ['ecx,', '[ebp+var_4]']
call ['?Close@CThread@NWindows@@QAEIXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1CFreqThreads@@QAE@XZ proc near       
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?WaitAll@CFreqThreads@@QAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_CEBD']
push ['3']
mov ['ecx,', '[ebp+var_8]']
call ['??_ECFreqInfo@@QAEPAXI@Z']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_CEC4']
mov ['[ebp+var_10],', '0']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CFreqInfo@@QAE@XZ proc near          
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0CThread@NWindows@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CCrcThreads@@QAE@XZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?WaitAll@CCrcThreads@@QAEXXZ proc near  
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_CF4D']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+4]']
jnb ['short', 'loc_CF6A']
mov ['ecx,', '[ebp+var_8]']
imul ['ecx,', '38h']
mov ['eax,', '[ebp+var_4]']
add ['ecx,', '[eax]']
call ['?Wait@CCrcInfo@@QAEXXZ']
jmp ['short', 'loc_CF44']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Wait@CCrcInfo@@QAEXXZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Wait@CThread@NWindows@@QAEIXZ']
mov ['ecx,', '[ebp+var_4]']
call ['?Close@CThread@NWindows@@QAEIXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1CCrcThreads@@QAE@XZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?WaitAll@CCrcThreads@@QAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_CFF5']
push ['3']
mov ['ecx,', '[ebp+var_8]']
call ['??_ECCrcInfo@@QAEPAXI@Z']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_CFFC']
mov ['[ebp+var_10],', '0']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CCrcInfo@@QAE@XZ proc near           
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0CCrcInfo@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['[ebp+var_10],', '0CCCCCCCCh']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0CThread@NWindows@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '28h']
call ['??0?$CMyComPtr@UIHasher@@@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0CCrcInfo@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1CThread@NWindows@@QAE@XZ']
endp
__ehhandler$??0CCrcInfo@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0CCrcInfo@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0CTempValues@@QAE@I@Z proc near       
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '8']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1CTempValues@@QAE@XZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?MyCharLower_Ascii@@YGDD@Z proc near    
push ['ebp']
mov ['ebp,', 'esp']
movsx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '41h']
jl ['short', 'loc_D176']
movsx ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '5Ah']
jg ['short', 'loc_D176']
movzx ['eax,', '[ebp+arg_0]']
add ['eax,', '20h']
jmp ['short', 'loc_D179']
mov ['al,', '[ebp+arg_0]']
pop ['ebp']
retn ['4']
endp
?Size@?$CObjectVector@UCProp@@@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CObjectVector@UCProp@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$CRecordVector@PAX@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$CRecordVector@PAX@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_0]']
call ['?Size@?$CObjectVector@UCProp@@@@QBEIXZ']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_D243']
mov ['ecx,', '[ebp+var_18]']
add ['ecx,', '1']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
cmp ['edx,', '[ebp+var_14]']
jnb ['short', 'loc_D29B']
push ['18h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_D27C']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
call ['??0CProp@@QAE@ABU0@@Z']
mov ['[ebp+var_24],', 'eax']
jmp ['short', 'loc_D283']
mov ['[ebp+var_24],', '0']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_1C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z']
jmp ['short', 'loc_D23A']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$CRecordVector@PAX@@QAE@XZ']
endp
__unwindfunclet$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z$1 proc near
mov ['eax,', '[ebp-20h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__ehhandler$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$CObjectVector@UCProp@@@@QAE@ABV0@@Z']
jmp ['___CxxFrameHandler3']
endp
??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+var_10]']
jnz ['short', 'loc_D373']
mov ['eax,', '[ebp+var_10]']
jmp ['loc_D405']
mov ['ecx,', '[ebp+var_10]']
call ['?Clear@?$CObjectVector@UCProp@@@@QAEXXZ']
mov ['ecx,', '[ebp+arg_0]']
call ['?Size@?$CObjectVector@UCProp@@@@QBEIXZ']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?Reserve@?$CRecordVector@PAX@@QAEXI@Z']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_D3A4']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
cmp ['eax,', '[ebp+var_14]']
jnb ['short', 'loc_D402']
push ['18h']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_D3E0']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
call ['??0CProp@@QAE@ABU0@@Z']
mov ['[ebp+var_24],', 'eax']
jmp ['short', 'loc_D3E7']
mov ['[ebp+var_24],', '0']
mov ['edx,', '[ebp+var_24]']
mov ['[ebp+var_1C],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z']
jmp ['short', 'loc_D39B']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z$0 proc near
mov ['eax,', '[ebp-20h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__ehhandler$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??4?$CObjectVector@UCProp@@@@QAEAAV0@ABV0@@Z']
jmp ['___CxxFrameHandler3']
endp
??A?$CObjectVector@UCProp@@@@QBEABUCProp@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CRecordVector@PAX@@QBEABQAXI@Z']
mov ['eax,', '[eax]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_D532']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??A?$CRecordVector@PAX@@QAEAAPAXI@Z']
mov ['edx,', '[eax]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_D529']
push ['1']
mov ['ecx,', '[ebp+var_18]']
call ['??_GCProp@@QAEPAXI@Z']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_D530']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_D4EE']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$CRecordVector@PAX@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$CObjectVector@UCProp@@@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$CRecordVector@PAX@@QAE@XZ']
endp
__ehhandler$??1?$CObjectVector@UCProp@@@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$CObjectVector@UCProp@@@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
?Clear@?$CObjectVector@UCProp@@@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_D618']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CRecordVector@PAX@@QAEAAPAXI@Z']
mov ['edx,', '[eax]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_D60F']
push ['1']
mov ['ecx,', '[ebp+var_C]']
call ['??_GCProp@@QAEPAXI@Z']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_D616']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_D5D4']
mov ['ecx,', '[ebp+var_4]']
call ['?Clear@?$CRecordVector@PAX@@QAEXXZ']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1?$CMyComPtr@UICompressCoder@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_D682']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Release@?$CMyComPtr@UICompressCoder@@@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_D6CF']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??B?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??C?$CMyComPtr@UICompressCoder@@@@QBEPAUICompressCoder@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@ABV0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??7?$CMyComPtr@UICompressCoder@@@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax],', '0']
setz ['cl']
mov ['al,', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CMyComPtr@UICompressCoder2@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1?$CMyComPtr@UICompressCoder2@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_D7AE']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CMyComPtr@UICompressFilter@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1?$CMyComPtr@UICompressFilter@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_D812']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Release@?$CMyComPtr@UICompressFilter@@@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_D85F']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??B?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??C?$CMyComPtr@UICompressFilter@@@@QBEPAUICompressFilter@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??7?$CMyComPtr@UICompressFilter@@@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax],', '0']
setz ['cl']
mov ['al,', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1?$CMyComPtr@UICompressProgressInfo@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_D912']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??B?$CMyComPtr@UICompressProgressInfo@@@@QBEPAUICompressProgressInfo@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??4?$CMyComPtr@UICompressProgressInfo@@@@QAEPAUICompressProgressInfo@@PAU1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_D968']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ecx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx],', '0']
jz ['short', 'loc_D98B']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[eax]']
mov ['esi,', 'esp']
push ['edx']
mov ['ecx,', '[eax+8]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CMyComPtr@UISequentialOutStream@@@@QAE@PAUISequentialOutStream@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_D9FC']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[eax+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1?$CMyComPtr@UISequentialOutStream@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_DA42']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??B?$CMyComPtr@UISequentialOutStream@@@@QBEPAUISequentialOutStream@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??4?$CMyComPtr@UISequentialOutStream@@@@QAEPAUISequentialOutStream@@PAU1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_DA98']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ecx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx],', '0']
jz ['short', 'loc_DABB']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[eax]']
mov ['esi,', 'esp']
push ['edx']
mov ['ecx,', '[eax+8]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??7?$CMyComPtr@UISequentialOutStream@@@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax],', '0']
setz ['cl']
mov ['al,', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1?$CMyComPtr@UIUnknown@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_DB4A']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??4?$CMyComPtr@UIUnknown@@@@QAEPAUIUnknown@@PAU1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_DB88']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ecx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx],', '0']
jz ['short', 'loc_DBAB']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[eax]']
mov ['esi,', 'esp']
push ['edx']
mov ['ecx,', '[eax+8]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1?$CMyComPtr@UICompressSetCoderProperties@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_DC1A']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??B?$CMyComPtr@UICompressSetCoderProperties@@@@QBEPAUICompressSetCoderProperties@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??I?$CMyComPtr@UICompressSetCoderProperties@@@@QAEPAPAUICompressSetCoderProperties@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1?$CMyComPtr@UICompressWriteCoderProperties@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_DCAE']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??B?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??I?$CMyComPtr@UICompressWriteCoderProperties@@@@QAEPAPAUICompressWriteCoderProperties@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??C?$CMyComPtr@UICompressWriteCoderProperties@@@@QBEPAUICompressWriteCoderProperties@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1?$CMyComPtr@UICryptoSetPassword@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_DD5A']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??B?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??I?$CMyComPtr@UICryptoSetPassword@@@@QAEPAPAUICryptoSetPassword@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??C?$CMyComPtr@UICryptoSetPassword@@@@QBEPAUICryptoSetPassword@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CMyComPtr@UISequentialInStream@@@@QAE@PAUISequentialInStream@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_DDE8']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[eax+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1?$CMyComPtr@UISequentialInStream@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_DE2E']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??B?$CMyComPtr@UISequentialInStream@@@@QBEPAUISequentialInStream@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CMyComPtr@UICryptoProperties@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1?$CMyComPtr@UICryptoProperties@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_DEAA']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??B?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??I?$CMyComPtr@UICryptoProperties@@@@QAEPAPAUICryptoProperties@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??C?$CMyComPtr@UICryptoProperties@@@@QBEPAUICryptoProperties@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_DF56']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??B?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??I?$CMyComPtr@UICompressSetDecoderProperties2@@@@QAEPAPAUICompressSetDecoderProperties2@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??C?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBEPAUICompressSetDecoderProperties2@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??7?$CMyComPtr@UICompressSetDecoderProperties2@@@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax],', '0']
setz ['cl']
mov ['al,', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1?$CMyComPtr@UICompressSetCoderMt@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_E022']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??B?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??I?$CMyComPtr@UICompressSetCoderMt@@@@QAEPAPAUICompressSetCoderMt@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??C?$CMyComPtr@UICompressSetCoderMt@@@@QBEPAUICompressSetCoderMt@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CMyComPtr@UIHasher@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1?$CMyComPtr@UIHasher@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_E0CE']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[edx]']
mov ['esi,', 'esp']
push ['ecx']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??B?$CMyComPtr@UIHasher@@@@QBEPAUIHasher@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??7?$CMyComPtr@UIHasher@@@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax],', '0']
setz ['cl']
mov ['al,', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Size@?$CObjectVector@UCProperty@@@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??A?$CObjectVector@UCProperty@@@@QBEABUCProperty@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CRecordVector@PAX@@QBEABQAXI@Z']
mov ['eax,', '[eax]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0CProp@@QAE@ABU0@@Z proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', '[ecx+4]']
mov ['[eax+4],', 'dl']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '8']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??0CPropVariant@NCOM@NWindows@@QAE@ABV012@@Z']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_GCProp@@QAEPAXI@Z proc near          
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1CProp@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_E1DE']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1CProp@@QAE@XZ proc near              
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??1CPropVariant@NCOM@NWindows@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CRecordVector@PAX@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Size@?$CRecordVector@PAX@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?ConstructReserve@?$CRecordVector@PAX@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_E2B5']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '4']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx+8],', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Reserve@?$CRecordVector@PAX@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+Dst],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+8]']
jbe ['short', 'loc_E35C']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '4']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_E337']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+Dst]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1?$CRecordVector@PAX@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?AddInReserved@?$CRecordVector@PAX@@QAEXQAX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['edx,', '[ebp+arg_0]']
mov ['[eax+ecx*4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??4?$CMyComPtr@UICompressCoder@@@@QAEPAUICompressCoder@@PAU1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_E464']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ecx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx],', '0']
jz ['short', 'loc_E487']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[eax]']
mov ['esi,', 'esp']
push ['edx']
mov ['ecx,', '[eax+8]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+arg_0]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[eax]']
push ['edx']
mov ['ecx,', '[eax]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$QueryInterface@UICompressWriteCoderProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressWriteCoderProperties@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[eax]']
push ['edx']
mov ['ecx,', '[eax]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$QueryInterface@UICryptoSetPassword@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoSetPassword@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[eax]']
push ['edx']
mov ['ecx,', '[eax]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$QueryInterface@UICryptoProperties@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICryptoProperties@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[eax]']
push ['edx']
mov ['ecx,', '[eax]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$QueryInterface@UICompressSetDecoderProperties2@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetDecoderProperties2@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[eax]']
push ['edx']
mov ['ecx,', '[eax]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$QueryInterface@UICompressSetCoderMt@@@?$CMyComPtr@UIUnknown@@@@QBEJABU_GUID@@PAPAUICompressSetCoderMt@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[eax]']
push ['edx']
mov ['ecx,', '[eax]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$QueryInterface@UICompressSetCoderProperties@@@?$CMyComPtr@UIHasher@@@@QBEJABU_GUID@@PAPAUICompressSetCoderProperties@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[eax]']
push ['edx']
mov ['ecx,', '[eax]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??_ECBenchmarkOutStream@@W3AEPAXI@Z proc near
sub ['ecx,', '4']
jmp ['??_ECBenchmarkOutStream@@UAEPAXI@Z']
endp
??_GCBenchmarkOutStream@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1CBenchmarkOutStream@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_E6B2']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1CBenchmarkOutStream@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['??1CBenchBuffer@@UAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
