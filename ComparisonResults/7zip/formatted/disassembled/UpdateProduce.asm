?UpdateProduce@@YGXABV?$CRecordVector@UCUpdatePair@@@@ABUCActionSet@NUpdateArchive@@AAV?$CRecordVector@UCUpdatePair2@@@@PAUIUpdateProduceCallback@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '30h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_30]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_55']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?Size@?$CRecordVector@UCUpdatePair@@@@QBEIXZ']
cmp ['[ebp+var_4],', 'eax']
jnb ['loc_1B4']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??A?$CRecordVector@UCUpdatePair@@@@QBEABUCUpdatePair@@I@Z']
mov ['[ebp+var_8],', 'eax']
lea ['ecx,', '[ebp+var_20]']
call ['??0CUpdatePair2@@QAE@XZ']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_18],', 'edx']
mov ['byte', 'ptr', '[ebp+var_20+1],', '1']
mov ['al,', 'byte', 'ptr', '[ebp+var_20+1]']
mov ['byte', 'ptr', '[ebp+var_20],', 'al']
mov ['byte', 'ptr', '[ebp+var_20+2],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_30],', 'ecx']
cmp ['[ebp+var_30],', '3']
ja ['loc_185']
mov ['edx,', '[ebp+var_30]']
jmp ['ds:$LN22[edx*4]']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jl ['short', 'loc_EA']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_EA']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_4C']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx],', '2']
jnz ['short', 'loc_10E']
mov ['edx,', 'ds:_kUpdateActionSetCollision']
mov ['[ebp+var_28],', 'edx']
push ['offset', '__TI2CPAD']
lea ['eax,', '[ebp+var_28]']
push ['eax']
call ['__CxxThrowException@8']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx],', '1']
jnz ['short', 'loc_139']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx+0Ch],', '0']
jl ['short', 'loc_139']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??A?$CRecordVector@UCUpdatePair@@@@QBEABUCUpdatePair@@I@Z']
cmp ['dword', 'ptr', '[eax+8],', '0']
jl ['short', 'loc_139']
jmp ['loc_4C']
mov ['byte', 'ptr', '[ebp+var_20+1],', '0']
mov ['dl,', 'byte', 'ptr', '[ebp+var_20+1]']
mov ['byte', 'ptr', '[ebp+var_20],', 'dl']
mov ['byte', 'ptr', '[ebp+var_20+2],', '1']
jmp ['short', 'loc_185']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax],', '1']
jz ['short', 'loc_159']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx],', '0']
jnz ['short', 'loc_170']
mov ['edx,', 'ds:_kUpdateActionSetCollision']
mov ['[ebp+var_2C],', 'edx']
push ['offset', '__TI2CPAD']
lea ['eax,', '[ebp+var_2C]']
push ['eax']
call ['__CxxThrowException@8']
jmp ['short', 'loc_185']
mov ['byte', 'ptr', '[ebp+var_20+3],', '1']
mov ['ecx,', '[ebp+var_8]']
xor ['edx,', 'edx']
cmp ['dword', 'ptr', '[ecx+4],', '0']
setnl ['dl']
mov ['byte', 'ptr', '[ebp+var_20+2],', 'dl']
sub ['esp,', '14h']
mov ['eax,', 'esp']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+var_18]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[eax+0Ch],', 'edx']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax+10h],', 'ecx']
mov ['ecx,', '[ebp+arg_8]']
call ['?Add@?$CRecordVector@UCUpdatePair2@@@@QAEIUCUpdatePair2@@@Z']
jmp ['loc_4C']
mov ['ecx,', '[ebp+arg_8]']
call ['?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN21']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
??0CUpdatePair2@@QAE@XZ proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[ecx+1],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[edx+2],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['byte', 'ptr', '[eax+3],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[ecx+10h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Size@?$CRecordVector@UCUpdatePair@@@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??A?$CRecordVector@UCUpdatePair@@@@QBEABUCUpdatePair@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '4']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+Dst],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[eax+4]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_369']
jmp ['loc_42C']
mov ['[ebp+Dst],', '0']
mov ['eax,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['loc_404']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_18],', 'edx']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+var_18]']
mov ['edx,', '14h']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_3CE']
push ['offset', '??0CUpdatePair2@@QAE@XZ']
mov ['eax,', '[ebp+var_18]']
push ['eax']
push ['14h']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
call ['??_H@YGXPAXIHP6EPAX0@Z@Z']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_28],', 'edx']
jmp ['short', 'loc_3D5']
mov ['[ebp+var_28],', '0']
mov ['eax,', '[ebp+var_28]']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ebp+Dst],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+4]']
imul ['eax,', '14h']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+Dst]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+4]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ$0 proc near
mov ['eax,', '[ebp-20h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__ehhandler$?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?ReserveDown@?$CRecordVector@UCUpdatePair2@@@@QAEXXZ']
jmp ['___CxxFrameHandler3']
endp
?Add@?$CRecordVector@UCUpdatePair2@@@@QAEIUCUpdatePair2@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
imul ['ecx,', '14h']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
add ['eax,', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['[eax+0Ch],', 'edx']
mov ['ecx,', '[ebp+arg_10]']
mov ['[eax+10h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
??_H@YGXPAXIHP6EPAX0@Z@Z proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
js ['short', 'loc_53D']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['[ebp+arg_C]']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+arg_4]']
mov ['[ebp+arg_0],', 'ecx']
jmp ['short', 'loc_518']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['10h']
endp
?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+Dst],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[eax+4]']
cmp ['edx,', '[ecx+8]']
jnz ['loc_66B']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+8]']
shr ['ecx,', '2']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
lea ['ecx,', '[eax+ecx+1]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'edx']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+var_1C]']
mov ['edx,', '14h']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_24],', '0']
jz ['short', 'loc_607']
push ['offset', '??0CUpdatePair2@@QAE@XZ']
mov ['eax,', '[ebp+var_1C]']
push ['eax']
push ['14h']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
call ['??_H@YGXPAXIHP6EPAX0@Z@Z']
mov ['edx,', '[ebp+var_24]']
mov ['[ebp+var_2C],', 'edx']
jmp ['short', 'loc_60E']
mov ['[ebp+var_2C],', '0']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+Dst],', 'ecx']
mov ['edx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jz ['short', 'loc_646']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+4]']
imul ['ecx,', '14h']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+Dst]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+8],', 'edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ$0 proc near
mov ['eax,', '[ebp-24h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__ehhandler$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?ReserveOnePosition@?$CRecordVector@UCUpdatePair2@@@@AAEXXZ']
jmp ['___CxxFrameHandler3']
endp
