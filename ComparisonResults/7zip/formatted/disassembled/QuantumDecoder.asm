?Init@CDecoder@NQuantum@NCompress@@AAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', 'ecx']
push ['7']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '88h']
call ['?Init@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEXI@Z']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_47']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '4']
jnb ['short', 'loc_69']
push ['40h']
mov ['ecx,', '[ebp+var_C]']
imul ['ecx,', '0CCh']
mov ['edx,', '[ebp+var_8]']
lea ['ecx,', '[edx+ecx+154h]']
call ['?Init@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEXI@Z']
jmp ['short', 'loc_3E']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+80h],', '0']
jnz ['short', 'loc_7E']
mov ['[ebp+var_28],', '1']
jmp ['short', 'loc_8C']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+80h]']
shl ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_28]']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_20],', '18h']
mov ['[ebp+var_1C],', '24h']
mov ['[ebp+var_18],', '2Ah']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_B9']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '3']
jnb ['short', 'loc_EB']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+edx*4+var_20]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['??$MyMin@I@@YGIII@Z']
push ['eax']
mov ['edx,', '[ebp+var_C]']
imul ['edx,', '0CCh']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[eax+edx+484h]']
call ['?Init@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEXI@Z']
jmp ['short', 'loc_B0']
push ['1Bh']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '6E8h']
call ['?Init@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEXI@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?CodeSpec@CDecoder@NQuantum@NCompress@@AAEJI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['ebx']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+78h],', '0FFFFFFFEh']
jnz ['short', 'loc_18B']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '30h']
call ['?Init@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+78h],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_198']
xor ['eax,', 'eax']
jmp ['loc_3C3']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+78h],', '0']
jle ['short', 'loc_1E6']
cmp ['[ebp+arg_0],', '0']
jbe ['short', 'loc_1E6']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+78h]']
sub ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+78h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+7Ch]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?GetByte@CLzOutWindow@@QBEEI@Z']
mov ['[ebp+var_5],', 'al']
movzx ['edx,', '[ebp+var_5]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?PutByte@CLzOutWindow@@QAEXE@Z']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_198']
cmp ['[ebp+arg_0],', '0']
jbe ['loc_3AF']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?WasFinished@CStreamBitDecoder@NQuantum@NCompress@@QBE_NXZ']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_20C']
mov ['eax,', '1']
jmp ['loc_3C3']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '30h']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '88h']
call ['?Decode@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEIPAVCDecoder@234@@Z']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '4']
jnb ['short', 'loc_272']
mov ['ebx,', '[ebp+var_C]']
shl ['ebx,', '6']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '30h']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
imul ['ecx,', '0CCh']
mov ['edx,', '[ebp+var_4]']
lea ['ecx,', '[edx+ecx+154h]']
call ['?Decode@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEIPAVCDecoder@234@@Z']
add ['ebx,', 'eax']
mov ['[ebp+var_D],', 'bl']
movzx ['eax,', '[ebp+var_D]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?PutByte@CLzOutWindow@@QAEXE@Z']
mov ['ecx,', '[ebp+arg_0]']
sub ['ecx,', '1']
mov ['[ebp+arg_0],', 'ecx']
jmp ['loc_3AA']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '4']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '3']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_C],', '2']
jnz ['short', 'loc_2F8']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '30h']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '6E8h']
call ['?Decode@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEIPAVCDecoder@234@@Z']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '6']
jb ['short', 'loc_2EF']
mov ['edx,', '[ebp+var_18]']
sub ['edx,', '2']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
shr ['eax,', '2']
mov ['[ebp+var_1C],', 'eax']
mov ['edx,', '[ebp+var_18]']
and ['edx,', '3']
or ['edx,', '4']
mov ['ecx,', '[ebp+var_1C]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[eax+edx-2]']
mov ['[ebp+var_14],', 'ecx']
cmp ['[ebp+var_1C],', '6']
jge ['short', 'loc_2ED']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?ReadBits@CStreamBitDecoder@NQuantum@NCompress@@QAEIH@Z']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_2F8']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_18]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '30h']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
imul ['edx,', '0CCh']
mov ['eax,', '[ebp+var_4]']
lea ['ecx,', '[eax+edx+484h]']
call ['?Decode@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEIPAVCDecoder@234@@Z']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '4']
jb ['short', 'loc_34D']
mov ['ecx,', '[ebp+var_20]']
shr ['ecx,', '1']
sub ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
mov ['esi,', '[ebp+var_20]']
and ['esi,', '1']
or ['esi,', '2']
mov ['ecx,', '[ebp+var_24]']
shl ['esi,', 'cl']
mov ['edx,', '[ebp+var_24]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?ReadBits@CStreamBitDecoder@NQuantum@NCompress@@QAEIH@Z']
add ['esi,', 'eax']
mov ['[ebp+var_20],', 'esi']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[ebp+arg_0]']
jbe ['short', 'loc_361']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?CopyBlock@CLzOutWindow@@QAE_NII@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_382']
mov ['eax,', '1']
jmp ['short', 'loc_3C3']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '[ebp+var_28]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_14],', 'ecx']
jz ['short', 'loc_3AA']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+78h],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_20]']
mov ['[ecx+7Ch],', 'edx']
jmp ['short', 'loc_3AF']
jmp ['loc_1E6']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?WasFinished@CStreamBitDecoder@NQuantum@NCompress@@QBE_NXZ']
movzx ['eax,', 'al']
neg ['eax']
sbb ['eax,', 'eax']
neg ['eax']
pop ['edi']
pop ['esi']
pop ['ebx']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '6Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_78]']
mov ['ecx,', '1Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+arg_C],', '0']
jnz ['short', 'loc_42B']
mov ['eax,', '80070057h']
jmp ['loc_5B4']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[eax+4]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '30h']
call ['?SetStream@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXPAUISequentialInStream@@@Z']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ecx+10h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_24]']
call ['??0CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@PAV123@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['?GetProcessedSize@COutBuffer@@QBE_KXZ']
mov ['[ebp+var_30],', 'eax']
mov ['[ebp+var_2C],', 'edx']
mov ['[ebp+var_34],', '40000h']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['?GetProcessedSize@COutBuffer@@QBE_KXZ']
sub ['eax,', '[ebp+var_30]']
sbb ['edx,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_18]']
sub ['ecx,', 'eax']
mov ['eax,', '[ebp+var_14]']
sbb ['eax,', 'edx']
mov ['[ebp+var_3C],', 'ecx']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_34]']
xor ['edx,', 'edx']
mov ['[ebp+var_78],', 'ecx']
mov ['[ebp+var_74],', 'edx']
mov ['eax,', '[ebp+var_74]']
cmp ['eax,', '[ebp+var_38]']
jb ['short', 'loc_4E1']
ja ['short', 'loc_4DB']
mov ['ecx,', '[ebp+var_78]']
cmp ['ecx,', '[ebp+var_3C]']
jbe ['short', 'loc_4E1']
mov ['edx,', '[ebp+var_3C]']
mov ['[ebp+var_34],', 'edx']
cmp ['[ebp+var_34],', '0']
jnz ['short', 'loc_4EC']
jmp ['loc_593']
mov ['eax,', '[ebp+var_34]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?CodeSpec@CDecoder@NQuantum@NCompress@@AAEJI@Z']
mov ['[ebp+var_40],', 'eax']
cmp ['[ebp+var_40],', '0']
jz ['short', 'loc_51E']
mov ['ecx,', '[ebp+var_40]']
mov ['[ebp+var_68],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_24]']
call ['??1CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@XZ']
mov ['eax,', '[ebp+var_68]']
jmp ['loc_5B4']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_58E']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '30h']
call ['?GetProcessedSize@CDecoder@NRangeCoder@NQuantum@NCompress@@QBE_KXZ']
mov ['[ebp+var_4C],', 'eax']
mov ['[ebp+var_48],', 'edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['?GetProcessedSize@COutBuffer@@QBE_KXZ']
sub ['eax,', '[ebp+var_30]']
sbb ['edx,', '[ebp+var_2C]']
mov ['[ebp+var_5C],', 'eax']
mov ['[ebp+var_58],', 'edx']
mov ['esi,', 'esp']
lea ['edx,', '[ebp+var_5C]']
push ['edx']
lea ['eax,', '[ebp+var_4C]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[edx+0Ch]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_64],', 'eax']
cmp ['[ebp+var_64],', '0']
jz ['short', 'loc_58E']
mov ['edx,', '[ebp+var_64]']
mov ['[ebp+var_6C],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_24]']
call ['??1CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@XZ']
mov ['eax,', '[ebp+var_6C]']
jmp ['short', 'loc_5B4']
jmp ['loc_496']
mov ['[ebp+var_20],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?Flush@CDecoder@NQuantum@NCompress@@QAEJXZ']
mov ['[ebp+var_70],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_24]']
call ['??1CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@XZ']
mov ['eax,', '[ebp+var_70]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN18']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '78h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '28h']
push ['ebx']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_38]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+this]']
call ['?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
jmp ['short', 'loc_700']
endp
__catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 proc near
mov ['edx,', '[ebp-18h]']
mov ['eax,', '[edx]']
mov ['[ebp-2Ch],', 'eax']
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', 'offset', '$LN9']
retn
endp
__catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$1 proc near
mov ['ecx,', '[ebp-24h]']
mov ['edx,', '[ecx]']
mov ['[ebp-30h],', 'edx']
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', 'offset', '$LN11_0']
retn
endp
__catch$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$2 proc near
mov ['dword', 'ptr', '[ebp-34h],', '1']
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
mov ['eax,', 'offset', '$LN13_1']
retn
endp
?SetOutStreamSize@CDecoder@NQuantum@NCompress@@UAGJPB_K@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_770']
mov ['eax,', '80004005h']
jmp ['short', 'loc_7A8']
mov ['eax,', '[ebp+this]']
mov ['dword', 'ptr', '[eax+78h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+this]']
movzx ['edx,', 'byte', 'ptr', '[ecx+84h]']
push ['edx']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '8']
call ['?Init@CLzOutWindow@@QAEX_N@Z']
mov ['eax,', '[ebp+this]']
movzx ['ecx,', 'byte', 'ptr', '[eax+84h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_7A6']
mov ['ecx,', '[ebp+this]']
call ['?Init@CDecoder@NQuantum@NCompress@@AAEXXZ']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
?SetParams@CDecoder@NQuantum@NCompress@@QAEJH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '15h']
jle ['short', 'loc_7DB']
mov ['eax,', '80070057h']
jmp ['short', 'loc_831']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+80h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '1']
mov ['ecx,', '[edx+80h]']
shl ['eax,', 'cl']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?Create@COutBuffer@@QAE_NI@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_811']
mov ['eax,', '8007000Eh']
jmp ['short', 'loc_831']
push ['100000h']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '30h']
call ['?Create@CDecoder@NRangeCoder@NQuantum@NCompress@@QAE_NI@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_82F']
mov ['eax,', '8007000Eh']
jmp ['short', 'loc_831']
xor ['eax,', 'eax']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Init@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '4']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_887']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_8B1']
mov ['edx,', '[ebp+arg_0]']
sub ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+eax*2+8],', 'dx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '[ebp+var_8]']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['[edx+8Ah],', 'al']
jmp ['short', 'loc_87E']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+edx*2+8],', 'cx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?CopyBlock@CLzOutWindow@@QAE_NII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '[ebp+arg_0]']
sub ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[edx+4]']
jb ['short', 'loc_925']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+24h]']
test ['edx,', 'edx']
jz ['short', 'loc_912']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+10h]']
jb ['short', 'loc_919']
xor ['al,', 'al']
jmp ['loc_A01']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[edx+10h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+8]']
sub ['eax,', '[edx+4]']
cmp ['eax,', '[ebp+arg_4]']
jbe ['short', 'loc_995']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
sub ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+arg_4]']
jbe ['short', 'loc_995']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+4]']
mov ['[ebp+var_10],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
add ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_C]']
mov ['cl,', '[eax]']
mov ['[edx],', 'cl']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
jnz ['short', 'loc_96C']
jmp ['short', 'loc_9FF']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[edx+10h]']
jnz ['short', 'loc_9A7']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['edx,', '[ebp+var_14]']
mov ['esi,', '[ebp+var_8]']
mov ['cl,', '[ecx+esi]']
mov ['[eax+edx],', 'cl']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[eax+8]']
jnz ['short', 'loc_9F4']
mov ['ecx,', '[ebp+var_4]']
call ['?FlushWithCheck@COutBuffer@@QAEXXZ']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
jnz ['short', 'loc_995']
mov ['al,', '1']
pop ['esi']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?PutByte@CLzOutWindow@@QAEXE@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_8]']
mov ['dl,', '[ebp+arg_0]']
mov ['[eax+ecx],', 'dl']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[eax+8]']
jnz ['short', 'loc_A67']
mov ['ecx,', '[ebp+var_4]']
call ['?FlushWithCheck@COutBuffer@@QAEXXZ']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?GetByte@CLzOutWindow@@QBEEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
sub ['ecx,', '[ebp+arg_0]']
sub ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[edx+4]']
jb ['short', 'loc_AB5']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ecx+10h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_8]']
mov ['al,', '[ecx+edx]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?WasFinished@CStreamBitDecoder@NQuantum@NCompress@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?WasFinished@CInBufferBase@@QBE_NXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?WasFinished@CInBufferBase@@QBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['al,', '[eax+1Ch]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?ReadBits@CStreamBitDecoder@NQuantum@NCompress@@QAEIH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['esi,', '[ebp+var_8]']
shl ['esi,', '1']
mov ['ecx,', '[ebp+var_4]']
call ['?ReadBit@CStreamBitDecoder@NQuantum@NCompress@@QAEIXZ']
or ['esi,', 'eax']
mov ['[ebp+var_8],', 'esi']
mov ['eax,', '[ebp+arg_0]']
sub ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
jnz ['short', 'loc_B27']
mov ['eax,', '[ebp+var_8]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?ReadBit@CStreamBitDecoder@NQuantum@NCompress@@QAEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '10000h']
jb ['short', 'loc_B93']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?ReadByte@CInBufferBase@@QAEEXZ']
movzx ['ecx,', 'al']
or ['ecx,', '100h']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
shr ['ecx,', '7']
and ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
shl ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?ReadByte@CInBufferBase@@QAEEXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx+4]']
jb ['short', 'loc_BEE']
mov ['ecx,', '[ebp+var_4]']
call ['?ReadByte_FromNewBlock@CInBufferBase@@IAEEXZ']
jmp ['short', 'loc_C08']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['dl,', '[ecx]']
mov ['byte', 'ptr', '[ebp+var_8+3],', 'dl']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'ecx']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Init@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['?Init@CStreamBitDecoder@NQuantum@NCompress@@QAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '10000h']
push ['10h']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['?ReadBits@CStreamBitDecoder@NQuantum@NCompress@@QAEIH@Z']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+8],', 'eax']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Init@CStreamBitDecoder@NQuantum@NCompress@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?Init@CInBufferBase@@QAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '10000h']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Decode@CModelDecoder@NRangeCoder@NQuantum@NCompress@@QAEIPAVCDecoder@234@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?GetThreshold@CDecoder@NRangeCoder@NQuantum@NCompress@@QBEII@Z']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_CD9']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+8]']
cmp ['edx,', '[ebp+var_8]']
jbe ['short', 'loc_CEB']
jmp ['short', 'loc_CD0']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+6]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?Decode@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXIII@Z']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8Ah]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+8]']
add ['ecx,', '8']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+edx*2+8],', 'cx']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
test ['ecx,', 'ecx']
jz ['short', 'loc_D5E']
mov ['[ebp+var_20],', '1']
jmp ['short', 'loc_D65']
mov ['[ebp+var_20],', '0']
cmp ['[ebp+var_20],', '0']
jnz ['short', 'loc_D2C']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+8]']
cmp ['ecx,', '0ED8h']
jle ['loc_F88']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
sub ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_24]']
mov ['[ecx+4],', 'edx']
cmp ['[ebp+var_24],', '0']
jnz ['loc_F0B']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '32h']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_DB9']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[edx]']
jnb ['short', 'loc_DED']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2+8]']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[edx+ecx*2+0Ah]']
sub ['eax,', 'ecx']
add ['eax,', '1']
sar ['eax,', '1']
mov ['edx,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+edx*2+8],', 'ax']
jmp ['short', 'loc_DB0']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_DFF']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
sub ['ecx,', '1']
cmp ['[ebp+var_C],', 'ecx']
jnb ['loc_EC0']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_E24']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_14]']
cmp ['edx,', '[ecx]']
jnb ['loc_EBB']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+8]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[ecx+eax*2+8]']
cmp ['edx,', 'eax']
jge ['short', 'loc_EB6']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
mov ['ax,', '[edx+ecx*2+8]']
mov ['[ebp+var_18],', 'ax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '[ebp+var_C]']
mov ['dl,', '[ecx+8Ah]']
mov ['[ebp+var_19],', 'dl']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_14]']
mov ['esi,', '[ebp+var_4]']
mov ['dx,', '[esi+edx*2+8]']
mov ['[ecx+eax*2+8],', 'dx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '[ebp+var_14]']
mov ['dl,', '[ecx+8Ah]']
mov ['[eax+8Ah],', 'dl']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_4]']
mov ['dx,', '[ebp+var_18]']
mov ['[ecx+eax*2+8],', 'dx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_14]']
mov ['cl,', '[ebp+var_19]']
mov ['[eax+8Ah],', 'cl']
jmp ['loc_E1B']
jmp ['loc_DF6']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+8]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[eax+edx*2+0Ah]']
add ['ecx,', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+eax*2+8],', 'cx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
test ['eax,', 'eax']
jz ['short', 'loc_EFC']
mov ['[ebp+var_28],', '1']
jmp ['short', 'loc_F03']
mov ['[ebp+var_28],', '0']
cmp ['[ebp+var_28],', '0']
jnz ['short', 'loc_EC0']
jmp ['short', 'loc_F88']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
sub ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
mov ['ax,', '[edx+ecx*2+8]']
shr ['ax,', '1']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+ecx*2+8],', 'ax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+8]']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[ecx+eax*2+0Ah]']
cmp ['edx,', 'eax']
jg ['short', 'loc_F62']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2+0Ah]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+ecx*2+8],', 'ax']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
test ['eax,', 'eax']
jz ['short', 'loc_F7B']
mov ['[ebp+var_2C],', '1']
jmp ['short', 'loc_F82']
mov ['[ebp+var_2C],', '0']
cmp ['[ebp+var_2C],', '0']
jnz ['short', 'loc_F16']
mov ['eax,', '[ebp+var_10]']
pop ['edi']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?GetThreshold@CDecoder@NRangeCoder@NQuantum@NCompress@@QBEII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
add ['eax,', '1']
imul ['eax,', '[ebp+arg_0]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
xor ['edx,', 'edx']
div ['dword', 'ptr', '[ecx+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Decode@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXIII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_4]']
imul ['ecx,', '[eax+4]']
mov ['eax,', 'ecx']
xor ['edx,', 'edx']
div ['[ebp+arg_8]']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[edx]']
lea ['edx,', '[ecx+eax-1]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
imul ['ecx,', '[eax+4]']
mov ['eax,', 'ecx']
xor ['edx,', 'edx']
div ['[ebp+arg_8]']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
sub ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
and ['eax,', '8000h']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '8000h']
cmp ['eax,', 'ecx']
jz ['short', 'loc_1083']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
and ['eax,', '4000h']
jz ['short', 'loc_1066']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '4000h']
jz ['short', 'loc_1068']
jmp ['short', 'loc_10C5']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
and ['eax,', '3FFFh']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_8]']
or ['edx,', '4000h']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
shl ['ecx,', '1']
and ['ecx,', '0FFFFh']
mov ['edx,', '[ebp+var_4]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '1']
or ['eax,', '1']
and ['eax,', '0FFFFh']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['esi,', '[ecx+8]']
shl ['esi,', '1']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['?ReadBit@CStreamBitDecoder@NQuantum@NCompress@@QAEIXZ']
or ['esi,', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+8],', 'esi']
jmp ['loc_1038']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+4],', 'ecx']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
__unwindfunclet$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z$0 proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@XZ']
endp
__ehhandler$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-78h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?CodeReal@CDecoder@NQuantum@NCompress@@QAEJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z']
jmp ['___CxxFrameHandler3']
endp
__ehhandler$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-3Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Code@CDecoder@NQuantum@NCompress@@UAGJPAUISequentialInStream@@PAUISequentialOutStream@@PB_K2PAUICompressProgressInfo@@@Z']
jmp ['___CxxFrameHandler3']
endp
?SetStream@COutBuffer@@QAEXPAUISequentialOutStream@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+14h],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?SetStream@CDecoder@NRangeCoder@NQuantum@NCompress@@QAEXPAUISequentialInStream@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['?SetStream@CStreamBitDecoder@NQuantum@NCompress@@QAEXPAUISequentialInStream@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?SetStream@CStreamBitDecoder@NQuantum@NCompress@@QAEXPAUISequentialInStream@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?SetStream@CInBufferBase@@QAEXPAUISequentialInStream@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+0Ch],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?GetProcessedSize@CDecoder@NRangeCoder@NQuantum@NCompress@@QBE_KXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['?GetProcessedSize@CStreamBitDecoder@NQuantum@NCompress@@QBE_KXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetProcessedSize@CStreamBitDecoder@NQuantum@NCompress@@QBE_KXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?GetProcessedSize@CInBufferBase@@QBE_KXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetProcessedSize@CInBufferBase@@QBE_KXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+20h]']
xor ['esi,', 'esi']
mov ['edx,', '[ebp+var_4]']
add ['ecx,', '[edx+10h]']
adc ['esi,', '[edx+14h]']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[eax]']
sub ['eax,', '[edx+8]']
cdq
add ['ecx,', 'eax']
adc ['esi,', 'edx']
mov ['eax,', 'ecx']
mov ['edx,', 'esi']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@PAV123@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['byte', 'ptr', '[edx+4],', '1']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1CDecoderFlusher@CDecoder@NQuantum@NCompress@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+4]']
test ['ecx,', 'ecx']
jz ['short', 'loc_1343']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[edx]']
call ['?Flush@CDecoder@NQuantum@NCompress@@QAEJXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Flush@CDecoder@NQuantum@NCompress@@QAEJXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?Flush@COutBuffer@@QAEJXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Create@CDecoder@NRangeCoder@NQuantum@NCompress@@QAE_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
call ['?Create@CStreamBitDecoder@NQuantum@NCompress@@QAE_NI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Create@CStreamBitDecoder@NQuantum@NCompress@@QAE_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?Create@CInBuffer@@QAE_NI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$MyMin@I@@YGIII@Z proc near           
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_143F']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_1445']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
