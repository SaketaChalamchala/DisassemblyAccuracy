?CryptoSetPassword@CBaseCoder@NWzAes@NCrypto@@UAGJPBEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+Size],', '63h']
jbe ['short', 'loc_10']
mov ['eax,', '80070057h']
jmp ['short', 'loc_25']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '20h']
call ['?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z']
xor ['eax,', 'eax']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
?Init2@CBaseCoder@NWzAes@NCrypto@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0D8h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_D8]']
mov ['ecx,', '36h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_C],', '11h']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '0Ch']
call ['?GetKeySize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+var_5C]']
lea ['ecx,', '[eax+eax+2]']
mov ['[ebp+var_60],', 'ecx']
mov ['edx,', '[ebp+var_60]']
add ['edx,', '3']
shr ['edx,', '2']
mov ['[ebp+var_B0],', 'edx']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '0Ch']
call ['?GetNumSaltWords@CKeyInfo@NWzAes@NCrypto@@QBEIXZ']
mov ['[ebp+var_CC],', 'eax']
mov ['[ebp+var_D0],', '0']
jmp ['short', 'loc_B5']
mov ['eax,', '[ebp+var_D0]']
add ['eax,', '1']
mov ['[ebp+var_D0],', 'eax']
mov ['ecx,', '[ebp+var_D0]']
cmp ['ecx,', '[ebp+var_CC]']
jnb ['short', 'loc_EF']
mov ['edx,', '[ebp+var_D0]']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[eax+edx*4+10h]']
mov ['[ebp+var_D4],', 'ecx']
mov ['edx,', '[ebp+var_D4]']
mov ['eax,', '[edx]']
bswap ['eax']
mov ['ecx,', '[ebp+var_D0]']
mov ['[ebp+ecx*4+var_C4],', 'eax']
jmp ['short', 'loc_A6']
mov ['edx,', '[ebp+var_B0]']
push ['edx']
lea ['eax,', '[ebp+var_A8]']
push ['eax']
push ['3E8h']
mov ['ecx,', '[ebp+var_CC]']
push ['ecx']
lea ['edx,', '[ebp+var_C4]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '24h']
call ['?Size@?$CBuffer@E@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '24h']
call ['??B?$CBuffer@E@@QAEPAEXZ']
push ['eax']
call ['?Pbkdf2Hmac32@NSha1@NCrypto@@YGXPBEIPBIIIPAII@Z']
mov ['[ebp+var_D8],', '0']
jmp ['short', 'loc_148']
mov ['eax,', '[ebp+var_D8]']
add ['eax,', '1']
mov ['[ebp+var_D8],', 'eax']
mov ['ecx,', '[ebp+var_D8]']
cmp ['ecx,', '[ebp+var_B0]']
jnb ['short', 'loc_171']
mov ['edx,', '[ebp+var_D8]']
mov ['eax,', '[ebp+edx*4+var_A8]']
bswap ['eax']
mov ['ecx,', '[ebp+var_D8]']
mov ['[ebp+ecx*4+Src],', 'eax']
jmp ['short', 'loc_139']
mov ['edx,', '[ebp+var_5C]']
push ['edx']
mov ['eax,', '[ebp+var_5C]']
lea ['ecx,', '[ebp+eax+Src]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '30h']
call ['?SetKey@CHmac@NSha1@NCrypto@@QAEXPBEI@Z']
push ['2']
mov ['edx,', '[ebp+var_5C]']
lea ['eax,', '[ebp+edx*2+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '20h']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_5C]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0F4h]']
mov ['edx,', '[ebp+var_8]']
lea ['ecx,', '[edx+ecx*4+118h]']
lea ['edx,', '[ebp+Src]']
call ['@Aes_SetKey_Enc@12']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '0F0h']
push ['eax']
call ['?AesCtr2_Init@NWzAes@NCrypto@@YGXPAUCAesCtr2@12@@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '0D8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Init@CBaseCoder@NWzAes@NCrypto@@UAGJXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn ['4']
endp
?WriteHeader@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
push ['ecx']
mov ['ecx,', 'offset', '?g_RandomGenerator@@3VCRandomGenerator@@A']
call ['?Generate@CRandomGenerator@@QAEXPAEI@Z']
mov ['ecx,', '[ebp+var_4]']
call ['?Init2@CBaseCoder@NWzAes@NCrypto@@IAEXXZ']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '10h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_2BB']
mov ['eax,', '[ebp+var_C]']
jmp ['short', 'loc_2CD']
push ['2']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '20h']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?WriteFooter@CEncoder@NWzAes@NCrypto@@QAEJPAUISequentialOutStream@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['dword', 'ptr', '[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', 'ecx']
push ['0Ah']
lea ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '30h']
call ['?Final@CHmac@NSha1@NCrypto@@QAEXPAEI@Z']
push ['0Ah']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?WriteStream@@YGJPAUISequentialOutStream@@PBXI@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?ReadHeader@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '0Ch']
call ['?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '2']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['edx,', '[ebp+var_28]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?ReadStream_FAIL@@YGJPAUISequentialInStream@@PAXI@Z']
mov ['[ebp+var_30],', 'eax']
cmp ['[ebp+var_30],', '0']
jz ['short', 'loc_3CB']
mov ['eax,', '[ebp+var_30]']
jmp ['short', 'loc_429']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_3DD']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '1']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_34]']
cmp ['edx,', '[ebp+var_C]']
jnb ['short', 'loc_3F7']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_34]']
mov ['dl,', '[ebp+ecx+var_28]']
mov ['[eax+10h],', 'dl']
jmp ['short', 'loc_3D4']
mov ['[ebp+var_34],', '0']
jmp ['short', 'loc_409']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '1']
mov ['[ebp+var_34],', 'eax']
cmp ['[ebp+var_34],', '2']
jnb ['short', 'loc_427']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_34]']
mov ['al,', '[ebp+ecx+var_28]']
mov ['[edx+228h],', 'al']
jmp ['short', 'loc_400']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Init_and_CheckPassword@CDecoder@NWzAes@NCrypto@@QAE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Init2@CBaseCoder@NWzAes@NCrypto@@IAEXXZ']
push ['2']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '228h']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '20h']
push ['ecx']
call ['?CompareArrays@NWzAes@NCrypto@@YG_NPBE0I@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?CompareArrays@NWzAes@NCrypto@@YG_NPBE0I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_4DD']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_8]']
jnb ['short', 'loc_501']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jz ['short', 'loc_4FF']
xor ['al,', 'al']
jmp ['short', 'loc_503']
jmp ['short', 'loc_4D4']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?CheckMac@CDecoder@NWzAes@NCrypto@@QAEJPAUISequentialInStream@@AA_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['byte', 'ptr', '[eax],', '0']
push ['0Ah']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?ReadStream_FAIL@@YGJPAUISequentialInStream@@PAXI@Z']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_558']
mov ['eax,', '[ebp+var_20]']
jmp ['short', 'loc_57F']
push ['0Ah']
lea ['eax,', '[ebp+var_30]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '30h']
call ['?Final@CHmac@NSha1@NCrypto@@QAEXPAEI@Z']
push ['0Ah']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
lea ['edx,', '[ebp+var_18]']
push ['edx']
call ['?CompareArrays@NWzAes@NCrypto@@YG_NPBE0I@Z']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'al']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??0CAesCtr2@NWzAes@NCrypto@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '8']
xor ['ecx,', 'ecx']
sub ['ecx,', 'eax']
and ['ecx,', '0Fh']
shr ['ecx,', '2']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?AesCtr2_Init@NWzAes@NCrypto@@YGXPAUCAesCtr2@12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+this]']
lea ['eax,', '[edx+ecx*4+18h]']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_646']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '4']
jnb ['short', 'loc_65B']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+edx*4],', '0']
jmp ['short', 'loc_63D']
mov ['ecx,', '[ebp+this]']
mov ['dword', 'ptr', '[ecx],', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?AesCtr2_Code@NWzAes@NCrypto@@YGXPAUCAesCtr2@12@PAEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+this]']
lea ['edx,', '[ecx+eax*4+8]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_6B1']
jmp ['loc_7D6']
cmp ['[ebp+var_4],', '10h']
jz ['short', 'loc_6F6']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
xor ['ecx,', 'edx']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'cl']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '1']
mov ['[ebp+arg_8],', 'edx']
jz ['short', 'loc_6F6']
cmp ['[ebp+var_4],', '10h']
jnz ['short', 'loc_6BD']
cmp ['[ebp+arg_8],', '10h']
jb ['short', 'loc_743']
mov ['eax,', '[ebp+arg_8]']
shr ['eax,', '4']
mov ['[ebp+var_10],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '10h']
mov ['edx,', '[ebp+arg_4]']
call ['dword', 'ptr', 'ds:_g_AesCtr_Code']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '4']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_10]']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+var_10]']
mov ['[ebp+arg_8],', 'ecx']
mov ['[ebp+var_4],', '10h']
cmp ['[ebp+arg_8],', '0']
jz ['loc_7CE']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_75F']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '4']
jnb ['short', 'loc_774']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+eax*4],', '0']
jmp ['short', 'loc_756']
mov ['esi,', 'esp']
push ['1']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '10h']
mov ['edx,', '[ebp+var_8]']
call ['dword', 'ptr', 'ds:_g_AesCtr_Code']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+var_18],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
xor ['eax,', 'ecx']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '1']
mov ['[ebp+arg_8],', 'ecx']
jnz ['short', 'loc_79B']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?Filter@CEncoder@NWzAes@NCrypto@@UAGIPAEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '0F0h']
push ['edx']
call ['?AesCtr2_Code@NWzAes@NCrypto@@YGXPAUCAesCtr2@12@PAEI@Z']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '30h']
call ['?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z']
mov ['eax,', '[ebp+arg_8]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
?Filter@CDecoder@NWzAes@NCrypto@@UAGIPAEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '30h']
call ['?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '0F0h']
push ['ecx']
call ['?AesCtr2_Code@NWzAes@NCrypto@@YGXPAUCAesCtr2@12@PAEI@Z']
mov ['eax,', '[ebp+arg_8]']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
?GetKeySize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
lea ['eax,', 'ds:8[ecx*8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetNumSaltWords@CKeyInfo@NWzAes@NCrypto@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
add ['eax,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetSaltSize@CKeyInfo@NWzAes@NCrypto@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
lea ['eax,', 'ds:4[ecx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Update@CHmac@NSha1@NCrypto@@QAEXPBEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Update@CContext@NSha1@NCrypto@@QAEXPBEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_Sha1_Update@12']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??B?$CBuffer@E@@QAEPAEXZ proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Size@?$CBuffer@E@@QBEIXZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?CopyFrom@?$CBuffer@E@@QAEXPBEI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?Alloc@?$CBuffer@E@@QAEXI@Z']
cmp ['[ebp+Size],', '0']
jz ['short', 'loc_996']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Alloc@?$CBuffer@E@@QAEXI@Z proc near   
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+4]']
jz ['short', 'loc_9F8']
mov ['ecx,', '[ebp+var_4]']
call ['?Free@?$CBuffer@E@@QAEXXZ']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_9F8']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx+4],', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Free@?$CBuffer@E@@QAEXXZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_A44']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
