?CheckUTF8@@YG_NPBD_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax]']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'cl']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_4+3]']
test ['eax,', 'eax']
jnz ['short', 'loc_3A']
mov ['al,', '1']
jmp ['loc_195']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_4+3]']
cmp ['ecx,', '80h']
jge ['short', 'loc_48']
jmp ['short', 'loc_1A']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
cmp ['edx,', '0C0h']
jge ['short', 'loc_5B']
xor ['al,', 'al']
jmp ['loc_195']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_4+3]']
cmp ['eax,', '0E0h']
jge ['short', 'loc_7F']
mov ['[ebp+var_8],', '1']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_4+3]']
sub ['ecx,', '0C0h']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'cl']
jmp ['loc_10B']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
cmp ['edx,', '0F0h']
jge ['short', 'loc_A0']
mov ['[ebp+var_8],', '2']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_4+3]']
sub ['eax,', '0E0h']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
jmp ['short', 'loc_10B']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_4+3]']
cmp ['ecx,', '0F8h']
jge ['short', 'loc_C2']
mov ['[ebp+var_8],', '3']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
sub ['edx,', '0F0h']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'dl']
jmp ['short', 'loc_10B']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_4+3]']
cmp ['eax,', '0FCh']
jge ['short', 'loc_E3']
mov ['[ebp+var_8],', '4']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_4+3]']
sub ['ecx,', '0F8h']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'cl']
jmp ['short', 'loc_10B']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
cmp ['edx,', '0FEh']
jge ['short', 'loc_104']
mov ['[ebp+var_8],', '5']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_4+3]']
sub ['eax,', '0FCh']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'al']
jmp ['short', 'loc_10B']
xor ['al,', 'al']
jmp ['loc_195']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_4+3]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', '[edx]']
mov ['byte', 'ptr', '[ebp+var_10+3],', 'al']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '1']
mov ['[ebp+arg_0],', 'ecx']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_10+3]']
cmp ['edx,', '80h']
jl ['short', 'loc_13A']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_10+3]']
cmp ['eax,', '0C0h']
jl ['short', 'loc_15F']
movzx ['ecx,', '[ebp+arg_4]']
test ['ecx,', 'ecx']
jz ['short', 'loc_153']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_10+3]']
test ['edx,', 'edx']
jnz ['short', 'loc_153']
mov ['[ebp+var_14],', '1']
jmp ['short', 'loc_15A']
mov ['[ebp+var_14],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_14]']
jmp ['short', 'loc_195']
mov ['eax,', '[ebp+var_C]']
shl ['eax,', '6']
mov ['[ebp+var_C],', 'eax']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_10+3]']
sub ['ecx,', '80h']
or ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
jnz ['short', 'loc_112']
cmp ['[ebp+var_C],', '110000h']
jb ['short', 'loc_190']
xor ['al,', 'al']
jmp ['short', 'loc_195']
jmp ['loc_1A']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?ConvertUTF8ToUnicode@@YG_NABVAString@@AAVUString@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
call ['?Empty@UString@@QAEXXZ']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+arg_0]']
call ['?Len@AString@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?Ptr@AString@@QBEPBDI@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??BAString@@QBEPBDXZ']
push ['eax']
lea ['eax,', '[ebp+var_8]']
push ['eax']
push ['0']
call ['?Utf8_To_Utf16@@YG_NPA_WPAIPBD2@Z']
mov ['ecx,', '[ebp+arg_0]']
call ['?Len@AString@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?Ptr@AString@@QBEPBDI@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??BAString@@QBEPBDXZ']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+arg_4]']
call ['?GetBuf@UString@@QAEPA_WI@Z']
push ['eax']
call ['?Utf8_To_Utf16@@YG_NPA_WPAIPBD2@Z']
mov ['byte', 'ptr', '[ebp+var_10+3],', 'al']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['?ReleaseBuf_SetEnd@UString@@QAEXI@Z']
mov ['al,', 'byte', 'ptr', '[ebp+var_10+3]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Utf8_To_Utf16@@YG_NPA_WPAIPBD2@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['byte', 'ptr', '[ebp+var_8+3],', '1']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+arg_C]']
jnz ['short', 'loc_2AD']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx],', 'edx']
mov ['al,', 'byte', 'ptr', '[ebp+var_8+3]']
jmp ['loc_524']
mov ['eax,', '[ebp+arg_8]']
mov ['cl,', '[eax]']
mov ['byte', 'ptr', '[ebp+var_8+2],', 'cl']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '1']
mov ['[ebp+arg_8],', 'edx']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_8+2]']
cmp ['eax,', '80h']
jge ['short', 'loc_2E9']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_2DE']
movzx ['cx,', 'byte', 'ptr', '[ebp+var_8+2]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+edx*2],', 'cx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_295']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_8+2]']
cmp ['edx,', '0C0h']
jge ['short', 'loc_31C']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_30A']
mov ['eax,', '0FFFDh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
jmp ['loc_295']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_8+2]']
cmp ['ecx,', '0E0h']
jge ['short', 'loc_341']
mov ['[ebp+var_C],', '1']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_8+2]']
sub ['edx,', '0C0h']
mov ['byte', 'ptr', '[ebp+var_8+2],', 'dl']
jmp ['loc_3F0']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_8+2]']
cmp ['eax,', '0F0h']
jge ['short', 'loc_365']
mov ['[ebp+var_C],', '2']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_8+2]']
sub ['ecx,', '0E0h']
mov ['byte', 'ptr', '[ebp+var_8+2],', 'cl']
jmp ['loc_3F0']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_8+2]']
cmp ['edx,', '0F8h']
jge ['short', 'loc_386']
mov ['[ebp+var_C],', '3']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_8+2]']
sub ['eax,', '0F0h']
mov ['byte', 'ptr', '[ebp+var_8+2],', 'al']
jmp ['short', 'loc_3F0']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_8+2]']
cmp ['ecx,', '0FCh']
jge ['short', 'loc_3A8']
mov ['[ebp+var_C],', '4']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_8+2]']
sub ['edx,', '0F8h']
mov ['byte', 'ptr', '[ebp+var_8+2],', 'dl']
jmp ['short', 'loc_3F0']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_8+2]']
cmp ['eax,', '0FEh']
jge ['short', 'loc_3C9']
mov ['[ebp+var_C],', '5']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_8+2]']
sub ['ecx,', '0FCh']
mov ['byte', 'ptr', '[ebp+var_8+2],', 'cl']
jmp ['short', 'loc_3F0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_3DE']
mov ['edx,', '0FFFDh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+eax*2],', 'dx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
jmp ['loc_295']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_8+2]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[ebp+arg_C]']
jnz ['short', 'loc_401']
jmp ['short', 'loc_450']
mov ['edx,', '[ebp+arg_8]']
mov ['al,', '[edx]']
mov ['byte', 'ptr', '[ebp+var_14+3],', 'al']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_14+3]']
cmp ['ecx,', '80h']
jl ['short', 'loc_421']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_14+3]']
cmp ['edx,', '0C0h']
jl ['short', 'loc_423']
jmp ['short', 'loc_450']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+var_10]']
shl ['ecx,', '6']
mov ['[ebp+var_10],', 'ecx']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_14+3]']
sub ['edx,', '80h']
or ['edx,', '[ebp+var_10]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
jnz ['short', 'loc_3F7']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_47D']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_46B']
mov ['ecx,', '0FFFDh']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+edx*2],', 'cx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
jmp ['loc_295']
cmp ['[ebp+var_10],', '10000h']
jnb ['short', 'loc_4A5']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_49A']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', 'word', 'ptr', '[ebp+var_10]']
mov ['[eax+edx*2],', 'cx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_51F']
mov ['eax,', '[ebp+var_10]']
sub ['eax,', '10000h']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '100000h']
jb ['short', 'loc_4E0']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_4CE']
mov ['ecx,', '0FFFDh']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+edx*2],', 'cx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
jmp ['loc_295']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_516']
mov ['edx,', '[ebp+var_10]']
shr ['edx,', '0Ah']
add ['edx,', '0D800h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+eax*2],', 'dx']
mov ['edx,', '[ebp+var_10]']
and ['edx,', '3FFh']
add ['edx,', '0DC00h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+eax*2+2],', 'dx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '2']
mov ['[ebp+var_4],', 'edx']
jmp ['loc_295']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
?ConvertUnicodeToUTF8@@YGXABVUString@@AAVAString@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['ecx,', '[ebp+arg_4]']
call ['?Empty@AString@@QAEXXZ']
mov ['ecx,', '[ebp+arg_0]']
call ['?Len@UString@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?Ptr@UString@@QBEPB_WI@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??BUString@@QBEPB_WXZ']
push ['eax']
call ['?Utf16_To_Utf8_Calc@@YGIPB_W0@Z']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?Len@UString@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?Ptr@UString@@QBEPB_WI@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??BUString@@QBEPB_WXZ']
push ['eax']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['?GetBuf@AString@@QAEPADI@Z']
push ['eax']
call ['?Utf16_To_Utf8@@YGPADPADPB_W1@Z']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['?ReleaseBuf_SetEnd@AString@@QAEXI@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Utf16_To_Utf8_Calc@@YGIPB_W0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+arg_0]']
sar ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jnz ['short', 'loc_5E6']
mov ['eax,', '[ebp+var_4]']
jmp ['loc_671']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '2']
mov ['[ebp+arg_0],', 'ecx']
cmp ['[ebp+var_8],', '80h']
jnb ['short', 'loc_603']
jmp ['short', 'loc_5D6']
cmp ['[ebp+var_8],', '800h']
jnb ['short', 'loc_617']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_5D6']
cmp ['[ebp+var_8],', '0D800h']
jb ['short', 'loc_663']
cmp ['[ebp+var_8],', '0DC00h']
jnb ['short', 'loc_663']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_663']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '0DC00h']
jb ['short', 'loc_663']
cmp ['[ebp+var_C],', '0E000h']
jnb ['short', 'loc_663']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '2']
mov ['[ebp+var_4],', 'ecx']
jmp ['loc_5D6']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '2']
mov ['[ebp+var_4],', 'edx']
jmp ['loc_5D6']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Utf16_To_Utf8@@YGPADPADPB_W1@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_8]']
jnz ['short', 'loc_6A4']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_81D']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
mov ['[ebp+arg_4],', 'eax']
cmp ['[ebp+var_4],', '80h']
jnb ['short', 'loc_6D2']
mov ['ecx,', '[ebp+arg_0]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_4]']
mov ['[ecx],', 'dl']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_694']
cmp ['[ebp+var_4],', '800h']
jnb ['short', 'loc_708']
mov ['ecx,', '[ebp+var_4]']
shr ['ecx,', '6']
add ['ecx,', '0C0h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'cl']
mov ['eax,', '[ebp+var_4]']
and ['eax,', '3Fh']
add ['eax,', '80h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+1],', 'al']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
jmp ['short', 'loc_694']
cmp ['[ebp+var_4],', '0D800h']
jb ['loc_7D3']
cmp ['[ebp+var_4],', '0DC00h']
jnb ['loc_7D3']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_8]']
jz ['loc_7D3']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '0DC00h']
jb ['loc_7D3']
cmp ['[ebp+var_8],', '0E000h']
jnb ['loc_7D3']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '0D800h']
shl ['ecx,', '0Ah']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '0DC00h']
or ['ecx,', 'edx']
add ['ecx,', '10000h']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
shr ['eax,', '12h']
add ['eax,', '0F0h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_4]']
shr ['edx,', '0Ch']
and ['edx,', '3Fh']
add ['edx,', '80h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1],', 'dl']
mov ['ecx,', '[ebp+var_4]']
shr ['ecx,', '6']
and ['ecx,', '3Fh']
add ['ecx,', '80h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+2],', 'cl']
mov ['eax,', '[ebp+var_4]']
and ['eax,', '3Fh']
add ['eax,', '80h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+3],', 'al']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
jmp ['loc_694']
mov ['eax,', '[ebp+var_4]']
shr ['eax,', '0Ch']
add ['eax,', '0E0h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_4]']
shr ['edx,', '6']
and ['edx,', '3Fh']
add ['edx,', '80h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1],', 'dl']
mov ['ecx,', '[ebp+var_4]']
and ['ecx,', '3Fh']
add ['ecx,', '80h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+2],', 'cl']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '3']
mov ['[ebp+arg_0],', 'eax']
jmp ['loc_694']
jmp ['loc_694']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?Len@AString@@QBEIXZ proc near          
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??BAString@@QBEPBDXZ proc near          
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Ptr@AString@@QBEPBDI@Z proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
add ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Empty@UString@@QAEXXZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
xor ['eax,', 'eax']
mov ['[edx],', 'ax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetBuf@UString@@QAEPA_WI@Z proc near   
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+8]']
jbe ['short', 'loc_8C5']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?ReAlloc2@UString@@AAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?ReleaseBuf_SetEnd@UString@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[eax+edx*2],', 'cx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Empty@AString@@QAEXXZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['byte', 'ptr', '[edx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetBuf@AString@@QAEPADI@Z proc near    
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+8]']
jbe ['short', 'loc_951']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?ReAlloc2@AString@@AAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?ReleaseBuf_SetEnd@AString@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+ecx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Len@UString@@QBEIXZ proc near          
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??BUString@@QBEPB_WXZ proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Ptr@UString@@QBEPB_WI@Z proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*2]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
