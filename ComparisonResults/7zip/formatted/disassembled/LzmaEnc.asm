_LzmaEncProps_Init@4 proc near          
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+2Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '0FFFFFFFFh']
mov ['dword', 'ptr', '[eax+0Ch],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+34h],', '0FFFFFFFFh']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+28h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+24h],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+20h],', '0FFFFFFFFh']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+1Ch],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+18h],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+14h],', '0FFFFFFFFh']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+10h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+30h],', '0']
pop ['ebp']
retn ['4']
endp
_LzmaEncProps_Normalize@4 proc near     
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jge ['short', 'loc_185']
mov ['[ebp+var_4],', '5']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jnz ['short', 'loc_1D1']
cmp ['[ebp+var_4],', '5']
jg ['short', 'loc_1AF']
mov ['edx,', '[ebp+var_4]']
lea ['ecx,', '[edx+edx+0Eh]']
mov ['eax,', '1']
shl ['eax,', 'cl']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_1C8']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '6']
neg ['ecx']
sbb ['ecx,', 'ecx']
and ['ecx,', '2000000h']
add ['ecx,', '2000000h']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'edx']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+var_10]']
cmp ['eax,', '[edx+0Ch]']
jb ['short', 'loc_263']
ja ['short', 'loc_1FD']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+var_14]']
cmp ['edx,', '[ecx+8]']
jbe ['short', 'loc_263']
mov ['[ebp+var_8],', '0Bh']
jmp ['short', 'loc_20F']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '1Eh']
ja ['short', 'loc_263']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '2']
mov ['ecx,', '[ebp+var_8]']
shl ['eax,', 'cl']
cmp ['edx,', 'eax']
ja ['short', 'loc_23B']
mov ['edx,', '2']
mov ['ecx,', '[ebp+var_8]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'edx']
jmp ['short', 'loc_263']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '3']
mov ['ecx,', '[ebp+var_8]']
shl ['eax,', 'cl']
cmp ['edx,', 'eax']
ja ['short', 'loc_261']
mov ['edx,', '3']
mov ['ecx,', '[ebp+var_8]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'edx']
jmp ['short', 'loc_263']
jmp ['short', 'loc_206']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+10h],', '0']
jge ['short', 'loc_276']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+10h],', '3']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jge ['short', 'loc_289']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+14h],', '0']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+18h],', '0']
jge ['short', 'loc_29C']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+18h],', '2']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+1Ch],', '0']
jge ['short', 'loc_2B4']
xor ['edx,', 'edx']
cmp ['[ebp+var_4],', '5']
setnl ['dl']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+1Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+20h],', '0']
jge ['short', 'loc_2D5']
xor ['edx,', 'edx']
cmp ['[ebp+var_4],', '7']
setnl ['dl']
sub ['edx,', '1']
and ['edx,', '0FFFFFFE0h']
add ['edx,', '40h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+20h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+24h],', '0']
jge ['short', 'loc_2F0']
mov ['edx,', '[ebp+arg_0]']
xor ['eax,', 'eax']
cmp ['dword', 'ptr', '[edx+1Ch],', '0']
setnz ['al']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+24h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+28h],', '0']
jge ['short', 'loc_303']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+28h],', '4']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+2Ch],', '0']
jnz ['short', 'loc_32D']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
sar ['eax,', '1']
add ['eax,', '10h']
mov ['ecx,', '[ebp+arg_0]']
xor ['edx,', 'edx']
cmp ['dword', 'ptr', '[ecx+24h],', '0']
setz ['dl']
mov ['ecx,', 'edx']
sar ['eax,', 'cl']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+34h],', '0']
jge ['short', 'loc_361']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+24h],', '0']
jz ['short', 'loc_351']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+1Ch],', '0']
jz ['short', 'loc_351']
mov ['[ebp+var_1C],', '2']
jmp ['short', 'loc_358']
mov ['[ebp+var_1C],', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_1C]']
mov ['[edx+34h],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_LzmaEncProps_GetDictSize@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '44h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_44]']
mov ['ecx,', '11h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['esi,', '[ebp+arg_0]']
mov ['ecx,', '0Eh']
lea ['edi,', '[ebp+var_40]']
rep ['movsd']
lea ['eax,', '[ebp+var_40]']
push ['eax']
call ['_LzmaEncProps_Normalize@4']
mov ['eax,', '[ebp+var_3C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '44h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_LzmaEnc_SaveState@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3BCFCh']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '32C6Ch']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '67Ch']
push ['4848h']
push ['edx']
push ['eax']
call ['_memcpy_0']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '374B4h']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '4EC4h']
push ['4848h']
push ['ecx']
push ['edx']
call ['_memcpy_0']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+44h]']
mov ['[eax+4],', 'edx']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_48C']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0Ch']
jge ['short', 'loc_4E9']
push ['20h']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', '[edx+ecx+32608h]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+ecx+18h]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
push ['20h']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', '[edx+ecx+327E8h]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+ecx+1F8h]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
jmp ['short', 'loc_483']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_4FB']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '4']
jge ['short', 'loc_532']
push ['80h']
mov ['edx,', '[ebp+var_C]']
shl ['edx,', '7']
mov ['eax,', '[ebp+var_4]']
lea ['ecx,', '[eax+edx+32968h]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
shl ['edx,', '7']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[eax+edx+378h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
jmp ['short', 'loc_4F2']
push ['18h']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '32788h']
push ['edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '198h']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
push ['18h']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '327A0h']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1B0h']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
push ['18h']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '327B8h']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1C8h']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
push ['18h']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '327D0h']
push ['edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1E0h']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
push ['0E4h']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '32B68h']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '578h']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
push ['20h']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '32C4Ch']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '65Ch']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
push ['10h']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '34h']
push ['edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '8']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '300h']
mov ['ecx,', '[ecx+5Ch]']
shl ['edx,', 'cl']
shl ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+60h]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_LzmaEnc_RestoreState@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3BCFCh']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '67Ch']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '32C6Ch']
push ['4848h']
push ['edx']
push ['eax']
call ['_memcpy_0']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '4EC4h']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '374B4h']
push ['4848h']
push ['ecx']
push ['edx']
call ['_memcpy_0']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
mov ['[eax+44h],', 'edx']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_6CC']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0Ch']
jge ['short', 'loc_729']
push ['20h']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+ecx+18h]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', '[edx+ecx+32608h]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
push ['20h']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+var_8]']
lea ['eax,', '[edx+ecx+1F8h]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', '[edx+ecx+327E8h]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
jmp ['short', 'loc_6C3']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_73B']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '4']
jge ['short', 'loc_772']
push ['80h']
mov ['edx,', '[ebp+var_C]']
shl ['edx,', '7']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[eax+edx+378h]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
shl ['edx,', '7']
mov ['eax,', '[ebp+var_4]']
lea ['ecx,', '[eax+edx+32968h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
jmp ['short', 'loc_732']
push ['18h']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '198h']
push ['edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '32788h']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
push ['18h']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1B0h']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '327A0h']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
push ['18h']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1C8h']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '327B8h']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
push ['18h']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1E0h']
push ['edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '327D0h']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
push ['0E4h']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '578h']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '32B68h']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
push ['20h']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '65Ch']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '32C4Ch']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
push ['10h']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '8']
push ['edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '34h']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '300h']
mov ['ecx,', '[ecx+5Ch]']
shl ['edx,', 'cl']
shl ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+60h]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_LzmaEnc_SetProps@8 proc near           
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '58h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_58]']
mov ['ecx,', '16h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', '[ebp+arg_4]']
mov ['ecx,', '0Eh']
lea ['edi,', '[ebp+var_44]']
rep ['movsd']
lea ['ecx,', '[ebp+var_44]']
push ['ecx']
call ['_LzmaEncProps_Normalize@4']
cmp ['[ebp+var_34],', '8']
jg ['short', 'loc_8F4']
cmp ['[ebp+var_30],', '4']
jg ['short', 'loc_8F4']
cmp ['[ebp+var_2C],', '4']
jg ['short', 'loc_8F4']
mov ['edx,', '[ebp+var_40]']
xor ['eax,', 'eax']
mov ['[ebp+var_58],', 'edx']
mov ['[ebp+var_54],', 'eax']
cmp ['[ebp+var_54],', '0']
ja ['short', 'loc_8F4']
jb ['short', 'loc_8EB']
cmp ['[ebp+var_58],', '8000000h']
ja ['short', 'loc_8F4']
cmp ['[ebp+var_40],', '60000000h']
jbe ['short', 'loc_8FE']
mov ['eax,', '5']
jmp ['loc_9CC']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_40]']
mov ['[ecx+8Ch],', 'edx']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_4C],', 'eax']
cmp ['[ebp+var_4C],', '5']
jnb ['short', 'loc_91D']
mov ['[ebp+var_4C],', '5']
cmp ['[ebp+var_4C],', '111h']
jbe ['short', 'loc_92D']
mov ['[ebp+var_4C],', '111h']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4C]']
mov ['[ecx+2Ch],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_34]']
mov ['[eax+48h],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_30]']
mov ['[edx+4Ch],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_2C]']
mov ['[ecx+50h],', 'edx']
xor ['eax,', 'eax']
cmp ['[ebp+var_28],', '0']
setz ['al']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+64h],', 'eax']
xor ['edx,', 'edx']
cmp ['[ebp+var_20],', '0']
setnz ['dl']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+26Dh],', 'dl']
mov ['[ebp+var_50],', '4']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_99A']
cmp ['[ebp+var_1C],', '2']
jge ['short', 'loc_98E']
mov ['[ebp+var_50],', '2']
jmp ['short', 'loc_99A']
cmp ['[ebp+var_1C],', '4']
jge ['short', 'loc_99A']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_50],', 'ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_50]']
mov ['[edx+298h],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_18]']
mov ['[ecx+280h],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax+68h],', 'ecx']
xor ['edx,', 'edx']
cmp ['[ebp+var_10],', '1']
setnle ['dl']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+70h],', 'edx']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '58h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_LzmaEnc_Construct@4 proc near          
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '44h']
push ['edi']
lea ['edi,', '[ebp+var_44]']
mov ['ecx,', '11h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '98h']
push ['eax']
call ['_RangeEnc_Construct@4']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '250h']
push ['ecx']
call ['_MatchFinder_Construct@4']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '0D4h']
push ['edx']
call ['_MatchFinderMt_Construct@4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '250h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+24Ch],', 'eax']
lea ['edx,', '[ebp+var_40]']
push ['edx']
call ['_LzmaEncProps_Init@4']
lea ['eax,', '[ebp+var_40]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_LzmaEnc_SetProps@8']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '30734h']
push ['edx']
call ['_LzmaEnc_FastPosInit@4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '30F34h']
push ['eax']
call ['_LzmaEnc_InitPriceTables@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+60h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+3BCFCh],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '44h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_LzmaEnc_FastPosInit@4 proc near        
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[ecx+1],', '1']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
mov ['[ebp+var_4],', '2']
jmp ['short', 'loc_B53']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '16h']
jnb ['short', 'loc_B9D']
mov ['ecx,', '[ebp+var_4]']
shr ['ecx,', '1']
sub ['ecx,', '1']
mov ['edx,', '1']
shl ['edx,', 'cl']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_B7D']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+var_8]']
jnb ['short', 'loc_B92']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_C]']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['[edx],', 'al']
jmp ['short', 'loc_B74']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_8]']
mov ['[ebp+arg_0],', 'ecx']
jmp ['short', 'loc_B4A']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_RangeEnc_Construct@4 proc near         
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+24h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+20h],', '0']
pop ['ebp']
retn ['4']
endp
_LzmaEnc_InitPriceTables@4 proc near    
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '8']
jmp ['short', 'loc_BFC']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '10h']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '800h']
jnb ['short', 'loc_C84']
mov ['[ebp+var_8],', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_C2B']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_8]']
jge ['short', 'loc_C63']
mov ['ecx,', '[ebp+var_C]']
imul ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_C],', '10000h']
jb ['short', 'loc_C61']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_C45']
jmp ['short', 'loc_C22']
mov ['edx,', '0Bh']
mov ['ecx,', '[ebp+var_8]']
shl ['edx,', 'cl']
sub ['edx,', '0Fh']
sub ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_4]']
shr ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+eax*4],', 'edx']
jmp ['loc_BF3']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_LzmaEnc_Create@4 proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['esi,', 'esp']
push ['45488h']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_CC7']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_LzmaEnc_Construct@4']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_LzmaEnc_FreeLits@8 proc near           
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+60h]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+3BCFCh]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+60h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+3BCFCh],', '0']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_LzmaEnc_Destruct@12 proc near          
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '0D4h']
push ['ecx']
call ['_MatchFinderMt_Destruct@8']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '250h']
push ['eax']
call ['_MatchFinder_Free@8']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_LzmaEnc_FreeLits@8']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '98h']
push ['ecx']
call ['_RangeEnc_Free@8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
_RangeEnc_Free@8 proc near              
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+4]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+20h],', '0']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_LzmaEnc_Destroy@12 proc near           
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_LzmaEnc_Destruct@12']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
_LzmaEnc_Init@4 proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+44h],', '0']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_E69']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '4']
jnb ['short', 'loc_E7F']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+edx*4+34h],', '0']
jmp ['short', 'loc_E60']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '98h']
push ['ecx']
call ['_RangeEnc_Init@4']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_EA0']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0Ch']
jnb ['loc_F4D']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_EBC']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '10h']
jnb ['short', 'loc_EFC']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+32608h]']
mov ['ecx,', '400h']
mov ['edx,', '[ebp+var_8]']
mov ['[eax+edx*2],', 'cx']
mov ['eax,', '[ebp+var_4]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+327E8h]']
mov ['eax,', '400h']
mov ['ecx,', '[ebp+var_8]']
mov ['[edx+ecx*2],', 'ax']
jmp ['short', 'loc_EB3']
mov ['edx,', '400h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+eax*2+32788h],', 'dx']
mov ['edx,', '400h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+eax*2+327A0h],', 'dx']
mov ['edx,', '400h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+eax*2+327B8h],', 'dx']
mov ['edx,', '400h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+eax*2+327D0h],', 'dx']
jmp ['loc_E97']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+4Ch]']
mov ['eax,', '[ebp+arg_0]']
add ['ecx,', '[eax+48h]']
mov ['edx,', '300h']
shl ['edx,', 'cl']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+60h]']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_F7E']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+var_C]']
jnb ['short', 'loc_F97']
mov ['ecx,', '400h']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_10]']
mov ['[eax+edx*2],', 'cx']
jmp ['short', 'loc_F75']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_FA9']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '4']
jnb ['short', 'loc_FED']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '7']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+32968h]']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_FD4']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+var_18],', '40h']
jnb ['short', 'loc_FEB']
mov ['eax,', '400h']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+var_14]']
mov ['[edx+ecx*2],', 'ax']
jmp ['short', 'loc_FCB']
jmp ['short', 'loc_FA0']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_FFF']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '72h']
jnb ['short', 'loc_101A']
mov ['ecx,', '400h']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+edx*2+32B68h],', 'cx']
jmp ['short', 'loc_FF6']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '32C6Ch']
push ['ecx']
call ['_LenEnc_Init@4']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '374B4h']
push ['edx']
call ['_LenEnc_Init@4']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_104A']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '10h']
jnb ['short', 'loc_1065']
mov ['ecx,', '400h']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+edx*2+32C4Ch],', 'cx']
jmp ['short', 'loc_1041']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+1Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+30h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '1']
mov ['ecx,', '[ecx+50h]']
shl ['edx,', 'cl']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+58h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '1']
mov ['ecx,', '[ecx+4Ch]']
shl ['edx,', 'cl']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+54h],', 'edx']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_RangeEnc_Init@4 proc near              
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '0FFFFFFFFh']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+10h],', '1']
mov ['dword', 'ptr', '[edx+14h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
mov ['[ecx+18h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+28h],', '0']
mov ['dword', 'ptr', '[ecx+2Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+30h],', '0']
pop ['ebp']
retn ['4']
endp
_LenEnc_Init@4  proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '400h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+2],', 'ax']
mov ['edx,', '400h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'dx']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_1154']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '80h']
jnb ['short', 'loc_116F']
mov ['edx,', '400h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+eax*2+4],', 'dx']
jmp ['short', 'loc_114B']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_1181']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '80h']
jnb ['short', 'loc_119F']
mov ['eax,', '400h']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*2+104h],', 'ax']
jmp ['short', 'loc_1178']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_11B1']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '100h']
jnb ['short', 'loc_11CF']
mov ['ecx,', '400h']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+edx*2+204h],', 'cx']
jmp ['short', 'loc_11A8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_LzmaEnc_InitPrices@4 proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+64h],', '0']
jnz ['short', 'loc_1206']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FillDistancesPrices@4']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FillAlignPrices@4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2Ch]']
add ['ecx,', '0FFFFFFFFh']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+378B8h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
mov ['[ecx+33070h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '30F34h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '1']
mov ['ecx,', '[ecx+50h]']
shl ['edx,', 'cl']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '32C6Ch']
push ['eax']
call ['_LenPriceEnc_UpdateTables@12']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '30F34h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '1']
mov ['ecx,', '[edx+50h]']
shl ['eax,', 'cl']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '374B4h']
push ['ecx']
call ['_LenPriceEnc_UpdateTables@12']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_LenPriceEnc_UpdateTables@12 proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_12AD']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['short', 'loc_12C6']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
call ['@LenPriceEnc_UpdateTable@12']
jmp ['short', 'loc_12A4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
@LenPriceEnc_UpdateTable@12 proc near   
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
imul ['ecx,', '440h']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', '[edx+ecx+408h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+404h]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_LenEnc_SetPrices@20']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+404h]']
mov ['[eax+edx*4+4808h],', 'ecx']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_LenEnc_SetPrices@20 proc near          
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
sar ['ecx,', '4']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
xor ['edx,', '7FFh']
sar ['edx,', '4']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+2]']
sar ['eax,', '4']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+2]']
xor ['ecx,', '7FFh']
sar ['ecx,', '4']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_13DF']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
cmp ['[ebp+var_14],', '8']
jnb ['short', 'loc_141D']
mov ['edx,', '[ebp+var_14]']
cmp ['edx,', '[ebp+arg_8]']
jb ['short', 'loc_13F2']
jmp ['loc_14A6']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
push ['3']
mov ['edx,', '[ebp+arg_4]']
shl ['edx,', '3']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx*2+4]']
push ['ecx']
call ['_RcTree_GetPrice@16']
add ['eax,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx+edx*4],', 'eax']
jmp ['short', 'loc_13D6']
jmp ['short', 'loc_1428']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '10h']
jnb ['short', 'loc_1469']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+arg_8]']
jb ['short', 'loc_1438']
jmp ['short', 'loc_14A6']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
sub ['edx,', '8']
push ['edx']
push ['3']
mov ['eax,', '[ebp+arg_4]']
shl ['eax,', '3']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2+104h]']
push ['edx']
call ['_RcTree_GetPrice@16']
add ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_C]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_141F']
jmp ['short', 'loc_1474']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[ebp+arg_8]']
jnb ['short', 'loc_14A6']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '10h']
push ['eax']
push ['8']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '204h']
push ['ecx']
call ['_RcTree_GetPrice@16']
add ['eax,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx+edx*4],', 'eax']
jmp ['short', 'loc_146B']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
_RcTree_GetPrice@16 proc near           
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '1']
mov ['ecx,', '[ebp+arg_4]']
shl ['eax,', 'cl']
or ['eax,', '[ebp+arg_8]']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_8],', '1']
jz ['short', 'loc_151D']
mov ['ecx,', '[ebp+arg_8]']
shr ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['ecx,', '[ebp+arg_8]']
and ['ecx,', '1']
neg ['ecx']
and ['ecx,', '7FFh']
xor ['eax,', 'ecx']
sar ['eax,', '4']
mov ['edx,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '[edx+eax*4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
shr ['edx,', '1']
mov ['[ebp+arg_8],', 'edx']
jmp ['short', 'loc_14E2']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_FillAlignPrices@4 proc near            
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_154D']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '10h']
jnb ['short', 'loc_1580']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '30F34h']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
push ['4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '32C4Ch']
push ['eax']
call ['_RcTree_ReverseGetPrice@16']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*4+325C8h],', 'eax']
jmp ['short', 'loc_1544']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+84h],', '0']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_RcTree_ReverseGetPrice@16 proc near    
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '1']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_15D6']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_1620']
mov ['edx,', '[ebp+arg_8]']
and ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_8]']
shr ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['ecx,', '[ebp+var_10]']
neg ['ecx']
and ['ecx,', '7FFh']
xor ['eax,', 'ecx']
sar ['eax,', '4']
mov ['edx,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '[edx+eax*4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '1']
or ['edx,', '[ebp+var_10]']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_15CD']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_FillDistancesPrices@4 proc near        
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '234h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_234]']
mov ['ecx,', '8Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_210],', '4']
jmp ['short', 'loc_1672']
mov ['eax,', '[ebp+var_210]']
add ['eax,', '1']
mov ['[ebp+var_210],', 'eax']
cmp ['[ebp+var_210],', '80h']
jnb ['loc_1715']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_210]']
movzx ['edx,', 'byte', 'ptr', '[ecx+30734h]']
mov ['[ebp+var_218],', 'edx']
mov ['eax,', '[ebp+var_218]']
shr ['eax,', '1']
sub ['eax,', '1']
mov ['[ebp+var_21C],', 'eax']
mov ['edx,', '[ebp+var_218]']
and ['edx,', '1']
or ['edx,', '2']
mov ['ecx,', '[ebp+var_21C]']
shl ['edx,', 'cl']
mov ['[ebp+var_220],', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '30F34h']
push ['eax']
mov ['ecx,', '[ebp+var_210]']
sub ['ecx,', '[ebp+var_220]']
push ['ecx']
mov ['edx,', '[ebp+var_21C]']
push ['edx']
mov ['eax,', '[ebp+var_220]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2+32B68h]']
mov ['eax,', '[ebp+var_218]']
shl ['eax,', '1']
sub ['edx,', 'eax']
sub ['edx,', '2']
push ['edx']
call ['_RcTree_ReverseGetPrice@16']
mov ['ecx,', '[ebp+var_210]']
mov ['[ebp+ecx*4+var_208],', 'eax']
jmp ['loc_1663']
mov ['[ebp+var_214],', '0']
jmp ['short', 'loc_1730']
mov ['edx,', '[ebp+var_214]']
add ['edx,', '1']
mov ['[ebp+var_214],', 'edx']
cmp ['[ebp+var_214],', '4']
jnb ['loc_18DA']
mov ['eax,', '[ebp+var_214]']
shl ['eax,', '7']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+32968h]']
mov ['[ebp+var_228],', 'edx']
mov ['eax,', '[ebp+var_214]']
shl ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+319C8h]']
mov ['[ebp+var_22C],', 'edx']
mov ['[ebp+var_224],', '0']
jmp ['short', 'loc_178A']
mov ['eax,', '[ebp+var_224]']
add ['eax,', '1']
mov ['[ebp+var_224],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_224]']
cmp ['edx,', '[ecx+88h]']
jnb ['short', 'loc_17CA']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '30F34h']
push ['eax']
mov ['ecx,', '[ebp+var_224]']
push ['ecx']
push ['6']
mov ['edx,', '[ebp+var_228]']
push ['edx']
call ['_RcTree_GetPrice@16']
mov ['ecx,', '[ebp+var_224]']
mov ['edx,', '[ebp+var_22C]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_177B']
mov ['[ebp+var_224],', '0Eh']
jmp ['short', 'loc_17E5']
mov ['eax,', '[ebp+var_224]']
add ['eax,', '1']
mov ['[ebp+var_224],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_224]']
cmp ['edx,', '[ecx+88h]']
jnb ['short', 'loc_1824']
mov ['eax,', '[ebp+var_224]']
shr ['eax,', '1']
sub ['eax,', '5']
shl ['eax,', '4']
mov ['ecx,', '[ebp+var_224]']
mov ['edx,', '[ebp+var_22C]']
add ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+var_224]']
mov ['edx,', '[ebp+var_22C]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_17D6']
mov ['eax,', '[ebp+var_214]']
shl ['eax,', '9']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+31DC8h]']
mov ['[ebp+var_230],', 'edx']
mov ['[ebp+var_234],', '0']
jmp ['short', 'loc_1858']
mov ['eax,', '[ebp+var_234]']
add ['eax,', '1']
mov ['[ebp+var_234],', 'eax']
cmp ['[ebp+var_234],', '4']
jnb ['short', 'loc_1881']
mov ['ecx,', '[ebp+var_234]']
mov ['edx,', '[ebp+var_230]']
mov ['eax,', '[ebp+var_234]']
mov ['esi,', '[ebp+var_22C]']
mov ['eax,', '[esi+eax*4]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_1849']
jmp ['short', 'loc_1892']
mov ['ecx,', '[ebp+var_234]']
add ['ecx,', '1']
mov ['[ebp+var_234],', 'ecx']
cmp ['[ebp+var_234],', '80h']
jnb ['short', 'loc_18D5']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_234]']
movzx ['eax,', 'byte', 'ptr', '[edx+30734h]']
mov ['ecx,', '[ebp+var_22C]']
mov ['edx,', '[ecx+eax*4]']
mov ['eax,', '[ebp+var_234]']
add ['edx,', '[ebp+eax*4+var_208]']
mov ['ecx,', '[ebp+var_234]']
mov ['eax,', '[ebp+var_230]']
mov ['[eax+ecx*4],', 'edx']
jmp ['short', 'loc_1883']
jmp ['loc_1721']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+80h],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN23']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '234h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_LzmaEnc_PrepareForLzma2@20 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+288h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+74h],', '1']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_LzmaEnc_AllocAndInit@16']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
_LzmaEnc_AllocAndInit@16 proc near      
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_19B6']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '1Bh']
jnb ['short', 'loc_19D5']
mov ['edx,', '1']
mov ['ecx,', '[ebp+var_4]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
cmp ['[eax+8Ch],', 'edx']
ja ['short', 'loc_19D3']
jmp ['short', 'loc_19D5']
jmp ['short', 'loc_19AD']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+88h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+6Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+90h],', '0']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_LzmaEnc_Alloc@16']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1A1D']
mov ['eax,', '[ebp+var_8]']
jmp ['short', 'loc_1A42']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_LzmaEnc_Init@4']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_LzmaEnc_InitPrices@4']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+78h],', '0']
mov ['dword', 'ptr', '[edx+7Ch],', '0']
xor ['eax,', 'eax']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_LzmaEnc_Alloc@16 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '1000h']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '98h']
push ['ecx']
call ['_RangeEnc_Alloc@8']
test ['eax,', 'eax']
jnz ['short', 'loc_1AA0']
mov ['eax,', '2']
jmp ['loc_1CA9']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+70h],', '0']
jz ['short', 'loc_1AC9']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+64h],', '0']
jnz ['short', 'loc_1AC9']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+26Dh]']
test ['edx,', 'edx']
jz ['short', 'loc_1AC9']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_1AD0']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax+0D0h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+48h]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+4Ch]']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+60h],', '0']
jz ['short', 'loc_1B0F']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+3BCFCh],', '0']
jz ['short', 'loc_1B0F']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+5Ch]']
cmp ['edx,', '[ebp+var_8]']
jz ['loc_1BA2']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_LzmaEnc_FreeLits@8']
mov ['edx,', '300h']
mov ['ecx,', '[ebp+var_8]']
shl ['edx,', 'cl']
shl ['edx,', '1']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+60h],', 'eax']
mov ['edx,', '300h']
mov ['ecx,', '[ebp+var_8]']
shl ['edx,', 'cl']
shl ['edx,', '1']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+3BCFCh],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+60h],', '0']
jz ['short', 'loc_1B82']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+3BCFCh],', '0']
jnz ['short', 'loc_1B99']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_LzmaEnc_FreeLits@8']
mov ['eax,', '2']
jmp ['loc_1CA9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+5Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '1000000h']
cmp ['eax,', '[edx+8Ch]']
sbb ['ecx,', 'ecx']
neg ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+26Eh],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '[eax+8Ch]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['short', 'loc_1BDD']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[edx+8Ch]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+0D0h],', '0']
jz ['short', 'loc_1C4B']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
push ['111h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2Ch]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '0D4h']
push ['edx']
call ['_MatchFinderMt_Create@24']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_1C27']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_1CA9']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0D4h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '0D4h']
push ['eax']
call ['_MatchFinderMt_CreateVTable@8']
jmp ['short', 'loc_1CA7']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
push ['111h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+2Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8Ch]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '250h']
push ['ecx']
call ['_MatchFinder_Create@24']
test ['eax,', 'eax']
jnz ['short', 'loc_1C83']
mov ['eax,', '2']
jmp ['short', 'loc_1CA9']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '250h']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '250h']
push ['edx']
call ['_MatchFinder_CreateVTable@8']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_RangeEnc_Alloc@8 proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+20h],', '0']
jnz ['short', 'loc_1D0B']
mov ['esi,', 'esp']
push ['10000h']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+20h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+20h],', '0']
jnz ['short', 'loc_1CF9']
xor ['eax,', 'eax']
jmp ['short', 'loc_1D10']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
add ['ecx,', '10000h']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+1Ch],', 'ecx']
mov ['eax,', '1']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_LzmaEnc_MemPrepare@24 proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_LzmaEnc_SetInputBuf@12']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+74h],', '1']
mov ['edx,', '[ebp+arg_14]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_LzmaEnc_AllocAndInit@16']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
endp
_LzmaEnc_SetInputBuf@12 proc near       
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+26Fh],', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+284h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+29Ch],', 'ecx']
pop ['ebp']
retn ['0Ch']
endp
_LzmaEnc_Finish@4 proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+0D0h],', '0']
jz ['short', 'loc_1DDC']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '0D4h']
push ['edx']
call ['_MatchFinderMt_ReleaseStream@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_LzmaEnc_GetNumAvailableBytes@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_LzmaEnc_GetCurBuf@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+var_4]']
sub ['eax,', '[edx+30h]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_LzmaEnc_CodeOneMemBlock@24 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_24],', 'offset', '_MyWrite@12']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+68h],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+6Ch],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+90h],', '0']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_1ED8']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_LzmaEnc_Init@4']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_LzmaEnc_InitPrices@4']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+78h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[eax+7Ch]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '98h']
push ['eax']
call ['_RangeEnc_Init@4']
mov ['ecx,', '[ebp+var_4]']
lea ['edx,', '[ebp+var_24]']
mov ['[ecx+0BCh],', 'edx']
mov ['eax,', '[ebp+arg_14]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
push ['1']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_LzmaEnc_CodeOneBlock@16']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+78h]']
sub ['edx,', '[ebp+var_C]']
mov ['eax,', '[ecx+7Ch]']
sbb ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_14]']
mov ['[ecx],', 'edx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
sub ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_1F50']
mov ['eax,', '7']
jmp ['short', 'loc_1F53']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
endp
_LzmaEnc_CodeOneBlock@16 proc near      
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '70h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_70]']
mov ['ecx,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+74h],', '0']
jz ['short', 'loc_1FE1']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+74h],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+6Ch],', '0']
jz ['short', 'loc_1FF8']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+90h]']
jmp ['loc_279D']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_CheckErrors@4']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_2012']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_279D']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+78h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_5C],', 'eax']
mov ['ecx,', '[ebp+var_5C]']
mov ['edx,', '[ebp+var_5C]']
mov ['eax,', '[ecx+78h]']
or ['eax,', '[edx+7Ch]']
jnz ['loc_20FF']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_2066']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Flush@8']
jmp ['loc_279D']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ReadMatchDistances@8']
push ['0']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+44h]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+32608h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '98h']
push ['ecx']
call ['_RangeEnc_EncodeBit@12']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+44h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '_kLiteralNextStates[eax*4]']
mov ['[ecx+44h],', 'edx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
sub ['eax,', '[ecx+30h]']
mov ['dl,', '[eax]']
mov ['[ebp+var_19],', 'dl']
movzx ['eax,', '[ebp+var_19]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+60h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '98h']
push ['eax']
call ['_LitEnc_Encode@12']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
sub ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+30h],', 'edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['loc_2776']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+64h],', '0']
jz ['short', 'loc_2139']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_GetOptimumFast@8']
mov ['[ebp+var_2C],', 'eax']
jmp ['short', 'loc_214D']
lea ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_GetOptimum@12']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
and ['ecx,', '[eax+58h]']
mov ['[ebp+var_30],', 'ecx']
cmp ['[ebp+var_2C],', '1']
jnz ['loc_225A']
cmp ['[ebp+var_24],', '0FFFFFFFFh']
jnz ['loc_225A']
push ['0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+44h]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+32608h]']
mov ['eax,', '[ebp+var_30]']
lea ['ecx,', '[edx+eax*2]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '98h']
push ['edx']
call ['_RangeEnc_EncodeBit@12']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
sub ['eax,', '[ecx+30h]']
mov ['[ebp+var_3C],', 'eax']
mov ['edx,', '[ebp+var_3C]']
mov ['al,', '[edx]']
mov ['[ebp+var_31],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
and ['edx,', '[ecx+54h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+48h]']
shl ['edx,', 'cl']
mov ['ecx,', '[ebp+var_3C]']
movzx ['eax,', 'byte', 'ptr', '[ecx-1]']
mov ['ecx,', '[ebp+arg_0]']
mov ['esi,', '8']
sub ['esi,', '[ecx+48h]']
mov ['ecx,', 'esi']
sar ['eax,', 'cl']
add ['edx,', 'eax']
imul ['edx,', '300h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+60h]']
lea ['edx,', '[ecx+edx*2]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+44h],', '7']
jnb ['short', 'loc_221D']
movzx ['ecx,', '[ebp+var_31]']
push ['ecx']
mov ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '98h']
push ['eax']
call ['_LitEnc_Encode@12']
jmp ['short', 'loc_2242']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_3C]']
sub ['edx,', '[ecx+34h]']
movzx ['eax,', 'byte', 'ptr', '[edx-1]']
push ['eax']
movzx ['ecx,', '[ebp+var_31]']
push ['ecx']
mov ['edx,', '[ebp+var_38]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '98h']
push ['eax']
call ['_LitEnc_EncodeMatched@16']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '_kLiteralNextStates[edx*4]']
mov ['[eax+44h],', 'ecx']
jmp ['loc_2649']
push ['1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+44h]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+32608h]']
mov ['eax,', '[ebp+var_30]']
lea ['ecx,', '[edx+eax*2]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '98h']
push ['edx']
call ['_RangeEnc_EncodeBit@12']
cmp ['[ebp+var_24],', '4']
jnb ['loc_2450']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+44h]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx*2+32788h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '98h']
push ['ecx']
call ['_RangeEnc_EncodeBit@12']
cmp ['[ebp+var_24],', '0']
jnz ['short', 'loc_2310']
push ['0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+44h]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2+327A0h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '98h']
push ['eax']
call ['_RangeEnc_EncodeBit@12']
xor ['ecx,', 'ecx']
cmp ['[ebp+var_2C],', '1']
setnz ['cl']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+44h]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+327E8h]']
mov ['eax,', '[ebp+var_30]']
lea ['ecx,', '[edx+eax*2]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '98h']
push ['edx']
call ['_RangeEnc_EncodeBit@12']
jmp ['loc_23E4']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+34h]']
mov ['[ebp+var_40],', 'edx']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+44h]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx*2+327A0h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '98h']
push ['ecx']
call ['_RangeEnc_EncodeBit@12']
cmp ['[ebp+var_24],', '1']
jnz ['short', 'loc_2368']
push ['0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+44h]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2+327B8h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '98h']
push ['eax']
call ['_RangeEnc_EncodeBit@12']
jmp ['short', 'loc_23CF']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx*2+327B8h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '98h']
push ['edx']
call ['_RangeEnc_EncodeBit@12']
mov ['eax,', '[ebp+var_24]']
sub ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx*2+327D0h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '98h']
push ['edx']
call ['_RangeEnc_EncodeBit@12']
cmp ['[ebp+var_24],', '3']
jnz ['short', 'loc_23C3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
mov ['[eax+40h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+38h]']
mov ['[eax+3Ch],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+34h]']
mov ['[eax+38h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_40]']
mov ['[eax+34h],', 'ecx']
cmp ['[ebp+var_2C],', '1']
jnz ['short', 'loc_23FF']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+44h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '_kShortRepNextStates[eax*4]']
mov ['[ecx+44h],', 'edx']
jmp ['short', 'loc_244B']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '30F34h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
xor ['edx,', 'edx']
cmp ['dword', 'ptr', '[ecx+64h],', '0']
setz ['dl']
push ['edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
sub ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '98h']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '374B4h']
push ['eax']
call ['_LenEnc_Encode2@24']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '_kRepNextStates[edx*4]']
mov ['[eax+44h],', 'ecx']
jmp ['loc_2649']
push ['0']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+44h]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2+32788h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '98h']
push ['eax']
call ['_RangeEnc_EncodeBit@12']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '_kMatchNextStates[edx*4]']
mov ['[eax+44h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '30F34h']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax+64h],', '0']
setz ['cl']
push ['ecx']
mov ['edx,', '[ebp+var_30]']
push ['edx']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '98h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '32C6Ch']
push ['edx']
call ['_LenEnc_Encode2@24']
mov ['eax,', '[ebp+var_24]']
sub ['eax,', '4']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '80h']
jnb ['short', 'loc_24E3']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_24]']
movzx ['edx,', 'byte', 'ptr', '[ecx+30734h]']
mov ['[ebp+var_44],', 'edx']
jmp ['short', 'loc_2511']
cmp ['[ebp+var_24],', '20000h']
sbb ['eax,', 'eax']
and ['eax,', '0FFFFFFF6h']
add ['eax,', '10h']
mov ['[ebp+var_48],', 'eax']
mov ['edx,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_48]']
shr ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx+30734h]']
mov ['edx,', '[ebp+var_48]']
lea ['eax,', '[ecx+edx*2]']
mov ['[ebp+var_44],', 'eax']
cmp ['[ebp+var_2C],', '5']
jnb ['short', 'loc_2522']
mov ['ecx,', '[ebp+var_2C]']
sub ['ecx,', '2']
mov ['[ebp+var_60],', 'ecx']
jmp ['short', 'loc_2529']
mov ['[ebp+var_60],', '3']
mov ['edx,', '[ebp+var_44]']
push ['edx']
push ['6']
mov ['eax,', '[ebp+var_60]']
shl ['eax,', '7']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+32968h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '98h']
push ['eax']
call ['_RcTree_Encode@16']
cmp ['[ebp+var_44],', '4']
jb ['loc_2607']
mov ['ecx,', '[ebp+var_44]']
shr ['ecx,', '1']
sub ['ecx,', '1']
mov ['[ebp+var_4C],', 'ecx']
mov ['edx,', '[ebp+var_44]']
and ['edx,', '1']
or ['edx,', '2']
mov ['ecx,', '[ebp+var_4C]']
shl ['edx,', 'cl']
mov ['[ebp+var_50],', 'edx']
mov ['eax,', '[ebp+var_24]']
sub ['eax,', '[ebp+var_50]']
mov ['[ebp+var_54],', 'eax']
cmp ['[ebp+var_44],', '0Eh']
jnb ['short', 'loc_25B4']
mov ['ecx,', '[ebp+var_54]']
push ['ecx']
mov ['edx,', '[ebp+var_4C]']
push ['edx']
mov ['eax,', '[ebp+var_50]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2+32B68h]']
mov ['eax,', '[ebp+var_44]']
shl ['eax,', '1']
sub ['edx,', 'eax']
sub ['edx,', '2']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '98h']
push ['ecx']
call ['_RcTree_ReverseEncode@16']
jmp ['short', 'loc_2607']
mov ['edx,', '[ebp+var_4C]']
sub ['edx,', '4']
push ['edx']
mov ['eax,', '[ebp+var_54]']
shr ['eax,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '98h']
push ['ecx']
call ['_RangeEnc_EncodeDirectBits@12']
mov ['edx,', '[ebp+var_54]']
and ['edx,', '0Fh']
push ['edx']
push ['4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '32C4Ch']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '98h']
push ['ecx']
call ['_RcTree_ReverseEncode@16']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+84h]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+84h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+3Ch]']
mov ['[edx+40h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
mov ['[edx+3Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+34h]']
mov ['[edx+38h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_24]']
mov ['[edx+34h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+80h]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+80h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+30h]']
sub ['edx,', '[ebp+var_2C]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+30h],', 'edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '[ebp+var_2C]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+30h],', '0']
jnz ['loc_2771']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+64h],', '0']
jnz ['short', 'loc_26A4']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+80h],', '80h']
jb ['short', 'loc_268F']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_FillDistancesPrices@4']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+84h],', '10h']
jb ['short', 'loc_26A4']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_FillAlignPrices@4']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+8]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jnz ['short', 'loc_26C4']
jmp ['loc_2776']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '[ebp+var_8]']
mov ['[ebp+var_58],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2743']
mov ['ecx,', '[ebp+var_58]']
add ['ecx,', '112Ch']
cmp ['ecx,', '[ebp+arg_C]']
jnb ['short', 'loc_273F']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+0B0h]']
sub ['ecx,', '[eax+0B8h]']
mov ['eax,', 'ecx']
cdq
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+0C0h]']
adc ['edx,', '[ecx+0C4h]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+0A8h]']
adc ['edx,', '[ecx+0ACh]']
add ['eax,', '2000h']
adc ['edx,', '0']
mov ['ecx,', '[ebp+arg_8]']
xor ['esi,', 'esi']
mov ['[ebp+var_68],', 'eax']
mov ['[ebp+var_64],', 'edx']
mov ['[ebp+var_70],', 'ecx']
mov ['[ebp+var_6C],', 'esi']
mov ['edx,', '[ebp+var_64]']
cmp ['edx,', '[ebp+var_6C]']
jb ['short', 'loc_2741']
ja ['short', 'loc_273F']
mov ['eax,', '[ebp+var_68]']
cmp ['eax,', '[ebp+var_70]']
jb ['short', 'loc_2741']
jmp ['short', 'loc_2776']
jmp ['short', 'loc_2771']
cmp ['[ebp+var_58],', '20000h']
jb ['short', 'loc_2771']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '[ebp+var_8]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['ecx,', '[eax+78h]']
adc ['edx,', '[eax+7Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+78h],', 'ecx']
mov ['[eax+7Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_CheckErrors@4']
jmp ['short', 'loc_279D']
jmp ['loc_211E']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '[ebp+var_8]']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['edx,', '[ecx+78h]']
adc ['eax,', '[ecx+7Ch]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+78h],', 'edx']
mov ['[ecx+7Ch],', 'eax']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Flush@8']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN47']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '70h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_RangeEnc_EncodeDirectBits@12 proc near 
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
shr ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
mov ['edx,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_8]']
shr ['edx,', 'cl']
and ['edx,', '1']
xor ['eax,', 'eax']
sub ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
and ['eax,', '[ecx]']
xor ['edx,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+8]']
adc ['edx,', '[ecx+0Ch]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['[ecx+0Ch],', 'edx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx],', '1000000h']
jnb ['short', 'loc_2850']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
shl ['ecx,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['@RangeEnc_ShiftLow@4']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_27F3']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
@RangeEnc_ShiftLow@4 proc near          
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
push ['ebx']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0FF000000h']
jb ['short', 'loc_28B2']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[ecx+8]']
mov ['edx,', '[ecx+0Ch]']
mov ['cl,', '20h']
call ['__aullshr']
test ['eax,', 'eax']
jz ['loc_2947']
mov ['edx,', '[ebp+var_4]']
mov ['al,', '[edx+4]']
mov ['byte', 'ptr', '[ebp+var_8+3],', 'al']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+18h]']
mov ['[ebp+var_C],', 'edx']
movzx ['ebx,', 'byte', 'ptr', '[ebp+var_8+3]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[ecx+8]']
mov ['edx,', '[ecx+0Ch]']
mov ['cl,', '20h']
call ['__aullshr']
movzx ['edx,', 'al']
add ['ebx,', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[eax],', 'bl']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx+18h],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ecx+1Ch]']
jnz ['short', 'loc_2908']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_RangeEnc_FlushStream@4']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0FFh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
sub ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ecx+14h]']
sbb ['eax,', '0']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx+10h],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ecx+14h],', 'eax']
mov ['ecx,', '[ebp+var_14]']
or ['ecx,', '[ebp+var_10]']
jnz ['short', 'loc_28BB']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
shr ['eax,', '18h']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'al']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
add ['eax,', '1']
mov ['ecx,', '[edx+14h]']
adc ['ecx,', '0']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+10h],', 'eax']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
shl ['ecx,', '8']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+8],', 'ecx']
mov ['[eax+0Ch],', 'edx']
pop ['ebx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_RangeEnc_FlushStream@4 proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+30h],', '0']
jz ['short', 'loc_29A7']
jmp ['short', 'loc_2A0D']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+18h]']
sub ['eax,', '[edx+20h]']
mov ['[ebp+var_4],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+24h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['edx,', '[ecx]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['[ebp+var_4],', 'eax']
jz ['short', 'loc_29EA']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+30h],', '9']
mov ['ecx,', '[ebp+var_4]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['ecx,', '[eax+28h]']
adc ['edx,', '[eax+2Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+28h],', 'ecx']
mov ['[eax+2Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+20h]']
mov ['[ecx+18h],', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_RangeEnc_EncodeBit@12 proc near        
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
shr ['eax,', '0Bh']
imul ['eax,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_2A6D']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx],', 'edx']
mov ['eax,', '800h']
sub ['eax,', '[ebp+var_4]']
shr ['eax,', '5']
add ['eax,', '[ebp+var_4]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_2A9F']
mov ['ecx,', '[ebp+var_8]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['ecx,', '[eax+8]']
adc ['edx,', '[eax+0Ch]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['[eax+0Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
sub ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_4]']
shr ['ecx,', '5']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', 'ecx']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['cx,', 'word', 'ptr', '[ebp+var_4]']
mov ['[eax],', 'cx']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx],', '1000000h']
jnb ['short', 'loc_2AC9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
shl ['ecx,', '8']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['@RangeEnc_ShiftLow@4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_LitEnc_Encode@12 proc near             
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
or ['eax,', '100h']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
shr ['ecx,', '7']
and ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
shr ['edx,', '8']
mov ['eax,', '[ebp+arg_4]']
lea ['ecx,', '[eax+edx*2]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_RangeEnc_EncodeBit@12']
mov ['eax,', '[ebp+arg_8]']
shl ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
cmp ['[ebp+arg_8],', '10000h']
jb ['short', 'loc_2AEE']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
_LitEnc_EncodeMatched@16 proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '100h']
mov ['eax,', '[ebp+arg_8]']
or ['eax,', '100h']
mov ['[ebp+arg_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
shl ['ecx,', '1']
mov ['[ebp+arg_C],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
shr ['edx,', '7']
and ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
and ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_8]']
shr ['ecx,', '8']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[edx+eax*2]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_RangeEnc_EncodeBit@12']
mov ['edx,', '[ebp+arg_8]']
shl ['edx,', '1']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_C]']
xor ['eax,', '[ebp+arg_8]']
not ['eax']
and ['eax,', '[ebp+var_4]']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_8],', '10000h']
jb ['short', 'loc_2B4D']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_RcTree_Encode@16 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_2C19']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_8]']
shr ['edx,', 'cl']
and ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[edx+ecx*2]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_RangeEnc_EncodeBit@12']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '1']
or ['edx,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_2BD8']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_RcTree_ReverseEncode@16 proc near      
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '1']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_2C64']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_8]']
jge ['short', 'loc_2CA1']
mov ['edx,', '[ebp+arg_C]']
and ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[edx+ecx*2]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_RangeEnc_EncodeBit@12']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '1']
or ['edx,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_C]']
shr ['eax,', '1']
mov ['[ebp+arg_C],', 'eax']
jmp ['short', 'loc_2C5B']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_LenEnc_Encode2@24 proc near            
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_LenEnc_Encode@16']
cmp ['[ebp+arg_10],', '0']
jz ['short', 'loc_2D1E']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4+4808h]']
sub ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx+ecx*4+4808h],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_2D1E']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+arg_0]']
call ['@LenPriceEnc_UpdateTable@12']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
endp
_LenEnc_Encode@16 proc near             
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_8],', '8']
jnb ['short', 'loc_2D67']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_RangeEnc_EncodeBit@12']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
push ['3']
mov ['eax,', '[ebp+arg_C]']
shl ['eax,', '3']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2+4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_RcTree_Encode@16']
jmp ['short', 'loc_2DE1']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_RangeEnc_EncodeBit@12']
cmp ['[ebp+arg_8],', '10h']
jnb ['short', 'loc_2DB3']
push ['0']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_RangeEnc_EncodeBit@12']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '8']
push ['edx']
push ['3']
mov ['eax,', '[ebp+arg_C]']
shl ['eax,', '3']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*2+104h]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['_RcTree_Encode@16']
jmp ['short', 'loc_2DE1']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_RangeEnc_EncodeBit@12']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '10h']
push ['eax']
push ['8']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '204h']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['_RcTree_Encode@16']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['10h']
endp
_ReadMatchDistances@8 proc near         
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+28h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '31134h']
mov ['esi,', 'esp']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+10h]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jbe ['loc_2F0E']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4+3112Ch]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ecx+2Ch]']
jnz ['loc_2F0E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+28h]']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '111h']
jbe ['short', 'loc_2E9B']
mov ['[ebp+var_C],', '111h']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '[ebp+var_4]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
or ['eax,', '0FFFFFFFFh']
sub ['eax,', '[edx+ecx*4+31130h]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_2EE8']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[ebp+var_1C]']
jz ['short', 'loc_2F05']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_18]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jnz ['short', 'loc_2F05']
jmp ['short', 'loc_2EDF']
mov ['edx,', '[ebp+var_14]']
sub ['edx,', '[ebp+var_10]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+30h],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_GetOptimum@12  proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1F8h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_1F8]']
mov ['ecx,', '7Eh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+18h]']
cmp ['edx,', '[ecx+1Ch]']
jz ['short', 'loc_2FB9']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+1Ch]']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+734h]']
mov ['[ebp+var_7C],', 'eax']
mov ['ecx,', '[ebp+var_7C]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+18h]']
sub ['eax,', '[edx+1Ch]']
mov ['[ebp+var_80],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_7C]']
mov ['eax,', '[edx+1Ch]']
mov ['[ecx],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_7C]']
mov ['eax,', '[edx+18h]']
mov ['[ecx+1Ch],', 'eax']
mov ['eax,', '[ebp+var_80]']
jmp ['loc_4BDE']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+1Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+30h],', '0']
jnz ['short', 'loc_2FE8']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ReadMatchDistances@8']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_2FFA']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '2']
jnb ['short', 'loc_301C']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
mov ['eax,', '1']
jmp ['loc_4BDE']
cmp ['[ebp+var_8],', '111h']
jbe ['short', 'loc_302C']
mov ['[ebp+var_8],', '111h']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '1']
mov ['[ebp+var_74],', 'eax']
mov ['[ebp+var_1C],', '0']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_3062']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
cmp ['[ebp+var_20],', '4']
jnb ['loc_3133']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+ecx*4+34h]']
mov ['[ebp+eax*4+var_50],', 'ecx']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[ebp+var_74]']
sub ['eax,', '[ebp+edx*4+var_50]']
sub ['eax,', '1']
mov ['[ebp+var_88],', 'eax']
mov ['ecx,', '[ebp+var_74]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_88]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jnz ['short', 'loc_30B8']
mov ['edx,', '[ebp+var_74]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
mov ['ecx,', '[ebp+var_88]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
cmp ['eax,', 'edx']
jz ['short', 'loc_30C5']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+eax*4+var_68],', '0']
jmp ['short', 'loc_3059']
mov ['[ebp+var_84],', '2']
jmp ['short', 'loc_30E0']
mov ['ecx,', '[ebp+var_84]']
add ['ecx,', '1']
mov ['[ebp+var_84],', 'ecx']
mov ['edx,', '[ebp+var_84]']
cmp ['edx,', '[ebp+var_8]']
jnb ['short', 'loc_310C']
mov ['eax,', '[ebp+var_74]']
add ['eax,', '[ebp+var_84]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_88]']
add ['edx,', '[ebp+var_84]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jnz ['short', 'loc_310C']
jmp ['short', 'loc_30D1']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_84]']
mov ['[ebp+ecx*4+var_68],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+var_84]']
cmp ['ecx,', '[ebp+eax*4+var_68]']
jbe ['short', 'loc_312E']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_1C],', 'edx']
jmp ['loc_3059']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+eax*4+var_68]']
cmp ['edx,', '[ecx+2Ch]']
jb ['short', 'loc_3175']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_1C]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[ebp+edx*4+var_68]']
mov ['[ebp+var_8C],', 'eax']
mov ['ecx,', '[ebp+var_8C]']
sub ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MovePos@8']
mov ['eax,', '[ebp+var_8C]']
jmp ['loc_4BDE']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '31134h']
mov ['[ebp+var_70],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ecx+2Ch]']
jb ['short', 'loc_31B5']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_70]']
mov ['edx,', '[ecx+eax*4-4]']
add ['edx,', '4']
mov ['eax,', '[ebp+arg_8]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MovePos@8']
mov ['eax,', '[ebp+var_C]']
jmp ['loc_4BDE']
mov ['eax,', '[ebp+var_74]']
mov ['cl,', '[eax]']
mov ['[ebp+var_75],', 'cl']
mov ['edx,', '[ebp+var_50]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_74]']
sub ['eax,', 'edx']
mov ['cl,', '[eax]']
mov ['[ebp+var_76],', 'cl']
cmp ['[ebp+var_C],', '2']
jnb ['short', 'loc_31FC']
movzx ['edx,', '[ebp+var_75]']
movzx ['eax,', '[ebp+var_76]']
cmp ['edx,', 'eax']
jz ['short', 'loc_31FC']
mov ['ecx,', '[ebp+var_1C]']
cmp ['[ebp+ecx*4+var_68],', '2']
jnb ['short', 'loc_31FC']
mov ['edx,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[edx],', '0FFFFFFFFh']
mov ['eax,', '1']
jmp ['loc_4BDE']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
mov ['[eax+738h],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '[eax+58h]']
mov ['[ebp+var_24],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '[edx+54h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+48h]']
shl ['eax,', 'cl']
mov ['edx,', '[ebp+var_74]']
movzx ['edx,', 'byte', 'ptr', '[edx-1]']
mov ['ecx,', '[ebp+arg_0]']
mov ['esi,', '8']
sub ['esi,', '[ecx+48h]']
mov ['ecx,', 'esi']
sar ['edx,', 'cl']
add ['eax,', 'edx']
imul ['eax,', '300h']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+60h]']
lea ['edx,', '[ecx+eax*2]']
mov ['[ebp+var_90],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+44h],', '7']
jb ['short', 'loc_3286']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '30F34h']
push ['ecx']
movzx ['edx,', '[ebp+var_76]']
push ['edx']
movzx ['eax,', '[ebp+var_75]']
push ['eax']
mov ['ecx,', '[ebp+var_90]']
push ['ecx']
call ['_LitEnc_GetPriceMatched@16']
mov ['[ebp+var_1E0],', 'eax']
jmp ['short', 'loc_32A7']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '30F34h']
push ['edx']
movzx ['eax,', '[ebp+var_75]']
push ['eax']
mov ['ecx,', '[ebp+var_90]']
push ['ecx']
call ['_LitEnc_GetPrice@12']
mov ['[ebp+var_1E0],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+44h]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+32608h]']
mov ['eax,', '[ebp+var_24]']
movzx ['ecx,', 'word', 'ptr', '[edx+eax*2]']
sar ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4+30F34h]']
add ['eax,', '[ebp+var_1E0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+764h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+780h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+76Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
shl ['edx,', '5']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+32608h]']
mov ['edx,', '[ebp+var_24]']
movzx ['eax,', 'word', 'ptr', '[ecx+edx*2]']
xor ['eax,', '7FFh']
sar ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax*4+30F34h]']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+44h]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2+32788h]']
xor ['eax,', '7FFh']
sar ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '[ecx+eax*4+30F34h]']
mov ['[ebp+var_38],', 'edx']
movzx ['eax,', '[ebp+var_76]']
movzx ['ecx,', '[ebp+var_75]']
cmp ['eax,', 'ecx']
jnz ['short', 'loc_33B2']
mov ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+44h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_GetRepLen1Price@12']
add ['eax,', '[ebp+var_38]']
mov ['[ebp+var_94],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_94]']
cmp ['ecx,', '[eax+764h]']
jnb ['short', 'loc_33B2']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_94]']
mov ['[edx+764h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+780h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+76Ch],', '0']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+eax*4+var_68]']
jb ['short', 'loc_33C9']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_1E4],', 'edx']
jmp ['short', 'loc_33D6']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+eax*4+var_68]']
mov ['[ebp+var_1E4],', 'ecx']
mov ['edx,', '[ebp+var_1E4]']
mov ['[ebp+var_28],', 'edx']
cmp ['[ebp+var_28],', '2']
jnb ['short', 'loc_33FD']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+780h]']
mov ['[eax],', 'edx']
mov ['eax,', '1']
jmp ['loc_4BDE']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+77Ch],', '0']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_341C']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
cmp ['[ebp+var_20],', '4']
jnb ['short', 'loc_3438']
mov ['edx,', '[ebp+var_20]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_20]']
mov ['ecx,', '[ebp+ecx*4+var_50]']
mov ['[eax+edx*4+754h],', 'ecx']
jmp ['short', 'loc_3413']
mov ['edx,', '[ebp+var_28]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
imul ['eax,', '30h']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+eax+734h],', '40000000h']
mov ['edx,', '[ebp+var_2C]']
sub ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
cmp ['[ebp+var_2C],', '2']
jnb ['short', 'loc_343E']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_3473']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '4']
jnb ['loc_355D']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+ecx*4+var_68]']
mov ['[ebp+var_98],', 'edx']
cmp ['[ebp+var_98],', '2']
jnb ['short', 'loc_3495']
jmp ['short', 'loc_346A']
mov ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_GetPureRepPrice@16']
add ['eax,', '[ebp+var_38]']
mov ['[ebp+var_9C],', 'eax']
mov ['edx,', '[ebp+var_24]']
imul ['edx,', '440h']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+378BCh]']
mov ['edx,', '[ebp+var_98]']
mov ['eax,', '[ebp+var_9C]']
add ['eax,', '[ecx+edx*4-8]']
mov ['[ebp+var_A0],', 'eax']
mov ['ecx,', '[ebp+var_98]']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+734h]']
mov ['[ebp+var_A4],', 'eax']
mov ['ecx,', '[ebp+var_A4]']
mov ['edx,', '[ebp+var_A0]']
cmp ['edx,', '[ecx]']
jnb ['short', 'loc_353C']
mov ['eax,', '[ebp+var_A4]']
mov ['ecx,', '[ebp+var_A0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_A4]']
mov ['dword', 'ptr', '[edx+18h],', '0']
mov ['eax,', '[ebp+var_A4]']
mov ['ecx,', '[ebp+var_20]']
mov ['[eax+1Ch],', 'ecx']
mov ['edx,', '[ebp+var_A4]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+var_98]']
sub ['eax,', '1']
mov ['[ebp+var_98],', 'eax']
cmp ['[ebp+var_98],', '2']
jnb ['loc_34B6']
jmp ['loc_346A']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+32788h]']
sar ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_34]']
add ['eax,', '[edx+ecx*4+30F34h]']
mov ['[ebp+var_3C],', 'eax']
cmp ['[ebp+var_68],', '2']
jb ['short', 'loc_3595']
mov ['ecx,', '[ebp+var_68]']
add ['ecx,', '1']
mov ['[ebp+var_1E8],', 'ecx']
jmp ['short', 'loc_359F']
mov ['[ebp+var_1E8],', '2']
mov ['edx,', '[ebp+var_1E8]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[ebp+var_C]']
ja ['loc_378E']
mov ['[ebp+var_A8],', '0']
mov ['ecx,', '[ebp+var_A8]']
mov ['edx,', '[ebp+var_70]']
mov ['eax,', '[ebp+var_2C]']
cmp ['eax,', '[edx+ecx*4]']
jbe ['short', 'loc_35E0']
mov ['ecx,', '[ebp+var_A8]']
add ['ecx,', '2']
mov ['[ebp+var_A8],', 'ecx']
jmp ['short', 'loc_35BE']
jmp ['short', 'loc_35EB']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_A8]']
mov ['ecx,', '[ebp+var_70]']
mov ['edx,', '[ecx+eax*4+4]']
mov ['[ebp+var_B0],', 'edx']
mov ['eax,', '[ebp+var_24]']
imul ['eax,', '440h']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+33074h]']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+var_3C]']
add ['ecx,', '[edx+eax*4-8]']
mov ['[ebp+var_B4],', 'ecx']
cmp ['[ebp+var_2C],', '5']
jnb ['short', 'loc_3635']
mov ['edx,', '[ebp+var_2C]']
sub ['edx,', '2']
mov ['[ebp+var_1EC],', 'edx']
jmp ['short', 'loc_363F']
mov ['[ebp+var_1EC],', '3']
mov ['eax,', '[ebp+var_1EC]']
mov ['[ebp+var_B8],', 'eax']
cmp ['[ebp+var_B0],', '80h']
jnb ['short', 'loc_3681']
mov ['ecx,', '[ebp+var_B8]']
shl ['ecx,', '9']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+31DC8h]']
mov ['ecx,', '[ebp+var_B0]']
mov ['edx,', '[ebp+var_B4]']
add ['edx,', '[eax+ecx*4]']
mov ['[ebp+var_B4],', 'edx']
jmp ['short', 'loc_36FC']
cmp ['[ebp+var_B0],', '20000h']
sbb ['eax,', 'eax']
and ['eax,', '0FFFFFFF6h']
add ['eax,', '10h']
mov ['[ebp+var_C0],', 'eax']
mov ['edx,', '[ebp+var_B0]']
mov ['ecx,', '[ebp+var_C0]']
shr ['edx,', 'cl']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx+30734h]']
mov ['edx,', '[ebp+var_C0]']
lea ['eax,', '[ecx+edx*2]']
mov ['[ebp+var_BC],', 'eax']
mov ['ecx,', '[ebp+var_B0]']
and ['ecx,', '0Fh']
mov ['edx,', '[ebp+var_B8]']
shl ['edx,', '8']
mov ['eax,', '[ebp+arg_0]']
lea ['edx,', '[eax+edx+319C8h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+ecx*4+325C8h]']
mov ['eax,', '[ebp+var_BC]']
add ['ecx,', '[edx+eax*4]']
add ['ecx,', '[ebp+var_B4]']
mov ['[ebp+var_B4],', 'ecx']
mov ['ecx,', '[ebp+var_2C]']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+734h]']
mov ['[ebp+var_AC],', 'eax']
mov ['ecx,', '[ebp+var_AC]']
mov ['edx,', '[ebp+var_B4]']
cmp ['edx,', '[ecx]']
jnb ['short', 'loc_375C']
mov ['eax,', '[ebp+var_AC]']
mov ['ecx,', '[ebp+var_B4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_AC]']
mov ['dword', 'ptr', '[edx+18h],', '0']
mov ['eax,', '[ebp+var_B0]']
add ['eax,', '4']
mov ['ecx,', '[ebp+var_AC]']
mov ['[ecx+1Ch],', 'eax']
mov ['edx,', '[ebp+var_AC]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+var_A8]']
mov ['ecx,', '[ebp+var_70]']
mov ['edx,', '[ebp+var_2C]']
cmp ['edx,', '[ecx+eax*4]']
jnz ['short', 'loc_3789']
mov ['eax,', '[ebp+var_A8]']
add ['eax,', '2']
mov ['[ebp+var_A8],', 'eax']
mov ['ecx,', '[ebp+var_A8]']
cmp ['ecx,', '[ebp+var_14]']
jnz ['short', 'loc_3789']
jmp ['short', 'loc_378E']
jmp ['loc_35E2']
mov ['[ebp+var_30],', '0']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_28]']
jnz ['short', 'loc_37BC']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Backward@12']
jmp ['loc_4BDE']
lea ['ecx,', '[ebp+var_D0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ReadMatchDistances@8']
mov ['[ebp+var_C8],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C8]']
cmp ['ecx,', '[eax+2Ch]']
jb ['short', 'loc_380E']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_D0]']
mov ['[edx+24h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C8]']
mov ['[ecx+20h],', 'edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_Backward@12']
jmp ['loc_4BDE']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+var_30]']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+734h]']
mov ['[ebp+var_104],', 'eax']
mov ['ecx,', '[ebp+var_104]']
mov ['edx,', '[ecx+18h]']
mov ['[ebp+var_D8],', 'edx']
mov ['eax,', '[ebp+var_104]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['loc_38E7']
mov ['ecx,', '[ebp+var_D8]']
sub ['ecx,', '1']
mov ['[ebp+var_D8],', 'ecx']
mov ['edx,', '[ebp+var_104]']
cmp ['dword', 'ptr', '[edx+0Ch],', '0']
jz ['short', 'loc_38B9']
mov ['eax,', '[ebp+var_104]']
mov ['ecx,', '[eax+10h]']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx+738h]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_104]']
cmp ['dword', 'ptr', '[ecx+14h],', '4']
jnb ['short', 'loc_38A4']
mov ['edx,', '[ebp+var_DC]']
mov ['eax,', '_kRepNextStates[edx*4]']
mov ['[ebp+var_DC],', 'eax']
jmp ['short', 'loc_38B7']
mov ['ecx,', '[ebp+var_DC]']
mov ['edx,', '_kMatchNextStates[ecx*4]']
mov ['[ebp+var_DC],', 'edx']
jmp ['short', 'loc_38D2']
mov ['eax,', '[ebp+var_D8]']
imul ['eax,', '30h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax+738h]']
mov ['[ebp+var_DC],', 'edx']
mov ['eax,', '[ebp+var_DC]']
mov ['ecx,', '_kLiteralNextStates[eax*4]']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_3900']
mov ['edx,', '[ebp+var_D8]']
imul ['edx,', '30h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+edx+738h]']
mov ['[ebp+var_DC],', 'ecx']
mov ['edx,', '[ebp+var_30]']
sub ['edx,', '1']
cmp ['[ebp+var_D8],', 'edx']
jnz ['short', 'loc_3947']
mov ['eax,', '[ebp+var_104]']
cmp ['dword', 'ptr', '[eax+1Ch],', '0']
jnz ['short', 'loc_392F']
mov ['ecx,', '[ebp+var_DC]']
mov ['edx,', '_kShortRepNextStates[ecx*4]']
mov ['[ebp+var_DC],', 'edx']
jmp ['short', 'loc_3942']
mov ['eax,', '[ebp+var_DC]']
mov ['ecx,', '_kLiteralNextStates[eax*4]']
mov ['[ebp+var_DC],', 'ecx']
jmp ['loc_3AD4']
mov ['edx,', '[ebp+var_104]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jz ['short', 'loc_3992']
mov ['eax,', '[ebp+var_104]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
jz ['short', 'loc_3992']
mov ['ecx,', '[ebp+var_104]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_D8],', 'edx']
mov ['eax,', '[ebp+var_104]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_10C],', 'ecx']
mov ['edx,', '[ebp+var_DC]']
mov ['eax,', '_kRepNextStates[edx*4]']
mov ['[ebp+var_DC],', 'eax']
jmp ['short', 'loc_39D2']
mov ['ecx,', '[ebp+var_104]']
mov ['edx,', '[ecx+1Ch]']
mov ['[ebp+var_10C],', 'edx']
cmp ['[ebp+var_10C],', '4']
jnb ['short', 'loc_39BF']
mov ['eax,', '[ebp+var_DC]']
mov ['ecx,', '_kRepNextStates[eax*4]']
mov ['[ebp+var_DC],', 'ecx']
jmp ['short', 'loc_39D2']
mov ['edx,', '[ebp+var_DC]']
mov ['eax,', '_kMatchNextStates[edx*4]']
mov ['[ebp+var_DC],', 'eax']
mov ['ecx,', '[ebp+var_D8]']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+734h]']
mov ['[ebp+var_110],', 'eax']
cmp ['[ebp+var_10C],', '4']
jnb ['loc_3A88']
mov ['ecx,', '[ebp+var_10C]']
mov ['edx,', '[ebp+var_110]']
mov ['eax,', '[edx+ecx*4+20h]']
mov ['[ebp+var_50],', 'eax']
mov ['[ebp+var_114],', '1']
jmp ['short', 'loc_3A26']
mov ['ecx,', '[ebp+var_114]']
add ['ecx,', '1']
mov ['[ebp+var_114],', 'ecx']
mov ['edx,', '[ebp+var_114]']
cmp ['edx,', '[ebp+var_10C]']
ja ['short', 'loc_3A50']
mov ['eax,', '[ebp+var_114]']
mov ['ecx,', '[ebp+var_114]']
mov ['edx,', '[ebp+var_110]']
mov ['ecx,', '[edx+ecx*4+1Ch]']
mov ['[ebp+eax*4+var_50],', 'ecx']
jmp ['short', 'loc_3A17']
jmp ['short', 'loc_3A61']
mov ['edx,', '[ebp+var_114]']
add ['edx,', '1']
mov ['[ebp+var_114],', 'edx']
cmp ['[ebp+var_114],', '4']
jnb ['short', 'loc_3A86']
mov ['eax,', '[ebp+var_114]']
mov ['ecx,', '[ebp+var_114]']
mov ['edx,', '[ebp+var_110]']
mov ['ecx,', '[edx+ecx*4+20h]']
mov ['[ebp+eax*4+var_50],', 'ecx']
jmp ['short', 'loc_3A52']
jmp ['short', 'loc_3AD4']
mov ['edx,', '[ebp+var_10C]']
sub ['edx,', '4']
mov ['[ebp+var_50],', 'edx']
mov ['[ebp+var_118],', '1']
jmp ['short', 'loc_3AAF']
mov ['eax,', '[ebp+var_118]']
add ['eax,', '1']
mov ['[ebp+var_118],', 'eax']
cmp ['[ebp+var_118],', '4']
jnb ['short', 'loc_3AD4']
mov ['ecx,', '[ebp+var_118]']
mov ['edx,', '[ebp+var_118]']
mov ['eax,', '[ebp+var_110]']
mov ['edx,', '[eax+edx*4+1Ch]']
mov ['[ebp+ecx*4+var_50],', 'edx']
jmp ['short', 'loc_3AA0']
mov ['eax,', '[ebp+var_104]']
mov ['ecx,', '[ebp+var_DC]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_104]']
mov ['eax,', '[ebp+var_50]']
mov ['[edx+20h],', 'eax']
mov ['ecx,', '[ebp+var_104]']
mov ['edx,', '[ebp+var_4C]']
mov ['[ecx+24h],', 'edx']
mov ['eax,', '[ebp+var_104]']
mov ['ecx,', '[ebp+var_48]']
mov ['[eax+28h],', 'ecx']
mov ['edx,', '[ebp+var_104]']
mov ['eax,', '[ebp+var_44]']
mov ['[edx+2Ch],', 'eax']
mov ['ecx,', '[ebp+var_104]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_E8],', 'edx']
mov ['[ebp+var_F8],', '0']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '1']
mov ['[ebp+var_100],', 'eax']
mov ['ecx,', '[ebp+var_100]']
mov ['dl,', '[ecx]']
mov ['[ebp+var_F9],', 'dl']
mov ['eax,', '[ebp+var_50]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_100]']
sub ['ecx,', 'eax']
mov ['dl,', '[ecx]']
mov ['[ebp+var_FA],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
and ['ecx,', '[eax+58h]']
mov ['[ebp+var_E0],', 'ecx']
mov ['edx,', '[ebp+var_DC]']
shl ['edx,', '5']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+32608h]']
mov ['edx,', '[ebp+var_E0]']
movzx ['eax,', 'word', 'ptr', '[ecx+edx*2]']
sar ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_E8]']
add ['edx,', '[ecx+eax*4+30F34h]']
mov ['[ebp+var_EC],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_4]']
and ['edx,', '[eax+54h]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+48h]']
shl ['edx,', 'cl']
mov ['ecx,', '[ebp+var_100]']
movzx ['eax,', 'byte', 'ptr', '[ecx-1]']
mov ['ecx,', '[ebp+arg_0]']
mov ['esi,', '8']
sub ['esi,', '[ecx+48h]']
mov ['ecx,', 'esi']
sar ['eax,', 'cl']
add ['edx,', 'eax']
imul ['edx,', '300h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+60h]']
lea ['edx,', '[ecx+edx*2]']
mov ['[ebp+var_11C],', 'edx']
cmp ['[ebp+var_DC],', '7']
jb ['short', 'loc_3C2B']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '30F34h']
push ['eax']
movzx ['ecx,', '[ebp+var_FA]']
push ['ecx']
movzx ['edx,', '[ebp+var_F9]']
push ['edx']
mov ['eax,', '[ebp+var_11C]']
push ['eax']
call ['_LitEnc_GetPriceMatched@16']
mov ['[ebp+var_1F0],', 'eax']
jmp ['short', 'loc_3C4F']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '30F34h']
push ['ecx']
movzx ['edx,', '[ebp+var_F9]']
push ['edx']
mov ['eax,', '[ebp+var_11C]']
push ['eax']
call ['_LitEnc_GetPrice@12']
mov ['[ebp+var_1F0],', 'eax']
mov ['ecx,', '[ebp+var_EC]']
add ['ecx,', '[ebp+var_1F0]']
mov ['[ebp+var_EC],', 'ecx']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '1']
imul ['edx,', '30h']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+734h]']
mov ['[ebp+var_108],', 'ecx']
mov ['edx,', '[ebp+var_108]']
mov ['eax,', '[ebp+var_EC]']
cmp ['eax,', '[edx]']
jnb ['short', 'loc_3CC8']
mov ['ecx,', '[ebp+var_108]']
mov ['edx,', '[ebp+var_EC]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_108]']
mov ['ecx,', '[ebp+var_30]']
mov ['[eax+18h],', 'ecx']
mov ['edx,', '[ebp+var_108]']
mov ['dword', 'ptr', '[edx+1Ch],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_108]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['[ebp+var_F8],', '1']
mov ['ecx,', '[ebp+var_DC]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+32608h]']
mov ['ecx,', '[ebp+var_E0]']
movzx ['edx,', 'word', 'ptr', '[eax+ecx*2]']
xor ['edx,', '7FFh']
sar ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_E8]']
add ['ecx,', '[eax+edx*4+30F34h]']
mov ['[ebp+var_F0],', 'ecx']
mov ['edx,', '[ebp+var_DC]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+32788h]']
xor ['ecx,', '7FFh']
sar ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_F0]']
add ['eax,', '[edx+ecx*4+30F34h]']
mov ['[ebp+var_F4],', 'eax']
movzx ['ecx,', '[ebp+var_FA]']
movzx ['edx,', '[ebp+var_F9]']
cmp ['ecx,', 'edx']
jnz ['loc_3DD5']
mov ['eax,', '[ebp+var_108]']
mov ['ecx,', '[eax+18h]']
cmp ['ecx,', '[ebp+var_30]']
jnb ['short', 'loc_3D64']
mov ['edx,', '[ebp+var_108]']
cmp ['dword', 'ptr', '[edx+1Ch],', '0']
jz ['short', 'loc_3DD5']
mov ['eax,', '[ebp+var_E0]']
push ['eax']
mov ['ecx,', '[ebp+var_DC]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_GetRepLen1Price@12']
add ['eax,', '[ebp+var_F4]']
mov ['[ebp+var_120],', 'eax']
mov ['eax,', '[ebp+var_108]']
mov ['ecx,', '[ebp+var_120]']
cmp ['ecx,', '[eax]']
ja ['short', 'loc_3DD5']
mov ['edx,', '[ebp+var_108]']
mov ['eax,', '[ebp+var_120]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_108]']
mov ['edx,', '[ebp+var_30]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+var_108]']
mov ['dword', 'ptr', '[eax+1Ch],', '0']
mov ['ecx,', '[ebp+var_108]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['[ebp+var_F8],', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
mov ['[ebp+var_C4],', 'eax']
mov ['ecx,', '0FFFh']
sub ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_124],', 'ecx']
mov ['edx,', '[ebp+var_124]']
cmp ['edx,', '[ebp+var_C4]']
jnb ['short', 'loc_3E09']
mov ['eax,', '[ebp+var_124]']
mov ['[ebp+var_C4],', 'eax']
cmp ['[ebp+var_C4],', '2']
jnb ['short', 'loc_3E17']
jmp ['loc_3795']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_C4]']
cmp ['edx,', '[ecx+2Ch]']
ja ['short', 'loc_3E33']
mov ['eax,', '[ebp+var_C4]']
mov ['[ebp+var_1F4],', 'eax']
jmp ['short', 'loc_3E3F']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2Ch]']
mov ['[ebp+var_1F4],', 'edx']
mov ['eax,', '[ebp+var_1F4]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_F8],', '0']
jnz ['loc_406A']
movzx ['ecx,', '[ebp+var_FA]']
movzx ['edx,', '[ebp+var_F9]']
cmp ['ecx,', 'edx']
jz ['loc_406A']
mov ['eax,', '[ebp+var_100]']
sub ['eax,', '[ebp+var_50]']
sub ['eax,', '1']
mov ['[ebp+var_130],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+2Ch]']
add ['edx,', '1']
mov ['[ebp+var_134],', 'edx']
mov ['eax,', '[ebp+var_134]']
cmp ['eax,', '[ebp+var_C4]']
jbe ['short', 'loc_3EA6']
mov ['ecx,', '[ebp+var_C4]']
mov ['[ebp+var_134],', 'ecx']
mov ['[ebp+var_128],', '1']
jmp ['short', 'loc_3EC1']
mov ['edx,', '[ebp+var_128]']
add ['edx,', '1']
mov ['[ebp+var_128],', 'edx']
mov ['eax,', '[ebp+var_128]']
cmp ['eax,', '[ebp+var_134]']
jnb ['short', 'loc_3EF3']
mov ['ecx,', '[ebp+var_100]']
add ['ecx,', '[ebp+var_128]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_130]']
add ['eax,', '[ebp+var_128]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jnz ['short', 'loc_3EF3']
jmp ['short', 'loc_3EB2']
mov ['edx,', '[ebp+var_128]']
sub ['edx,', '1']
mov ['[ebp+var_12C],', 'edx']
cmp ['[ebp+var_12C],', '2']
jb ['loc_406A']
mov ['eax,', '[ebp+var_DC]']
mov ['ecx,', '_kLiteralNextStates[eax*4]']
mov ['[ebp+var_138],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
and ['edx,', '[eax+58h]']
mov ['[ebp+var_13C],', 'edx']
mov ['ecx,', '[ebp+var_138]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+32608h]']
mov ['ecx,', '[ebp+var_13C]']
movzx ['edx,', 'word', 'ptr', '[eax+ecx*2]']
xor ['edx,', '7FFh']
sar ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_EC]']
add ['ecx,', '[eax+edx*4+30F34h]']
mov ['edx,', '[ebp+var_138]']
mov ['eax,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[eax+edx*2+32788h]']
xor ['edx,', '7FFh']
sar ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
add ['ecx,', '[eax+edx*4+30F34h]']
mov ['[ebp+var_140],', 'ecx']
mov ['ecx,', '[ebp+var_12C]']
mov ['edx,', '[ebp+var_30]']
lea ['eax,', '[edx+ecx+1]']
mov ['[ebp+var_14C],', 'eax']
mov ['ecx,', '[ebp+var_28]']
cmp ['ecx,', '[ebp+var_14C]']
jnb ['short', 'loc_3FD1']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_28]']
imul ['eax,', '30h']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+eax+734h],', '40000000h']
jmp ['short', 'loc_3FA7']
mov ['edx,', '[ebp+var_13C]']
push ['edx']
mov ['eax,', '[ebp+var_138]']
push ['eax']
mov ['ecx,', '[ebp+var_12C]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_GetRepPrice@20']
add ['eax,', '[ebp+var_140]']
mov ['[ebp+var_144],', 'eax']
mov ['eax,', '[ebp+var_14C]']
imul ['eax,', '30h']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+734h]']
mov ['[ebp+var_148],', 'edx']
mov ['eax,', '[ebp+var_148]']
mov ['ecx,', '[ebp+var_144]']
cmp ['ecx,', '[eax]']
jnb ['short', 'loc_406A']
mov ['edx,', '[ebp+var_148]']
mov ['eax,', '[ebp+var_144]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_148]']
mov ['[edx+18h],', 'ecx']
mov ['eax,', '[ebp+var_148]']
mov ['dword', 'ptr', '[eax+1Ch],', '0']
mov ['ecx,', '[ebp+var_148]']
mov ['dword', 'ptr', '[ecx+8],', '1']
mov ['edx,', '[ebp+var_148]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['[ebp+var_E4],', '2']
mov ['[ebp+var_150],', '0']
jmp ['short', 'loc_408F']
mov ['eax,', '[ebp+var_150]']
add ['eax,', '1']
mov ['[ebp+var_150],', 'eax']
cmp ['[ebp+var_150],', '4']
jnb ['loc_4588']
mov ['ecx,', '[ebp+var_150]']
mov ['edx,', '[ebp+var_100]']
sub ['edx,', '[ebp+ecx*4+var_50]']
sub ['edx,', '1']
mov ['[ebp+var_160],', 'edx']
mov ['eax,', '[ebp+var_100]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+var_160]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
cmp ['ecx,', 'eax']
jnz ['short', 'loc_40E3']
mov ['ecx,', '[ebp+var_100]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
mov ['eax,', '[ebp+var_160]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
cmp ['edx,', 'ecx']
jz ['short', 'loc_40E5']
jmp ['short', 'loc_4080']
mov ['[ebp+var_154],', '2']
jmp ['short', 'loc_4100']
mov ['edx,', '[ebp+var_154]']
add ['edx,', '1']
mov ['[ebp+var_154],', 'edx']
mov ['eax,', '[ebp+var_154]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_412F']
mov ['ecx,', '[ebp+var_100]']
add ['ecx,', '[ebp+var_154]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_160]']
add ['eax,', '[ebp+var_154]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jnz ['short', 'loc_412F']
jmp ['short', 'loc_40F1']
mov ['edx,', '[ebp+var_30]']
add ['edx,', '[ebp+var_154]']
cmp ['[ebp+var_28],', 'edx']
jnb ['short', 'loc_415C']
mov ['eax,', '[ebp+var_28]']
add ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+ecx+734h],', '40000000h']
jmp ['short', 'loc_412F']
mov ['eax,', '[ebp+var_154]']
mov ['[ebp+var_158],', 'eax']
mov ['ecx,', '[ebp+var_E0]']
push ['ecx']
mov ['edx,', '[ebp+var_DC]']
push ['edx']
mov ['eax,', '[ebp+var_150]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_GetPureRepPrice@16']
add ['eax,', '[ebp+var_F4]']
mov ['[ebp+var_15C],', 'eax']
mov ['edx,', '[ebp+var_E0]']
imul ['edx,', '440h']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+378BCh]']
mov ['edx,', '[ebp+var_154]']
mov ['eax,', '[ebp+var_15C]']
add ['eax,', '[ecx+edx*4-8]']
mov ['[ebp+var_164],', 'eax']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '[ebp+var_154]']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+734h]']
mov ['[ebp+var_168],', 'eax']
mov ['ecx,', '[ebp+var_168]']
mov ['edx,', '[ebp+var_164]']
cmp ['edx,', '[ecx]']
jnb ['short', 'loc_4220']
mov ['eax,', '[ebp+var_168]']
mov ['ecx,', '[ebp+var_164]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_168]']
mov ['eax,', '[ebp+var_30]']
mov ['[edx+18h],', 'eax']
mov ['ecx,', '[ebp+var_168]']
mov ['edx,', '[ebp+var_150]']
mov ['[ecx+1Ch],', 'edx']
mov ['eax,', '[ebp+var_168]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_154]']
sub ['ecx,', '1']
mov ['[ebp+var_154],', 'ecx']
cmp ['[ebp+var_154],', '2']
jnb ['loc_4192']
mov ['edx,', '[ebp+var_158]']
mov ['[ebp+var_154],', 'edx']
cmp ['[ebp+var_150],', '0']
jnz ['short', 'loc_4260']
mov ['eax,', '[ebp+var_154]']
add ['eax,', '1']
mov ['[ebp+var_E4],', 'eax']
mov ['ecx,', '[ebp+var_154]']
add ['ecx,', '1']
mov ['[ebp+var_16C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_16C]']
add ['eax,', '[edx+2Ch]']
mov ['[ebp+var_170],', 'eax']
mov ['ecx,', '[ebp+var_170]']
cmp ['ecx,', '[ebp+var_C4]']
jbe ['short', 'loc_429B']
mov ['edx,', '[ebp+var_C4]']
mov ['[ebp+var_170],', 'edx']
jmp ['short', 'loc_42AC']
mov ['eax,', '[ebp+var_16C]']
add ['eax,', '1']
mov ['[ebp+var_16C],', 'eax']
mov ['ecx,', '[ebp+var_16C]']
cmp ['ecx,', '[ebp+var_170]']
jnb ['short', 'loc_42DE']
mov ['edx,', '[ebp+var_100]']
add ['edx,', '[ebp+var_16C]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_160]']
add ['ecx,', '[ebp+var_16C]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_42DE']
jmp ['short', 'loc_429D']
mov ['eax,', '[ebp+var_154]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_16C]']
sub ['ecx,', 'eax']
mov ['[ebp+var_16C],', 'ecx']
cmp ['[ebp+var_16C],', '2']
jb ['loc_4583']
mov ['edx,', '[ebp+var_DC]']
mov ['eax,', '_kRepNextStates[edx*4]']
mov ['[ebp+var_178],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_154]']
mov ['edx,', '[ebp+arg_0]']
and ['ecx,', '[edx+58h]']
mov ['[ebp+var_17C],', 'ecx']
mov ['eax,', '[ebp+var_E0]']
imul ['eax,', '440h']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+378BCh]']
mov ['eax,', '[ebp+var_154]']
mov ['esi,', '[ebp+var_15C]']
add ['esi,', '[edx+eax*4-8]']
mov ['ecx,', '[ebp+var_178]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+32608h]']
mov ['ecx,', '[ebp+var_17C]']
movzx ['edx,', 'word', 'ptr', '[eax+ecx*2]']
sar ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
add ['esi,', '[eax+edx*4+30F34h]']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '30F34h']
push ['ecx']
mov ['edx,', '[ebp+var_160]']
add ['edx,', '[ebp+var_154]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_100]']
add ['ecx,', '[ebp+var_154]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_154]']
mov ['ecx,', '[ebp+arg_0]']
and ['eax,', '[ecx+54h]']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+48h]']
shl ['eax,', 'cl']
mov ['ecx,', '[ebp+var_100]']
add ['ecx,', '[ebp+var_154]']
movzx ['edx,', 'byte', 'ptr', '[ecx-1]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edi,', '8']
sub ['edi,', '[ecx+48h]']
mov ['ecx,', 'edi']
sar ['edx,', 'cl']
add ['eax,', 'edx']
imul ['eax,', '300h']
mov ['edx,', '[ebp+arg_0]']
mov ['ecx,', '[edx+60h]']
lea ['edx,', '[ecx+eax*2]']
push ['edx']
call ['_LitEnc_GetPriceMatched@16']
add ['esi,', 'eax']
mov ['[ebp+var_180],', 'esi']
mov ['eax,', '[ebp+var_178]']
mov ['ecx,', '_kLiteralNextStates[eax*4]']
mov ['[ebp+var_178],', 'ecx']
mov ['edx,', '[ebp+var_154]']
mov ['eax,', '[ebp+arg_4]']
lea ['ecx,', '[eax+edx+1]']
mov ['edx,', '[ebp+arg_0]']
and ['ecx,', '[edx+58h]']
mov ['[ebp+var_17C],', 'ecx']
mov ['eax,', '[ebp+var_178]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+32608h]']
mov ['eax,', '[ebp+var_17C]']
movzx ['ecx,', 'word', 'ptr', '[edx+eax*2]']
xor ['ecx,', '7FFh']
sar ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_180]']
add ['eax,', '[edx+ecx*4+30F34h]']
mov ['ecx,', '[ebp+var_178]']
mov ['edx,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[edx+ecx*2+32788h]']
xor ['ecx,', '7FFh']
sar ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+ecx*4+30F34h]']
mov ['[ebp+var_174],', 'eax']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '[ebp+var_154]']
mov ['ecx,', '[ebp+var_16C]']
lea ['edx,', '[eax+ecx+1]']
mov ['[ebp+var_18C],', 'edx']
mov ['eax,', '[ebp+var_28]']
cmp ['eax,', '[ebp+var_18C]']
jnb ['short', 'loc_44C8']
mov ['ecx,', '[ebp+var_28]']
add ['ecx,', '1']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_28]']
imul ['edx,', '30h']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+edx+734h],', '40000000h']
jmp ['short', 'loc_449E']
mov ['ecx,', '[ebp+var_17C]']
push ['ecx']
mov ['edx,', '[ebp+var_178]']
push ['edx']
mov ['eax,', '[ebp+var_16C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_GetRepPrice@20']
add ['eax,', '[ebp+var_174]']
mov ['[ebp+var_184],', 'eax']
mov ['edx,', '[ebp+var_18C]']
imul ['edx,', '30h']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+734h]']
mov ['[ebp+var_188],', 'ecx']
mov ['edx,', '[ebp+var_188]']
mov ['eax,', '[ebp+var_184]']
cmp ['eax,', '[edx]']
jnb ['short', 'loc_4583']
mov ['ecx,', '[ebp+var_188]']
mov ['edx,', '[ebp+var_184]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_154]']
mov ['ecx,', '[ebp+var_30]']
lea ['edx,', '[ecx+eax+1]']
mov ['eax,', '[ebp+var_188]']
mov ['[eax+18h],', 'edx']
mov ['ecx,', '[ebp+var_188]']
mov ['dword', 'ptr', '[ecx+1Ch],', '0']
mov ['edx,', '[ebp+var_188]']
mov ['dword', 'ptr', '[edx+8],', '1']
mov ['eax,', '[ebp+var_188]']
mov ['dword', 'ptr', '[eax+0Ch],', '1']
mov ['ecx,', '[ebp+var_188]']
mov ['edx,', '[ebp+var_30]']
mov ['[ecx+10h],', 'edx']
mov ['eax,', '[ebp+var_188]']
mov ['ecx,', '[ebp+var_150]']
mov ['[eax+14h],', 'ecx']
jmp ['loc_4080']
mov ['edx,', '[ebp+var_C8]']
cmp ['edx,', '[ebp+var_8]']
jbe ['short', 'loc_45EE']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_C8],', 'eax']
mov ['[ebp+var_D0],', '0']
jmp ['short', 'loc_45B7']
mov ['ecx,', '[ebp+var_D0]']
add ['ecx,', '2']
mov ['[ebp+var_D0],', 'ecx']
mov ['edx,', '[ebp+var_D0]']
mov ['eax,', '[ebp+var_70]']
mov ['ecx,', '[ebp+var_C8]']
cmp ['ecx,', '[eax+edx*4]']
jbe ['short', 'loc_45CD']
jmp ['short', 'loc_45A8']
mov ['edx,', '[ebp+var_D0]']
mov ['eax,', '[ebp+var_70]']
mov ['ecx,', '[ebp+var_C8]']
mov ['[eax+edx*4],', 'ecx']
mov ['edx,', '[ebp+var_D0]']
add ['edx,', '2']
mov ['[ebp+var_D0],', 'edx']
mov ['eax,', '[ebp+var_C8]']
cmp ['eax,', '[ebp+var_E4]']
jb ['loc_4BD9']
mov ['ecx,', '[ebp+var_DC]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2+32788h]']
sar ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_F0]']
add ['edx,', '[ecx+eax*4+30F34h]']
mov ['[ebp+var_190],', 'edx']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '[ebp+var_C8]']
cmp ['[ebp+var_28],', 'eax']
jnb ['short', 'loc_4657']
mov ['ecx,', '[ebp+var_28]']
add ['ecx,', '1']
mov ['[ebp+var_28],', 'ecx']
mov ['edx,', '[ebp+var_28]']
imul ['edx,', '30h']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+edx+734h],', '40000000h']
jmp ['short', 'loc_462A']
mov ['[ebp+var_194],', '0']
mov ['ecx,', '[ebp+var_194]']
mov ['edx,', '[ebp+var_70]']
mov ['eax,', '[ebp+var_E4]']
cmp ['eax,', '[edx+ecx*4]']
jbe ['short', 'loc_4686']
mov ['ecx,', '[ebp+var_194]']
add ['ecx,', '2']
mov ['[ebp+var_194],', 'ecx']
jmp ['short', 'loc_4661']
mov ['edx,', '[ebp+var_194]']
mov ['eax,', '[ebp+var_70]']
mov ['ecx,', '[eax+edx*4+4]']
mov ['[ebp+var_198],', 'ecx']
cmp ['[ebp+var_198],', '20000h']
sbb ['edx,', 'edx']
and ['edx,', '0FFFFFFF6h']
add ['edx,', '10h']
mov ['[ebp+var_1A4],', 'edx']
mov ['eax,', '[ebp+var_198]']
mov ['ecx,', '[ebp+var_1A4]']
shr ['eax,', 'cl']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax+30734h]']
mov ['eax,', '[ebp+var_1A4]']
lea ['ecx,', '[edx+eax*2]']
mov ['[ebp+var_19C],', 'ecx']
mov ['edx,', '[ebp+var_E4]']
mov ['[ebp+var_1A0],', 'edx']
jmp ['short', 'loc_46F6']
mov ['eax,', '[ebp+var_1A0]']
add ['eax,', '1']
mov ['[ebp+var_1A0],', 'eax']
mov ['ecx,', '[ebp+var_E0]']
imul ['ecx,', '440h']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+33074h]']
mov ['ecx,', '[ebp+var_1A0]']
mov ['edx,', '[ebp+var_190]']
add ['edx,', '[eax+ecx*4-8]']
mov ['[ebp+var_1A8],', 'edx']
cmp ['[ebp+var_1A0],', '5']
jnb ['short', 'loc_473C']
mov ['eax,', '[ebp+var_1A0]']
sub ['eax,', '2']
mov ['[ebp+var_1F8],', 'eax']
jmp ['short', 'loc_4746']
mov ['[ebp+var_1F8],', '3']
mov ['ecx,', '[ebp+var_1F8]']
mov ['[ebp+var_1AC],', 'ecx']
cmp ['[ebp+var_198],', '80h']
jnb ['short', 'loc_4788']
mov ['edx,', '[ebp+var_1AC]']
shl ['edx,', '9']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+31DC8h]']
mov ['edx,', '[ebp+var_198]']
mov ['eax,', '[ebp+var_1A8]']
add ['eax,', '[ecx+edx*4]']
mov ['[ebp+var_1A8],', 'eax']
jmp ['short', 'loc_47C3']
mov ['ecx,', '[ebp+var_1AC]']
shl ['ecx,', '8']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+319C8h]']
mov ['ecx,', '[ebp+var_198]']
and ['ecx,', '0Fh']
mov ['edx,', '[ebp+var_19C]']
mov ['eax,', '[eax+edx*4]']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+ecx*4+325C8h]']
add ['eax,', '[ebp+var_1A8]']
mov ['[ebp+var_1A8],', 'eax']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '[ebp+var_1A0]']
imul ['eax,', '30h']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+734h]']
mov ['[ebp+var_1B0],', 'edx']
mov ['eax,', '[ebp+var_1B0]']
mov ['ecx,', '[ebp+var_1A8]']
cmp ['ecx,', '[eax]']
jnb ['short', 'loc_4828']
mov ['edx,', '[ebp+var_1B0]']
mov ['eax,', '[ebp+var_1A8]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_1B0]']
mov ['edx,', '[ebp+var_30]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+var_198]']
add ['eax,', '4']
mov ['ecx,', '[ebp+var_1B0]']
mov ['[ecx+1Ch],', 'eax']
mov ['edx,', '[ebp+var_1B0]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+var_194]']
mov ['ecx,', '[ebp+var_70]']
mov ['edx,', '[ebp+var_1A0]']
cmp ['edx,', '[ecx+eax*4]']
jnz ['loc_4BD4']
mov ['eax,', '[ebp+var_100]']
sub ['eax,', '[ebp+var_198]']
sub ['eax,', '1']
mov ['[ebp+var_1B4],', 'eax']
mov ['ecx,', '[ebp+var_1A0]']
add ['ecx,', '1']
mov ['[ebp+var_1B8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_1B8]']
add ['eax,', '[edx+2Ch]']
mov ['[ebp+var_1BC],', 'eax']
mov ['ecx,', '[ebp+var_1BC]']
cmp ['ecx,', '[ebp+var_C4]']
jbe ['short', 'loc_4890']
mov ['edx,', '[ebp+var_C4]']
mov ['[ebp+var_1BC],', 'edx']
jmp ['short', 'loc_48A1']
mov ['eax,', '[ebp+var_1B8]']
add ['eax,', '1']
mov ['[ebp+var_1B8],', 'eax']
mov ['ecx,', '[ebp+var_1B8]']
cmp ['ecx,', '[ebp+var_1BC]']
jnb ['short', 'loc_48D3']
mov ['edx,', '[ebp+var_100]']
add ['edx,', '[ebp+var_1B8]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_1B4]']
add ['ecx,', '[ebp+var_1B8]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_48D3']
jmp ['short', 'loc_4892']
mov ['eax,', '[ebp+var_1A0]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_1B8]']
sub ['ecx,', 'eax']
mov ['[ebp+var_1B8],', 'ecx']
cmp ['[ebp+var_1B8],', '2']
jb ['loc_4B56']
mov ['edx,', '[ebp+var_DC]']
mov ['eax,', '_kMatchNextStates[edx*4]']
mov ['[ebp+var_1C4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_1A0]']
mov ['edx,', '[ebp+arg_0]']
and ['ecx,', '[edx+58h]']
mov ['[ebp+var_1C8],', 'ecx']
mov ['eax,', '[ebp+var_1C4]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+32608h]']
mov ['eax,', '[ebp+var_1C8]']
movzx ['ecx,', 'word', 'ptr', '[edx+eax*2]']
sar ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+var_1A8]']
add ['esi,', '[edx+ecx*4+30F34h]']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '30F34h']
push ['eax']
mov ['ecx,', '[ebp+var_1B4]']
add ['ecx,', '[ebp+var_1A0]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_100]']
add ['eax,', '[ebp+var_1A0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_1A0]']
mov ['eax,', '[ebp+arg_0]']
and ['edx,', '[eax+54h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['ecx,', '[ecx+48h]']
shl ['edx,', 'cl']
mov ['eax,', '[ebp+var_100]']
add ['eax,', '[ebp+var_1A0]']
movzx ['eax,', 'byte', 'ptr', '[eax-1]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edi,', '8']
sub ['edi,', '[ecx+48h]']
mov ['ecx,', 'edi']
sar ['eax,', 'cl']
add ['edx,', 'eax']
imul ['edx,', '300h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+60h]']
lea ['edx,', '[ecx+edx*2]']
push ['edx']
call ['_LitEnc_GetPriceMatched@16']
add ['esi,', 'eax']
mov ['[ebp+var_1CC],', 'esi']
mov ['eax,', '[ebp+var_1C4]']
mov ['ecx,', '_kLiteralNextStates[eax*4]']
mov ['[ebp+var_1C4],', 'ecx']
mov ['edx,', '[ebp+var_1C8]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
and ['edx,', '[eax+58h]']
mov ['[ebp+var_1C8],', 'edx']
mov ['ecx,', '[ebp+var_1C4]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+32608h]']
mov ['ecx,', '[ebp+var_1C8]']
movzx ['edx,', 'word', 'ptr', '[eax+ecx*2]']
xor ['edx,', '7FFh']
sar ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_1CC]']
add ['ecx,', '[eax+edx*4+30F34h]']
mov ['edx,', '[ebp+var_1C4]']
mov ['eax,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[eax+edx*2+32788h]']
xor ['edx,', '7FFh']
sar ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
add ['ecx,', '[eax+edx*4+30F34h]']
mov ['[ebp+var_1C0],', 'ecx']
mov ['ecx,', '[ebp+var_30]']
add ['ecx,', '[ebp+var_1A0]']
mov ['edx,', '[ebp+var_1B8]']
lea ['eax,', '[ecx+edx+1]']
mov ['[ebp+var_1D0],', 'eax']
mov ['ecx,', '[ebp+var_28]']
cmp ['ecx,', '[ebp+var_1D0]']
jnb ['short', 'loc_4A98']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_28]']
imul ['eax,', '30h']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+eax+734h],', '40000000h']
jmp ['short', 'loc_4A6E']
mov ['edx,', '[ebp+var_1C8]']
push ['edx']
mov ['eax,', '[ebp+var_1C4]']
push ['eax']
mov ['ecx,', '[ebp+var_1B8]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_GetRepPrice@20']
add ['eax,', '[ebp+var_1C0]']
mov ['[ebp+var_1D4],', 'eax']
mov ['eax,', '[ebp+var_1D0]']
imul ['eax,', '30h']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+734h]']
mov ['[ebp+var_1D8],', 'edx']
mov ['eax,', '[ebp+var_1D8]']
mov ['ecx,', '[ebp+var_1D4]']
cmp ['ecx,', '[eax]']
jnb ['short', 'loc_4B56']
mov ['edx,', '[ebp+var_1D8]']
mov ['eax,', '[ebp+var_1D4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_1A0]']
mov ['edx,', '[ebp+var_30]']
lea ['eax,', '[edx+ecx+1]']
mov ['ecx,', '[ebp+var_1D8]']
mov ['[ecx+18h],', 'eax']
mov ['edx,', '[ebp+var_1D8]']
mov ['dword', 'ptr', '[edx+1Ch],', '0']
mov ['eax,', '[ebp+var_1D8]']
mov ['dword', 'ptr', '[eax+8],', '1']
mov ['ecx,', '[ebp+var_1D8]']
mov ['dword', 'ptr', '[ecx+0Ch],', '1']
mov ['edx,', '[ebp+var_1D8]']
mov ['eax,', '[ebp+var_30]']
mov ['[edx+10h],', 'eax']
mov ['ecx,', '[ebp+var_198]']
add ['ecx,', '4']
mov ['edx,', '[ebp+var_1D8]']
mov ['[edx+14h],', 'ecx']
mov ['eax,', '[ebp+var_194]']
add ['eax,', '2']
mov ['[ebp+var_194],', 'eax']
mov ['ecx,', '[ebp+var_194]']
cmp ['ecx,', '[ebp+var_D0]']
jnz ['short', 'loc_4B75']
jmp ['short', 'loc_4BD9']
mov ['edx,', '[ebp+var_194]']
mov ['eax,', '[ebp+var_70]']
mov ['ecx,', '[eax+edx*4+4]']
mov ['[ebp+var_198],', 'ecx']
cmp ['[ebp+var_198],', '80h']
jb ['short', 'loc_4BD4']
cmp ['[ebp+var_198],', '20000h']
sbb ['edx,', 'edx']
and ['edx,', '0FFFFFFF6h']
add ['edx,', '10h']
mov ['[ebp+var_1DC],', 'edx']
mov ['eax,', '[ebp+var_198]']
mov ['ecx,', '[ebp+var_1DC]']
shr ['eax,', 'cl']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax+30734h]']
mov ['eax,', '[ebp+var_1DC]']
lea ['ecx,', '[edx+eax*2]']
mov ['[ebp+var_19C],', 'ecx']
jmp ['loc_46E7']
jmp ['loc_3795']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN161']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '1F8h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_LitEnc_GetPrice@12 proc near           
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_4]']
or ['eax,', '100h']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
shr ['ecx,', '8']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
mov ['ecx,', '[ebp+arg_4]']
shr ['ecx,', '7']
and ['ecx,', '1']
neg ['ecx']
and ['ecx,', '7FFh']
xor ['eax,', 'ecx']
sar ['eax,', '4']
mov ['edx,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '[edx+eax*4]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
shl ['edx,', '1']
mov ['[ebp+arg_4],', 'edx']
cmp ['[ebp+arg_4],', '10000h']
jb ['short', 'loc_4C8D']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_LitEnc_GetPriceMatched@16 proc near    
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '100h']
mov ['eax,', '[ebp+arg_4]']
or ['eax,', '100h']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
shl ['ecx,', '1']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
and ['edx,', '[ebp+var_8]']
add ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_4]']
shr ['eax,', '8']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+edx*2]']
mov ['eax,', '[ebp+arg_4]']
shr ['eax,', '7']
and ['eax,', '1']
neg ['eax']
and ['eax,', '7FFh']
xor ['edx,', 'eax']
sar ['edx,', '4']
mov ['ecx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ecx+edx*4]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
shl ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
xor ['edx,', '[ebp+arg_4]']
not ['edx']
and ['edx,', '[ebp+var_8]']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+arg_4],', '10000h']
jb ['short', 'loc_4D0D']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_MovePos@8      proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_4DB4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+30h]']
add ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+30h],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+14h]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_GetRepLen1Price@12 proc near           
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+327A0h]']
sar ['edx,', '4']
mov ['eax,', '[ebp+arg_4]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+eax+327E8h]']
mov ['ecx,', '[ebp+arg_8]']
movzx ['eax,', 'word', 'ptr', '[eax+ecx*2]']
sar ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+edx*4+30F34h]']
mov ['ecx,', '[ebp+arg_0]']
add ['edx,', '[ecx+eax*4+30F34h]']
mov ['eax,', 'edx']
pop ['ebp']
retn ['0Ch']
endp
_GetPureRepPrice@16 proc near           
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_4E73']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+327A0h]']
sar ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+edx*4+30F34h]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
shl ['edx,', '5']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+327E8h]']
mov ['edx,', '[ebp+arg_C]']
movzx ['eax,', 'word', 'ptr', '[ecx+edx*2]']
xor ['eax,', '7FFh']
sar ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '[ecx+eax*4+30F34h]']
mov ['[ebp+var_4],', 'edx']
jmp ['loc_4F16']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+327A0h]']
xor ['edx,', '7FFh']
sar ['edx,', '4']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+edx*4+30F34h]']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_4],', '1']
jnz ['short', 'loc_4EC0']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2+327B8h]']
sar ['ecx,', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[edx+ecx*4+30F34h]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_4F16']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2+327B8h]']
xor ['eax,', '7FFh']
sar ['eax,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '[ecx+eax*4+30F34h]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2+327D0h]']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '2']
neg ['eax']
and ['eax,', '7FFh']
xor ['edx,', 'eax']
sar ['edx,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ecx+edx*4+30F34h]']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_GetRepPrice@20 proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_10]']
imul ['eax,', '440h']
mov ['ecx,', '[ebp+arg_0]']
lea ['esi,', '[ecx+eax+378BCh]']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_GetPureRepPrice@16']
mov ['ecx,', '[ebp+arg_8]']
add ['eax,', '[esi+ecx*4-8]']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['14h']
endp
_Backward@12    proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_8]']
imul ['eax,', '30h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax+74Ch]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_8]']
imul ['eax,', '30h']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+eax+750h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+18h],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
imul ['edx,', '30h']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+edx+73Ch],', '0']
jz ['loc_506C']
mov ['ecx,', '[ebp+var_4]']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+ecx+750h],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_4]']
imul ['eax,', '30h']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+eax+73Ch],', '0']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
imul ['eax,', '30h']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+eax+74Ch],', 'edx']
mov ['edx,', '[ebp+arg_8]']
imul ['edx,', '30h']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+edx+740h],', '0']
jz ['short', 'loc_506C']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '1']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+ecx+73Ch],', '0']
mov ['eax,', '[ebp+arg_8]']
imul ['eax,', '30h']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '1']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['eax,', '[esi+eax+744h]']
mov ['[edx+ecx+74Ch],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '1']
imul ['edx,', '30h']
mov ['eax,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_0]']
mov ['ecx,', '[esi+ecx+748h]']
mov ['[eax+edx+750h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_C]']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx+750h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_C]']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx+74Ch]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_C]']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_10]']
mov ['[edx+ecx+750h],', 'eax']
mov ['ecx,', '[ebp+var_C]']
imul ['ecx,', '30h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+ecx+74Ch],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+arg_8],', 'ecx']
cmp ['[ebp+arg_8],', '0']
jnz ['loc_4FA7']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+750h]']
mov ['[edx],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+74Ch]']
mov ['[edx+1Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+1Ch]']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_GetOptimumFast@8 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '44h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_44]']
mov ['ecx,', '11h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+30h],', '0']
jnz ['short', 'loc_5132']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_ReadMatchDistances@8']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_5144']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+24h]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+28h]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
cmp ['[ebp+var_4],', '2']
jnb ['short', 'loc_5166']
mov ['eax,', '1']
jmp ['loc_5508']
cmp ['[ebp+var_4],', '111h']
jbe ['short', 'loc_5176']
mov ['[ebp+var_4],', '111h']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'edx']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_51B2']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '4']
jnb ['loc_5269']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_28]']
sub ['eax,', '[edx+ecx*4+34h]']
sub ['eax,', '1']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+var_28]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_34]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jnz ['short', 'loc_51F1']
mov ['edx,', '[ebp+var_28]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
mov ['ecx,', '[ebp+var_34]']
movzx ['edx,', 'byte', 'ptr', '[ecx+1]']
cmp ['eax,', 'edx']
jz ['short', 'loc_51F3']
jmp ['short', 'loc_51A9']
mov ['[ebp+var_30],', '2']
jmp ['short', 'loc_5205']
mov ['eax,', '[ebp+var_30]']
add ['eax,', '1']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
cmp ['ecx,', '[ebp+var_4]']
jnb ['short', 'loc_5225']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '[ebp+var_30]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '[ebp+var_30]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_5225']
jmp ['short', 'loc_51FC']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_30]']
cmp ['ecx,', '[eax+2Ch]']
jb ['short', 'loc_5250']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+var_24]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_30]']
sub ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MovePos@8']
mov ['eax,', '[ebp+var_30]']
jmp ['loc_5508']
mov ['eax,', '[ebp+var_30]']
cmp ['eax,', '[ebp+var_20]']
jbe ['short', 'loc_5264']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_30]']
mov ['[ebp+var_20],', 'edx']
jmp ['loc_51A9']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '31134h']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+2Ch]']
jb ['short', 'loc_52A9']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ecx+eax*4-4]']
add ['edx,', '4']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_MovePos@8']
mov ['eax,', '[ebp+var_8]']
jmp ['loc_5508']
mov ['[ebp+var_C],', '0']
cmp ['[ebp+var_8],', '2']
jb ['short', 'loc_532A']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ecx+eax*4-4]']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_14],', '2']
jbe ['short', 'loc_5314']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ecx+eax*4-10h]']
add ['edx,', '1']
cmp ['[ebp+var_8],', 'edx']
jnz ['short', 'loc_5314']
mov ['eax,', '[ebp+var_C]']
shr ['eax,', '7']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_2C]']
cmp ['eax,', '[edx+ecx*4-0Ch]']
ja ['short', 'loc_52EF']
jmp ['short', 'loc_5314']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '2']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[edx+ecx*4-8]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[edx+ecx*4-4]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_52C3']
cmp ['[ebp+var_8],', '2']
jnz ['short', 'loc_532A']
cmp ['[ebp+var_C],', '80h']
jb ['short', 'loc_532A']
mov ['[ebp+var_8],', '1']
cmp ['[ebp+var_20],', '2']
jb ['short', 'loc_5383']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
cmp ['ecx,', '[ebp+var_8]']
jnb ['short', 'loc_5363']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '2']
cmp ['edx,', '[ebp+var_8]']
jb ['short', 'loc_534F']
cmp ['[ebp+var_C],', '200h']
jnb ['short', 'loc_5363']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '3']
cmp ['eax,', '[ebp+var_8]']
jb ['short', 'loc_5383']
cmp ['[ebp+var_C],', '8000h']
jb ['short', 'loc_5383']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_1C]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_20]']
sub ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MovePos@8']
mov ['eax,', '[ebp+var_20]']
jmp ['loc_5508']
cmp ['[ebp+var_8],', '2']
jb ['short', 'loc_538F']
cmp ['[ebp+var_4],', '2']
ja ['short', 'loc_5399']
mov ['eax,', '1']
jmp ['loc_5508']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '24h']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_ReadMatchDistances@8']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+20h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+20h],', '2']
jb ['short', 'loc_542B']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[edx+ecx*4-4]']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+20h]']
cmp ['edx,', '[ebp+var_8]']
jb ['short', 'loc_53DB']
mov ['eax,', '[ebp+var_38]']
cmp ['eax,', '[ebp+var_C]']
jb ['short', 'loc_5421']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
cmp ['[edx+20h],', 'ecx']
jnz ['short', 'loc_53F4']
mov ['eax,', '[ebp+var_38]']
shr ['eax,', '7']
cmp ['eax,', '[ebp+var_C]']
jbe ['short', 'loc_5421']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
cmp ['[edx+20h],', 'ecx']
ja ['short', 'loc_5421']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+20h]']
add ['ecx,', '1']
cmp ['ecx,', '[ebp+var_8]']
jb ['short', 'loc_542B']
cmp ['[ebp+var_8],', '3']
jb ['short', 'loc_542B']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', '7']
cmp ['edx,', '[ebp+var_38]']
jbe ['short', 'loc_542B']
mov ['eax,', '1']
jmp ['loc_5508']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
sub ['eax,', '1']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', '0']
jmp ['short', 'loc_545A']
mov ['ecx,', '[ebp+var_24]']
add ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
cmp ['[ebp+var_24],', '4']
jnb ['loc_54EA']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_28]']
sub ['ecx,', '[eax+edx*4+34h]']
sub ['ecx,', '1']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+var_28]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_44]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
cmp ['eax,', 'edx']
jnz ['short', 'loc_5499']
mov ['eax,', '[ebp+var_28]']
movzx ['ecx,', 'byte', 'ptr', '[eax+1]']
mov ['edx,', '[ebp+var_44]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
cmp ['ecx,', 'eax']
jz ['short', 'loc_549B']
jmp ['short', 'loc_5451']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '1']
mov ['[ebp+var_40],', 'ecx']
mov ['[ebp+var_3C],', '2']
jmp ['short', 'loc_54B6']
mov ['edx,', '[ebp+var_3C]']
add ['edx,', '1']
mov ['[ebp+var_3C],', 'edx']
mov ['eax,', '[ebp+var_3C]']
cmp ['eax,', '[ebp+var_40]']
jnb ['short', 'loc_54D6']
mov ['ecx,', '[ebp+var_28]']
add ['ecx,', '[ebp+var_3C]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
mov ['eax,', '[ebp+var_44]']
add ['eax,', '[ebp+var_3C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jnz ['short', 'loc_54D6']
jmp ['short', 'loc_54AD']
mov ['edx,', '[ebp+var_3C]']
cmp ['edx,', '[ebp+var_40]']
jb ['short', 'loc_54E5']
mov ['eax,', '1']
jmp ['short', 'loc_5508']
jmp ['loc_5451']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '4']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '2']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_MovePos@8']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN44_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '44h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_CheckErrors@4  proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+90h],', '0']
jz ['short', 'loc_556A']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+90h]']
jmp ['short', 'loc_55BB']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+0C8h],', '0']
jz ['short', 'loc_5583']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+90h],', '9']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+2ACh],', '0']
jz ['short', 'loc_559C']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+90h],', '8']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+90h],', '0']
jz ['short', 'loc_55B2']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+6Ch],', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+90h]']
pop ['ebp']
retn ['4']
endp
_Flush@8        proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+6Ch],', '1']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+68h],', '0']
jz ['short', 'loc_55E9']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_4]']
and ['eax,', '[edx+58h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_WriteEndMarker@8']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '98h']
push ['edx']
call ['_RangeEnc_FlushData@4']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '98h']
push ['eax']
call ['_RangeEnc_FlushStream@4']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_CheckErrors@4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_RangeEnc_FlushData@4 proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_563D']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '5']
jge ['short', 'loc_564D']
mov ['ecx,', '[ebp+arg_0]']
call ['@RangeEnc_ShiftLow@4']
jmp ['short', 'loc_5634']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_WriteEndMarker@8 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+44h]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+32608h]']
mov ['ecx,', '[ebp+arg_4]']
lea ['edx,', '[eax+ecx*2]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '98h']
push ['eax']
call ['_RangeEnc_EncodeBit@12']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+44h]']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx*2+32788h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '98h']
push ['edx']
call ['_RangeEnc_EncodeBit@12']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+44h]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '_kMatchNextStates[ecx*4]']
mov ['[edx+44h],', 'eax']
mov ['[ebp+var_4],', '2']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '30F34h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
xor ['eax,', 'eax']
cmp ['dword', 'ptr', '[edx+64h],', '0']
setz ['al']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '2']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '98h']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '32C6Ch']
push ['ecx']
call ['_LenEnc_Encode2@24']
cmp ['[ebp+var_4],', '5']
jnb ['short', 'loc_5725']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '2']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_572C']
mov ['[ebp+var_8],', '3']
push ['3Fh']
push ['6']
mov ['eax,', '[ebp+var_8]']
shl ['eax,', '7']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+32968h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '98h']
push ['eax']
call ['_RcTree_Encode@16']
push ['1Ah']
push ['3FFFFFFh']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '98h']
push ['ecx']
call ['_RangeEnc_EncodeDirectBits@12']
push ['0Fh']
push ['4']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '32C4Ch']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '98h']
push ['eax']
call ['_RcTree_ReverseEncode@16']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_MyWrite@12     proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
cmp ['edx,', '[ebp+Size]']
jnb ['short', 'loc_57CF']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '1']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
sub ['edx,', '[ebp+Size]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
add ['edx,', '[ebp+Size]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+Size]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_LzmaEnc_Encode@24 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_LzmaEnc_Prepare@20']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_5852']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_585F']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_LzmaEnc_Encode2@8']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
endp
_LzmaEnc_Prepare@20 proc near           
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+288h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+74h],', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
mov ['[ecx+0BCh],', 'edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
push ['0']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_LzmaEnc_AllocAndInit@16']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
_LzmaEnc_Encode2@8 proc near            
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '310h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_310]']
mov ['ecx,', '0C4h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_30C],', '0']
mov ['al,', '[ebp+var_30C]']
mov ['[ebp+var_30B],', 'al']
push ['0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_LzmaEnc_CodeOneBlock@16']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_5932']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+6Ch],', '0']
jz ['short', 'loc_5934']
jmp ['short', 'loc_59A3']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_599E']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[eax+0B0h]']
sub ['eax,', '[ecx+0B8h]']
cdq
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+0C0h]']
adc ['edx,', '[ecx+0C4h]']
mov ['ecx,', '[ebp+arg_0]']
add ['eax,', '[ecx+0A8h]']
adc ['edx,', '[ecx+0ACh]']
mov ['esi,', 'esp']
push ['edx']
push ['eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+7Ch]']
push ['eax']
mov ['ecx,', '[edx+78h]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_599E']
mov ['[ebp+var_8],', '0Ah']
jmp ['short', 'loc_59A3']
jmp ['loc_5911']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_LzmaEnc_Finish@4']
mov ['eax,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '310h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_LzmaEnc_WriteProperties@12 proc near   
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8Ch]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_8]']
cmp ['dword', 'ptr', '[eax],', '5']
jnb ['short', 'loc_5A3B']
mov ['eax,', '5']
jmp ['loc_5B14']
mov ['ecx,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[ecx],', '5']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+50h]']
imul ['eax,', '5']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+4Ch]']
imul ['eax,', '9']
mov ['edx,', '[ebp+var_4]']
add ['eax,', '[edx+48h]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx],', 'al']
cmp ['[ebp+var_C],', '400000h']
jb ['short', 'loc_5A8E']
mov ['[ebp+var_10],', '0FFFFFh']
or ['edx,', '0FFFFFFFFh']
sub ['edx,', '[ebp+var_10]']
cmp ['[ebp+var_C],', 'edx']
jnb ['short', 'loc_5A8C']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_10]']
not ['ecx']
and ['eax,', 'ecx']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_5AE4']
mov ['[ebp+var_8],', '0Bh']
jmp ['short', 'loc_5AA0']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '1Eh']
ja ['short', 'loc_5AE4']
mov ['eax,', '2']
mov ['ecx,', '[ebp+var_8]']
shl ['eax,', 'cl']
cmp ['[ebp+var_C],', 'eax']
ja ['short', 'loc_5AC4']
mov ['edx,', '2']
mov ['ecx,', '[ebp+var_8]']
shl ['edx,', 'cl']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_5AE4']
mov ['eax,', '3']
mov ['ecx,', '[ebp+var_8]']
shl ['eax,', 'cl']
cmp ['[ebp+var_C],', 'eax']
ja ['short', 'loc_5AE2']
mov ['edx,', '3']
mov ['ecx,', '[ebp+var_8]']
shl ['edx,', 'cl']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_5AE4']
jmp ['short', 'loc_5A97']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_5AF6']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '4']
jnb ['short', 'loc_5B12']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '3']
mov ['edx,', '[ebp+var_C]']
shr ['edx,', 'cl']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_8]']
mov ['[eax+1],', 'dl']
jmp ['short', 'loc_5AED']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_LzmaEnc_MemEncode@36 proc near         
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['_LzmaEnc_SetInputBuf@12']
mov ['[ebp+var_1C],', 'offset', '_MyWrite@12']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_14]']
mov ['[ecx+68h],', 'edx']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[ebp+var_1C]']
mov ['[eax+0BCh],', 'ecx']
mov ['edx,', '[ebp+arg_20]']
push ['edx']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_LzmaEnc_MemPrepare@24']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_5BBF']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['_LzmaEnc_Encode2@8']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
sub ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_5BD9']
mov ['eax,', '7']
jmp ['short', 'loc_5BDC']
mov ['eax,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN7_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['24h']
endp
_LzmaEncode@44  proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_24]']
push ['eax']
call ['_LzmaEnc_Create@4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_5C4D']
mov ['eax,', '2']
jmp ['short', 'loc_5CBD']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_LzmaEnc_SetProps@8']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_5CA9']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_LzmaEnc_WriteProperties@12']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_5CA9']
mov ['eax,', '[ebp+arg_28]']
push ['eax']
mov ['ecx,', '[ebp+arg_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_20]']
push ['edx']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_LzmaEnc_MemEncode@36']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_28]']
push ['eax']
mov ['ecx,', '[ebp+arg_24]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['_LzmaEnc_Destroy@12']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['2Ch']
endp
