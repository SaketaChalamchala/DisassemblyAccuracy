?ConvertUInt32ToString@@YGXIPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_20],', '0']
cmp ['[ebp+arg_0],', '0Ah']
jb ['short', 'loc_6A']
mov ['eax,', '[ebp+arg_0]']
xor ['edx,', 'edx']
mov ['ecx,', '0Ah']
div ['ecx']
add ['edx,', '30h']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[ebp+eax+var_18],', 'dl']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
xor ['edx,', 'edx']
mov ['ecx,', '0Ah']
div ['ecx']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_34']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '30h']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax],', 'dl']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_A4']
mov ['edx,', '[ebp+var_20]']
sub ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+var_20]']
mov ['dl,', 'byte', 'ptr', '[ebp+ecx+var_18]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_7E']
mov ['ecx,', '[ebp+arg_4]']
mov ['byte', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?ConvertUInt64ToString@@YGX_KPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['dword', 'ptr', '[ebp+arg_0+4],', '0']
ja ['short', 'loc_130']
jb ['short', 'loc_11E']
cmp ['dword', 'ptr', '[ebp+arg_0],', '0FFFFFFFFh']
ja ['short', 'loc_130']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_0]']
push ['ecx']
call ['?ConvertUInt32ToString@@YGXIPAD@Z']
jmp ['loc_1C0']
mov ['[ebp+var_28],', '0']
cmp ['dword', 'ptr', '[ebp+arg_0+4],', '0']
ja ['short', 'loc_143']
cmp ['dword', 'ptr', '[ebp+arg_0],', '0Ah']
jb ['short', 'loc_180']
push ['0']
push ['0Ah']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_0+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0]']
push ['eax']
call ['__aullrem']
add ['eax,', '30h']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+ecx+var_20],', 'al']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
push ['0']
push ['0Ah']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_0]']
push ['ecx']
call ['__aulldiv']
mov ['dword', 'ptr', '[ebp+arg_0],', 'eax']
mov ['dword', 'ptr', '[ebp+arg_0+4],', 'edx']
jmp ['short', 'loc_137']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_0]']
add ['edx,', '30h']
mov ['eax,', '[ebp+arg_8]']
mov ['[eax],', 'dl']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '1']
mov ['[ebp+arg_8],', 'ecx']
cmp ['[ebp+var_28],', '0']
jz ['short', 'loc_1BA']
mov ['edx,', '[ebp+var_28]']
sub ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[ebp+var_28]']
mov ['dl,', '[ebp+ecx+var_20]']
mov ['[eax],', 'dl']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '1']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_194']
mov ['ecx,', '[ebp+arg_8]']
mov ['byte', 'ptr', '[ecx],', '0']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?ConvertUInt64ToOct@@YGX_KPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_0+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_245']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
mov ['cl,', '3']
call ['__aullshr']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '[ebp+var_4]']
jnz ['short', 'loc_262']
jmp ['short', 'loc_264']
jmp ['short', 'loc_23C']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '[ebp+var_C]']
mov ['byte', 'ptr', '[ecx],', '0']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_0]']
and ['edx,', '7']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0+4]']
and ['eax,', '0']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0]']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_0+4]']
mov ['cl,', '3']
call ['__aullshr']
mov ['dword', 'ptr', '[ebp+arg_0],', 'eax']
mov ['dword', 'ptr', '[ebp+arg_0+4],', 'edx']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '30h']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+var_C]']
mov ['[eax],', 'dl']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_26D']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?ConvertUInt32ToHex@@YGXIPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_2EF']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
shr ['edx,', '4']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_300']
jmp ['short', 'loc_302']
jmp ['short', 'loc_2E6']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_8]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '0Fh']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
shr ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
cmp ['[ebp+var_C],', '0Ah']
jnb ['short', 'loc_32E']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '30h']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_337']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '37h']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_8]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_10]']
mov ['[eax],', 'cl']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_30B']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?ConvertUInt64ToHex@@YGX_KPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_0+4]']
mov ['[ebp+var_4],', 'ecx']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_398']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
mov ['cl,', '4']
call ['__aullshr']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_8]']
or ['eax,', '[ebp+var_4]']
jnz ['short', 'loc_3B5']
jmp ['short', 'loc_3B7']
jmp ['short', 'loc_38F']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '[ebp+var_C]']
mov ['byte', 'ptr', '[ecx],', '0']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_0]']
and ['edx,', '0Fh']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0+4]']
and ['eax,', '0']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0]']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_0+4]']
mov ['cl,', '4']
call ['__aullshr']
mov ['dword', 'ptr', '[ebp+arg_0],', 'eax']
mov ['dword', 'ptr', '[ebp+arg_0+4],', 'edx']
cmp ['[ebp+var_10],', '0Ah']
jnb ['short', 'loc_3F3']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '30h']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_3FC']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '37h']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '[ebp+var_C]']
mov ['dl,', 'byte', 'ptr', '[ebp+var_14]']
mov ['[ecx],', 'dl']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_3C0']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?ConvertUInt32ToHex8Digits@@YGXIPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['byte', 'ptr', '[eax+8],', '0']
mov ['[ebp+var_4],', '7']
jmp ['short', 'loc_464']
mov ['ecx,', '[ebp+var_4]']
sub ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jl ['short', 'loc_4A3']
mov ['edx,', '[ebp+arg_0]']
and ['edx,', '0Fh']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
shr ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
cmp ['[ebp+var_8],', '0Ah']
jnb ['short', 'loc_48D']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '30h']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_496']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '37h']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_4]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_C]']
mov ['[eax],', 'cl']
jmp ['short', 'loc_45B']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?ConvertUInt32ToString@@YGXIPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_20],', '0']
cmp ['[ebp+arg_0],', '0Ah']
jb ['short', 'loc_51A']
mov ['eax,', '[ebp+arg_0]']
xor ['edx,', 'edx']
mov ['ecx,', '0Ah']
div ['ecx']
add ['edx,', '30h']
mov ['eax,', '[ebp+var_20]']
mov ['byte', 'ptr', '[ebp+eax+var_18],', 'dl']
mov ['ecx,', '[ebp+var_20]']
add ['ecx,', '1']
mov ['[ebp+var_20],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
xor ['edx,', 'edx']
mov ['ecx,', '0Ah']
div ['ecx']
mov ['[ebp+arg_0],', 'eax']
jmp ['short', 'loc_4E4']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '30h']
mov ['eax,', '[ebp+arg_4]']
mov ['[eax],', 'dx']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '2']
mov ['[ebp+arg_4],', 'ecx']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_558']
mov ['edx,', '[ebp+var_20]']
sub ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
movzx ['cx,', 'byte', 'ptr', '[ebp+eax+var_18]']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '2']
mov ['[ebp+arg_4],', 'eax']
jmp ['short', 'loc_52F']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['[edx],', 'cx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?ConvertUInt64ToString@@YGX_KPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
cmp ['dword', 'ptr', '[ebp+arg_0+4],', '0']
ja ['short', 'loc_5E0']
jb ['short', 'loc_5CE']
cmp ['dword', 'ptr', '[ebp+arg_0],', '0FFFFFFFFh']
ja ['short', 'loc_5E0']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_0]']
push ['ecx']
call ['?ConvertUInt32ToString@@YGXIPA_W@Z']
jmp ['loc_676']
mov ['[ebp+var_28],', '0']
cmp ['dword', 'ptr', '[ebp+arg_0+4],', '0']
ja ['short', 'loc_5F3']
cmp ['dword', 'ptr', '[ebp+arg_0],', '0Ah']
jb ['short', 'loc_630']
push ['0']
push ['0Ah']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_0+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0]']
push ['eax']
call ['__aullrem']
add ['eax,', '30h']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+ecx+var_20],', 'al']
mov ['edx,', '[ebp+var_28]']
add ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
push ['0']
push ['0Ah']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_0]']
push ['ecx']
call ['__aulldiv']
mov ['dword', 'ptr', '[ebp+arg_0],', 'eax']
mov ['dword', 'ptr', '[ebp+arg_0+4],', 'edx']
jmp ['short', 'loc_5E7']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_0]']
add ['edx,', '30h']
mov ['eax,', '[ebp+arg_8]']
mov ['[eax],', 'dx']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '2']
mov ['[ebp+arg_8],', 'ecx']
cmp ['[ebp+var_28],', '0']
jz ['short', 'loc_66E']
mov ['edx,', '[ebp+var_28]']
sub ['edx,', '1']
mov ['[ebp+var_28],', 'edx']
mov ['eax,', '[ebp+var_28]']
movzx ['cx,', '[ebp+eax+var_20]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'cx']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '2']
mov ['[ebp+arg_8],', 'eax']
jmp ['short', 'loc_645']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'cx']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN12_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?ConvertInt64ToString@@YGX_JPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['dword', 'ptr', '[ebp+arg_0+4],', '0']
jg ['short', 'loc_6F3']
jl ['short', 'loc_6D1']
cmp ['dword', 'ptr', '[ebp+arg_0],', '0']
jnb ['short', 'loc_6F3']
mov ['eax,', '[ebp+arg_8]']
mov ['byte', 'ptr', '[eax],', '2Dh']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '1']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_0]']
neg ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0+4]']
adc ['eax,', '0']
neg ['eax']
mov ['dword', 'ptr', '[ebp+arg_0],', 'edx']
mov ['dword', 'ptr', '[ebp+arg_0+4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', 'dword', 'ptr', '[ebp+arg_0+4]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0]']
push ['eax']
call ['?ConvertUInt64ToString@@YGX_KPAD@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
?ConvertInt64ToString@@YGX_JPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['dword', 'ptr', '[ebp+arg_0+4],', '0']
jg ['short', 'loc_748']
jl ['short', 'loc_721']
cmp ['dword', 'ptr', '[ebp+arg_0],', '0']
jnb ['short', 'loc_748']
mov ['eax,', '2Dh']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'ax']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '2']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0]']
neg ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_0+4]']
adc ['ecx,', '0']
neg ['ecx']
mov ['dword', 'ptr', '[ebp+arg_0],', 'eax']
mov ['dword', 'ptr', '[ebp+arg_0+4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', 'dword', 'ptr', '[ebp+arg_0+4]']
push ['eax']
mov ['ecx,', 'dword', 'ptr', '[ebp+arg_0]']
push ['ecx']
call ['?ConvertUInt64ToString@@YGX_KPA_W@Z']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['0Ch']
endp
