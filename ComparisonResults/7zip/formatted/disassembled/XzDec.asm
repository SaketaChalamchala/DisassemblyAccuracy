_Xz_ReadVarInt@12 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['dword', 'ptr', '[eax+4],', '0']
cmp ['[ebp+arg_4],', '9']
jbe ['short', 'loc_39']
mov ['[ebp+var_10],', '9']
jmp ['short', 'loc_3F']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_BA']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_4]']
mov ['dl,', '[ecx]']
mov ['byte', 'ptr', '[ebp+var_C+3],', 'dl']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_C+3]']
and ['eax,', '7Fh']
cdq
mov ['ecx,', '[ebp+var_4]']
imul ['ecx,', '7']
call ['__allshl']
mov ['ecx,', '[ebp+arg_8]']
or ['eax,', '[ecx]']
or ['edx,', '[ecx+4]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_C+3]']
and ['eax,', '80h']
jnz ['short', 'loc_B8']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_C+3]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_AD']
cmp ['[ebp+var_4],', '1']
jz ['short', 'loc_AD']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_B3']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
jmp ['short', 'loc_BC']
jmp ['short', 'loc_4C']
xor ['eax,', 'eax']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
_BraState_SetFromMethod@20 proc near    
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '3']
jnz ['short', 'loc_E8']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_137']
cmp ['[ebp+arg_4],', '4']
jnz ['short', 'loc_F4']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_137']
cmp ['[ebp+arg_4],', '5']
jnz ['short', 'loc_100']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_137']
cmp ['[ebp+arg_4],', '6']
jnz ['short', 'loc_10C']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_137']
cmp ['[ebp+arg_4],', '7']
jnz ['short', 'loc_118']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_137']
cmp ['[ebp+arg_4],', '8']
jnz ['short', 'loc_124']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_137']
cmp ['[ebp+arg_4],', '9']
jnz ['short', 'loc_130']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_137']
mov ['eax,', '4']
jmp ['short', 'loc_1AD']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['esi,', 'esp']
push ['4120h']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_169']
mov ['eax,', '2']
jmp ['short', 'loc_1AD']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+0Ch],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[eax+10h],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4],', 'offset', '_BraState_Free@8']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+8],', 'offset', '_BraState_SetProps@16']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+0Ch],', 'offset', '_BraState_Init@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+10h],', 'offset', '_BraState_Code@32']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
_BraState_Free@8 proc near              
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+4]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_BraState_SetProps@16 proc near         
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ebp+arg_C],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+18h],', '0']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+0Ch],', '3']
jnz ['short', 'loc_24B']
cmp ['[ebp+arg_8],', '1']
jz ['short', 'loc_23A']
mov ['eax,', '4']
jmp ['loc_2C6']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+14h],', 'edx']
jmp ['short', 'loc_2C4']
cmp ['[ebp+arg_8],', '4']
jnz ['short', 'loc_2B7']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '5']
mov ['[ebp+var_C],', 'edx']
cmp ['[ebp+var_C],', '4']
ja ['short', 'loc_2AC']
mov ['eax,', '[ebp+var_C]']
jmp ['ds:$LN17[eax*4]']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '3']
jz ['short', 'loc_28A']
mov ['eax,', '4']
jmp ['short', 'loc_2C6']
jmp ['short', 'loc_2AC']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '1']
jz ['short', 'loc_29B']
mov ['eax,', '4']
jmp ['short', 'loc_2C6']
jmp ['short', 'loc_2AC']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '0Fh']
jz ['short', 'loc_2AC']
mov ['eax,', '4']
jmp ['short', 'loc_2C6']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
mov ['[ecx+18h],', 'edx']
jmp ['short', 'loc_2C4']
cmp ['[ebp+arg_8],', '0']
jz ['short', 'loc_2C4']
mov ['eax,', '4']
jmp ['short', 'loc_2C6']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_BraState_Init@4 proc near              
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+1Ch],', '0']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+0Ch],', '3']
jnz ['short', 'loc_32D']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '20h']
push ['eax']
call ['_Delta_Init@4']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_BraState_Code@32 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+Size],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_18]']
mov ['[ebp+arg_18],', 'ecx']
mov ['edx,', '[ebp+arg_1C]']
mov ['dword', 'ptr', '[edx],', '0']
cmp ['[ebp+var_8],', '0']
jbe ['loc_6C5']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx+4]']
jz ['short', 'loc_419']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+4]']
sub ['edx,', '[ecx]']
mov ['[ebp+Size],', 'edx']
mov ['eax,', '[ebp+Size]']
cmp ['eax,', '[ebp+var_8]']
jbe ['short', 'loc_3C8']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', '[edx+ecx+120h]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+Size]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+Size]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+Size]']
mov ['[ebp+Dst],', 'edx']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '[ebp+Size]']
mov ['[ebp+var_8],', 'eax']
jmp ['loc_395']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+8]']
sub ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
lea ['ecx,', '[eax+edx+120h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '120h']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__memmove']
add ['esp,', '0Ch']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '4000h']
sub ['eax,', '[edx+8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[ebp+var_C]']
jbe ['short', 'loc_48C']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ebp+var_4]']
lea ['edx,', '[ecx+eax+120h]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_10]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+Src],', 'eax']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
add ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+8],', '0']
jnz ['short', 'loc_4E9']
jmp ['loc_6C5']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
sub ['edx,', '3']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+var_18],', '6']
ja ['loc_68A']
mov ['eax,', '[ebp+var_18]']
jmp ['ds:$LN25[eax*4]']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+10h],', '0']
jz ['short', 'loc_53E']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '120h']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '20h']
push ['ecx']
call ['_Delta_Encode@16']
jmp ['short', 'loc_562']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '120h']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '20h']
push ['ecx']
call ['_Delta_Decode@16']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['[edx+4],', 'ecx']
jmp ['loc_691']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1Ch']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+18h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '120h']
push ['eax']
call ['_x86_Convert@20']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
jmp ['loc_691']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '120h']
push ['edx']
call ['_PPC_Convert@16']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
jmp ['loc_691']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '120h']
push ['edx']
call ['_IA64_Convert@16']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
jmp ['loc_691']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '120h']
push ['edx']
call ['_ARM_Convert@16']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
jmp ['short', 'loc_691']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '120h']
push ['edx']
call ['_ARMT_Convert@16']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
jmp ['short', 'loc_691']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+18h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '120h']
push ['edx']
call ['_SPARC_Convert@16']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
jmp ['short', 'loc_691']
mov ['eax,', '4']
jmp ['short', 'loc_6E9']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+18h]']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+4]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+18h],', 'eax']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jnz ['short', 'loc_6C0']
cmp ['[ebp+arg_14],', '0']
jnz ['short', 'loc_6B4']
jmp ['short', 'loc_6C5']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
mov ['[ecx+4],', 'eax']
jmp ['loc_395']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ecx+8]']
cmp ['eax,', '[edx]']
jnz ['short', 'loc_6E7']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_6E7']
cmp ['[ebp+arg_14],', '0']
jz ['short', 'loc_6E7']
mov ['ecx,', '[ebp+arg_1C]']
mov ['dword', 'ptr', '[ecx],', '1']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['20h']
endp
_MixCoder_Construct@8 proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_759']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '4']
jnb ['short', 'loc_772']
mov ['edx,', '[ebp+var_4]']
imul ['edx,', '14h']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+edx+50h],', '0']
jmp ['short', 'loc_750']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_MixCoder_Free@4 proc near              
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_7A7']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ecx+8]']
jnb ['short', 'loc_7F1']
mov ['eax,', '[ebp+var_4]']
imul ['eax,', '14h']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+50h]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_7EF']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx],', '0']
jz ['short', 'loc_7EF']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_79E']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_82E']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+4]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '0']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_MixCoder_Init@4 proc near              
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_867']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '3']
jnb ['short', 'loc_899']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+ecx*4+24h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+eax*4+18h],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+edx*4+0Ch],', '0']
jmp ['short', 'loc_85E']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_8AB']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_8DF']
mov ['ecx,', '[ebp+var_4]']
imul ['ecx,', '14h']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+50h]']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0Ch]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['short', 'loc_8A2']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_MixCoder_SetFromMethod@16 proc near    
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
imul ['eax,', '14h']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+50h]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx+eax*8+30h],', 'edx']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx+eax*8+34h],', 'edx']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_C],', '21h']
jnz ['short', 'loc_947']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_949']
jmp ['short', 'loc_95A']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_Lzma2State_SetFromMethod@8']
jmp ['short', 'loc_980']
cmp ['[ebp+arg_4],', '0']
jnz ['short', 'loc_967']
mov ['eax,', '4']
jmp ['short', 'loc_980']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['_BraState_SetFromMethod@20']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_Lzma2State_SetFromMethod@8 proc near   
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['esi,', 'esp']
push ['8Ch']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax],', 'ecx']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_9CD']
mov ['eax,', '2']
jmp ['short', 'loc_A0B']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', 'offset', '_Lzma2State_Free@8']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+8],', 'offset', '_Lzma2State_SetProps@16']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+0Ch],', 'offset', '_Lzma2State_Init@4']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+10h],', 'offset', '_Lzma2State_Code@32']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Lzma2State_Free@8 proc near            
push ['ebp']
mov ['ebp,', 'esp']
push ['esi']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_LzmaDec_Free@8']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_Lzma2State_SetProps@16 proc near       
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_8],', '1']
jz ['short', 'loc_A70']
mov ['eax,', '4']
jmp ['short', 'loc_A84']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Lzma2Dec_Allocate@12']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['10h']
endp
_Lzma2State_Init@4 proc near            
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Lzma2Dec_Init@4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_Lzma2State_Code@32 proc near           
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_Lzma2Dec_DecodeToBuf@28']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_14]']
mov ['[ebp+arg_14],', 'ecx']
xor ['edx,', 'edx']
cmp ['[ebp+var_8],', '1']
setz ['dl']
mov ['eax,', '[ebp+arg_1C]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['20h']
endp
_MixCoder_Code@32 proc near             
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '4Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_4C]']
mov ['ecx,', '13h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_C],', '1']
mov ['ecx,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_1C]']
mov ['dword', 'ptr', '[eax],', '2']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jnz ['short', 'loc_BC8']
mov ['esi,', 'esp']
push ['60000h']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jnz ['short', 'loc_BC8']
mov ['eax,', '2']
jmp ['loc_DCA']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+8],', '1']
jz ['short', 'loc_BD8']
mov ['[ebp+arg_18],', '0']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_BF1']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[edx+8]']
jnb ['loc_DAC']
mov ['ecx,', '[ebp+var_14]']
imul ['ecx,', '14h']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+50h]']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_C2F']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '[edx]']
mov ['[ebp+var_34],', 'eax']
mov ['ecx,', '[ebp+arg_14]']
mov ['[ebp+var_40],', 'ecx']
jmp ['short', 'loc_C71']
mov ['edx,', '[ebp+var_14]']
sub ['edx,', '1']
shl ['edx,', '11h']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', 'edx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
add ['ecx,', '[eax+edx*4+14h]']
mov ['[ebp+var_3C],', 'ecx']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
mov ['esi,', '[ebp+arg_0]']
mov ['ecx,', '[edx+ecx*4+20h]']
sub ['ecx,', '[esi+eax*4+14h]']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+edx*4+8]']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
sub ['eax,', '1']
cmp ['[ebp+var_14],', 'eax']
jnz ['short', 'loc_C92']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '[edx]']
mov ['[ebp+var_28],', 'eax']
jmp ['short', 'loc_CC3']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
mov ['esi,', '[ebp+arg_0]']
mov ['ecx,', '[edx+ecx*4+18h]']
cmp ['ecx,', '[esi+eax*4+24h]']
jz ['short', 'loc_CAD']
jmp ['loc_BE8']
mov ['edx,', '[ebp+var_14]']
shl ['edx,', '11h']
mov ['eax,', '[ebp+arg_0]']
add ['edx,', '[eax+4]']
mov ['[ebp+var_20],', 'edx']
mov ['[ebp+var_28],', '20000h']
mov ['esi,', 'esp']
lea ['ecx,', '[ebp+var_48]']
push ['ecx']
mov ['edx,', '[ebp+arg_18]']
push ['edx']
mov ['eax,', '[ebp+var_40]']
push ['eax']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['edx,', '[ebp+var_3C]']
push ['edx']
lea ['eax,', '[ebp+var_28]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ecx+10h]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_48],', '0']
jnz ['short', 'loc_D06']
mov ['[ebp+var_C],', '0']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_D24']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ebp+arg_10]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+var_34]']
mov ['[ebp+arg_C],', 'eax']
jmp ['short', 'loc_D3B']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+ecx*4+14h]']
add ['eax,', '[ebp+var_34]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+ecx*4+14h],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '1']
cmp ['[ebp+var_14],', 'ecx']
jnz ['short', 'loc_D61']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_28]']
mov ['[ebp+arg_4],', 'edx']
jmp ['short', 'loc_D89']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_28]']
mov ['[ecx+eax*4+24h],', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+eax*4+18h],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_48]']
mov ['[eax+edx*4+0Ch],', 'ecx']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_D94']
mov ['eax,', '[ebp+var_18]']
jmp ['short', 'loc_DCA']
cmp ['[ebp+var_28],', '0']
jnz ['short', 'loc_DA0']
cmp ['[ebp+var_34],', '0']
jz ['short', 'loc_DA7']
mov ['[ebp+var_10],', '1']
jmp ['loc_BE8']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_DB4']
jmp ['short', 'loc_DB9']
jmp ['loc_BD8']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_DC8']
mov ['edx,', '[ebp+arg_1C]']
mov ['dword', 'ptr', '[edx],', '1']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN30']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '4Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['20h']
endp
_Xz_ParseHeader@8 proc near             
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
shl ['ecx,', '8']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+7]']
or ['ecx,', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx],', 'cx']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '6']
mov ['edx,', '2']
call ['@CrcCalc@8']
mov ['ecx,', '[ebp+arg_4]']
cmp ['eax,', '[ecx+8]']
jz ['short', 'loc_E8B']
mov ['eax,', '11h']
jmp ['short', 'loc_EA1']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx]']
xor ['ecx,', 'ecx']
cmp ['eax,', '0Fh']
setle ['cl']
sub ['ecx,', '1']
and ['ecx,', '4']
mov ['eax,', 'ecx']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_XzBlock_Parse@8 proc near              
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '4Ch']
push ['edi']
lea ['edi,', '[ebp+var_4C]']
mov ['ecx,', '13h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
shl ['ecx,', '2']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_4]']
call ['@CrcCalc@8']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_10]']
cmp ['eax,', '[edx]']
jz ['short', 'loc_EF1']
mov ['eax,', '10h']
jmp ['loc_112D']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+var_10]']
jnz ['short', 'loc_F0A']
mov ['eax,', '10h']
jmp ['loc_112D']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', '[ecx]']
mov ['[edx+10h],', 'al']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'byte', 'ptr', '[edx+10h]']
and ['eax,', '40h']
jz ['short', 'loc_FA1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
sub ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_4]']
push ['eax']
call ['_Xz_ReadVarInt@12']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jnz ['short', 'loc_F57']
mov ['eax,', '10h']
jmp ['loc_112D']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_38],', 'edx']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[eax]']
or ['edx,', '[ecx+4]']
jz ['short', 'loc_F97']
mov ['eax,', '[ebp+var_10]']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx]']
adc ['ecx,', '[edx+4]']
mov ['[ebp+var_40],', 'eax']
mov ['[ebp+var_3C],', 'ecx']
cmp ['[ebp+var_3C],', '80000000h']
jb ['short', 'loc_FA1']
ja ['short', 'loc_F97']
cmp ['[ebp+var_40],', '0']
jb ['short', 'loc_FA1']
mov ['eax,', '10h']
jmp ['loc_112D']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+10h]']
and ['ecx,', '80h']
jz ['short', 'loc_FE6']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '8']
push ['edx']
mov ['eax,', '[ebp+var_10]']
sub ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_Xz_ReadVarInt@12']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_FDD']
mov ['eax,', '10h']
jmp ['loc_112D']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '[ebp+var_18]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+10h]']
and ['ecx,', '3']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_1008']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+var_8]']
jnb ['loc_10EE']
mov ['ecx,', '[ebp+var_C]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+18h]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
sub ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_4]']
push ['eax']
call ['_Xz_ReadVarInt@12']
mov ['[ebp+var_30],', 'eax']
cmp ['[ebp+var_30],', '0']
jnz ['short', 'loc_104E']
mov ['eax,', '10h']
jmp ['loc_112D']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_4],', 'ecx']
lea ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
sub ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['_Xz_ReadVarInt@12']
mov ['[ebp+var_34],', 'eax']
cmp ['[ebp+var_34],', '0']
jnz ['short', 'loc_1081']
mov ['eax,', '10h']
jmp ['loc_112D']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '[ebp+var_34]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_10]']
sub ['eax,', '[ebp+var_4]']
xor ['ecx,', 'ecx']
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_44],', 'ecx']
mov ['edx,', '[ebp+var_24]']
cmp ['edx,', '[ebp+var_44]']
ja ['short', 'loc_10B6']
jb ['short', 'loc_10AA']
mov ['eax,', '[ebp+Size]']
cmp ['eax,', '[ebp+var_48]']
ja ['short', 'loc_10B6']
cmp ['[ebp+var_24],', '0']
ja ['short', 'loc_10B6']
cmp ['[ebp+Size],', '14h']
jbe ['short', 'loc_10BD']
mov ['eax,', '10h']
jmp ['short', 'loc_112D']
mov ['ecx,', '[ebp+Size]']
mov ['edx,', '[ebp+var_1C]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '0Ch']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Size]']
add ['eax,', '[ebp+var_4]']
mov ['[ebp+var_4],', 'eax']
jmp ['loc_FFF']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+var_10]']
jnb ['short', 'loc_112B']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
test ['eax,', 'eax']
jz ['short', 'loc_1115']
mov ['[ebp+var_4C],', '1']
jmp ['short', 'loc_111C']
mov ['[ebp+var_4C],', '0']
cmp ['[ebp+var_4C],', '0']
jz ['short', 'loc_1129']
mov ['eax,', '10h']
jmp ['short', 'loc_112D']
jmp ['short', 'loc_10EE']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN28_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '4Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_XzDec_Init@8   proc near               
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '30h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_30]']
mov ['ecx,', '0Ch']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '1']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+10h]']
and ['ecx,', '3']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[edx+8]']
jnz ['short', 'loc_1222']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_11BB']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+var_C]']
jnb ['short', 'loc_1214']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', '1']
sub ['eax,', '[ebp+var_4]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[ebp+arg_4]']
mov ['[ebp+var_24],', 'edx']
mov ['[ebp+var_28],', 'ecx']
mov ['[ebp+var_2C],', 'esi']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_28]']
mov ['ecx,', '[ebp+var_24]']
mov ['edx,', '[ebp+var_30]']
mov ['esi,', '[ebp+var_2C]']
mov ['eax,', '[ecx+eax*8+30h]']
cmp ['eax,', '[esi+edx+18h]']
jnz ['short', 'loc_1210']
mov ['ecx,', '[ebp+var_28]']
mov ['edx,', '[ebp+var_24]']
mov ['eax,', '[ebp+var_30]']
mov ['esi,', '[ebp+var_2C]']
mov ['ecx,', '[edx+ecx*8+34h]']
cmp ['ecx,', '[esi+eax+1Ch]']
jz ['short', 'loc_1212']
jmp ['short', 'loc_1214']
jmp ['short', 'loc_11B2']
mov ['edx,', '[ebp+var_4]']
xor ['eax,', 'eax']
cmp ['edx,', '[ebp+var_C]']
setnz ['al']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1294']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MixCoder_Free@4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_C]']
mov ['[edx+8],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_124C']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+var_C]']
jnb ['short', 'loc_1294']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', '1']
sub ['eax,', '[ebp+var_4]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+arg_4]']
lea ['edx,', '[ecx+eax+18h]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[eax]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MixCoder_SetFromMethod@16']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_1292']
mov ['eax,', '[ebp+var_14]']
jmp ['loc_131A']
jmp ['short', 'loc_1243']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_12A6']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+var_C]']
jnb ['short', 'loc_130F']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '1']
sub ['ecx,', '[ebp+var_4]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[edx+ecx+18h]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_4]']
imul ['ecx,', '14h']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx+50h]']
mov ['[ebp+var_1C],', 'eax']
mov ['esi,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '0Ch']
push ['edx']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx+8]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_20],', 'eax']
cmp ['[ebp+var_20],', '0']
jz ['short', 'loc_130D']
mov ['eax,', '[ebp+var_20]']
jmp ['short', 'loc_131A']
jmp ['short', 'loc_129D']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_MixCoder_Init@4']
xor ['eax,', 'eax']
pop ['edi']
pop ['esi']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_XzUnpacker_Init@4 proc near            
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+48h],', '0']
mov ['dword', 'ptr', '[edx+4Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+50h],', '0']
mov ['dword', 'ptr', '[eax+54h],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+58h],', '0']
mov ['dword', 'ptr', '[ecx+5Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+40h],', '0']
mov ['dword', 'ptr', '[edx+44h],', '0']
pop ['ebp']
retn ['4']
endp
_XzUnpacker_Construct@8 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '68h']
push ['ecx']
call ['_MixCoder_Construct@8']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['_XzUnpacker_Init@4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['8']
endp
_XzUnpacker_Free@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '68h']
push ['eax']
call ['_MixCoder_Free@4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_XzUnpacker_Code@28 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '120h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_120]']
mov ['ecx,', '48h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['edx,', '[ebp+arg_10]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '[ecx]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '6']
jnz ['loc_15FD']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '[ecx]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[eax]']
mov ['[ebp+var_24],', 'ecx']
jnz ['short', 'loc_1477']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_1477']
mov ['edx,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[edx],', '2']
xor ['eax,', 'eax']
jmp ['loc_1F2A']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
push ['0']
lea ['edx,', '[ebp+var_24]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '68h']
push ['eax']
call ['_MixCoder_Code@32']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1A0h']
push ['eax']
call ['_XzCheck_Update@12']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx]']
add ['edx,', '[ebp+var_24]']
mov ['eax,', '[ebp+arg_10]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+Src]']
add ['ecx,', '[ebp+var_24]']
mov ['[ebp+Src],', 'ecx']
mov ['edx,', '[ebp+var_24]']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['edx,', '[ecx+18h]']
adc ['eax,', '[ecx+1Ch]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+18h],', 'edx']
mov ['[ecx+1Ch],', 'eax']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+var_18]']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+20h]']
adc ['ecx,', '[edx+24h]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+20h],', 'eax']
mov ['[edx+24h],', 'ecx']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_30],', 'eax']
cmp ['[ebp+var_30],', '0']
jz ['short', 'loc_1524']
mov ['eax,', '[ebp+var_30]']
jmp ['loc_1F2A']
mov ['ecx,', '[ebp+arg_18]']
cmp ['dword', 'ptr', '[ecx],', '1']
jnz ['loc_15E5']
mov ['edx,', '[ebp+arg_0]']
mov ['esi,', '[edx+14h]']
xor ['edi,', 'edi']
mov ['eax,', '[ebp+arg_0]']
add ['esi,', '[eax+18h]']
adc ['edi,', '[eax+1Ch]']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+10h]']
push ['edx']
call ['_XzFlags_GetCheckSize@4']
xor ['ecx,', 'ecx']
add ['esi,', 'eax']
adc ['edi,', 'ecx']
push ['edi']
push ['esi']
lea ['edx,', '[ebp+var_54]']
push ['edx']
call ['_Xz_WriteVarInt@12']
mov ['[ebp+var_5C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+24h]']
push ['ecx']
mov ['edx,', '[eax+20h]']
push ['edx']
mov ['eax,', '[ebp+var_5C]']
lea ['ecx,', '[ebp+eax+var_54]']
push ['ecx']
call ['_Xz_WriteVarInt@12']
add ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_5C],', 'eax']
mov ['edx,', '[ebp+var_5C]']
push ['edx']
lea ['eax,', '[ebp+var_54]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '218h']
push ['ecx']
call ['_Sha256_Update@12']
mov ['edx,', '[ebp+var_5C]']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['edx,', '[ecx+30h]']
adc ['eax,', '[ecx+34h]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+30h],', 'edx']
mov ['[ecx+34h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+28h]']
add ['eax,', '1']
mov ['ecx,', '[edx+2Ch]']
adc ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+28h],', 'eax']
mov ['[edx+2Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '7']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+8],', '0']
jmp ['short', 'loc_15F8']
cmp ['[ebp+var_24],', '0']
jnz ['short', 'loc_15F8']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_15F8']
xor ['eax,', 'eax']
jmp ['loc_1F2A']
jmp ['loc_1432']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_1613']
mov ['eax,', '[ebp+arg_18]']
mov ['dword', 'ptr', '[eax],', '3']
xor ['eax,', 'eax']
jmp ['loc_1F2A']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_F8],', 'edx']
cmp ['[ebp+var_F8],', '7']
ja ['$LN47']
mov ['eax,', '[ebp+var_F8]']
jmp ['ds:$LN74[eax*4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+4],', '0Ch']
jnb ['short', 'loc_16AA']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+4],', '6']
jnb ['short', 'loc_166B']
mov ['eax,', '[ebp+Src]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
movzx ['edx,', 'byte', 'ptr', 'ds:_XZ_SIG[eax]']
cmp ['ecx,', 'edx']
jz ['short', 'loc_166B']
mov ['eax,', '11h']
jmp ['loc_1F2A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+Src]']
mov ['al,', '[eax]']
mov ['[edx+ecx+2A0h],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+Src]']
add ['ecx,', '1']
mov ['[ebp+Src],', 'ecx']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx],', 'eax']
jmp ['loc_172C']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2A0h']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '10h']
push ['eax']
call ['_Xz_ParseHeader@8']
mov ['[ebp+var_60],', 'eax']
cmp ['[ebp+var_60],', '0']
jz ['short', 'loc_16D1']
mov ['eax,', '[ebp+var_60]']
jmp ['loc_1F2A']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+48h]']
add ['edx,', '1']
mov ['eax,', '[ecx+4Ch]']
adc ['eax,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+48h],', 'edx']
mov ['[ecx+4Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx],', '5']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '218h']
push ['eax']
call ['_Sha256_Init@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+30h],', '0']
mov ['dword', 'ptr', '[ecx+34h],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+28h],', '0']
mov ['dword', 'ptr', '[edx+2Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
jmp ['$LN47']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jnz ['loc_1841']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+Src]']
mov ['dl,', '[edx]']
mov ['[ecx+eax+2A0h],', 'dl']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '1']
mov ['[ebp+Src],', 'eax']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_10]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'byte', 'ptr', '[ecx+2A0h]']
test ['edx,', 'edx']
jnz ['loc_1825']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+2Ch]']
push ['ecx']
mov ['edx,', '[eax+28h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '2A1h']
push ['eax']
call ['_Xz_WriteVarInt@12']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+0Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+0Ch]']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+38h],', 'eax']
mov ['[edx+3Ch],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['ecx,', '[eax+30h]']
adc ['edx,', '[eax+34h]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+30h],', 'ecx']
mov ['[eax+34h],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '280h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '218h']
push ['edx']
call ['_Sha256_Final@8']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '218h']
push ['eax']
call ['_Sha256_Init@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2A0h']
or ['ecx,', '0FFFFFFFFh']
call ['@CrcUpdate@12']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+60h],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx],', '1']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+2A0h]']
lea ['edx,', 'ds:4[ecx*4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+14h],', 'edx']
jmp ['loc_1964']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+4]']
cmp ['eax,', '[edx+14h]']
jz ['short', 'loc_18B7']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+14h]']
sub ['eax,', '[edx+4]']
mov ['[ebp+Size],', 'eax']
mov ['ecx,', '[ebp+Size]']
cmp ['ecx,', '[ebp+var_10]']
jbe ['short', 'loc_186C']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+Size],', 'edx']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax+2A0h]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
add ['ecx,', '[ebp+Size]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+Size]']
mov ['edx,', '[ebp+arg_10]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+Src]']
add ['eax,', '[ebp+Size]']
mov ['[ebp+Src],', 'eax']
jmp ['loc_1964']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '2A0h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '108h']
push ['edx']
call ['_XzBlock_Parse@8']
mov ['[ebp+var_68],', 'eax']
cmp ['[ebp+var_68],', '0']
jz ['short', 'loc_18E1']
mov ['eax,', '[ebp+var_68]']
jmp ['loc_1F2A']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+58h]']
add ['ecx,', '1']
mov ['edx,', '[eax+5Ch]']
adc ['edx,', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+58h],', 'ecx']
mov ['[eax+5Ch],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '6']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+18h],', '0']
mov ['dword', 'ptr', '[edx+1Ch],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+20h],', '0']
mov ['dword', 'ptr', '[eax+24h],', '0']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx+10h]']
and ['edx,', '0Fh']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1A0h']
push ['eax']
call ['_XzCheck_Init@8']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '108h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '68h']
push ['edx']
call ['_XzDec_Init@8']
mov ['[ebp+var_6C],', 'eax']
cmp ['[ebp+var_6C],', '0']
jz ['short', 'loc_1964']
mov ['eax,', '[ebp+var_6C]']
jmp ['loc_1F2A']
jmp ['$LN47']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+8]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+arg_0]']
add ['ecx,', '[eax+18h]']
adc ['edx,', '[eax+1Ch]']
and ['ecx,', '3']
and ['edx,', '0']
mov ['[ebp+var_100],', 'ecx']
mov ['[ebp+var_FC],', 'edx']
mov ['ecx,', '[ebp+var_100]']
or ['ecx,', '[ebp+var_FC]']
jz ['short', 'loc_19F7']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'eax']
mov ['edx,', '[ebp+Src]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+Src]']
add ['ecx,', '1']
mov ['[ebp+Src],', 'ecx']
test ['eax,', 'eax']
jz ['short', 'loc_19D5']
mov ['[ebp+var_104],', '1']
jmp ['short', 'loc_19DF']
mov ['[ebp+var_104],', '0']
cmp ['[ebp+var_104],', '0']
jz ['short', 'loc_19F2']
mov ['eax,', '3']
jmp ['loc_1F2A']
jmp ['loc_1AC2']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+10h]']
push ['eax']
call ['_XzFlags_GetCheckSize@4']
mov ['[ebp+var_70],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_70]']
sub ['edx,', '[ecx+4]']
mov ['[ebp+var_74],', 'edx']
jz ['short', 'loc_1A6B']
mov ['eax,', '[ebp+var_74]']
cmp ['eax,', '[ebp+var_10]']
jbe ['short', 'loc_1A23']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_74],', 'ecx']
mov ['edx,', '[ebp+var_74]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+2A0h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
add ['eax,', '[ebp+var_74]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+var_74]']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+Src]']
add ['edx,', '[ebp+var_74]']
mov ['[ebp+Src],', 'edx']
jmp ['short', 'loc_1AC2']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '5']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+4],', '0']
lea ['edx,', '[ebp+Buf1]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '1A0h']
push ['eax']
call ['_XzCheck_Final@8']
test ['eax,', 'eax']
jz ['short', 'loc_1AC2']
mov ['ecx,', '[ebp+var_70]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2A0h']
push ['edx']
lea ['eax,', '[ebp+Buf1]']
push ['eax']
call ['_memcmp']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jz ['short', 'loc_1AC2']
mov ['eax,', '3']
jmp ['loc_1F2A']
jmp ['$LN47']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+4]']
cmp ['eax,', '[edx+0Ch]']
jnb ['short', 'loc_1B43']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_10]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax+edx+2A0h]']
mov ['edx,', '[ebp+Src]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['edx,', '[ebp+arg_0]']
mov ['edx,', '[edx+4]']
add ['edx,', '1']
mov ['esi,', '[ebp+arg_0]']
mov ['[esi+4],', 'edx']
mov ['edx,', '[ebp+Src]']
add ['edx,', '1']
mov ['[ebp+Src],', 'edx']
cmp ['eax,', 'ecx']
jz ['short', 'loc_1B21']
mov ['[ebp+var_108],', '1']
jmp ['short', 'loc_1B2B']
mov ['[ebp+var_108],', '0']
cmp ['[ebp+var_108],', '0']
jz ['short', 'loc_1B3E']
mov ['eax,', '3']
jmp ['loc_1F2A']
jmp ['loc_1D65']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_10C],', 'eax']
mov ['[ebp+var_110],', 'ecx']
mov ['edx,', '[ebp+var_10C]']
mov ['eax,', '[ebp+var_110]']
mov ['ecx,', '[edx+3Ch]']
cmp ['ecx,', '[eax+34h]']
ja ['loc_1C3E']
jb ['short', 'loc_1B87']
mov ['edx,', '[ebp+var_10C]']
mov ['eax,', '[ebp+var_110]']
mov ['ecx,', '[edx+38h]']
cmp ['ecx,', '[eax+30h]']
jnb ['loc_1C3E']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[edx+30h]']
sub ['ecx,', '[eax+38h]']
mov ['edx,', '[edx+34h]']
sbb ['edx,', '[eax+3Ch]']
mov ['[ebp+var_C4],', 'ecx']
mov ['[ebp+var_C0],', 'edx']
mov ['eax,', '[ebp+var_10]']
xor ['ecx,', 'ecx']
mov ['[ebp+var_118],', 'eax']
mov ['[ebp+var_114],', 'ecx']
mov ['edx,', '[ebp+var_114]']
cmp ['edx,', '[ebp+var_C0]']
jb ['short', 'loc_1BDD']
ja ['short', 'loc_1BD4']
mov ['eax,', '[ebp+var_118]']
cmp ['eax,', '[ebp+var_C4]']
jbe ['short', 'loc_1BDD']
mov ['ecx,', '[ebp+var_C4]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['edx,', '[ebp+Src]']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+60h]']
call ['@CrcUpdate@12']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+60h],', 'eax']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '218h']
push ['ecx']
call ['_Sha256_Update@12']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+Src]']
add ['edx,', '[ebp+var_10]']
mov ['[ebp+Src],', 'edx']
mov ['eax,', '[ebp+var_10]']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+38h]']
adc ['ecx,', '[edx+3Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+38h],', 'eax']
mov ['[edx+3Ch],', 'ecx']
jmp ['loc_1D65']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+38h]']
and ['ecx,', '3']
mov ['edx,', '[eax+3Ch]']
and ['edx,', '0']
mov ['[ebp+var_120],', 'ecx']
mov ['[ebp+var_11C],', 'edx']
mov ['eax,', '[ebp+var_120]']
or ['eax,', '[ebp+var_11C]']
jz ['loc_1CFC']
mov ['ecx,', '[ebp+Src]']
mov ['dl,', '[ecx]']
mov ['[ebp+var_C5],', 'dl']
mov ['eax,', '[ebp+Src]']
add ['eax,', '1']
mov ['[ebp+Src],', 'eax']
movzx ['ecx,', '[ebp+var_C5]']
mov ['edx,', '[ebp+arg_0]']
xor ['ecx,', '[edx+60h]']
and ['ecx,', '0FFh']
mov ['eax,', '[ebp+arg_0]']
mov ['edx,', '[eax+60h]']
shr ['edx,', '8']
xor ['edx,', 'dword', 'ptr', 'ds:_g_CrcTable[ecx*4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+60h],', 'edx']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_10]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+38h]']
add ['edx,', '1']
mov ['eax,', '[ecx+3Ch]']
adc ['eax,', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+38h],', 'edx']
mov ['[ecx+3Ch],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
add ['eax,', '1']
mov ['ecx,', '[edx+34h]']
adc ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+30h],', 'eax']
mov ['[edx+34h],', 'ecx']
movzx ['eax,', '[ebp+var_C5]']
test ['eax,', 'eax']
jz ['short', 'loc_1CFA']
mov ['eax,', '3']
jmp ['loc_1F2A']
jmp ['short', 'loc_1D65']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '2']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+30h]']
add ['eax,', '4']
mov ['ecx,', '[edx+34h]']
adc ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+30h],', 'eax']
mov ['[edx+34h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
lea ['ecx,', '[ebp+var_EC]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '218h']
push ['edx']
call ['_Sha256_Final@8']
push ['20h']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '280h']
push ['eax']
lea ['ecx,', '[ebp+var_EC]']
push ['ecx']
call ['_memcmp']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jz ['short', 'loc_1D65']
mov ['eax,', '3']
jmp ['loc_1F2A']
jmp ['$LN47']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+4],', '4']
jnb ['short', 'loc_1DAF']
mov ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[eax]']
add ['ecx,', '1']
mov ['edx,', '[ebp+arg_10]']
mov ['[edx],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+Src]']
mov ['al,', '[eax]']
mov ['[edx+ecx+2A0h],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+Src]']
add ['ecx,', '1']
mov ['[ebp+Src],', 'ecx']
jmp ['short', 'loc_1DE0']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx],', '3']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+60h]']
xor ['edx,', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
cmp ['edx,', '[eax+2A0h]']
jz ['short', 'loc_1DE0']
mov ['eax,', '3']
jmp ['loc_1F2A']
jmp ['$LN47']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '0Ch']
sub ['edx,', '[ecx+4]']
mov ['[ebp+var_F4],', 'edx']
mov ['eax,', '[ebp+var_F4]']
cmp ['eax,', '[ebp+var_10]']
jbe ['short', 'loc_1E0A']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_F4],', 'ecx']
mov ['edx,', '[ebp+var_F4]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
mov ['eax,', '[ebp+arg_0]']
lea ['ecx,', '[eax+edx+2A0h]']
push ['ecx']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
add ['eax,', '[ebp+var_F4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_10]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+var_F4]']
mov ['ecx,', '[ebp+arg_10]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+Src]']
add ['edx,', '[ebp+var_F4]']
mov ['[ebp+Src],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+4],', '0Ch']
jnz ['short', 'loc_1EC4']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx],', '4']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+50h]']
add ['eax,', '1']
mov ['ecx,', '[edx+54h]']
adc ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+50h],', 'eax']
mov ['[edx+54h],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+40h],', '0']
mov ['dword', 'ptr', '[eax+44h],', '0']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '2A0h']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
push ['eax']
mov ['ecx,', '[edx+30h]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
movzx ['eax,', 'word', 'ptr', '[edx+10h]']
push ['eax']
call ['_Xz_CheckFooter@16']
test ['eax,', 'eax']
jnz ['short', 'loc_1EC4']
mov ['eax,', '3']
jmp ['short', 'loc_1F2A']
jmp ['short', '$LN47']
mov ['ecx,', '[ebp+Src]']
movzx ['edx,', 'byte', 'ptr', '[ecx]']
test ['edx,', 'edx']
jz ['short', 'loc_1EF7']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+40h]']
and ['ecx,', '3']
jz ['short', 'loc_1EE2']
mov ['eax,', '11h']
jmp ['short', 'loc_1F2A']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', '$LN47']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[ecx]']
add ['edx,', '1']
mov ['eax,', '[ebp+arg_10]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+Src]']
add ['ecx,', '1']
mov ['[ebp+Src],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+40h]']
add ['eax,', '1']
mov ['ecx,', '[edx+44h]']
adc ['ecx,', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+40h],', 'eax']
mov ['[edx+44h],', 'ecx']
jmp ['loc_1432']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN73']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '120h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
_Xz_CheckFooter@16 proc near            
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_C]']
mov ['eax,', '[eax+4]']
xor ['edx,', 'edx']
add ['eax,', '1']
adc ['edx,', '0']
mov ['cl,', '2']
call ['__allshl']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'edx']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+var_8]']
jnz ['short', 'loc_208E']
mov ['edx,', '[ebp+arg_8]']
cmp ['edx,', '[ebp+var_4]']
jnz ['short', 'loc_208E']
mov ['ecx,', '[ebp+arg_C]']
add ['ecx,', '4']
mov ['edx,', '6']
call ['@CrcCalc@8']
mov ['ecx,', '[ebp+arg_C]']
cmp ['[ecx],', 'eax']
jnz ['short', 'loc_208E']
movzx ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_C]']
movzx ['ecx,', 'byte', 'ptr', '[eax+8]']
shl ['ecx,', '8']
mov ['eax,', '[ebp+arg_C]']
movzx ['eax,', 'byte', 'ptr', '[eax+9]']
or ['ecx,', 'eax']
movzx ['ecx,', 'cx']
cmp ['edx,', 'ecx']
jnz ['short', 'loc_208E']
push ['2']
push ['offset', '_XZ_FOOTER_SIG']
mov ['edx,', '[ebp+arg_C]']
add ['edx,', '0Ah']
push ['edx']
call ['_memcmp']
add ['esp,', '0Ch']
test ['eax,', 'eax']
jnz ['short', 'loc_208E']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_2095']
mov ['[ebp+var_C],', '0']
mov ['eax,', '[ebp+var_C]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_XzUnpacker_IsStreamWasFinished@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '4']
jnz ['short', 'loc_20D7']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+40h]']
and ['edx,', '3']
jnz ['short', 'loc_20D7']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_20DE']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_XzUnpacker_GetExtraSize@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '4']
jnz ['short', 'loc_2131']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '[ecx+40h]']
mov ['eax,', '[ebp+var_4]']
adc ['eax,', '[ecx+44h]']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_2156']
mov ['ecx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[ecx],', '0']
jnz ['short', 'loc_2156']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+4]']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+40h]']
adc ['ecx,', '[edx+44h]']
add ['eax,', '[ebp+var_8]']
adc ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
