?MakeTranslation@Cx86ConvertOutStream@NLzx@NCompress@@AAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+10h],', '0Ah']
ja ['short', 'loc_29']
jmp ['loc_14D']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
sub ['edx,', '0Ah']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '19h']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[ebp+var_8]']
jnb ['loc_14D']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '[ebp+var_10]']
movzx ['eax,', 'byte', 'ptr', '[edx]']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
cmp ['eax,', '0E8h']
jnz ['short', 'loc_73']
mov ['[ebp+var_24],', '1']
jmp ['short', 'loc_7A']
mov ['[ebp+var_24],', '0']
cmp ['[ebp+var_24],', '0']
jz ['loc_148']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_9D']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+var_18],', '4']
jnb ['short', 'loc_C0']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_C]']
movzx ['edx,', 'byte', 'ptr', '[ecx+eax]']
mov ['ecx,', '[ebp+var_18]']
shl ['ecx,', '3']
shl ['edx,', 'cl']
add ['edx,', '[ebp+var_14]']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_94']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_10]']
lea ['eax,', '[ecx+edx-1]']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
neg ['ecx']
cmp ['[ebp+var_14],', 'ecx']
jl ['short', 'loc_13F']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[edx+14h]']
jge ['short', 'loc_13F']
cmp ['[ebp+var_14],', '0']
jl ['short', 'loc_F6']
mov ['ecx,', '[ebp+var_14]']
sub ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_28],', 'ecx']
jmp ['short', 'loc_102']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[edx+14h]']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
mov ['[ebp+var_20],', 'ecx']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_11A']
mov ['edx,', '[ebp+var_18]']
add ['edx,', '1']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+var_18],', '4']
jnb ['short', 'loc_13F']
mov ['eax,', '[ebp+var_20]']
and ['eax,', '0FFh']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+var_C]']
mov ['[edx+ecx],', 'al']
mov ['eax,', '[ebp+var_20]']
shr ['eax,', '8']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_111']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
mov ['[ebp+var_10],', 'ecx']
jmp ['loc_45']
pop ['edi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Write@Cx86ConvertOutStream@NLzx@NCompress@@UAGJPBXIPAI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+Size],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_18B']
mov ['eax,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+this]']
movzx ['edx,', 'byte', 'ptr', '[ecx+18h]']
test ['edx,', 'edx']
jnz ['short', 'loc_1C4']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ecx]']
push ['eax']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
jmp ['loc_25B']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
cmp ['eax,', '[ebp+arg_8]']
jnb ['short', 'loc_24B']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '8000h']
sub ['edx,', '[ecx+10h]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_4]']
push ['eax']
call ['??$MyMin@I@@YGIII@Z']
mov ['[ebp+Size],', 'eax']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+this]']
lea ['eax,', '[edx+ecx+19h]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ecx+10h]']
add ['edx,', '[ebp+Size]']
mov ['eax,', '[ebp+this]']
mov ['[eax+10h],', 'edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '[ebp+Size]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+this]']
cmp ['dword', 'ptr', '[edx+10h],', '8000h']
jnz ['short', 'loc_249']
mov ['ecx,', '[ebp+this]']
call ['?Flush@Cx86ConvertOutStream@NLzx@NCompress@@QAEJXZ']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_249']
mov ['eax,', '[ebp+var_C]']
jmp ['short', 'loc_25B']
jmp ['short', 'loc_1CB']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_259']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[ebp+var_4]']
mov ['[eax],', 'ecx']
xor ['eax,', 'eax']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
?Flush@Cx86ConvertOutStream@NLzx@NCompress@@QAEJXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+10h],', '0']
jnz ['short', 'loc_2A4']
xor ['eax,', 'eax']
jmp ['loc_371']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+18h]']
test ['edx,', 'edx']
jz ['short', 'loc_2B7']
mov ['ecx,', '[ebp+var_4]']
call ['?MakeTranslation@Cx86ConvertOutStream@NLzx@NCompress@@AAEXXZ']
mov ['[ebp+var_8],', '0']
mov ['esi,', 'esp']
lea ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
sub ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_4]']
lea ['edx,', '[ecx+eax+19h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
mov ['ecx,', '[ecx]']
push ['eax']
mov ['edx,', '[ecx+0Ch]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_302']
mov ['eax,', '[ebp+var_18]']
jmp ['short', 'loc_371']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_30F']
mov ['eax,', '80004005h']
jmp ['short', 'loc_371']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '[ebp+var_10]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+10h]']
jb ['short', 'loc_2BE']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
mov ['edx,', '[ebp+var_4]']
add ['ecx,', '[edx+10h]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+0Ch],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+18h]']
test ['eax,', 'eax']
jz ['short', 'loc_35F']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '40000000h']
jnb ['short', 'loc_35F']
mov ['[ebp+var_1C],', '1']
jmp ['short', 'loc_366']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['al,', 'byte', 'ptr', '[ebp+var_1C]']
mov ['[edx+18h],', 'al']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$MyMin@I@@YGIII@Z proc near           
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_3D7']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_3DD']
mov ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
