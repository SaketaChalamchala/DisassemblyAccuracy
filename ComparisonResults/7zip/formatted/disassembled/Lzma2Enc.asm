_Lzma2EncProps_Init@4 proc near         
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['_LzmaEncProps_Init@4']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+40h],', '0FFFFFFFFh']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+3Ch],', '0FFFFFFFFh']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+38h],', '0']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
pop ['ebp']
retn ['4']
endp
_Lzma2EncProps_Normalize@4 proc near    
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '9Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_9C]']
mov ['ecx,', '27h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['esi,', '[ebp+arg_0]']
mov ['ecx,', '0Eh']
lea ['edi,', '[ebp+var_50]']
rep ['movsd']
lea ['eax,', '[ebp+var_50]']
push ['eax']
call ['_LzmaEncProps_Normalize@4']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+34h]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+3Ch]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+40h]']
mov ['[ebp+var_14],', 'ecx']
cmp ['[ebp+var_10],', '20h']
jle ['short', 'loc_AB']
mov ['[ebp+var_10],', '20h']
cmp ['[ebp+var_14],', '0']
jg ['short', 'loc_CA']
cmp ['[ebp+var_10],', '0']
jg ['short', 'loc_BE']
mov ['[ebp+var_10],', '1']
mov ['edx,', '[ebp+var_C]']
imul ['edx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_125']
cmp ['[ebp+var_10],', '0']
jg ['short', 'loc_FC']
mov ['eax,', '[ebp+var_14]']
cdq
idiv ['[ebp+var_C]']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jnz ['short', 'loc_ED']
mov ['[ebp+var_8],', '1']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '20h']
jle ['short', 'loc_FA']
mov ['[ebp+var_10],', '20h']
jmp ['short', 'loc_125']
cmp ['[ebp+var_8],', '0']
jg ['short', 'loc_11B']
mov ['eax,', '[ebp+var_14]']
cdq
idiv ['[ebp+var_10]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_119']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_125']
mov ['ecx,', '[ebp+var_C]']
imul ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+34h],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_LzmaEncProps_Normalize@4']
mov ['edx,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[edx+38h],', '0']
jnz ['loc_206']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_58],', 'ecx']
mov ['eax,', '[ebp+var_58]']
xor ['edx,', 'edx']
mov ['cl,', '2']
call ['__allshl']
mov ['[ebp+var_60],', 'eax']
mov ['[ebp+var_5C],', 'edx']
mov ['[ebp+var_64],', '100000h']
mov ['[ebp+var_68],', '10000000h']
mov ['edx,', '[ebp+var_64]']
xor ['eax,', 'eax']
mov ['[ebp+var_80],', 'edx']
mov ['[ebp+var_7C],', 'eax']
mov ['ecx,', '[ebp+var_5C]']
cmp ['ecx,', '[ebp+var_7C]']
ja ['short', 'loc_195']
jb ['short', 'loc_18A']
mov ['edx,', '[ebp+var_60]']
cmp ['edx,', '[ebp+var_80]']
jnb ['short', 'loc_195']
mov ['eax,', '[ebp+var_64]']
xor ['ecx,', 'ecx']
mov ['[ebp+var_60],', 'eax']
mov ['[ebp+var_5C],', 'ecx']
mov ['edx,', '[ebp+var_68]']
xor ['eax,', 'eax']
mov ['[ebp+var_88],', 'edx']
mov ['[ebp+var_84],', 'eax']
mov ['ecx,', '[ebp+var_5C]']
cmp ['ecx,', '[ebp+var_84]']
jb ['short', 'loc_1C9']
ja ['short', 'loc_1BE']
mov ['edx,', '[ebp+var_60]']
cmp ['edx,', '[ebp+var_88]']
jbe ['short', 'loc_1C9']
mov ['eax,', '[ebp+var_68]']
xor ['ecx,', 'ecx']
mov ['[ebp+var_60],', 'eax']
mov ['[ebp+var_5C],', 'ecx']
mov ['edx,', '[ebp+var_58]']
xor ['eax,', 'eax']
mov ['[ebp+var_90],', 'edx']
mov ['[ebp+var_8C],', 'eax']
mov ['ecx,', '[ebp+var_5C]']
cmp ['ecx,', '[ebp+var_8C]']
ja ['short', 'loc_1FD']
jb ['short', 'loc_1F2']
mov ['edx,', '[ebp+var_60]']
cmp ['edx,', '[ebp+var_90]']
jnb ['short', 'loc_1FD']
mov ['eax,', '[ebp+var_58]']
xor ['ecx,', 'ecx']
mov ['[ebp+var_60],', 'eax']
mov ['[ebp+var_5C],', 'ecx']
mov ['edx,', '[ebp+var_60]']
mov ['eax,', '[ebp+arg_0]']
mov ['[eax+38h],', 'edx']
cmp ['[ebp+var_10],', '1']
jle ['loc_2AA']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+38h]']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['edx,', '[ecx+8]']
adc ['eax,', '[ecx+0Ch]']
sub ['edx,', '1']
sbb ['eax,', '0']
mov ['[ebp+var_70],', 'edx']
mov ['[ebp+var_6C],', 'eax']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_94],', 'edx']
mov ['eax,', '[ebp+var_94]']
mov ['ecx,', '[ebp+var_6C]']
cmp ['ecx,', '[eax+0Ch]']
jb ['short', 'loc_2AA']
ja ['short', 'loc_254']
mov ['edx,', '[ebp+var_94]']
mov ['eax,', '[ebp+var_70]']
cmp ['eax,', '[edx+8]']
jbe ['short', 'loc_2AA']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+38h]']
xor ['eax,', 'eax']
push ['eax']
push ['edx']
mov ['ecx,', '[ebp+var_6C]']
push ['ecx']
mov ['edx,', '[ebp+var_70]']
push ['edx']
call ['__aulldiv']
mov ['[ebp+var_78],', 'eax']
mov ['[ebp+var_74],', 'edx']
mov ['eax,', '[ebp+var_10]']
xor ['ecx,', 'ecx']
mov ['[ebp+var_9C],', 'eax']
mov ['[ebp+var_98],', 'ecx']
mov ['edx,', '[ebp+var_74]']
cmp ['edx,', '[ebp+var_98]']
ja ['short', 'loc_2AA']
jb ['short', 'loc_29A']
mov ['eax,', '[ebp+var_78]']
cmp ['eax,', '[ebp+var_9C]']
jnb ['short', 'loc_2AA']
mov ['ecx,', '[ebp+var_78]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_8]']
imul ['edx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_10]']
mov ['[eax+3Ch],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+var_14]']
mov ['[edx+40h],', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN28']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '9Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_Lzma2Enc_Create@8 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['esi,', 'esp']
push ['0F50h']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_34B']
xor ['eax,', 'eax']
jmp ['short', 'loc_3BC']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '8']
push ['eax']
call ['_Lzma2EncProps_Init@4']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
push ['ecx']
call ['_Lzma2EncProps_Normalize@4']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+50h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+54h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+58h],', 'eax']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_391']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '20h']
jnb ['short', 'loc_3AA']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '5']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+edx+60h],', '0']
jmp ['short', 'loc_388']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '460h']
push ['ecx']
call ['_MtCoder_Construct@4']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Lzma2Enc_Destroy@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_404']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '20h']
jnb ['short', 'loc_446']
mov ['edx,', '[ebp+var_8]']
shl ['edx,', '5']
mov ['eax,', '[ebp+var_4]']
lea ['ecx,', '[eax+edx+60h]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[edx],', '0']
jz ['short', 'loc_444']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+58h]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+54h]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_LzmaEnc_Destroy@12']
mov ['eax,', '[ebp+var_C]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_3FB']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '460h']
push ['ecx']
call ['_MtCoder_Destruct@4']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+50h]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+54h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+54h]']
mov ['edx,', '[ecx+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+54h]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+54h]']
mov ['edx,', '[ecx+4]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_Lzma2Enc_SetProps@8 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '48h']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_48]']
mov ['ecx,', '12h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['esi,', '[ebp+arg_4]']
mov ['ecx,', '0Eh']
lea ['edi,', '[ebp+var_44]']
rep ['movsd']
lea ['ecx,', '[ebp+var_44]']
push ['ecx']
call ['_LzmaEncProps_Normalize@4']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '[ebp+var_30]']
cmp ['edx,', '4']
jle ['short', 'loc_4FF']
mov ['eax,', '5']
jmp ['short', 'loc_51D']
mov ['esi,', '[ebp+arg_4]']
mov ['edi,', '[ebp+var_8]']
add ['edi,', '8']
mov ['ecx,', '12h']
rep ['movsd']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '8']
push ['eax']
call ['_Lzma2EncProps_Normalize@4']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN6']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '48h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Lzma2Enc_WriteProperties@4 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
push ['ecx']
call ['_LzmaEncProps_GetDictSize@4']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_5B2']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
cmp ['[ebp+var_8],', '28h']
jnb ['short', 'loc_5D4']
mov ['eax,', '[ebp+var_8]']
and ['eax,', '1']
or ['eax,', '2']
mov ['ecx,', '[ebp+var_8]']
shr ['ecx,', '1']
add ['ecx,', '0Bh']
shl ['eax,', 'cl']
cmp ['[ebp+var_C],', 'eax']
ja ['short', 'loc_5D2']
jmp ['short', 'loc_5D4']
jmp ['short', 'loc_5A9']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
_Lzma2Enc_Encode@16 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_628']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[edx+44h]']
jge ['short', 'loc_670']
mov ['ecx,', '[ebp+var_8]']
shl ['ecx,', '5']
mov ['edx,', '[ebp+var_4]']
lea ['eax,', '[edx+ecx+60h]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[ecx],', '0']
jnz ['short', 'loc_66E']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+54h]']
push ['eax']
call ['_LzmaEnc_Create@4']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx],', 'eax']
mov ['edx,', '[ebp+var_C]']
cmp ['dword', 'ptr', '[edx],', '0']
jnz ['short', 'loc_66E']
mov ['eax,', '2']
jmp ['loc_72E']
jmp ['short', 'loc_61F']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+44h],', '1']
jg ['short', 'loc_69A']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '60h']
push ['edx']
call ['_Lzma2Enc_EncodeMt1@20']
jmp ['loc_72E']
mov ['[ebp+var_18],', 'offset', '_MtCallbackImp_Code@28']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx+474h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+46Ch],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+470h],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+54h]']
mov ['[ecx+478h],', 'eax']
mov ['ecx,', '[ebp+var_4]']
lea ['edx,', '[ebp+var_18]']
mov ['[ecx+47Ch],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+40h]']
mov ['[eax+460h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+40h]']
shr ['ecx,', '0Ah']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+40h]']
lea ['ecx,', '[eax+ecx+10h]']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+464h],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+44h]']
mov ['[eax+468h],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '460h']
push ['eax']
call ['_MtCoder_Code@4']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN11']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_Lzma2Enc_EncodeMt1@20 proc near        
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '2Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_2C]']
mov ['ecx,', '0Bh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_C],', '0']
mov ['eax,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[eax+50h],', '0']
jnz ['short', 'loc_7DD']
mov ['esi,', 'esp']
push ['10010h']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+54h]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax+54h]']
mov ['edx,', '[ecx]']
call ['edx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ecx+50h],', 'eax']
mov ['edx,', '[ebp+arg_4]']
cmp ['dword', 'ptr', '[edx+50h],', '0']
jnz ['short', 'loc_7DD']
mov ['eax,', '2']
jmp ['loc_8DB']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '8']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Lzma2EncInt_Init@8']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_7FE']
mov ['eax,', '[ebp+var_10]']
jmp ['loc_8DB']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+58h]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+54h]']
push ['edx']
push ['200000h']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_LzmaEnc_PrepareForLzma2@20']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_831']
mov ['eax,', '[ebp+var_14]']
jmp ['loc_8DB']
mov ['[ebp+var_1C],', '10010h']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx+50h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['_Lzma2EncInt_EncodeSubblock@16']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_85B']
jmp ['short', 'loc_89D']
mov ['edx,', '[ebp+var_1C]']
xor ['eax,', 'eax']
add ['edx,', '[ebp+var_8]']
adc ['eax,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'edx']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[eax+8]']
push ['edx']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
call ['_Progress@20']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_893']
jmp ['short', 'loc_89D']
cmp ['[ebp+var_1C],', '0']
jnz ['short', 'loc_89B']
jmp ['short', 'loc_89D']
jmp ['short', 'loc_831']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_LzmaEnc_Finish@4']
cmp ['[ebp+var_C],', '0']
jnz ['short', 'loc_8D8']
mov ['[ebp+var_25],', '0']
mov ['esi,', 'esp']
push ['1']
lea ['eax,', '[ebp+var_25]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '1']
jz ['short', 'loc_8D8']
mov ['eax,', '9']
jmp ['short', 'loc_8DB']
mov ['eax,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN17']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '2Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
_Lzma2EncInt_Init@8 proc near           
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '28h']
push ['edi']
lea ['edi,', '[ebp+var_28]']
mov ['ecx,', '0Ah']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_1C],', '5']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_LzmaEnc_SetProps@8']
mov ['[ebp+var_24],', 'eax']
cmp ['[ebp+var_24],', '0']
jz ['short', 'loc_974']
mov ['eax,', '[ebp+var_24]']
jmp ['short', 'loc_9C5']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
lea ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_LzmaEnc_WriteProperties@12']
mov ['[ebp+var_28],', 'eax']
cmp ['[ebp+var_28],', '0']
jz ['short', 'loc_995']
mov ['eax,', '[ebp+var_28]']
jmp ['short', 'loc_9C5']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', '[ebp+var_10]']
mov ['[edx+10h],', 'al']
mov ['ecx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[ecx+14h],', '1']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+18h],', '1']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN8']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
add ['esp,', '28h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
_Lzma2EncInt_EncodeSubblock@16 proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '5Ch']
push ['esi']
push ['edi']
lea ['edi,', '[ebp+var_5C]']
mov ['ecx,', '17h']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'edx']
mov ['[ebp+var_18],', '200000h']
mov ['eax,', '[ebp+arg_0]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax+18h],', '0']
setnz ['cl']
add ['ecx,', '5']
mov ['[ebp+var_20],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['dword', 'ptr', '[edx],', '0']
mov ['eax,', '[ebp+var_C]']
cmp ['eax,', '[ebp+var_20]']
jnb ['short', 'loc_A89']
mov ['eax,', '7']
jmp ['loc_DFF']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
call ['_LzmaEnc_SaveState@4']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
push ['10000h']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+14h]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
call ['_LzmaEnc_CodeOneMemBlock@24']
mov ['[ebp+var_28],', 'eax']
cmp ['[ebp+var_18],', '0']
jnz ['short', 'loc_AD4']
mov ['eax,', '[ebp+var_28]']
jmp ['loc_DFF']
cmp ['[ebp+var_28],', '0']
jnz ['short', 'loc_B06']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '2']
cmp ['edx,', '[ebp+var_18]']
jnb ['short', 'loc_AF7']
cmp ['[ebp+var_C],', '10000h']
ja ['short', 'loc_AF7']
mov ['[ebp+var_44],', '0']
jmp ['short', 'loc_AFE']
mov ['[ebp+var_44],', '1']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_24],', 'eax']
jmp ['short', 'loc_B22']
cmp ['[ebp+var_28],', '7']
jz ['short', 'loc_B14']
mov ['eax,', '[ebp+var_28]']
jmp ['loc_DFF']
mov ['[ebp+var_28],', '0']
mov ['[ebp+var_24],', '1']
cmp ['[ebp+var_24],', '0']
jz ['loc_C8F']
mov ['[ebp+var_2C],', '0']
cmp ['[ebp+var_18],', '0']
jbe ['loc_C7D']
cmp ['[ebp+var_18],', '10000h']
jnb ['short', 'loc_B4E']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_48],', 'ecx']
jmp ['short', 'loc_B55']
mov ['[ebp+var_48],', '10000h']
mov ['edx,', '[ebp+var_48]']
mov ['[ebp+Size],', 'edx']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[ebp+Size]']
add ['ecx,', '3']
cmp ['eax,', 'ecx']
jnb ['short', 'loc_B75']
mov ['eax,', '7']
jmp ['loc_DFF']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_4C],', 'edx']
mov ['eax,', '[ebp+var_4C]']
mov ['ecx,', '[ebp+var_4C]']
mov ['edx,', '[eax+8]']
or ['edx,', '[ecx+0Ch]']
jnz ['short', 'loc_B92']
mov ['[ebp+var_50],', '1']
jmp ['short', 'loc_B99']
mov ['[ebp+var_50],', '2']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_2C]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_50]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+Size]']
sub ['eax,', '1']
shr ['eax,', '8']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_2C]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+Size]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_2C]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '1']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_LzmaEnc_GetCurBuf@4']
sub ['eax,', '[ebp+var_18]']
push ['eax']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_2C]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_18]']
sub ['ecx,', '[ebp+Size]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
add ['edx,', '[ebp+Size]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+Size]']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['eax,', '[edx+8]']
adc ['ecx,', '[edx+0Ch]']
mov ['edx,', '[ebp+arg_0]']
mov ['[edx+8],', 'eax']
mov ['[edx+0Ch],', 'ecx']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_C70']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
add ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
call ['ecx']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '[ebp+var_2C]']
jz ['short', 'loc_C67']
mov ['eax,', '9']
jmp ['loc_DFF']
mov ['[ebp+var_2C],', '0']
jmp ['short', 'loc_C78']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[ebp+var_2C]']
mov ['[edx],', 'eax']
jmp ['loc_B33']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_LzmaEnc_RestoreState@4']
xor ['eax,', 'eax']
jmp ['loc_DFF']
mov ['[ebp+var_34],', '0']
mov ['eax,', '[ebp+var_18]']
sub ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '1']
mov ['[ebp+var_3C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_54],', 'edx']
mov ['eax,', '[ebp+var_54]']
mov ['ecx,', '[ebp+var_54]']
mov ['edx,', '[eax+8]']
or ['edx,', '[ecx+0Ch]']
jnz ['short', 'loc_CC5']
mov ['[ebp+var_58],', '3']
jmp ['short', 'loc_CEF']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jz ['short', 'loc_CE2']
mov ['ecx,', '[ebp+arg_0]']
xor ['edx,', 'edx']
cmp ['dword', 'ptr', '[ecx+18h],', '0']
setnz ['dl']
add ['edx,', '1']
mov ['[ebp+var_5C],', 'edx']
jmp ['short', 'loc_CE9']
mov ['[ebp+var_5C],', '0']
mov ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_58],', 'eax']
mov ['ecx,', '[ebp+var_58]']
mov ['[ebp+var_40],', 'ecx']
mov ['edx,', '[ebp+var_40]']
shl ['edx,', '5']
or ['edx,', '80h']
mov ['eax,', '[ebp+var_38]']
shr ['eax,', '10h']
and ['eax,', '1Fh']
or ['edx,', 'eax']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_34]']
mov ['[ecx],', 'dl']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '1']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+var_38]']
shr ['eax,', '8']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_34]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '1']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_34]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_38]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '1']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+var_3C]']
shr ['eax,', '8']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_34]']
mov ['[ecx],', 'al']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '1']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_34]']
mov ['cl,', 'byte', 'ptr', '[ebp+var_3C]']
mov ['[eax],', 'cl']
mov ['edx,', '[ebp+var_34]']
add ['edx,', '1']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_D93']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '[ebp+var_34]']
mov ['edx,', '[ebp+arg_0]']
mov ['al,', '[edx+10h]']
mov ['[ecx],', 'al']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '1']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[edx+18h],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+var_34]']
add ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_34],', 'ecx']
mov ['edx,', '[ebp+var_18]']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['edx,', '[ecx+8]']
adc ['eax,', '[ecx+0Ch]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'edx']
mov ['[ecx+0Ch],', 'eax']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_DF5']
mov ['esi,', 'esp']
mov ['edx,', '[ebp+var_34]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
cmp ['eax,', '[ebp+var_34]']
jz ['short', 'loc_DF5']
mov ['eax,', '9']
jmp ['short', 'loc_DFF']
mov ['ecx,', '[ebp+arg_8]']
mov ['edx,', '[ebp+var_34]']
mov ['[ecx],', 'edx']
xor ['eax,', 'eax']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN31']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
pop ['esi']
add ['esp,', '5Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
_Progress@20    proc near               
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_EA3']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
call ['eax']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_EA3']
mov ['[ebp+var_4],', '0Ah']
jmp ['short', 'loc_EAA']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
_MtCallbackImp_Code@28 proc near        
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
push ['edi']
lea ['edi,', '[ebp+var_34]']
mov ['ecx,', '0Dh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
shl ['eax,', '5']
mov ['ecx,', '[ebp+var_8]']
lea ['edx,', '[ecx+eax+60h]']
mov ['[ebp+var_C],', 'edx']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['dword', 'ptr', '[edx],', '0']
cmp ['[ebp+arg_14],', '0']
jz ['loc_1038']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '8']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_Lzma2EncInt_Init@8']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_F38']
mov ['eax,', '[ebp+var_18]']
jmp ['loc_106B']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+58h]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+54h]']
push ['edx']
push ['200000h']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
push ['eax']
call ['_LzmaEnc_MemPrepare@24']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_F6F']
mov ['eax,', '[ebp+var_1C]']
jmp ['loc_106B']
mov ['ecx,', '[ebp+arg_14]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_34],', 'ecx']
mov ['[ebp+var_30],', 'edx']
mov ['ecx,', '[ebp+var_2C]']
mov ['edx,', '[ecx+0Ch]']
cmp ['edx,', '[ebp+var_30]']
ja ['loc_1022']
jb ['short', 'loc_FA0']
mov ['eax,', '[ebp+var_2C]']
mov ['ecx,', '[eax+8]']
cmp ['ecx,', '[ebp+var_34]']
jnb ['loc_1022']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '[edx]']
mov ['[ebp+var_24],', 'eax']
push ['0']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['_Lzma2EncInt_EncodeSubblock@16']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_FCE']
jmp ['short', 'loc_1022']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
add ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
cmp ['[ebp+var_24],', '0']
jnz ['short', 'loc_FEA']
mov ['[ebp+var_10],', '0Bh']
jmp ['short', 'loc_1022']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
xor ['ecx,', 'ecx']
push ['ecx']
push ['eax']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[edx+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '4A0h']
push ['eax']
call ['_MtProgress_Set@24']
test ['eax,', 'eax']
jz ['short', 'loc_101D']
mov ['[ebp+var_10],', '0Ah']
jmp ['short', 'loc_1022']
jmp ['loc_F6F']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
push ['edx']
call ['_LzmaEnc_Finish@4']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_1038']
mov ['eax,', '[ebp+var_10]']
jmp ['short', 'loc_106B']
cmp ['[ebp+arg_18],', '0']
jz ['short', 'loc_1068']
mov ['eax,', '[ebp+arg_C]']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+var_14]']
jnz ['short', 'loc_104F']
mov ['eax,', '7']
jmp ['short', 'loc_106B']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_8]']
mov ['byte', 'ptr', '[ecx+eax],', '0']
mov ['edx,', '[ebp+arg_C]']
mov ['eax,', '[edx]']
add ['eax,', '1']
mov ['ecx,', '[ebp+arg_C]']
mov ['[ecx],', 'eax']
mov ['eax,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN17_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['edi']
add ['esp,', '34h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
