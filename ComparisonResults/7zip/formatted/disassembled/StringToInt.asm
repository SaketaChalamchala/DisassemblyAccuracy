?ConvertStringToUInt32@@YGIPBDPAPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_29']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_3B']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax]']
mov ['byte', 'ptr', '[ebp+var_8+3],', 'cl']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_8+3]']
cmp ['edx,', '30h']
jl ['short', 'loc_55']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_8+3]']
cmp ['eax,', '39h']
jle ['short', 'loc_68']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_63']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_A2']
cmp ['[ebp+var_4],', '19999999h']
jbe ['short', 'loc_75']
xor ['eax,', 'eax']
jmp ['short', 'loc_A2']
mov ['eax,', '[ebp+var_4]']
imul ['eax,', '0Ah']
mov ['[ebp+var_4],', 'eax']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_8+3]']
sub ['ecx,', '30h']
mov ['[ebp+var_C],', 'ecx']
or ['edx,', '0FFFFFFFFh']
sub ['edx,', '[ebp+var_C]']
cmp ['[ebp+var_4],', 'edx']
jbe ['short', 'loc_97']
xor ['eax,', 'eax']
jmp ['short', 'loc_A2']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_32']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_D9']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_EB']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['word', 'ptr', '[ebp+var_8],', 'cx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_8]']
cmp ['edx,', '30h']
jl ['short', 'loc_107']
movzx ['eax,', 'word', 'ptr', '[ebp+var_8]']
cmp ['eax,', '39h']
jle ['short', 'loc_11A']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_115']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_154']
cmp ['[ebp+var_4],', '19999999h']
jbe ['short', 'loc_127']
xor ['eax,', 'eax']
jmp ['short', 'loc_154']
mov ['eax,', '[ebp+var_4]']
imul ['eax,', '0Ah']
mov ['[ebp+var_4],', 'eax']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_8]']
sub ['ecx,', '30h']
mov ['[ebp+var_C],', 'ecx']
or ['edx,', '0FFFFFFFFh']
sub ['edx,', '[ebp+var_C]']
cmp ['[ebp+var_4],', 'edx']
jbe ['short', 'loc_149']
xor ['eax,', 'eax']
jmp ['short', 'loc_154']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_E2']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?ConvertStringToUInt64@@YG_KPBDPAPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_18B']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_1A4']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[eax]']
mov ['byte', 'ptr', '[ebp+var_C+3],', 'cl']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_C+3]']
cmp ['edx,', '30h']
jl ['short', 'loc_1BE']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_C+3]']
cmp ['eax,', '39h']
jle ['short', 'loc_1D7']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_1CC']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
jmp ['loc_257']
cmp ['[ebp+var_4],', '19999999h']
jb ['short', 'loc_1F1']
ja ['short', 'loc_1EB']
cmp ['[ebp+var_8],', '99999999h']
jbe ['short', 'loc_1F1']
xor ['eax,', 'eax']
xor ['edx,', 'edx']
jmp ['short', 'loc_257']
push ['0']
push ['0Ah']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['__allmul']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'edx']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_C+3]']
sub ['edx,', '30h']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
xor ['ecx,', 'ecx']
or ['edx,', '0FFFFFFFFh']
sub ['edx,', 'eax']
mov ['eax,', '0FFFFFFFFh']
sbb ['eax,', 'ecx']
mov ['[ebp+var_18],', 'edx']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+var_14]']
jb ['short', 'loc_241']
ja ['short', 'loc_23B']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_18]']
jbe ['short', 'loc_241']
xor ['eax,', 'eax']
xor ['edx,', 'edx']
jmp ['short', 'loc_257']
mov ['eax,', '[ebp+var_10]']
xor ['ecx,', 'ecx']
add ['eax,', '[ebp+var_8]']
adc ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'ecx']
jmp ['loc_19B']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?ConvertStringToUInt64@@YG_KPB_WPAPB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_29B']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_2B4']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
mov ['cx,', '[eax]']
mov ['word', 'ptr', '[ebp+var_C],', 'cx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_C]']
cmp ['edx,', '30h']
jl ['short', 'loc_2D0']
movzx ['eax,', 'word', 'ptr', '[ebp+var_C]']
cmp ['eax,', '39h']
jle ['short', 'loc_2E9']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_2DE']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
jmp ['loc_369']
cmp ['[ebp+var_4],', '19999999h']
jb ['short', 'loc_303']
ja ['short', 'loc_2FD']
cmp ['[ebp+var_8],', '99999999h']
jbe ['short', 'loc_303']
xor ['eax,', 'eax']
xor ['edx,', 'edx']
jmp ['short', 'loc_369']
push ['0']
push ['0Ah']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['__allmul']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'edx']
movzx ['edx,', 'word', 'ptr', '[ebp+var_C]']
sub ['edx,', '30h']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
xor ['ecx,', 'ecx']
or ['edx,', '0FFFFFFFFh']
sub ['edx,', 'eax']
mov ['eax,', '0FFFFFFFFh']
sbb ['eax,', 'ecx']
mov ['[ebp+var_18],', 'edx']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+var_14]']
jb ['short', 'loc_353']
ja ['short', 'loc_34D']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ebp+var_18]']
jbe ['short', 'loc_353']
xor ['eax,', 'eax']
xor ['edx,', 'edx']
jmp ['short', 'loc_369']
mov ['eax,', '[ebp+var_10]']
xor ['ecx,', 'ecx']
add ['eax,', '[ebp+var_8]']
adc ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'ecx']
jmp ['loc_2AB']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?ConvertStringToInt32@@YGHPB_WPAPB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_3A8']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '2Dh']
jnz ['short', 'loc_3C2']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '2']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_3D0']
xor ['eax,', 'eax']
jmp ['short', 'loc_42B']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?ConvertStringToUInt32@@YGIPB_WPAPB_W@Z']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
cmp ['edx,', '2Dh']
jnz ['short', 'loc_3FA']
cmp ['[ebp+var_14],', '80000000h']
jbe ['short', 'loc_3F8']
xor ['eax,', 'eax']
jmp ['short', 'loc_42B']
jmp ['short', 'loc_408']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '80000000h']
jz ['short', 'loc_408']
xor ['eax,', 'eax']
jmp ['short', 'loc_42B']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_416']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+var_C]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['ecx,', '2Dh']
jnz ['short', 'loc_428']
mov ['eax,', '[ebp+var_14]']
neg ['eax']
jmp ['short', 'loc_42B']
mov ['eax,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN14']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?ConvertOctStringToUInt32@@YGIPBDPAPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_492']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_4A4']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '30h']
jb ['short', 'loc_4B9']
cmp ['[ebp+var_8],', '37h']
jbe ['short', 'loc_4CC']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_4C7']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_4F2']
mov ['ecx,', '[ebp+var_4]']
and ['ecx,', '0E0000000h']
jz ['short', 'loc_4DB']
xor ['eax,', 'eax']
jmp ['short', 'loc_4F2']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '3']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '30h']
or ['eax,', '[ebp+var_4]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_49B']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?ConvertOctStringToUInt64@@YG_KPBDPAPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_528']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_541']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '30h']
jb ['short', 'loc_556']
cmp ['[ebp+var_C],', '37h']
jbe ['short', 'loc_56C']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_564']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
jmp ['short', 'loc_5B8']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '0']
mov ['edx,', '[ebp+var_4]']
and ['edx,', '0E0000000h']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_14]']
or ['eax,', '[ebp+var_10]']
jz ['short', 'loc_58F']
xor ['eax,', 'eax']
xor ['edx,', 'edx']
jmp ['short', 'loc_5B8']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
mov ['cl,', '3']
call ['__allshl']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'edx']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '30h']
xor ['edx,', 'edx']
or ['ecx,', '[ebp+var_8]']
or ['edx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_538']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?ConvertHexStringToUInt32@@YGIPBDPAPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_5F9']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_60B']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '30h']
jb ['short', 'loc_62B']
cmp ['[ebp+var_8],', '39h']
ja ['short', 'loc_62B']
mov ['edx,', '[ebp+var_8]']
sub ['edx,', '30h']
mov ['[ebp+var_C],', 'edx']
jmp ['short', 'loc_66C']
cmp ['[ebp+var_8],', '41h']
jb ['short', 'loc_642']
cmp ['[ebp+var_8],', '46h']
ja ['short', 'loc_642']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '37h']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_66C']
cmp ['[ebp+var_8],', '61h']
jb ['short', 'loc_659']
cmp ['[ebp+var_8],', '66h']
ja ['short', 'loc_659']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '57h']
mov ['[ebp+var_C],', 'ecx']
jmp ['short', 'loc_66C']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_667']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_692']
mov ['ecx,', '[ebp+var_4]']
and ['ecx,', '0F0000000h']
jz ['short', 'loc_67B']
xor ['eax,', 'eax']
jmp ['short', 'loc_692']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '4']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
or ['eax,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'eax']
jmp ['loc_602']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?ConvertHexStringToUInt64@@YG_KPBDPAPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_6CB']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['[ebp+var_8],', '0']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_6E4']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '1']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '30h']
jb ['short', 'loc_704']
cmp ['[ebp+var_C],', '39h']
ja ['short', 'loc_704']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '30h']
mov ['[ebp+var_10],', 'edx']
jmp ['short', 'loc_748']
cmp ['[ebp+var_C],', '41h']
jb ['short', 'loc_71B']
cmp ['[ebp+var_C],', '46h']
ja ['short', 'loc_71B']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', '37h']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_748']
cmp ['[ebp+var_C],', '61h']
jb ['short', 'loc_732']
cmp ['[ebp+var_C],', '66h']
ja ['short', 'loc_732']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '57h']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_748']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_740']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
mov ['[edx],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
jmp ['short', 'loc_794']
mov ['ecx,', '[ebp+var_8]']
and ['ecx,', '0']
mov ['edx,', '[ebp+var_4]']
and ['edx,', '0F0000000h']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_18]']
or ['eax,', '[ebp+var_14]']
jz ['short', 'loc_76B']
xor ['eax,', 'eax']
xor ['edx,', 'edx']
jmp ['short', 'loc_794']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
mov ['cl,', '4']
call ['__allshl']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'edx']
mov ['ecx,', '[ebp+var_10]']
xor ['edx,', 'edx']
or ['ecx,', '[ebp+var_8]']
or ['edx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_4],', 'edx']
jmp ['loc_6DB']
add ['esp,', '18h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
