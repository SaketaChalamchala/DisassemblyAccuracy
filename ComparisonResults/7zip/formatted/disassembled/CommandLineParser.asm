?SplitCommandLine@NCommandLineParser@@YG_NABVUString@@AAV2@1@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['ecx,', '[ebp+arg_4]']
call ['?Empty@UString@@QAEXXZ']
mov ['ecx,', '[ebp+arg_8]']
call ['?Empty@UString@@QAEXXZ']
mov ['byte', 'ptr', '[ebp+var_4+3],', '0']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_D9']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+this]']
call ['?Len@UString@@QBEIXZ']
cmp ['[ebp+var_8],', 'eax']
jnb ['short', 'loc_161']
mov ['ecx,', '[ebp+this]']
call ['??BUString@@QBEPB_WXZ']
mov ['ecx,', '[ebp+var_8]']
mov ['dx,', '[eax+ecx*2]']
mov ['word', 'ptr', '[ebp+var_C],', 'dx']
movzx ['eax,', 'word', 'ptr', '[ebp+var_C]']
cmp ['eax,', '20h']
jz ['short', 'loc_10B']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_C]']
cmp ['ecx,', '9']
jnz ['short', 'loc_136']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
test ['edx,', 'edx']
jnz ['short', 'loc_136']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+this]']
call ['?Ptr@UString@@QBEPB_WI@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
call ['??4UString@@QAEAAV0@PB_W@Z']
xor ['eax,', 'eax']
cmp ['[ebp+var_8],', '0']
setnz ['al']
jmp ['short', 'loc_16A']
movzx ['ecx,', 'word', 'ptr', '[ebp+var_C]']
cmp ['ecx,', '22h']
jnz ['short', 'loc_14F']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
neg ['edx']
sbb ['edx,', 'edx']
add ['edx,', '1']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'dl']
jmp ['short', 'loc_15C']
movzx ['eax,', 'word', 'ptr', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['??YUString@@QAEAAV0@_W@Z']
jmp ['loc_D0']
xor ['eax,', 'eax']
cmp ['[ebp+var_8],', '0']
setnz ['al']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '3Ch']
push ['edi']
lea ['edi,', '[ebp+var_48]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
call ['??0UString@@QAE@ABV0@@Z']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_1C]']
call ['?Trim@UString@@QAEXXZ']
mov ['ecx,', '[ebp+arg_4]']
call ['?Clear@?$CObjectVector@VUString@@@@QAEXXZ']
lea ['ecx,', '[ebp+var_30]']
call ['??0UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_44]']
call ['??0UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_44]']
push ['ecx']
lea ['edx,', '[ebp+var_30]']
push ['edx']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
call ['?SplitCommandLine@NCommandLineParser@@YG_NABVUString@@AAV2@1@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_21C']
lea ['edx,', '[ebp+var_30]']
push ['edx']
mov ['ecx,', '[ebp+arg_4]']
call ['?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z']
lea ['ecx,', '[ebp+var_44]']
call ['?IsEmpty@UString@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_245']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_44]']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_30]']
call ['??1UString@@QAE@XZ']
jmp ['short', 'loc_26E']
lea ['ecx,', '[ebp+var_44]']
push ['ecx']
lea ['ecx,', '[ebp+var_1C]']
call ['??4UString@@QAEAAV0@ABV0@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_44]']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_30]']
call ['??1UString@@QAE@XZ']
jmp ['loc_1E0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1UString@@QAE@XZ']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN15']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
add ['esp,', '48h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??0CParser@NCommandLineParser@@QAE@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0CParser@NCommandLineParser@@QAE@I@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??0?$CObjectVector@VUString@@@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??0AString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '20h']
call ['??0UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['edx,', '14h']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
xor ['eax,', 'eax']
add ['ecx,', '4']
setb ['al']
neg ['eax']
or ['eax,', 'ecx']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_1C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_3D0']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+var_14]']
mov ['[ecx],', 'edx']
push ['offset', '??1CSwitchResult@NCommandLineParser@@QAE@XZ']
push ['offset', '??0CSwitchResult@NCommandLineParser@@QAE@XZ']
mov ['eax,', '[ebp+var_14]']
push ['eax']
push ['14h']
mov ['ecx,', '[ebp+var_1C]']
add ['ecx,', '4']
push ['ecx']
call ['??_L@YGXPAXIHP6EX0@Z1@Z']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '4']
mov ['[ebp+var_20],', 'edx']
jmp ['short', 'loc_3D7']
mov ['[ebp+var_20],', '0']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_18],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_18]']
mov ['[ecx+4],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1CParser@NCommandLineParser@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1CParser@NCommandLineParser@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '2']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_14],', 'edx']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_47C']
push ['3']
mov ['ecx,', '[ebp+var_14]']
call ['??_ECSwitchResult@NCommandLineParser@@QAEPAXI@Z']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_483']
mov ['[ebp+var_1C],', '0']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '20h']
call ['??1UString@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??1AString@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '8']
call ['??1?$CObjectVector@VUString@@@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '3Ch']
push ['esi']
push ['edi']
push ['ecx']
lea ['edi,', '[ebp+var_48]']
mov ['ecx,', '0Fh']
mov ['eax,', '0CCCCCCCCh']
rep ['stosd']
pop ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?IsEmpty@UString@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jnz ['short', 'loc_53A']
mov ['ecx,', '[ebp+arg_0]']
call ['??BUString@@QBEPB_WXZ']
movzx ['ecx,', 'word', 'ptr', '[eax]']
push ['ecx']
call ['?IsItSwitchChar@NCommandLineParser@@YG_N_W@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_541']
xor ['al,', 'al']
jmp ['loc_7BF']
mov ['[ebp+var_14],', '1']
mov ['[ebp+var_18],', '0']
mov ['[ebp+var_1C],', '0FFFFFFFFh']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_568']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_20]']
cmp ['edx,', '[ecx]']
jnb ['short', 'loc_5D6']
mov ['eax,', '[ebp+var_20]']
imul ['eax,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx+eax]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_24]']
push ['eax']
call ['?MyStringLen@@YGIPBD@Z']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
cmp ['ecx,', '[ebp+var_1C]']
jle ['short', 'loc_5A7']
mov ['esi,', '[ebp+var_14]']
add ['esi,', '[ebp+var_28]']
mov ['ecx,', '[ebp+arg_0]']
call ['?Len@UString@@QBEIXZ']
cmp ['esi,', 'eax']
jbe ['short', 'loc_5A9']
jmp ['short', 'loc_55F']
mov ['edx,', '[ebp+var_24]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??BUString@@QBEPB_WXZ']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[eax+ecx*2]']
push ['edx']
call ['?IsString1PrefixedByString2_NoCase@@YG_NPB_WPBD@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_5D4']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+var_28]']
mov ['[ebp+var_1C],', 'edx']
jmp ['short', 'loc_55F']
cmp ['[ebp+var_1C],', '0']
jge ['short', 'loc_5F3']
push ['offset', '$SG67279']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??4AString@@QAEAAV0@PBD@Z']
xor ['al,', 'al']
jmp ['loc_7BF']
mov ['eax,', '[ebp+var_14]']
add ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_18]']
imul ['ecx,', '14h']
mov ['edx,', '[ebp+var_10]']
add ['ecx,', '[edx+4]']
mov ['[ebp+var_2C],', 'ecx']
mov ['eax,', '[ebp+var_18]']
imul ['eax,', '0Ch']
add ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
movzx ['edx,', 'byte', 'ptr', '[ecx+5]']
test ['edx,', 'edx']
jnz ['short', 'loc_643']
mov ['eax,', '[ebp+var_2C]']
movzx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_643']
push ['offset', '$SG67283']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??4AString@@QAEAAV0@PBD@Z']
xor ['al,', 'al']
jmp ['loc_7BF']
mov ['edx,', '[ebp+var_2C]']
mov ['byte', 'ptr', '[edx],', '1']
mov ['ecx,', '[ebp+arg_0]']
call ['?Len@UString@@QBEIXZ']
sub ['eax,', '[ebp+var_14]']
mov ['[ebp+var_34],', 'eax']
mov ['eax,', '[ebp+var_30]']
movzx ['ecx,', 'byte', 'ptr', '[eax+6]']
cmp ['[ebp+var_34],', 'ecx']
jge ['short', 'loc_67A']
push ['offset', '$SG67286']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??4AString@@QAEAAV0@PBD@Z']
xor ['al,', 'al']
jmp ['loc_7BF']
mov ['edx,', '[ebp+var_2C]']
mov ['byte', 'ptr', '[edx+1],', '0']
mov ['eax,', '[ebp+var_2C]']
mov ['dword', 'ptr', '[eax+4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_30]']
mov ['dl,', '[ecx+4]']
mov ['[ebp+var_48],', 'dl']
cmp ['[ebp+var_48],', '1']
jz ['short', 'loc_6AF']
cmp ['[ebp+var_48],', '2']
jz ['loc_75C']
cmp ['[ebp+var_48],', '3']
jz ['short', 'loc_700']
jmp ['loc_79C']
cmp ['[ebp+var_34],', '1']
jnz ['short', 'loc_6FB']
mov ['ecx,', '[ebp+arg_0]']
call ['??BUString@@QBEPB_WXZ']
mov ['ecx,', '[ebp+var_14]']
movzx ['edx,', 'word', 'ptr', '[eax+ecx*2]']
xor ['eax,', 'eax']
cmp ['edx,', '2Dh']
setz ['al']
mov ['ecx,', '[ebp+var_2C]']
mov ['[ecx+1],', 'al']
mov ['edx,', '[ebp+var_2C]']
movzx ['eax,', 'byte', 'ptr', '[edx+1]']
test ['eax,', 'eax']
jz ['short', 'loc_6E4']
mov ['al,', '1']
jmp ['loc_7BF']
push ['offset', '$SG67294']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??4AString@@QAEAAV0@PBD@Z']
xor ['al,', 'al']
jmp ['loc_7BF']
jmp ['loc_79C']
cmp ['[ebp+var_34],', '1']
jnz ['short', 'loc_75A']
mov ['ecx,', '[ebp+arg_0]']
call ['??BUString@@QBEPB_WXZ']
mov ['ecx,', '[ebp+var_14]']
mov ['dx,', '[eax+ecx*2]']
mov ['[ebp+var_38],', 'dx']
movzx ['eax,', '[ebp+var_38]']
cmp ['eax,', '7Fh']
jg ['short', 'loc_746']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_38]']
push ['ecx']
mov ['edx,', '[ebp+var_30]']
mov ['eax,', '[edx+8]']
push ['eax']
call ['?FindCharPosInString@@YGHPBDD@Z']
mov ['ecx,', '[ebp+var_2C]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_2C]']
cmp ['dword', 'ptr', '[edx+4],', '0']
jl ['short', 'loc_746']
mov ['al,', '1']
jmp ['short', 'loc_7BF']
push ['offset', '$SG67301']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??4AString@@QAEAAV0@PBD@Z']
xor ['al,', 'al']
jmp ['short', 'loc_7BF']
jmp ['short', 'loc_79C']
mov ['ecx,', '[ebp+arg_0]']
call ['??BUString@@QBEPB_WXZ']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[eax+ecx*2]']
push ['edx']
lea ['ecx,', '[ebp+var_44]']
call ['??0UString@@QAE@PB_W@Z']
mov ['[ebp+var_4],', '0']
lea ['eax,', '[ebp+var_44]']
push ['eax']
mov ['ecx,', '[ebp+var_2C]']
add ['ecx,', '8']
call ['?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_44]']
call ['??1UString@@QAE@XZ']
mov ['al,', '1']
jmp ['short', 'loc_7BF']
mov ['ecx,', '[ebp+arg_0]']
call ['?Len@UString@@QBEIXZ']
cmp ['[ebp+var_14],', 'eax']
jz ['short', 'loc_7BD']
push ['offset', '$SG67306']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '14h']
call ['??4AString@@QAEAAV0@PBD@Z']
xor ['al,', 'al']
jmp ['short', 'loc_7BF']
mov ['al,', '1']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
add ['esp,', '48h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?IsString1PrefixedByString2_NoCase@@YG_NPB_WPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['eax,', '[ebp+arg_4]']
mov ['cl,', '[eax]']
mov ['byte', 'ptr', '[ebp+var_4+3],', 'cl']
movsx ['edx,', 'byte', 'ptr', '[ebp+var_4+3]']
test ['edx,', 'edx']
jnz ['short', 'loc_808']
mov ['al,', '1']
jmp ['short', 'loc_840']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_4+3]']
push ['eax']
call ['?MyCharLower_Ascii@@YGDD@Z']
movzx ['esi,', 'al']
mov ['ecx,', '[ebp+arg_0]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
push ['edx']
call ['?MyCharLower_Ascii@@YG_W_W@Z']
movzx ['eax,', 'ax']
cmp ['esi,', 'eax']
jz ['short', 'loc_82C']
xor ['al,', 'al']
jmp ['short', 'loc_840']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '2']
mov ['[ebp+arg_0],', 'edx']
jmp ['short', 'loc_7F4']
pop ['esi']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?IsItSwitchChar@NCommandLineParser@@YG_N_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
movzx ['eax,', '[ebp+arg_0]']
xor ['ecx,', 'ecx']
cmp ['eax,', '2Dh']
setz ['cl']
mov ['al,', 'cl']
pop ['ebp']
retn ['4']
endp
?ParseStrings@CParser@NCommandLineParser@@QAE_NPBUCSwitchForm@2@ABV?$CObjectVector@VUString@@@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '20h']
call ['?Empty@UString@@QAEXXZ']
mov ['byte', 'ptr', '[ebp+var_8+3],', '0']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_8B3']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
call ['?Size@?$CObjectVector@VUString@@@@QBEIXZ']
cmp ['[ebp+var_C],', 'eax']
jnb ['loc_960']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z']
mov ['[ebp+var_10],', 'eax']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_8+3]']
test ['edx,', 'edx']
jnz ['short', 'loc_94C']
mov ['eax,', 'ds:_kStopSwitchParsing']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?IsEqualTo@UString@@QBE_NPBD@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_8F6']
mov ['byte', 'ptr', '[ebp+var_8+3],', '1']
jmp ['short', 'loc_8AA']
mov ['ecx,', '[ebp+var_10]']
call ['?IsEmpty@UString@@QBE_NXZ']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_94C']
mov ['ecx,', '[ebp+var_10]']
call ['??BUString@@QBEPB_WXZ']
movzx ['eax,', 'word', 'ptr', '[eax]']
push ['eax']
call ['?IsItSwitchChar@NCommandLineParser@@YG_N_W@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_94C']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_939']
jmp ['loc_8AA']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '20h']
call ['??4UString@@QAEAAV0@ABV0@@Z']
xor ['al,', 'al']
jmp ['short', 'loc_962']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z']
jmp ['loc_8AA']
mov ['al,', '1']
add ['esp,', '10h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?Len@UString@@QBEIXZ proc near          
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Empty@UString@@QAEXXZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
xor ['eax,', 'eax']
mov ['[edx],', 'ax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??BUString@@QBEPB_WXZ proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Ptr@UString@@QBEPB_WI@Z proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*2]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??YUString@@QAEAAV0@_W@Z proc near      
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+4]']
jnz ['short', 'loc_A28']
mov ['ecx,', '[ebp+var_4]']
call ['?Grow_1@UString@@AAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_C]']
mov ['ax,', '[ebp+arg_0]']
mov ['[edx+ecx*2],', 'ax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_C]']
mov ['[ecx+eax*2],', 'dx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z$0 proc near
lea ['ecx,', '[ebp-1Ch]']
jmp ['??1UString@@QAE@XZ']
endp
__unwindfunclet$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z$1 proc near
lea ['ecx,', '[ebp-30h]']
jmp ['??1UString@@QAE@XZ']
endp
__unwindfunclet$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z$2 proc near
lea ['ecx,', '[ebp-44h]']
jmp ['??1UString@@QAE@XZ']
endp
__ehhandler$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-44h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?SplitCommandLine@NCommandLineParser@@YGXABVUString@@AAV?$CObjectVector@VUString@@@@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$??0CParser@NCommandLineParser@@QAE@I@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '8']
jmp ['??1?$CObjectVector@VUString@@@@QAE@XZ']
endp
__unwindfunclet$??0CParser@NCommandLineParser@@QAE@I@Z$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '14h']
jmp ['??1AString@@QAE@XZ']
endp
__unwindfunclet$??0CParser@NCommandLineParser@@QAE@I@Z$2 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '20h']
jmp ['??1UString@@QAE@XZ']
endp
__unwindfunclet$??0CParser@NCommandLineParser@@QAE@I@Z$3 proc near
mov ['eax,', '[ebp-1Ch]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__ehhandler$??0CParser@NCommandLineParser@@QAE@I@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0CParser@NCommandLineParser@@QAE@I@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$??1CParser@NCommandLineParser@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '8']
jmp ['??1?$CObjectVector@VUString@@@@QAE@XZ']
endp
__unwindfunclet$??1CParser@NCommandLineParser@@QAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '14h']
jmp ['??1AString@@QAE@XZ']
endp
__unwindfunclet$??1CParser@NCommandLineParser@@QAE@XZ$2 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '20h']
jmp ['??1UString@@QAE@XZ']
endp
__ehhandler$??1CParser@NCommandLineParser@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1CParser@NCommandLineParser@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z$0 proc near
lea ['ecx,', '[ebp-44h]']
jmp ['??1UString@@QAE@XZ']
endp
__ehhandler$?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-48h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?ParseString@CParser@NCommandLineParser@@AAE_NABVUString@@PBUCSwitchForm@2@@Z']
jmp ['___CxxFrameHandler3']
endp
??1UString@@QAE@XZ proc near            
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?IsEmpty@UString@@QBE_NXZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax+4],', '0']
setz ['cl']
mov ['al,', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Trim@UString@@QAEXXZ proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?TrimRight@UString@@QAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['?TrimLeft@UString@@QAEXXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1AString@@QAE@XZ proc near            
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0CSwitchResult@NCommandLineParser@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??0?$CObjectVector@VUString@@@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??_ECSwitchResult@NCommandLineParser@@QAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '2']
jz ['short', 'loc_D7C']
push ['offset', '??1CSwitchResult@NCommandLineParser@@QAE@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx-4]']
push ['edx']
push ['14h']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['??_M@YGXPAXIHP6EX0@Z@Z']
mov ['ecx,', '[ebp+arg_0]']
and ['ecx,', '1']
jz ['short', 'loc_D74']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', '4']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '4']
jmp ['short', 'loc_D9B']
mov ['ecx,', '[ebp+var_4]']
call ['??1CSwitchResult@NCommandLineParser@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_D98']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1CSwitchResult@NCommandLineParser@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8']
call ['??1?$CObjectVector@VUString@@@@QAE@XZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?MyStringLen@@YGIPBD@Z proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_DF1']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '[ebp+var_4]']
movsx ['edx,', 'byte', 'ptr', '[ecx]']
test ['edx,', 'edx']
jz ['short', 'loc_E00']
jmp ['short', 'loc_DE8']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?MyCharLower_Ascii@@YGDD@Z proc near    
push ['ebp']
mov ['ebp,', 'esp']
movsx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '41h']
jl ['short', 'loc_E2A']
movsx ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '5Ah']
jg ['short', 'loc_E2A']
movzx ['eax,', '[ebp+arg_0]']
add ['eax,', '20h']
jmp ['short', 'loc_E2D']
mov ['al,', '[ebp+arg_0]']
pop ['ebp']
retn ['4']
endp
?MyCharLower_Ascii@@YG_W_W@Z proc near  
push ['ebp']
mov ['ebp,', 'esp']
movzx ['eax,', '[ebp+arg_0]']
cmp ['eax,', '41h']
jl ['short', 'loc_E52']
movzx ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '5Ah']
jg ['short', 'loc_E52']
movzx ['eax,', '[ebp+arg_0]']
add ['eax,', '20h']
jmp ['short', 'loc_E56']
mov ['ax,', '[ebp+arg_0]']
pop ['ebp']
retn ['4']
endp
?IsEqualTo@UString@@QBE_NPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['?StringsAreEqual_Ascii@@YG_NPB_WPBD@Z']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Size@?$CObjectVector@VUString@@@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$CObjectVector@VUString@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$CRecordVector@PAX@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??A?$CObjectVector@VUString@@@@QBEABVUString@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CRecordVector@PAX@@QBEABQAXI@Z']
mov ['eax,', '[eax]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['0Ch']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_F68']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
call ['??0UString@@QAE@ABV0@@Z']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_F6F']
mov ['[ebp+var_1C],', '0']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?Add@?$CRecordVector@PAX@@QAEIQAX@Z']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '1Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z$0 proc near
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__ehhandler$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?Add@?$CObjectVector@VUString@@@@QAEIABVUString@@@Z']
jmp ['___CxxFrameHandler3']
endp
??1?$CObjectVector@VUString@@@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_108A']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??A?$CRecordVector@PAX@@QAEAAPAXI@Z']
mov ['edx,', '[eax]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_1081']
push ['1']
mov ['ecx,', '[ebp+var_18]']
call ['??_GUString@@QAEPAXI@Z']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_1088']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_1046']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$CRecordVector@PAX@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$CObjectVector@VUString@@@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$CRecordVector@PAX@@QAE@XZ']
endp
__ehhandler$??1?$CObjectVector@VUString@@@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$CObjectVector@VUString@@@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
?Clear@?$CObjectVector@VUString@@@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?Size@?$CRecordVector@PAX@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_1170']
mov ['eax,', '[ebp+var_8]']
sub ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??A?$CRecordVector@PAX@@QAEAAPAXI@Z']
mov ['edx,', '[eax]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_1167']
push ['1']
mov ['ecx,', '[ebp+var_C]']
call ['??_GUString@@QAEPAXI@Z']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_116E']
mov ['[ebp+var_14],', '0']
jmp ['short', 'loc_112C']
mov ['ecx,', '[ebp+var_4]']
call ['?Clear@?$CRecordVector@PAX@@QAEXXZ']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??_GUString@@QAEPAXI@Z proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1UString@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_11B2']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0?$CRecordVector@PAX@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Size@?$CRecordVector@PAX@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1?$CRecordVector@PAX@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Clear@?$CRecordVector@PAX@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Add@?$CRecordVector@PAX@@QAEIQAX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['edx,', '[ebp+arg_0]']
mov ['[eax+ecx*4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
add ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+4],', 'eax']
mov ['eax,', '[ebp+var_8]']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??A?$CRecordVector@PAX@@QBEABQAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??A?$CRecordVector@PAX@@QAEAAPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?ReserveOnePosition@?$CRecordVector@PAX@@AAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+Dst],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+4]']
cmp ['edx,', '[ecx+8]']
jnz ['loc_13BC']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
shr ['ecx,', '2']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
lea ['ecx,', '[eax+ecx+1]']
mov ['[ebp+var_8],', 'ecx']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '4']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[ecx+4],', '0']
jz ['short', 'loc_1397']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
shl ['eax,', '2']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+Dst]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+8],', 'ecx']
add ['esp,', '14h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
