?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
push ['esi']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+cchWideChar],', '0CCCCCCCCh']
mov ['ecx,', '[ebp+arg_0]']
call ['?Empty@UString@@QAEXXZ']
mov ['ecx,', '[ebp+arg_4]']
call ['?IsEmpty@AString@@QBE_NXZ']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_38']
jmp ['loc_F8']
mov ['esi,', 'esp']
push ['0']
push ['0']
mov ['ecx,', '[ebp+arg_4]']
call ['?Len@AString@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['??BAString@@QBEPBDXZ']
push ['eax']
push ['0']
mov ['ecx,', '[ebp+CodePage]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__MultiByteToWideChar@24']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+cchWideChar],', 'eax']
cmp ['[ebp+cchWideChar],', '0']
jnz ['short', 'loc_96']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetLastError@0']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_94']
mov ['[ebp+var_8],', '44E74h']
push ['offset', '__TI1H']
lea ['edx,', '[ebp+var_8]']
push ['edx']
call ['__CxxThrowException@8']
jmp ['short', 'loc_F8']
mov ['esi,', 'esp']
mov ['eax,', '[ebp+cchWideChar]']
push ['eax']
mov ['ecx,', '[ebp+cchWideChar]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?GetBuf@UString@@QAEPA_WI@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['?Len@AString@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['??BAString@@QBEPBDXZ']
push ['eax']
push ['0']
mov ['edx,', '[ebp+CodePage]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__MultiByteToWideChar@24']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+cchWideChar],', 'eax']
cmp ['[ebp+cchWideChar],', '0']
jnz ['short', 'loc_EC']
mov ['[ebp+var_C],', '44E74h']
push ['offset', '__TI1H']
lea ['eax,', '[ebp+var_C]']
push ['eax']
call ['__CxxThrowException@8']
mov ['ecx,', '[ebp+cchWideChar]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?ReleaseBuf_SetEnd@UString@@QAEXI@Z']
pop ['esi']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_24],', '0']
lea ['ecx,', '[ebp+var_1C]']
call ['??0UString@@QAE@XZ']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+CodePage]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
call ['?MultiByteToUnicodeString2@@YGXAAVUString@@ABVAString@@I@Z']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0UString@@QAE@ABV0@@Z']
mov ['ecx,', '[ebp+var_24]']
or ['ecx,', '1']
mov ['[ebp+var_24],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_1C]']
call ['??1UString@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?UnicodeStringToMultiByte2@@YGXAAVAString@@ABVUString@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0CCCCCCCCh']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
lea ['eax,', '[ebp+var_8+3]']
push ['eax']
push ['5Fh']
mov ['ecx,', '[ebp+CodePage]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?UnicodeStringToMultiByte2@@YGXAAVAString@@ABVUString@@IDAA_N@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN5']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
add ['esp,', '0Ch']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?UnicodeStringToMultiByte2@@YGXAAVAString@@ABVUString@@IDAA_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
push ['esi']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_C],', 'eax']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+cbMultiByte],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?Empty@AString@@QAEXXZ']
mov ['eax,', '[ebp+arg_10]']
mov ['byte', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+arg_4]']
call ['?IsEmpty@UString@@QBE_NXZ']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_2A6']
jmp ['loc_3D8']
mov ['esi,', 'esp']
push ['0']
push ['0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+arg_4]']
call ['?Len@UString@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['??BUString@@QBEPB_WXZ']
push ['eax']
push ['0']
mov ['edx,', '[ebp+CodePage]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__WideCharToMultiByte@32']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+cbMultiByte],', 'eax']
cmp ['[ebp+cbMultiByte],', '0']
jnz ['short', 'loc_30B']
mov ['esi,', 'esp']
call ['dword', 'ptr', 'ds:__imp__GetLastError@0']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
test ['eax,', 'eax']
jz ['short', 'loc_306']
mov ['[ebp+var_18],', '44E74h']
push ['offset', '__TI1H']
lea ['eax,', '[ebp+var_18]']
push ['eax']
call ['__CxxThrowException@8']
jmp ['loc_3D8']
mov ['[ebp+var_C],', '0']
cmp ['[ebp+CodePage],', '0FDE9h']
jz ['short', 'loc_32D']
cmp ['[ebp+CodePage],', '0FDE8h']
jz ['short', 'loc_32D']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_334']
mov ['[ebp+var_20],', '1']
mov ['cl,', 'byte', 'ptr', '[ebp+var_20]']
mov ['byte', 'ptr', '[ebp+var_14+3],', 'cl']
mov ['dl,', '[ebp+arg_C]']
mov ['[ebp+arg_C],', 'dl']
movzx ['eax,', 'byte', 'ptr', '[ebp+var_14+3]']
neg ['eax']
sbb ['eax,', 'eax']
not ['eax']
lea ['ecx,', '[ebp+var_C]']
and ['eax,', 'ecx']
mov ['esi,', 'esp']
push ['eax']
movzx ['edx,', 'byte', 'ptr', '[ebp+var_14+3]']
neg ['edx']
sbb ['edx,', 'edx']
not ['edx']
lea ['eax,', '[ebp+arg_C]']
and ['edx,', 'eax']
push ['edx']
mov ['ecx,', '[ebp+cbMultiByte]']
push ['ecx']
mov ['edx,', '[ebp+cbMultiByte]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['?GetBuf@AString@@QAEPADI@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['?Len@UString@@QBEIXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['??BUString@@QBEPB_WXZ']
push ['eax']
push ['0']
mov ['eax,', '[ebp+CodePage]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__WideCharToMultiByte@32']
cmp ['esi,', 'esp']
call ['__RTC_CheckEsp']
mov ['[ebp+cbMultiByte],', 'eax']
movzx ['ecx,', 'byte', 'ptr', '[ebp+var_14+3]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_3B1']
xor ['edx,', 'edx']
cmp ['[ebp+var_C],', '0']
setnz ['dl']
mov ['eax,', '[ebp+arg_10]']
mov ['[eax],', 'dl']
cmp ['[ebp+cbMultiByte],', '0']
jnz ['short', 'loc_3CC']
mov ['[ebp+var_1C],', '44E74h']
push ['offset', '__TI1H']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['__CxxThrowException@8']
mov ['edx,', '[ebp+cbMultiByte]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['?ReleaseBuf_SetEnd@AString@@QAEXI@Z']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN13']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
pop ['esi']
add ['esp,', '20h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_24],', '0']
lea ['ecx,', '[ebp+var_1C]']
call ['??0AString@@QAE@XZ']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
movzx ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+CodePage]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['?UnicodeStringToMultiByte2@@YGXAAVAString@@ABVUString@@IDAA_N@Z']
lea ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0AString@@QAE@ABV0@@Z']
mov ['eax,', '[ebp+var_24]']
or ['eax,', '1']
mov ['[ebp+var_24],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN9_0']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '24h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '24h']
mov ['eax,', '0CCCCCCCCh']
mov ['[ebp+var_30],', 'eax']
mov ['[ebp+var_2C],', 'eax']
mov ['[ebp+var_28],', 'eax']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_30],', '0']
lea ['ecx,', '[ebp+var_1C]']
call ['??0AString@@QAE@XZ']
mov ['[ebp+var_4],', '1']
lea ['eax,', '[ebp+var_28+3]']
push ['eax']
push ['5Fh']
mov ['ecx,', '[ebp+CodePage]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
call ['?UnicodeStringToMultiByte2@@YGXAAVAString@@ABVUString@@IDAA_N@Z']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0AString@@QAE@ABV0@@Z']
mov ['edx,', '[ebp+var_30]']
or ['edx,', '1']
mov ['[ebp+var_30],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_1C]']
call ['??1AString@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', 'ebp']
push ['eax']
lea ['edx,', '$LN10']
call ['@_RTC_CheckStackVars@8']
pop ['eax']
pop ['edx']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
add ['esp,', '30h']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?Len@AString@@QBEIXZ proc near          
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?IsEmpty@AString@@QBE_NXZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax+4],', '0']
setz ['cl']
mov ['al,', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??BAString@@QBEPBDXZ proc near          
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Empty@UString@@QAEXXZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
xor ['eax,', 'eax']
mov ['[edx],', 'ax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetBuf@UString@@QAEPA_WI@Z proc near   
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+8]']
jbe ['short', 'loc_6E1']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?ReAlloc2@UString@@AAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?ReleaseBuf_SetEnd@UString@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
xor ['ecx,', 'ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['[eax+edx*2],', 'cx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z$0 proc near
lea ['ecx,', '[ebp-1Ch]']
jmp ['??1UString@@QAE@XZ']
endp
__unwindfunclet$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z$1 proc near
mov ['eax,', '[ebp-24h]']
and ['eax,', '1']
jz ['locret_744']
and ['dword', 'ptr', '[ebp-24h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1UString@@QAE@XZ']
retn
endp
__ehhandler$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?MultiByteToUnicodeString@@YG?AVUString@@ABVAString@@I@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z$0 proc near
lea ['ecx,', '[ebp-1Ch]']
jmp ['??1AString@@QAE@XZ']
endp
__unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z$1 proc near
mov ['eax,', '[ebp-24h]']
and ['eax,', '1']
jz ['locret_780']
and ['dword', 'ptr', '[ebp-24h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1AString@@QAE@XZ']
retn
endp
__ehhandler$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@IDAA_N@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z$0 proc near
lea ['ecx,', '[ebp-1Ch]']
jmp ['??1AString@@QAE@XZ']
endp
__unwindfunclet$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z$1 proc near
mov ['eax,', '[ebp-30h]']
and ['eax,', '1']
jz ['locret_7BC']
and ['dword', 'ptr', '[ebp-30h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1AString@@QAE@XZ']
retn
endp
__ehhandler$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-28h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?UnicodeStringToMultiByte@@YG?AVAString@@ABVUString@@I@Z']
jmp ['___CxxFrameHandler3']
endp
??1UString@@QAE@XZ proc near            
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?Empty@AString@@QAEXXZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['byte', 'ptr', '[edx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetBuf@AString@@QAEPADI@Z proc near    
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+8]']
jbe ['short', 'loc_8F9']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?ReAlloc2@AString@@AAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
add ['esp,', '4']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?ReleaseBuf_SetEnd@AString@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['byte', 'ptr', '[eax+ecx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?Len@UString@@QBEIXZ proc near          
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?IsEmpty@UString@@QBE_NXZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
xor ['ecx,', 'ecx']
cmp ['dword', 'ptr', '[eax+4],', '0']
setz ['cl']
mov ['al,', 'cl']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??BUString@@QBEPB_WXZ proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1AString@@QAE@XZ proc near            
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0CCCCCCCCh']
mov ['[ebp+var_4],', '0CCCCCCCCh']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
add ['esp,', '8']
cmp ['ebp,', 'esp']
call ['__RTC_CheckEsp']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
