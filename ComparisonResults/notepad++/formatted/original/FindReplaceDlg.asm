??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	4
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z 
add	esp, 4
mov	edx, DWORD PTR [eax]
mov	eax, DWORD PTR $T3[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR $T3[ebp]
mov	DWORD PTR tv74[ebp], ecx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv74[ebp], 0
mov	edx, DWORD PTR tv74[ebp]
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z 
pop	ebp
ret	0
ENDP
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$_Move@AAUSearchResultMarking@@@std@@YA$$QAUSearchResultMarking@@AAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$_Move@AAUFoundInfo@@@std@@YA$$QAUFoundInfo@@AAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	?construct@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@ABV32@@Z 
pop	ebp
ret	0
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z 
pop	ebp
ret	0
ENDP
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV31@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z 
pop	ebp
ret	0
ENDP
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z 
pop	ebp
ret	0
ENDP
??$construct@USearchResultMarking@@U1@@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@$$QAU2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@USearchResultMarking@@U1@@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@$$QAU2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	8
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@USearchResultMarking@@@std@@YA$$QAUSearchResultMarking@@AAU1@@Z 
add	esp, 4
mov	edx, DWORD PTR [eax]
mov	eax, DWORD PTR [eax+4]
mov	ecx, DWORD PTR $T3[ebp]
mov	DWORD PTR [ecx], edx
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR $T3[ebp]
mov	DWORD PTR tv74[ebp], edx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv74[ebp], 0
mov	eax, DWORD PTR tv74[ebp]
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@USearchResultMarking@@U1@@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@$$QAU2@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@USearchResultMarking@@U1@@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@$$QAU2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@USearchResultMarking@@U1@@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@$$QAU2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$construct@UFoundInfo@@U1@@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@$$QAU2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@UFoundInfo@@U1@@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@$$QAU2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	36					
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@UFoundInfo@@@std@@YA$$QAUFoundInfo@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR $T3[ebp]
call	??0FoundInfo@@QAE@ABU0@@Z
mov	DWORD PTR tv76[ebp], eax
jmp	SHORT $LN4@construct
mov	DWORD PTR tv76[ebp], 0
mov	edx, DWORD PTR tv76[ebp]
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@UFoundInfo@@U1@@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@$$QAU2@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@UFoundInfo@@U1@@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@$$QAU2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@UFoundInfo@@U1@@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@$$QAU2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$swap@USearchResultMarking@@@std@@YAXAAUSearchResultMarking@@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	eax, DWORD PTR __Left$[ebp]
push	eax
call	??$_Move@AAUSearchResultMarking@@@std@@YA$$QAUSearchResultMarking@@AAU1@@Z 
add	esp, 4
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR __Tmp$[ebp], ecx
mov	DWORD PTR __Tmp$[ebp+4], edx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
call	??$_Move@AAUSearchResultMarking@@@std@@YA$$QAUSearchResultMarking@@AAU1@@Z 
add	esp, 4
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	eax, DWORD PTR __Left$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
lea	ecx, DWORD PTR __Tmp$[ebp]
push	ecx
call	??$_Move@AAUSearchResultMarking@@@std@@YA$$QAUSearchResultMarking@@AAU1@@Z 
add	esp, 4
mov	edx, DWORD PTR [eax]
mov	eax, DWORD PTR [eax+4]
mov	ecx, DWORD PTR __Right$[ebp]
mov	DWORD PTR [ecx], edx
mov	DWORD PTR [ecx+4], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$swap@UFoundInfo@@@std@@YAXAAUFoundInfo@@0@Z PROC	
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$swap@UFoundInfo@@@std@@YAXAAUFoundInfo@@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 40					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	eax, DWORD PTR __Left$[ebp]
push	eax
call	??$_Move@AAUFoundInfo@@@std@@YA$$QAUFoundInfo@@AAU1@@Z 
add	esp, 4
push	eax
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??0FoundInfo@@QAE@ABU0@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR __Right$[ebp]
push	ecx
call	??$_Move@AAUFoundInfo@@@std@@YA$$QAUFoundInfo@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Left$[ebp]
call	??4FoundInfo@@QAEAAU0@ABU0@@Z
lea	edx, DWORD PTR __Tmp$[ebp]
push	edx
call	??$_Move@AAUFoundInfo@@@std@@YA$$QAUFoundInfo@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Right$[ebp]
call	??4FoundInfo@@QAEAAU0@ABU0@@Z
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??1FoundInfo@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$swap@UFoundInfo@@@std@@YAXAAUFoundInfo@@0@Z$0 PROC
lea	ecx, DWORD PTR __Tmp$[ebp]
jmp	??1FoundInfo@@QAE@XZ
ENDP
__ehhandler$??$swap@UFoundInfo@@@std@@YAXAAUFoundInfo@@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-44]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$swap@UFoundInfo@@@std@@YAXAAUFoundInfo@@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR __Al$[ebp]
push	edx
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV31@@Z 
add	esp, 16					
pop	ebp
ret	0
ENDP
??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$construct@USearchResultMarking@@U1@@?$allocator_traits@V?$allocator@USearchResultMarking@@@std@@@std@@SAXAAV?$allocator@USearchResultMarking@@@1@PAUSearchResultMarking@@$$QAU3@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@USearchResultMarking@@@std@@YA$$QAUSearchResultMarking@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@USearchResultMarking@@U1@@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@$$QAU2@@Z 
pop	ebp
ret	0
ENDP
??$forward@USearchResultMarking@@@std@@YA$$QAUSearchResultMarking@@AAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$construct@UFoundInfo@@U1@@?$allocator_traits@V?$allocator@UFoundInfo@@@std@@@std@@SAXAAV?$allocator@UFoundInfo@@@1@PAUFoundInfo@@$$QAU3@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@UFoundInfo@@@std@@YA$$QAUFoundInfo@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@UFoundInfo@@U1@@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@$$QAU2@@Z 
pop	ebp
ret	0
ENDP
??$forward@UFoundInfo@@@std@@YA$$QAUFoundInfo@@AAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$_Debug_range2@PAUMenuItemUnit@@@std@@YAXPAUMenuItemUnit@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN3@Debug_rang
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Debug_pointer@UMenuItemUnit@@@std@@YAXPAUMenuItemUnit@@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
call	??$_Debug_pointer@UMenuItemUnit@@@std@@YAXPAUMenuItemUnit@@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Last$[ebp]
cmp	ecx, DWORD PTR __First$[ebp]
jae	SHORT $LN3@Debug_rang
mov	edx, DWORD PTR __Line$[ebp]
push	edx
mov	eax, DWORD PTR __File$[ebp]
push	eax
push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
pop	ebp
ret	0
ENDP
??$_Iter_cat@PAUMenuItemUnit@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUMenuItemUnit@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	cl, BYTE PTR __Cat$[ebp]
mov	BYTE PTR [eax], cl
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN3@Debug_rang
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
call	??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Last$[ebp]
cmp	ecx, DWORD PTR __First$[ebp]
jae	SHORT $LN3@Debug_rang
mov	edx, DWORD PTR __Line$[ebp]
push	edx
mov	eax, DWORD PTR __File$[ebp]
push	eax
push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
pop	ebp
ret	0
ENDP
??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	cl, BYTE PTR __Cat$[ebp]
mov	BYTE PTR [eax], cl
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$iter_swap@PAUSearchResultMarking@@PAU1@@std@@YAXPAUSearchResultMarking@@0@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR __Left$[ebp]
push	ecx
call	??$swap@USearchResultMarking@@@std@@YAXAAUSearchResultMarking@@0@Z 
add	esp, 8
pop	ebp
ret	0
ENDP
??$_Uninit_copy@PAUSearchResultMarking@@PAU1@V?$allocator@USearchResultMarking@@@std@@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Uninit_copy@PAUSearchResultMarking@@PAU1@V?$allocator@USearchResultMarking@@@std@@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	ecx
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
push	372					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAUSearchResultMarking@@@std@@YAXPAUSearchResultMarking@@0PB_WI@Z 
add	esp, 16					
push	373					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
call	??$_Debug_pointer@USearchResultMarking@@@std@@YAXPAUSearchResultMarking@@PB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Dest$[ebp]
mov	DWORD PTR __Next$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT $LN6@Uninit_cop
mov	ecx, DWORD PTR __Dest$[ebp]
add	ecx, 8
mov	DWORD PTR __Dest$[ebp], ecx
mov	edx, DWORD PTR __First$[ebp]
add	edx, 8
mov	DWORD PTR __First$[ebp], edx
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Uninit_cop
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@USearchResultMarking@@AAU1@@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@AAU2@@Z 
jmp	SHORT $LN5@Uninit_cop
jmp	SHORT $LN10@Uninit_cop
jmp	SHORT $LN3@Uninit_cop
mov	eax, DWORD PTR __Next$[ebp]
add	eax, 8
mov	DWORD PTR __Next$[ebp], eax
mov	ecx, DWORD PTR __Next$[ebp]
cmp	ecx, DWORD PTR __Dest$[ebp]
je	SHORT $LN1@Uninit_cop
mov	edx, DWORD PTR __Next$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@USearchResultMarking@@@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@@Z 
jmp	SHORT $LN2@Uninit_cop
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN13@Uninit_cop
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Uninit_copy@PAUSearchResultMarking@@PAU1@V?$allocator@USearchResultMarking@@@std@@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__ehhandler$??$_Uninit_copy@PAUSearchResultMarking@@PAU1@V?$allocator@USearchResultMarking@@@std@@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUSearchResultMarking@@PAU1@V?$allocator@USearchResultMarking@@@std@@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$iter_swap@PAUFoundInfo@@PAU1@@std@@YAXPAUFoundInfo@@0@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR __Left$[ebp]
push	ecx
call	??$swap@UFoundInfo@@@std@@YAXAAUFoundInfo@@0@Z 
add	esp, 8
pop	ebp
ret	0
ENDP
??$_Uninit_copy@PAUFoundInfo@@PAU1@V?$allocator@UFoundInfo@@@std@@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Uninit_copy@PAUFoundInfo@@PAU1@V?$allocator@UFoundInfo@@@std@@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	ecx
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
push	372					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAUFoundInfo@@@std@@YAXPAUFoundInfo@@0PB_WI@Z 
add	esp, 16					
push	373					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
call	??$_Debug_pointer@UFoundInfo@@@std@@YAXPAUFoundInfo@@PB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Dest$[ebp]
mov	DWORD PTR __Next$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT $LN6@Uninit_cop
mov	ecx, DWORD PTR __Dest$[ebp]
add	ecx, 36					
mov	DWORD PTR __Dest$[ebp], ecx
mov	edx, DWORD PTR __First$[ebp]
add	edx, 36					
mov	DWORD PTR __First$[ebp], edx
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Uninit_cop
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@UFoundInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@AAU2@@Z 
jmp	SHORT $LN5@Uninit_cop
jmp	SHORT $LN10@Uninit_cop
jmp	SHORT $LN3@Uninit_cop
mov	eax, DWORD PTR __Next$[ebp]
add	eax, 36					
mov	DWORD PTR __Next$[ebp], eax
mov	ecx, DWORD PTR __Next$[ebp]
cmp	ecx, DWORD PTR __Dest$[ebp]
je	SHORT $LN1@Uninit_cop
mov	edx, DWORD PTR __Next$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@UFoundInfo@@@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@@Z 
jmp	SHORT $LN2@Uninit_cop
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN13@Uninit_cop
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Uninit_copy@PAUFoundInfo@@PAU1@V?$allocator@UFoundInfo@@@std@@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__ehhandler$??$_Uninit_copy@PAUFoundInfo@@PAU1@V?$allocator@UFoundInfo@@@std@@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Uninit_copy@PAUFoundInfo@@PAU1@V?$allocator@UFoundInfo@@@std@@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV21@@Z 
pop	ebp
ret	0
ENDP
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV31@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV31@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z 
pop	ebp
ret	0
ENDP
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z 
pop	ebp
ret	0
ENDP
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$construct@USearchResultMarking@@U1@@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@$$QAU2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@USearchResultMarking@@@std@@YA$$QAUSearchResultMarking@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@USearchResultMarking@@U1@@?$allocator_traits@V?$allocator@USearchResultMarking@@@std@@@std@@SAXAAV?$allocator@USearchResultMarking@@@1@PAUSearchResultMarking@@$$QAU3@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$_Debug_pointer@USearchResultMarking@@@std@@YAXPAUSearchResultMarking@@PB_WI@Z PROC 
push	ebp
mov	ebp, esp
cmp	DWORD PTR __First$[ebp], 0
jne	SHORT $LN2@Debug_poin
mov	eax, DWORD PTR __Line$[ebp]
push	eax
mov	ecx, DWORD PTR __File$[ebp]
push	ecx
push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
pop	ebp
ret	0
ENDP
??$construct@UFoundInfo@@U1@@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@$$QAU2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@UFoundInfo@@@std@@YA$$QAUFoundInfo@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@UFoundInfo@@U1@@?$allocator_traits@V?$allocator@UFoundInfo@@@std@@@std@@SAXAAV?$allocator@UFoundInfo@@@1@PAUFoundInfo@@$$QAU3@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$_Debug_pointer@UFoundInfo@@@std@@YAXPAUFoundInfo@@PB_WI@Z PROC 
push	ebp
mov	ebp, esp
cmp	DWORD PTR __First$[ebp], 0
jne	SHORT $LN2@Debug_poin
mov	eax, DWORD PTR __Line$[ebp]
push	eax
mov	ecx, DWORD PTR __File$[ebp]
push	ecx
push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
pop	ebp
ret	0
ENDP
??$_Debug_pointer@UMenuItemUnit@@@std@@YAXPAUMenuItemUnit@@PB_WI@Z PROC 
push	ebp
mov	ebp, esp
cmp	DWORD PTR __First$[ebp], 0
jne	SHORT $LN2@Debug_poin
mov	eax, DWORD PTR __Line$[ebp]
push	eax
mov	ecx, DWORD PTR __File$[ebp]
push	ecx
push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
pop	ebp
ret	0
ENDP
??$_Debug_range@PAUMenuItemUnit@@@std@@YAXPAUMenuItemUnit@@0PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAUMenuItemUnit@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUMenuItemUnit@@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range2@PAUMenuItemUnit@@@std@@YAXPAUMenuItemUnit@@0PB_WIUrandom_access_iterator_tag@0@@Z 
add	esp, 20					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@UMenuItemUnit@@@?$allocator@UMenuItemUnit@@@std@@QAEXPAUMenuItemUnit@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	ecx, DWORD PTR __Ptr$[ebp]
call	??_GMenuItemUnit@@QAEPAXI@Z
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z PROC 
push	ebp
mov	ebp, esp
cmp	DWORD PTR __First$[ebp], 0
jne	SHORT $LN2@Debug_poin
mov	eax, DWORD PTR __Line$[ebp]
push	eax
mov	ecx, DWORD PTR __File$[ebp]
push	ecx
push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
pop	ebp
ret	0
ENDP
??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range2@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WIUrandom_access_iterator_tag@0@@Z 
add	esp, 20					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@USearchResultMarking@@@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@UFoundInfo@@@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	ecx, DWORD PTR __Ptr$[ebp]
call	??_GFoundInfo@@QAEPAXI@Z
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	ecx, DWORD PTR __Ptr$[ebp]
call	??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$_Advance@PAUSearchResultMarking@@H@std@@YAXAAPAUSearchResultMarking@@HUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Where$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR __Where$[ebp]
mov	DWORD PTR [ecx], eax
pop	ebp
ret	0
ENDP
??$_Distance2@PAUSearchResultMarking@@H@std@@YAXPAUSearchResultMarking@@0AAHUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN1@Distance2
push	745					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_pointer@USearchResultMarking@@@std@@YAXPAUSearchResultMarking@@PB_WI@Z 
add	esp, 12					
push	746					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Last$[ebp]
push	edx
call	??$_Debug_pointer@USearchResultMarking@@@std@@YAXPAUSearchResultMarking@@PB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Last$[ebp]
sub	eax, DWORD PTR __First$[ebp]
sar	eax, 3
mov	ecx, DWORD PTR __Off$[ebp]
add	eax, DWORD PTR [ecx]
mov	edx, DWORD PTR __Off$[ebp]
mov	DWORD PTR [edx], eax
pop	ebp
ret	0
ENDP
??$_Rotate@PAUSearchResultMarking@@HU1@@std@@YAXPAUSearchResultMarking@@00PAH0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	eax, DWORD PTR __Mid$[ebp]
sub	eax, DWORD PTR __First$[ebp]
sar	eax, 3
mov	DWORD PTR __Shift$[ebp], eax
mov	ecx, DWORD PTR __Last$[ebp]
sub	ecx, DWORD PTR __First$[ebp]
sar	ecx, 3
mov	DWORD PTR __Count$[ebp], ecx
mov	edx, DWORD PTR __Shift$[ebp]
mov	DWORD PTR __Factor$4[ebp], edx
cmp	DWORD PTR __Factor$4[ebp], 0
je	SHORT $LN8@Rotate
mov	eax, DWORD PTR __Count$[ebp]
cdq
idiv	DWORD PTR __Factor$4[ebp]
mov	DWORD PTR __Tmp$1[ebp], edx
mov	eax, DWORD PTR __Factor$4[ebp]
mov	DWORD PTR __Count$[ebp], eax
mov	ecx, DWORD PTR __Tmp$1[ebp]
mov	DWORD PTR __Factor$4[ebp], ecx
jmp	SHORT $LN9@Rotate
mov	edx, DWORD PTR __Last$[ebp]
sub	edx, DWORD PTR __First$[ebp]
sar	edx, 3
cmp	DWORD PTR __Count$[ebp], edx
jge	$LN10@Rotate
jmp	SHORT $LN6@Rotate
mov	eax, DWORD PTR __Count$[ebp]
sub	eax, 1
mov	DWORD PTR __Count$[ebp], eax
cmp	DWORD PTR __Count$[ebp], 0
jle	$LN10@Rotate
mov	ecx, DWORD PTR __Count$[ebp]
mov	edx, DWORD PTR __First$[ebp]
lea	eax, DWORD PTR [edx+ecx*8]
mov	DWORD PTR __Hole$2[ebp], eax
mov	ecx, DWORD PTR __Hole$2[ebp]
mov	DWORD PTR __Next$3[ebp], ecx
mov	edx, DWORD PTR __Shift$[ebp]
mov	eax, DWORD PTR __Next$3[ebp]
lea	ecx, DWORD PTR [eax+edx*8]
cmp	ecx, DWORD PTR __Last$[ebp]
jne	SHORT $LN12@Rotate
mov	edx, DWORD PTR __First$[ebp]
mov	DWORD PTR tv82[ebp], edx
jmp	SHORT $LN13@Rotate
mov	eax, DWORD PTR __Shift$[ebp]
mov	ecx, DWORD PTR __Next$3[ebp]
lea	edx, DWORD PTR [ecx+eax*8]
mov	DWORD PTR tv82[ebp], edx
mov	eax, DWORD PTR tv82[ebp]
mov	DWORD PTR __Next1$5[ebp], eax
mov	ecx, DWORD PTR __Next1$5[ebp]
push	ecx
mov	edx, DWORD PTR __Next$3[ebp]
push	edx
call	??$iter_swap@PAUSearchResultMarking@@PAU1@@std@@YAXPAUSearchResultMarking@@0@Z 
add	esp, 8
mov	eax, DWORD PTR __Next1$5[ebp]
mov	DWORD PTR __Next$3[ebp], eax
mov	ecx, DWORD PTR __Last$[ebp]
sub	ecx, DWORD PTR __Next1$5[ebp]
sar	ecx, 3
cmp	DWORD PTR __Shift$[ebp], ecx
jge	SHORT $LN14@Rotate
mov	edx, DWORD PTR __Shift$[ebp]
mov	eax, DWORD PTR __Next1$5[ebp]
lea	ecx, DWORD PTR [eax+edx*8]
mov	DWORD PTR tv95[ebp], ecx
jmp	SHORT $LN15@Rotate
mov	edx, DWORD PTR __Last$[ebp]
sub	edx, DWORD PTR __Next1$5[ebp]
sar	edx, 3
mov	eax, DWORD PTR __Shift$[ebp]
sub	eax, edx
mov	ecx, DWORD PTR __First$[ebp]
lea	edx, DWORD PTR [ecx+eax*8]
mov	DWORD PTR tv95[ebp], edx
mov	eax, DWORD PTR tv95[ebp]
mov	DWORD PTR __Next1$5[ebp], eax
mov	ecx, DWORD PTR __Next1$5[ebp]
cmp	ecx, DWORD PTR __Hole$2[ebp]
jne	SHORT $LN1@Rotate
jmp	SHORT $LN2@Rotate
jmp	SHORT $LN3@Rotate
jmp	$LN5@Rotate
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Dist_type@PAUSearchResultMarking@@@std@@YAPAHPAUSearchResultMarking@@@Z PROC 
push	ebp
mov	ebp, esp
xor	eax, eax
pop	ebp
ret	0
ENDP
??$_Debug_range2@PAUSearchResultMarking@@@std@@YAXPAUSearchResultMarking@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN3@Debug_rang
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Debug_pointer@USearchResultMarking@@@std@@YAXPAUSearchResultMarking@@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
call	??$_Debug_pointer@USearchResultMarking@@@std@@YAXPAUSearchResultMarking@@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Last$[ebp]
cmp	ecx, DWORD PTR __First$[ebp]
jae	SHORT $LN3@Debug_rang
mov	edx, DWORD PTR __Line$[ebp]
push	edx
mov	eax, DWORD PTR __File$[ebp]
push	eax
push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
pop	ebp
ret	0
ENDP
??$_Uninit_copy@PAUSearchResultMarking@@PAU1@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@USearchResultMarking@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSearchResultMarking@@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Dest$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Uninit_copy@PAUSearchResultMarking@@PAU1@V?$allocator@USearchResultMarking@@@std@@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 20					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Iter$[ebp]
call	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBEPAUSearchResultMarking@@XZ 
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Iter$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR $T2[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@@Z$0 PROC
lea	ecx, DWORD PTR __Iter$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@PB_WI@Z PROC 
push	ebp
mov	ebp, esp
pop	ebp
ret	0
ENDP
??$_Advance@PAUFoundInfo@@H@std@@YAXAAPAUFoundInfo@@HUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
imul	eax, DWORD PTR __Off$[ebp], 36
mov	ecx, DWORD PTR __Where$[ebp]
add	eax, DWORD PTR [ecx]
mov	edx, DWORD PTR __Where$[ebp]
mov	DWORD PTR [edx], eax
pop	ebp
ret	0
ENDP
??$_Distance2@PAUFoundInfo@@H@std@@YAXPAUFoundInfo@@0AAHUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN1@Distance2
push	745					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_pointer@UFoundInfo@@@std@@YAXPAUFoundInfo@@PB_WI@Z 
add	esp, 12					
push	746					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Last$[ebp]
push	edx
call	??$_Debug_pointer@UFoundInfo@@@std@@YAXPAUFoundInfo@@PB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Last$[ebp]
sub	eax, DWORD PTR __First$[ebp]
cdq
mov	ecx, 36					
idiv	ecx
mov	edx, DWORD PTR __Off$[ebp]
add	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR __Off$[ebp]
mov	DWORD PTR [ecx], eax
pop	ebp
ret	0
ENDP
??$_Rotate@PAUFoundInfo@@HU1@@std@@YAXPAUFoundInfo@@00PAH0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	eax, DWORD PTR __Mid$[ebp]
sub	eax, DWORD PTR __First$[ebp]
cdq
mov	ecx, 36					
idiv	ecx
mov	DWORD PTR __Shift$[ebp], eax
mov	eax, DWORD PTR __Last$[ebp]
sub	eax, DWORD PTR __First$[ebp]
cdq
mov	ecx, 36					
idiv	ecx
mov	DWORD PTR __Count$[ebp], eax
mov	edx, DWORD PTR __Shift$[ebp]
mov	DWORD PTR __Factor$4[ebp], edx
cmp	DWORD PTR __Factor$4[ebp], 0
je	SHORT $LN8@Rotate
mov	eax, DWORD PTR __Count$[ebp]
cdq
idiv	DWORD PTR __Factor$4[ebp]
mov	DWORD PTR __Tmp$1[ebp], edx
mov	eax, DWORD PTR __Factor$4[ebp]
mov	DWORD PTR __Count$[ebp], eax
mov	ecx, DWORD PTR __Tmp$1[ebp]
mov	DWORD PTR __Factor$4[ebp], ecx
jmp	SHORT $LN9@Rotate
mov	eax, DWORD PTR __Last$[ebp]
sub	eax, DWORD PTR __First$[ebp]
cdq
mov	ecx, 36					
idiv	ecx
cmp	DWORD PTR __Count$[ebp], eax
jge	$LN10@Rotate
jmp	SHORT $LN6@Rotate
mov	edx, DWORD PTR __Count$[ebp]
sub	edx, 1
mov	DWORD PTR __Count$[ebp], edx
cmp	DWORD PTR __Count$[ebp], 0
jle	$LN10@Rotate
imul	eax, DWORD PTR __Count$[ebp], 36
add	eax, DWORD PTR __First$[ebp]
mov	DWORD PTR __Hole$2[ebp], eax
mov	ecx, DWORD PTR __Hole$2[ebp]
mov	DWORD PTR __Next$3[ebp], ecx
imul	edx, DWORD PTR __Shift$[ebp], 36
add	edx, DWORD PTR __Next$3[ebp]
cmp	edx, DWORD PTR __Last$[ebp]
jne	SHORT $LN12@Rotate
mov	eax, DWORD PTR __First$[ebp]
mov	DWORD PTR tv82[ebp], eax
jmp	SHORT $LN13@Rotate
imul	ecx, DWORD PTR __Shift$[ebp], 36
add	ecx, DWORD PTR __Next$3[ebp]
mov	DWORD PTR tv82[ebp], ecx
mov	edx, DWORD PTR tv82[ebp]
mov	DWORD PTR __Next1$5[ebp], edx
mov	eax, DWORD PTR __Next1$5[ebp]
push	eax
mov	ecx, DWORD PTR __Next$3[ebp]
push	ecx
call	??$iter_swap@PAUFoundInfo@@PAU1@@std@@YAXPAUFoundInfo@@0@Z 
add	esp, 8
mov	edx, DWORD PTR __Next1$5[ebp]
mov	DWORD PTR __Next$3[ebp], edx
mov	eax, DWORD PTR __Last$[ebp]
sub	eax, DWORD PTR __Next1$5[ebp]
cdq
mov	ecx, 36					
idiv	ecx
cmp	DWORD PTR __Shift$[ebp], eax
jge	SHORT $LN14@Rotate
imul	edx, DWORD PTR __Shift$[ebp], 36
add	edx, DWORD PTR __Next1$5[ebp]
mov	DWORD PTR tv95[ebp], edx
jmp	SHORT $LN15@Rotate
mov	eax, DWORD PTR __Last$[ebp]
sub	eax, DWORD PTR __Next1$5[ebp]
cdq
mov	ecx, 36					
idiv	ecx
mov	edx, DWORD PTR __Shift$[ebp]
sub	edx, eax
imul	eax, edx, 36
add	eax, DWORD PTR __First$[ebp]
mov	DWORD PTR tv95[ebp], eax
mov	ecx, DWORD PTR tv95[ebp]
mov	DWORD PTR __Next1$5[ebp], ecx
mov	edx, DWORD PTR __Next1$5[ebp]
cmp	edx, DWORD PTR __Hole$2[ebp]
jne	SHORT $LN1@Rotate
jmp	SHORT $LN2@Rotate
jmp	SHORT $LN3@Rotate
jmp	$LN5@Rotate
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Dist_type@PAUFoundInfo@@@std@@YAPAHPAUFoundInfo@@@Z PROC 
push	ebp
mov	ebp, esp
xor	eax, eax
pop	ebp
ret	0
ENDP
??$_Debug_range2@PAUFoundInfo@@@std@@YAXPAUFoundInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN3@Debug_rang
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Debug_pointer@UFoundInfo@@@std@@YAXPAUFoundInfo@@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
call	??$_Debug_pointer@UFoundInfo@@@std@@YAXPAUFoundInfo@@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Last$[ebp]
cmp	ecx, DWORD PTR __First$[ebp]
jae	SHORT $LN3@Debug_rang
mov	edx, DWORD PTR __Line$[ebp]
push	edx
mov	eax, DWORD PTR __File$[ebp]
push	eax
push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
pop	ebp
ret	0
ENDP
??$_Uninit_copy@PAUFoundInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@UFoundInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFoundInfo@@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Dest$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Uninit_copy@PAUFoundInfo@@PAU1@V?$allocator@UFoundInfo@@@std@@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 20					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Iter$[ebp]
call	?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBEPAUFoundInfo@@XZ 
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Iter$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR $T2[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@@Z$0 PROC
lea	ecx, DWORD PTR __Iter$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@PB_WI@Z PROC 
push	ebp
mov	ebp, esp
pop	ebp
ret	0
ENDP
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR __Al$[ebp]
push	edx
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV31@@Z 
add	esp, 16					
pop	ebp
ret	0
ENDP
??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$_Debug_pointer@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PB_WI@Z PROC 
push	ebp
mov	ebp, esp
cmp	DWORD PTR __First$[ebp], 0
jne	SHORT $LN2@Debug_poin
mov	eax, DWORD PTR __Line$[ebp]
push	eax
mov	ecx, DWORD PTR __File$[ebp]
push	ecx
push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	ecx
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
push	438					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0PB_WI@Z 
add	esp, 16					
push	439					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
call	??$_Debug_pointer@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Dest$[ebp]
mov	DWORD PTR __Next$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT $LN6@Uninit_mov
mov	ecx, DWORD PTR __Dest$[ebp]
add	ecx, 4
mov	DWORD PTR __Dest$[ebp], ecx
mov	edx, DWORD PTR __First$[ebp]
add	edx, 4
mov	DWORD PTR __First$[ebp], edx
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Uninit_mov
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z 
jmp	SHORT $LN5@Uninit_mov
jmp	SHORT $LN10@Uninit_mov
jmp	SHORT $LN3@Uninit_mov
mov	eax, DWORD PTR __Next$[ebp]
add	eax, 4
mov	DWORD PTR __Next$[ebp], eax
mov	ecx, DWORD PTR __Next$[ebp]
cmp	ecx, DWORD PTR __Dest$[ebp]
je	SHORT $LN1@Uninit_mov
mov	edx, DWORD PTR __Next$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z 
jmp	SHORT $LN2@Uninit_mov
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN13@Uninit_mov
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z 
add	esp, 12					
pop	ebp
ret	0
ENDP
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z 
add	esp, 12					
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAUSearchResultMarking@@PAU1@V?$allocator@USearchResultMarking@@@std@@U1@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Uninit_move@PAUSearchResultMarking@@PAU1@V?$allocator@USearchResultMarking@@@std@@U1@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	ecx
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
push	438					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAUSearchResultMarking@@@std@@YAXPAUSearchResultMarking@@0PB_WI@Z 
add	esp, 16					
push	439					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
call	??$_Debug_pointer@USearchResultMarking@@@std@@YAXPAUSearchResultMarking@@PB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Dest$[ebp]
mov	DWORD PTR __Next$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT $LN6@Uninit_mov
mov	ecx, DWORD PTR __Dest$[ebp]
add	ecx, 8
mov	DWORD PTR __Dest$[ebp], ecx
mov	edx, DWORD PTR __First$[ebp]
add	edx, 8
mov	DWORD PTR __First$[ebp], edx
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Uninit_mov
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@USearchResultMarking@@U1@@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@$$QAU2@@Z 
jmp	SHORT $LN5@Uninit_mov
jmp	SHORT $LN10@Uninit_mov
jmp	SHORT $LN3@Uninit_mov
mov	eax, DWORD PTR __Next$[ebp]
add	eax, 8
mov	DWORD PTR __Next$[ebp], eax
mov	ecx, DWORD PTR __Next$[ebp]
cmp	ecx, DWORD PTR __Dest$[ebp]
je	SHORT $LN1@Uninit_mov
mov	edx, DWORD PTR __Next$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@USearchResultMarking@@@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@@Z 
jmp	SHORT $LN2@Uninit_mov
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN13@Uninit_mov
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Uninit_move@PAUSearchResultMarking@@PAU1@V?$allocator@USearchResultMarking@@@std@@U1@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__ehhandler$??$_Uninit_move@PAUSearchResultMarking@@PAU1@V?$allocator@USearchResultMarking@@@std@@U1@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUSearchResultMarking@@PAU1@V?$allocator@USearchResultMarking@@@std@@U1@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Val_type@PAUSearchResultMarking@@@std@@YAPAUSearchResultMarking@@PAU1@@Z PROC 
push	ebp
mov	ebp, esp
xor	eax, eax
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAUFoundInfo@@PAU1@V?$allocator@UFoundInfo@@@std@@U1@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Uninit_move@PAUFoundInfo@@PAU1@V?$allocator@UFoundInfo@@@std@@U1@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	ecx
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
push	438					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAUFoundInfo@@@std@@YAXPAUFoundInfo@@0PB_WI@Z 
add	esp, 16					
push	439					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
call	??$_Debug_pointer@UFoundInfo@@@std@@YAXPAUFoundInfo@@PB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Dest$[ebp]
mov	DWORD PTR __Next$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT $LN6@Uninit_mov
mov	ecx, DWORD PTR __Dest$[ebp]
add	ecx, 36					
mov	DWORD PTR __Dest$[ebp], ecx
mov	edx, DWORD PTR __First$[ebp]
add	edx, 36					
mov	DWORD PTR __First$[ebp], edx
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Uninit_mov
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@UFoundInfo@@U1@@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@$$QAU2@@Z 
jmp	SHORT $LN5@Uninit_mov
jmp	SHORT $LN10@Uninit_mov
jmp	SHORT $LN3@Uninit_mov
mov	eax, DWORD PTR __Next$[ebp]
add	eax, 36					
mov	DWORD PTR __Next$[ebp], eax
mov	ecx, DWORD PTR __Next$[ebp]
cmp	ecx, DWORD PTR __Dest$[ebp]
je	SHORT $LN1@Uninit_mov
mov	edx, DWORD PTR __Next$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@UFoundInfo@@@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@@Z 
jmp	SHORT $LN2@Uninit_mov
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN13@Uninit_mov
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Uninit_move@PAUFoundInfo@@PAU1@V?$allocator@UFoundInfo@@@std@@U1@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__ehhandler$??$_Uninit_move@PAUFoundInfo@@PAU1@V?$allocator@UFoundInfo@@@std@@U1@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUFoundInfo@@PAU1@V?$allocator@UFoundInfo@@@std@@U1@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Val_type@PAUFoundInfo@@@std@@YAPAUFoundInfo@@PAU1@@Z PROC 
push	ebp
mov	ebp, esp
xor	eax, eax
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAUMenuItemUnit@@PAU1@V?$allocator@UMenuItemUnit@@@std@@U1@@std@@YAPAUMenuItemUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Uninit_move@PAUMenuItemUnit@@PAU1@V?$allocator@UMenuItemUnit@@@std@@U1@@std@@YAPAUMenuItemUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	ecx
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
push	438					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAUMenuItemUnit@@@std@@YAXPAUMenuItemUnit@@0PB_WI@Z 
add	esp, 16					
push	439					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
call	??$_Debug_pointer@UMenuItemUnit@@@std@@YAXPAUMenuItemUnit@@PB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Dest$[ebp]
mov	DWORD PTR __Next$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT $LN6@Uninit_mov
mov	ecx, DWORD PTR __Dest$[ebp]
add	ecx, 60					
mov	DWORD PTR __Dest$[ebp], ecx
mov	edx, DWORD PTR __First$[ebp]
add	edx, 60					
mov	DWORD PTR __First$[ebp], edx
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Uninit_mov
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@UMenuItemUnit@@U1@@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEXPAUMenuItemUnit@@$$QAU2@@Z 
jmp	SHORT $LN5@Uninit_mov
jmp	SHORT $LN10@Uninit_mov
jmp	SHORT $LN3@Uninit_mov
mov	eax, DWORD PTR __Next$[ebp]
add	eax, 60					
mov	DWORD PTR __Next$[ebp], eax
mov	ecx, DWORD PTR __Next$[ebp]
cmp	ecx, DWORD PTR __Dest$[ebp]
je	SHORT $LN1@Uninit_mov
mov	edx, DWORD PTR __Next$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@UMenuItemUnit@@@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEXPAUMenuItemUnit@@@Z 
jmp	SHORT $LN2@Uninit_mov
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN13@Uninit_mov
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Uninit_move@PAUMenuItemUnit@@PAU1@V?$allocator@UMenuItemUnit@@@std@@U1@@std@@YAPAUMenuItemUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__ehhandler$??$_Uninit_move@PAUMenuItemUnit@@PAU1@V?$allocator@UMenuItemUnit@@@std@@U1@@std@@YAPAUMenuItemUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAUMenuItemUnit@@PAU1@V?$allocator@UMenuItemUnit@@@std@@U1@@std@@YAPAUMenuItemUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Val_type@PAUMenuItemUnit@@@std@@YAPAUMenuItemUnit@@PAU1@@Z PROC 
push	ebp
mov	ebp, esp
xor	eax, eax
pop	ebp
ret	0
ENDP
??$destroy@UMenuItemUnit@@@?$allocator_traits@V?$allocator@UMenuItemUnit@@@std@@@std@@SAXAAV?$allocator@UMenuItemUnit@@@1@PAUMenuItemUnit@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@UMenuItemUnit@@@?$allocator@UMenuItemUnit@@@std@@QAEXPAUMenuItemUnit@@@Z 
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	ecx
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
push	438					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0PB_WI@Z 
add	esp, 16					
push	439					
push	OFFSET ??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
call	??$_Debug_pointer@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Dest$[ebp]
mov	DWORD PTR __Next$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT $LN6@Uninit_mov
mov	ecx, DWORD PTR __Dest$[ebp]
add	ecx, 28					
mov	DWORD PTR __Dest$[ebp], ecx
mov	edx, DWORD PTR __First$[ebp]
add	edx, 28					
mov	DWORD PTR __First$[ebp], edx
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Uninit_mov
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z 
jmp	SHORT $LN5@Uninit_mov
jmp	SHORT $LN10@Uninit_mov
jmp	SHORT $LN3@Uninit_mov
mov	eax, DWORD PTR __Next$[ebp]
add	eax, 28					
mov	DWORD PTR __Next$[ebp], eax
mov	ecx, DWORD PTR __Next$[ebp]
cmp	ecx, DWORD PTR __Dest$[ebp]
je	SHORT $LN1@Uninit_mov
mov	edx, DWORD PTR __Next$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z 
jmp	SHORT $LN2@Uninit_mov
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN13@Uninit_mov
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__ehhandler$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z PROC 
push	ebp
mov	ebp, esp
xor	eax, eax
pop	ebp
ret	0
ENDP
??$destroy@USearchResultMarking@@@?$allocator_traits@V?$allocator@USearchResultMarking@@@std@@@std@@SAXAAV?$allocator@USearchResultMarking@@@1@PAUSearchResultMarking@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@USearchResultMarking@@@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@@Z 
pop	ebp
ret	0
ENDP
??$destroy@UFoundInfo@@@?$allocator_traits@V?$allocator@UFoundInfo@@@std@@@std@@SAXAAV?$allocator@UFoundInfo@@@1@PAUFoundInfo@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@UFoundInfo@@@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@@Z 
pop	ebp
ret	0
ENDP
??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z 
pop	ebp
ret	0
ENDP
??$advance@PAUSearchResultMarking@@H@std@@YAXAAPAUSearchResultMarking@@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Where$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAUSearchResultMarking@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSearchResultMarking@@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	edx, DWORD PTR __Where$[ebp]
push	edx
call	??$_Advance@PAUSearchResultMarking@@H@std@@YAXAAPAUSearchResultMarking@@HUrandom_access_iterator_tag@0@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$distance@PAUSearchResultMarking@@@std@@YAHPAUSearchResultMarking@@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR __Off$[ebp], 0
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAUSearchResultMarking@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSearchResultMarking@@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
lea	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Distance2@PAUSearchResultMarking@@H@std@@YAXPAUSearchResultMarking@@0AAHUrandom_access_iterator_tag@0@@Z 
add	esp, 16					
mov	eax, DWORD PTR __Off$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Rotate@PAUSearchResultMarking@@@std@@YAXPAUSearchResultMarking@@00Urandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAUSearchResultMarking@@@std@@YAPAUSearchResultMarking@@PAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Dist_type@PAUSearchResultMarking@@@std@@YAPAHPAUSearchResultMarking@@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __Mid$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Rotate@PAUSearchResultMarking@@HU1@@std@@YAXPAUSearchResultMarking@@00PAH0@Z 
add	esp, 20					
pop	ebp
ret	0
ENDP
??$_Iter_cat@PAUSearchResultMarking@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSearchResultMarking@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	cl, BYTE PTR __Cat$[ebp]
mov	BYTE PTR [eax], cl
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Debug_range@PAUSearchResultMarking@@@std@@YAXPAUSearchResultMarking@@0PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAUSearchResultMarking@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSearchResultMarking@@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range2@PAUSearchResultMarking@@@std@@YAXPAUSearchResultMarking@@0PB_WIUrandom_access_iterator_tag@0@@Z 
add	esp, 20					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@PAUSearchResultMarking@@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@PAUSearchResultMarking@@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 40					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Unchecked@PAUSearchResultMarking@@@std@@YAPAUSearchResultMarking@@PAU1@@Z 
add	esp, 4
push	eax
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR __Last$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv151[ebp], eax
mov	eax, DWORD PTR tv151[ebp]
mov	DWORD PTR tv143[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	BYTE PTR __$EHRec$[ebp+8], 1
call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@@Z 
add	esp, 12					
mov	DWORD PTR tv144[ebp], eax
mov	ecx, DWORD PTR tv144[ebp]
push	ecx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv153[ebp], eax
mov	eax, DWORD PTR tv153[ebp]
mov	DWORD PTR tv147[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	BYTE PTR __$EHRec$[ebp+8], 1
call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@@Z 
add	esp, 12					
mov	DWORD PTR tv148[ebp], eax
mov	ecx, DWORD PTR tv148[ebp]
push	ecx
call	??$_Uninit_copy@PAUSearchResultMarking@@PAU1@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z 
add	esp, 16					
mov	DWORD PTR tv67[ebp], eax
mov	edx, DWORD PTR tv67[ebp]
push	edx
lea	eax, DWORD PTR __Dest$[ebp]
push	eax
call	??$_Rechecked@PAUSearchResultMarking@@PAU1@@std@@YAAAPAUSearchResultMarking@@AAPAU1@PAU1@@Z 
add	esp, 8
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR $T4[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR $T4[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@PAUSearchResultMarking@@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@PAUSearchResultMarking@@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@PAUSearchResultMarking@@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z$2 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@PAUSearchResultMarking@@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z$3 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@PAUSearchResultMarking@@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-44]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@PAUSearchResultMarking@@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	eax, DWORD PTR __Last$[ebp]
push	eax
lea	ecx, DWORD PTR __First$[ebp]
call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN1@Distance2
push	745					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@PB_WI@Z 
add	esp, 12					
push	746					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
lea	eax, DWORD PTR __Last$[ebp]
push	eax
call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@PB_WI@Z 
add	esp, 12					
lea	ecx, DWORD PTR __First$[ebp]
push	ecx
lea	ecx, DWORD PTR __Last$[ebp]
call	??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@@Z 
mov	edx, DWORD PTR __Off$[ebp]
add	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR __Off$[ebp]
mov	DWORD PTR [ecx], eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	eax, DWORD PTR __Last$[ebp]
push	eax
lea	ecx, DWORD PTR __First$[ebp]
call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN2@Debug_rang
mov	edx, DWORD PTR __Line$[ebp]
push	edx
mov	eax, DWORD PTR __File$[ebp]
push	eax
lea	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@PB_WI@Z 
add	esp, 12					
mov	edx, DWORD PTR __Line$[ebp]
push	edx
mov	eax, DWORD PTR __File$[ebp]
push	eax
lea	ecx, DWORD PTR __Last$[ebp]
push	ecx
call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@PB_WI@Z 
add	esp, 12					
lea	edx, DWORD PTR __First$[ebp]
push	edx
lea	ecx, DWORD PTR __Last$[ebp]
call	??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN2@Debug_rang
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$advance@PAUFoundInfo@@H@std@@YAXAAPAUFoundInfo@@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Where$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAUFoundInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUFoundInfo@@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	edx, DWORD PTR __Where$[ebp]
push	edx
call	??$_Advance@PAUFoundInfo@@H@std@@YAXAAPAUFoundInfo@@HUrandom_access_iterator_tag@0@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$distance@PAUFoundInfo@@@std@@YAHPAUFoundInfo@@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR __Off$[ebp], 0
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAUFoundInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUFoundInfo@@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
lea	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Distance2@PAUFoundInfo@@H@std@@YAXPAUFoundInfo@@0AAHUrandom_access_iterator_tag@0@@Z 
add	esp, 16					
mov	eax, DWORD PTR __Off$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Rotate@PAUFoundInfo@@@std@@YAXPAUFoundInfo@@00Urandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAUFoundInfo@@@std@@YAPAUFoundInfo@@PAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Dist_type@PAUFoundInfo@@@std@@YAPAHPAUFoundInfo@@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __Mid$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Rotate@PAUFoundInfo@@HU1@@std@@YAXPAUFoundInfo@@00PAH0@Z 
add	esp, 20					
pop	ebp
ret	0
ENDP
??$_Iter_cat@PAUFoundInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUFoundInfo@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	cl, BYTE PTR __Cat$[ebp]
mov	BYTE PTR [eax], cl
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Debug_range@PAUFoundInfo@@@std@@YAXPAUFoundInfo@@0PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAUFoundInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUFoundInfo@@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range2@PAUFoundInfo@@@std@@YAXPAUFoundInfo@@0PB_WIUrandom_access_iterator_tag@0@@Z 
add	esp, 20					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@PAUFoundInfo@@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@PAUFoundInfo@@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 40					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Unchecked@PAUFoundInfo@@@std@@YAPAUFoundInfo@@PAU1@@Z 
add	esp, 4
push	eax
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR __Last$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv151[ebp], eax
mov	eax, DWORD PTR tv151[ebp]
mov	DWORD PTR tv143[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	BYTE PTR __$EHRec$[ebp+8], 1
call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@@Z 
add	esp, 12					
mov	DWORD PTR tv144[ebp], eax
mov	ecx, DWORD PTR tv144[ebp]
push	ecx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv153[ebp], eax
mov	eax, DWORD PTR tv153[ebp]
mov	DWORD PTR tv147[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	BYTE PTR __$EHRec$[ebp+8], 1
call	??$_Unchecked@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@@Z 
add	esp, 12					
mov	DWORD PTR tv148[ebp], eax
mov	ecx, DWORD PTR tv148[ebp]
push	ecx
call	??$_Uninit_copy@PAUFoundInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z 
add	esp, 16					
mov	DWORD PTR tv67[ebp], eax
mov	edx, DWORD PTR tv67[ebp]
push	edx
lea	eax, DWORD PTR __Dest$[ebp]
push	eax
call	??$_Rechecked@PAUFoundInfo@@PAU1@@std@@YAAAPAUFoundInfo@@AAPAU1@PAU1@@Z 
add	esp, 8
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR $T4[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR $T4[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@PAUFoundInfo@@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@PAUFoundInfo@@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@PAUFoundInfo@@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z$2 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@PAUFoundInfo@@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z$3 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@PAUFoundInfo@@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-44]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@PAUFoundInfo@@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	eax, DWORD PTR __Last$[ebp]
push	eax
lea	ecx, DWORD PTR __First$[ebp]
call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN1@Distance2
push	745					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@PB_WI@Z 
add	esp, 12					
push	746					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
lea	eax, DWORD PTR __Last$[ebp]
push	eax
call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@PB_WI@Z 
add	esp, 12					
lea	ecx, DWORD PTR __First$[ebp]
push	ecx
lea	ecx, DWORD PTR __Last$[ebp]
call	??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@@Z 
mov	edx, DWORD PTR __Off$[ebp]
add	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR __Off$[ebp]
mov	DWORD PTR [ecx], eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	eax, DWORD PTR __Last$[ebp]
push	eax
lea	ecx, DWORD PTR __First$[ebp]
call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN2@Debug_rang
mov	edx, DWORD PTR __Line$[ebp]
push	edx
mov	eax, DWORD PTR __File$[ebp]
push	eax
lea	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@PB_WI@Z 
add	esp, 12					
mov	edx, DWORD PTR __Line$[ebp]
push	edx
mov	eax, DWORD PTR __File$[ebp]
push	eax
lea	ecx, DWORD PTR __Last$[ebp]
push	ecx
call	??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@PB_WI@Z 
add	esp, 12					
lea	edx, DWORD PTR __First$[ebp]
push	edx
lea	ecx, DWORD PTR __Last$[ebp]
call	??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN2@Debug_rang
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV31@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	4
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@AAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z 
add	esp, 4
mov	edx, DWORD PTR $T3[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR $T3[ebp]
mov	DWORD PTR tv73[ebp], ecx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv73[ebp], 0
mov	edx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Debug_range2@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN3@Debug_rang
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Debug_pointer@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
call	??$_Debug_pointer@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Last$[ebp]
cmp	ecx, DWORD PTR __First$[ebp]
jae	SHORT $LN3@Debug_rang
mov	edx, DWORD PTR __Line$[ebp]
push	edx
mov	eax, DWORD PTR __File$[ebp]
push	eax
push	OFFSET ??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
pop	ebp
ret	0
ENDP
??$_Iter_cat@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	cl, BYTE PTR __Cat$[ebp]
mov	BYTE PTR [eax], cl
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Rechecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAPAV10@PAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __Src$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR __Dest$[ebp]
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 24					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@U?$pair@$$CBHUStyle@@@std@@@?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHUStyle@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	ecx, DWORD PTR __Ptr$[ebp]
call	??_G?$pair@$$CBHUStyle@@@std@@QAEPAXI@Z
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@U_Container_proxy@2@U32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
pop	ebp
ret	0
ENDP
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@U_Container_proxy@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
pop	ebp
ret	0
ENDP
??$_Rechecked@PAUSearchResultMarking@@PAU1@@std@@YAAAPAUSearchResultMarking@@AAPAU1@PAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __Src$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR __Dest$[ebp]
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAUSearchResultMarking@@PAU1@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@USearchResultMarking@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSearchResultMarking@@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAUSearchResultMarking@@@std@@YAPAUSearchResultMarking@@PAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninit_move@PAUSearchResultMarking@@PAU1@V?$allocator@USearchResultMarking@@@std@@U1@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 24					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Unchecked@PAUSearchResultMarking@@@std@@YAPAUSearchResultMarking@@PAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Src$[ebp]
pop	ebp
ret	0
ENDP
??$_Rechecked@PAUFoundInfo@@PAU1@@std@@YAAAPAUFoundInfo@@AAPAU1@PAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __Src$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR __Dest$[ebp]
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAUFoundInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@UFoundInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFoundInfo@@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAUFoundInfo@@@std@@YAPAUFoundInfo@@PAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninit_move@PAUFoundInfo@@PAU1@V?$allocator@UFoundInfo@@@std@@U1@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 24					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Unchecked@PAUFoundInfo@@@std@@YAPAUFoundInfo@@PAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Src$[ebp]
pop	ebp
ret	0
ENDP
??$_Rechecked@PAUMenuItemUnit@@PAU1@@std@@YAAAPAUMenuItemUnit@@AAPAU1@PAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __Src$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR __Dest$[ebp]
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAUMenuItemUnit@@PAU1@U?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@YAPAUMenuItemUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@UMenuItemUnit@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMenuItemUnit@@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAUMenuItemUnit@@@std@@YAPAUMenuItemUnit@@PAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninit_move@PAUMenuItemUnit@@PAU1@V?$allocator@UMenuItemUnit@@@std@@U1@@std@@YAPAUMenuItemUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 24					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Unchecked@PAUMenuItemUnit@@@std@@YAPAUMenuItemUnit@@PAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Src$[ebp]
pop	ebp
ret	0
ENDP
??$destroy@UMenuItemUnit@@@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEXPAUMenuItemUnit@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@UMenuItemUnit@@@?$allocator_traits@V?$allocator@UMenuItemUnit@@@std@@@std@@SAXAAV?$allocator@UMenuItemUnit@@@1@PAUMenuItemUnit@@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Dest$[ebp]
mov	ecx, DWORD PTR __Src$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR __Dest$[ebp]
pop	ebp
ret	0
ENDP
??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
mov	edx, DWORD PTR __Dest$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@V12@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 24					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Src$[ebp]
pop	ebp
ret	0
ENDP
??$destroy@USearchResultMarking@@@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@USearchResultMarking@@@?$allocator_traits@V?$allocator@USearchResultMarking@@@std@@@std@@SAXAAV?$allocator@USearchResultMarking@@@1@PAUSearchResultMarking@@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@UFoundInfo@@@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@UFoundInfo@@@?$allocator_traits@V?$allocator@UFoundInfo@@@std@@@std@@SAXAAV?$allocator@UFoundInfo@@@1@PAUFoundInfo@@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	4
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z	
add	esp, 4
mov	edx, DWORD PTR $T3[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR $T3[ebp]
mov	DWORD PTR tv73[ebp], ecx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv73[ebp], 0
mov	edx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	4
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	
add	esp, 4
mov	edx, DWORD PTR $T3[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR $T3[ebp]
mov	DWORD PTR tv73[ebp], ecx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv73[ebp], 0
mov	edx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$move@AAUSearchResultMarking@@@std@@YA$$QAUSearchResultMarking@@AAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$construct@USearchResultMarking@@AAU1@@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@AAU2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@USearchResultMarking@@AAU1@@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@AAU2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	8
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@AAUSearchResultMarking@@@std@@YAAAUSearchResultMarking@@AAU1@@Z 
add	esp, 4
mov	edx, DWORD PTR [eax]
mov	eax, DWORD PTR [eax+4]
mov	ecx, DWORD PTR $T3[ebp]
mov	DWORD PTR [ecx], edx
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR $T3[ebp]
mov	DWORD PTR tv74[ebp], edx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv74[ebp], 0
mov	eax, DWORD PTR tv74[ebp]
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@USearchResultMarking@@AAU1@@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@AAU2@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@USearchResultMarking@@AAU1@@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@AAU2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@USearchResultMarking@@AAU1@@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@AAU2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$move@AAUFoundInfo@@@std@@YA$$QAUFoundInfo@@AAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$construct@UFoundInfo@@AAU1@@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@AAU2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@UFoundInfo@@AAU1@@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@AAU2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	36					
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@AAUFoundInfo@@@std@@YAAAUFoundInfo@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR $T3[ebp]
call	??0FoundInfo@@QAE@ABU0@@Z
mov	DWORD PTR tv76[ebp], eax
jmp	SHORT $LN4@construct
mov	DWORD PTR tv76[ebp], 0
mov	edx, DWORD PTR tv76[ebp]
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@UFoundInfo@@AAU1@@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@AAU2@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@UFoundInfo@@AAU1@@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@AAU2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@UFoundInfo@@AAU1@@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@AAU2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$construct@UMenuItemUnit@@U1@@?$allocator@UMenuItemUnit@@@std@@QAEXPAUMenuItemUnit@@$$QAU2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@UMenuItemUnit@@U1@@?$allocator@UMenuItemUnit@@@std@@QAEXPAUMenuItemUnit@@$$QAU2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	60					
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@UMenuItemUnit@@@std@@YA$$QAUMenuItemUnit@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR $T3[ebp]
call	??0MenuItemUnit@@QAE@ABU0@@Z
mov	DWORD PTR tv76[ebp], eax
jmp	SHORT $LN4@construct
mov	DWORD PTR tv76[ebp], 0
mov	edx, DWORD PTR tv76[ebp]
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@UMenuItemUnit@@U1@@?$allocator@UMenuItemUnit@@@std@@QAEXPAUMenuItemUnit@@$$QAU2@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@UMenuItemUnit@@U1@@?$allocator@UMenuItemUnit@@@std@@QAEXPAUMenuItemUnit@@$$QAU2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@UMenuItemUnit@@U1@@?$allocator@UMenuItemUnit@@@std@@QAEXPAUMenuItemUnit@@$$QAU2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	28					
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR $T3[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z 
mov	DWORD PTR tv76[ebp], eax
jmp	SHORT $LN4@construct
mov	DWORD PTR tv76[ebp], 0
mov	edx, DWORD PTR tv76[ebp]
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ PROC	
push	ebp
mov	ebp, esp
push	0
mov	ecx, OFFSET ?id@?$numpunct@_W@std@@2V0locale@2@A 
call	??0id@locale@std@@QAE@I@Z		
pop	ebp
ret	0
ENDP
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ PROC	
push	ebp
mov	ebp, esp
push	0
mov	ecx, OFFSET ?id@?$numpunct@D@std@@2V0locale@2@A 
call	??0id@locale@std@@QAE@I@Z		
pop	ebp
ret	0
ENDP
??$rotate@PAUSearchResultMarking@@@std@@YAPAUSearchResultMarking@@PAU1@00@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	3241					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Mid$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAUSearchResultMarking@@@std@@YAXPAUSearchResultMarking@@0PB_WI@Z 
add	esp, 16					
push	3242					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __Mid$[ebp]
push	eax
call	??$_Debug_range@PAUSearchResultMarking@@@std@@YAXPAUSearchResultMarking@@0PB_WI@Z 
add	esp, 16					
mov	ecx, DWORD PTR __First$[ebp]
cmp	ecx, DWORD PTR __Mid$[ebp]
je	SHORT $LN1@rotate
mov	edx, DWORD PTR __Mid$[ebp]
cmp	edx, DWORD PTR __Last$[ebp]
je	SHORT $LN1@rotate
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAUSearchResultMarking@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUSearchResultMarking@@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
call	??$_Unchecked@PAUSearchResultMarking@@@std@@YAPAUSearchResultMarking@@PAU1@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Mid$[ebp]
push	edx
call	??$_Unchecked@PAUSearchResultMarking@@@std@@YAPAUSearchResultMarking@@PAU1@@Z 
add	esp, 4
push	eax
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Unchecked@PAUSearchResultMarking@@@std@@YAPAUSearchResultMarking@@PAU1@@Z 
add	esp, 4
push	eax
call	??$_Rotate@PAUSearchResultMarking@@@std@@YAXPAUSearchResultMarking@@00Urandom_access_iterator_tag@0@@Z 
add	esp, 16					
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __Mid$[ebp]
push	edx
call	??$distance@PAUSearchResultMarking@@@std@@YAHPAUSearchResultMarking@@0@Z 
add	esp, 8
push	eax
lea	eax, DWORD PTR __First$[ebp]
push	eax
call	??$advance@PAUSearchResultMarking@@H@std@@YAXAAPAUSearchResultMarking@@H@Z 
add	esp, 8
mov	eax, DWORD PTR __First$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@0PAU2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@0PAU2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 40					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	eax, DWORD PTR __Last$[ebp]
push	eax
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv145[ebp], eax
mov	ecx, DWORD PTR tv145[ebp]
mov	DWORD PTR tv139[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv146[ebp], eax
mov	eax, DWORD PTR tv146[ebp]
mov	DWORD PTR tv142[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	BYTE PTR __$EHRec$[ebp+8], 1
call	??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@PAUSearchResultMarking@@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@@std@@YAPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z 
add	esp, 32					
mov	DWORD PTR tv71[ebp], eax
mov	ecx, DWORD PTR tv71[ebp]
mov	DWORD PTR $T4[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR $T4[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	28					
ENDP
__unwindfunclet$??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@0PAU2@@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@0PAU2@@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@0PAU2@@Z$2 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@0PAU2@@Z$3 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@0PAU2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-44]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@0PAU2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAI@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
call	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR __Last$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv141[ebp], eax
mov	eax, DWORD PTR tv141[ebp]
mov	DWORD PTR tv135[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv142[ebp], eax
mov	eax, DWORD PTR tv142[ebp]
mov	DWORD PTR tv138[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	BYTE PTR __$EHRec$[ebp+8], 1
call	??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z 
add	esp, 32					
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAI@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAI@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAI@Z$2 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAI@Z$3 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WI@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
call	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	eax, DWORD PTR __Last$[ebp]
push	eax
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv143[ebp], eax
mov	ecx, DWORD PTR tv143[ebp]
mov	DWORD PTR tv137[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv144[ebp], eax
mov	eax, DWORD PTR tv144[ebp]
mov	DWORD PTR tv140[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	BYTE PTR __$EHRec$[ebp+8], 1
call	??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z 
add	esp, 36					
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WI@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WI@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WI@Z$2 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WI@Z$3 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$rotate@PAUFoundInfo@@@std@@YAPAUFoundInfo@@PAU1@00@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	3241					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Mid$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAUFoundInfo@@@std@@YAXPAUFoundInfo@@0PB_WI@Z 
add	esp, 16					
push	3242					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __Mid$[ebp]
push	eax
call	??$_Debug_range@PAUFoundInfo@@@std@@YAXPAUFoundInfo@@0PB_WI@Z 
add	esp, 16					
mov	ecx, DWORD PTR __First$[ebp]
cmp	ecx, DWORD PTR __Mid$[ebp]
je	SHORT $LN1@rotate
mov	edx, DWORD PTR __Mid$[ebp]
cmp	edx, DWORD PTR __Last$[ebp]
je	SHORT $LN1@rotate
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAUFoundInfo@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAUFoundInfo@@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
call	??$_Unchecked@PAUFoundInfo@@@std@@YAPAUFoundInfo@@PAU1@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Mid$[ebp]
push	edx
call	??$_Unchecked@PAUFoundInfo@@@std@@YAPAUFoundInfo@@PAU1@@Z 
add	esp, 4
push	eax
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Unchecked@PAUFoundInfo@@@std@@YAPAUFoundInfo@@PAU1@@Z 
add	esp, 4
push	eax
call	??$_Rotate@PAUFoundInfo@@@std@@YAXPAUFoundInfo@@00Urandom_access_iterator_tag@0@@Z 
add	esp, 16					
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __Mid$[ebp]
push	edx
call	??$distance@PAUFoundInfo@@@std@@YAHPAUFoundInfo@@0@Z 
add	esp, 8
push	eax
lea	eax, DWORD PTR __First$[ebp]
push	eax
call	??$advance@PAUFoundInfo@@H@std@@YAXAAPAUFoundInfo@@H@Z 
add	esp, 8
mov	eax, DWORD PTR __First$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@0PAU2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@0PAU2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 40					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	eax, DWORD PTR __Last$[ebp]
push	eax
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv145[ebp], eax
mov	ecx, DWORD PTR tv145[ebp]
mov	DWORD PTR tv139[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv146[ebp], eax
mov	eax, DWORD PTR tv146[ebp]
mov	DWORD PTR tv142[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	BYTE PTR __$EHRec$[ebp+8], 1
call	??$_Uninitialized_copy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@PAUFoundInfo@@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@@std@@YAPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PAU1@AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z 
add	esp, 32					
mov	DWORD PTR tv71[ebp], eax
mov	ecx, DWORD PTR tv71[ebp]
mov	DWORD PTR $T4[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR $T4[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	28					
ENDP
__unwindfunclet$??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@0PAU2@@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@0PAU2@@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@0PAU2@@Z$2 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@0PAU2@@Z$3 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@0PAU2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-44]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@0PAU2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAI@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
call	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR __Last$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv141[ebp], eax
mov	eax, DWORD PTR tv141[ebp]
mov	DWORD PTR tv135[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv142[ebp], eax
mov	eax, DWORD PTR tv142[ebp]
mov	DWORD PTR tv138[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	BYTE PTR __$EHRec$[ebp+8], 1
call	??$_Distance2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAIUrandom_access_iterator_tag@0@@Z 
add	esp, 32					
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAI@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAI@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAI@Z$2 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAI@Z$3 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WI@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
call	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	eax, DWORD PTR __Last$[ebp]
push	eax
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv143[ebp], eax
mov	ecx, DWORD PTR tv143[ebp]
mov	DWORD PTR tv137[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv144[ebp], eax
mov	eax, DWORD PTR tv144[ebp]
mov	DWORD PTR tv140[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	BYTE PTR __$EHRec$[ebp+8], 1
call	??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z 
add	esp, 36					
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WI@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WI@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WI@Z$2 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WI@Z$3 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Equal@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Equal@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBE_NABV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?base@?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv75[ebp], eax
mov	ecx, DWORD PTR tv75[ebp]
mov	DWORD PTR tv74[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR tv74[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z 
mov	BYTE PTR $T3[ebp], al
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	al, BYTE PTR $T3[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??$_Equal@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBE_NABV01@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Equal@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBE_NABV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Equal@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBE_NABV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
push	0
mov	ecx, OFFSET ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A 
call	??0id@locale@std@@QAE@I@Z		
pop	ebp
ret	0
ENDP
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
push	0
mov	ecx, OFFSET ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A 
call	??0id@locale@std@@QAE@I@Z		
pop	ebp
ret	0
ENDP
??$_Uninit_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	ecx
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	eax, DWORD PTR __First$[ebp]
mov	DWORD PTR __Next$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT $LN6@Uninit_fil
mov	ecx, DWORD PTR __Count$[ebp]
sub	ecx, 1
mov	DWORD PTR __Count$[ebp], ecx
mov	edx, DWORD PTR __First$[ebp]
add	edx, 4
mov	DWORD PTR __First$[ebp], edx
cmp	DWORD PTR __Count$[ebp], 0
jbe	SHORT $LN4@Uninit_fil
mov	eax, DWORD PTR __Pval$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV21@@Z 
jmp	SHORT $LN5@Uninit_fil
jmp	SHORT $LN10@Uninit_fil
jmp	SHORT $LN3@Uninit_fil
mov	edx, DWORD PTR __Next$[ebp]
add	edx, 4
mov	DWORD PTR __Next$[ebp], edx
mov	eax, DWORD PTR __Next$[ebp]
cmp	eax, DWORD PTR __First$[ebp]
je	SHORT $LN1@Uninit_fil
mov	ecx, DWORD PTR __Next$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z 
jmp	SHORT $LN2@Uninit_fil
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN13@Uninit_fil
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT $LN9@Uninit_fil
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Uninit_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Val_type@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z PROC 
push	ebp
mov	ebp, esp
xor	eax, eax
pop	ebp
ret	0
ENDP
??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@1@PAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z 
pop	ebp
ret	0
ENDP
??$forward@AAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$_Copy_backward@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __First$[ebp]
cmp	eax, DWORD PTR __Last$[ebp]
je	SHORT $LN1@Copy_backw
mov	ecx, DWORD PTR __Last$[ebp]
sub	ecx, 4
mov	DWORD PTR __Last$[ebp], ecx
mov	edx, DWORD PTR __Dest$[ebp]
sub	edx, 4
mov	DWORD PTR __Dest$[ebp], edx
mov	eax, DWORD PTR __Last$[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR __Dest$[ebp]
mov	DWORD PTR [edx], ecx
jmp	SHORT $LN2@Copy_backw
mov	eax, DWORD PTR __Dest$[ebp]
pop	ebp
ret	0
ENDP
??$_Fill@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0ABV10@@Z PROC 
push	ebp
mov	ebp, esp
jmp	SHORT $LN3@Fill
mov	eax, DWORD PTR __First$[ebp]
add	eax, 4
mov	DWORD PTR __First$[ebp], eax
mov	ecx, DWORD PTR __First$[ebp]
cmp	ecx, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Fill
mov	edx, DWORD PTR __Val$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR __First$[ebp]
mov	DWORD PTR [ecx], eax
jmp	SHORT $LN2@Fill
pop	ebp
ret	0
ENDP
??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Src$[ebp]
pop	ebp
ret	0
ENDP
??$_Debug_range@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
lea	eax, DWORD PTR __First$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	??$_Iter_cat@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@@Z 
add	esp, 8
mov	dl, BYTE PTR [eax]
movzx	eax, dl
push	eax
mov	ecx, DWORD PTR __Line$[ebp]
push	ecx
mov	edx, DWORD PTR __File$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range2@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z 
add	esp, 20					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Uninitialized_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Last$[ebp]
push	edx
call	??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z 
add	esp, 4
push	eax
call	??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z 
add	esp, 16					
push	eax
lea	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Rechecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAPAV10@PAV10@@Z 
add	esp, 8
mov	eax, DWORD PTR [eax]
pop	ebp
ret	0
ENDP
??$destroy@U?$pair@$$CBHUStyle@@@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@1@PAU?$pair@$$CBHUStyle@@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@U?$pair@$$CBHUStyle@@@std@@@?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHUStyle@@@1@@Z 
pop	ebp
ret	0
ENDP
??$destroy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@1@PAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@@Z 
pop	ebp
ret	0
ENDP
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR __Al$[ebp]
push	edx
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@U_Container_proxy@2@U32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z 
add	esp, 16					
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
jmp	SHORT $LN3@Destroy_ra
mov	eax, DWORD PTR __First$[ebp]
add	eax, 4
mov	DWORD PTR __First$[ebp], eax
mov	ecx, DWORD PTR __First$[ebp]
cmp	ecx, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Destroy_ra
mov	edx, DWORD PTR __First$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z 
jmp	SHORT $LN2@Destroy_ra
pop	ebp
ret	0
ENDP
??$_Ptr_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@0@0@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	al, BYTE PTR __Cat$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@1@PAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z 
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
jmp	SHORT $LN3@Destroy_ra
mov	eax, DWORD PTR __First$[ebp]
add	eax, 4
mov	DWORD PTR __First$[ebp], eax
mov	ecx, DWORD PTR __First$[ebp]
cmp	ecx, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Destroy_ra
mov	edx, DWORD PTR __First$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z 
jmp	SHORT $LN2@Destroy_ra
pop	ebp
ret	0
ENDP
??$_Ptr_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	al, BYTE PTR __Cat$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@1@PAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z 
pop	ebp
ret	0
ENDP
??$destroy@U_Container_proxy@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@U_Container_proxy@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@@Z 
add	esp, 12					
pop	ebp
ret	0
ENDP
??$_Uninitialized_move@PAUSearchResultMarking@@PAU1@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Unchecked@PAUSearchResultMarking@@@std@@YAPAUSearchResultMarking@@PAU1@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Last$[ebp]
push	edx
call	??$_Unchecked@PAUSearchResultMarking@@@std@@YAPAUSearchResultMarking@@PAU1@@Z 
add	esp, 4
push	eax
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Unchecked@PAUSearchResultMarking@@@std@@YAPAUSearchResultMarking@@PAU1@@Z 
add	esp, 4
push	eax
call	??$_Uninit_move@PAUSearchResultMarking@@PAU1@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z 
add	esp, 16					
push	eax
lea	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Rechecked@PAUSearchResultMarking@@PAU1@@std@@YAAAPAUSearchResultMarking@@AAPAU1@PAU1@@Z 
add	esp, 8
mov	eax, DWORD PTR [eax]
pop	ebp
ret	0
ENDP
??$_Uninitialized_move@PAUFoundInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Unchecked@PAUFoundInfo@@@std@@YAPAUFoundInfo@@PAU1@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Last$[ebp]
push	edx
call	??$_Unchecked@PAUFoundInfo@@@std@@YAPAUFoundInfo@@PAU1@@Z 
add	esp, 4
push	eax
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Unchecked@PAUFoundInfo@@@std@@YAPAUFoundInfo@@PAU1@@Z 
add	esp, 4
push	eax
call	??$_Uninit_move@PAUFoundInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z 
add	esp, 16					
push	eax
lea	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Rechecked@PAUFoundInfo@@PAU1@@std@@YAAAPAUFoundInfo@@AAPAU1@PAU1@@Z 
add	esp, 8
mov	eax, DWORD PTR [eax]
pop	ebp
ret	0
ENDP
??$_Uninitialized_move@PAUMenuItemUnit@@PAU1@U?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@YAPAUMenuItemUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Unchecked@PAUMenuItemUnit@@@std@@YAPAUMenuItemUnit@@PAU1@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Last$[ebp]
push	edx
call	??$_Unchecked@PAUMenuItemUnit@@@std@@YAPAUMenuItemUnit@@PAU1@@Z 
add	esp, 4
push	eax
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Unchecked@PAUMenuItemUnit@@@std@@YAPAUMenuItemUnit@@PAU1@@Z 
add	esp, 4
push	eax
call	??$_Uninit_move@PAUMenuItemUnit@@PAU1@U?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@YAPAUMenuItemUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@0@@Z 
add	esp, 16					
push	eax
lea	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Rechecked@PAUMenuItemUnit@@PAU1@@std@@YAAAPAUMenuItemUnit@@AAPAU1@PAU1@@Z 
add	esp, 8
mov	eax, DWORD PTR [eax]
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@YAXPAUMenuItemUnit@@0AAU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
jmp	SHORT $LN3@Destroy_ra
mov	eax, DWORD PTR __First$[ebp]
add	eax, 60					
mov	DWORD PTR __First$[ebp], eax
mov	ecx, DWORD PTR __First$[ebp]
cmp	ecx, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Destroy_ra
mov	edx, DWORD PTR __First$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@UMenuItemUnit@@@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEXPAUMenuItemUnit@@@Z 
jmp	SHORT $LN2@Destroy_ra
pop	ebp
ret	0
ENDP
??$_Ptr_cat@UMenuItemUnit@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMenuItemUnit@@0@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	al, BYTE PTR __Cat$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Last$[ebp]
push	edx
call	??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Unchecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@@Z 
add	esp, 4
push	eax
call	??$_Uninit_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z 
add	esp, 16					
push	eax
lea	ecx, DWORD PTR __Dest$[ebp]
push	ecx
call	??$_Rechecked@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@@std@@YAAAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAPAV10@PAV10@@Z 
add	esp, 8
mov	eax, DWORD PTR [eax]
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@YAXPAPAUHMENU__@@0AAU?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
pop	ebp
ret	0
ENDP
??$_Ptr_cat@PAUHMENU__@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUHMENU__@@0@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	al, BYTE PTR __Cat$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
pop	ebp
ret	0
ENDP
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
pop	ebp
ret	0
ENDP
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@YAXPAUSearchResultMarking@@0AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
jmp	SHORT $LN3@Destroy_ra
mov	eax, DWORD PTR __First$[ebp]
add	eax, 8
mov	DWORD PTR __First$[ebp], eax
mov	ecx, DWORD PTR __First$[ebp]
cmp	ecx, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Destroy_ra
mov	edx, DWORD PTR __First$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@USearchResultMarking@@@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@@Z 
jmp	SHORT $LN2@Destroy_ra
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@@std@@YAXPAUFoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
jmp	SHORT $LN3@Destroy_ra
mov	eax, DWORD PTR __First$[ebp]
add	eax, 36					
mov	DWORD PTR __First$[ebp], eax
mov	ecx, DWORD PTR __First$[ebp]
cmp	ecx, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Destroy_ra
mov	edx, DWORD PTR __First$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@UFoundInfo@@@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@@Z 
jmp	SHORT $LN2@Destroy_ra
pop	ebp
ret	0
ENDP
??$?0U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
jmp	SHORT $LN3@Destroy_ra
mov	eax, DWORD PTR __First$[ebp]
add	eax, 28					
mov	DWORD PTR __First$[ebp], eax
mov	ecx, DWORD PTR __First$[ebp]
cmp	ecx, DWORD PTR __Last$[ebp]
je	SHORT $LN4@Destroy_ra
mov	edx, DWORD PTR __First$[ebp]
push	edx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@@Z 
jmp	SHORT $LN2@Destroy_ra
pop	ebp
ret	0
ENDP
??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	al, BYTE PTR __Cat$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z 
pop	ebp
ret	0
ENDP
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z 
pop	ebp
ret	0
ENDP
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z 
pop	ebp
ret	0
ENDP
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z 
pop	ebp
ret	0
ENDP
??$forward@AAPAD@std@@YAAAPADAAPAD@Z PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$_Move@PAUSearchResultMarking@@PAU1@@std@@YAPAUSearchResultMarking@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
jmp	SHORT $LN3@Move
mov	eax, DWORD PTR __Dest$[ebp]
add	eax, 8
mov	DWORD PTR __Dest$[ebp], eax
mov	ecx, DWORD PTR __First$[ebp]
add	ecx, 8
mov	DWORD PTR __First$[ebp], ecx
mov	edx, DWORD PTR __First$[ebp]
cmp	edx, DWORD PTR __Last$[ebp]
je	SHORT $LN1@Move
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$move@AAUSearchResultMarking@@@std@@YA$$QAUSearchResultMarking@@AAU1@@Z 
add	esp, 4
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	eax, DWORD PTR __Dest$[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR [eax+4], edx
jmp	SHORT $LN2@Move
mov	eax, DWORD PTR __Dest$[ebp]
pop	ebp
ret	0
ENDP
??$_Ptr_cat@USearchResultMarking@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSearchResultMarking@@0@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	al, BYTE PTR __Cat$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$construct@USearchResultMarking@@ABU1@@?$allocator_traits@V?$allocator@USearchResultMarking@@@std@@@std@@SAXAAV?$allocator@USearchResultMarking@@@1@PAUSearchResultMarking@@ABU3@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABUSearchResultMarking@@@std@@YAABUSearchResultMarking@@ABU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	?construct@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@ABU3@@Z 
pop	ebp
ret	0
ENDP
??$forward@ABUSearchResultMarking@@@std@@YAABUSearchResultMarking@@ABU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$construct@USearchResultMarking@@AAU1@@?$allocator_traits@V?$allocator@USearchResultMarking@@@std@@@std@@SAXAAV?$allocator@USearchResultMarking@@@1@PAUSearchResultMarking@@AAU3@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAUSearchResultMarking@@@std@@YAAAUSearchResultMarking@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@USearchResultMarking@@AAU1@@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@AAU2@@Z 
pop	ebp
ret	0
ENDP
??$forward@AAUSearchResultMarking@@@std@@YAAAUSearchResultMarking@@AAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$_Move@PAUFoundInfo@@PAU1@@std@@YAPAUFoundInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z PROC 
push	ebp
mov	ebp, esp
jmp	SHORT $LN3@Move
mov	eax, DWORD PTR __Dest$[ebp]
add	eax, 36					
mov	DWORD PTR __Dest$[ebp], eax
mov	ecx, DWORD PTR __First$[ebp]
add	ecx, 36					
mov	DWORD PTR __First$[ebp], ecx
mov	edx, DWORD PTR __First$[ebp]
cmp	edx, DWORD PTR __Last$[ebp]
je	SHORT $LN1@Move
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$move@AAUFoundInfo@@@std@@YA$$QAUFoundInfo@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Dest$[ebp]
call	??4FoundInfo@@QAEAAU0@ABU0@@Z
jmp	SHORT $LN2@Move
mov	eax, DWORD PTR __Dest$[ebp]
pop	ebp
ret	0
ENDP
??$_Ptr_cat@UFoundInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFoundInfo@@0@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	al, BYTE PTR __Cat$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$construct@UFoundInfo@@ABU1@@?$allocator_traits@V?$allocator@UFoundInfo@@@std@@@std@@SAXAAV?$allocator@UFoundInfo@@@1@PAUFoundInfo@@ABU3@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABUFoundInfo@@@std@@YAABUFoundInfo@@ABU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	?construct@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@ABU3@@Z 
pop	ebp
ret	0
ENDP
??$forward@ABUFoundInfo@@@std@@YAABUFoundInfo@@ABU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$construct@UFoundInfo@@AAU1@@?$allocator_traits@V?$allocator@UFoundInfo@@@std@@@std@@SAXAAV?$allocator@UFoundInfo@@@1@PAUFoundInfo@@AAU3@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAUFoundInfo@@@std@@YAAAUFoundInfo@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@UFoundInfo@@AAU1@@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@AAU2@@Z 
pop	ebp
ret	0
ENDP
??$forward@AAUFoundInfo@@@std@@YAAAUFoundInfo@@AAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$construct@UMenuItemUnit@@U1@@?$allocator_traits@V?$allocator@UMenuItemUnit@@@std@@@std@@SAXAAV?$allocator@UMenuItemUnit@@@1@PAUMenuItemUnit@@$$QAU3@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@UMenuItemUnit@@@std@@YA$$QAUMenuItemUnit@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@UMenuItemUnit@@U1@@?$allocator@UMenuItemUnit@@@std@@QAEXPAUMenuItemUnit@@$$QAU2@@Z 
pop	ebp
ret	0
ENDP
??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR __Al$[ebp]
call	??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z 
pop	ebp
ret	0
ENDP
??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z PROC		
push	ebp
mov	ebp, esp
mov	al, 1
pop	ebp
ret	0
ENDP
??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$allocator@_W@std@@QAE@ABV01@@Z	
push	eax
mov	ecx, DWORD PTR __Left$[ebp]
push	ecx
lea	ecx, DWORD PTR $T1[ebp]
call	??0?$allocator@_W@std@@QAE@ABV01@@Z	
push	eax
call	??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 124				
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+12], 2
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	eax, DWORD PTR _this$[ebp]
jne	SHORT $LN8@Insert
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Where$[ebp+8]
cmp	ecx, DWORD PTR [eax+4]
jb	SHORT $LN8@Insert
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __Where$[ebp+8]
jae	SHORT $LN9@Insert
push	1383					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
push	1384					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T8[ebp], esp
lea	edx, DWORD PTR __Last$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv443[ebp], eax
mov	eax, DWORD PTR tv443[ebp]
mov	DWORD PTR tv417[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 3
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv444[ebp], eax
mov	eax, DWORD PTR tv444[ebp]
mov	DWORD PTR tv420[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 4
mov	BYTE PTR __$EHRec$[ebp+12], 2
call	??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0PB_WI@Z 
add	esp, 32					
mov	DWORD PTR __Count$[ebp], 0
lea	ecx, DWORD PTR __Count$[ebp]
push	ecx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T5[ebp], esp
lea	edx, DWORD PTR __Last$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv446[ebp], eax
mov	eax, DWORD PTR tv446[ebp]
mov	DWORD PTR tv423[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 5
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv447[ebp], eax
mov	eax, DWORD PTR tv447[ebp]
mov	DWORD PTR tv426[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 6
mov	BYTE PTR __$EHRec$[ebp+12], 2
call	??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@0AAI@Z 
add	esp, 28					
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN7@Insert
jmp	$LN6@Insert
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unused_capacity@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Count$[ebp]
jae	$LN5@Insert
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
mov	esi, eax
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
sub	esi, eax
cmp	esi, DWORD PTR __Count$[ebp]
jae	SHORT $LN4@Insert
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow_to@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEII@Z 
mov	DWORD PTR __Capacity$10[ebp], eax
mov	ecx, DWORD PTR __Capacity$10[ebp]
push	ecx
lea	edx, DWORD PTR $T11[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEPAUSearchResultMarking@@I@Z 
mov	DWORD PTR __Newvec$15[ebp], eax
mov	eax, DWORD PTR __Newvec$15[ebp]
mov	DWORD PTR __Ptr$14[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 7
mov	ecx, DWORD PTR __Newvec$15[ebp]
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAUSearchResultMarking@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEPAUSearchResultMarking@@PAU2@00@Z 
mov	DWORD PTR __Ptr$14[ebp], eax
mov	edx, DWORD PTR __Ptr$14[ebp]
push	edx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T9[ebp], esp
lea	eax, DWORD PTR __Last$[ebp]
push	eax
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv449[ebp], eax
mov	ecx, DWORD PTR tv449[ebp]
mov	DWORD PTR tv429[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+12], 8
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T7[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv450[ebp], eax
mov	eax, DWORD PTR tv450[ebp]
mov	DWORD PTR tv432[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 9
mov	BYTE PTR __$EHRec$[ebp+12], 7
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@0PAU2@@Z 
mov	DWORD PTR tv220[ebp], eax
mov	ecx, DWORD PTR tv220[ebp]
mov	DWORD PTR __Ptr$14[ebp], ecx
mov	edx, DWORD PTR __Ptr$14[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAUSearchResultMarking@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEPAUSearchResultMarking@@PAU2@00@Z 
jmp	SHORT $LN12@Insert
mov	eax, DWORD PTR __Ptr$14[ebp]
push	eax
mov	ecx, DWORD PTR __Newvec$15[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXPAUSearchResultMarking@@0@Z 
mov	edx, DWORD PTR __Capacity$10[ebp]
push	edx
mov	eax, DWORD PTR __Newvec$15[ebp]
push	eax
lea	ecx, DWORD PTR $T13[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN26@Insert
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], 2
jmp	SHORT __tryend$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], 2
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Count$[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+4], 0
je	SHORT $LN2@Insert
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXPAUSearchResultMarking@@0@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [ecx+12]
sub	eax, DWORD PTR [edx+4]
sar	eax, 3
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
lea	eax, DWORD PTR $T12[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	ecx, DWORD PTR __Capacity$10[ebp]
mov	edx, DWORD PTR __Newvec$15[ebp]
lea	eax, DWORD PTR [edx+ecx*8]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+12], eax
mov	edx, DWORD PTR __Count$[ebp]
mov	eax, DWORD PTR __Newvec$15[ebp]
lea	ecx, DWORD PTR [eax+edx*8]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Newvec$15[ebp]
mov	DWORD PTR [eax+4], ecx
jmp	$LN6@Insert
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T6[ebp], esp
lea	edx, DWORD PTR __Last$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv452[ebp], eax
mov	eax, DWORD PTR tv452[ebp]
mov	DWORD PTR tv436[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 11		
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv453[ebp], eax
mov	eax, DWORD PTR tv453[ebp]
mov	DWORD PTR tv439[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 12		
mov	BYTE PTR __$EHRec$[ebp+12], 2
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEPAUSearchResultMarking@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@0PAU2@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR __Count$[ebp]
lea	ecx, DWORD PTR [edx+eax*8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR __Where$[ebp+8]
push	ecx
call	??$rotate@PAUSearchResultMarking@@@std@@YAPAUSearchResultMarking@@PAU1@00@Z 
add	esp, 12					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR __Count$[ebp]
lea	edx, DWORD PTR [eax+ecx*8]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR __Where$[ebp+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEXPAUSearchResultMarking@@0@Z 
mov	BYTE PTR __$EHRec$[ebp+12], 1
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+12], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+12], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	40					
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$2 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$3 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$4 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$5 PROC
mov	ecx, DWORD PTR $T8[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$6 PROC
mov	ecx, DWORD PTR $T4[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$7 PROC
mov	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$8 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$9 PROC
mov	ecx, DWORD PTR $T9[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$10 PROC
mov	ecx, DWORD PTR $T7[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$11 PROC
mov	ecx, DWORD PTR $T6[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$12 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-144]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	cl, BYTE PTR __Cat$[ebp]
mov	BYTE PTR [eax], cl
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 124				
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+12], 2
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	eax, DWORD PTR _this$[ebp]
jne	SHORT $LN8@Insert
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Where$[ebp+8]
cmp	ecx, DWORD PTR [eax+4]
jb	SHORT $LN8@Insert
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __Where$[ebp+8]
jae	SHORT $LN9@Insert
push	1383					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
push	1384					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T8[ebp], esp
lea	edx, DWORD PTR __Last$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv443[ebp], eax
mov	eax, DWORD PTR tv443[ebp]
mov	DWORD PTR tv417[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 3
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv444[ebp], eax
mov	eax, DWORD PTR tv444[ebp]
mov	DWORD PTR tv420[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 4
mov	BYTE PTR __$EHRec$[ebp+12], 2
call	??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0PB_WI@Z 
add	esp, 32					
mov	DWORD PTR __Count$[ebp], 0
lea	ecx, DWORD PTR __Count$[ebp]
push	ecx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T5[ebp], esp
lea	edx, DWORD PTR __Last$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv446[ebp], eax
mov	eax, DWORD PTR tv446[ebp]
mov	DWORD PTR tv423[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 5
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv447[ebp], eax
mov	eax, DWORD PTR tv447[ebp]
mov	DWORD PTR tv426[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 6
mov	BYTE PTR __$EHRec$[ebp+12], 2
call	??$_Distance@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@I@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@0AAI@Z 
add	esp, 28					
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN7@Insert
jmp	$LN6@Insert
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unused_capacity@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Count$[ebp]
jae	$LN5@Insert
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
mov	esi, eax
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
sub	esi, eax
cmp	esi, DWORD PTR __Count$[ebp]
jae	SHORT $LN4@Insert
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow_to@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEII@Z 
mov	DWORD PTR __Capacity$10[ebp], eax
mov	ecx, DWORD PTR __Capacity$10[ebp]
push	ecx
lea	edx, DWORD PTR $T11[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEPAUFoundInfo@@I@Z 
mov	DWORD PTR __Newvec$15[ebp], eax
mov	eax, DWORD PTR __Newvec$15[ebp]
mov	DWORD PTR __Ptr$14[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 7
mov	ecx, DWORD PTR __Newvec$15[ebp]
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAUFoundInfo@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEPAUFoundInfo@@PAU2@00@Z 
mov	DWORD PTR __Ptr$14[ebp], eax
mov	edx, DWORD PTR __Ptr$14[ebp]
push	edx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T9[ebp], esp
lea	eax, DWORD PTR __Last$[ebp]
push	eax
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv449[ebp], eax
mov	ecx, DWORD PTR tv449[ebp]
mov	DWORD PTR tv429[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+12], 8
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T7[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv450[ebp], eax
mov	eax, DWORD PTR tv450[ebp]
mov	DWORD PTR tv432[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 9
mov	BYTE PTR __$EHRec$[ebp+12], 7
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@0PAU2@@Z 
mov	DWORD PTR tv220[ebp], eax
mov	ecx, DWORD PTR tv220[ebp]
mov	DWORD PTR __Ptr$14[ebp], ecx
mov	edx, DWORD PTR __Ptr$14[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAUFoundInfo@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEPAUFoundInfo@@PAU2@00@Z 
jmp	SHORT $LN12@Insert
mov	eax, DWORD PTR __Ptr$14[ebp]
push	eax
mov	ecx, DWORD PTR __Newvec$15[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXPAUFoundInfo@@0@Z 
mov	edx, DWORD PTR __Capacity$10[ebp]
push	edx
mov	eax, DWORD PTR __Newvec$15[ebp]
push	eax
lea	ecx, DWORD PTR $T13[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN26@Insert
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], 2
jmp	SHORT __tryend$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], 2
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Count$[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+4], 0
je	SHORT $LN2@Insert
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXPAUFoundInfo@@0@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [ecx+12]
sub	eax, DWORD PTR [edx+4]
cdq
mov	ecx, 36					
idiv	ecx
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T12[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
imul	edx, DWORD PTR __Capacity$10[ebp], 36
add	edx, DWORD PTR __Newvec$15[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+12], edx
imul	ecx, DWORD PTR __Count$[ebp], 36
add	ecx, DWORD PTR __Newvec$15[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Newvec$15[ebp]
mov	DWORD PTR [eax+4], ecx
jmp	$LN6@Insert
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T6[ebp], esp
lea	edx, DWORD PTR __Last$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv452[ebp], eax
mov	eax, DWORD PTR tv452[ebp]
mov	DWORD PTR tv436[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 11		
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv453[ebp], eax
mov	eax, DWORD PTR tv453[ebp]
mov	DWORD PTR tv439[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 12		
mov	BYTE PTR __$EHRec$[ebp+12], 2
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Ucopy@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEPAUFoundInfo@@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@0PAU2@@Z 
imul	ecx, DWORD PTR __Count$[ebp], 36
mov	edx, DWORD PTR _this$[ebp]
add	ecx, DWORD PTR [edx+8]
push	ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
call	??$rotate@PAUFoundInfo@@@std@@YAPAUFoundInfo@@PAU1@00@Z 
add	esp, 12					
imul	eax, DWORD PTR __Count$[ebp], 36
mov	ecx, DWORD PTR _this$[ebp]
add	eax, DWORD PTR [ecx+8]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], eax
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXPAUFoundInfo@@0@Z 
mov	BYTE PTR __$EHRec$[ebp+12], 1
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+12], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+12], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	40					
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$2 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$3 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$4 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$5 PROC
mov	ecx, DWORD PTR $T8[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$6 PROC
mov	ecx, DWORD PTR $T4[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$7 PROC
mov	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$8 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$9 PROC
mov	ecx, DWORD PTR $T9[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$10 PROC
mov	ecx, DWORD PTR $T7[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$11 PROC
mov	ecx, DWORD PTR $T6[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z$12 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-144]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	cl, BYTE PTR __Cat$[ebp]
mov	BYTE PTR [eax], cl
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$?8V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@0@0@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR __Left$[ebp]
call	??$_Equal@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBE_NABV01@@Z 
pop	ebp
ret	0
ENDP
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A 
call	??1_System_error_category@std@@UAE@XZ
pop	ebp
ret	0
ENDP
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A 
call	??0_System_error_category@std@@QAE@XZ	
push	OFFSET ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ 
call	_atexit
add	esp, 4
pop	ebp
ret	0
ENDP
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A 
call	??1_Iostream_error_category@std@@UAE@XZ
pop	ebp
ret	0
ENDP
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A 
call	??0_Iostream_error_category@std@@QAE@XZ	
push	OFFSET ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ 
call	_atexit
add	esp, 4
pop	ebp
ret	0
ENDP
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A 
call	??1_Generic_error_category@std@@UAE@XZ
pop	ebp
ret	0
ENDP
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A 
call	??0_Generic_error_category@std@@QAE@XZ	
push	OFFSET ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ 
call	_atexit
add	esp, 4
pop	ebp
ret	0
ENDP
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBEIXZ 
pop	ebp
ret	0
ENDP
??$_Allocate@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPAV10@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], 1073741823	
ja	SHORT $LN1@Allocate
mov	eax, DWORD PTR __Count$[ebp]
shl	eax, 2
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
call	?_Xbad_alloc@std@@YAXXZ			
mov	eax, DWORD PTR __Ptr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Allocate@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@IPAU10@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], 268435455	
ja	SHORT $LN1@Allocate
mov	eax, DWORD PTR __Count$[ebp]
shl	eax, 4
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
call	?_Xbad_alloc@std@@YAXXZ			
mov	eax, DWORD PTR __Ptr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Uninitialized_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __First$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Val_type@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
mov	edx, DWORD PTR __Pval$[ebp]
push	edx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninit_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 24					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@1@PAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU31@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$_Copy_backward@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Copy_backward@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$fill@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0ABV10@@Z PROC 
push	ebp
mov	ebp, esp
push	2622					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Debug_range@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0PB_WI@Z 
add	esp, 16					
mov	edx, DWORD PTR __Val$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
call	??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z 
add	esp, 4
push	eax
call	??$_Fill@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0ABV10@@Z 
add	esp, 12					
pop	ebp
ret	0
ENDP
??$addressof@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$_Umove@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PAV21@00@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninitialized_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??$addressof@$$CBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$_Allocate@_W@std@@YAPA_WIPA_W@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], 2147483647	
ja	SHORT $LN1@Allocate
mov	eax, DWORD PTR __Count$[ebp]
shl	eax, 1
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
call	?_Xbad_alloc@std@@YAXXZ			
mov	eax, DWORD PTR __Ptr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Allocate@D@std@@YAPADIPAD@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], -1
ja	SHORT $LN1@Allocate
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
call	?_Xbad_alloc@std@@YAXXZ			
mov	eax, DWORD PTR __Ptr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Allocate@USearchResultMarking@@@std@@YAPAUSearchResultMarking@@IPAU1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], 536870911	
ja	SHORT $LN1@Allocate
mov	eax, DWORD PTR __Count$[ebp]
shl	eax, 3
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
call	?_Xbad_alloc@std@@YAXXZ			
mov	eax, DWORD PTR __Ptr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Allocate@UFoundInfo@@@std@@YAPAUFoundInfo@@IPAU1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], 119304647	
ja	SHORT $LN1@Allocate
imul	eax, DWORD PTR __Count$[ebp], 36
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
call	?_Xbad_alloc@std@@YAXXZ			
mov	eax, DWORD PTR __Ptr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@U?$pair@$$CBHUStyle@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHUStyle@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@U?$pair@$$CBHUStyle@@@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@1@PAU?$pair@$$CBHUStyle@@@1@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$destroy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@1@PAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$_Allocate@UMenuItemUnit@@@std@@YAPAUMenuItemUnit@@IPAU1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], 71582788	
ja	SHORT $LN1@Allocate
imul	eax, DWORD PTR __Count$[ebp], 60
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
call	?_Xbad_alloc@std@@YAXXZ			
mov	eax, DWORD PTR __Ptr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], 153391689	
ja	SHORT $LN1@Allocate
imul	eax, DWORD PTR __Count$[ebp], 28
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
call	?_Xbad_alloc@std@@YAXXZ			
mov	eax, DWORD PTR __Ptr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR __Ptr$[ebp], 0
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN4@Allocate
jmp	SHORT $LN3@Allocate
cmp	DWORD PTR __Count$[ebp], 536870911	
ja	SHORT $LN1@Allocate
mov	eax, DWORD PTR __Count$[ebp]
shl	eax, 3
push	eax
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR __Ptr$[ebp], eax
cmp	DWORD PTR __Ptr$[ebp], 0
jne	SHORT $LN3@Allocate
call	?_Xbad_alloc@std@@YAXXZ			
mov	eax, DWORD PTR __Ptr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@1@PAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$addressof@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@0@AAPAU10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z 
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	edx, DWORD PTR $T2[ebp]
or	edx, 1
mov	DWORD PTR $T2[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$0 PROC
lea	ecx, DWORD PTR __Tmp$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$1 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN5@operator
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Off$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Pvector$[ebp]
push	eax
mov	ecx, DWORD PTR __Parg$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR ___that$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR __Off$[ebp]
lea	esi, DWORD PTR [ecx+edx*4]
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	esi, DWORD PTR [eax+4]
jb	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [edx+ecx*4]
cmp	DWORD PTR [eax+8], edx
jae	SHORT $LN2@operator
push	159					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	160					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
push	0
push	160					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DAI@BKGFFCGA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [ecx+edx*4]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR _this$[ebp]
pop	esi
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Parg$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR __Pvector$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@ABU01@@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Iterator_base12@std@@QAE@XZ		
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@1@PAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$addressof@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@U_Container_proxy@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Umove@PAUSearchResultMarking@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEPAUSearchResultMarking@@PAU2@00@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninitialized_move@PAUSearchResultMarking@@PAU1@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@YAPAUSearchResultMarking@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??$_Umove@PAUFoundInfo@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEPAUFoundInfo@@PAU2@00@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninitialized_move@PAUFoundInfo@@PAU1@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@@std@@YAPAUFoundInfo@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR __Plist$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base0@std@@QAEXPBX@Z	
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$_Umove@PAUMenuItemUnit@@@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEPAUMenuItemUnit@@PAU2@00@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninitialized_move@PAUMenuItemUnit@@PAU1@U?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@YAPAUMenuItemUnit@@PAU1@00AAU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@YAXPAUMenuItemUnit@@0AAU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@UMenuItemUnit@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUMenuItemUnit@@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@YAXPAUMenuItemUnit@@0AAU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Uninitialized_move@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@PAV10@00AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@YAXPAPAUHMENU__@@0AAU?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@PAUHMENU__@@PAU1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAUHMENU__@@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@YAXPAPAUHMENU__@@0AAU?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	8
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR _<_Args_0>$[ebp]
push	ecx
call	??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z 
add	esp, 4
mov	edx, DWORD PTR [eax]
mov	eax, DWORD PTR [eax+4]
mov	ecx, DWORD PTR $T3[ebp]
mov	DWORD PTR [ecx], edx
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR $T3[ebp]
mov	DWORD PTR tv74[ebp], edx
jmp	SHORT $LN4@construct
mov	DWORD PTR tv74[ebp], 0
mov	eax, DWORD PTR tv74[ebp]
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$addressof@U?$pair@$$CBHUStyle@@@std@@@std@@YAPAU?$pair@$$CBHUStyle@@@0@AAU10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$addressof@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@YAPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@0@AAU10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@YAXPAUSearchResultMarking@@0AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@USearchResultMarking@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSearchResultMarking@@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@YAXPAUSearchResultMarking@@0AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@@std@@YAXPAUFoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@UFoundInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFoundInfo@@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@@std@@YAXPAUFoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$?0V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$?0U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Last$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$addressof@_W@std@@YAPA_WAA_W@Z PROC			
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$addressof@D@std@@YAPADAAD@Z PROC			
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAPAD@std@@YAAAPADAAPAD@Z	
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
?pointer_to@?$pointer_traits@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@SAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	??$addressof@$$CBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@ABV10@@Z 
add	esp, 4
pop	ebp
ret	0
ENDP
??$_Move@PAUSearchResultMarking@@PAU1@@std@@YAPAUSearchResultMarking@@PAU1@00@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@USearchResultMarking@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUSearchResultMarking@@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Move@PAUSearchResultMarking@@PAU1@@std@@YAPAUSearchResultMarking@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$construct@USearchResultMarking@@ABU1@@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@ABU2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABUSearchResultMarking@@@std@@YAABUSearchResultMarking@@ABU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@USearchResultMarking@@ABU1@@?$allocator_traits@V?$allocator@USearchResultMarking@@@std@@@std@@SAXAAV?$allocator@USearchResultMarking@@@1@PAUSearchResultMarking@@ABU3@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$construct@USearchResultMarking@@AAU1@@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@AAU2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAUSearchResultMarking@@@std@@YAAAUSearchResultMarking@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@USearchResultMarking@@AAU1@@?$allocator_traits@V?$allocator@USearchResultMarking@@@std@@@std@@SAXAAV?$allocator@USearchResultMarking@@@1@PAUSearchResultMarking@@AAU3@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$addressof@$$CBUSearchResultMarking@@@std@@YAPBUSearchResultMarking@@ABU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$_Move@PAUFoundInfo@@PAU1@@std@@YAPAUFoundInfo@@PAU1@00@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __First$[ebp]
push	ecx
call	??$_Ptr_cat@UFoundInfo@@U1@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAUFoundInfo@@0@Z 
add	esp, 8
mov	BYTE PTR $T1[ebp], al
movzx	edx, BYTE PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR __Dest$[ebp]
push	eax
mov	ecx, DWORD PTR __Last$[ebp]
push	ecx
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	??$_Move@PAUFoundInfo@@PAU1@@std@@YAPAUFoundInfo@@PAU1@00U_Nonscalar_ptr_iterator_tag@0@@Z 
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$construct@UFoundInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@ABU2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@ABUFoundInfo@@@std@@YAABUFoundInfo@@ABU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@UFoundInfo@@ABU1@@?$allocator_traits@V?$allocator@UFoundInfo@@@std@@@std@@SAXAAV?$allocator@UFoundInfo@@@1@PAUFoundInfo@@ABU3@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$construct@UFoundInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@AAU2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@AAUFoundInfo@@@std@@YAAAUFoundInfo@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@UFoundInfo@@AAU1@@?$allocator_traits@V?$allocator@UFoundInfo@@@std@@@std@@SAXAAV?$allocator@UFoundInfo@@@1@PAUFoundInfo@@AAU3@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$addressof@$$CBUFoundInfo@@@std@@YAPBUFoundInfo@@ABU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
?pointer_to@?$pointer_traits@PAU?$pair@$$CBHUStyle@@@std@@@std@@SAPAU?$pair@$$CBHUStyle@@@2@AAU32@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	??$addressof@U?$pair@$$CBHUStyle@@@std@@@std@@YAPAU?$pair@$$CBHUStyle@@@0@AAU10@@Z 
add	esp, 4
pop	ebp
ret	0
ENDP
?pointer_to@?$pointer_traits@PAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@SAPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@AAU32@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	??$addressof@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@YAPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@0@AAU10@@Z 
add	esp, 4
pop	ebp
ret	0
ENDP
??$construct@UMenuItemUnit@@U1@@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEXPAUMenuItemUnit@@$$QAU2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@UMenuItemUnit@@@std@@YA$$QAUMenuItemUnit@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@UMenuItemUnit@@U1@@?$allocator_traits@V?$allocator@UMenuItemUnit@@@std@@@std@@SAXAAV?$allocator@UMenuItemUnit@@@1@PAUMenuItemUnit@@$$QAU3@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$forward@UMenuItemUnit@@@std@@YA$$QAUMenuItemUnit@@AAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$addressof@UMenuItemUnit@@@std@@YAPAUMenuItemUnit@@AAU1@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _<_Args_0>$[ebp]
push	eax
call	??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
call	??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAXAAV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV31@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Val$[ebp]
pop	ebp
ret	0
ENDP
??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 100				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 1
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T7[ebp], esp
lea	eax, DWORD PTR __Last$[ebp]
push	eax
call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv191[ebp], eax
mov	ecx, DWORD PTR tv191[ebp]
mov	DWORD PTR tv174[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T6[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv192[ebp], eax
mov	eax, DWORD PTR tv192[ebp]
mov	DWORD PTR tv178[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T2[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ 
mov	DWORD PTR tv193[ebp], eax
mov	edx, DWORD PTR tv193[ebp]
mov	DWORD PTR tv180[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 4
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T5[ebp], esp
mov	eax, DWORD PTR tv180[ebp]
push	eax
call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv194[ebp], eax
mov	ecx, DWORD PTR tv194[ebp]
mov	DWORD PTR tv183[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ 
mov	DWORD PTR tv195[ebp], eax
mov	eax, DWORD PTR tv195[ebp]
mov	DWORD PTR tv185[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 6
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
mov	edx, DWORD PTR tv185[ebp]
push	edx
call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv196[ebp], eax
mov	eax, DWORD PTR tv196[ebp]
mov	DWORD PTR tv188[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 7
mov	BYTE PTR __$EHRec$[ebp+8], 9
mov	ecx, DWORD PTR _this$[ebp]
call	?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z 
mov	DWORD PTR tv175[ebp], eax
mov	ecx, DWORD PTR tv175[ebp]
mov	DWORD PTR $T8[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 8
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR $T8[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	24					
ENDP
__unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 PROC
mov	ecx, DWORD PTR $T7[ebp]
jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 PROC
mov	ecx, DWORD PTR $T6[ebp]
jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 PROC
mov	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 PROC
mov	ecx, DWORD PTR $T4[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-104]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 28					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv78[ebp], eax
mov	edx, DWORD PTR tv78[ebp]
mov	DWORD PTR tv77[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv77[ebp]
call	??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z 
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR $T3[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Pstring$[ebp]
push	eax
mov	ecx, DWORD PTR __Parg$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR ___that$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@Compat
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	esi, eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	esi, eax
je	SHORT $LN3@Compat
push	250					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
test	eax, eax
je	SHORT $LN5@Compat
xor	ecx, ecx
jne	SHORT $LN6@Compat
push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	251					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@Compat
int	3
push	0
push	251					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
pop	esi
mov	esp, ebp
pop	ebp
ret	4
ENDP
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Right$[ebp]
mov	eax, DWORD PTR [ecx+8]
cmp	eax, DWORD PTR [edx+8]
jne	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Right$[ebp]
mov	eax, DWORD PTR [ecx+8]
sub	eax, DWORD PTR [edx+8]
sar	eax, 1
mov	esp, ebp
pop	ebp
ret	4
ENDP
??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, eax
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+8], eax
jb	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, eax
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	esi, eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	edx, DWORD PTR [eax+20]
lea	eax, DWORD PTR [esi+edx*2]
mov	ecx, DWORD PTR _this$[ebp]
cmp	eax, DWORD PTR [ecx+8]
ja	SHORT $LN2@operator
push	79					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	edx, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	edx, edx
je	SHORT $LN5@operator
xor	eax, eax
jne	SHORT $LN6@operator
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	80					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
push	0
push	80					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
pop	esi
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR __Pstring$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Parg$[ebp]
mov	DWORD PTR [ecx+8], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@ABU01@@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Iterator_base12@std@@QAE@XZ		
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR __Left$[ebp]
push	ecx
call	??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z 
add	esp, 8
movzx	edx, al
test	edx, edx
jne	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Arg$[ebp]
pop	ebp
ret	0
ENDP
??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V21@1@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V21@1@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T6[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 3
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Where$[ebp+8]
sub	ecx, DWORD PTR [eax+4]
sar	ecx, 3
mov	DWORD PTR __Off$[ebp], ecx
lea	edx, DWORD PTR __First$[ebp]
push	edx
lea	eax, DWORD PTR $T7[ebp]
push	eax
call	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@0@@Z 
add	esp, 8
mov	cl, BYTE PTR [eax]
mov	BYTE PTR $T8[ebp], cl
movzx	edx, BYTE PTR $T8[ebp]
push	edx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T5[ebp], esp
lea	eax, DWORD PTR __Last$[ebp]
push	eax
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv187[ebp], eax
mov	ecx, DWORD PTR tv187[ebp]
mov	DWORD PTR tv171[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 4
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv188[ebp], eax
mov	eax, DWORD PTR tv188[ebp]
mov	DWORD PTR tv174[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 5
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR __Where$[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv189[ebp], eax
mov	eax, DWORD PTR tv189[ebp]
mov	DWORD PTR tv177[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 6
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z 
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv191[ebp], eax
mov	ecx, DWORD PTR tv191[ebp]
mov	DWORD PTR tv179[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 7
mov	ecx, DWORD PTR tv179[ebp]
call	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE?AV01@H@Z 
mov	edx, DWORD PTR $T6[ebp]
or	edx, 1
mov	DWORD PTR $T6[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	40					
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V21@1@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V21@1@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V21@1@Z$2 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V21@1@Z$3 PROC
mov	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V21@1@Z$4 PROC
mov	ecx, DWORD PTR $T4[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V21@1@Z$5 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V21@1@Z$6 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V21@1@Z$7 PROC
mov	eax, DWORD PTR $T6[ebp]
and	eax, 1
je	$LN11@insert
and	DWORD PTR $T6[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V21@1@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-76]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V21@1@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V21@1@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V21@1@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T6[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 3
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Where$[ebp+8]
sub	ecx, DWORD PTR [eax+4]
mov	eax, ecx
cdq
mov	ecx, 36					
idiv	ecx
mov	DWORD PTR __Off$[ebp], eax
lea	edx, DWORD PTR __First$[ebp]
push	edx
lea	eax, DWORD PTR $T7[ebp]
push	eax
call	??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@0@@Z 
add	esp, 8
mov	cl, BYTE PTR [eax]
mov	BYTE PTR $T8[ebp], cl
movzx	edx, BYTE PTR $T8[ebp]
push	edx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T5[ebp], esp
lea	eax, DWORD PTR __Last$[ebp]
push	eax
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv187[ebp], eax
mov	ecx, DWORD PTR tv187[ebp]
mov	DWORD PTR tv171[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 4
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv188[ebp], eax
mov	eax, DWORD PTR tv188[ebp]
mov	DWORD PTR tv174[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 5
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR __Where$[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv189[ebp], eax
mov	eax, DWORD PTR tv189[ebp]
mov	DWORD PTR tv177[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 6
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@1Uforward_iterator_tag@1@@Z 
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv191[ebp], eax
mov	ecx, DWORD PTR tv191[ebp]
mov	DWORD PTR tv179[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 7
mov	ecx, DWORD PTR tv179[ebp]
call	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE?AV01@H@Z 
mov	edx, DWORD PTR $T6[ebp]
or	edx, 1
mov	DWORD PTR $T6[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	40					
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V21@1@Z$0 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V21@1@Z$1 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V21@1@Z$2 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V21@1@Z$3 PROC
mov	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V21@1@Z$4 PROC
mov	ecx, DWORD PTR $T4[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V21@1@Z$5 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V21@1@Z$6 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V21@1@Z$7 PROC
mov	eax, DWORD PTR $T6[ebp]
and	eax, 1
je	$LN11@insert
and	DWORD PTR $T6[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V21@1@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-76]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V21@1@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBEHABV01@@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE?AV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE?AV01@H@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAEAAV01@H@Z 
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	edx, DWORD PTR $T2[ebp]
or	edx, 1
mov	DWORD PTR $T2[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE?AV01@H@Z$0 PROC
lea	ecx, DWORD PTR __Tmp$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE?AV01@H@Z$1 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN5@operator
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE?AV01@H@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE?AV01@H@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAEAAV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Off$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAEAAV01@H@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBEPAUSearchResultMarking@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@PAUSearchResultMarking@@PBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@PAUSearchResultMarking@@PBU_Container_base12@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Pvector$[ebp]
push	eax
mov	ecx, DWORD PTR __Parg$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@PAUSearchResultMarking@@PBU_Container_base12@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@PAUSearchResultMarking@@PBU_Container_base12@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@PAUSearchResultMarking@@PBU_Container_base12@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@PAUSearchResultMarking@@PBU_Container_base12@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR ___that$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBEXABV12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@Compat
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	esi, eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	esi, eax
je	SHORT $LN3@Compat
push	240					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
test	eax, eax
je	SHORT $LN5@Compat
xor	ecx, ecx
jne	SHORT $LN6@Compat
push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	241					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@Compat
int	3
push	0
push	241					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1OM@FDKPGEKG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
pop	esi
mov	esp, ebp
pop	ebp
ret	4
ENDP
??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBEXABV12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Right$[ebp]
mov	eax, DWORD PTR [ecx+8]
cmp	eax, DWORD PTR [edx+8]
jae	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBEXABV12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Right$[ebp]
mov	eax, DWORD PTR [ecx+8]
cmp	eax, DWORD PTR [edx+8]
jne	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBEHABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBEXABV12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Right$[ebp]
mov	eax, DWORD PTR [ecx+8]
sub	eax, DWORD PTR [edx+8]
sar	eax, 3
mov	esp, ebp
pop	ebp
ret	4
ENDP
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAEAAV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR __Off$[ebp]
lea	esi, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	esi, DWORD PTR [eax+4]
jb	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [edx+ecx*8]
cmp	DWORD PTR [eax+8], edx
jae	SHORT $LN2@operator
push	159					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	160					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
push	0
push	160					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1PE@CBHCGKJA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [ecx+edx*8]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	eax, DWORD PTR _this$[ebp]
pop	esi
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@PAUSearchResultMarking@@PBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@PAUSearchResultMarking@@PBU_Container_base12@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Parg$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR __Pvector$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@PAUSearchResultMarking@@PBU_Container_base12@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@PAUSearchResultMarking@@PBU_Container_base12@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@PAUSearchResultMarking@@PBU_Container_base12@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@ABU01@@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Iterator_base12@std@@QAE@XZ		
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@USearchResultMarking@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??G?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBEHABV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBEHABV01@@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE?AV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE?AV01@H@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAEAAV01@H@Z 
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	edx, DWORD PTR $T2[ebp]
or	edx, 1
mov	DWORD PTR $T2[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE?AV01@H@Z$0 PROC
lea	ecx, DWORD PTR __Tmp$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE?AV01@H@Z$1 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN5@operator
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE?AV01@H@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE?AV01@H@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAEAAV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Off$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAEAAV01@H@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBEAAUFoundInfo@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBEABUFoundInfo@@XZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBEPAUFoundInfo@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@PAUFoundInfo@@PBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@PAUFoundInfo@@PBU_Container_base12@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Pvector$[ebp]
push	eax
mov	ecx, DWORD PTR __Parg$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@PAUFoundInfo@@PBU_Container_base12@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@PAUFoundInfo@@PBU_Container_base12@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@PAUFoundInfo@@PBU_Container_base12@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@PAUFoundInfo@@PBU_Container_base12@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR ___that$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBEXABV12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@Compat
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	esi, eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	esi, eax
je	SHORT $LN3@Compat
push	240					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
test	eax, eax
je	SHORT $LN5@Compat
xor	ecx, ecx
jne	SHORT $LN6@Compat
push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	241					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@Compat
int	3
push	0
push	241					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1NI@GDBELEHK@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
pop	esi
mov	esp, ebp
pop	ebp
ret	4
ENDP
??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBEXABV12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Right$[ebp]
mov	eax, DWORD PTR [ecx+8]
cmp	eax, DWORD PTR [edx+8]
jae	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBEXABV12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Right$[ebp]
mov	eax, DWORD PTR [ecx+8]
cmp	eax, DWORD PTR [edx+8]
jne	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??G?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBEHABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBEXABV12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Right$[ebp]
mov	eax, DWORD PTR [ecx+8]
sub	eax, DWORD PTR [edx+8]
cdq
mov	ecx, 36					
idiv	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAEAAV01@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
imul	esi, DWORD PTR __Off$[ebp], 36
mov	eax, DWORD PTR _this$[ebp]
add	esi, DWORD PTR [eax+8]
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	esi, DWORD PTR [eax+4]
jb	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
imul	ecx, DWORD PTR __Off$[ebp], 36
mov	edx, DWORD PTR _this$[ebp]
add	ecx, DWORD PTR [edx+8]
cmp	DWORD PTR [eax+8], ecx
jae	SHORT $LN2@operator
push	159					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	160					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
push	0
push	160					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1OA@KCPFBLG@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
imul	eax, DWORD PTR __Off$[ebp], 36
mov	ecx, DWORD PTR _this$[ebp]
add	eax, DWORD PTR [ecx+8]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], eax
mov	eax, DWORD PTR _this$[ebp]
pop	esi
mov	esp, ebp
pop	ebp
ret	4
ENDP
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBEABUFoundInfo@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
cmp	edx, DWORD PTR [eax+4]
jb	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+8]
ja	SHORT $LN2@operator
push	72					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	73					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
push	0
push	73					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1NO@ECLJCGOH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@PAUFoundInfo@@PBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@PAUFoundInfo@@PBU_Container_base12@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Parg$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR __Pvector$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@PAUFoundInfo@@PBU_Container_base12@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@PAUFoundInfo@@PBU_Container_base12@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@PAUFoundInfo@@PBU_Container_base12@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@ABU01@@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Iterator_base12@std@@QAE@XZ		
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@UFoundInfo@@HPBU3@ABU3@U_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??__F?EmptyFoundInfo@Finder@@0UFoundInfo@@A@@YAXXZ PROC	
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?EmptyFoundInfo@Finder@@0UFoundInfo@@A 
call	??1FoundInfo@@QAE@XZ
pop	ebp
ret	0
ENDP
??__E?EmptyFoundInfo@Finder@@0UFoundInfo@@A@@YAXXZ PROC	
push	ebp
mov	ebp, esp
push	OFFSET $SG170932
push	0
push	0
mov	ecx, OFFSET ?EmptyFoundInfo@Finder@@0UFoundInfo@@A 
call	??0FoundInfo@@QAE@HHPB_W@Z		
push	OFFSET ??__F?EmptyFoundInfo@Finder@@0UFoundInfo@@A@@YAXXZ 
call	_atexit
add	esp, 4
pop	ebp
ret	0
ENDP
??$?9V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@0@0@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR __Left$[ebp]
push	ecx
call	??$?8V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@0@0@Z 
add	esp, 8
movzx	edx, al
test	edx, edx
jne	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@XZ
ENDP
__ehhandler$??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??E?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??E?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAEAAV01@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	eax, DWORD PTR __Right$[ebp]
push	eax
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv95[ebp], eax
mov	ecx, DWORD PTR tv95[ebp]
mov	DWORD PTR tv92[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z 
mov	DWORD PTR tv93[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Right$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z$0 PROC
lea	ecx, DWORD PTR __Right$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z$1 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@ABV01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@ABV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@ABV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??E?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAEAAV01@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??F?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEAAV01@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??C?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBEPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??D?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@XZ 
push	eax
call	?pointer_to@?$pointer_traits@PBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@SAPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@ABV32@@Z 
add	esp, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
??D?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??D?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??F?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEAAV01@XZ 
mov	ecx, eax
call	??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@XZ 
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Tmp$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR $T2[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??D?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@XZ$0 PROC
lea	ecx, DWORD PTR __Tmp$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??D?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??D?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?base@?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?base@?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?base@?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@base
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?base@?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?base@?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
lea	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Right$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$??0?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z$0 PROC
lea	ecx, DWORD PTR __Right$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??0?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR ___that$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR [ecx+8], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEXABV12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@Compat
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	esi, eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	esi, eax
je	SHORT $LN3@Compat
push	240					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
test	eax, eax
je	SHORT $LN5@Compat
xor	ecx, ecx
jne	SHORT $LN6@Compat
push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	241					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@Compat
int	3
push	0
push	241					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1BHK@KDGLPCFL@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
pop	esi
mov	esp, ebp
pop	ebp
ret	4
ENDP
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEXABV12@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Right$[ebp]
mov	eax, DWORD PTR [ecx+8]
cmp	eax, DWORD PTR [edx+8]
jne	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??F?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
cmp	edx, DWORD PTR [eax+4]
ja	SHORT $LN2@operator
push	130					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EE@OEIJAKGE@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	131					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
push	0
push	131					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1BIC@INAJJAHA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
sub	ecx, 28					
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QBEABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
cmp	edx, DWORD PTR [eax+4]
jb	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+8]
ja	SHORT $LN2@operator
push	72					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	73					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
push	0
push	73					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1BIA@PLAJHLBH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Parg$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR __Pvector$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@ABU01@@Z	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Iterator_base12@std@@QAE@XZ		
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??__F?_options@FindReplaceDlg@@2UFindOption@@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A 
call	??1FindOption@@QAE@XZ
pop	ebp
ret	0
ENDP
??__E?_options@FindReplaceDlg@@2UFindOption@@A@@YAXXZ PROC 
push	ebp
mov	ebp, esp
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A 
call	??0FindOption@@QAE@XZ			
push	OFFSET ??__F?_options@FindReplaceDlg@@2UFindOption@@A@@YAXXZ 
call	_atexit
add	esp, 4
pop	ebp
ret	0
ENDP
?adjustSizeAndPos@Progress@@AAE?AUtagRECT@@HH@Z PROC	
push	ebp
mov	ebp, esp
sub	esp, 64					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR _maxWin$[ebp]
push	eax
call	DWORD PTR __imp__GetDesktopWindow@0
push	eax
call	DWORD PTR __imp__GetWindowRect@8
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+8], 0
je	SHORT $LN8@adjustSize
lea	edx, DWORD PTR _biasWin$1[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	DWORD PTR __imp__GetWindowRect@8
mov	eax, DWORD PTR _biasWin$1[ebp]
add	eax, DWORD PTR _biasWin$1[ebp+8]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _center$[ebp], eax
mov	eax, DWORD PTR _biasWin$1[ebp+4]
add	eax, DWORD PTR _biasWin$1[ebp+12]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _center$[ebp+4], eax
jmp	SHORT $LN7@adjustSize
mov	eax, DWORD PTR _maxWin$[ebp]
add	eax, DWORD PTR _maxWin$[ebp+8]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _center$[ebp], eax
mov	eax, DWORD PTR _maxWin$[ebp+4]
add	eax, DWORD PTR _maxWin$[ebp+12]
cdq
sub	eax, edx
sar	eax, 1
mov	DWORD PTR _center$[ebp+4], eax
mov	edx, DWORD PTR _maxWin$[ebp]
mov	DWORD PTR _win$[ebp], edx
mov	eax, DWORD PTR _maxWin$[ebp+4]
mov	DWORD PTR _win$[ebp+4], eax
mov	ecx, DWORD PTR _maxWin$[ebp+8]
mov	DWORD PTR _win$[ebp+8], ecx
mov	edx, DWORD PTR _maxWin$[ebp+12]
mov	DWORD PTR _win$[ebp+12], edx
mov	eax, DWORD PTR _win$[ebp]
add	eax, DWORD PTR _width$[ebp]
mov	DWORD PTR _win$[ebp+8], eax
mov	ecx, DWORD PTR _win$[ebp+4]
add	ecx, DWORD PTR _height$[ebp]
mov	DWORD PTR _win$[ebp+12], ecx
push	-20					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	DWORD PTR __imp__GetWindowLongW@8
push	eax
push	0
push	-16					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	DWORD PTR __imp__GetWindowLongW@8
push	eax
lea	eax, DWORD PTR _win$[ebp]
push	eax
call	DWORD PTR __imp__AdjustWindowRectEx@16
mov	ecx, DWORD PTR _win$[ebp+8]
sub	ecx, DWORD PTR _win$[ebp]
mov	DWORD PTR _width$[ebp], ecx
mov	edx, DWORD PTR _win$[ebp+12]
sub	edx, DWORD PTR _win$[ebp+4]
mov	DWORD PTR _height$[ebp], edx
mov	eax, DWORD PTR _maxWin$[ebp+8]
sub	eax, DWORD PTR _maxWin$[ebp]
cmp	DWORD PTR _width$[ebp], eax
jge	SHORT $LN6@adjustSize
mov	eax, DWORD PTR _width$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	ecx, DWORD PTR _center$[ebp]
sub	ecx, eax
mov	DWORD PTR _win$[ebp], ecx
jns	SHORT $LN5@adjustSize
mov	DWORD PTR _win$[ebp], 0
mov	edx, DWORD PTR _win$[ebp]
add	edx, DWORD PTR _width$[ebp]
mov	DWORD PTR _win$[ebp+8], edx
jmp	SHORT $LN4@adjustSize
mov	eax, DWORD PTR _maxWin$[ebp]
mov	DWORD PTR _win$[ebp], eax
mov	ecx, DWORD PTR _maxWin$[ebp+8]
mov	DWORD PTR _win$[ebp+8], ecx
mov	edx, DWORD PTR _maxWin$[ebp+12]
sub	edx, DWORD PTR _maxWin$[ebp+4]
cmp	DWORD PTR _height$[ebp], edx
jge	SHORT $LN3@adjustSize
mov	eax, DWORD PTR _height$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	ecx, DWORD PTR _center$[ebp+4]
sub	ecx, eax
mov	DWORD PTR _win$[ebp+4], ecx
jns	SHORT $LN2@adjustSize
mov	DWORD PTR _win$[ebp+4], 0
mov	edx, DWORD PTR _win$[ebp+4]
add	edx, DWORD PTR _height$[ebp]
mov	DWORD PTR _win$[ebp+12], edx
jmp	SHORT $LN1@adjustSize
mov	eax, DWORD PTR _maxWin$[ebp+4]
mov	DWORD PTR _win$[ebp+4], eax
mov	ecx, DWORD PTR _maxWin$[ebp+12]
mov	DWORD PTR _win$[ebp+12], ecx
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
mov	eax, DWORD PTR _win$[ebp]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR _win$[ebp+4]
mov	DWORD PTR [edx+4], ecx
mov	eax, DWORD PTR _win$[ebp+8]
mov	DWORD PTR [edx+8], eax
mov	ecx, DWORD PTR _win$[ebp+12]
mov	DWORD PTR [edx+12], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?createProgressWindow@Progress@@AAEHXZ PROC		
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
push	0
push	0
push	-2147483648				
push	-2147483648				
push	-2147483648				
push	-2147483648				
push	-2134900736				
mov	eax, DWORD PTR _this$[ebp]
add	eax, 12					
push	eax
push	OFFSET ?cClassName@Progress@@0QB_WB	
push	904					
call	DWORD PTR __imp__CreateWindowExW@48
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+4], 0
jne	SHORT $LN3@createProg
or	eax, -1
jmp	$LN4@createProg
mov	DWORD PTR _width$[ebp], 610		
mov	DWORD PTR _height$[ebp], 70		
mov	eax, DWORD PTR _height$[ebp]
push	eax
mov	ecx, DWORD PTR _width$[ebp]
push	ecx
lea	edx, DWORD PTR _win$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?adjustSizeAndPos@Progress@@AAE?AUtagRECT@@HH@Z 
push	1
mov	eax, DWORD PTR _win$[ebp+12]
sub	eax, DWORD PTR _win$[ebp+4]
push	eax
mov	ecx, DWORD PTR _win$[ebp+8]
sub	ecx, DWORD PTR _win$[ebp]
push	ecx
mov	edx, DWORD PTR _win$[ebp+4]
push	edx
mov	eax, DWORD PTR _win$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	DWORD PTR __imp__MoveWindow@24
lea	eax, DWORD PTR _win$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	DWORD PTR __imp__GetClientRect@8
mov	eax, DWORD PTR _win$[ebp+8]
sub	eax, DWORD PTR _win$[ebp]
mov	DWORD PTR _width$[ebp], eax
mov	ecx, DWORD PTR _win$[ebp+12]
sub	ecx, DWORD PTR _win$[ebp+4]
mov	DWORD PTR _height$[ebp], ecx
push	0
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
push	20					
mov	eax, DWORD PTR _width$[ebp]
sub	eax, 10					
push	eax
push	5
push	5
push	1342210048				
push	OFFSET $SG174171
push	OFFSET $SG174172
push	0
call	DWORD PTR __imp__CreateWindowExW@48
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+276], eax
push	17					
call	DWORD PTR __imp__GetStockObject@4
mov	DWORD PTR _hf$[ebp], eax
cmp	DWORD PTR _hf$[ebp], 0
je	SHORT $LN2@createProg
push	1
mov	edx, DWORD PTR _hf$[ebp]
push	edx
push	48					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+276]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
push	0
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
push	10					
mov	eax, DWORD PTR _width$[ebp]
sub	eax, 10					
push	eax
push	25					
push	5
push	1342177281				
push	OFFSET $SG174185
push	OFFSET $SG174186
push	0
call	DWORD PTR __imp__CreateWindowExW@48
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+280], eax
push	6553600					
push	0
push	1025					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+280]
push	eax
call	DWORD PTR __imp__SendMessageW@16
push	0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
push	0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
push	25					
push	80					
mov	edx, DWORD PTR _height$[ebp]
sub	edx, 30					
push	edx
mov	eax, DWORD PTR _width$[ebp]
sub	eax, 80					
cdq
sub	eax, edx
sar	eax, 1
push	eax
push	1342177281				
push	OFFSET $SG174195
push	OFFSET $SG174196
push	0
call	DWORD PTR __imp__CreateWindowExW@48
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+284], eax
cmp	DWORD PTR _hf$[ebp], 0
je	SHORT $LN1@createProg
push	1
mov	edx, DWORD PTR _hf$[ebp]
push	edx
push	48					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+284]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	DWORD PTR __imp__UpdateWindow@4
xor	eax, eax
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?thread@Progress@@AAEHXZ PROC				
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?createProgressWindow@Progress@@AAEHXZ	
mov	DWORD PTR _r$[ebp], eax
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+272]
push	ecx
call	DWORD PTR __imp__SetEvent@4
cmp	DWORD PTR _r$[ebp], 0
je	SHORT $LN2@thread
mov	eax, DWORD PTR _r$[ebp]
jmp	SHORT $LN4@thread
push	0
push	0
push	0
lea	edx, DWORD PTR _msg$[ebp]
push	edx
call	DWORD PTR __imp__GetMessageW@16
mov	DWORD PTR _r$[ebp], eax
cmp	DWORD PTR _r$[ebp], 0
je	SHORT $LN1@thread
cmp	DWORD PTR _r$[ebp], -1
je	SHORT $LN1@thread
lea	eax, DWORD PTR _msg$[ebp]
push	eax
call	DWORD PTR __imp__TranslateMessage@4
lea	ecx, DWORD PTR _msg$[ebp]
push	ecx
call	DWORD PTR __imp__DispatchMessageW@4
jmp	SHORT $LN2@thread
mov	eax, DWORD PTR _r$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?wndProc@Progress@@CGJPAUHWND__@@IIJ@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, DWORD PTR _umsg$[ebp]
mov	DWORD PTR tv64[ebp], eax
cmp	DWORD PTR tv64[ebp], 7
ja	SHORT $LN10@wndProc
cmp	DWORD PTR tv64[ebp], 7
je	SHORT $LN4@wndProc
cmp	DWORD PTR tv64[ebp], 1
je	SHORT $LN5@wndProc
cmp	DWORD PTR tv64[ebp], 2
je	$LN1@wndProc
jmp	$LN6@wndProc
cmp	DWORD PTR tv64[ebp], 273		
je	SHORT $LN3@wndProc
jmp	$LN6@wndProc
mov	ecx, DWORD PTR _lparam$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _pw$2[ebp], edx
mov	eax, DWORD PTR _pw$2[ebp]
push	eax
push	-21					
mov	ecx, DWORD PTR _hwnd$[ebp]
push	ecx
call	DWORD PTR __imp__SetWindowLongW@12
xor	eax, eax
jmp	$LN8@wndProc
push	-21					
mov	edx, DWORD PTR _hwnd$[ebp]
push	edx
call	DWORD PTR __imp__GetWindowLongW@8
mov	DWORD PTR _pw$1[ebp], eax
mov	eax, DWORD PTR _pw$1[ebp]
mov	ecx, DWORD PTR [eax+284]
push	ecx
call	DWORD PTR __imp__SetFocus@4
xor	eax, eax
jmp	SHORT $LN8@wndProc
mov	edx, DWORD PTR _wparam$[ebp]
shr	edx, 16					
and	edx, 65535				
movzx	eax, dx
test	eax, eax
jne	SHORT $LN2@wndProc
push	-21					
mov	ecx, DWORD PTR _hwnd$[ebp]
push	ecx
call	DWORD PTR __imp__GetWindowLongW@8
mov	DWORD PTR _pw$3[ebp], eax
mov	edx, DWORD PTR _pw$3[ebp]
mov	eax, DWORD PTR [edx+272]
push	eax
call	DWORD PTR __imp__ResetEvent@4
push	0
mov	ecx, DWORD PTR _pw$3[ebp]
mov	edx, DWORD PTR [ecx+284]
push	edx
call	DWORD PTR __imp__EnableWindow@8
push	OFFSET $SG174252
mov	ecx, DWORD PTR _pw$3[ebp]
call	?setInfo@Progress@@QBEXPB_W@Z		
xor	eax, eax
jmp	SHORT $LN8@wndProc
jmp	SHORT $LN6@wndProc
push	0
call	DWORD PTR __imp__PostQuitMessage@4
xor	eax, eax
jmp	SHORT $LN8@wndProc
mov	eax, DWORD PTR _lparam$[ebp]
push	eax
mov	ecx, DWORD PTR _wparam$[ebp]
push	ecx
mov	edx, DWORD PTR _umsg$[ebp]
push	edx
mov	eax, DWORD PTR _hwnd$[ebp]
push	eax
call	DWORD PTR __imp__DefWindowProcW@16
mov	esp, ebp
pop	ebp
ret	16					
ENDP
?threadFunc@Progress@@CGKPAX@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR _data$[ebp]
mov	DWORD PTR _pw$[ebp], eax
mov	ecx, DWORD PTR _pw$[ebp]
call	?thread@Progress@@AAEHXZ		
mov	esp, ebp
pop	ebp
ret	4
ENDP
?flushCallerUserInput@Progress@@QBEXXZ PROC		
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _hwnd$1[ebp], ecx
jmp	SHORT $LN6@flushCalle
mov	edx, DWORD PTR _hwnd$1[ebp]
push	edx
call	DWORD PTR __imp__GetParent@4
mov	DWORD PTR _hwnd$1[ebp], eax
cmp	DWORD PTR _hwnd$1[ebp], 0
je	SHORT $LN7@flushCalle
push	67567617				
push	0
push	0
mov	eax, DWORD PTR _hwnd$1[ebp]
push	eax
lea	ecx, DWORD PTR _msg$[ebp]
push	ecx
call	DWORD PTR __imp__PeekMessageW@20
test	eax, eax
je	SHORT $LN3@flushCalle
push	67567617				
push	0
push	0
mov	edx, DWORD PTR _hwnd$1[ebp]
push	edx
lea	eax, DWORD PTR _msg$[ebp]
push	eax
call	DWORD PTR __imp__PeekMessageW@20
test	eax, eax
je	SHORT $LN1@flushCalle
jmp	SHORT $LN2@flushCalle
mov	ecx, DWORD PTR _hwnd$1[ebp]
push	ecx
call	DWORD PTR __imp__UpdateWindow@4
jmp	SHORT $LN5@flushCalle
mov	esp, ebp
pop	ebp
ret	0
ENDP
?setPercent@Progress@@QBEXIPB_W@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN2@setPercent
push	0
mov	ecx, DWORD PTR _percent$[ebp]
push	ecx
push	1026					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+280]
push	eax
call	DWORD PTR __imp__PostMessageW@16
mov	ecx, DWORD PTR _fileName$[ebp]
push	ecx
push	0
push	12					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+276]
push	eax
call	DWORD PTR __imp__SendMessageW@16
mov	esp, ebp
pop	ebp
ret	8
ENDP
?setInfo@Progress@@QBEXPB_W@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN2@setInfo
mov	ecx, DWORD PTR _info$[ebp]
push	ecx
push	0
push	12					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+276]
push	eax
call	DWORD PTR __imp__SendMessageW@16
mov	esp, ebp
pop	ebp
ret	4
ENDP
?close@Progress@@QAEXXZ PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN2@close
push	0
push	0
push	16					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	DWORD PTR __imp__SendMessageW@16
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+4], 0
push	-1
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+268]
push	edx
call	DWORD PTR __imp__WaitForSingleObject@8
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+268]
push	ecx
call	DWORD PTR __imp__CloseHandle@4
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+272]
push	eax
call	DWORD PTR __imp__CloseHandle@4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?open@Progress@@QAEPAUHWND__@@PAU2@PB_W@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN9@open
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [ecx+4]
jmp	$LN10@open
push	0
push	0
push	1
push	0
call	DWORD PTR __imp__CreateEventW@16
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+272], eax
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+272], 0
jne	SHORT $LN8@open
xor	eax, eax
jmp	$LN10@open
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _hCallerWnd$[ebp]
mov	DWORD PTR [ecx+8], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR _hwnd$1[ebp], ecx
jmp	SHORT $LN7@open
mov	edx, DWORD PTR _hwnd$1[ebp]
push	edx
call	DWORD PTR __imp__GetParent@4
mov	DWORD PTR _hwnd$1[ebp], eax
cmp	DWORD PTR _hwnd$1[ebp], 0
je	SHORT $LN5@open
mov	eax, DWORD PTR _hwnd$1[ebp]
push	eax
call	DWORD PTR __imp__UpdateWindow@4
jmp	SHORT $LN6@open
cmp	DWORD PTR _header$[ebp], 0
je	SHORT $LN4@open
mov	ecx, DWORD PTR _header$[ebp]
push	ecx
push	128					
mov	edx, DWORD PTR _this$[ebp]
add	edx, 12					
push	edx
call	_wcscpy_s
add	esp, 12					
jmp	SHORT $LN3@open
push	OFFSET ?cDefaultHeader@Progress@@0QB_WB	
push	128					
mov	eax, DWORD PTR _this$[ebp]
add	eax, 12					
push	eax
call	_wcscpy_s
add	esp, 12					
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
push	OFFSET ?threadFunc@Progress@@CGKPAX@Z	
push	0
push	0
call	DWORD PTR __imp__CreateThread@24
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+268], eax
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+268], 0
jne	SHORT $LN2@open
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+272]
push	edx
call	DWORD PTR __imp__CloseHandle@4
xor	eax, eax
jmp	SHORT $LN10@open
push	-1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+272]
push	ecx
call	DWORD PTR __imp__WaitForSingleObject@8
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+4], 0
jne	SHORT $LN1@open
push	-1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+268]
push	ecx
call	DWORD PTR __imp__WaitForSingleObject@8
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+268]
push	eax
call	DWORD PTR __imp__CloseHandle@4
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+272]
push	edx
call	DWORD PTR __imp__CloseHandle@4
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+4]
mov	esp, ebp
pop	ebp
ret	8
ENDP
??1Progress@@QAE@XZ PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?close@Progress@@QAEXXZ			
mov	eax, OFFSET ?refCount@Progress@@0JC	
or	ecx, -1
lock	 xadd	 DWORD PTR [eax], ecx
dec	ecx
jne	SHORT $LN2@Progress
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
push	OFFSET ?cClassName@Progress@@0QB_WB	
call	DWORD PTR __imp__UnregisterClassW@8
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0Progress@@QAE@PAUHINSTANCE__@@@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 60					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	edx, OFFSET ?refCount@Progress@@0JC	
mov	eax, 1
lock	 xadd	 DWORD PTR [edx], eax
inc	eax
cmp	eax, 1
jne	$LN2@Progress
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _hInst$[ebp]
mov	DWORD PTR [ecx], edx
push	48					
lea	eax, DWORD PTR _wcex$1[ebp]
push	eax
call	_RtlSecureZeroMemory
add	esp, 8
mov	DWORD PTR _wcex$1[ebp], 48		
mov	DWORD PTR _wcex$1[ebp+4], 3
mov	DWORD PTR _wcex$1[ebp+8], OFFSET ?wndProc@Progress@@CGJPAUHWND__@@IIJ@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR _wcex$1[ebp+20], edx
push	32512					
push	0
call	DWORD PTR __imp__LoadCursorW@8
mov	DWORD PTR _wcex$1[ebp+28], eax
push	15					
call	DWORD PTR __imp__GetSysColorBrush@4
mov	DWORD PTR _wcex$1[ebp+32], eax
mov	DWORD PTR _wcex$1[ebp+40], OFFSET ?cClassName@Progress@@0QB_WB 
lea	eax, DWORD PTR _wcex$1[ebp]
push	eax
call	DWORD PTR __imp__RegisterClassExW@4
push	8
lea	ecx, DWORD PTR _icex$2[ebp]
push	ecx
call	_RtlSecureZeroMemory
add	esp, 8
mov	DWORD PTR _icex$2[ebp], 8
mov	DWORD PTR _icex$2[ebp+4], 16416		
lea	edx, DWORD PTR _icex$2[ebp]
push	edx
call	DWORD PTR __imp__InitCommonControlsEx@4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?markSelectedTextInc@FindIncrementDlg@@AAEX_NPAUFindOption@@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, 4112				
call	__chkstk
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
push	28					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?clearIndicator@ScintillaEditView@@QAEXH@Z 
movzx	eax, BYTE PTR _enable$[ebp]
test	eax, eax
jne	SHORT $LN2@markSelect
jmp	SHORT $LN3@markSelect
lea	ecx, DWORD PTR _range$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+36]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?getSelection@ScintillaEditView@@QBE?AUSci_CharacterRange@@XZ 
mov	edx, DWORD PTR _range$[ebp]
cmp	edx, DWORD PTR _range$[ebp+4]
jne	SHORT $LN1@markSelect
jmp	SHORT $LN3@markSelect
push	0
push	2048					
lea	eax, DWORD PTR _text2Find$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+36]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?getGenericSelectedText@ScintillaEditView@@QAEPA_WPA_WH_N@Z 
lea	ecx, DWORD PTR _text2Find$[ebp]
push	ecx
mov	ecx, DWORD PTR _opt$[ebp]
add	ecx, 16					
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
mov	edx, DWORD PTR _opt$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+36]
call	?markAllInc@FindReplaceDlg@@QAEHPBUFindOption@@@Z 
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	8
ENDP
?run_dlgProc@FindIncrementDlg@@EAGHIIJ@Z PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?run_dlgProc@FindIncrementDlg@@EAGHIIJ@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 252				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	esi
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	eax, DWORD PTR _message$[ebp]
mov	DWORD PTR tv64[ebp], eax
cmp	DWORD PTR tv64[ebp], 20			
je	$LN1@run_dlgPro
cmp	DWORD PTR tv64[ebp], 273		
je	$LN16@run_dlgPro
cmp	DWORD PTR tv64[ebp], 307		
je	SHORT $LN19@run_dlgPro
jmp	$LN20@run_dlgPro
mov	ecx, DWORD PTR ?$S1@?4??run_dlgProc@FindIncrementDlg@@EAGHIIJ@Z@4IA
and	ecx, 1
jne	SHORT $LN18@run_dlgPro
mov	edx, DWORD PTR ?$S1@?4??run_dlgProc@FindIncrementDlg@@EAGHIIJ@Z@4IA
or	edx, 1
mov	DWORD PTR ?$S1@?4??run_dlgProc@FindIncrementDlg@@EAGHIIJ@Z@4IA, edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	6711039					
call	DWORD PTR __imp__CreateSolidBrush@4
mov	DWORD PTR ?hBrushBackground@?4??run_dlgProc@FindIncrementDlg@@EAGHIIJ@Z@4PAUHBRUSH__@@A, eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	?getFindStatus@FindIncrementDlg@@QAE?AW4FindStatus@@XZ 
cmp	eax, 1
je	SHORT $LN17@run_dlgPro
xor	eax, eax
jmp	$LN22@run_dlgPro
push	16777215				
mov	eax, DWORD PTR _wParam$[ebp]
push	eax
call	DWORD PTR __imp__SetTextColor@8
push	6711039					
mov	ecx, DWORD PTR _wParam$[ebp]
push	ecx
call	DWORD PTR __imp__SetBkColor@8
mov	eax, DWORD PTR ?hBrushBackground@?4??run_dlgProc@FindIncrementDlg@@EAGHIIJ@Z@4PAUHBRUSH__@@A
jmp	$LN22@run_dlgPro
mov	BYTE PTR _updateSearch$17[ebp], 0
mov	BYTE PTR _forward$15[ebp], 1
mov	BYTE PTR _advance$14[ebp], 0
mov	BYTE PTR _updateHiLight$18[ebp], 0
mov	BYTE PTR _updateCase$16[ebp], 0
mov	edx, DWORD PTR _wParam$[ebp]
and	edx, 65535				
movzx	eax, dx
mov	DWORD PTR tv81[ebp], eax
cmp	DWORD PTR tv81[ebp], 1685		
jg	SHORT $LN27@run_dlgPro
cmp	DWORD PTR tv81[ebp], 1685		
je	$LN9@run_dlgPro
cmp	DWORD PTR tv81[ebp], 1682		
jg	SHORT $LN28@run_dlgPro
cmp	DWORD PTR tv81[ebp], 1682		
je	$LN7@run_dlgPro
cmp	DWORD PTR tv81[ebp], 1
je	$LN10@run_dlgPro
cmp	DWORD PTR tv81[ebp], 2
je	SHORT $LN13@run_dlgPro
jmp	$LN5@run_dlgPro
cmp	DWORD PTR tv81[ebp], 1683		
jl	$LN5@run_dlgPro
cmp	DWORD PTR tv81[ebp], 1684		
jle	$LN10@run_dlgPro
jmp	$LN5@run_dlgPro
cmp	DWORD PTR tv81[ebp], 43010		
jg	SHORT $LN29@run_dlgPro
cmp	DWORD PTR tv81[ebp], 43010		
je	$LN10@run_dlgPro
cmp	DWORD PTR tv81[ebp], 1690		
je	$LN8@run_dlgPro
cmp	DWORD PTR tv81[ebp], 43002		
je	$LN10@run_dlgPro
jmp	$LN5@run_dlgPro
cmp	DWORD PTR tv81[ebp], 43011		
je	SHORT $LN12@run_dlgPro
jmp	$LN5@run_dlgPro
push	28					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+36]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?clearIndicator@ScintillaEditView@@QAEXH@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+36]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?getFocus@Window@@QBEXXZ		
push	0
push	0
push	241					
push	1690					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
call	eax
mov	eax, 1
jmp	$LN22@run_dlgPro
call	DWORD PTR __imp__GetFocus@0
mov	esi, eax
push	1682					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
cmp	esi, eax
je	SHORT $LN10@run_dlgPro
push	1
push	1682					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
push	40					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__PostMessageW@16
mov	eax, 1
jmp	$LN22@run_dlgPro
mov	BYTE PTR _updateSearch$17[ebp], 1
mov	BYTE PTR _advance$14[ebp], 1
mov	ecx, DWORD PTR _wParam$[ebp]
and	ecx, 65535				
movzx	edx, cx
cmp	edx, 1684				
je	SHORT $LN24@run_dlgPro
mov	eax, DWORD PTR _wParam$[ebp]
and	eax, 65535				
movzx	ecx, ax
cmp	ecx, 43002				
je	SHORT $LN24@run_dlgPro
mov	edx, DWORD PTR _wParam$[ebp]
and	edx, 65535				
movzx	eax, dx
cmp	eax, 43011				
je	SHORT $LN24@run_dlgPro
mov	ecx, DWORD PTR _wParam$[ebp]
and	ecx, 65535				
movzx	edx, cx
cmp	edx, 1
jne	SHORT $LN25@run_dlgPro
push	16					
call	DWORD PTR __imp__GetKeyState@4
cwde
and	eax, 32768				
je	SHORT $LN24@run_dlgPro
mov	DWORD PTR tv193[ebp], 0
jmp	SHORT $LN26@run_dlgPro
mov	DWORD PTR tv193[ebp], 1
mov	cl, BYTE PTR tv193[ebp]
mov	BYTE PTR _forward$15[ebp], cl
jmp	$LN14@run_dlgPro
mov	BYTE PTR _updateSearch$17[ebp], 1
mov	BYTE PTR _updateCase$16[ebp], 1
mov	BYTE PTR _updateHiLight$18[ebp], 1
jmp	SHORT $LN14@run_dlgPro
mov	BYTE PTR _updateHiLight$18[ebp], 1
jmp	SHORT $LN14@run_dlgPro
mov	edx, DWORD PTR _wParam$[ebp]
shr	edx, 16					
and	edx, 65535				
movzx	eax, dx
cmp	eax, 768				
jne	SHORT $LN5@run_dlgPro
mov	BYTE PTR _updateSearch$17[ebp], 1
push	1690					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR _updateHiLight$18[ebp], al
push	1685					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR _updateCase$16[ebp], al
jmp	SHORT $LN14@run_dlgPro
mov	ecx, DWORD PTR _lParam$[ebp]
push	ecx
mov	edx, DWORD PTR _wParam$[ebp]
push	edx
mov	eax, DWORD PTR _message$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?getHSelf@Window@@QBEPAUHWND__@@XZ	
push	eax
call	DWORD PTR __imp__DefWindowProcW@16
jmp	$LN22@run_dlgPro
lea	ecx, DWORD PTR _fo$19[ebp]
call	??0FindOption@@QAE@XZ			
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	BYTE PTR _fo$19[ebp], 0
movzx	ecx, BYTE PTR _advance$14[ebp]
test	ecx, ecx
je	SHORT $LN30@run_dlgPro
mov	DWORD PTR tv243[ebp], 2
jmp	SHORT $LN31@run_dlgPro
mov	DWORD PTR tv243[ebp], 1
mov	edx, DWORD PTR tv243[ebp]
mov	DWORD PTR _fo$19[ebp+4], edx
movzx	eax, BYTE PTR _forward$15[ebp]
test	eax, eax
je	SHORT $LN32@run_dlgPro
mov	BYTE PTR tv246[ebp], 1
jmp	SHORT $LN33@run_dlgPro
mov	BYTE PTR tv246[ebp], 0
mov	cl, BYTE PTR tv246[ebp]
mov	BYTE PTR _fo$19[ebp+3], cl
push	0
push	0
push	240					
push	1685					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SendDlgItemMessageW@20
cmp	eax, 1
jne	SHORT $LN34@run_dlgPro
mov	DWORD PTR tv259[ebp], 1
jmp	SHORT $LN35@run_dlgPro
mov	DWORD PTR tv259[ebp], 0
mov	cl, BYTE PTR tv259[ebp]
mov	BYTE PTR _fo$19[ebp+1], cl
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+36]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?getUnicodeMode@Buffer@@QBE?AW4UniMode@@XZ 
test	eax, eax
je	SHORT $LN36@run_dlgPro
mov	DWORD PTR tv269[ebp], 1
jmp	SHORT $LN37@run_dlgPro
mov	DWORD PTR tv269[ebp], 0
mov	dl, BYTE PTR tv269[ebp]
mov	BYTE PTR _isUnicode$13[ebp], dl
movzx	eax, BYTE PTR _isUnicode$13[ebp]
push	eax
push	1682					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
lea	eax, DWORD PTR _str2Search$20[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+36]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
movzx	edx, BYTE PTR _updateSearch$17[ebp]
test	edx, edx
je	$LN4@run_dlgPro
mov	DWORD PTR _findStatus$8[ebp], 0
push	0
lea	eax, DWORD PTR _findStatus$8[ebp]
push	eax
lea	ecx, DWORD PTR _fo$19[ebp]
push	ecx
lea	ecx, DWORD PTR _str2Search$20[ebp]
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+36]
call	?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z 
mov	BYTE PTR _isFound$11[ebp], al
lea	eax, DWORD PTR _str2Search$20[ebp]
push	eax
lea	ecx, DWORD PTR _fo$19[ebp+16]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z 
push	-1
push	0
push	0
lea	ecx, DWORD PTR _fo$19[ebp]
push	ecx
push	2
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+36]
call	?processAll@FindReplaceDlg@@QAEHW4ProcessOperation@@PBUFindOption@@_NPB_WH@Z 
mov	DWORD PTR _nbCounted$4[ebp], eax
mov	eax, DWORD PTR _nbCounted$4[ebp]
push	eax
mov	ecx, DWORD PTR _findStatus$8[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setFindStatus@FindIncrementDlg@@QAEXW4FindStatus@@H@Z 
movzx	edx, BYTE PTR _updateCase$16[ebp]
test	edx, edx
je	SHORT $LN4@run_dlgPro
movzx	eax, BYTE PTR _isFound$11[ebp]
test	eax, eax
jne	SHORT $LN4@run_dlgPro
lea	ecx, DWORD PTR _range$2[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+36]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?getSelection@ScintillaEditView@@QBE?AUSci_CharacterRange@@XZ 
mov	edx, DWORD PTR _range$2[ebp]
push	edx
push	-1
push	2160					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+36]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
movzx	eax, BYTE PTR _updateHiLight$18[ebp]
test	eax, eax
je	SHORT $LN2@run_dlgPro
lea	ecx, DWORD PTR _str2Search$20[ebp]
call	?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ 
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN38@run_dlgPro
push	0
push	0
push	240					
push	1690					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SendDlgItemMessageW@20
cmp	eax, 1
jne	SHORT $LN38@run_dlgPro
mov	DWORD PTR tv344[ebp], 1
jmp	SHORT $LN39@run_dlgPro
mov	DWORD PTR tv344[ebp], 0
mov	cl, BYTE PTR tv344[ebp]
mov	BYTE PTR _highlight$12[ebp], cl
lea	edx, DWORD PTR _fo$19[ebp]
push	edx
movzx	eax, BYTE PTR _highlight$12[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?markSelectedTextInc@FindIncrementDlg@@AAEX_NPAUFindOption@@@Z 
mov	DWORD PTR $T5[ebp], 1
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR _str2Search$20[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _fo$19[ebp]
call	??1FindOption@@QAE@XZ
mov	eax, DWORD PTR $T5[ebp]
jmp	$LN22@run_dlgPro
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetParent@4
mov	DWORD PTR _hParent$9[ebp], eax
mov	eax, DWORD PTR _wParam$[ebp]
mov	DWORD PTR _winDC$10[ebp], eax
mov	DWORD PTR _pt$7[ebp], 0
mov	DWORD PTR _pt$7[ebp+4], 0
mov	DWORD PTR _ptOrig$6[ebp], 0
mov	DWORD PTR _ptOrig$6[ebp+4], 0
push	1
lea	ecx, DWORD PTR _pt$7[ebp]
push	ecx
mov	edx, DWORD PTR _hParent$9[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__MapWindowPoints@16
lea	edx, DWORD PTR _ptOrig$6[ebp]
push	edx
mov	eax, DWORD PTR _pt$7[ebp+4]
push	eax
mov	ecx, DWORD PTR _pt$7[ebp]
push	ecx
mov	edx, DWORD PTR _wParam$[ebp]
push	edx
call	DWORD PTR __imp__OffsetWindowOrgEx@16
push	0
mov	eax, DWORD PTR _winDC$10[ebp]
push	eax
push	20					
mov	ecx, DWORD PTR _hParent$9[ebp]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	DWORD PTR _lResult$3[ebp], eax
push	0
mov	edx, DWORD PTR _ptOrig$6[ebp+4]
push	edx
mov	eax, DWORD PTR _ptOrig$6[ebp]
push	eax
mov	ecx, DWORD PTR _winDC$10[ebp]
push	ecx
call	DWORD PTR __imp__SetWindowOrgEx@16
mov	eax, DWORD PTR _lResult$3[ebp]
jmp	SHORT $LN22@run_dlgPro
mov	edx, DWORD PTR _lParam$[ebp]
push	edx
mov	eax, DWORD PTR _wParam$[ebp]
push	eax
mov	ecx, DWORD PTR _message$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?getHSelf@Window@@QBEPAUHWND__@@XZ	
push	eax
call	DWORD PTR __imp__DefWindowProcW@16
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$?run_dlgProc@FindIncrementDlg@@EAGHIIJ@Z$0 PROC
mov	eax, DWORD PTR ?$S1@?4??run_dlgProc@FindIncrementDlg@@EAGHIIJ@Z@4IA
and	eax, -2					
mov	DWORD PTR ?$S1@?4??run_dlgProc@FindIncrementDlg@@EAGHIIJ@Z@4IA, eax
ret	0
ENDP
__unwindfunclet$?run_dlgProc@FindIncrementDlg@@EAGHIIJ@Z$1 PROC
lea	ecx, DWORD PTR _fo$19[ebp]
jmp	??1FindOption@@QAE@XZ
ENDP
__unwindfunclet$?run_dlgProc@FindIncrementDlg@@EAGHIIJ@Z$2 PROC
lea	ecx, DWORD PTR _str2Search$20[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$?run_dlgProc@FindIncrementDlg@@EAGHIIJ@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-260]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?run_dlgProc@FindIncrementDlg@@EAGHIIJ@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?addToRebar@FindIncrementDlg@@QAEXPAVReBar@@@Z PROC	
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+44], 0
je	SHORT $LN1@addToRebar
jmp	$LN2@addToRebar
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _rebar$[ebp]
mov	DWORD PTR [ecx+44], edx
lea	eax, DWORD PTR _client$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+28]
call	eax
push	56					
push	0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
push	ecx
call	_memset
add	esp, 12					
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+48], 56			
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+52], 369			
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+56], 264			
mov	ecx, DWORD PTR _this$[ebp]
call	?getHSelf@Window@@QBEPAUHWND__@@XZ	
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+80], eax
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+100], 1
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+84], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+112], 1
mov	eax, DWORD PTR _client$[ebp+12]
sub	eax, DWORD PTR _client$[ebp+4]
mov	DWORD PTR tv135[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR tv135[ebp]
mov	DWORD PTR [ecx+108], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR tv135[ebp]
mov	DWORD PTR [eax+88], ecx
mov	edx, DWORD PTR _client$[ebp+8]
sub	edx, DWORD PTR _client$[ebp]
mov	DWORD PTR tv140[ebp], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR tv140[ebp]
mov	DWORD PTR [eax+92], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR tv140[ebp]
mov	DWORD PTR [edx+116], eax
push	1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+44]
call	?addBand@ReBar@@QAE_NPAUtagREBARBANDINFOW@@_N@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+100]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+44]
call	?setGrayBackground@ReBar@@QAEXH@Z	
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	4
ENDP
?getFindStatus@FindIncrementDlg@@QAE?AW4FindStatus@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+40]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?setFindStatus@FindIncrementDlg@@QAEXW4FindStatus@@H@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _nbCounted$[ebp], 0
jg	SHORT $LN6@setFindSta
mov	eax, 2
imul	ecx, eax, 0
mov	DWORD PTR $T1[ebp], ecx
cmp	DWORD PTR $T1[ebp], 256			
jae	SHORT $LN9@setFindSta
jmp	SHORT $LN10@setFindSta
call	___report_rangecheckfailure
xor	edx, edx
mov	eax, DWORD PTR $T1[ebp]
mov	WORD PTR ?findCount@?1??setFindStatus@FindIncrementDlg@@QAEXW4FindStatus@@H@Z@4PA_WA[eax], dx
jmp	SHORT $LN5@setFindSta
cmp	DWORD PTR _nbCounted$[ebp], 1
jne	SHORT $LN4@setFindSta
mov	ecx, DWORD PTR _nbCounted$[ebp]
push	ecx
push	OFFSET $SG174060
push	OFFSET ?findCount@?1??setFindStatus@FindIncrementDlg@@QAEXW4FindStatus@@H@Z@4PA_WA
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
jmp	SHORT $LN5@setFindSta
mov	edx, DWORD PTR _nbCounted$[ebp]
push	edx
push	OFFSET $SG174062
push	OFFSET ?findCount@?1??setFindStatus@FindIncrementDlg@@QAEXW4FindStatus@@H@Z@4PA_WA
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
cmp	DWORD PTR _iStatus$[ebp], 0
jl	SHORT $LN1@setFindSta
cmp	DWORD PTR _iStatus$[ebp], 4
jb	SHORT $LN2@setFindSta
jmp	SHORT $LN8@setFindSta
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _iStatus$[ebp]
mov	DWORD PTR [eax+40], ecx
push	1682					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hEditor$[ebp], eax
push	1
push	0
mov	ecx, DWORD PTR _hEditor$[ebp]
push	ecx
call	DWORD PTR __imp__InvalidateRect@12
mov	edx, DWORD PTR _iStatus$[ebp]
mov	eax, DWORD PTR ?findStatus@?1??setFindStatus@FindIncrementDlg@@QAEXW4FindStatus@@H@Z@4PAPA_WA[edx*4]
push	eax
push	0
push	12					
push	1689					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	esp, ebp
pop	ebp
ret	8
ENDP
?display@FindIncrementDlg@@UBEX_N@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+44], 0
jne	SHORT $LN2@display
movzx	ecx, BYTE PTR _toShow$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?display@Window@@UBEX_N@Z		
jmp	SHORT $LN3@display
movzx	edx, BYTE PTR _toShow$[ebp]
test	edx, edx
je	SHORT $LN1@display
push	1682					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__SetFocus@4
push	-1
push	0
push	177					
push	1682					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SendDlgItemMessageW@20
movzx	ecx, BYTE PTR _toShow$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+100]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+44]
call	?setIDVisible@ReBar@@QAEXH_N@Z		
mov	esp, ebp
pop	ebp
ret	4
ENDP
?destroy@FindIncrementDlg@@UAEXXZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+44], 0
je	SHORT $LN2@destroy
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+100]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+44]
call	?removeBand@ReBar@@QAEXH@Z		
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+44], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?init@FindIncrementDlg@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAVFindReplaceDlg@@_N@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _hPere$[ebp]
push	eax
mov	ecx, DWORD PTR _hInst$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z 
cmp	DWORD PTR _pFRDlg$[ebp], 0
jne	SHORT $LN1@init
push	OFFSET $SG173896
lea	ecx, DWORD PTR $T1[ebp]
call	??0runtime_error@std@@QAE@PBD@Z		
push	OFFSET __TI2?AVruntime_error@std@@
lea	edx, DWORD PTR $T1[ebp]
push	edx
call	__CxxThrowException@8
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _pFRDlg$[ebp]
mov	DWORD PTR [eax+36], ecx
push	1
movzx	edx, BYTE PTR _isRTL$[ebp]
push	edx
push	1680					
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+48]
call	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	dl, BYTE PTR _isRTL$[ebp]
mov	BYTE PTR [ecx+32], dl
mov	esp, ebp
pop	ebp
ret	16					
ENDP
??_GFindReplaceDlg@@UAEPAXI@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1FindReplaceDlg@@UAE@XZ		
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?drawItem@FindReplaceDlg@@AAEXPAUtagDRAWITEMSTRUCT@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 36					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR _fgColor$[ebp], 0
mov	eax, DWORD PTR _lpDrawItemStruct$[ebp]
mov	ecx, DWORD PTR [eax+44]
mov	DWORD PTR _ptStr$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+2268], 1
jne	SHORT $LN8@drawItem
mov	DWORD PTR _fgColor$[ebp], 255		
jmp	SHORT $LN7@drawItem
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+2268], 4
jne	SHORT $LN6@drawItem
mov	DWORD PTR _fgColor$[ebp], 16711680	
jmp	SHORT $LN7@drawItem
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+2268], 2
je	SHORT $LN3@drawItem
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+2268], 3
jne	SHORT $LN4@drawItem
mov	DWORD PTR _fgColor$[ebp], 42496		
jmp	SHORT $LN7@drawItem
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+2268], 5
jne	SHORT $LN7@drawItem
mov	DWORD PTR _ptStr$[ebp], OFFSET $SG173360
mov	ecx, DWORD PTR _fgColor$[ebp]
push	ecx
mov	edx, DWORD PTR _lpDrawItemStruct$[ebp]
mov	eax, DWORD PTR [edx+24]
push	eax
call	DWORD PTR __imp__SetTextColor@8
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2208				
call	?getHSelf@Window@@QBEPAUHWND__@@XZ	
push	eax
call	?getCtrlBgColor@@YAKPAUHWND__@@@Z	
add	esp, 4
mov	DWORD PTR _bgColor$[ebp], eax
mov	ecx, DWORD PTR _bgColor$[ebp]
push	ecx
mov	edx, DWORD PTR _lpDrawItemStruct$[ebp]
mov	eax, DWORD PTR [edx+24]
push	eax
call	DWORD PTR __imp__SetBkColor@8
lea	ecx, DWORD PTR _rect$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2208				
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+2208]
mov	edx, DWORD PTR [eax+28]
call	edx
push	36					
lea	eax, DWORD PTR _rect$[ebp]
push	eax
mov	ecx, DWORD PTR _ptStr$[ebp]
push	ecx
call	DWORD PTR __imp__lstrlenW@4
push	eax
mov	edx, DWORD PTR _ptStr$[ebp]
push	edx
mov	eax, DWORD PTR _lpDrawItemStruct$[ebp]
mov	ecx, DWORD PTR [eax+24]
push	ecx
call	DWORD PTR __imp__DrawTextW@20
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	4
ENDP
?saveInMacro@FindReplaceDlg@@AAEXHH@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 48					
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR _booleans$[ebp], 0
push	0
push	1700					
push	3036					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+16
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
push	1601					
push	3037					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	DWORD PTR __imp__SendMessageW@16
movzx	ecx, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A
test	ecx, ecx
je	SHORT $LN8@saveInMacr
mov	DWORD PTR tv86[ebp], 1
jmp	SHORT $LN9@saveInMacr
mov	DWORD PTR tv86[ebp], 0
mov	edx, DWORD PTR _booleans$[ebp]
or	edx, DWORD PTR tv86[ebp]
mov	DWORD PTR _booleans$[ebp], edx
movzx	eax, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+1
test	eax, eax
je	SHORT $LN10@saveInMacr
mov	DWORD PTR tv90[ebp], 2
jmp	SHORT $LN11@saveInMacr
mov	DWORD PTR tv90[ebp], 0
mov	ecx, DWORD PTR _booleans$[ebp]
or	ecx, DWORD PTR tv90[ebp]
mov	DWORD PTR _booleans$[ebp], ecx
movzx	edx, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+130
test	edx, edx
je	SHORT $LN12@saveInMacr
mov	DWORD PTR tv94[ebp], 1024		
jmp	SHORT $LN13@saveInMacr
mov	DWORD PTR tv94[ebp], 0
mov	eax, DWORD PTR _booleans$[ebp]
or	eax, DWORD PTR tv94[ebp]
mov	DWORD PTR _booleans$[ebp], eax
mov	ecx, DWORD PTR ?_options@FindReplaceDlg@@2UFindOption@@A+8
push	ecx
push	1625					
push	3036					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	DWORD PTR __imp__SendMessageW@16
cmp	DWORD PTR _cmd$[ebp], 1615		
jne	SHORT $LN5@saveInMacr
movzx	ecx, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+12
test	ecx, ecx
je	SHORT $LN14@saveInMacr
mov	DWORD PTR tv140[ebp], 4
jmp	SHORT $LN15@saveInMacr
mov	DWORD PTR tv140[ebp], 0
mov	edx, DWORD PTR _booleans$[ebp]
or	edx, DWORD PTR tv140[ebp]
mov	DWORD PTR _booleans$[ebp], edx
movzx	eax, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+13
test	eax, eax
je	SHORT $LN16@saveInMacr
mov	DWORD PTR tv144[ebp], 16		
jmp	SHORT $LN17@saveInMacr
mov	DWORD PTR tv144[ebp], 0
mov	ecx, DWORD PTR _booleans$[ebp]
or	ecx, DWORD PTR tv144[ebp]
mov	DWORD PTR _booleans$[ebp], ecx
mov	edx, DWORD PTR _cmdType$[ebp]
and	edx, 2
je	SHORT $LN4@saveInMacr
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+44
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
push	1602					
push	3037					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	edx, DWORD PTR _cmdType$[ebp]
and	edx, 4
je	$LN3@saveInMacr
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+100
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
push	1653					
push	3037					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+72
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
push	1652					
push	3037					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	DWORD PTR __imp__SendMessageW@16
movzx	ecx, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+128
test	ecx, ecx
je	SHORT $LN18@saveInMacr
mov	DWORD PTR tv185[ebp], 32		
jmp	SHORT $LN19@saveInMacr
mov	DWORD PTR tv185[ebp], 0
mov	edx, DWORD PTR _booleans$[ebp]
or	edx, DWORD PTR tv185[ebp]
mov	DWORD PTR _booleans$[ebp], edx
movzx	eax, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+129
test	eax, eax
je	SHORT $LN20@saveInMacr
mov	DWORD PTR tv189[ebp], 64		
jmp	SHORT $LN21@saveInMacr
mov	DWORD PTR tv189[ebp], 0
mov	ecx, DWORD PTR _booleans$[ebp]
or	ecx, DWORD PTR tv189[ebp]
mov	DWORD PTR _booleans$[ebp], ecx
jmp	SHORT $LN2@saveInMacr
mov	edx, DWORD PTR _cmdType$[ebp]
and	edx, 8
jne	SHORT $LN2@saveInMacr
movzx	eax, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+14
test	eax, eax
je	SHORT $LN22@saveInMacr
mov	DWORD PTR tv195[ebp], 128		
jmp	SHORT $LN23@saveInMacr
mov	DWORD PTR tv195[ebp], 0
mov	ecx, DWORD PTR _booleans$[ebp]
or	ecx, DWORD PTR tv195[ebp]
mov	DWORD PTR _booleans$[ebp], ecx
movzx	edx, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+2
test	edx, edx
je	SHORT $LN24@saveInMacr
mov	DWORD PTR tv199[ebp], 256		
jmp	SHORT $LN25@saveInMacr
mov	DWORD PTR tv199[ebp], 0
mov	eax, DWORD PTR _booleans$[ebp]
or	eax, DWORD PTR tv199[ebp]
mov	DWORD PTR _booleans$[ebp], eax
movzx	ecx, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+3
test	ecx, ecx
je	SHORT $LN26@saveInMacr
mov	DWORD PTR tv203[ebp], 512		
jmp	SHORT $LN27@saveInMacr
mov	DWORD PTR tv203[ebp], 0
mov	edx, DWORD PTR _booleans$[ebp]
or	edx, DWORD PTR tv203[ebp]
mov	DWORD PTR _booleans$[ebp], edx
mov	eax, DWORD PTR _booleans$[ebp]
push	eax
push	1702					
push	3036					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	DWORD PTR __imp__SendMessageW@16
mov	eax, DWORD PTR _cmd$[ebp]
push	eax
push	1701					
push	3036					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	DWORD PTR __imp__SendMessageW@16
mov	esp, ebp
pop	ebp
ret	8
ENDP
?saveComboHistory@FindReplaceDlg@@AAEHHHAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?saveComboHistory@FindReplaceDlg@@AAEHHHAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z
mov	eax, DWORD PTR fs:0
push	eax
mov	eax, 4156				
call	__chkstk
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _id$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hCombo$[ebp], eax
push	0
push	0
push	326					
mov	eax, DWORD PTR _hCombo$[ebp]
push	eax
call	DWORD PTR __imp__SendMessageW@16
mov	DWORD PTR _count$[ebp], eax
mov	ecx, DWORD PTR _count$[ebp]
cmp	ecx, DWORD PTR _maxcount$[ebp]
jge	SHORT $LN8@saveComboH
mov	edx, DWORD PTR _count$[ebp]
mov	DWORD PTR tv78[ebp], edx
jmp	SHORT $LN9@saveComboH
mov	eax, DWORD PTR _maxcount$[ebp]
mov	DWORD PTR tv78[ebp], eax
mov	ecx, DWORD PTR tv78[ebp]
mov	DWORD PTR _count$[ebp], ecx
cmp	DWORD PTR _count$[ebp], -1
jne	SHORT $LN5@saveComboH
xor	eax, eax
jmp	$LN6@saveComboH
cmp	DWORD PTR _count$[ebp], 0
je	SHORT $LN4@saveComboH
mov	ecx, DWORD PTR _strings$[ebp]
call	?clear@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXXZ 
mov	DWORD PTR _i$2[ebp], 0
jmp	SHORT $LN3@saveComboH
mov	edx, DWORD PTR _i$2[ebp]
add	edx, 1
mov	DWORD PTR _i$2[ebp], edx
mov	eax, DWORD PTR _i$2[ebp]
cmp	eax, DWORD PTR _count$[ebp]
jge	SHORT $LN1@saveComboH
lea	ecx, DWORD PTR _text$[ebp]
push	ecx
mov	edx, DWORD PTR _i$2[ebp]
push	edx
push	328					
mov	eax, DWORD PTR _hCombo$[ebp]
push	eax
call	DWORD PTR __imp__SendMessageW@16
lea	ecx, DWORD PTR _text$[ebp]
push	ecx
lea	ecx, DWORD PTR $T3[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR tv129[ebp], eax
mov	edx, DWORD PTR tv129[ebp]
mov	DWORD PTR tv128[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR tv128[ebp]
push	eax
mov	ecx, DWORD PTR _strings$[ebp]
call	?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
jmp	$LN2@saveComboH
mov	eax, DWORD PTR _count$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$?saveComboHistory@FindReplaceDlg@@AAEHHHAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z$0 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$?saveComboHistory@FindReplaceDlg@@AAEHHHAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-4160]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?saveComboHistory@FindReplaceDlg@@AAEHHHAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?fillComboHistory@FindReplaceDlg@@AAEXHABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?fillComboHistory@FindReplaceDlg@@AAEXHABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 44					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	BYTE PTR _isUnicode$[ebp], 0
mov	eax, DWORD PTR _id$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hCombo$[ebp], eax
lea	eax, DWORD PTR _i$3[ebp]
push	eax
mov	ecx, DWORD PTR _strings$[ebp]
call	?rbegin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
jmp	SHORT $LN3@fillComboH
lea	ecx, DWORD PTR _i$3[ebp]
call	??E?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ 
lea	ecx, DWORD PTR $T2[ebp]
push	ecx
mov	ecx, DWORD PTR _strings$[ebp]
call	?rend@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv73[ebp], eax
mov	edx, DWORD PTR tv73[ebp]
mov	DWORD PTR tv137[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	eax, DWORD PTR tv137[ebp]
push	eax
lea	ecx, DWORD PTR _i$3[ebp]
push	ecx
call	??$?9V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@V01@@std@@YA_NABV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@0@0@Z 
add	esp, 8
mov	BYTE PTR $T4[ebp], al
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ
movzx	edx, BYTE PTR $T4[ebp]
test	edx, edx
je	SHORT $LN1@fillComboH
movzx	eax, BYTE PTR _isUnicode$[ebp]
push	eax
mov	ecx, DWORD PTR _hCombo$[ebp]
push	ecx
lea	ecx, DWORD PTR _i$3[ebp]
call	??C?$_Revranit@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@U?$iterator@Urandom_access_iterator_tag@std@@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@HPBV32@ABV32@@2@@std@@QBEPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@XZ 
mov	ecx, eax
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?addText2Combo@FindReplaceDlg@@IAEXPB_WPAUHWND__@@_N@Z 
jmp	SHORT $LN2@fillComboH
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _i$3[ebp]
call	??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ
push	0
push	0
push	334					
mov	edx, DWORD PTR _hCombo$[ebp]
push	edx
call	DWORD PTR __imp__SendMessageW@16
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?fillComboHistory@FindReplaceDlg@@AAEXHABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z$0 PROC
lea	ecx, DWORD PTR _i$3[ebp]
jmp	??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?fillComboHistory@FindReplaceDlg@@AAEXHABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z$1 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?fillComboHistory@FindReplaceDlg@@AAEXHABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-48]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?fillComboHistory@FindReplaceDlg@@AAEXHABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?fillFindHistory@FindReplaceDlg@@AAEXXZ PROC		
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	DWORD PTR _this$[ebp], ecx
call	?getInstance@NppParameters@@SAPAV1@XZ	
mov	DWORD PTR _nppParams$[ebp], eax
mov	ecx, DWORD PTR _nppParams$[ebp]
call	?getFindHistory@NppParameters@@QAEAAUFindHistory@@XZ 
mov	DWORD PTR _findHistory$[ebp], eax
mov	eax, DWORD PTR _findHistory$[ebp]
add	eax, 48					
push	eax
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
call	?fillComboHistory@FindReplaceDlg@@AAEXHABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z 
mov	ecx, DWORD PTR _findHistory$[ebp]
add	ecx, 64					
push	ecx
push	1602					
mov	ecx, DWORD PTR _this$[ebp]
call	?fillComboHistory@FindReplaceDlg@@AAEXHABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z 
mov	edx, DWORD PTR _findHistory$[ebp]
add	edx, 32					
push	edx
push	1652					
mov	ecx, DWORD PTR _this$[ebp]
call	?fillComboHistory@FindReplaceDlg@@AAEXHABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z 
mov	eax, DWORD PTR _findHistory$[ebp]
add	eax, 16					
push	eax
push	1653					
mov	ecx, DWORD PTR _this$[ebp]
call	?fillComboHistory@FindReplaceDlg@@AAEXHABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z 
push	0
mov	ecx, DWORD PTR _findHistory$[ebp]
movzx	edx, BYTE PTR [ecx+82]
push	edx
push	241					
push	1606					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
mov	edx, DWORD PTR _findHistory$[ebp]
movzx	eax, BYTE PTR [edx+80]
push	eax
push	241					
push	1603					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
mov	eax, DWORD PTR _findHistory$[ebp]
movzx	ecx, BYTE PTR [eax+81]
push	ecx
push	241					
push	1604					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	ecx, DWORD PTR _findHistory$[ebp]
movzx	edx, BYTE PTR [ecx+83]
test	edx, edx
jne	SHORT $LN9@fillFindHi
mov	DWORD PTR tv156[ebp], 1
jmp	SHORT $LN10@fillFindHi
mov	DWORD PTR tv156[ebp], 0
push	0
mov	eax, DWORD PTR tv156[ebp]
push	eax
push	241					
push	1612					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
mov	eax, DWORD PTR _findHistory$[ebp]
movzx	ecx, BYTE PTR [eax+83]
push	ecx
push	241					
push	1613					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
mov	ecx, DWORD PTR _findHistory$[ebp]
movzx	edx, BYTE PTR [ecx+86]
push	edx
push	241					
push	1659					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
mov	edx, DWORD PTR _findHistory$[ebp]
movzx	eax, BYTE PTR [edx+85]
push	eax
push	241					
push	1658					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
mov	eax, DWORD PTR _findHistory$[ebp]
movzx	ecx, BYTE PTR [eax+102]
push	ecx
push	241					
push	1661					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	ecx, DWORD PTR _findHistory$[ebp]
cmp	DWORD PTR [ecx+88], 0
jne	SHORT $LN11@fillFindHi
mov	DWORD PTR tv217[ebp], 1
jmp	SHORT $LN12@fillFindHi
mov	DWORD PTR tv217[ebp], 0
push	0
mov	edx, DWORD PTR tv217[ebp]
push	edx
push	241					
push	1625					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	edx, DWORD PTR _findHistory$[ebp]
cmp	DWORD PTR [edx+88], 1
jne	SHORT $LN13@fillFindHi
mov	DWORD PTR tv230[ebp], 1
jmp	SHORT $LN14@fillFindHi
mov	DWORD PTR tv230[ebp], 0
push	0
mov	eax, DWORD PTR tv230[ebp]
push	eax
push	241					
push	1626					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	eax, DWORD PTR _findHistory$[ebp]
cmp	DWORD PTR [eax+88], 2
jne	SHORT $LN15@fillFindHi
mov	DWORD PTR tv243[ebp], 1
jmp	SHORT $LN16@fillFindHi
mov	DWORD PTR tv243[ebp], 0
push	0
mov	ecx, DWORD PTR tv243[ebp]
push	ecx
push	241					
push	1605					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
mov	ecx, DWORD PTR _findHistory$[ebp]
movzx	edx, BYTE PTR [ecx+84]
push	edx
push	241					
push	1703					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	edx, DWORD PTR _findHistory$[ebp]
cmp	DWORD PTR [edx+88], 2
jne	$LN6@fillFindHi
push	0
push	0
push	241					
push	1603					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
push	1603					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
push	0
push	1
push	241					
push	1613					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
push	0
push	241					
push	1612					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
push	1612					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
mov	ecx, DWORD PTR _nppParams$[ebp]
call	?isTransparentAvailable@NppParameters@@QBE_NXZ 
movzx	ecx, al
test	ecx, ecx
je	$LN7@fillFindHi
push	5
push	1686					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	5
push	1623					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	5
push	1687					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	5
push	1688					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	5
push	1622					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	13107220				
push	0
push	1030					
push	1622					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	edx, DWORD PTR _findHistory$[ebp]
mov	eax, DWORD PTR [edx+96]
push	eax
push	1
push	1029					
push	1622					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	eax, DWORD PTR _findHistory$[ebp]
cmp	DWORD PTR [eax+92], 0
jne	SHORT $LN4@fillFindHi
push	0
push	1623					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
push	0
push	1687					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
push	0
push	1688					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
push	0
push	1622					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
jmp	SHORT $LN7@fillFindHi
push	0
push	1
push	241					
push	1686					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	edx, DWORD PTR _findHistory$[ebp]
cmp	DWORD PTR [edx+92], 1
jne	SHORT $LN2@fillFindHi
mov	DWORD PTR _id$1[ebp], 1687		
jmp	SHORT $LN1@fillFindHi
mov	DWORD PTR _id$1[ebp], 1688		
mov	eax, DWORD PTR _findHistory$[ebp]
mov	ecx, DWORD PTR [eax+96]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	?getInstance@NppParameters@@SAPAV1@XZ	
mov	ecx, eax
call	?SetTransparent@NppParameters@@QAEXPAUHWND__@@H@Z 
push	0
push	1
push	241					
mov	ecx, DWORD PTR _id$1[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	esp, ebp
pop	ebp
ret	0
ENDP
?updateCombo@FindReplaceDlg@@AAEXH@Z PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?updateCombo@FindReplaceDlg@@AAEXH@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 56					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?getUnicodeMode@Buffer@@QBE?AW4UniMode@@XZ 
test	eax, eax
je	SHORT $LN3@updateComb
mov	DWORD PTR tv71[ebp], 1
jmp	SHORT $LN4@updateComb
mov	DWORD PTR tv71[ebp], 0
mov	dl, BYTE PTR tv71[ebp]
mov	BYTE PTR _isUnicode$[ebp], dl
mov	eax, DWORD PTR _comboID$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hCombo$[ebp], eax
movzx	eax, BYTE PTR _isUnicode$[ebp]
push	eax
mov	ecx, DWORD PTR _hCombo$[ebp]
push	ecx
movzx	edx, BYTE PTR _isUnicode$[ebp]
push	edx
mov	eax, DWORD PTR _hCombo$[ebp]
push	eax
lea	ecx, DWORD PTR $T2[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv128[ebp], eax
mov	edx, DWORD PTR tv128[ebp]
mov	DWORD PTR tv95[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv95[ebp]
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?addText2Combo@FindReplaceDlg@@IAEXPB_WPAUHWND__@@_N@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?updateCombo@FindReplaceDlg@@AAEXH@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$?updateCombo@FindReplaceDlg@@AAEXH@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-60]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?updateCombo@FindReplaceDlg@@AAEXH@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?updateCombos@FindReplaceDlg@@AAEXXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	1602					
mov	ecx, DWORD PTR _this$[ebp]
call	?updateCombo@FindReplaceDlg@@AAEXH@Z	
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
call	?updateCombo@FindReplaceDlg@@AAEXH@Z	
mov	esp, ebp
pop	ebp
ret	0
ENDP
?gotoCorrectTab@FindReplaceDlg@@AAEXXZ PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
call	?getCurrentTabIndex@TabBar@@QBEHXZ	
mov	DWORD PTR _currentIndex$[ebp], eax
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _currentIndex$[ebp]
cmp	ecx, DWORD PTR [eax+32]
je	SHORT $LN2@gotoCorrec
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+32]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
call	?activateAt@TabBar@@QBEXH@Z		
mov	esp, ebp
pop	ebp
ret	0
ENDP
?setDefaultButton@FindReplaceDlg@@AAEXH@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR _nID$[ebp]
push	eax
push	1025					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendMessageW@16
mov	esp, ebp
pop	ebp
ret	4
ENDP
?enableMarkFunc@FindReplaceDlg@@AAEXXZ PROC		
push	ebp
mov	ebp, esp
sub	esp, 528				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?enableFindInFilesControls@FindReplaceDlg@@AAEX_N@Z 
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?enableMarkAllControls@FindReplaceDlg@@AAEX_N@Z 
push	0
push	1611					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	0
push	1608					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	0
push	1602					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	0
push	1609					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	0
push	1610					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	0
push	1635					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	0
push	1634					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	0
push	1636					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	0
push	1614					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	0
push	1641					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	0
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+32], 3
mov	ecx, DWORD PTR _this$[ebp]
call	?gotoCorrectTab@FindReplaceDlg@@AAEXXZ	
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+80]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+76]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+72]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+68]
push	eax
push	2
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__MoveWindow@24
push	260					
lea	eax, DWORD PTR _label$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
call	?getCurrentTitle@TabBar@@QAEXPA_WH@Z	
lea	ecx, DWORD PTR _label$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SetWindowTextW@8
push	1615					
mov	ecx, DWORD PTR _this$[ebp]
call	?setDefaultButton@FindReplaceDlg@@AAEXH@Z 
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?enableMarkAllControls@FindReplaceDlg@@AAEX_N@Z PROC	
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	DWORD PTR _this$[ebp], ecx
movzx	eax, BYTE PTR _isEnable$[ebp]
test	eax, eax
je	SHORT $LN3@enableMark
mov	DWORD PTR tv66[ebp], 5
jmp	SHORT $LN4@enableMark
mov	DWORD PTR tv66[ebp], 0
mov	ecx, DWORD PTR tv66[ebp]
mov	DWORD PTR _hideOrShow$[ebp], ecx
mov	edx, DWORD PTR _hideOrShow$[ebp]
push	edx
push	1615					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	edx, DWORD PTR _hideOrShow$[ebp]
push	edx
push	1616					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	edx, DWORD PTR _hideOrShow$[ebp]
push	edx
push	1618					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	edx, DWORD PTR _hideOrShow$[ebp]
push	edx
push	1633					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	edx, DWORD PTR _hideOrShow$[ebp]
push	edx
push	1632					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
cmp	DWORD PTR _hideOrShow$[ebp], 0
jne	SHORT $LN5@enableMark
mov	DWORD PTR tv151[ebp], 1
jmp	SHORT $LN6@enableMark
mov	DWORD PTR tv151[ebp], 0
mov	edx, DWORD PTR tv151[ebp]
push	edx
push	1621					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
cmp	DWORD PTR _hideOrShow$[ebp], 0
jne	SHORT $LN7@enableMark
mov	DWORD PTR tv163[ebp], 1
jmp	SHORT $LN8@enableMark
mov	DWORD PTR tv163[ebp], 0
mov	edx, DWORD PTR tv163[ebp]
push	edx
push	1612					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
cmp	DWORD PTR _hideOrShow$[ebp], 0
jne	SHORT $LN9@enableMark
mov	DWORD PTR tv175[ebp], 1
jmp	SHORT $LN10@enableMark
mov	DWORD PTR tv175[ebp], 0
mov	edx, DWORD PTR tv175[ebp]
push	edx
push	1613					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?enableFindInFilesFunc@FindReplaceDlg@@AAEXXZ PROC	
push	ebp
mov	ebp, esp
sub	esp, 528				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?enableFindInFilesControls@FindReplaceDlg@@AAEX_N@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+32], 2
mov	ecx, DWORD PTR _this$[ebp]
call	?gotoCorrectTab@FindReplaceDlg@@AAEXXZ	
push	1
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+80]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+76]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+72]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+68]
push	edx
push	2
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__MoveWindow@24
push	260					
lea	edx, DWORD PTR _label$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
call	?getCurrentTitle@TabBar@@QAEXPA_WH@Z	
lea	eax, DWORD PTR _label$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SetWindowTextW@8
push	1656					
mov	ecx, DWORD PTR _this$[ebp]
call	?setDefaultButton@FindReplaceDlg@@AAEXH@Z 
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?enableFindInFilesControls@FindReplaceDlg@@AAEX_N@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 116				
mov	DWORD PTR _this$[ebp], ecx
movzx	eax, BYTE PTR _isEnable$[ebp]
test	eax, eax
je	SHORT $LN4@enableFind
mov	DWORD PTR tv67[ebp], 0
jmp	SHORT $LN5@enableFind
mov	DWORD PTR tv67[ebp], 5
mov	ecx, DWORD PTR tv67[ebp]
push	ecx
push	1606					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	ecx, BYTE PTR _isEnable$[ebp]
test	ecx, ecx
je	SHORT $LN6@enableFind
mov	DWORD PTR tv80[ebp], 0
jmp	SHORT $LN7@enableFind
mov	DWORD PTR tv80[ebp], 5
mov	edx, DWORD PTR tv80[ebp]
push	edx
push	1614					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	edx, BYTE PTR _isEnable$[ebp]
test	edx, edx
je	SHORT $LN8@enableFind
mov	DWORD PTR tv93[ebp], 0
jmp	SHORT $LN9@enableFind
mov	DWORD PTR tv93[ebp], 5
mov	eax, DWORD PTR tv93[ebp]
push	eax
push	1636					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	eax, BYTE PTR _isEnable$[ebp]
test	eax, eax
je	SHORT $LN10@enableFind
mov	DWORD PTR tv138[ebp], 0
jmp	SHORT $LN11@enableFind
mov	DWORD PTR tv138[ebp], 5
mov	ecx, DWORD PTR tv138[ebp]
push	ecx
push	1641					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	ecx, BYTE PTR _isEnable$[ebp]
test	ecx, ecx
je	SHORT $LN12@enableFind
mov	DWORD PTR tv151[ebp], 0
jmp	SHORT $LN13@enableFind
mov	DWORD PTR tv151[ebp], 5
mov	edx, DWORD PTR tv151[ebp]
push	edx
push	1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	edx, BYTE PTR _isEnable$[ebp]
test	edx, edx
je	SHORT $LN14@enableFind
mov	DWORD PTR tv164[ebp], 0
jmp	SHORT $LN15@enableFind
mov	DWORD PTR tv164[ebp], 5
mov	eax, DWORD PTR tv164[ebp]
push	eax
push	1616					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	eax, BYTE PTR _isEnable$[ebp]
test	eax, eax
je	SHORT $LN16@enableFind
mov	DWORD PTR tv177[ebp], 0
jmp	SHORT $LN17@enableFind
mov	DWORD PTR tv177[ebp], 5
mov	ecx, DWORD PTR tv177[ebp]
push	ecx
push	1618					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	ecx, BYTE PTR _isEnable$[ebp]
test	ecx, ecx
je	SHORT $LN18@enableFind
mov	DWORD PTR tv190[ebp], 0
jmp	SHORT $LN19@enableFind
mov	DWORD PTR tv190[ebp], 5
mov	edx, DWORD PTR tv190[ebp]
push	edx
push	1632					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	edx, BYTE PTR _isEnable$[ebp]
test	edx, edx
je	SHORT $LN20@enableFind
mov	DWORD PTR tv203[ebp], 0
jmp	SHORT $LN21@enableFind
mov	DWORD PTR tv203[ebp], 5
mov	eax, DWORD PTR tv203[ebp]
push	eax
push	1633					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	eax, BYTE PTR _isEnable$[ebp]
test	eax, eax
je	SHORT $LN22@enableFind
mov	DWORD PTR tv216[ebp], 0
jmp	SHORT $LN23@enableFind
mov	DWORD PTR tv216[ebp], 5
mov	ecx, DWORD PTR tv216[ebp]
push	ecx
push	1615					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	ecx, BYTE PTR _isEnable$[ebp]
test	ecx, ecx
je	SHORT $LN24@enableFind
mov	DWORD PTR tv229[ebp], 0
jmp	SHORT $LN25@enableFind
mov	DWORD PTR tv229[ebp], 5
mov	edx, DWORD PTR tv229[ebp]
push	edx
push	1621					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	edx, BYTE PTR _isEnable$[ebp]
test	edx, edx
je	SHORT $LN26@enableFind
mov	DWORD PTR tv242[ebp], 0
jmp	SHORT $LN27@enableFind
mov	DWORD PTR tv242[ebp], 5
mov	eax, DWORD PTR tv242[ebp]
push	eax
push	1612					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	eax, BYTE PTR _isEnable$[ebp]
test	eax, eax
je	SHORT $LN28@enableFind
mov	DWORD PTR tv255[ebp], 0
jmp	SHORT $LN29@enableFind
mov	DWORD PTR tv255[ebp], 5
mov	ecx, DWORD PTR tv255[ebp]
push	ecx
push	1613					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	ecx, BYTE PTR _isEnable$[ebp]
test	ecx, ecx
je	SHORT $LN30@enableFind
mov	DWORD PTR tv268[ebp], 0
jmp	SHORT $LN31@enableFind
mov	DWORD PTR tv268[ebp], 5
mov	edx, DWORD PTR tv268[ebp]
push	edx
push	1608					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	edx, BYTE PTR _isEnable$[ebp]
test	edx, edx
je	SHORT $LN32@enableFind
mov	DWORD PTR tv281[ebp], 0
jmp	SHORT $LN33@enableFind
mov	DWORD PTR tv281[ebp], 5
mov	eax, DWORD PTR tv281[ebp]
push	eax
push	1634					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	eax, BYTE PTR _isEnable$[ebp]
test	eax, eax
je	SHORT $LN34@enableFind
mov	DWORD PTR tv294[ebp], 0
jmp	SHORT $LN35@enableFind
mov	DWORD PTR tv294[ebp], 5
mov	ecx, DWORD PTR tv294[ebp]
push	ecx
push	1609					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	ecx, BYTE PTR _isEnable$[ebp]
test	ecx, ecx
je	SHORT $LN36@enableFind
mov	DWORD PTR tv307[ebp], 0
jmp	SHORT $LN37@enableFind
mov	DWORD PTR tv307[ebp], 5
mov	edx, DWORD PTR tv307[ebp]
push	edx
push	1635					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	edx, BYTE PTR _isEnable$[ebp]
test	edx, edx
je	SHORT $LN1@enableFind
push	5
push	1611					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
push	5
push	1602					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	ecx, BYTE PTR _isEnable$[ebp]
test	ecx, ecx
je	SHORT $LN38@enableFind
mov	DWORD PTR tv342[ebp], 5
jmp	SHORT $LN39@enableFind
mov	DWORD PTR tv342[ebp], 0
mov	edx, DWORD PTR tv342[ebp]
push	edx
push	1660					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	edx, BYTE PTR _isEnable$[ebp]
test	edx, edx
je	SHORT $LN40@enableFind
mov	DWORD PTR tv355[ebp], 5
jmp	SHORT $LN41@enableFind
mov	DWORD PTR tv355[ebp], 0
mov	eax, DWORD PTR tv355[ebp]
push	eax
push	1654					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	eax, BYTE PTR _isEnable$[ebp]
test	eax, eax
je	SHORT $LN42@enableFind
mov	DWORD PTR tv368[ebp], 5
jmp	SHORT $LN43@enableFind
mov	DWORD PTR tv368[ebp], 0
mov	ecx, DWORD PTR tv368[ebp]
push	ecx
push	1652					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	ecx, BYTE PTR _isEnable$[ebp]
test	ecx, ecx
je	SHORT $LN44@enableFind
mov	DWORD PTR tv381[ebp], 5
jmp	SHORT $LN45@enableFind
mov	DWORD PTR tv381[ebp], 0
mov	edx, DWORD PTR tv381[ebp]
push	edx
push	1655					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	edx, BYTE PTR _isEnable$[ebp]
test	edx, edx
je	SHORT $LN46@enableFind
mov	DWORD PTR tv394[ebp], 5
jmp	SHORT $LN47@enableFind
mov	DWORD PTR tv394[ebp], 0
mov	eax, DWORD PTR tv394[ebp]
push	eax
push	1653					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	eax, BYTE PTR _isEnable$[ebp]
test	eax, eax
je	SHORT $LN48@enableFind
mov	DWORD PTR tv407[ebp], 5
jmp	SHORT $LN49@enableFind
mov	DWORD PTR tv407[ebp], 0
mov	ecx, DWORD PTR tv407[ebp]
push	ecx
push	1651					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	ecx, BYTE PTR _isEnable$[ebp]
test	ecx, ecx
je	SHORT $LN50@enableFind
mov	DWORD PTR tv420[ebp], 5
jmp	SHORT $LN51@enableFind
mov	DWORD PTR tv420[ebp], 0
mov	edx, DWORD PTR tv420[ebp]
push	edx
push	1656					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	edx, BYTE PTR _isEnable$[ebp]
test	edx, edx
je	SHORT $LN52@enableFind
mov	DWORD PTR tv433[ebp], 5
jmp	SHORT $LN53@enableFind
mov	DWORD PTR tv433[ebp], 0
mov	eax, DWORD PTR tv433[ebp]
push	eax
push	1657					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	eax, BYTE PTR _isEnable$[ebp]
test	eax, eax
je	SHORT $LN54@enableFind
mov	DWORD PTR tv446[ebp], 5
jmp	SHORT $LN55@enableFind
mov	DWORD PTR tv446[ebp], 0
mov	ecx, DWORD PTR tv446[ebp]
push	ecx
push	1658					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	ecx, BYTE PTR _isEnable$[ebp]
test	ecx, ecx
je	SHORT $LN56@enableFind
mov	DWORD PTR tv459[ebp], 5
jmp	SHORT $LN57@enableFind
mov	DWORD PTR tv459[ebp], 0
mov	edx, DWORD PTR tv459[ebp]
push	edx
push	1659					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
movzx	edx, BYTE PTR _isEnable$[ebp]
test	edx, edx
je	SHORT $LN58@enableFind
mov	DWORD PTR tv472[ebp], 5
jmp	SHORT $LN59@enableFind
mov	DWORD PTR tv472[ebp], 0
mov	eax, DWORD PTR tv472[ebp]
push	eax
push	1661					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?enableReplaceFunc@FindReplaceDlg@@AAEX_N@Z PROC	
push	ebp
mov	ebp, esp
sub	esp, 560				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
movzx	eax, BYTE PTR _isEnable$[ebp]
test	eax, eax
je	SHORT $LN3@enableRepl
mov	DWORD PTR tv67[ebp], 1
jmp	SHORT $LN4@enableRepl
mov	DWORD PTR tv67[ebp], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR tv67[ebp]
mov	DWORD PTR [ecx+32], edx
movzx	eax, BYTE PTR _isEnable$[ebp]
test	eax, eax
je	SHORT $LN5@enableRepl
mov	DWORD PTR tv70[ebp], 5
jmp	SHORT $LN6@enableRepl
mov	DWORD PTR tv70[ebp], 0
mov	ecx, DWORD PTR tv70[ebp]
mov	DWORD PTR _hideOrShow$[ebp], ecx
movzx	edx, BYTE PTR _isEnable$[ebp]
test	edx, edx
je	SHORT $LN7@enableRepl
mov	eax, DWORD PTR _this$[ebp]
add	eax, 52					
mov	DWORD PTR tv75[ebp], eax
jmp	SHORT $LN8@enableRepl
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 36					
mov	DWORD PTR tv75[ebp], ecx
mov	edx, DWORD PTR tv75[ebp]
mov	DWORD PTR _pClosePos$[ebp], edx
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?enableFindInFilesControls@FindReplaceDlg@@AAEX_N@Z 
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?enableMarkAllControls@FindReplaceDlg@@AAEX_N@Z 
mov	eax, DWORD PTR _hideOrShow$[ebp]
push	eax
push	1611					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	eax, DWORD PTR _hideOrShow$[ebp]
push	eax
push	1608					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	eax, DWORD PTR _hideOrShow$[ebp]
push	eax
push	1602					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	eax, DWORD PTR _hideOrShow$[ebp]
push	eax
push	1609					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	eax, DWORD PTR _hideOrShow$[ebp]
push	eax
push	1610					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	eax, DWORD PTR _hideOrShow$[ebp]
push	eax
push	1635					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	eax, DWORD PTR _hideOrShow$[ebp]
push	eax
push	1634					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	eax, DWORD PTR _hideOrShow$[ebp]
push	eax
push	1632					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
cmp	DWORD PTR _hideOrShow$[ebp], 0
jne	SHORT $LN9@enableRepl
mov	DWORD PTR tv194[ebp], 1
jmp	SHORT $LN10@enableRepl
mov	DWORD PTR tv194[ebp], 0
mov	eax, DWORD PTR tv194[ebp]
push	eax
push	1636					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
cmp	DWORD PTR _hideOrShow$[ebp], 0
jne	SHORT $LN11@enableRepl
mov	DWORD PTR tv206[ebp], 1
jmp	SHORT $LN12@enableRepl
mov	DWORD PTR tv206[ebp], 0
mov	eax, DWORD PTR tv206[ebp]
push	eax
push	1614					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
cmp	DWORD PTR _hideOrShow$[ebp], 0
jne	SHORT $LN13@enableRepl
mov	DWORD PTR tv218[ebp], 1
jmp	SHORT $LN14@enableRepl
mov	DWORD PTR tv218[ebp], 0
mov	eax, DWORD PTR tv218[ebp]
push	eax
push	1641					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	ecx, DWORD PTR _this$[ebp]
call	?gotoCorrectTab@FindReplaceDlg@@AAEXXZ	
push	1
mov	eax, DWORD PTR _pClosePos$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _pClosePos$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _pClosePos$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _pClosePos$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
push	2
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__MoveWindow@24
push	260					
lea	ecx, DWORD PTR _label$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
call	?getCurrentTitle@TabBar@@QAEXPA_WH@Z	
lea	edx, DWORD PTR _label$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SetWindowTextW@8
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?setDefaultButton@FindReplaceDlg@@AAEXH@Z 
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	4
ENDP
?combo2ExtendedMode@FindReplaceDlg@@IAEXH@Z PROC	
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?combo2ExtendedMode@FindReplaceDlg@@IAEXH@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 72					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _comboID$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hFindCombo$[ebp], eax
cmp	DWORD PTR _hFindCombo$[ebp], 0
jne	SHORT $LN14@combo2Exte
jmp	$LN15@combo2Exte
push	0
mov	eax, DWORD PTR _hFindCombo$[ebp]
push	eax
lea	ecx, DWORD PTR _str2transform$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR _nbEOL$[ebp], 0
lea	ecx, DWORD PTR _str2transform$[ebp]
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
call	DWORD PTR __imp__lstrlenW@4
mov	DWORD PTR _str2transformLen$[ebp], eax
mov	DWORD PTR _i$4[ebp], 0
jmp	SHORT $LN13@combo2Exte
mov	edx, DWORD PTR _i$4[ebp]
add	edx, 1
mov	DWORD PTR _i$4[ebp], edx
mov	eax, DWORD PTR _i$4[ebp]
cmp	eax, DWORD PTR _str2transformLen$[ebp]
jae	SHORT $LN11@combo2Exte
mov	ecx, DWORD PTR _i$4[ebp]
push	ecx
lea	ecx, DWORD PTR _str2transform$[ebp]
call	??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z 
movzx	edx, WORD PTR [eax]
cmp	edx, 13					
je	SHORT $LN9@combo2Exte
mov	eax, DWORD PTR _i$4[ebp]
push	eax
lea	ecx, DWORD PTR _str2transform$[ebp]
call	??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z 
movzx	ecx, WORD PTR [eax]
cmp	ecx, 10					
jne	SHORT $LN10@combo2Exte
mov	edx, DWORD PTR _nbEOL$[ebp]
add	edx, 1
mov	DWORD PTR _nbEOL$[ebp], edx
jmp	SHORT $LN12@combo2Exte
cmp	DWORD PTR _nbEOL$[ebp], 0
je	$LN8@combo2Exte
mov	eax, DWORD PTR _nbEOL$[ebp]
mov	ecx, DWORD PTR _str2transformLen$[ebp]
lea	eax, DWORD PTR [ecx+eax*2+1]
xor	ecx, ecx
mov	edx, 2
mul	edx
seto	cl
neg	ecx
or	ecx, eax
push	ecx
call	??_U@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T3[ebp], eax
mov	eax, DWORD PTR $T3[ebp]
mov	DWORD PTR _newBuffer$6[ebp], eax
mov	DWORD PTR _j$7[ebp], 0
mov	DWORD PTR _i$5[ebp], 0
jmp	SHORT $LN7@combo2Exte
mov	ecx, DWORD PTR _i$5[ebp]
add	ecx, 1
mov	DWORD PTR _i$5[ebp], ecx
mov	edx, DWORD PTR _i$5[ebp]
cmp	edx, DWORD PTR _str2transformLen$[ebp]
jae	$LN5@combo2Exte
mov	eax, DWORD PTR _i$5[ebp]
push	eax
lea	ecx, DWORD PTR _str2transform$[ebp]
call	??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z 
movzx	ecx, WORD PTR [eax]
cmp	ecx, 13					
jne	SHORT $LN4@combo2Exte
mov	edx, 92					
mov	eax, DWORD PTR _j$7[ebp]
mov	ecx, DWORD PTR _newBuffer$6[ebp]
mov	WORD PTR [ecx+eax*2], dx
mov	edx, DWORD PTR _j$7[ebp]
add	edx, 1
mov	DWORD PTR _j$7[ebp], edx
mov	eax, 114				
mov	ecx, DWORD PTR _j$7[ebp]
mov	edx, DWORD PTR _newBuffer$6[ebp]
mov	WORD PTR [edx+ecx*2], ax
mov	eax, DWORD PTR _j$7[ebp]
add	eax, 1
mov	DWORD PTR _j$7[ebp], eax
jmp	SHORT $LN3@combo2Exte
mov	ecx, DWORD PTR _i$5[ebp]
push	ecx
lea	ecx, DWORD PTR _str2transform$[ebp]
call	??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z 
movzx	edx, WORD PTR [eax]
cmp	edx, 10					
jne	SHORT $LN2@combo2Exte
mov	eax, 92					
mov	ecx, DWORD PTR _j$7[ebp]
mov	edx, DWORD PTR _newBuffer$6[ebp]
mov	WORD PTR [edx+ecx*2], ax
mov	eax, DWORD PTR _j$7[ebp]
add	eax, 1
mov	DWORD PTR _j$7[ebp], eax
mov	ecx, 110				
mov	edx, DWORD PTR _j$7[ebp]
mov	eax, DWORD PTR _newBuffer$6[ebp]
mov	WORD PTR [eax+edx*2], cx
mov	ecx, DWORD PTR _j$7[ebp]
add	ecx, 1
mov	DWORD PTR _j$7[ebp], ecx
jmp	SHORT $LN3@combo2Exte
mov	edx, DWORD PTR _i$5[ebp]
push	edx
lea	ecx, DWORD PTR _str2transform$[ebp]
call	??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z 
mov	ecx, DWORD PTR _j$7[ebp]
mov	edx, DWORD PTR _newBuffer$6[ebp]
mov	ax, WORD PTR [eax]
mov	WORD PTR [edx+ecx*2], ax
mov	ecx, DWORD PTR _j$7[ebp]
add	ecx, 1
mov	DWORD PTR _j$7[ebp], ecx
jmp	$LN6@combo2Exte
xor	edx, edx
mov	eax, DWORD PTR _j$7[ebp]
mov	ecx, DWORD PTR _newBuffer$6[ebp]
mov	WORD PTR [ecx+eax*2], dx
mov	edx, DWORD PTR _j$7[ebp]
add	edx, 1
mov	DWORD PTR _j$7[ebp], edx
mov	eax, DWORD PTR _newBuffer$6[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?setSearchText@FindReplaceDlg@@QAEXPA_W@Z 
mov	DWORD PTR ?_options@FindReplaceDlg@@2UFindOption@@A+8, 1
push	0
push	0
push	241					
push	1625					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
push	1
push	241					
push	1626					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
push	0
push	241					
push	1605					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	ecx, DWORD PTR _newBuffer$6[ebp]
mov	DWORD PTR $T2[ebp], ecx
mov	edx, DWORD PTR $T2[ebp]
push	edx
call	??_V@YAXPAX@Z				
add	esp, 4
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _str2transform$[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?combo2ExtendedMode@FindReplaceDlg@@IAEXH@Z$0 PROC
lea	ecx, DWORD PTR _str2transform$[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$?combo2ExtendedMode@FindReplaceDlg@@IAEXH@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-76]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?combo2ExtendedMode@FindReplaceDlg@@IAEXH@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?finderProc@FindReplaceDlg@@KGJPAUHWND__@@IIJ@Z PROC	
push	ebp
mov	ebp, esp
sub	esp, 8
cmp	DWORD PTR _message$[ebp], 256		
jne	SHORT $LN5@finderProc
cmp	DWORD PTR _wParam$[ebp], 46		
je	SHORT $LN4@finderProc
cmp	DWORD PTR _wParam$[ebp], 13		
jne	SHORT $LN5@finderProc
push	-21					
mov	eax, DWORD PTR _hwnd$[ebp]
push	eax
call	DWORD PTR __imp__GetWindowLongW@8
mov	DWORD PTR _pScint$1[ebp], eax
push	-21					
mov	ecx, DWORD PTR _pScint$1[ebp]
call	?getHParent@Window@@QBEPAUHWND__@@XZ	
push	eax
call	DWORD PTR __imp__GetWindowLongW@8
mov	DWORD PTR _pFinder$2[ebp], eax
cmp	DWORD PTR _wParam$[ebp], 13		
jne	SHORT $LN3@finderProc
mov	ecx, DWORD PTR _pFinder$2[ebp]
call	?GotoFoundLine@Finder@@QAEXXZ		
jmp	SHORT $LN2@finderProc
mov	ecx, DWORD PTR _pFinder$2[ebp]
call	?DeleteResult@Finder@@QAEXXZ		
xor	eax, eax
jmp	SHORT $LN6@finderProc
jmp	SHORT $LN6@finderProc
mov	ecx, DWORD PTR _lParam$[ebp]
push	ecx
mov	edx, DWORD PTR _wParam$[ebp]
push	edx
mov	eax, DWORD PTR _message$[ebp]
push	eax
mov	ecx, DWORD PTR _hwnd$[ebp]
push	ecx
mov	edx, DWORD PTR ?originalFinderProc@FindReplaceDlg@@1JA 
push	edx
call	DWORD PTR __imp__CallWindowProcW@20
mov	esp, ebp
pop	ebp
ret	16					
ENDP
?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z
mov	eax, DWORD PTR fs:0
push	eax
mov	eax, 4108				
call	__chkstk
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
lea	eax, DWORD PTR _str$[ebp]
push	eax
push	2047					
push	13					
mov	ecx, DWORD PTR _hCombo$[ebp]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
lea	edx, DWORD PTR _str$[ebp]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@getTextFro
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ret	0
ENDP
__ehhandler$?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-4112]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?addText2Combo@FindReplaceDlg@@IAEXPB_WPAUHWND__@@_N@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _hCombo$[ebp], 0
jne	SHORT $LN3@addText2Co
jmp	SHORT $LN4@addText2Co
push	OFFSET $SG170362
mov	eax, DWORD PTR _txt2add$[ebp]
push	eax
call	DWORD PTR __imp__lstrcmpW@8
test	eax, eax
jne	SHORT $LN2@addText2Co
jmp	SHORT $LN4@addText2Co
mov	DWORD PTR _i$[ebp], 0
mov	ecx, DWORD PTR _txt2add$[ebp]
push	ecx
push	-1
push	344					
mov	edx, DWORD PTR _hCombo$[ebp]
push	edx
call	DWORD PTR __imp__SendMessageW@16
mov	DWORD PTR _i$[ebp], eax
cmp	DWORD PTR _i$[ebp], -1
je	SHORT $LN1@addText2Co
push	0
mov	eax, DWORD PTR _i$[ebp]
push	eax
push	324					
mov	ecx, DWORD PTR _hCombo$[ebp]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	edx, DWORD PTR _txt2add$[ebp]
push	edx
push	0
push	330					
mov	eax, DWORD PTR _hCombo$[ebp]
push	eax
call	DWORD PTR __imp__SendMessageW@16
mov	DWORD PTR _i$[ebp], eax
push	0
mov	ecx, DWORD PTR _i$[ebp]
push	ecx
push	334					
mov	edx, DWORD PTR _hCombo$[ebp]
push	edx
call	DWORD PTR __imp__SendMessageW@16
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z
mov	eax, DWORD PTR fs:0
push	eax
mov	eax, 4136				
call	__chkstk
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR $T49[ebp], 0
mov	eax, DWORD PTR _message$[ebp]
mov	DWORD PTR tv64[ebp], eax
cmp	DWORD PTR tv64[ebp], 272		
ja	SHORT $LN152@run_dlgPro
cmp	DWORD PTR tv64[ebp], 272		
je	SHORT $LN104@run_dlgPro
cmp	DWORD PTR tv64[ebp], 6
je	$LN96@run_dlgPro
cmp	DWORD PTR tv64[ebp], 43			
je	$LN103@run_dlgPro
cmp	DWORD PTR tv64[ebp], 78			
je	$LN99@run_dlgPro
jmp	$LN105@run_dlgPro
cmp	DWORD PTR tv64[ebp], 273		
je	$LN84@run_dlgPro
cmp	DWORD PTR tv64[ebp], 276		
je	$LN102@run_dlgPro
cmp	DWORD PTR tv64[ebp], 2036		
je	$LN85@run_dlgPro
jmp	$LN105@run_dlgPro
lea	ecx, DWORD PTR _arc$95[ebp]
push	ecx
push	2
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__GetWindowRect@8
mov	ecx, DWORD PTR _arc$95[ebp+12]
sub	ecx, DWORD PTR _arc$95[ebp+4]
mov	DWORD PTR tv81[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR tv81[ebp]
mov	DWORD PTR [edx+48], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR tv81[ebp]
mov	DWORD PTR [ecx+64], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR tv81[ebp]
mov	DWORD PTR [eax+80], ecx
mov	edx, DWORD PTR _arc$95[ebp+8]
sub	edx, DWORD PTR _arc$95[ebp]
mov	DWORD PTR tv88[ebp], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR tv88[ebp]
mov	DWORD PTR [eax+44], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR tv88[ebp]
mov	DWORD PTR [edx+60], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR tv88[ebp]
mov	DWORD PTR [ecx+76], edx
mov	eax, DWORD PTR _arc$95[ebp]
mov	DWORD PTR _p$39[ebp], eax
mov	ecx, DWORD PTR _arc$95[ebp+4]
mov	DWORD PTR _p$39[ebp+4], ecx
lea	edx, DWORD PTR _p$39[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__ScreenToClient@8
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _p$39[ebp]
mov	DWORD PTR [edx+52], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _p$39[ebp+4]
mov	DWORD PTR [ecx+56], edx
push	1
push	1609					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?getTopPoint@StaticDialog@@QBE?AUtagPOINT@@PAUHWND__@@_N@Z 
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR _p$39[ebp], ecx
mov	DWORD PTR _p$39[ebp+4], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _p$39[ebp]
mov	DWORD PTR [eax+68], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _p$39[ebp+4]
mov	DWORD PTR [edx+72], eax
push	1
push	2
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?getTopPoint@StaticDialog@@QBE?AUtagPOINT@@PAUHWND__@@_N@Z 
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR [eax+4]
mov	DWORD PTR _p$39[ebp], ecx
mov	DWORD PTR _p$39[ebp+4], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _p$39[ebp]
mov	DWORD PTR [eax+36], ecx
mov	edx, DWORD PTR _p$39[ebp+4]
add	edx, 10					
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+40], edx
mov	eax, 1
jmp	$LN108@run_dlgPro
mov	ecx, DWORD PTR _lParam$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?drawItem@FindReplaceDlg@@AAEXPAUtagDRAWITEMSTRUCT@@@Z 
mov	eax, 1
jmp	$LN108@run_dlgPro
push	1622					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
cmp	DWORD PTR _lParam$[ebp], eax
jne	SHORT $LN101@run_dlgPro
push	0
push	0
push	1024					
push	1622					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	DWORD PTR _percent$29[ebp], eax
call	?getInstance@NppParameters@@SAPAV1@XZ	
mov	ecx, eax
call	?getFindHistory@NppParameters@@QAEAAUFindHistory@@XZ 
mov	DWORD PTR _findHistory$22[ebp], eax
mov	eax, DWORD PTR _findHistory$22[ebp]
mov	ecx, DWORD PTR _percent$29[ebp]
mov	DWORD PTR [eax+96], ecx
push	1688					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
movzx	edx, al
test	edx, edx
je	SHORT $LN101@run_dlgPro
mov	eax, DWORD PTR _percent$29[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	?getInstance@NppParameters@@SAPAV1@XZ	
mov	ecx, eax
call	?SetTransparent@NppParameters@@QAEXPAUHWND__@@H@Z 
mov	eax, 1
jmp	$LN108@run_dlgPro
mov	eax, DWORD PTR _lParam$[ebp]
mov	DWORD PTR _nmhdr$31[ebp], eax
mov	ecx, DWORD PTR _nmhdr$31[ebp]
cmp	DWORD PTR [ecx+8], -551			
jne	SHORT $LN98@run_dlgPro
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
call	?getHSelf@Window@@QBEPAUHWND__@@XZ	
mov	DWORD PTR _tabHandle$30[ebp], eax
mov	edx, DWORD PTR _nmhdr$31[ebp]
mov	eax, DWORD PTR [edx]
cmp	eax, DWORD PTR _tabHandle$30[ebp]
jne	SHORT $LN97@run_dlgPro
push	0
push	0
push	4875					
mov	ecx, DWORD PTR _tabHandle$30[ebp]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	DWORD PTR _indexClicked$24[ebp], eax
push	1
push	0
mov	edx, DWORD PTR _indexClicked$24[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?doDialog@FindReplaceDlg@@QAEXW4DIALOG_TYPE@@_N1@Z 
mov	eax, 1
jmp	$LN108@run_dlgPro
jmp	$LN105@run_dlgPro
mov	eax, DWORD PTR _wParam$[ebp]
and	eax, 65535				
movzx	ecx, ax
cmp	ecx, 1
je	SHORT $LN94@run_dlgPro
mov	edx, DWORD PTR _wParam$[ebp]
and	edx, 65535				
movzx	eax, dx
cmp	eax, 2
jne	$LN95@run_dlgPro
lea	ecx, DWORD PTR _cr$6[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?getSelection@ScintillaEditView@@QBE?AUSci_CharacterRange@@XZ 
mov	ecx, DWORD PTR _cr$6[ebp+4]
sub	ecx, DWORD PTR _cr$6[ebp]
mov	DWORD PTR _nbSelected$36[ebp], ecx
push	1632					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
movzx	edx, al
test	edx, edx
je	SHORT $LN109@run_dlgPro
mov	DWORD PTR tv263[ebp], 1
jmp	SHORT $LN110@run_dlgPro
mov	DWORD PTR tv263[ebp], 0
mov	al, BYTE PTR tv263[ebp]
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+14, al
movzx	ecx, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+14
test	ecx, ecx
je	SHORT $LN111@run_dlgPro
mov	DWORD PTR tv267[ebp], 1
jmp	SHORT $LN112@run_dlgPro
mov	DWORD PTR tv267[ebp], 0
mov	edx, DWORD PTR tv267[ebp]
mov	DWORD PTR _checkVal$38[ebp], edx
movzx	eax, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+14
test	eax, eax
jne	SHORT $LN93@run_dlgPro
cmp	DWORD PTR _nbSelected$36[ebp], 1024	
jg	SHORT $LN92@run_dlgPro
mov	DWORD PTR _checkVal$38[ebp], 0
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+14, 0
jmp	SHORT $LN93@run_dlgPro
mov	DWORD PTR _checkVal$38[ebp], 1
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+14, 1
push	0
push	0
push	2423					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
cmp	eax, 1
jne	SHORT $LN90@run_dlgPro
mov	DWORD PTR _checkVal$38[ebp], 0
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+14, 0
mov	DWORD PTR _nbSelected$36[ebp], 0
mov	eax, DWORD PTR _nbSelected$36[ebp]
push	eax
push	1632					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
cmp	DWORD PTR _nbSelected$36[ebp], 0
jne	SHORT $LN89@run_dlgPro
mov	DWORD PTR _checkVal$38[ebp], 0
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+14, 0
push	0
mov	eax, DWORD PTR _checkVal$38[ebp]
push	eax
push	241					
push	1632					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	1687					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
movzx	eax, al
test	eax, eax
je	SHORT $LN88@run_dlgPro
mov	ecx, DWORD PTR _wParam$[ebp]
and	ecx, 65535				
movzx	edx, cx
test	edx, edx
jne	SHORT $LN87@run_dlgPro
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+44]
call	eax
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN87@run_dlgPro
push	0
push	0
push	1024					
push	1622					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	DWORD PTR _percent$23[ebp], eax
mov	ecx, DWORD PTR _percent$23[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	?getInstance@NppParameters@@SAPAV1@XZ	
mov	ecx, eax
call	?SetTransparent@NppParameters@@QAEXPAUHWND__@@H@Z 
jmp	SHORT $LN88@run_dlgPro
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	?getInstance@NppParameters@@SAPAV1@XZ	
mov	ecx, eax
call	?removeTransparent@NppParameters@@QAEXPAUHWND__@@@Z 
mov	eax, 1
jmp	$LN108@run_dlgPro
mov	eax, DWORD PTR _lParam$[ebp]
push	eax
mov	ecx, DWORD PTR _wParam$[ebp]
push	ecx
push	2036					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	DWORD PTR __imp__SendMessageW@16
jmp	$LN108@run_dlgPro
push	0
push	0
push	5025					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	DWORD PTR __imp__SendMessageW@16
cmp	eax, 1
jne	SHORT $LN113@run_dlgPro
mov	DWORD PTR tv372[ebp], 1
jmp	SHORT $LN114@run_dlgPro
mov	DWORD PTR tv372[ebp], 0
mov	al, BYTE PTR tv372[ebp]
mov	BYTE PTR _isMacroRecording$59[ebp], al
call	?getInstance@NppParameters@@SAPAV1@XZ	
mov	DWORD PTR _nppParamInst$57[ebp], eax
mov	ecx, DWORD PTR _nppParamInst$57[ebp]
call	?getFindHistory@NppParameters@@QAEAAUFindHistory@@XZ 
mov	DWORD PTR _findHistory$56[ebp], eax
mov	ecx, DWORD PTR _wParam$[ebp]
mov	DWORD PTR tv377[ebp], ecx
cmp	DWORD PTR tv377[ebp], 1603		
ja	SHORT $LN151@run_dlgPro
cmp	DWORD PTR tv377[ebp], 1603		
je	$LN32@run_dlgPro
cmp	DWORD PTR tv377[ebp], 1
je	$LN80@run_dlgPro
cmp	DWORD PTR tv377[ebp], 2
je	SHORT $LN81@run_dlgPro
jmp	$LN105@run_dlgPro
mov	edx, DWORD PTR tv377[ebp]
sub	edx, 1604				
mov	DWORD PTR tv377[ebp], edx
cmp	DWORD PTR tv377[ebp], 99		
ja	$LN105@run_dlgPro
mov	eax, DWORD PTR tv377[ebp]
movzx	ecx, BYTE PTR $LN196@run_dlgPro[eax]
jmp	DWORD PTR $LN198@run_dlgPro[ecx*4]
push	0
push	0
push	2201					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	OFFSET $SG171422
lea	ecx, DWORD PTR $T77[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	5
lea	ecx, DWORD PTR $T77[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T77[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	0
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax+12]
call	edx
jmp	$LN105@run_dlgPro
push	OFFSET $SG171425
lea	ecx, DWORD PTR $T83[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 1
push	5
lea	eax, DWORD PTR $T83[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T83[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?getUnicodeMode@Buffer@@QBE?AW4UniMode@@XZ 
test	eax, eax
je	SHORT $LN115@run_dlgPro
mov	DWORD PTR tv445[ebp], 1
jmp	SHORT $LN116@run_dlgPro
mov	DWORD PTR tv445[ebp], 0
mov	al, BYTE PTR tv445[ebp]
mov	BYTE PTR _isUnicode$43[ebp], al
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hFindCombo$14[ebp], eax
movzx	eax, BYTE PTR _isUnicode$43[ebp]
push	eax
mov	ecx, DWORD PTR _hFindCombo$14[ebp]
push	ecx
lea	edx, DWORD PTR $T75[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv434[ebp], eax
mov	eax, DWORD PTR tv434[ebp]
mov	DWORD PTR tv1779[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR tv1779[ebp]
push	ecx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+16
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T75[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
call	?updateCombo@FindReplaceDlg@@AAEXH@Z	
mov	edx, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [edx+8], 1
movzx	eax, BYTE PTR _isMacroRecording$59[ebp]
test	eax, eax
je	SHORT $LN79@run_dlgPro
push	1
mov	ecx, DWORD PTR _wParam$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?saveInMacro@FindReplaceDlg@@AAEXHH@Z	
mov	DWORD PTR _findStatus$33[ebp], 0
push	0
lea	edx, DWORD PTR _findStatus$33[ebp]
push	edx
mov	eax, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
push	eax
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+16
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z 
cmp	DWORD PTR _findStatus$33[ebp], 3
jne	SHORT $LN78@run_dlgPro
push	OFFSET $SG171497
lea	ecx, DWORD PTR $T79[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 3
push	3
lea	ecx, DWORD PTR $T79[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T79[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
jmp	SHORT $LN77@run_dlgPro
cmp	DWORD PTR _findStatus$33[ebp], 2
jne	SHORT $LN77@run_dlgPro
push	OFFSET $SG171517
lea	ecx, DWORD PTR $T90[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 4
push	2
lea	edx, DWORD PTR $T90[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T90[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	eax, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [eax+8], 0
mov	eax, 1
jmp	$LN108@run_dlgPro
lea	ecx, DWORD PTR _op$45[ebp]
call	??0LongRunningOperation@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 5
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+32], 1
jne	$LN74@run_dlgPro
push	OFFSET $SG171554
lea	ecx, DWORD PTR $T81[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 6
push	5
lea	edx, DWORD PTR $T81[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR $T81[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?getUnicodeMode@Buffer@@QBE?AW4UniMode@@XZ 
test	eax, eax
je	SHORT $LN117@run_dlgPro
mov	DWORD PTR tv515[ebp], 1
jmp	SHORT $LN118@run_dlgPro
mov	DWORD PTR tv515[ebp], 0
mov	dl, BYTE PTR tv515[ebp]
mov	BYTE PTR _isUnicode$52[ebp], dl
push	1601					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hFindCombo$20[ebp], eax
push	1602					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hReplaceCombo$8[ebp], eax
movzx	ecx, BYTE PTR _isUnicode$52[ebp]
push	ecx
mov	edx, DWORD PTR _hFindCombo$20[ebp]
push	edx
lea	eax, DWORD PTR $T65[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv504[ebp], eax
mov	ecx, DWORD PTR tv504[ebp]
mov	DWORD PTR tv1785[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 7
mov	edx, DWORD PTR tv1785[ebp]
push	edx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+16
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR $T65[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
movzx	eax, BYTE PTR _isUnicode$52[ebp]
push	eax
mov	ecx, DWORD PTR _hReplaceCombo$8[ebp]
push	ecx
lea	edx, DWORD PTR $T69[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv497[ebp], eax
mov	eax, DWORD PTR tv497[ebp]
mov	DWORD PTR tv1787[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 8
mov	ecx, DWORD PTR tv1787[ebp]
push	ecx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+44
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR $T69[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?updateCombos@FindReplaceDlg@@AAEXXZ	
mov	edx, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [edx+8], 1
movzx	eax, BYTE PTR _isMacroRecording$59[ebp]
test	eax, eax
je	SHORT $LN73@run_dlgPro
push	2
mov	ecx, DWORD PTR _wParam$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?saveInMacro@FindReplaceDlg@@AAEXHH@Z	
push	0
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+44
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+16
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?processReplace@FindReplaceDlg@@QAE_NPB_W0PBUFindOption@@@Z 
mov	edx, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [edx+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _op$45[ebp]
call	??1LongRunningOperation@@QAE@XZ		
mov	eax, 1
jmp	$LN108@run_dlgPro
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+32], 0
jne	$LN71@run_dlgPro
push	OFFSET $SG171596
lea	ecx, DWORD PTR $T89[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 9
push	5
lea	ecx, DWORD PTR $T89[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T89[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?getUnicodeMode@Buffer@@QBE?AW4UniMode@@XZ 
test	eax, eax
je	SHORT $LN119@run_dlgPro
mov	DWORD PTR tv583[ebp], 1
jmp	SHORT $LN120@run_dlgPro
mov	DWORD PTR tv583[ebp], 0
mov	cl, BYTE PTR tv583[ebp]
mov	BYTE PTR _isUnicode$40[ebp], cl
push	1601					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hFindCombo$18[ebp], eax
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
call	?combo2ExtendedMode@FindReplaceDlg@@IAEXH@Z 
movzx	ecx, BYTE PTR _isUnicode$40[ebp]
push	ecx
mov	edx, DWORD PTR _hFindCombo$18[ebp]
push	edx
lea	eax, DWORD PTR $T61[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv572[ebp], eax
mov	ecx, DWORD PTR tv572[ebp]
mov	DWORD PTR tv1790[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 10		
mov	edx, DWORD PTR tv1790[ebp]
push	edx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+16
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T61[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
call	?updateCombo@FindReplaceDlg@@AAEXH@Z	
mov	eax, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [eax+8], 1
movzx	ecx, BYTE PTR _isMacroRecording$59[ebp]
test	ecx, ecx
je	SHORT $LN70@run_dlgPro
push	9
mov	edx, DWORD PTR _wParam$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?saveInMacro@FindReplaceDlg@@AAEXHH@Z	
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?findAllIn@FindReplaceDlg@@QAEXW4InWhat@@@Z 
mov	eax, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [eax+8], 0
mov	eax, 1
jmp	$LN108@run_dlgPro
push	OFFSET $SG171619
lea	ecx, DWORD PTR $T86[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 11		
push	5
lea	ecx, DWORD PTR $T86[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T86[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?getUnicodeMode@Buffer@@QBE?AW4UniMode@@XZ 
test	eax, eax
je	SHORT $LN121@run_dlgPro
mov	DWORD PTR tv629[ebp], 1
jmp	SHORT $LN122@run_dlgPro
mov	DWORD PTR tv629[ebp], 0
mov	cl, BYTE PTR tv629[ebp]
mov	BYTE PTR _isUnicode$47[ebp], cl
push	1601					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hFindCombo$28[ebp], eax
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
call	?combo2ExtendedMode@FindReplaceDlg@@IAEXH@Z 
movzx	ecx, BYTE PTR _isUnicode$47[ebp]
push	ecx
mov	edx, DWORD PTR _hFindCombo$28[ebp]
push	edx
lea	eax, DWORD PTR $T67[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv618[ebp], eax
mov	ecx, DWORD PTR tv618[ebp]
mov	DWORD PTR tv1793[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 12		
mov	edx, DWORD PTR tv1793[ebp]
push	edx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+16
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T67[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
call	?updateCombo@FindReplaceDlg@@AAEXH@Z	
mov	eax, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [eax+8], 1
movzx	ecx, BYTE PTR _isMacroRecording$59[ebp]
test	ecx, ecx
je	SHORT $LN68@run_dlgPro
push	9
mov	edx, DWORD PTR _wParam$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?saveInMacro@FindReplaceDlg@@AAEXHH@Z	
push	2
mov	ecx, DWORD PTR _this$[ebp]
call	?findAllIn@FindReplaceDlg@@QAEXW4InWhat@@@Z 
mov	eax, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [eax+8], 0
mov	eax, 1
jmp	$LN108@run_dlgPro
push	OFFSET $SG171642
lea	ecx, DWORD PTR $T84[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 13		
push	5
lea	ecx, DWORD PTR $T84[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T84[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR _filterSize$5[ebp], 256	
mov	edx, 2
shl	edx, 8
mov	DWORD PTR $T32[ebp], edx
cmp	DWORD PTR $T32[ebp], 514		
jae	SHORT $LN123@run_dlgPro
jmp	SHORT $LN124@run_dlgPro
call	___report_rangecheckfailure
xor	eax, eax
mov	ecx, DWORD PTR $T32[ebp]
mov	WORD PTR _filters$97[ebp+ecx], ax
push	256					
lea	edx, DWORD PTR _filters$97[ebp]
push	edx
push	1652					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItemTextW@16
push	0
push	1652					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
lea	ecx, DWORD PTR _filters$97[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?addText2Combo@FindReplaceDlg@@IAEXPB_WPAUHWND__@@_N@Z 
lea	edx, DWORD PTR _filters$97[ebp]
push	edx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+72
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	260					
lea	eax, DWORD PTR _directory$101[ebp]
push	eax
push	1653					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItemTextW@16
push	0
push	1653					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
lea	edx, DWORD PTR _directory$101[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?addText2Combo@FindReplaceDlg@@IAEXPB_WPAUHWND__@@_N@Z 
lea	eax, DWORD PTR _directory$101[ebp]
push	eax
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+100
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
lea	ecx, DWORD PTR _directory$101[ebp]
push	ecx
call	DWORD PTR __imp__lstrlenW@4
test	eax, eax
jle	SHORT $LN66@run_dlgPro
lea	edx, DWORD PTR _directory$101[ebp]
push	edx
call	DWORD PTR __imp__lstrlenW@4
movzx	eax, WORD PTR _directory$101[ebp+eax*2-2]
cmp	eax, 92					
je	SHORT $LN66@run_dlgPro
push	OFFSET $SG171648
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+100
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?getUnicodeMode@Buffer@@QBE?AW4UniMode@@XZ 
test	eax, eax
je	SHORT $LN125@run_dlgPro
mov	DWORD PTR tv736[ebp], 1
jmp	SHORT $LN126@run_dlgPro
mov	DWORD PTR tv736[ebp], 0
mov	al, BYTE PTR tv736[ebp]
mov	BYTE PTR _isUnicode$41[ebp], al
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hFindCombo$26[ebp], eax
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
call	?combo2ExtendedMode@FindReplaceDlg@@IAEXH@Z 
movzx	eax, BYTE PTR _isUnicode$41[ebp]
push	eax
mov	ecx, DWORD PTR _hFindCombo$26[ebp]
push	ecx
lea	edx, DWORD PTR $T73[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv664[ebp], eax
mov	eax, DWORD PTR tv664[ebp]
mov	DWORD PTR tv1796[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 14		
mov	ecx, DWORD PTR tv1796[ebp]
push	ecx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+16
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T73[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
call	?updateCombo@FindReplaceDlg@@AAEXH@Z	
mov	edx, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [edx+8], 1
movzx	eax, BYTE PTR _isMacroRecording$59[ebp]
test	eax, eax
je	SHORT $LN65@run_dlgPro
push	5
mov	ecx, DWORD PTR _wParam$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?saveInMacro@FindReplaceDlg@@AAEXHH@Z	
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?findAllIn@FindReplaceDlg@@QAEXW4InWhat@@@Z 
mov	edx, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [edx+8], 0
mov	eax, 1
jmp	$LN108@run_dlgPro
lea	ecx, DWORD PTR _op$48[ebp]
call	??0LongRunningOperation@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 15		
push	OFFSET $SG171672
lea	ecx, DWORD PTR $T82[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 16		
push	5
lea	eax, DWORD PTR $T82[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 15		
lea	ecx, DWORD PTR $T82[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR _filterSize$4[ebp], 256	
push	256					
lea	ecx, DWORD PTR _filters$96[ebp]
push	ecx
push	1652					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItemTextW@16
push	0
push	1652					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
lea	eax, DWORD PTR _filters$96[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?addText2Combo@FindReplaceDlg@@IAEXPB_WPAUHWND__@@_N@Z 
lea	ecx, DWORD PTR _filters$96[ebp]
push	ecx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+72
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	260					
lea	edx, DWORD PTR _directory$100[ebp]
push	edx
push	1653					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItemTextW@16
push	0
push	1653					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
lea	ecx, DWORD PTR _directory$100[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?addText2Combo@FindReplaceDlg@@IAEXPB_WPAUHWND__@@_N@Z 
lea	edx, DWORD PTR _directory$100[ebp]
push	edx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+100
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
lea	eax, DWORD PTR _directory$100[ebp]
push	eax
call	DWORD PTR __imp__lstrlenW@4
test	eax, eax
jle	SHORT $LN63@run_dlgPro
lea	ecx, DWORD PTR _directory$100[ebp]
push	ecx
call	DWORD PTR __imp__lstrlenW@4
movzx	edx, WORD PTR _directory$100[ebp+eax*2-2]
cmp	edx, 92					
je	SHORT $LN63@run_dlgPro
push	OFFSET $SG171677
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+100
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	OFFSET $SG171679
lea	ecx, DWORD PTR _msg$94[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 17		
push	OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+100
lea	ecx, DWORD PTR _msg$94[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z 
push	OFFSET $SG171680
lea	ecx, DWORD PTR _msg$94[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	0
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+72
call	??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z 
movzx	eax, WORD PTR [eax]
test	eax, eax
je	SHORT $LN127@run_dlgPro
push	OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+72
lea	ecx, DWORD PTR $T72[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z 
mov	DWORD PTR tv869[ebp], eax
mov	ecx, DWORD PTR tv869[ebp]
mov	DWORD PTR tv1804[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 18		
mov	edx, DWORD PTR $T49[ebp]
or	edx, 1
mov	DWORD PTR $T49[ebp], edx
mov	eax, DWORD PTR tv1804[ebp]
mov	DWORD PTR tv893[ebp], eax
jmp	SHORT $LN128@run_dlgPro
push	OFFSET $SG171685
lea	ecx, DWORD PTR $T74[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR tv483[ebp], eax
mov	ecx, DWORD PTR tv483[ebp]
mov	DWORD PTR tv1809[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 19		
mov	edx, DWORD PTR $T49[ebp]
or	edx, 2
mov	DWORD PTR $T49[ebp], edx
mov	eax, DWORD PTR tv1809[ebp]
mov	DWORD PTR tv893[ebp], eax
mov	ecx, DWORD PTR tv893[ebp]
mov	DWORD PTR $T21[ebp], ecx
mov	edx, DWORD PTR $T21[ebp]
push	edx
lea	ecx, DWORD PTR _msg$94[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 18		
mov	eax, DWORD PTR $T49[ebp]
and	eax, 2
je	SHORT $LN175@run_dlgPro
and	DWORD PTR $T49[ebp], -3			
lea	ecx, DWORD PTR $T74[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 17		
mov	ecx, DWORD PTR $T49[ebp]
and	ecx, 1
je	SHORT $LN176@run_dlgPro
and	DWORD PTR $T49[ebp], -2			
lea	ecx, DWORD PTR $T72[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	257					
push	OFFSET $SG171687
lea	ecx, DWORD PTR _msg$94[ebp]
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	DWORD PTR __imp__MessageBoxW@16
cmp	eax, 1
jne	$LN62@run_dlgPro
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?getUnicodeMode@Buffer@@QBE?AW4UniMode@@XZ 
test	eax, eax
je	SHORT $LN129@run_dlgPro
mov	DWORD PTR tv914[ebp], 1
jmp	SHORT $LN130@run_dlgPro
mov	DWORD PTR tv914[ebp], 0
mov	al, BYTE PTR tv914[ebp]
mov	BYTE PTR _isUnicode$53[ebp], al
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hFindCombo$19[ebp], eax
movzx	eax, BYTE PTR _isUnicode$53[ebp]
push	eax
mov	ecx, DWORD PTR _hFindCombo$19[ebp]
push	ecx
lea	edx, DWORD PTR $T70[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv1845[ebp], eax
mov	eax, DWORD PTR tv1845[ebp]
mov	DWORD PTR tv1815[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 20		
mov	ecx, DWORD PTR tv1815[ebp]
push	ecx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+16
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 17		
lea	ecx, DWORD PTR $T70[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	1602					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hReplaceCombo$17[ebp], eax
movzx	ecx, BYTE PTR _isUnicode$53[ebp]
push	ecx
mov	edx, DWORD PTR _hReplaceCombo$17[ebp]
push	edx
lea	eax, DWORD PTR $T68[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv1846[ebp], eax
mov	ecx, DWORD PTR tv1846[ebp]
mov	DWORD PTR tv1817[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 21		
mov	edx, DWORD PTR tv1817[ebp]
push	edx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+44
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 17		
lea	ecx, DWORD PTR $T68[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
call	?updateCombo@FindReplaceDlg@@AAEXH@Z	
push	1602					
mov	ecx, DWORD PTR _this$[ebp]
call	?updateCombo@FindReplaceDlg@@AAEXH@Z	
mov	eax, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [eax+8], 1
movzx	ecx, BYTE PTR _isMacroRecording$59[ebp]
test	ecx, ecx
je	SHORT $LN61@run_dlgPro
push	6
mov	edx, DWORD PTR _wParam$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?saveInMacro@FindReplaceDlg@@AAEXHH@Z	
push	0
push	0
push	3034					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	edx, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [edx+8], 0
mov	BYTE PTR __$EHRec$[ebp+8], 15		
lea	ecx, DWORD PTR _msg$94[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _op$48[ebp]
call	??1LongRunningOperation@@QAE@XZ		
mov	eax, 1
jmp	$LN108@run_dlgPro
lea	ecx, DWORD PTR _op$46[ebp]
call	??0LongRunningOperation@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 22		
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+32], 1
jne	$LN59@run_dlgPro
push	OFFSET $SG171730
lea	ecx, DWORD PTR $T80[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 23		
push	5
lea	ecx, DWORD PTR $T80[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 22		
lea	ecx, DWORD PTR $T80[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?getUnicodeMode@Buffer@@QBE?AW4UniMode@@XZ 
test	eax, eax
je	SHORT $LN131@run_dlgPro
mov	DWORD PTR tv989[ebp], 1
jmp	SHORT $LN132@run_dlgPro
mov	DWORD PTR tv989[ebp], 0
mov	cl, BYTE PTR tv989[ebp]
mov	BYTE PTR _isUnicode$50[ebp], cl
push	1601					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hFindCombo$15[ebp], eax
movzx	ecx, BYTE PTR _isUnicode$50[ebp]
push	ecx
mov	edx, DWORD PTR _hFindCombo$15[ebp]
push	edx
lea	eax, DWORD PTR $T66[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv978[ebp], eax
mov	ecx, DWORD PTR tv978[ebp]
mov	DWORD PTR tv1821[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 24		
mov	edx, DWORD PTR tv1821[ebp]
push	edx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+16
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 22		
lea	ecx, DWORD PTR $T66[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	1602					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hReplaceCombo$13[ebp], eax
movzx	edx, BYTE PTR _isUnicode$50[ebp]
push	edx
mov	eax, DWORD PTR _hReplaceCombo$13[ebp]
push	eax
lea	ecx, DWORD PTR $T64[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv971[ebp], eax
mov	edx, DWORD PTR tv971[ebp]
mov	DWORD PTR tv1823[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 25		
mov	eax, DWORD PTR tv1823[ebp]
push	eax
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+44
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 22		
lea	ecx, DWORD PTR $T64[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?updateCombos@FindReplaceDlg@@AAEXXZ	
mov	ecx, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [ecx+8], 1
movzx	edx, BYTE PTR _isMacroRecording$59[ebp]
test	edx, edx
je	SHORT $LN58@run_dlgPro
push	10					
mov	eax, DWORD PTR _wParam$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?saveInMacro@FindReplaceDlg@@AAEXHH@Z	
mov	ecx, DWORD PTR _this$[ebp]
call	?replaceAllInOpenedDocs@FindReplaceDlg@@QAEXXZ 
mov	ecx, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [ecx+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _op$46[ebp]
call	??1LongRunningOperation@@QAE@XZ		
mov	eax, 1
jmp	$LN108@run_dlgPro
lea	ecx, DWORD PTR _op$54[ebp]
call	??0LongRunningOperation@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 26		
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+32], 1
jne	$LN56@run_dlgPro
push	OFFSET $SG171773
lea	ecx, DWORD PTR $T78[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 27		
push	5
lea	eax, DWORD PTR $T78[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 26		
lea	ecx, DWORD PTR $T78[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?isReadOnly@Buffer@@QBE_NXZ		
movzx	eax, al
test	eax, eax
je	SHORT $LN55@run_dlgPro
push	OFFSET $SG171776
lea	ecx, DWORD PTR _errMsg$88[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 28		
push	1
lea	ecx, DWORD PTR _errMsg$88[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	DWORD PTR $T10[ebp], 1
mov	BYTE PTR __$EHRec$[ebp+8], 26		
lea	ecx, DWORD PTR _errMsg$88[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _op$54[ebp]
call	??1LongRunningOperation@@QAE@XZ		
mov	eax, DWORD PTR $T10[ebp]
jmp	$LN108@run_dlgPro
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?getUnicodeMode@Buffer@@QBE?AW4UniMode@@XZ 
test	eax, eax
je	SHORT $LN133@run_dlgPro
mov	DWORD PTR tv1068[ebp], 1
jmp	SHORT $LN134@run_dlgPro
mov	DWORD PTR tv1068[ebp], 0
mov	cl, BYTE PTR tv1068[ebp]
mov	BYTE PTR _isUnicode$51[ebp], cl
push	1601					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hFindCombo$9[ebp], eax
movzx	ecx, BYTE PTR _isUnicode$51[ebp]
push	ecx
mov	edx, DWORD PTR _hFindCombo$9[ebp]
push	edx
lea	eax, DWORD PTR $T62[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv1055[ebp], eax
mov	ecx, DWORD PTR tv1055[ebp]
mov	DWORD PTR tv1830[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 29		
mov	edx, DWORD PTR tv1830[ebp]
push	edx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+16
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 26		
lea	ecx, DWORD PTR $T62[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	1602					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hReplaceCombo$7[ebp], eax
movzx	edx, BYTE PTR _isUnicode$51[ebp]
push	edx
mov	eax, DWORD PTR _hReplaceCombo$7[ebp]
push	eax
lea	ecx, DWORD PTR $T60[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv1042[ebp], eax
mov	edx, DWORD PTR tv1042[ebp]
mov	DWORD PTR tv1832[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 30		
mov	eax, DWORD PTR tv1832[ebp]
push	eax
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+44
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 26		
lea	ecx, DWORD PTR $T60[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?updateCombos@FindReplaceDlg@@AAEXXZ	
mov	ecx, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [ecx+8], 1
movzx	edx, BYTE PTR _isMacroRecording$59[ebp]
test	edx, edx
je	SHORT $LN54@run_dlgPro
push	2
mov	eax, DWORD PTR _wParam$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?saveInMacro@FindReplaceDlg@@AAEXHH@Z	
push	0
push	0
push	2078					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	-1
push	0
push	0
push	OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A 
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?processAll@FindReplaceDlg@@QAEHW4ProcessOperation@@PBUFindOption@@_NPB_WH@Z 
mov	DWORD PTR _nbReplaced$37[ebp], eax
push	0
push	0
push	2079					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	edx, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [edx+8], 0
push	OFFSET $SG171802
lea	ecx, DWORD PTR _result$91[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 31		
cmp	DWORD PTR _nbReplaced$37[ebp], 0
jge	SHORT $LN53@run_dlgPro
push	OFFSET $SG171804
lea	ecx, DWORD PTR _result$91[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
jmp	SHORT $LN52@run_dlgPro
cmp	DWORD PTR _nbReplaced$37[ebp], 1
jne	SHORT $LN51@run_dlgPro
mov	eax, DWORD PTR _nbReplaced$37[ebp]
push	eax
push	OFFSET $SG171808
lea	ecx, DWORD PTR _moreInfo$102[ebp]
push	ecx
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
jmp	SHORT $LN50@run_dlgPro
mov	edx, DWORD PTR _nbReplaced$37[ebp]
push	edx
push	OFFSET $SG171810
lea	eax, DWORD PTR _moreInfo$102[ebp]
push	eax
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
lea	ecx, DWORD PTR _moreInfo$102[ebp]
push	ecx
lea	ecx, DWORD PTR _result$91[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	4
lea	edx, DWORD PTR _result$91[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?getFocus@Window@@QBEXXZ		
mov	BYTE PTR __$EHRec$[ebp+8], 26		
lea	ecx, DWORD PTR _result$91[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _op$54[ebp]
call	??1LongRunningOperation@@QAE@XZ		
mov	eax, 1
jmp	$LN108@run_dlgPro
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+32], 0
jne	$LN48@run_dlgPro
push	OFFSET $SG171830
lea	ecx, DWORD PTR $T87[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 32		
push	5
lea	ecx, DWORD PTR $T87[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T87[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?getUnicodeMode@Buffer@@QBE?AW4UniMode@@XZ 
test	eax, eax
je	SHORT $LN135@run_dlgPro
mov	DWORD PTR tv1203[ebp], 1
jmp	SHORT $LN136@run_dlgPro
mov	DWORD PTR tv1203[ebp], 0
mov	cl, BYTE PTR tv1203[ebp]
mov	BYTE PTR _isUnicode$42[ebp], cl
push	1601					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hFindCombo$12[ebp], eax
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
call	?updateCombo@FindReplaceDlg@@AAEXH@Z	
movzx	ecx, BYTE PTR _isUnicode$42[ebp]
push	ecx
mov	edx, DWORD PTR _hFindCombo$12[ebp]
push	edx
lea	eax, DWORD PTR $T63[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv1192[ebp], eax
mov	ecx, DWORD PTR tv1192[ebp]
mov	DWORD PTR tv1836[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 33		
mov	edx, DWORD PTR tv1836[ebp]
push	edx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+16
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T63[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	-1
push	0
push	0
push	OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A 
push	2
mov	ecx, DWORD PTR _this$[ebp]
call	?processAll@FindReplaceDlg@@QAEHW4ProcessOperation@@PBUFindOption@@_NPB_WH@Z 
mov	DWORD PTR _nbCounted$34[ebp], eax
push	OFFSET $SG171852
lea	ecx, DWORD PTR _result$93[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 34		
cmp	DWORD PTR _nbCounted$34[ebp], 0
jge	SHORT $LN47@run_dlgPro
push	OFFSET $SG171854
lea	ecx, DWORD PTR _result$93[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
jmp	SHORT $LN46@run_dlgPro
cmp	DWORD PTR _nbCounted$34[ebp], 1
jne	SHORT $LN45@run_dlgPro
mov	eax, DWORD PTR _nbCounted$34[ebp]
push	eax
push	OFFSET $SG171858
lea	ecx, DWORD PTR _moreInfo$98[ebp]
push	ecx
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
jmp	SHORT $LN44@run_dlgPro
mov	edx, DWORD PTR _nbCounted$34[ebp]
push	edx
push	OFFSET $SG171860
lea	eax, DWORD PTR _moreInfo$98[ebp]
push	eax
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
lea	ecx, DWORD PTR _moreInfo$98[ebp]
push	ecx
lea	ecx, DWORD PTR _result$93[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
movzx	edx, BYTE PTR _isMacroRecording$59[ebp]
test	edx, edx
je	SHORT $LN43@run_dlgPro
push	1
mov	eax, DWORD PTR _wParam$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?saveInMacro@FindReplaceDlg@@AAEXHH@Z	
push	4
lea	ecx, DWORD PTR _result$93[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?getFocus@Window@@QBEXXZ		
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _result$93[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	eax, 1
jmp	$LN108@run_dlgPro
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+32], 3
jne	$LN41@run_dlgPro
push	OFFSET $SG171881
lea	ecx, DWORD PTR $T76[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 35		
push	5
lea	eax, DWORD PTR $T76[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T76[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?getUnicodeMode@Buffer@@QBE?AW4UniMode@@XZ 
test	eax, eax
je	SHORT $LN137@run_dlgPro
mov	DWORD PTR tv1308[ebp], 1
jmp	SHORT $LN138@run_dlgPro
mov	DWORD PTR tv1308[ebp], 0
mov	al, BYTE PTR tv1308[ebp]
mov	BYTE PTR _isUnicode$44[ebp], al
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hFindCombo$27[ebp], eax
movzx	eax, BYTE PTR _isUnicode$44[ebp]
push	eax
mov	ecx, DWORD PTR _hFindCombo$27[ebp]
push	ecx
lea	edx, DWORD PTR $T71[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR tv1297[ebp], eax
mov	eax, DWORD PTR tv1297[ebp]
mov	DWORD PTR tv1840[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 36		
mov	ecx, DWORD PTR tv1840[ebp]
push	ecx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+16
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T71[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
call	?updateCombo@FindReplaceDlg@@AAEXH@Z	
movzx	edx, BYTE PTR _isMacroRecording$59[ebp]
test	edx, edx
je	SHORT $LN40@run_dlgPro
push	1
mov	eax, DWORD PTR _wParam$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?saveInMacro@FindReplaceDlg@@AAEXHH@Z	
mov	ecx, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [ecx+8], 1
push	-1
push	0
push	0
push	OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A 
push	3
mov	ecx, DWORD PTR _this$[ebp]
call	?processAll@FindReplaceDlg@@QAEHW4ProcessOperation@@PBUFindOption@@_NPB_WH@Z 
mov	DWORD PTR _nbMarked$35[ebp], eax
mov	edx, DWORD PTR _nppParamInst$57[ebp]
mov	BYTE PTR [edx+8], 0
push	OFFSET $SG171904
lea	ecx, DWORD PTR _result$92[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 37		
cmp	DWORD PTR _nbMarked$35[ebp], 0
jge	SHORT $LN39@run_dlgPro
push	OFFSET $SG171906
lea	ecx, DWORD PTR _result$92[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
jmp	SHORT $LN38@run_dlgPro
cmp	DWORD PTR _nbMarked$35[ebp], 1
jne	SHORT $LN37@run_dlgPro
mov	eax, DWORD PTR _nbMarked$35[ebp]
push	eax
push	OFFSET $SG171910
lea	ecx, DWORD PTR _moreInfo$99[ebp]
push	ecx
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
jmp	SHORT $LN36@run_dlgPro
mov	edx, DWORD PTR _nbMarked$35[ebp]
push	edx
push	OFFSET $SG171912
lea	eax, DWORD PTR _moreInfo$99[ebp]
push	eax
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
lea	ecx, DWORD PTR _moreInfo$99[ebp]
push	ecx
lea	ecx, DWORD PTR _result$92[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	4
lea	edx, DWORD PTR _result$92[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?getFocus@Window@@QBEXXZ		
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _result$92[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	eax, 1
jmp	$LN108@run_dlgPro
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+32], 3
jne	SHORT $LN34@run_dlgPro
push	31					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?clearIndicator@ScintillaEditView@@QAEXH@Z 
push	0
push	24					
push	2045					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	OFFSET $SG171932
lea	ecx, DWORD PTR $T85[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 38		
push	5
lea	edx, DWORD PTR $T85[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T85[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	eax, 1
jmp	$LN108@run_dlgPro
push	1703					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+130, al
mov	eax, DWORD PTR _findHistory$56[ebp]
mov	cl, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+130
mov	BYTE PTR [eax+84], cl
mov	eax, 1
jmp	$LN108@run_dlgPro
push	1603					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A, al
mov	edx, DWORD PTR _findHistory$56[ebp]
mov	al, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A
mov	BYTE PTR [edx+80], al
mov	eax, 1
jmp	$LN108@run_dlgPro
push	1604					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+1, al
mov	ecx, DWORD PTR _findHistory$56[ebp]
mov	dl, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+1
mov	BYTE PTR [ecx+81], dl
mov	eax, 1
jmp	$LN108@run_dlgPro
push	1605					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
movzx	eax, al
test	eax, eax
je	SHORT $LN29@run_dlgPro
mov	DWORD PTR ?_options@FindReplaceDlg@@2UFindOption@@A+8, 2
mov	ecx, DWORD PTR _findHistory$56[ebp]
mov	DWORD PTR [ecx+88], 2
push	1
push	1703					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
jmp	SHORT $LN28@run_dlgPro
push	1626					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN27@run_dlgPro
mov	DWORD PTR ?_options@FindReplaceDlg@@2UFindOption@@A+8, 1
mov	edx, DWORD PTR _findHistory$56[ebp]
mov	DWORD PTR [edx+88], 1
push	0
push	1703					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
jmp	SHORT $LN28@run_dlgPro
mov	DWORD PTR ?_options@FindReplaceDlg@@2UFindOption@@A+8, 0
mov	edx, DWORD PTR _findHistory$56[ebp]
mov	DWORD PTR [edx+88], 0
push	0
push	1703					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
cmp	DWORD PTR ?_options@FindReplaceDlg@@2UFindOption@@A+8, 2
jne	SHORT $LN139@run_dlgPro
mov	DWORD PTR tv1462[ebp], 1
jmp	SHORT $LN140@run_dlgPro
mov	DWORD PTR tv1462[ebp], 0
mov	dl, BYTE PTR tv1462[ebp]
mov	BYTE PTR _isRegex$55[ebp], dl
movzx	eax, BYTE PTR _isRegex$55[ebp]
test	eax, eax
je	$LN25@run_dlgPro
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A, 0
movzx	ecx, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A
test	ecx, ecx
je	SHORT $LN141@run_dlgPro
mov	DWORD PTR tv1470[ebp], 1
jmp	SHORT $LN142@run_dlgPro
mov	DWORD PTR tv1470[ebp], 0
push	0
mov	edx, DWORD PTR tv1470[ebp]
push	edx
push	241					
push	1603					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
push	1
push	241					
push	1613					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
push	0
push	241					
push	1612					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+3, 1
movzx	eax, BYTE PTR _isRegex$55[ebp]
test	eax, eax
jne	SHORT $LN143@run_dlgPro
mov	DWORD PTR tv1502[ebp], 1
jmp	SHORT $LN144@run_dlgPro
mov	DWORD PTR tv1502[ebp], 0
mov	ecx, DWORD PTR tv1502[ebp]
push	ecx
push	1603					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
movzx	ecx, BYTE PTR _isRegex$55[ebp]
test	ecx, ecx
jne	SHORT $LN145@run_dlgPro
mov	DWORD PTR tv1515[ebp], 1
jmp	SHORT $LN146@run_dlgPro
mov	DWORD PTR tv1515[ebp], 0
mov	edx, DWORD PTR tv1515[ebp]
push	edx
push	1612					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
mov	eax, 1
jmp	$LN108@run_dlgPro
push	1606					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+2, al
mov	edx, DWORD PTR _findHistory$56[ebp]
mov	al, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+2
mov	BYTE PTR [edx+82], al
mov	eax, 1
jmp	$LN108@run_dlgPro
push	0
push	1
push	240					
push	1613					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__SendMessageW@16
cmp	eax, 1
jne	SHORT $LN147@run_dlgPro
mov	DWORD PTR tv1547[ebp], 1
jmp	SHORT $LN148@run_dlgPro
mov	DWORD PTR tv1547[ebp], 0
mov	al, BYTE PTR tv1547[ebp]
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+3, al
movzx	ecx, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+3
cmp	ecx, 1
jne	SHORT $LN149@run_dlgPro
mov	DWORD PTR tv1552[ebp], 1
jmp	SHORT $LN150@run_dlgPro
mov	DWORD PTR tv1552[ebp], 0
mov	edx, DWORD PTR _findHistory$56[ebp]
mov	al, BYTE PTR tv1552[ebp]
mov	BYTE PTR [edx+83], al
mov	eax, 1
jmp	$LN108@run_dlgPro
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+32], 3
jne	SHORT $LN21@run_dlgPro
push	1618					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+12, al
mov	eax, 1
jmp	$LN108@run_dlgPro
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+32], 3
jne	SHORT $LN19@run_dlgPro
push	1616					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+13, al
mov	eax, 1
jmp	$LN108@run_dlgPro
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+32], 1
je	SHORT $LN16@run_dlgPro
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+32], 3
jne	SHORT $LN17@run_dlgPro
push	1632					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+14, al
mov	eax, 1
jmp	$LN108@run_dlgPro
push	1686					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR _isChecked$58[ebp], al
movzx	edx, BYTE PTR _isChecked$58[ebp]
push	edx
push	1623					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
movzx	edx, BYTE PTR _isChecked$58[ebp]
push	edx
push	1687					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
movzx	edx, BYTE PTR _isChecked$58[ebp]
push	edx
push	1688					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
movzx	edx, BYTE PTR _isChecked$58[ebp]
push	edx
push	1622					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__EnableWindow@8
movzx	edx, BYTE PTR _isChecked$58[ebp]
test	edx, edx
je	SHORT $LN14@run_dlgPro
push	0
push	1
push	241					
push	1687					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	edx, DWORD PTR _findHistory$56[ebp]
mov	DWORD PTR [edx+92], 1
jmp	SHORT $LN13@run_dlgPro
push	0
push	0
push	241					
push	1687					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SendDlgItemMessageW@20
push	0
push	0
push	241					
push	1688					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	?getInstance@NppParameters@@SAPAV1@XZ	
mov	ecx, eax
call	?removeTransparent@NppParameters@@QAEXPAUHWND__@@@Z 
mov	eax, DWORD PTR _findHistory$56[ebp]
mov	DWORD PTR [eax+92], 0
mov	eax, 1
jmp	$LN108@run_dlgPro
push	0
push	0
push	1024					
push	1622					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendDlgItemMessageW@20
mov	DWORD PTR _percent$16[ebp], eax
mov	eax, DWORD PTR _percent$16[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	?getInstance@NppParameters@@SAPAV1@XZ	
mov	ecx, eax
call	?SetTransparent@NppParameters@@QAEXPAUHWND__@@H@Z 
mov	eax, DWORD PTR _findHistory$56[ebp]
mov	DWORD PTR [eax+92], 2
mov	eax, 1
jmp	$LN108@run_dlgPro
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	?getInstance@NppParameters@@SAPAV1@XZ	
mov	ecx, eax
call	?removeTransparent@NppParameters@@QAEXPAUHWND__@@@Z 
mov	eax, DWORD PTR _findHistory$56[ebp]
mov	DWORD PTR [eax+92], 1
mov	eax, 1
jmp	$LN108@run_dlgPro
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+32], 2
jne	SHORT $LN9@run_dlgPro
push	1658					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+128, al
mov	edx, DWORD PTR _findHistory$56[ebp]
mov	al, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+128
mov	BYTE PTR [edx+85], al
mov	eax, 1
jmp	$LN108@run_dlgPro
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+32], 2
jne	SHORT $LN7@run_dlgPro
push	1659					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+129, al
mov	edx, DWORD PTR _findHistory$56[ebp]
mov	al, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+129
mov	BYTE PTR [edx+86], al
mov	eax, 1
jmp	$LN108@run_dlgPro
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+32], 2
jne	SHORT $LN5@run_dlgPro
push	1661					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	edx, DWORD PTR _findHistory$56[ebp]
mov	BYTE PTR [edx+102], al
mov	eax, DWORD PTR _findHistory$56[ebp]
movzx	ecx, BYTE PTR [eax+102]
test	ecx, ecx
je	SHORT $LN4@run_dlgPro
call	?getInstance@NppParameters@@SAPAV1@XZ	
mov	DWORD PTR _pNppParam$25[ebp], eax
mov	ecx, DWORD PTR _pNppParam$25[ebp]
call	?getWorkingDir@NppParameters@@QBEPB_WXZ	
mov	DWORD PTR _dir$11[ebp], eax
mov	edx, DWORD PTR _dir$11[ebp]
push	edx
push	1653					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SetDlgItemTextW@12
mov	eax, 1
jmp	SHORT $LN108@run_dlgPro
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+32], 2
jne	SHORT $LN2@run_dlgPro
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+100
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
push	1653					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	?folderBrowser@@YAXPAUHWND__@@HPB_W@Z	
add	esp, 12					
mov	eax, 1
jmp	SHORT $LN108@run_dlgPro
xor	eax, eax
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	16					
npad	1
DD	$LN31@run_dlgPro
DD	$LN30@run_dlgPro
DD	$LN24@run_dlgPro
DD	$LN75@run_dlgPro
DD	$LN57@run_dlgPro
DD	$LN23@run_dlgPro
DD	$LN49@run_dlgPro
DD	$LN42@run_dlgPro
DD	$LN20@run_dlgPro
DD	$LN22@run_dlgPro
DD	$LN18@run_dlgPro
DD	$LN35@run_dlgPro
DD	$LN60@run_dlgPro
DD	$LN72@run_dlgPro
DD	$LN69@run_dlgPro
DD	$LN3@run_dlgPro
DD	$LN67@run_dlgPro
DD	$LN10@run_dlgPro
DD	$LN8@run_dlgPro
DD	$LN64@run_dlgPro
DD	$LN6@run_dlgPro
DD	$LN15@run_dlgPro
DD	$LN11@run_dlgPro
DD	$LN12@run_dlgPro
DD	$LN33@run_dlgPro
DD	$LN105@run_dlgPro
DB	0
DB	1
DB	2
DB	25					
DB	3
DB	4
DB	25					
DB	25					
DB	5
DB	5
DB	6
DB	7
DB	8
DB	25					
DB	9
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	1
DB	1
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	10					
DB	11					
DB	25					
DB	12					
DB	13					
DB	25					
DB	25					
DB	25					
DB	25					
DB	14					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	15					
DB	25					
DB	25					
DB	25					
DB	25					
DB	16					
DB	25					
DB	17					
DB	18					
DB	19					
DB	20					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	21					
DB	22					
DB	23					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	25					
DB	24					
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$0 PROC
lea	ecx, DWORD PTR $T77[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$1 PROC
lea	ecx, DWORD PTR $T83[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$2 PROC
lea	ecx, DWORD PTR $T75[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$3 PROC
lea	ecx, DWORD PTR $T79[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$4 PROC
lea	ecx, DWORD PTR $T90[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$5 PROC
lea	ecx, DWORD PTR _op$45[ebp]
jmp	??1LongRunningOperation@@QAE@XZ		
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$6 PROC
lea	ecx, DWORD PTR $T81[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$7 PROC
lea	ecx, DWORD PTR $T65[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$8 PROC
lea	ecx, DWORD PTR $T69[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$9 PROC
lea	ecx, DWORD PTR $T89[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$10 PROC
lea	ecx, DWORD PTR $T61[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$11 PROC
lea	ecx, DWORD PTR $T86[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$12 PROC
lea	ecx, DWORD PTR $T67[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$13 PROC
lea	ecx, DWORD PTR $T84[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$14 PROC
lea	ecx, DWORD PTR $T73[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$15 PROC
lea	ecx, DWORD PTR _op$48[ebp]
jmp	??1LongRunningOperation@@QAE@XZ		
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$16 PROC
lea	ecx, DWORD PTR $T82[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$17 PROC
lea	ecx, DWORD PTR _msg$94[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$18 PROC
mov	eax, DWORD PTR $T49[ebp]
and	eax, 1
je	$LN172@run_dlgPro
and	DWORD PTR $T49[ebp], -2			
lea	ecx, DWORD PTR $T72[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ret	0
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$19 PROC
mov	eax, DWORD PTR $T49[ebp]
and	eax, 2
je	$LN174@run_dlgPro
and	DWORD PTR $T49[ebp], -3			
lea	ecx, DWORD PTR $T74[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ret	0
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$20 PROC
lea	ecx, DWORD PTR $T70[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$21 PROC
lea	ecx, DWORD PTR $T68[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$22 PROC
lea	ecx, DWORD PTR _op$46[ebp]
jmp	??1LongRunningOperation@@QAE@XZ		
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$23 PROC
lea	ecx, DWORD PTR $T80[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$24 PROC
lea	ecx, DWORD PTR $T66[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$25 PROC
lea	ecx, DWORD PTR $T64[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$26 PROC
lea	ecx, DWORD PTR _op$54[ebp]
jmp	??1LongRunningOperation@@QAE@XZ		
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$27 PROC
lea	ecx, DWORD PTR $T78[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$28 PROC
lea	ecx, DWORD PTR _errMsg$88[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$29 PROC
lea	ecx, DWORD PTR $T62[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$30 PROC
lea	ecx, DWORD PTR $T60[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$31 PROC
lea	ecx, DWORD PTR _result$91[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$32 PROC
lea	ecx, DWORD PTR $T87[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$33 PROC
lea	ecx, DWORD PTR $T63[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$34 PROC
lea	ecx, DWORD PTR _result$93[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$35 PROC
lea	ecx, DWORD PTR $T76[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$36 PROC
lea	ecx, DWORD PTR $T71[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$37 PROC
lea	ecx, DWORD PTR _result$92[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z$38 PROC
lea	ecx, DWORD PTR $T85[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-4140]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?run_dlgProc@FindReplaceDlg@@MAGHIIJ@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 48					
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _staus$[ebp], 1
jne	SHORT $LN6@setStatusb
push	-1
call	DWORD PTR __imp__MessageBeep@4
mov	DWORD PTR _flashInfo$2[ebp], 20		
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+44]
call	eax
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN9@setStatusb
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR tv88[ebp], eax
jmp	SHORT $LN10@setStatusb
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetParent@4
mov	DWORD PTR tv88[ebp], eax
mov	eax, DWORD PTR tv88[ebp]
mov	DWORD PTR _flashInfo$2[ebp+4], eax
mov	DWORD PTR _flashInfo$2[ebp+12], 3
mov	DWORD PTR _flashInfo$2[ebp+16], 100	
mov	DWORD PTR _flashInfo$2[ebp+8], 3
lea	ecx, DWORD PTR _flashInfo$2[ebp]
push	ecx
call	DWORD PTR __imp__FlashWindowEx@4
jmp	SHORT $LN5@setStatusb
cmp	DWORD PTR _staus$[ebp], 2
je	SHORT $LN3@setStatusb
cmp	DWORD PTR _staus$[ebp], 3
jne	SHORT $LN5@setStatusb
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax+44]
call	edx
movzx	eax, al
test	eax, eax
jne	SHORT $LN5@setStatusb
mov	DWORD PTR _flashInfo$1[ebp], 20		
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetParent@4
mov	DWORD PTR _flashInfo$1[ebp+4], eax
mov	DWORD PTR _flashInfo$1[ebp+12], 2
mov	DWORD PTR _flashInfo$1[ebp+16], 100	
mov	DWORD PTR _flashInfo$1[ebp+8], 3
lea	eax, DWORD PTR _flashInfo$1[ebp]
push	eax
call	DWORD PTR __imp__FlashWindowEx@4
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+44]
call	eax
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN7@setStatusb
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _staus$[ebp]
mov	DWORD PTR [edx+2268], eax
mov	ecx, DWORD PTR _msg$[ebp]
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2208				
call	?setOwnerDrawText@StatusBar@@QAE_NPB_W@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?execSavedCommand@FindReplaceDlg@@QAEXHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?execSavedCommand@FindReplaceDlg@@QAEXHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 956				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T12[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _cmd$[ebp]
mov	DWORD PTR tv65[ebp], eax
mov	ecx, DWORD PTR tv65[ebp]
sub	ecx, 1601				
mov	DWORD PTR tv65[ebp], ecx
cmp	DWORD PTR tv65[ebp], 101		
ja	$LN1@execSavedC
mov	edx, DWORD PTR tv65[ebp]
movzx	eax, BYTE PTR $LN80@execSavedC[edx]
jmp	DWORD PTR $LN83@execSavedC[eax*4]
push	132					
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T8[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 1
cmp	DWORD PTR $T8[ebp], 0
je	SHORT $LN40@execSavedC
mov	ecx, DWORD PTR $T8[ebp]
call	??0FindOption@@QAE@XZ			
mov	DWORD PTR tv73[ebp], eax
jmp	SHORT $LN41@execSavedC
mov	DWORD PTR tv73[ebp], 0
mov	ecx, DWORD PTR tv73[ebp]
mov	DWORD PTR $T4[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR $T4[ebp]
mov	DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A, edx 
jmp	$LN36@execSavedC
lea	eax, DWORD PTR _stringValue$[ebp]
push	eax
mov	ecx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
add	ecx, 16					
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z 
jmp	$LN36@execSavedC
mov	ecx, DWORD PTR _intValue$[ebp]
and	ecx, 1
jle	SHORT $LN42@execSavedC
mov	DWORD PTR tv79[ebp], 1
jmp	SHORT $LN43@execSavedC
mov	DWORD PTR tv79[ebp], 0
mov	edx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	al, BYTE PTR tv79[ebp]
mov	BYTE PTR [edx], al
mov	ecx, DWORD PTR _intValue$[ebp]
and	ecx, 2
jle	SHORT $LN44@execSavedC
mov	DWORD PTR tv84[ebp], 1
jmp	SHORT $LN45@execSavedC
mov	DWORD PTR tv84[ebp], 0
mov	edx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	al, BYTE PTR tv84[ebp]
mov	BYTE PTR [edx+1], al
mov	ecx, DWORD PTR _intValue$[ebp]
and	ecx, 32					
jle	SHORT $LN46@execSavedC
mov	DWORD PTR tv89[ebp], 1
jmp	SHORT $LN47@execSavedC
mov	DWORD PTR tv89[ebp], 0
mov	edx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	al, BYTE PTR tv89[ebp]
mov	BYTE PTR [edx+128], al
mov	ecx, DWORD PTR _intValue$[ebp]
and	ecx, 64					
jle	SHORT $LN48@execSavedC
mov	DWORD PTR tv94[ebp], 1
jmp	SHORT $LN49@execSavedC
mov	DWORD PTR tv94[ebp], 0
mov	edx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	al, BYTE PTR tv94[ebp]
mov	BYTE PTR [edx+129], al
mov	ecx, DWORD PTR _intValue$[ebp]
and	ecx, 4
jle	SHORT $LN50@execSavedC
mov	DWORD PTR tv131[ebp], 1
jmp	SHORT $LN51@execSavedC
mov	DWORD PTR tv131[ebp], 0
mov	edx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	al, BYTE PTR tv131[ebp]
mov	BYTE PTR [edx+12], al
mov	ecx, DWORD PTR _intValue$[ebp]
and	ecx, 16					
jle	SHORT $LN52@execSavedC
mov	DWORD PTR tv136[ebp], 1
jmp	SHORT $LN53@execSavedC
mov	DWORD PTR tv136[ebp], 0
mov	edx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	al, BYTE PTR tv136[ebp]
mov	BYTE PTR [edx+13], al
mov	ecx, DWORD PTR _intValue$[ebp]
and	ecx, 128				
jle	SHORT $LN54@execSavedC
mov	DWORD PTR tv141[ebp], 1
jmp	SHORT $LN55@execSavedC
mov	DWORD PTR tv141[ebp], 0
mov	edx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	al, BYTE PTR tv141[ebp]
mov	BYTE PTR [edx+14], al
mov	ecx, DWORD PTR _intValue$[ebp]
and	ecx, 256				
jle	SHORT $LN56@execSavedC
mov	DWORD PTR tv146[ebp], 1
jmp	SHORT $LN57@execSavedC
mov	DWORD PTR tv146[ebp], 0
mov	edx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	al, BYTE PTR tv146[ebp]
mov	BYTE PTR [edx+2], al
mov	ecx, DWORD PTR _intValue$[ebp]
and	ecx, 512				
jle	SHORT $LN58@execSavedC
mov	DWORD PTR tv151[ebp], 1
jmp	SHORT $LN59@execSavedC
mov	DWORD PTR tv151[ebp], 0
mov	edx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	al, BYTE PTR tv151[ebp]
mov	BYTE PTR [edx+3], al
mov	ecx, DWORD PTR _intValue$[ebp]
and	ecx, 1024				
jle	SHORT $LN60@execSavedC
mov	DWORD PTR tv156[ebp], 1
jmp	SHORT $LN61@execSavedC
mov	DWORD PTR tv156[ebp], 0
mov	edx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	al, BYTE PTR tv156[ebp]
mov	BYTE PTR [edx+130], al
jmp	$LN36@execSavedC
mov	ecx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	edx, DWORD PTR _intValue$[ebp]
mov	DWORD PTR [ecx+8], edx
jmp	$LN36@execSavedC
lea	eax, DWORD PTR _stringValue$[ebp]
push	eax
mov	ecx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
add	ecx, 44					
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z 
jmp	$LN36@execSavedC
lea	ecx, DWORD PTR _stringValue$[ebp]
push	ecx
mov	ecx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
add	ecx, 100				
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z 
jmp	$LN36@execSavedC
lea	edx, DWORD PTR _stringValue$[ebp]
push	edx
mov	ecx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
add	ecx, 72					
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z 
jmp	$LN36@execSavedC
call	?getInstance@NppParameters@@SAPAV1@XZ	
mov	DWORD PTR _nppParamInst$13[ebp], eax
mov	eax, DWORD PTR _intValue$[ebp]
mov	DWORD PTR tv169[ebp], eax
cmp	DWORD PTR tv169[ebp], 1635		
jg	SHORT $LN64@execSavedC
cmp	DWORD PTR tv169[ebp], 1635		
je	$LN21@execSavedC
cmp	DWORD PTR tv169[ebp], 1609		
jg	SHORT $LN65@execSavedC
cmp	DWORD PTR tv169[ebp], 1609		
je	$LN17@execSavedC
cmp	DWORD PTR tv169[ebp], 1
je	SHORT $LN25@execSavedC
cmp	DWORD PTR tv169[ebp], 1608		
je	$LN24@execSavedC
jmp	$LN2@execSavedC
cmp	DWORD PTR tv169[ebp], 1614		
je	$LN12@execSavedC
cmp	DWORD PTR tv169[ebp], 1615		
je	$LN7@execSavedC
jmp	$LN2@execSavedC
mov	ecx, DWORD PTR tv169[ebp]
sub	ecx, 1636				
mov	DWORD PTR tv169[ebp], ecx
cmp	DWORD PTR tv169[ebp], 24		
ja	$LN2@execSavedC
mov	edx, DWORD PTR tv169[ebp]
movzx	eax, BYTE PTR $LN81@execSavedC[edx]
jmp	DWORD PTR $LN84@execSavedC[eax*4]
mov	ecx, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [ecx+8], 1
push	0
push	0
push	0
mov	ecx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
add	ecx, 16					
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z 
mov	edx, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [edx+8], 0
jmp	$LN26@execSavedC
mov	eax, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [eax+8], 1
mov	ecx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
push	ecx
mov	ecx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
add	ecx, 44					
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
add	ecx, 16					
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?processReplace@FindReplaceDlg@@QAE_NPB_W0PBUFindOption@@@Z 
mov	edx, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [edx+8], 0
jmp	$LN26@execSavedC
mov	eax, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [eax+8], 1
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?findAllIn@FindReplaceDlg@@QAEXW4InWhat@@@Z 
mov	ecx, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [ecx+8], 0
jmp	$LN26@execSavedC
mov	edx, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [edx+8], 1
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?findAllIn@FindReplaceDlg@@QAEXW4InWhat@@@Z 
mov	eax, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [eax+8], 0
jmp	$LN26@execSavedC
mov	ecx, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [ecx+8], 1
mov	ecx, DWORD PTR _this$[ebp]
call	?replaceAllInOpenedDocs@FindReplaceDlg@@QAEXXZ 
mov	edx, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [edx+8], 0
jmp	$LN26@execSavedC
mov	eax, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [eax+8], 1
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?findAllIn@FindReplaceDlg@@QAEXW4InWhat@@@Z 
mov	ecx, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [ecx+8], 0
jmp	$LN26@execSavedC
push	OFFSET $SG173059
lea	ecx, DWORD PTR _msg$19[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	edx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
add	edx, 100				
push	edx
lea	ecx, DWORD PTR _msg$19[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z 
push	OFFSET $SG173060
lea	ecx, DWORD PTR _msg$19[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	0
mov	ecx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
add	ecx, 72					
call	??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z 
movzx	eax, WORD PTR [eax]
test	eax, eax
je	SHORT $LN62@execSavedC
mov	ecx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
add	ecx, 72					
push	ecx
lea	ecx, DWORD PTR $T14[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z 
mov	DWORD PTR tv208[ebp], eax
mov	edx, DWORD PTR tv208[ebp]
mov	DWORD PTR tv386[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	eax, DWORD PTR $T12[ebp]
or	eax, 1
mov	DWORD PTR $T12[ebp], eax
mov	ecx, DWORD PTR tv386[ebp]
mov	DWORD PTR tv235[ebp], ecx
jmp	SHORT $LN63@execSavedC
push	OFFSET $SG173065
lea	ecx, DWORD PTR $T15[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR tv409[ebp], eax
mov	edx, DWORD PTR tv409[ebp]
mov	DWORD PTR tv391[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 4
mov	eax, DWORD PTR $T12[ebp]
or	eax, 2
mov	DWORD PTR $T12[ebp], eax
mov	ecx, DWORD PTR tv391[ebp]
mov	DWORD PTR tv235[ebp], ecx
mov	edx, DWORD PTR tv235[ebp]
mov	DWORD PTR $T6[ebp], edx
mov	eax, DWORD PTR $T6[ebp]
push	eax
lea	ecx, DWORD PTR _msg$19[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 3
mov	ecx, DWORD PTR $T12[ebp]
and	ecx, 2
je	SHORT $LN75@execSavedC
and	DWORD PTR $T12[ebp], -3			
lea	ecx, DWORD PTR $T15[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 2
mov	edx, DWORD PTR $T12[ebp]
and	edx, 1
je	SHORT $LN76@execSavedC
and	DWORD PTR $T12[ebp], -2			
lea	ecx, DWORD PTR $T14[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	257					
push	OFFSET $SG173067
lea	ecx, DWORD PTR _msg$19[ebp]
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	DWORD PTR __imp__MessageBoxW@16
cmp	eax, 1
jne	SHORT $LN18@execSavedC
mov	edx, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [edx+8], 1
push	0
push	0
push	3034					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	edx, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [edx+8], 0
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _msg$19[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
jmp	$LN26@execSavedC
mov	eax, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [eax+8], 1
push	0
push	0
push	2078					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	-1
push	0
push	0
mov	eax, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
push	eax
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?processAll@FindReplaceDlg@@QAEHW4ProcessOperation@@PBUFindOption@@_NPB_WH@Z 
mov	DWORD PTR _nbReplaced$10[ebp], eax
push	0
push	0
push	2079					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	eax, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [eax+8], 0
push	OFFSET $SG173071
lea	ecx, DWORD PTR _result$17[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
cmp	DWORD PTR _nbReplaced$10[ebp], 0
jge	SHORT $LN16@execSavedC
push	OFFSET $SG173073
lea	ecx, DWORD PTR _result$17[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
jmp	SHORT $LN15@execSavedC
cmp	DWORD PTR _nbReplaced$10[ebp], 1
jne	SHORT $LN14@execSavedC
mov	ecx, DWORD PTR _nbReplaced$10[ebp]
push	ecx
push	OFFSET $SG173077
lea	edx, DWORD PTR _moreInfo$22[ebp]
push	edx
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
jmp	SHORT $LN13@execSavedC
mov	eax, DWORD PTR _nbReplaced$10[ebp]
push	eax
push	OFFSET $SG173079
lea	ecx, DWORD PTR _moreInfo$22[ebp]
push	ecx
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
lea	edx, DWORD PTR _moreInfo$22[ebp]
push	edx
lea	ecx, DWORD PTR _result$17[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	4
lea	eax, DWORD PTR _result$17[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _result$17[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
jmp	$LN26@execSavedC
push	-1
push	0
push	0
mov	ecx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
push	ecx
push	2
mov	ecx, DWORD PTR _this$[ebp]
call	?processAll@FindReplaceDlg@@QAEHW4ProcessOperation@@PBUFindOption@@_NPB_WH@Z 
mov	DWORD PTR _nbCounted$11[ebp], eax
push	OFFSET $SG173083
lea	ecx, DWORD PTR _result$18[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 6
cmp	DWORD PTR _nbCounted$11[ebp], 0
jge	SHORT $LN11@execSavedC
push	OFFSET $SG173085
lea	ecx, DWORD PTR _result$18[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
jmp	SHORT $LN10@execSavedC
cmp	DWORD PTR _nbCounted$11[ebp], 1
jne	SHORT $LN9@execSavedC
mov	edx, DWORD PTR _nbCounted$11[ebp]
push	edx
push	OFFSET $SG173089
lea	eax, DWORD PTR _moreInfo$20[ebp]
push	eax
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
jmp	SHORT $LN8@execSavedC
mov	ecx, DWORD PTR _nbCounted$11[ebp]
push	ecx
push	OFFSET $SG173091
lea	edx, DWORD PTR _moreInfo$20[ebp]
push	edx
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
lea	eax, DWORD PTR _moreInfo$20[ebp]
push	eax
lea	ecx, DWORD PTR _result$18[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	4
lea	ecx, DWORD PTR _result$18[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _result$18[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
jmp	$LN26@execSavedC
mov	edx, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [edx+8], 1
push	-1
push	0
push	0
mov	eax, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
push	eax
push	3
mov	ecx, DWORD PTR _this$[ebp]
call	?processAll@FindReplaceDlg@@QAEHW4ProcessOperation@@PBUFindOption@@_NPB_WH@Z 
mov	DWORD PTR _nbMarked$9[ebp], eax
mov	ecx, DWORD PTR _nppParamInst$13[ebp]
mov	BYTE PTR [ecx+8], 0
push	OFFSET $SG173095
lea	ecx, DWORD PTR _result$16[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 7
cmp	DWORD PTR _nbMarked$9[ebp], 0
jge	SHORT $LN6@execSavedC
push	OFFSET $SG173097
lea	ecx, DWORD PTR _result$16[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
jmp	SHORT $LN5@execSavedC
cmp	DWORD PTR _nbMarked$9[ebp], 1
jg	SHORT $LN4@execSavedC
mov	edx, DWORD PTR _nbMarked$9[ebp]
push	edx
push	OFFSET $SG173101
lea	eax, DWORD PTR _moreInfo$21[ebp]
push	eax
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
jmp	SHORT $LN3@execSavedC
mov	ecx, DWORD PTR _nbMarked$9[ebp]
push	ecx
push	OFFSET $SG173103
lea	edx, DWORD PTR _moreInfo$21[ebp]
push	edx
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
lea	eax, DWORD PTR _moreInfo$21[ebp]
push	eax
lea	ecx, DWORD PTR _result$16[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	4
lea	ecx, DWORD PTR _result$16[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _result$16[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
jmp	SHORT $LN26@execSavedC
push	OFFSET $SG173107
lea	ecx, DWORD PTR $T3[ebp]
call	??0runtime_error@std@@QAE@PBD@Z		
push	OFFSET __TI2?AVruntime_error@std@@
lea	edx, DWORD PTR $T3[ebp]
push	edx
call	__CxxThrowException@8
mov	eax, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	DWORD PTR $T5[ebp], eax
mov	ecx, DWORD PTR $T5[ebp]
mov	DWORD PTR $T7[ebp], ecx
cmp	DWORD PTR $T7[ebp], 0
je	SHORT $LN66@execSavedC
push	1
mov	ecx, DWORD PTR $T7[ebp]
call	??_GFindOption@@QAEPAXI@Z
mov	DWORD PTR tv372[ebp], eax
jmp	SHORT $LN67@execSavedC
mov	DWORD PTR tv372[ebp], 0
mov	DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A 
jmp	SHORT $LN36@execSavedC
push	OFFSET $SG173113
lea	ecx, DWORD PTR $T2[ebp]
call	??0runtime_error@std@@QAE@PBD@Z		
push	OFFSET __TI2?AVruntime_error@std@@
lea	edx, DWORD PTR $T2[ebp]
push	edx
call	__CxxThrowException@8
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _stringValue$[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	36					
DD	$LN34@execSavedC
DD	$LN31@execSavedC
DD	$LN32@execSavedC
DD	$LN29@execSavedC
DD	$LN30@execSavedC
DD	$LN35@execSavedC
DD	$LN28@execSavedC
DD	$LN33@execSavedC
DD	$LN1@execSavedC
DB	0
DB	1
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	2
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	3
DB	4
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	8
DB	5
DB	6
DB	7
npad	2
DD	$LN23@execSavedC
DD	$LN22@execSavedC
DD	$LN20@execSavedC
DD	$LN19@execSavedC
DD	$LN2@execSavedC
DB	0
DB	4
DB	4
DB	4
DB	4
DB	1
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	4
DB	2
DB	4
DB	4
DB	4
DB	3
ENDP
__unwindfunclet$?execSavedCommand@FindReplaceDlg@@QAEXHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$0 PROC
lea	ecx, DWORD PTR _stringValue$[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?execSavedCommand@FindReplaceDlg@@QAEXHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$1 PROC
mov	eax, DWORD PTR $T8[ebp]
push	eax
call	??3@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__unwindfunclet$?execSavedCommand@FindReplaceDlg@@QAEXHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$2 PROC
lea	ecx, DWORD PTR _msg$19[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?execSavedCommand@FindReplaceDlg@@QAEXHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$3 PROC
mov	eax, DWORD PTR $T12[ebp]
and	eax, 1
je	$LN72@execSavedC
and	DWORD PTR $T12[ebp], -2			
lea	ecx, DWORD PTR $T14[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ret	0
ENDP
__unwindfunclet$?execSavedCommand@FindReplaceDlg@@QAEXHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$4 PROC
mov	eax, DWORD PTR $T12[ebp]
and	eax, 2
je	$LN74@execSavedC
and	DWORD PTR $T12[ebp], -3			
lea	ecx, DWORD PTR $T15[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ret	0
ENDP
__unwindfunclet$?execSavedCommand@FindReplaceDlg@@QAEXHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$5 PROC
lea	ecx, DWORD PTR _result$17[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?execSavedCommand@FindReplaceDlg@@QAEXHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$6 PROC
lea	ecx, DWORD PTR _result$18[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?execSavedCommand@FindReplaceDlg@@QAEXHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z$7 PROC
lea	ecx, DWORD PTR _result$16[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$?execSavedCommand@FindReplaceDlg@@QAEXHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-960]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?execSavedCommand@FindReplaceDlg@@QAEXHHV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?focusOnFinder@FindReplaceDlg@@QAEXXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+88], 0
je	SHORT $LN2@focusOnFin
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+88]
call	?getHSelf@Window@@QBEPAUHWND__@@XZ	
push	eax
push	0
push	2054					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	DWORD PTR __imp__SendMessageW@16
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+88]
add	ecx, 192				
call	?getFocus@Window@@QBEXXZ		
mov	esp, ebp
pop	ebp
ret	0
ENDP
?saveFindHistory@FindReplaceDlg@@QAEXXZ PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+52]
call	eax
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN1@saveFindHi
jmp	SHORT $LN2@saveFindHi
call	?getInstance@NppParameters@@SAPAV1@XZ	
mov	ecx, eax
call	?getFindHistory@NppParameters@@QAEAAUFindHistory@@XZ 
mov	DWORD PTR _findHistory$[ebp], eax
mov	edx, DWORD PTR _findHistory$[ebp]
add	edx, 16					
push	edx
mov	eax, DWORD PTR _findHistory$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
push	1653					
mov	ecx, DWORD PTR _this$[ebp]
call	?saveComboHistory@FindReplaceDlg@@AAEHHHAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z 
mov	edx, DWORD PTR _findHistory$[ebp]
add	edx, 32					
push	edx
mov	eax, DWORD PTR _findHistory$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
push	1652					
mov	ecx, DWORD PTR _this$[ebp]
call	?saveComboHistory@FindReplaceDlg@@AAEHHHAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z 
mov	edx, DWORD PTR _findHistory$[ebp]
add	edx, 48					
push	edx
mov	eax, DWORD PTR _findHistory$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
call	?saveComboHistory@FindReplaceDlg@@AAEHHHAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z 
mov	edx, DWORD PTR _findHistory$[ebp]
add	edx, 64					
push	edx
mov	eax, DWORD PTR _findHistory$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
push	1602					
mov	ecx, DWORD PTR _this$[ebp]
call	?saveComboHistory@FindReplaceDlg@@AAEHHHAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z 
mov	esp, ebp
pop	ebp
ret	0
ENDP
?setFindInFilesDirFilter@FindReplaceDlg@@QAEXPB_W0@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _dir$[ebp], 0
je	SHORT $LN2@setFindInF
mov	eax, DWORD PTR _dir$[ebp]
push	eax
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+100
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
mov	ecx, DWORD PTR _dir$[ebp]
push	ecx
push	1653					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SetDlgItemTextW@12
cmp	DWORD PTR _filters$[ebp], 0
je	SHORT $LN3@setFindInF
mov	ecx, DWORD PTR _filters$[ebp]
push	ecx
mov	ecx, OFFSET ?_options@FindReplaceDlg@@2UFindOption@@A+72
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
mov	edx, DWORD PTR _filters$[ebp]
push	edx
push	1652					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SetDlgItemTextW@12
mov	esp, ebp
pop	ebp
ret	8
ENDP
?getPatterns@FindReplaceDlg@@QAEXAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _patternVect$[ebp]
push	eax
mov	ecx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
add	ecx, 72					
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
call	?cutString@@YAXPB_WAAV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?setSearchText@FindReplaceDlg@@QAEXPA_W@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
push	1601					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hCombo$[ebp], eax
cmp	DWORD PTR _txt2find$[ebp], 0
je	SHORT $LN1@setSearchT
mov	edx, 2
imul	eax, edx, 0
mov	ecx, DWORD PTR _txt2find$[ebp]
movzx	edx, WORD PTR [ecx+eax]
test	edx, edx
je	SHORT $LN1@setSearchT
push	0
push	-1
push	334					
mov	eax, DWORD PTR _hCombo$[ebp]
push	eax
call	DWORD PTR __imp__SendMessageW@16
mov	ecx, DWORD PTR _txt2find$[ebp]
push	ecx
push	1601					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SetDlgItemTextW@12
push	-65536					
push	0
push	322					
mov	ecx, DWORD PTR _hCombo$[ebp]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	esp, ebp
pop	ebp
ret	4
ENDP
?findAllIn@FindReplaceDlg@@QAEXW4InWhat@@@Z PROC	
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?findAllIn@FindReplaceDlg@@QAEXW4InWhat@@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 104				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	BYTE PTR _justCreated$[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+88], 0
jne	$LN14@findAllIn
push	296					
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN17@findAllIn
mov	ecx, DWORD PTR $T3[ebp]
call	??0Finder@@QAE@XZ			
mov	DWORD PTR tv74[ebp], eax
jmp	SHORT $LN18@findAllIn
mov	DWORD PTR tv74[ebp], 0
mov	ecx, DWORD PTR tv74[ebp]
mov	DWORD PTR $T2[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR $T2[ebp]
mov	DWORD PTR [edx+88], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+88]
call	?init@Finder@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z 
mov	DWORD PTR _data$4[ebp], 0
push	44					
push	0
lea	edx, DWORD PTR _data$4[ebp+4]
push	edx
call	_memset
add	esp, 12					
push	0
lea	eax, DWORD PTR _data$4[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+88]
call	?create@DockingDlgInterface@@QAEXPAUtTbData@@_N@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+88]
call	?getHSelf@Window@@QBEPAUHWND__@@XZ	
push	eax
push	1
push	2036					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	DWORD PTR _data$4[ebp+12], 805306373	
push	4128					
push	0
push	0
push	1
push	504					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
call	DWORD PTR __imp__LoadImageW@24
mov	DWORD PTR _data$4[ebp+16], eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 100				
mov	DWORD PTR _data$4[ebp+20], ecx
mov	DWORD PTR _data$4[ebp+44], OFFSET $SG172812
mov	DWORD PTR _data$4[ebp+8], 0
lea	edx, DWORD PTR _data$4[ebp]
push	edx
push	0
push	2057					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+88]
call	?getHSelf@Window@@QBEPAUHWND__@@XZ	
push	eax
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+88]
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+88]
add	ecx, 192				
mov	edx, DWORD PTR [eax+192]
mov	eax, DWORD PTR [edx+4]
call	eax
push	OFFSET ?finderProc@FindReplaceDlg@@KGJPAUHWND__@@IIJ@Z 
push	-4					
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+88]
add	ecx, 192				
call	?getHSelf@Window@@QBEPAUHWND__@@XZ	
push	eax
call	DWORD PTR __imp__SetWindowLongW@12
mov	DWORD PTR ?originalFinderProc@FindReplaceDlg@@1JA, eax 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+88]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
push	0
push	65001					
push	2037					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+88]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
push	0
push	2371					
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+88]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
push	0
push	2012					
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+88]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
push	1
push	2096					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+88]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
push	0
push	2188					
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+88]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	1
mov	edx, DWORD PTR ?_SC_MARGE_FOLDER@ScintillaEditView@@2HB 
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+88]
add	ecx, 192				
call	?showMargin@ScintillaEditView@@QAEXH_N@Z 
lea	ecx, DWORD PTR _findRect$5[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+88]
call	?getHSelf@Window@@QBEPAUHWND__@@XZ	
push	eax
call	DWORD PTR __imp__GetWindowRect@8
push	0
mov	eax, DWORD PTR ?_SC_MARGE_SYBOLE@ScintillaEditView@@2HB 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+88]
add	ecx, 192				
call	?showMargin@ScintillaEditView@@QAEXH_N@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+88]
add	ecx, 192				
call	?setMakerStyle@ScintillaEditView@@QAEXW4folderStyle@@@Z 
push	1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+88]
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+88]
add	eax, 192				
mov	edx, DWORD PTR [ecx+192]
mov	ecx, eax
mov	eax, DWORD PTR [edx+12]
call	eax
push	1
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+88]
mov	eax, DWORD PTR [edx+12]
call	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+88]
call	?getHSelf@Window@@QBEPAUHWND__@@XZ	
push	eax
push	0
push	2055					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	DWORD PTR __imp__SendMessageW@16
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	DWORD PTR __imp__UpdateWindow@4
mov	BYTE PTR _justCreated$[ebp], 1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+88]
call	?setFinderStyle@Finder@@QAEXXZ		
movzx	ecx, BYTE PTR _justCreated$[ebp]
test	ecx, ecx
je	SHORT $LN13@findAllIn
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+88]
add	eax, 184				
push	eax
push	OFFSET $SG172820
lea	ecx, DWORD PTR _ptrword$6[ebp]
push	ecx
call	_sprintf
add	esp, 12					
lea	edx, DWORD PTR _ptrword$6[ebp]
push	edx
push	OFFSET $SG172823
push	4004					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+88]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
push	0
push	5
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+88]
call	?getHSelf@Window@@QBEPAUHWND__@@XZ	
push	eax
call	DWORD PTR __imp__SendMessageW@16
mov	DWORD PTR _cmdid$[ebp], 0
cmp	DWORD PTR _op$[ebp], 0
jne	SHORT $LN12@findAllIn
mov	DWORD PTR _cmdid$[ebp], 3031		
jmp	SHORT $LN11@findAllIn
cmp	DWORD PTR _op$[ebp], 1
jne	SHORT $LN10@findAllIn
mov	DWORD PTR _cmdid$[ebp], 3033		
jmp	SHORT $LN11@findAllIn
cmp	DWORD PTR _op$[ebp], 2
jne	SHORT $LN11@findAllIn
mov	DWORD PTR _cmdid$[ebp], 3035		
cmp	DWORD PTR _cmdid$[ebp], 0
jne	SHORT $LN7@findAllIn
jmp	$LN15@findAllIn
push	0
push	0
mov	edx, DWORD PTR _cmdid$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
test	eax, eax
je	SHORT $LN6@findAllIn
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+96], 1
jne	SHORT $LN5@findAllIn
push	OFFSET $SG172897
mov	eax, DWORD PTR _this$[ebp]
add	eax, 100				
push	eax
call	DWORD PTR __imp__wsprintfW
add	esp, 8
jmp	SHORT $LN4@findAllIn
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+96]
push	edx
push	OFFSET $SG172899
mov	eax, DWORD PTR _this$[ebp]
add	eax, 100				
push	eax
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+96], 0
je	SHORT $LN3@findAllIn
mov	ecx, DWORD PTR _this$[ebp]
call	?focusOnFinder@FindReplaceDlg@@QAEXXZ	
jmp	SHORT $LN2@findAllIn
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+88]
call	?getHSelf@Window@@QBEPAUHWND__@@XZ	
push	eax
push	0
push	2054					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	ecx, DWORD PTR _this$[ebp]
call	?getFocus@Window@@QBEXXZ		
jmp	SHORT $LN15@findAllIn
push	1
push	1653					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__GetDlgItem@8
push	eax
push	40					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__SendMessageW@16
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?findAllIn@FindReplaceDlg@@QAEXW4InWhat@@@Z$0 PROC
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__ehhandler$?findAllIn@FindReplaceDlg@@QAEXW4InWhat@@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-108]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?findAllIn@FindReplaceDlg@@QAEXW4InWhat@@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?replaceAllInOpenedDocs@FindReplaceDlg@@QAEXXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
push	0
push	3030					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	esp, ebp
pop	ebp
ret	0
ENDP
?processRange@FindReplaceDlg@@QAEHW4ProcessOperation@@PB_W1HH1PBUFindOption@@H@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?processRange@FindReplaceDlg@@QAEHW4ProcessOperation@@PB_W1HH1PBUFindOption@@H@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 2312				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR _nbProcessed$[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+52]
call	eax
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN44@processRan
cmp	DWORD PTR _txt2find$[ebp], 0
jne	SHORT $LN44@processRan
mov	eax, DWORD PTR _nbProcessed$[ebp]
jmp	$LN45@processRan
cmp	DWORD PTR _op$[ebp], 1
jne	SHORT $LN43@processRan
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?isReadOnly@Buffer@@QBE_NXZ		
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN43@processRan
mov	eax, DWORD PTR _nbProcessed$[ebp]
jmp	$LN45@processRan
mov	edx, DWORD PTR _startRange$[ebp]
cmp	edx, DWORD PTR _endRange$[ebp]
jne	SHORT $LN42@processRan
mov	eax, DWORD PTR _nbProcessed$[ebp]
jmp	$LN45@processRan
cmp	DWORD PTR _fileName$[ebp], 0
jne	SHORT $LN41@processRan
mov	DWORD PTR _fileName$[ebp], OFFSET $SG172574
cmp	DWORD PTR _opt$[ebp], 0
je	SHORT $LN47@processRan
mov	eax, DWORD PTR _opt$[ebp]
mov	DWORD PTR tv87[ebp], eax
jmp	SHORT $LN48@processRan
mov	ecx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	DWORD PTR tv87[ebp], ecx
mov	edx, DWORD PTR tv87[ebp]
mov	DWORD PTR _pOptions$[ebp], edx
push	0
push	0
push	2137					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
cmp	eax, 65001				
jne	SHORT $LN49@processRan
mov	DWORD PTR tv128[ebp], 1
jmp	SHORT $LN50@processRan
mov	DWORD PTR tv128[ebp], 0
mov	dl, BYTE PTR tv128[ebp]
mov	BYTE PTR _isUnicode$[ebp], dl
mov	DWORD PTR _stringSizeFind$[ebp], 0
mov	DWORD PTR _stringSizeReplace$[ebp], 0
mov	DWORD PTR _pTextFind$[ebp], 0
cmp	DWORD PTR _txt2find$[ebp], 0
jne	$LN40@processRan
push	1601					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hFindCombo$11[ebp], eax
movzx	edx, BYTE PTR _isUnicode$[ebp]
push	edx
mov	eax, DWORD PTR _hFindCombo$11[ebp]
push	eax
lea	ecx, DWORD PTR _str2Search$26[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _str2Search$26[ebp]
call	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
mov	DWORD PTR _stringSizeFind$[ebp], eax
mov	eax, DWORD PTR _stringSizeFind$[ebp]
add	eax, 1
xor	ecx, ecx
mov	edx, 2
mul	edx
seto	cl
neg	ecx
or	ecx, eax
push	ecx
call	??_U@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T7[ebp], eax
mov	eax, DWORD PTR $T7[ebp]
mov	DWORD PTR _pTextFind$[ebp], eax
lea	ecx, DWORD PTR _str2Search$26[ebp]
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, DWORD PTR _pTextFind$[ebp]
push	ecx
call	DWORD PTR __imp__lstrcpyW@8
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _str2Search$26[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
jmp	SHORT $LN39@processRan
mov	edx, DWORD PTR _txt2find$[ebp]
push	edx
call	DWORD PTR __imp__lstrlenW@4
mov	DWORD PTR _stringSizeFind$[ebp], eax
mov	eax, DWORD PTR _stringSizeFind$[ebp]
add	eax, 1
xor	ecx, ecx
mov	edx, 2
mul	edx
seto	cl
neg	ecx
or	ecx, eax
push	ecx
call	??_U@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T5[ebp], eax
mov	eax, DWORD PTR $T5[ebp]
mov	DWORD PTR _pTextFind$[ebp], eax
mov	ecx, DWORD PTR _txt2find$[ebp]
push	ecx
mov	edx, DWORD PTR _pTextFind$[ebp]
push	edx
call	DWORD PTR __imp__lstrcpyW@8
mov	eax, 2
imul	ecx, eax, 0
mov	edx, DWORD PTR _pTextFind$[ebp]
movzx	eax, WORD PTR [edx+ecx]
test	eax, eax
jne	SHORT $LN38@processRan
mov	ecx, DWORD PTR _pTextFind$[ebp]
mov	DWORD PTR $T3[ebp], ecx
mov	edx, DWORD PTR $T3[ebp]
push	edx
call	??_V@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _nbProcessed$[ebp]
jmp	$LN45@processRan
mov	DWORD PTR _pTextReplace$[ebp], 0
cmp	DWORD PTR _op$[ebp], 1
jne	$LN37@processRan
cmp	DWORD PTR _txt2replace$[ebp], 0
jne	$LN36@processRan
push	1602					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
mov	DWORD PTR _hReplaceCombo$12[ebp], eax
movzx	edx, BYTE PTR _isUnicode$[ebp]
push	edx
mov	eax, DWORD PTR _hReplaceCombo$12[ebp]
push	eax
lea	ecx, DWORD PTR _str2Replace$28[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?getTextFromCombo@FindReplaceDlg@@IBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@_N@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR _str2Replace$28[ebp]
call	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
mov	DWORD PTR _stringSizeReplace$[ebp], eax
mov	eax, DWORD PTR _stringSizeReplace$[ebp]
add	eax, 1
xor	ecx, ecx
mov	edx, 2
mul	edx
seto	cl
neg	ecx
or	ecx, eax
push	ecx
call	??_U@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T8[ebp], eax
mov	eax, DWORD PTR $T8[ebp]
mov	DWORD PTR _pTextReplace$[ebp], eax
lea	ecx, DWORD PTR _str2Replace$28[ebp]
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, DWORD PTR _pTextReplace$[ebp]
push	ecx
call	DWORD PTR __imp__lstrcpyW@8
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _str2Replace$28[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
jmp	SHORT $LN37@processRan
mov	edx, DWORD PTR _txt2replace$[ebp]
push	edx
call	DWORD PTR __imp__lstrlenW@4
mov	DWORD PTR _stringSizeReplace$[ebp], eax
mov	eax, DWORD PTR _stringSizeReplace$[ebp]
add	eax, 1
xor	ecx, ecx
mov	edx, 2
mul	edx
seto	cl
neg	ecx
or	ecx, eax
push	ecx
call	??_U@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T14[ebp], eax
mov	eax, DWORD PTR $T14[ebp]
mov	DWORD PTR _pTextReplace$[ebp], eax
mov	ecx, DWORD PTR _txt2replace$[ebp]
push	ecx
mov	edx, DWORD PTR _pTextReplace$[ebp]
push	edx
call	DWORD PTR __imp__lstrcpyW@8
mov	eax, DWORD PTR _pOptions$[ebp]
cmp	DWORD PTR [eax+8], 1
jne	SHORT $LN34@processRan
mov	ecx, DWORD PTR _stringSizeFind$[ebp]
push	ecx
mov	edx, DWORD PTR _pTextFind$[ebp]
push	edx
mov	eax, DWORD PTR _pTextFind$[ebp]
push	eax
call	?convertExtendedToString@Searching@@SAHPB_WPA_WH@Z 
add	esp, 12					
mov	DWORD PTR _stringSizeFind$[ebp], eax
cmp	DWORD PTR _op$[ebp], 1
jne	SHORT $LN34@processRan
mov	ecx, DWORD PTR _stringSizeReplace$[ebp]
push	ecx
mov	edx, DWORD PTR _pTextReplace$[ebp]
push	edx
mov	eax, DWORD PTR _pTextReplace$[ebp]
push	eax
call	?convertExtendedToString@Searching@@SAHPB_WPA_WH@Z 
add	esp, 12					
mov	DWORD PTR _stringSizeReplace$[ebp], eax
mov	ecx, DWORD PTR _pOptions$[ebp]
cmp	DWORD PTR [ecx+8], 2
jne	SHORT $LN51@processRan
mov	DWORD PTR tv231[ebp], 1
jmp	SHORT $LN52@processRan
mov	DWORD PTR tv231[ebp], 0
mov	dl, BYTE PTR tv231[ebp]
mov	BYTE PTR _isRegExp$[ebp], dl
mov	eax, DWORD PTR _pOptions$[ebp]
push	eax
call	?buildSearchFlags@Searching@@SAHPBUFindOption@@@Z 
add	esp, 4
or	eax, 134217728				
mov	DWORD PTR _flags$[ebp], eax
cmp	DWORD PTR _op$[ebp], 1
je	SHORT $LN31@processRan
cmp	DWORD PTR _op$[ebp], 0
jne	SHORT $LN32@processRan
mov	ecx, DWORD PTR _flags$[ebp]
or	ecx, 536870912				
mov	DWORD PTR _flags$[ebp], ecx
cmp	DWORD PTR _op$[ebp], 3
jne	SHORT $LN30@processRan
cmp	DWORD PTR _colourStyleID$[ebp], -1
jne	SHORT $LN30@processRan
mov	edx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
movzx	eax, BYTE PTR [edx+12]
test	eax, eax
je	SHORT $LN30@processRan
push	31					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?clearIndicator@ScintillaEditView@@QAEXH@Z 
mov	eax, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
movzx	ecx, BYTE PTR [eax+13]
test	ecx, ecx
je	SHORT $LN30@processRan
push	0
push	24					
push	2045					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _targetStart$[ebp], 0
mov	DWORD PTR _targetEnd$[ebp], 0
push	0
mov	ecx, DWORD PTR _flags$[ebp]
push	ecx
push	2198					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	BYTE PTR _findAllFileNameAdded$[ebp], 0
cmp	DWORD PTR _targetStart$[ebp], -1
je	$LN26@processRan
cmp	DWORD PTR _targetStart$[ebp], -2	
je	$LN26@processRan
mov	ecx, DWORD PTR _endRange$[ebp]
push	ecx
mov	edx, DWORD PTR _startRange$[ebp]
push	edx
mov	eax, DWORD PTR _stringSizeFind$[ebp]
push	eax
mov	ecx, DWORD PTR _pTextFind$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z 
mov	DWORD PTR _targetStart$[ebp], eax
cmp	DWORD PTR _targetStart$[ebp], -1
je	SHORT $LN24@processRan
cmp	DWORD PTR _targetStart$[ebp], -2	
jne	SHORT $LN25@processRan
jmp	$LN26@processRan
push	0
push	0
push	2193					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _targetEnd$[ebp], eax
mov	eax, DWORD PTR _targetEnd$[ebp]
cmp	eax, DWORD PTR _endRange$[ebp]
jle	SHORT $LN23@processRan
jmp	$LN26@processRan
mov	ecx, DWORD PTR _targetEnd$[ebp]
sub	ecx, DWORD PTR _targetStart$[ebp]
mov	DWORD PTR _foundTextLen$25[ebp], ecx
mov	DWORD PTR _replaceDelta$22[ebp], 0
mov	edx, DWORD PTR _op$[ebp]
mov	DWORD PTR tv284[ebp], edx
cmp	DWORD PTR tv284[ebp], 6
ja	$LN3@processRan
mov	eax, DWORD PTR tv284[ebp]
jmp	DWORD PTR $LN58@processRan[eax*4]
movzx	ecx, BYTE PTR _findAllFileNameAdded$[ebp]
test	ecx, ecx
jne	SHORT $LN19@processRan
mov	edx, DWORD PTR _fileName$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+88]
call	?addFileNameTitle@Finder@@QAEXPB_W@Z	
mov	BYTE PTR _findAllFileNameAdded$[ebp], 1
push	0
mov	ecx, DWORD PTR _targetStart$[ebp]
push	ecx
push	2166					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _lineNumber$21[ebp], eax
push	0
mov	ecx, DWORD PTR _lineNumber$21[ebp]
push	ecx
push	2136					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _lend$23[ebp], eax
push	0
mov	ecx, DWORD PTR _lineNumber$21[ebp]
push	ecx
push	2167					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _lstart$24[ebp], eax
mov	ecx, DWORD PTR _lend$23[ebp]
sub	ecx, DWORD PTR _lstart$24[ebp]
mov	DWORD PTR _nbChar$13[ebp], ecx
cmp	DWORD PTR _nbChar$13[ebp], 1021		
jle	SHORT $LN18@processRan
mov	edx, DWORD PTR _lstart$24[ebp]
add	edx, 1020				
mov	DWORD PTR _lend$23[ebp], edx
mov	eax, DWORD PTR _targetStart$[ebp]
sub	eax, DWORD PTR _lstart$24[ebp]
mov	DWORD PTR _start_mark$19[ebp], eax
mov	ecx, DWORD PTR _targetEnd$[ebp]
sub	ecx, DWORD PTR _lstart$24[ebp]
mov	DWORD PTR _end_mark$20[ebp], ecx
lea	edx, DWORD PTR _end_mark$20[ebp]
push	edx
lea	eax, DWORD PTR _start_mark$19[ebp]
push	eax
mov	ecx, DWORD PTR _lend$23[ebp]
push	ecx
mov	edx, DWORD PTR _lstart$24[ebp]
push	edx
push	1024					
lea	eax, DWORD PTR _lineBuf$29[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?getGenericText@ScintillaEditView@@QBEXPA_WIHHPAH1@Z 
lea	eax, DWORD PTR _lineBuf$29[ebp]
push	eax
lea	ecx, DWORD PTR _line$27[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 2
push	OFFSET $SG172749
lea	ecx, DWORD PTR _line$27[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
mov	ecx, DWORD PTR _start_mark$19[ebp]
mov	DWORD PTR _srm$9[ebp], ecx
mov	edx, DWORD PTR _end_mark$20[ebp]
mov	DWORD PTR _srm$9[ebp+4], edx
mov	eax, DWORD PTR _lineNumber$21[ebp]
add	eax, 1
push	eax
lea	ecx, DWORD PTR _line$27[ebp]
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, DWORD PTR _srm$9[ebp+4]
push	ecx
mov	edx, DWORD PTR _srm$9[ebp]
push	edx
sub	esp, 36					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	eax, DWORD PTR _fileName$[ebp]
push	eax
mov	edx, DWORD PTR _targetEnd$[ebp]
push	edx
mov	eax, DWORD PTR _targetStart$[ebp]
push	eax
call	??0FoundInfo@@QAE@HHPB_W@Z		
mov	DWORD PTR tv358[ebp], eax
mov	ecx, DWORD PTR tv358[ebp]
mov	DWORD PTR tv504[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+88]
call	?add@Finder@@QAEXUFoundInfo@@USearchResultMarking@@PB_WH@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _line$27[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
jmp	$LN21@processRan
movzx	eax, BYTE PTR _isRegExp$[ebp]
test	eax, eax
je	SHORT $LN16@processRan
push	-1
push	-1
mov	ecx, DWORD PTR _pTextReplace$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?replaceTargetRegExMode@ScintillaEditView@@QBEHPB_WHH@Z 
mov	DWORD PTR _replacedLength$17[ebp], eax
jmp	SHORT $LN15@processRan
push	-1
push	-1
mov	ecx, DWORD PTR _pTextReplace$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?replaceTarget@ScintillaEditView@@QBEHPB_WHH@Z 
mov	DWORD PTR _replacedLength$17[ebp], eax
mov	ecx, DWORD PTR _replacedLength$17[ebp]
sub	ecx, DWORD PTR _foundTextLen$25[ebp]
mov	DWORD PTR _replaceDelta$22[ebp], ecx
jmp	$LN21@processRan
cmp	DWORD PTR _foundTextLen$25[ebp], 0
jle	SHORT $LN13@processRan
push	0
push	31					
push	2500					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	ecx, DWORD PTR _foundTextLen$25[ebp]
push	ecx
mov	edx, DWORD PTR _targetStart$[ebp]
push	edx
push	2504					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	edx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
movzx	eax, BYTE PTR [edx+13]
test	eax, eax
je	SHORT $LN12@processRan
push	0
mov	ecx, DWORD PTR _targetStart$[ebp]
push	ecx
push	2166					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _lineNumber$18[ebp], eax
push	0
mov	ecx, DWORD PTR _lineNumber$18[ebp]
push	ecx
push	2046					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _state$4[ebp], eax
mov	ecx, DWORD PTR _state$4[ebp]
and	ecx, 16777216				
jne	SHORT $LN12@processRan
push	24					
mov	edx, DWORD PTR _lineNumber$18[ebp]
push	edx
push	2043					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
jmp	$LN21@processRan
cmp	DWORD PTR _foundTextLen$25[ebp], 0
jle	SHORT $LN9@processRan
push	0
mov	edx, DWORD PTR _colourStyleID$[ebp]
push	edx
push	2500					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	edx, DWORD PTR _foundTextLen$25[ebp]
push	edx
mov	eax, DWORD PTR _targetStart$[ebp]
push	eax
push	2504					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
jmp	$LN21@processRan
cmp	DWORD PTR _foundTextLen$25[ebp], 0
jle	SHORT $LN7@processRan
push	0
push	29					
push	2500					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	edx, DWORD PTR _foundTextLen$25[ebp]
push	edx
mov	eax, DWORD PTR _targetStart$[ebp]
push	eax
push	2504					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
jmp	$LN21@processRan
cmp	DWORD PTR _foundTextLen$25[ebp], 0
jle	SHORT $LN5@processRan
push	0
push	28					
push	2500					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	edx, DWORD PTR _foundTextLen$25[ebp]
push	edx
mov	eax, DWORD PTR _targetStart$[ebp]
push	eax
push	2504					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
jmp	SHORT $LN21@processRan
jmp	SHORT $LN21@processRan
mov	eax, DWORD PTR _pTextFind$[ebp]
mov	DWORD PTR $T10[ebp], eax
mov	ecx, DWORD PTR $T10[ebp]
push	ecx
call	??_V@YAXPAX@Z				
add	esp, 4
mov	edx, DWORD PTR _pTextReplace$[ebp]
mov	DWORD PTR $T6[ebp], edx
mov	eax, DWORD PTR $T6[ebp]
push	eax
call	??_V@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _nbProcessed$[ebp]
jmp	$LN45@processRan
mov	ecx, DWORD PTR _nbProcessed$[ebp]
add	ecx, 1
mov	DWORD PTR _nbProcessed$[ebp], ecx
mov	edx, DWORD PTR _targetStart$[ebp]
add	edx, DWORD PTR _foundTextLen$25[ebp]
cmp	edx, DWORD PTR _endRange$[ebp]
jne	SHORT $LN2@processRan
jmp	SHORT $LN26@processRan
mov	eax, DWORD PTR _targetStart$[ebp]
add	eax, DWORD PTR _foundTextLen$25[ebp]
add	eax, DWORD PTR _replaceDelta$22[ebp]
mov	DWORD PTR _startRange$[ebp], eax
mov	ecx, DWORD PTR _endRange$[ebp]
add	ecx, DWORD PTR _replaceDelta$22[ebp]
mov	DWORD PTR _endRange$[ebp], ecx
jmp	$LN27@processRan
mov	edx, DWORD PTR _pTextFind$[ebp]
mov	DWORD PTR $T16[ebp], edx
mov	eax, DWORD PTR $T16[ebp]
push	eax
call	??_V@YAXPAX@Z				
add	esp, 4
mov	ecx, DWORD PTR _pTextReplace$[ebp]
mov	DWORD PTR $T15[ebp], ecx
mov	edx, DWORD PTR $T15[ebp]
push	edx
call	??_V@YAXPAX@Z				
add	esp, 4
cmp	DWORD PTR _nbProcessed$[ebp], 0
jle	SHORT $LN1@processRan
cmp	DWORD PTR _op$[ebp], 0
jne	SHORT $LN1@processRan
mov	eax, DWORD PTR _nbProcessed$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+88]
call	?addFileHitCount@Finder@@QAEXH@Z	
mov	eax, DWORD PTR _nbProcessed$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	32					
npad	3
DD	$LN20@processRan
DD	$LN17@processRan
DD	$LN4@processRan
DD	$LN14@processRan
DD	$LN8@processRan
DD	$LN6@processRan
DD	$LN10@processRan
ENDP
__unwindfunclet$?processRange@FindReplaceDlg@@QAEHW4ProcessOperation@@PB_W1HH1PBUFindOption@@H@Z$0 PROC
lea	ecx, DWORD PTR _str2Search$26[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?processRange@FindReplaceDlg@@QAEHW4ProcessOperation@@PB_W1HH1PBUFindOption@@H@Z$1 PROC
lea	ecx, DWORD PTR _str2Replace$28[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?processRange@FindReplaceDlg@@QAEHW4ProcessOperation@@PB_W1HH1PBUFindOption@@H@Z$2 PROC
lea	ecx, DWORD PTR _line$27[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?processRange@FindReplaceDlg@@QAEHW4ProcessOperation@@PB_W1HH1PBUFindOption@@H@Z$3 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1FoundInfo@@QAE@XZ
ENDP
__ehhandler$?processRange@FindReplaceDlg@@QAEHW4ProcessOperation@@PB_W1HH1PBUFindOption@@H@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-2316]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?processRange@FindReplaceDlg@@QAEHW4ProcessOperation@@PB_W1HH1PBUFindOption@@H@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?processAll@FindReplaceDlg@@QAEHW4ProcessOperation@@PBUFindOption@@_NPB_WH@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?processAll@FindReplaceDlg@@QAEHW4ProcessOperation@@PBUFindOption@@_NPB_WH@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 80					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _op$[ebp], 1
jne	SHORT $LN8@processAll
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?isReadOnly@Buffer@@QBE_NXZ		
movzx	edx, al
test	edx, edx
je	SHORT $LN8@processAll
push	OFFSET $SG172460
lea	ecx, DWORD PTR _result$3[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	1
lea	eax, DWORD PTR _result$3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	DWORD PTR $T2[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _result$3[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	eax, DWORD PTR $T2[ebp]
jmp	$LN9@processAll
cmp	DWORD PTR _opt$[ebp], 0
je	SHORT $LN11@processAll
mov	ecx, DWORD PTR _opt$[ebp]
mov	DWORD PTR tv81[ebp], ecx
jmp	SHORT $LN12@processAll
mov	edx, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	DWORD PTR tv81[ebp], edx
mov	eax, DWORD PTR tv81[ebp]
mov	DWORD PTR _pOptions$[ebp], eax
mov	ecx, DWORD PTR _pOptions$[ebp]
add	ecx, 16					
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
mov	DWORD PTR _txt2find$[ebp], eax
mov	ecx, DWORD PTR _pOptions$[ebp]
add	ecx, 44					
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
mov	DWORD PTR _txt2replace$[ebp], eax
lea	ecx, DWORD PTR _cr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?getSelection@ScintillaEditView@@QBE?AUSci_CharacterRange@@XZ 
push	0
push	0
push	2006					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _docLength$[ebp], eax
mov	DWORD PTR _startPosition$[ebp], 0
mov	eax, DWORD PTR _docLength$[ebp]
mov	DWORD PTR _endPosition$[ebp], eax
mov	ecx, DWORD PTR _pOptions$[ebp]
mov	dl, BYTE PTR [ecx+3]
mov	BYTE PTR _direction$[ebp], dl
movzx	eax, BYTE PTR _direction$[ebp]
test	eax, eax
jne	SHORT $LN7@processAll
mov	DWORD PTR _startPosition$[ebp], 0
mov	ecx, DWORD PTR _cr$[ebp+4]
mov	DWORD PTR _endPosition$[ebp], ecx
jmp	SHORT $LN6@processAll
mov	edx, DWORD PTR _cr$[ebp]
mov	DWORD PTR _startPosition$[ebp], edx
mov	eax, DWORD PTR _docLength$[ebp]
mov	DWORD PTR _endPosition$[ebp], eax
mov	ecx, DWORD PTR _pOptions$[ebp]
movzx	edx, BYTE PTR [ecx+2]
test	edx, edx
jne	SHORT $LN4@processAll
movzx	eax, BYTE PTR _isEntire$[ebp]
test	eax, eax
jne	SHORT $LN4@processAll
cmp	DWORD PTR _op$[ebp], 2
jne	SHORT $LN5@processAll
mov	DWORD PTR _startPosition$[ebp], 0
mov	ecx, DWORD PTR _docLength$[ebp]
mov	DWORD PTR _endPosition$[ebp], ecx
mov	edx, DWORD PTR _pOptions$[ebp]
movzx	eax, BYTE PTR [edx+14]
test	eax, eax
je	SHORT $LN3@processAll
cmp	DWORD PTR _op$[ebp], 3
je	SHORT $LN2@processAll
cmp	DWORD PTR _op$[ebp], 1
jne	SHORT $LN3@processAll
movzx	ecx, BYTE PTR _isEntire$[ebp]
test	ecx, ecx
jne	SHORT $LN3@processAll
mov	edx, DWORD PTR _cr$[ebp]
mov	DWORD PTR _startPosition$[ebp], edx
mov	eax, DWORD PTR _cr$[ebp+4]
mov	DWORD PTR _endPosition$[ebp], eax
cmp	DWORD PTR _op$[ebp], 6
jne	SHORT $LN1@processAll
cmp	DWORD PTR _colourStyleID$[ebp], -1
je	SHORT $LN1@processAll
mov	DWORD PTR _startPosition$[ebp], 0
mov	ecx, DWORD PTR _docLength$[ebp]
mov	DWORD PTR _endPosition$[ebp], ecx
mov	edx, DWORD PTR _colourStyleID$[ebp]
push	edx
mov	eax, DWORD PTR _pOptions$[ebp]
push	eax
mov	ecx, DWORD PTR _fileName$[ebp]
push	ecx
mov	edx, DWORD PTR _endPosition$[ebp]
push	edx
mov	eax, DWORD PTR _startPosition$[ebp]
push	eax
mov	ecx, DWORD PTR _txt2replace$[ebp]
push	ecx
mov	edx, DWORD PTR _txt2find$[ebp]
push	edx
mov	eax, DWORD PTR _op$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?processRange@FindReplaceDlg@@QAEHW4ProcessOperation@@PB_W1HH1PBUFindOption@@H@Z 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	20					
ENDP
__unwindfunclet$?processAll@FindReplaceDlg@@QAEHW4ProcessOperation@@PBUFindOption@@_NPB_WH@Z$0 PROC
lea	ecx, DWORD PTR _result$3[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$?processAll@FindReplaceDlg@@QAEHW4ProcessOperation@@PBUFindOption@@_NPB_WH@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?processAll@FindReplaceDlg@@QAEHW4ProcessOperation@@PBUFindOption@@_NPB_WH@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?markAllInc@FindReplaceDlg@@QAEHPBUFindOption@@@Z PROC	
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
push	-1
push	0
push	1
mov	eax, DWORD PTR _opt$[ebp]
push	eax
push	5
mov	ecx, DWORD PTR _this$[ebp]
call	?processAll@FindReplaceDlg@@QAEHW4ProcessOperation@@PBUFindOption@@_NPB_WH@Z 
mov	DWORD PTR _nbFound$[ebp], eax
mov	eax, DWORD PTR _nbFound$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?markAll@FindReplaceDlg@@QAEHPB_WH_N@Z PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?markAll@FindReplaceDlg@@QAEHPB_WH_N@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 152				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR _opt$[ebp]
call	??0FindOption@@QAE@XZ			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	al, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+1
mov	BYTE PTR _opt$[ebp+1], al
movzx	ecx, BYTE PTR _isWholeWordSelected$[ebp]
test	ecx, ecx
je	SHORT $LN3@markAll
mov	dl, BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A
mov	BYTE PTR tv69[ebp], dl
jmp	SHORT $LN4@markAll
mov	BYTE PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
mov	BYTE PTR _opt$[ebp], al
mov	ecx, DWORD PTR _txt2find$[ebp]
push	ecx
lea	ecx, DWORD PTR _opt$[ebp+16]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
mov	edx, DWORD PTR _styleID$[ebp]
push	edx
push	0
push	1
lea	eax, DWORD PTR _opt$[ebp]
push	eax
push	6
mov	ecx, DWORD PTR _this$[ebp]
call	?processAll@FindReplaceDlg@@QAEHW4ProcessOperation@@PBUFindOption@@_NPB_WH@Z 
mov	DWORD PTR _nbFound$[ebp], eax
mov	ecx, DWORD PTR _nbFound$[ebp]
mov	DWORD PTR $T2[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _opt$[ebp]
call	??1FindOption@@QAE@XZ
mov	eax, DWORD PTR $T2[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$?markAll@FindReplaceDlg@@QAEHPB_WH_N@Z$0 PROC
lea	ecx, DWORD PTR _opt$[ebp]
jmp	??1FindOption@@QAE@XZ
ENDP
__ehhandler$?markAll@FindReplaceDlg@@QAEHPB_WH_N@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-156]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?markAll@FindReplaceDlg@@QAEHPB_WH_N@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?processReplace@FindReplaceDlg@@QAE_NPB_W0PBUFindOption@@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?processReplace@FindReplaceDlg@@QAE_NPB_W0PBUFindOption@@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 356				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _txt2find$[ebp], 0
je	SHORT $LN12@processRep
mov	eax, 2
imul	ecx, eax, 0
mov	edx, DWORD PTR _txt2find$[ebp]
movzx	eax, WORD PTR [edx+ecx]
test	eax, eax
je	SHORT $LN12@processRep
cmp	DWORD PTR _txt2replace$[ebp], 0
jne	SHORT $LN13@processRep
xor	al, al
jmp	$LN14@processRep
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ 
mov	ecx, eax
call	?isReadOnly@Buffer@@QBE_NXZ		
movzx	eax, al
test	eax, eax
je	SHORT $LN11@processRep
push	OFFSET $SG172295
lea	ecx, DWORD PTR _errMsg$15[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	1
lea	ecx, DWORD PTR _errMsg$15[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	BYTE PTR $T14[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _errMsg$15[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	al, BYTE PTR $T14[ebp]
jmp	$LN14@processRep
cmp	DWORD PTR _options$[ebp], 0
je	SHORT $LN16@processRep
mov	edx, DWORD PTR _options$[ebp]
mov	DWORD PTR tv88[ebp], edx
jmp	SHORT $LN17@processRep
mov	eax, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	DWORD PTR tv88[ebp], eax
mov	ecx, DWORD PTR tv88[ebp]
mov	DWORD PTR $T3[ebp], ecx
mov	edx, DWORD PTR $T3[ebp]
push	edx
lea	ecx, DWORD PTR _replaceOptions$[ebp]
call	??0FindOption@@QAE@ABU0@@Z
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	DWORD PTR _replaceOptions$[ebp+4], 1
lea	eax, DWORD PTR _currentSelection$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?getSelection@ScintillaEditView@@QBE?AUSci_CharacterRange@@XZ 
push	2
lea	eax, DWORD PTR _status$[ebp]
push	eax
lea	ecx, DWORD PTR _replaceOptions$[ebp]
push	ecx
mov	edx, DWORD PTR _txt2find$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z 
mov	BYTE PTR _moreMatches$[ebp], al
movzx	eax, BYTE PTR _moreMatches$[ebp]
test	eax, eax
je	$LN10@processRep
lea	ecx, DWORD PTR _nextFind$2[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?getSelection@ScintillaEditView@@QBE?AUSci_CharacterRange@@XZ 
mov	ecx, DWORD PTR _nextFind$2[ebp]
cmp	ecx, DWORD PTR _currentSelection$[ebp]
jne	$LN9@processRep
mov	edx, DWORD PTR _nextFind$2[ebp+4]
cmp	edx, DWORD PTR _currentSelection$[ebp+4]
jne	$LN9@processRep
mov	eax, DWORD PTR _txt2find$[ebp]
push	eax
call	DWORD PTR __imp__lstrlenW@4
mov	DWORD PTR _stringSizeFind$4[ebp], eax
mov	ecx, DWORD PTR _txt2replace$[ebp]
push	ecx
call	DWORD PTR __imp__lstrlenW@4
mov	DWORD PTR _stringSizeReplace$9[ebp], eax
mov	eax, DWORD PTR _stringSizeFind$4[ebp]
add	eax, 1
xor	ecx, ecx
mov	edx, 2
mul	edx
seto	cl
neg	ecx
or	ecx, eax
push	ecx
call	??_U@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T7[ebp], eax
mov	eax, DWORD PTR $T7[ebp]
mov	DWORD PTR _pTextFind$5[ebp], eax
mov	eax, DWORD PTR _stringSizeReplace$9[ebp]
add	eax, 1
xor	ecx, ecx
mov	edx, 2
mul	edx
seto	cl
neg	ecx
or	ecx, eax
push	ecx
call	??_U@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T6[ebp], eax
mov	eax, DWORD PTR $T6[ebp]
mov	DWORD PTR _pTextReplace$11[ebp], eax
mov	ecx, DWORD PTR _txt2find$[ebp]
push	ecx
mov	edx, DWORD PTR _pTextFind$5[ebp]
push	edx
call	DWORD PTR __imp__lstrcpyW@8
mov	eax, DWORD PTR _txt2replace$[ebp]
push	eax
mov	ecx, DWORD PTR _pTextReplace$11[ebp]
push	ecx
call	DWORD PTR __imp__lstrcpyW@8
cmp	DWORD PTR _replaceOptions$[ebp+8], 2
jne	SHORT $LN18@processRep
mov	DWORD PTR tv166[ebp], 1
jmp	SHORT $LN19@processRep
mov	DWORD PTR tv166[ebp], 0
mov	dl, BYTE PTR tv166[ebp]
mov	BYTE PTR _isRegExp$13[ebp], dl
mov	eax, DWORD PTR _currentSelection$[ebp]
mov	DWORD PTR _start$8[ebp], eax
mov	DWORD PTR _replacedLen$10[ebp], 0
movzx	ecx, BYTE PTR _isRegExp$13[ebp]
test	ecx, ecx
je	SHORT $LN8@processRep
push	-1
push	-1
mov	edx, DWORD PTR _pTextReplace$11[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?replaceTargetRegExMode@ScintillaEditView@@QBEHPB_WHH@Z 
mov	DWORD PTR _replacedLen$10[ebp], eax
jmp	SHORT $LN7@processRep
cmp	DWORD PTR _replaceOptions$[ebp+8], 1
jne	SHORT $LN6@processRep
mov	edx, DWORD PTR _stringSizeReplace$9[ebp]
push	edx
mov	eax, DWORD PTR _pTextReplace$11[ebp]
push	eax
mov	ecx, DWORD PTR _pTextReplace$11[ebp]
push	ecx
call	?convertExtendedToString@Searching@@SAHPB_WPA_WH@Z 
add	esp, 12					
push	-1
push	-1
mov	edx, DWORD PTR _pTextReplace$11[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?replaceTarget@ScintillaEditView@@QBEHPB_WHH@Z 
mov	DWORD PTR _replacedLen$10[ebp], eax
mov	edx, DWORD PTR _start$8[ebp]
add	edx, DWORD PTR _replacedLen$10[ebp]
push	edx
mov	eax, DWORD PTR _start$8[ebp]
add	eax, DWORD PTR _replacedLen$10[ebp]
push	eax
push	2160					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	1
lea	eax, DWORD PTR _status$[ebp]
push	eax
lea	ecx, DWORD PTR _replaceOptions$[ebp]
push	ecx
mov	edx, DWORD PTR _txt2find$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z 
mov	BYTE PTR _moreMatches$[ebp], al
cmp	DWORD PTR _status$[ebp], 3
jne	SHORT $LN5@processRep
push	OFFSET $SG172371
lea	ecx, DWORD PTR $T16[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
push	3
lea	eax, DWORD PTR $T16[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T16[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
jmp	$LN9@processRep
cmp	DWORD PTR _status$[ebp], 2
jne	SHORT $LN3@processRep
push	OFFSET $SG172391
lea	ecx, DWORD PTR $T17[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
push	2
lea	ecx, DWORD PTR $T17[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T17[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
jmp	SHORT $LN9@processRep
push	OFFSET $SG172394
lea	ecx, DWORD PTR _msg$19[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 4
movzx	edx, BYTE PTR _moreMatches$[ebp]
test	edx, edx
je	SHORT $LN20@processRep
mov	DWORD PTR tv258[ebp], OFFSET $SG172395
jmp	SHORT $LN21@processRep
mov	DWORD PTR tv258[ebp], OFFSET $SG172396
mov	eax, DWORD PTR tv258[ebp]
push	eax
lea	ecx, DWORD PTR _msg$19[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	4
lea	ecx, DWORD PTR _msg$19[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR _msg$19[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
jmp	SHORT $LN1@processRep
push	OFFSET $SG172399
lea	ecx, DWORD PTR $T18[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 5
push	1
lea	edx, DWORD PTR $T18[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T18[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	al, BYTE PTR _moreMatches$[ebp]
mov	BYTE PTR $T12[ebp], al
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _replaceOptions$[ebp]
call	??1FindOption@@QAE@XZ
mov	al, BYTE PTR $T12[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$?processReplace@FindReplaceDlg@@QAE_NPB_W0PBUFindOption@@@Z$0 PROC
lea	ecx, DWORD PTR _errMsg$15[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?processReplace@FindReplaceDlg@@QAE_NPB_W0PBUFindOption@@@Z$1 PROC
lea	ecx, DWORD PTR _replaceOptions$[ebp]
jmp	??1FindOption@@QAE@XZ
ENDP
__unwindfunclet$?processReplace@FindReplaceDlg@@QAE_NPB_W0PBUFindOption@@@Z$2 PROC
lea	ecx, DWORD PTR $T16[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?processReplace@FindReplaceDlg@@QAE_NPB_W0PBUFindOption@@@Z$3 PROC
lea	ecx, DWORD PTR $T17[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?processReplace@FindReplaceDlg@@QAE_NPB_W0PBUFindOption@@@Z$4 PROC
lea	ecx, DWORD PTR _msg$19[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?processReplace@FindReplaceDlg@@QAE_NPB_W0PBUFindOption@@@Z$5 PROC
lea	ecx, DWORD PTR $T18[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$?processReplace@FindReplaceDlg@@QAE_NPB_W0PBUFindOption@@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-360]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?processReplace@FindReplaceDlg@@QAE_NPB_W0PBUFindOption@@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 268				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _oFindStatus$[ebp], 0
je	SHORT $LN31@processFin
mov	eax, DWORD PTR _oFindStatus$[ebp]
mov	DWORD PTR [eax], 0
cmp	DWORD PTR _txt2find$[ebp], 0
je	SHORT $LN29@processFin
mov	ecx, 2
imul	edx, ecx, 0
mov	eax, DWORD PTR _txt2find$[ebp]
movzx	ecx, WORD PTR [eax+edx]
test	ecx, ecx
jne	SHORT $LN30@processFin
xor	al, al
jmp	$LN32@processFin
cmp	DWORD PTR _options$[ebp], 0
je	SHORT $LN34@processFin
mov	edx, DWORD PTR _options$[ebp]
mov	DWORD PTR tv71[ebp], edx
jmp	SHORT $LN35@processFin
mov	eax, DWORD PTR ?_env@FindReplaceDlg@@2PAUFindOption@@A 
mov	DWORD PTR tv71[ebp], eax
mov	ecx, DWORD PTR tv71[ebp]
mov	DWORD PTR _pOptions$[ebp], ecx
push	0
push	0
push	2201					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	ecx, DWORD PTR _txt2find$[ebp]
push	ecx
call	DWORD PTR __imp__lstrlenW@4
mov	DWORD PTR _stringSizeFind$[ebp], eax
mov	eax, DWORD PTR _stringSizeFind$[ebp]
add	eax, 1
xor	ecx, ecx
mov	edx, 2
mul	edx
seto	cl
neg	ecx
or	ecx, eax
push	ecx
call	??_U@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T5[ebp], eax
mov	eax, DWORD PTR $T5[ebp]
mov	DWORD PTR _pText$[ebp], eax
mov	ecx, DWORD PTR _txt2find$[ebp]
push	ecx
mov	edx, DWORD PTR _pText$[ebp]
push	edx
call	DWORD PTR __imp__lstrcpyW@8
mov	eax, DWORD PTR _pOptions$[ebp]
cmp	DWORD PTR [eax+8], 1
jne	SHORT $LN28@processFin
mov	ecx, DWORD PTR _stringSizeFind$[ebp]
push	ecx
mov	edx, DWORD PTR _pText$[ebp]
push	edx
mov	eax, DWORD PTR _txt2find$[ebp]
push	eax
call	?convertExtendedToString@Searching@@SAHPB_WPA_WH@Z 
add	esp, 12					
mov	DWORD PTR _stringSizeFind$[ebp], eax
push	0
push	0
push	2006					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _docLength$[ebp], eax
lea	eax, DWORD PTR _cr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?getSelection@ScintillaEditView@@QBE?AUSci_CharacterRange@@XZ 
mov	eax, DWORD PTR _cr$[ebp+4]
mov	DWORD PTR _startPosition$[ebp], eax
mov	ecx, DWORD PTR _docLength$[ebp]
mov	DWORD PTR _endPosition$[ebp], ecx
mov	edx, DWORD PTR _pOptions$[ebp]
movzx	eax, BYTE PTR [edx+3]
test	eax, eax
jne	SHORT $LN27@processFin
mov	ecx, DWORD PTR _cr$[ebp+4]
sub	ecx, 1
mov	DWORD PTR _startPosition$[ebp], ecx
mov	DWORD PTR _endPosition$[ebp], 0
mov	edx, DWORD PTR _pOptions$[ebp]
cmp	DWORD PTR [edx+4], 1
jne	SHORT $LN26@processFin
mov	eax, DWORD PTR _cr$[ebp]
mov	DWORD PTR _startPosition$[ebp], eax
mov	ecx, DWORD PTR _docLength$[ebp]
mov	DWORD PTR _endPosition$[ebp], ecx
mov	edx, DWORD PTR _pOptions$[ebp]
movzx	eax, BYTE PTR [edx+3]
test	eax, eax
jne	SHORT $LN25@processFin
mov	ecx, DWORD PTR _cr$[ebp+4]
mov	DWORD PTR _startPosition$[ebp], ecx
mov	DWORD PTR _endPosition$[ebp], 0
jmp	SHORT $LN24@processFin
mov	edx, DWORD PTR _pOptions$[ebp]
cmp	DWORD PTR [edx+4], 2
jne	SHORT $LN24@processFin
mov	eax, DWORD PTR _cr$[ebp]
add	eax, 1
mov	DWORD PTR _startPosition$[ebp], eax
mov	ecx, DWORD PTR _docLength$[ebp]
mov	DWORD PTR _endPosition$[ebp], ecx
mov	edx, DWORD PTR _pOptions$[ebp]
movzx	eax, BYTE PTR [edx+3]
test	eax, eax
jne	SHORT $LN24@processFin
mov	ecx, DWORD PTR _cr$[ebp+4]
sub	ecx, 1
mov	DWORD PTR _startPosition$[ebp], ecx
mov	DWORD PTR _endPosition$[ebp], 0
mov	edx, DWORD PTR _pOptions$[ebp]
push	edx
call	?buildSearchFlags@Searching@@SAHPBUFindOption@@@Z 
add	esp, 4
mov	DWORD PTR _flags$[ebp], eax
mov	eax, DWORD PTR _findNextType$[ebp]
mov	DWORD PTR tv157[ebp], eax
cmp	DWORD PTR tv157[ebp], 0
je	SHORT $LN19@processFin
cmp	DWORD PTR tv157[ebp], 1
je	SHORT $LN18@processFin
cmp	DWORD PTR tv157[ebp], 2
je	SHORT $LN17@processFin
jmp	SHORT $LN20@processFin
mov	ecx, DWORD PTR _flags$[ebp]
or	ecx, 1207959552				
mov	DWORD PTR _flags$[ebp], ecx
jmp	SHORT $LN20@processFin
mov	edx, DWORD PTR _flags$[ebp]
or	edx, 671088640				
mov	DWORD PTR _flags$[ebp], edx
jmp	SHORT $LN20@processFin
mov	eax, DWORD PTR _flags$[ebp]
or	eax, -939524096				
mov	DWORD PTR _flags$[ebp], eax
push	0
mov	ecx, DWORD PTR _startPosition$[ebp]
sub	ecx, 1
push	ecx
push	2007					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
cmp	eax, 13					
jne	SHORT $LN16@processFin
push	0
mov	ecx, DWORD PTR _startPosition$[ebp]
push	ecx
push	2007					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
cmp	eax, 10					
jne	SHORT $LN16@processFin
mov	ecx, DWORD PTR _flags$[ebp]
and	ecx, 536870911				
mov	DWORD PTR _flags$[ebp], ecx
push	0
mov	edx, DWORD PTR _flags$[ebp]
push	edx
push	2198					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	edx, DWORD PTR _endPosition$[ebp]
push	edx
mov	eax, DWORD PTR _startPosition$[ebp]
push	eax
mov	ecx, DWORD PTR _stringSizeFind$[ebp]
push	ecx
mov	edx, DWORD PTR _pText$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z 
mov	DWORD PTR _posFind$[ebp], eax
cmp	DWORD PTR _posFind$[ebp], -1
jne	$LN15@processFin
mov	edx, DWORD PTR _pOptions$[ebp]
movzx	eax, BYTE PTR [edx+2]
test	eax, eax
je	$LN14@processFin
mov	ecx, DWORD PTR _pOptions$[ebp]
movzx	edx, BYTE PTR [ecx+3]
cmp	edx, 1
jne	SHORT $LN13@processFin
mov	DWORD PTR _startPosition$[ebp], 0
mov	eax, DWORD PTR _docLength$[ebp]
mov	DWORD PTR _endPosition$[ebp], eax
cmp	DWORD PTR _oFindStatus$[ebp], 0
je	SHORT $LN12@processFin
mov	ecx, DWORD PTR _oFindStatus$[ebp]
mov	DWORD PTR [ecx], 3
jmp	SHORT $LN11@processFin
mov	edx, DWORD PTR _docLength$[ebp]
mov	DWORD PTR _startPosition$[ebp], edx
mov	DWORD PTR _endPosition$[ebp], 0
cmp	DWORD PTR _oFindStatus$[ebp], 0
je	SHORT $LN11@processFin
mov	eax, DWORD PTR _oFindStatus$[ebp]
mov	DWORD PTR [eax], 2
mov	ecx, DWORD PTR _endPosition$[ebp]
push	ecx
mov	edx, DWORD PTR _startPosition$[ebp]
push	edx
mov	eax, DWORD PTR _stringSizeFind$[ebp]
push	eax
mov	ecx, DWORD PTR _pText$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
call	?searchInTarget@ScintillaEditView@@QBEHPB_WHHH@Z 
mov	DWORD PTR _posFind$[ebp], eax
cmp	DWORD PTR _posFind$[ebp], -1
jne	$LN9@processFin
cmp	DWORD PTR _oFindStatus$[ebp], 0
je	SHORT $LN8@processFin
mov	ecx, DWORD PTR _oFindStatus$[ebp]
mov	DWORD PTR [ecx], 1
mov	edx, DWORD PTR _pOptions$[ebp]
cmp	DWORD PTR [edx+4], 0
jne	$LN7@processFin
push	OFFSET $SG172262
lea	ecx, DWORD PTR _msg$11[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	OFFSET $SG172267
lea	ecx, DWORD PTR $T10[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	OFFSET $SG172268
lea	ecx, DWORD PTR $T7[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	eax, DWORD PTR $T10[ebp]
push	eax
lea	ecx, DWORD PTR $T7[ebp]
push	ecx
sub	esp, 28					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	edx, DWORD PTR _txt2find$[ebp]
push	edx
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR tv230[ebp], eax
mov	eax, DWORD PTR tv230[ebp]
mov	DWORD PTR tv350[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T6[ebp]
push	ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
call	?stringReplace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z 
add	esp, 40					
mov	DWORD PTR tv223[ebp], eax
mov	edx, DWORD PTR tv223[ebp]
mov	DWORD PTR tv352[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 4
mov	eax, DWORD PTR tv352[ebp]
push	eax
lea	ecx, DWORD PTR _msg$11[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T6[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T7[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T10[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	OFFSET $SG172269
lea	ecx, DWORD PTR _msg$11[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	1
lea	ecx, DWORD PTR _msg$11[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__IsWindowVisible@4
test	eax, eax
jne	SHORT $LN6@processFin
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?getFocus@Window@@QBEXXZ		
jmp	SHORT $LN5@processFin
push	1601					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__SetFocus@4
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _msg$11[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	edx, DWORD PTR _pText$[ebp]
mov	DWORD PTR $T4[ebp], edx
mov	eax, DWORD PTR $T4[ebp]
push	eax
call	??_V@YAXPAX@Z				
add	esp, 4
xor	al, al
jmp	$LN32@processFin
jmp	SHORT $LN4@processFin
cmp	DWORD PTR _posFind$[ebp], -2		
jne	SHORT $LN4@processFin
push	OFFSET $SG172276
lea	ecx, DWORD PTR $T9[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 5
push	1
lea	ecx, DWORD PTR $T9[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T9[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
xor	al, al
jmp	$LN32@processFin
mov	edx, DWORD PTR _posFind$[ebp]
mov	DWORD PTR _start$[ebp], edx
push	0
push	0
push	2193					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _end$[ebp], eax
push	OFFSET $SG172278
lea	ecx, DWORD PTR $T8[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 6
push	5
lea	edx, DWORD PTR $T8[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?setStatusbarMessage@FindReplaceDlg@@QAEXABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@W4FindStatus@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T8[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	0
push	0
push	3002					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	edx, DWORD PTR _pOptions$[ebp]
movzx	eax, BYTE PTR [edx+3]
cmp	eax, 1
jne	SHORT $LN36@processFin
mov	BYTE PTR tv312[ebp], 1
jmp	SHORT $LN37@processFin
mov	BYTE PTR tv312[ebp], 0
movzx	ecx, BYTE PTR tv312[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+84]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _end$[ebp]
push	edx
mov	eax, DWORD PTR _start$[ebp]
push	eax
call	?displaySectionCentered@Searching@@SAXHHPAVScintillaEditView@@_N@Z 
add	esp, 16					
mov	ecx, DWORD PTR _start$[ebp]
cmp	ecx, DWORD PTR _end$[ebp]
jne	SHORT $LN2@processFin
push	OFFSET $SG172281
mov	edx, DWORD PTR _start$[ebp]
push	edx
push	2200					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+84]
mov	ecx, DWORD PTR [ecx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
push	0
push	5025					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	DWORD PTR __imp__SendMessageW@16
cmp	eax, 1
jne	SHORT $LN1@processFin
push	0
push	0
push	3001					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+84]
mov	ecx, DWORD PTR [edx]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	eax, DWORD PTR _pText$[ebp]
mov	DWORD PTR $T3[ebp], eax
mov	ecx, DWORD PTR $T3[ebp]
push	ecx
call	??_V@YAXPAX@Z				
add	esp, 4
mov	al, 1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z$0 PROC
lea	ecx, DWORD PTR _msg$11[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z$1 PROC
lea	ecx, DWORD PTR $T10[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z$2 PROC
lea	ecx, DWORD PTR $T7[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z$3 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z$4 PROC
lea	ecx, DWORD PTR $T6[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z$5 PROC
lea	ecx, DWORD PTR $T9[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z$6 PROC
lea	ecx, DWORD PTR $T8[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-272]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?processFindNext@FindReplaceDlg@@QAE_NPB_WPBUFindOption@@PAW4FindStatus@@W4FindNextType@@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?doDialog@FindReplaceDlg@@QAEXW4DIALOG_TYPE@@_N1@Z PROC	
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+52]
call	eax
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN5@doDialog
movzx	edx, BYTE PTR _isRTL$[ebp]
push	edx
push	1600					
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+60]
call	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	dl, BYTE PTR _isRTL$[ebp]
mov	BYTE PTR [ecx+92], dl
cmp	DWORD PTR _whichType$[ebp], 2
jne	SHORT $LN4@doDialog
mov	ecx, DWORD PTR _this$[ebp]
call	?enableFindInFilesFunc@FindReplaceDlg@@AAEXXZ 
jmp	SHORT $LN3@doDialog
cmp	DWORD PTR _whichType$[ebp], 3
jne	SHORT $LN2@doDialog
mov	ecx, DWORD PTR _this$[ebp]
call	?enableMarkFunc@FindReplaceDlg@@AAEXXZ	
jmp	SHORT $LN3@doDialog
cmp	DWORD PTR _whichType$[ebp], 1
jne	SHORT $LN8@doDialog
mov	BYTE PTR tv86[ebp], 1
jmp	SHORT $LN9@doDialog
mov	BYTE PTR tv86[ebp], 0
movzx	eax, BYTE PTR tv86[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?enableReplaceFunc@FindReplaceDlg@@AAEX_N@Z 
push	1601					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__SetFocus@4
movzx	eax, BYTE PTR _toShow$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
call	eax
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?initOptionsFromDlg@FindReplaceDlg@@QAEXXZ PROC		
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
push	1603					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A, al
push	1604					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+1, al
push	1605					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
movzx	eax, al
test	eax, eax
je	SHORT $LN5@initOption
mov	DWORD PTR tv129[ebp], 2
jmp	SHORT $LN6@initOption
push	1626					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN3@initOption
mov	DWORD PTR tv94[ebp], 1
jmp	SHORT $LN4@initOption
mov	DWORD PTR tv94[ebp], 0
mov	edx, DWORD PTR tv94[ebp]
mov	DWORD PTR tv129[ebp], edx
mov	eax, DWORD PTR tv129[ebp]
mov	DWORD PTR ?_options@FindReplaceDlg@@2UFindOption@@A+8, eax
push	1606					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+2, al
push	1632					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+14, al
push	1703					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+130, al
push	1618					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+12, al
push	1616					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+13, al
push	1613					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+3, al
push	1658					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+128, al
push	1659					
mov	ecx, DWORD PTR _this$[ebp]
call	?isCheckedOrNot@StaticDialog@@QBE_NH@Z	
mov	BYTE PTR ?_options@FindReplaceDlg@@2UFindOption@@A+129, al
mov	esp, ebp
pop	ebp
ret	0
ENDP
?create@FindReplaceDlg@@UAEXH_N@Z PROC			
push	ebp
mov	ebp, esp
sub	esp, 48					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
push	1
movzx	eax, BYTE PTR _isRTL$[ebp]
push	eax
mov	ecx, DWORD PTR _dialogID$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?create@StaticDialog@@UAEXH_N0@Z	
mov	ecx, DWORD PTR _this$[ebp]
call	?fillFindHistory@FindReplaceDlg@@AAEXXZ	
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+32], 1
mov	ecx, DWORD PTR _this$[ebp]
call	?initOptionsFromDlg@FindReplaceDlg@@QAEXXZ 
push	0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
push	0
call	DWORD PTR __imp__GetModuleHandleW@4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2208				
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+2208]
mov	edx, DWORD PTR [eax+48]
call	edx
push	1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2208				
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax+2208]
mov	eax, DWORD PTR [edx+12]
call	eax
lea	ecx, DWORD PTR _rect$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax+28]
call	edx
push	1
push	0
push	0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+2156]
mov	edx, DWORD PTR [eax+48]
call	edx
push	13					
call	?getInstance@NppParameters@@SAPAV1@XZ	
add	eax, 12					
mov	ecx, eax
call	?scaleY@DPIManager@@QAEHH@Z		
mov	DWORD PTR _tabDpiDynamicalHeight$[ebp], eax
mov	eax, DWORD PTR _tabDpiDynamicalHeight$[ebp]
push	eax
push	OFFSET $SG170392
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
call	?setFont@TabBar@@QAEXPA_WI@Z		
mov	DWORD PTR _find$[ebp], OFFSET $SG170394
mov	DWORD PTR _replace$[ebp], OFFSET $SG170396
mov	DWORD PTR _findInFiles$[ebp], OFFSET $SG170398
mov	DWORD PTR _mark$[ebp], OFFSET $SG170400
mov	ecx, DWORD PTR _find$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
call	?insertAtEnd@TabBar@@QAEHPB_W@Z		
mov	edx, DWORD PTR _replace$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
call	?insertAtEnd@TabBar@@QAEHPB_W@Z		
mov	eax, DWORD PTR _findInFiles$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
call	?insertAtEnd@TabBar@@QAEHPB_W@Z		
mov	ecx, DWORD PTR _mark$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
call	?insertAtEnd@TabBar@@QAEHPB_W@Z		
lea	edx, DWORD PTR _rect$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax+2156]
mov	eax, DWORD PTR [edx+16]
call	eax
push	1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+2156]
mov	edx, DWORD PTR [eax+12]
call	edx
push	0
push	0
push	2069					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	DWORD PTR _enableDlgTheme$[ebp], eax
cmp	DWORD PTR _enableDlgTheme$[ebp], 0
je	SHORT $LN1@create
push	6
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR _enableDlgTheme$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
call	?goToCenter@StaticDialog@@QAEXXZ	
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	8
ENDP
??1FindReplaceDlg@@UAE@XZ PROC				
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1FindReplaceDlg@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 20					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7FindReplaceDlg@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+2156]
mov	edx, DWORD PTR [eax+8]
call	edx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+88], 0
je	SHORT $LN1@FindReplac
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+88]
mov	DWORD PTR $T3[ebp], edx
mov	eax, DWORD PTR $T3[ebp]
mov	DWORD PTR $T4[ebp], eax
cmp	DWORD PTR $T4[ebp], 0
je	SHORT $LN4@FindReplac
push	1
mov	ecx, DWORD PTR $T4[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR $T4[ebp]
mov	eax, DWORD PTR [edx]
call	eax
mov	DWORD PTR tv132[ebp], eax
jmp	SHORT $LN1@FindReplac
mov	DWORD PTR tv132[ebp], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+2152]
mov	DWORD PTR $T2[ebp], edx
mov	eax, DWORD PTR $T2[ebp]
push	eax
call	??_V@YAXPAX@Z				
add	esp, 4
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2208				
call	??1StatusBar@@UAE@XZ			
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
call	??1TabBar@@UAE@XZ			
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1StaticDialog@@UAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1FindReplaceDlg@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1StaticDialog@@UAE@XZ			
ENDP
__unwindfunclet$??1FindReplaceDlg@@UAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2156				
jmp	??1TabBar@@UAE@XZ			
ENDP
__unwindfunclet$??1FindReplaceDlg@@UAE@XZ$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 2208				
jmp	??1StatusBar@@UAE@XZ			
ENDP
__ehhandler$??1FindReplaceDlg@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1FindReplaceDlg@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GFinder@@UAEPAXI@Z PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1Finder@@UAE@XZ			
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 224				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T4[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 1
push	OFFSET $SG173444
lea	ecx, DWORD PTR $T7[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
push	OFFSET $SG173445
lea	ecx, DWORD PTR $T9[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	eax, DWORD PTR $T7[ebp]
push	eax
lea	ecx, DWORD PTR $T9[ebp]
push	ecx
sub	esp, 28					
mov	ecx, esp
mov	DWORD PTR $T3[ebp], esp
lea	edx, DWORD PTR _s$[ebp]
push	edx
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z 
mov	DWORD PTR tv74[ebp], eax
mov	eax, DWORD PTR tv74[ebp]
mov	DWORD PTR tv184[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 4
lea	ecx, DWORD PTR $T6[ebp]
push	ecx
mov	BYTE PTR __$EHRec$[ebp+8], 3
call	?stringReplace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z 
add	esp, 40					
mov	DWORD PTR tv67[ebp], eax
mov	edx, DWORD PTR tv67[ebp]
mov	DWORD PTR tv186[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 5
mov	eax, DWORD PTR tv186[ebp]
push	eax
lea	ecx, DWORD PTR _s$[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T6[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T9[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T7[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	OFFSET $SG173450
lea	ecx, DWORD PTR $T10[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 6
push	OFFSET $SG173451
lea	ecx, DWORD PTR $T8[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 7
lea	ecx, DWORD PTR $T10[ebp]
push	ecx
lea	edx, DWORD PTR $T8[ebp]
push	edx
sub	esp, 28					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	eax, DWORD PTR _s$[ebp]
push	eax
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z 
mov	DWORD PTR tv136[ebp], eax
mov	ecx, DWORD PTR tv136[ebp]
mov	DWORD PTR tv192[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 8
lea	edx, DWORD PTR $T5[ebp]
push	edx
mov	BYTE PTR __$EHRec$[ebp+8], 7
call	?stringReplace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z 
add	esp, 40					
mov	DWORD PTR tv129[ebp], eax
mov	eax, DWORD PTR tv129[ebp]
mov	DWORD PTR tv194[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 9
mov	ecx, DWORD PTR tv194[ebp]
push	ecx
lea	ecx, DWORD PTR _s$[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 7
lea	ecx, DWORD PTR $T5[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 6
lea	ecx, DWORD PTR $T8[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T10[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
push	0
push	58					
lea	ecx, DWORD PTR _s$[ebp]
call	?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEI_WI@Z 
mov	DWORD PTR _firstColon$[ebp], eax
mov	edx, DWORD PTR _firstColon$[ebp]
cmp	edx, DWORD PTR ?npos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@2IB 
jne	SHORT $LN2@prepareStr
xor	eax, eax
jne	SHORT $LN5@prepareStr
push	2524					
push	OFFSET $SG173455
push	OFFSET $SG173456
call	__wassert
add	esp, 12					
lea	edx, DWORD PTR _s$[ebp]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z 
mov	eax, DWORD PTR $T4[ebp]
or	eax, 1
mov	DWORD PTR $T4[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _s$[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	SHORT $LN3@prepareStr
jmp	SHORT $LN1@prepareStr
mov	ecx, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB 
push	ecx
mov	edx, DWORD PTR _firstColon$[ebp]
add	edx, 2
push	edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
lea	ecx, DWORD PTR _s$[ebp]
call	?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z 
mov	ecx, DWORD PTR $T4[ebp]
or	ecx, 1
mov	DWORD PTR $T4[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _s$[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	SHORT $LN3@prepareStr
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _s$[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	32					
ENDP
__unwindfunclet$?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z$0 PROC
lea	ecx, DWORD PTR _s$[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z$1 PROC
lea	ecx, DWORD PTR $T7[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z$2 PROC
lea	ecx, DWORD PTR $T9[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z$3 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z$4 PROC
lea	ecx, DWORD PTR $T6[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z$5 PROC
lea	ecx, DWORD PTR $T10[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z$6 PROC
lea	ecx, DWORD PTR $T8[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z$7 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z$8 PROC
lea	ecx, DWORD PTR $T5[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z$9 PROC
mov	eax, DWORD PTR $T4[ebp]
and	eax, 1
je	$LN16@prepareStr
and	DWORD PTR $T4[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ret	0
ENDP
__ehhandler$?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-228]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?isLineActualSearchResult@Finder@@ABE_NH@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR _line$[ebp]
push	eax
push	2223					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
and	eax, 4095				
mov	DWORD PTR _foldLevel$[ebp], eax
cmp	DWORD PTR _foldLevel$[ebp], 1027	
jne	SHORT $LN3@isLineActu
mov	DWORD PTR tv72[ebp], 1
jmp	SHORT $LN4@isLineActu
mov	DWORD PTR tv72[ebp], 0
mov	al, BYTE PTR tv72[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?setFinderReadOnly@Finder@@AAEX_N@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
movzx	eax, BYTE PTR _isReadOnly$[ebp]
push	eax
push	2171					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Orphan_range@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEXPAUSearchResultMarking@@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Orphan_range@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEXPAUSearchResultMarking@@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 12					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	??0_Lockit@std@@QAE@H@Z			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
cmp	DWORD PTR __Pnext$[ebp], 0
je	SHORT $LN6@Orphan_ran
mov	eax, DWORD PTR __Pnext$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __First$[ebp]
jb	SHORT $LN2@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR __Last$[ebp]
cmp	eax, DWORD PTR [edx+8]
jae	SHORT $LN3@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [ecx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
jmp	SHORT $LN1@Orphan_ran
mov	edx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [edx]
call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	
mov	eax, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [eax]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
jmp	SHORT $LN5@Orphan_ran
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Lock$[ebp]
call	??1_Lockit@std@@QAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?_Orphan_range@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEXPAUSearchResultMarking@@0@Z$0 PROC
lea	ecx, DWORD PTR __Lock$[ebp]
jmp	??1_Lockit@std@@QAE@XZ			
ENDP
__ehhandler$?_Orphan_range@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEXPAUSearchResultMarking@@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-16]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEXPAUSearchResultMarking@@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Xlen@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
call	?_Xlength_error@std@@YAXPBD@Z		
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Tidy@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN2@Tidy
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXPAUSearchResultMarking@@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
sar	ecx, 3
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@I@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+12], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Reserve@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unused_capacity@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Count$[ebp]
jae	SHORT $LN4@Reserve
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
mov	esi, eax
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
sub	esi, eax
cmp	esi, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Reserve
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow_to@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEII@Z 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reallocate@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXI@Z 
pop	esi
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Reallocate@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Reallocate@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXI@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 16					
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEPAUSearchResultMarking@@I@Z 
mov	DWORD PTR __Ptr$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAUSearchResultMarking@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEPAUSearchResultMarking@@PAU2@00@Z 
jmp	SHORT $LN5@Reallocate
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN8@Reallocate
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$?_Reallocate@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXI@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
mov	DWORD PTR __Size$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+4], 0
je	SHORT $LN1@Reallocate
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXPAUSearchResultMarking@@0@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax+12]
sub	edx, DWORD PTR [ecx+4]
sar	edx, 3
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR __Count$[ebp]
mov	ecx, DWORD PTR __Ptr$[ebp]
lea	edx, DWORD PTR [ecx+eax*8]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+12], edx
mov	ecx, DWORD PTR __Size$[ebp]
mov	edx, DWORD PTR __Ptr$[ebp]
lea	eax, DWORD PTR [edx+ecx*8]
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR __Ptr$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__ehhandler$?_Reallocate@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-36]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Inside@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBE_NPBUSearchResultMarking@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Ptr$[ebp]
cmp	ecx, DWORD PTR [eax+8]
jae	SHORT $LN3@Inside
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
cmp	eax, DWORD PTR __Ptr$[ebp]
ja	SHORT $LN3@Inside
mov	DWORD PTR tv76[ebp], 1
jmp	SHORT $LN4@Inside
mov	DWORD PTR tv76[ebp], 0
mov	al, BYTE PTR tv76[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Grow_to@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEII@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?capacity@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
mov	ecx, DWORD PTR __Capacity$[ebp]
shr	ecx, 1
sub	eax, ecx
cmp	eax, DWORD PTR __Capacity$[ebp]
jae	SHORT $LN4@Grow_to
mov	DWORD PTR tv73[ebp], 0
jmp	SHORT $LN5@Grow_to
mov	edx, DWORD PTR __Capacity$[ebp]
shr	edx, 1
add	edx, DWORD PTR __Capacity$[ebp]
mov	DWORD PTR tv73[ebp], edx
mov	eax, DWORD PTR tv73[ebp]
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR __Capacity$[ebp]
cmp	ecx, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Grow_to
mov	edx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Capacity$[ebp], edx
mov	eax, DWORD PTR __Capacity$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Destroy@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXPAUSearchResultMarking@@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@YAXPAUSearchResultMarking@@0AAU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@0@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
?clear@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXPAUSearchResultMarking@@0@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+8], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 132				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T11[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 2
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv330[ebp], eax
mov	ecx, DWORD PTR tv330[ebp]
mov	DWORD PTR tv303[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	edx, DWORD PTR $T11[ebp]
or	edx, 1
mov	DWORD PTR $T11[ebp], edx
mov	eax, DWORD PTR tv303[ebp]
push	eax
lea	ecx, DWORD PTR __First_arg$[ebp]
call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN9@erase
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv334[ebp], eax
mov	eax, DWORD PTR tv334[ebp]
mov	DWORD PTR tv308[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 4
mov	ecx, DWORD PTR $T11[ebp]
or	ecx, 2
mov	DWORD PTR $T11[ebp], ecx
mov	edx, DWORD PTR tv308[ebp]
push	edx
lea	ecx, DWORD PTR __Last_arg$[ebp]
call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN9@erase
mov	DWORD PTR tv94[ebp], 1
jmp	SHORT $LN10@erase
mov	DWORD PTR tv94[ebp], 0
mov	cl, BYTE PTR tv94[ebp]
mov	BYTE PTR $T10[ebp], cl
mov	DWORD PTR __$EHRec$[ebp+8], 3
mov	edx, DWORD PTR $T11[ebp]
and	edx, 2
je	SHORT $LN17@erase
and	DWORD PTR $T11[ebp], -3			
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 2
mov	eax, DWORD PTR $T11[ebp]
and	eax, 1
je	SHORT $LN18@erase
and	DWORD PTR $T11[ebp], -2			
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
movzx	ecx, BYTE PTR $T10[ebp]
test	ecx, ecx
je	SHORT $LN6@erase
mov	ecx, DWORD PTR _this$[ebp]
call	?clear@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXXZ 
jmp	$LN5@erase
lea	edx, DWORD PTR __Last_arg$[ebp]
push	edx
lea	ecx, DWORD PTR __First_arg$[ebp]
call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	eax, al
test	eax, eax
je	$LN5@erase
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T6[ebp], esp
lea	edx, DWORD PTR __First_arg$[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv338[ebp], eax
mov	eax, DWORD PTR tv338[ebp]
mov	DWORD PTR tv314[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR __First$8[ebp]
push	ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z 
mov	DWORD PTR tv315[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 6
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
lea	edx, DWORD PTR __Last_arg$[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv340[ebp], eax
mov	eax, DWORD PTR tv340[ebp]
mov	DWORD PTR tv318[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 7
lea	ecx, DWORD PTR __Last$7[ebp]
push	ecx
mov	BYTE PTR __$EHRec$[ebp+8], 6
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z 
mov	DWORD PTR tv319[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 8
lea	edx, DWORD PTR __Last$7[ebp]
push	edx
lea	ecx, DWORD PTR __First$8[ebp]
call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	eax, al
test	eax, eax
je	$LN3@erase
lea	ecx, DWORD PTR __First$8[ebp]
push	ecx
lea	ecx, DWORD PTR __Last$7[ebp]
call	??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	edx, al
test	edx, edx
jne	SHORT $LN1@erase
lea	ecx, DWORD PTR __First$8[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	eax, DWORD PTR _this$[ebp]
jne	SHORT $LN1@erase
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __First$8[ebp+8]
cmp	ecx, DWORD PTR [eax+4]
jb	SHORT $LN1@erase
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __Last$7[ebp+8]
jae	SHORT $LN2@erase
push	1477					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	ecx, DWORD PTR __First$8[ebp+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR __Last$7[ebp+8]
push	ecx
call	??$_Move@PAUSearchResultMarking@@PAU1@@std@@YAPAUSearchResultMarking@@PAU1@00@Z 
add	esp, 12					
mov	DWORD PTR __Ptr$9[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR __First$8[ebp+8]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEXPAUSearchResultMarking@@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR __Ptr$9[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXPAUSearchResultMarking@@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR __Ptr$9[ebp]
mov	DWORD PTR [edx+8], eax
mov	BYTE PTR __$EHRec$[ebp+8], 6
lea	ecx, DWORD PTR __Last$7[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR __First$8[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T5[ebp], esp
lea	edx, DWORD PTR __First_arg$[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv342[ebp], eax
mov	eax, DWORD PTR tv342[ebp]
mov	DWORD PTR tv322[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 9
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
push	ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z 
mov	DWORD PTR tv323[ebp], eax
mov	edx, DWORD PTR $T11[ebp]
or	edx, 4
mov	DWORD PTR $T11[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR __First_arg$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Last_arg$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	28					
ENDP
__unwindfunclet$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z$0 PROC
lea	ecx, DWORD PTR __Last_arg$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z$1 PROC
lea	ecx, DWORD PTR __First_arg$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z$2 PROC
mov	eax, DWORD PTR $T11[ebp]
and	eax, 1
je	$LN14@erase
and	DWORD PTR $T11[ebp], -2			
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__unwindfunclet$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z$3 PROC
mov	eax, DWORD PTR $T11[ebp]
and	eax, 2
je	$LN16@erase
and	DWORD PTR $T11[ebp], -3			
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__unwindfunclet$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z$4 PROC
mov	ecx, DWORD PTR $T6[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z$5 PROC
lea	ecx, DWORD PTR __First$8[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z$6 PROC
mov	ecx, DWORD PTR $T4[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z$7 PROC
lea	ecx, DWORD PTR __Last$7[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z$8 PROC
mov	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z$9 PROC
mov	eax, DWORD PTR $T11[ebp]
and	eax, 4
je	$LN25@erase
and	DWORD PTR $T11[ebp], -5			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-136]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 24					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T3[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	eax, DWORD PTR _this$[ebp]
jne	SHORT $LN1@erase
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Where$[ebp+8]
cmp	ecx, DWORD PTR [eax+4]
jb	SHORT $LN1@erase
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __Where$[ebp+8]
ja	SHORT $LN2@erase
push	1442					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	ecx, DWORD PTR __Where$[ebp+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR __Where$[ebp+8]
add	ecx, 8
push	ecx
call	??$_Move@PAUSearchResultMarking@@PAU1@@std@@YAPAUSearchResultMarking@@PAU1@00@Z 
add	esp, 12					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
sub	edx, 8
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXPAUSearchResultMarking@@0@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEXPAUSearchResultMarking@@0@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
sub	ecx, 8
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], ecx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	eax, DWORD PTR __Where$[ebp]
push	eax
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv188[ebp], eax
mov	ecx, DWORD PTR tv188[ebp]
mov	DWORD PTR tv181[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z 
mov	DWORD PTR tv182[ebp], eax
mov	eax, DWORD PTR $T3[ebp]
or	eax, 1
mov	DWORD PTR $T3[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z$0 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z$1 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z$2 PROC
mov	eax, DWORD PTR $T3[ebp]
and	eax, 1
je	$LN8@erase
and	DWORD PTR $T3[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-28]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?push_back@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXABUSearchResultMarking@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	??$addressof@$$CBUSearchResultMarking@@@std@@YAPBUSearchResultMarking@@ABU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Inside@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBE_NPBUSearchResultMarking@@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN4@push_back
mov	edx, DWORD PTR __Val$[ebp]
push	edx
call	??$addressof@$$CBUSearchResultMarking@@@std@@YAPBUSearchResultMarking@@ABU1@@Z 
add	esp, 4
mov	ecx, DWORD PTR _this$[ebp]
sub	eax, DWORD PTR [ecx+4]
sar	eax, 3
mov	DWORD PTR __Idx$1[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+8]
cmp	ecx, DWORD PTR [eax+12]
jne	SHORT $LN3@push_back
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reserve@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXI@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEXPAUSearchResultMarking@@0@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR __Idx$1[ebp]
lea	eax, DWORD PTR [ecx+edx*8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@XZ 
mov	ecx, eax
call	??$construct@USearchResultMarking@@AAU1@@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@AAU2@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
add	edx, 8
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], edx
jmp	SHORT $LN5@push_back
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [ecx+8]
cmp	eax, DWORD PTR [edx+12]
jne	SHORT $LN1@push_back
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reserve@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXI@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IBEXPAUSearchResultMarking@@0@Z 
mov	edx, DWORD PTR __Val$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@XZ 
mov	ecx, eax
call	??$construct@USearchResultMarking@@ABU1@@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@ABU2@@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
add	ecx, 8
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??A?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEAAUSearchResultMarking@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Pos$[ebp]
ja	SHORT $LN1@operator
push	1201					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN4@operator
xor	ecx, ecx
jne	SHORT $LN5@operator
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	1202					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN5@operator
int	3
push	0
push	1202					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1MO@IGBJAKJM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAs?$AAt?$AAr?$AAu?$AAc?$AAt?$AA?5?$AAS?$AAe?$AAa?$AAr?$AAc?$AAh?$AAR?$AAe?$AAs?$AAu?$AAl?$AAt?$AAM@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
mov	edx, DWORD PTR __Pos$[ebp]
lea	eax, DWORD PTR [ecx+edx*8]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?max_size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@XZ 
mov	ecx, eax
call	?max_size@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
sub	eax, DWORD PTR [ecx+4]
sar	eax, 3
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Make_iter@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Make_iter@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR __Where$[ebp+8]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@PAUSearchResultMarking@@PBU_Container_base12@1@@Z 
mov	edx, DWORD PTR $T2[ebp]
or	edx, 1
mov	DWORD PTR $T2[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$?_Make_iter@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z$0 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?_Make_iter@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z$1 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN5@Make_iter
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?_Make_iter@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Make_iter@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?end@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?end@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@PAUSearchResultMarking@@PBU_Container_base12@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?end@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@end
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?end@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?end@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?begin@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?begin@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@PAUSearchResultMarking@@PBU_Container_base12@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?begin@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@begin
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?begin@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Unused_capacity@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+8]
sar	eax, 3
mov	esp, ebp
pop	ebp
ret	0
ENDP
?capacity@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+4]
sar	eax, 3
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@IAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$allocator@USearchResultMarking@@@std@@QAE@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV?$allocator@USearchResultMarking@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
push	1
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??0_Container_proxy@std@@QAE@XZ		
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV?$allocator@USearchResultMarking@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV?$allocator@USearchResultMarking@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV?$allocator@USearchResultMarking@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV?$allocator@USearchResultMarking@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV?$allocator@USearchResultMarking@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Container_base12@std@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??1?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Container_base12@std@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??0?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?max_size@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@V?$allocator@USearchResultMarking@@@std@@@std@@SAIABV?$allocator@USearchResultMarking@@@2@@Z 
add	esp, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXPAUSearchResultMarking@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@I@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAEPAUSearchResultMarking@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@USearchResultMarking@@@std@@QAEPAUSearchResultMarking@@I@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@USearchResultMarking@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@V?$allocator@USearchResultMarking@@@std@@@std@@SAIABV?$allocator@USearchResultMarking@@@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$allocator@USearchResultMarking@@@std@@QBEIXZ 
pop	ebp
ret	0
ENDP
?max_size@?$allocator@USearchResultMarking@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, 536870911				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?construct@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@ABU3@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	8
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T1[ebp], eax
cmp	DWORD PTR $T1[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR __Val$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [ecx+4]
mov	ecx, DWORD PTR $T1[ebp]
mov	DWORD PTR [ecx], edx
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR $T1[ebp]
mov	DWORD PTR tv69[ebp], edx
jmp	SHORT $LN1@construct
mov	DWORD PTR tv69[ebp], 0
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$allocator@USearchResultMarking@@@std@@QAEPAUSearchResultMarking@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@USearchResultMarking@@@std@@YAPAUSearchResultMarking@@IPAU1@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@USearchResultMarking@@@std@@QAEXPAUSearchResultMarking@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@USearchResultMarking@@@std@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Orphan_range@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXPAUFoundInfo@@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Orphan_range@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXPAUFoundInfo@@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 12					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	??0_Lockit@std@@QAE@H@Z			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
cmp	DWORD PTR __Pnext$[ebp], 0
je	SHORT $LN6@Orphan_ran
mov	eax, DWORD PTR __Pnext$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __First$[ebp]
jb	SHORT $LN2@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR __Last$[ebp]
cmp	eax, DWORD PTR [edx+8]
jae	SHORT $LN3@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [ecx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
jmp	SHORT $LN1@Orphan_ran
mov	edx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [edx]
call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	
mov	eax, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [eax]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
jmp	SHORT $LN5@Orphan_ran
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Lock$[ebp]
call	??1_Lockit@std@@QAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?_Orphan_range@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXPAUFoundInfo@@0@Z$0 PROC
lea	ecx, DWORD PTR __Lock$[ebp]
jmp	??1_Lockit@std@@QAE@XZ			
ENDP
__ehhandler$?_Orphan_range@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXPAUFoundInfo@@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-16]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXPAUFoundInfo@@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Xran@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET ??_C@_0BM@NMJKDPPO@invalid?5vector?$DMT?$DO?5subscript?$AA@
call	?_Xout_of_range@std@@YAXPBD@Z		
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Xlen@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
call	?_Xlength_error@std@@YAXPBD@Z		
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Tidy@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN2@Tidy
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXPAUFoundInfo@@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
mov	eax, ecx
cdq
mov	ecx, 36					
idiv	ecx
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@I@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+12], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Reserve@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unused_capacity@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Count$[ebp]
jae	SHORT $LN4@Reserve
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
mov	esi, eax
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
sub	esi, eax
cmp	esi, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Reserve
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow_to@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEII@Z 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reallocate@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXI@Z 
pop	esi
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Reallocate@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Reallocate@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXI@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 16					
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEPAUFoundInfo@@I@Z 
mov	DWORD PTR __Ptr$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAUFoundInfo@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEPAUFoundInfo@@PAU2@00@Z 
jmp	SHORT $LN5@Reallocate
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN8@Reallocate
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$?_Reallocate@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXI@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
mov	DWORD PTR __Size$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+4], 0
je	SHORT $LN1@Reallocate
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXPAUFoundInfo@@0@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+4]
cdq
mov	ecx, 36					
idiv	ecx
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T2[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
imul	edx, DWORD PTR __Count$[ebp], 36
add	edx, DWORD PTR __Ptr$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+12], edx
imul	ecx, DWORD PTR __Size$[ebp], 36
add	ecx, DWORD PTR __Ptr$[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Ptr$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__ehhandler$?_Reallocate@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-36]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Inside@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBE_NPBUFoundInfo@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Ptr$[ebp]
cmp	ecx, DWORD PTR [eax+8]
jae	SHORT $LN3@Inside
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
cmp	eax, DWORD PTR __Ptr$[ebp]
ja	SHORT $LN3@Inside
mov	DWORD PTR tv76[ebp], 1
jmp	SHORT $LN4@Inside
mov	DWORD PTR tv76[ebp], 0
mov	al, BYTE PTR tv76[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Grow_to@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEII@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?capacity@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
mov	ecx, DWORD PTR __Capacity$[ebp]
shr	ecx, 1
sub	eax, ecx
cmp	eax, DWORD PTR __Capacity$[ebp]
jae	SHORT $LN4@Grow_to
mov	DWORD PTR tv73[ebp], 0
jmp	SHORT $LN5@Grow_to
mov	edx, DWORD PTR __Capacity$[ebp]
shr	edx, 1
add	edx, DWORD PTR __Capacity$[ebp]
mov	DWORD PTR tv73[ebp], edx
mov	eax, DWORD PTR tv73[ebp]
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR __Capacity$[ebp]
cmp	ecx, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Grow_to
mov	edx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Capacity$[ebp], edx
mov	eax, DWORD PTR __Capacity$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Destroy@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXPAUFoundInfo@@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@@std@@YAXPAUFoundInfo@@0AAU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@0@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
?clear@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXPAUFoundInfo@@0@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+8], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 132				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T11[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 2
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv330[ebp], eax
mov	ecx, DWORD PTR tv330[ebp]
mov	DWORD PTR tv303[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	edx, DWORD PTR $T11[ebp]
or	edx, 1
mov	DWORD PTR $T11[ebp], edx
mov	eax, DWORD PTR tv303[ebp]
push	eax
lea	ecx, DWORD PTR __First_arg$[ebp]
call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN9@erase
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv334[ebp], eax
mov	eax, DWORD PTR tv334[ebp]
mov	DWORD PTR tv308[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 4
mov	ecx, DWORD PTR $T11[ebp]
or	ecx, 2
mov	DWORD PTR $T11[ebp], ecx
mov	edx, DWORD PTR tv308[ebp]
push	edx
lea	ecx, DWORD PTR __Last_arg$[ebp]
call	??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN9@erase
mov	DWORD PTR tv94[ebp], 1
jmp	SHORT $LN10@erase
mov	DWORD PTR tv94[ebp], 0
mov	cl, BYTE PTR tv94[ebp]
mov	BYTE PTR $T10[ebp], cl
mov	DWORD PTR __$EHRec$[ebp+8], 3
mov	edx, DWORD PTR $T11[ebp]
and	edx, 2
je	SHORT $LN17@erase
and	DWORD PTR $T11[ebp], -3			
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 2
mov	eax, DWORD PTR $T11[ebp]
and	eax, 1
je	SHORT $LN18@erase
and	DWORD PTR $T11[ebp], -2			
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
movzx	ecx, BYTE PTR $T10[ebp]
test	ecx, ecx
je	SHORT $LN6@erase
mov	ecx, DWORD PTR _this$[ebp]
call	?clear@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXXZ 
jmp	$LN5@erase
lea	edx, DWORD PTR __Last_arg$[ebp]
push	edx
lea	ecx, DWORD PTR __First_arg$[ebp]
call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	eax, al
test	eax, eax
je	$LN5@erase
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T6[ebp], esp
lea	edx, DWORD PTR __First_arg$[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv338[ebp], eax
mov	eax, DWORD PTR tv338[ebp]
mov	DWORD PTR tv314[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR __First$8[ebp]
push	ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z 
mov	DWORD PTR tv315[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 6
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
lea	edx, DWORD PTR __Last_arg$[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv340[ebp], eax
mov	eax, DWORD PTR tv340[ebp]
mov	DWORD PTR tv318[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 7
lea	ecx, DWORD PTR __Last$7[ebp]
push	ecx
mov	BYTE PTR __$EHRec$[ebp+8], 6
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z 
mov	DWORD PTR tv319[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 8
lea	edx, DWORD PTR __Last$7[ebp]
push	edx
lea	ecx, DWORD PTR __First$8[ebp]
call	??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	eax, al
test	eax, eax
je	$LN3@erase
lea	ecx, DWORD PTR __First$8[ebp]
push	ecx
lea	ecx, DWORD PTR __Last$7[ebp]
call	??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	edx, al
test	edx, edx
jne	SHORT $LN1@erase
lea	ecx, DWORD PTR __First$8[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	eax, DWORD PTR _this$[ebp]
jne	SHORT $LN1@erase
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __First$8[ebp+8]
cmp	ecx, DWORD PTR [eax+4]
jb	SHORT $LN1@erase
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __Last$7[ebp+8]
jae	SHORT $LN2@erase
push	1477					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	ecx, DWORD PTR __First$8[ebp+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR __Last$7[ebp+8]
push	ecx
call	??$_Move@PAUFoundInfo@@PAU1@@std@@YAPAUFoundInfo@@PAU1@00@Z 
add	esp, 12					
mov	DWORD PTR __Ptr$9[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR __First$8[ebp+8]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXPAUFoundInfo@@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR __Ptr$9[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXPAUFoundInfo@@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR __Ptr$9[ebp]
mov	DWORD PTR [edx+8], eax
mov	BYTE PTR __$EHRec$[ebp+8], 6
lea	ecx, DWORD PTR __Last$7[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR __First$8[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T5[ebp], esp
lea	edx, DWORD PTR __First_arg$[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv342[ebp], eax
mov	eax, DWORD PTR tv342[ebp]
mov	DWORD PTR tv322[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 9
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
push	ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z 
mov	DWORD PTR tv323[ebp], eax
mov	edx, DWORD PTR $T11[ebp]
or	edx, 4
mov	DWORD PTR $T11[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR __First_arg$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Last_arg$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	28					
ENDP
__unwindfunclet$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z$0 PROC
lea	ecx, DWORD PTR __Last_arg$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z$1 PROC
lea	ecx, DWORD PTR __First_arg$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z$2 PROC
mov	eax, DWORD PTR $T11[ebp]
and	eax, 1
je	$LN14@erase
and	DWORD PTR $T11[ebp], -2			
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__unwindfunclet$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z$3 PROC
mov	eax, DWORD PTR $T11[ebp]
and	eax, 2
je	$LN16@erase
and	DWORD PTR $T11[ebp], -3			
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__unwindfunclet$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z$4 PROC
mov	ecx, DWORD PTR $T6[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z$5 PROC
lea	ecx, DWORD PTR __First$8[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z$6 PROC
mov	ecx, DWORD PTR $T4[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z$7 PROC
lea	ecx, DWORD PTR __Last$7[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z$8 PROC
mov	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z$9 PROC
mov	eax, DWORD PTR $T11[ebp]
and	eax, 4
je	$LN25@erase
and	DWORD PTR $T11[ebp], -5			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-136]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 24					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T3[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	eax, DWORD PTR _this$[ebp]
jne	SHORT $LN1@erase
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Where$[ebp+8]
cmp	ecx, DWORD PTR [eax+4]
jb	SHORT $LN1@erase
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __Where$[ebp+8]
ja	SHORT $LN2@erase
push	1442					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	ecx, DWORD PTR __Where$[ebp+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR __Where$[ebp+8]
add	ecx, 36					
push	ecx
call	??$_Move@PAUFoundInfo@@PAU1@@std@@YAPAUFoundInfo@@PAU1@00@Z 
add	esp, 12					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
sub	edx, 36					
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXPAUFoundInfo@@0@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXPAUFoundInfo@@0@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
sub	ecx, 36					
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], ecx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	eax, DWORD PTR __Where$[ebp]
push	eax
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv188[ebp], eax
mov	ecx, DWORD PTR tv188[ebp]
mov	DWORD PTR tv181[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Make_iter@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z 
mov	DWORD PTR tv182[ebp], eax
mov	eax, DWORD PTR $T3[ebp]
or	eax, 1
mov	DWORD PTR $T3[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z$0 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z$1 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z$2 PROC
mov	eax, DWORD PTR $T3[ebp]
and	eax, 1
je	$LN8@erase
and	DWORD PTR $T3[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-28]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?push_back@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXABUFoundInfo@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	??$addressof@$$CBUFoundInfo@@@std@@YAPBUFoundInfo@@ABU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Inside@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBE_NPBUFoundInfo@@@Z 
movzx	ecx, al
test	ecx, ecx
je	$LN4@push_back
mov	edx, DWORD PTR __Val$[ebp]
push	edx
call	??$addressof@$$CBUFoundInfo@@@std@@YAPBUFoundInfo@@ABU1@@Z 
add	esp, 4
mov	ecx, DWORD PTR _this$[ebp]
sub	eax, DWORD PTR [ecx+4]
cdq
mov	ecx, 36					
idiv	ecx
mov	DWORD PTR __Idx$1[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+8]
cmp	ecx, DWORD PTR [eax+12]
jne	SHORT $LN3@push_back
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reserve@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXI@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXPAUFoundInfo@@0@Z 
imul	eax, DWORD PTR __Idx$1[ebp], 36
mov	ecx, DWORD PTR _this$[ebp]
add	eax, DWORD PTR [ecx+4]
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@XZ 
mov	ecx, eax
call	??$construct@UFoundInfo@@AAU1@@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@AAU2@@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 36					
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], eax
jmp	SHORT $LN5@push_back
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+8]
cmp	ecx, DWORD PTR [eax+12]
jne	SHORT $LN1@push_back
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reserve@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXI@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXPAUFoundInfo@@0@Z 
mov	eax, DWORD PTR __Val$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@XZ 
mov	ecx, eax
call	??$construct@UFoundInfo@@ABU1@@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@ABU2@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
add	edx, 36					
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], edx
mov	esp, ebp
pop	ebp
ret	4
ENDP
?at@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEAAUFoundInfo@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Pos$[ebp]
ja	SHORT $LN1@at
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xran@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IBEXXZ 
imul	eax, DWORD PTR __Pos$[ebp], 36
mov	ecx, DWORD PTR _this$[ebp]
add	eax, DWORD PTR [ecx+4]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?max_size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@XZ 
mov	ecx, eax
call	?max_size@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
sub	eax, DWORD PTR [ecx+4]
cdq
mov	ecx, 36					
idiv	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Make_iter@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Make_iter@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR __Where$[ebp+8]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@PAUFoundInfo@@PBU_Container_base12@1@@Z 
mov	edx, DWORD PTR $T2[ebp]
or	edx, 1
mov	DWORD PTR $T2[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$?_Make_iter@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z$0 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?_Make_iter@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z$1 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN5@Make_iter
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?_Make_iter@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Make_iter@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?end@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?end@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@PAUFoundInfo@@PBU_Container_base12@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?end@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@end
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?end@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?end@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?begin@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?begin@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@PAUFoundInfo@@PBU_Container_base12@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?begin@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@begin
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?begin@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Unused_capacity@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+8]
cdq
mov	ecx, 36					
idiv	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
?capacity@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+4]
cdq
mov	ecx, 36					
idiv	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@IAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$allocator@UFoundInfo@@@std@@QAE@XZ	
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UFoundInfo@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
push	1
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??0_Container_proxy@std@@QAE@XZ		
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UFoundInfo@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UFoundInfo@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UFoundInfo@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UFoundInfo@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@@std@@QAE@ABV?$allocator@UFoundInfo@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Container_base12@std@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??1?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Container_base12@std@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??0?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?max_size@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@V?$allocator@UFoundInfo@@@std@@@std@@SAIABV?$allocator@UFoundInfo@@@2@@Z 
add	esp, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEXPAUFoundInfo@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@I@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAEPAUFoundInfo@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@UFoundInfo@@@std@@QAEPAUFoundInfo@@I@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@UFoundInfo@@@std@@QAE@XZ	
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@V?$allocator@UFoundInfo@@@std@@@std@@SAIABV?$allocator@UFoundInfo@@@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$allocator@UFoundInfo@@@std@@QBEIXZ 
pop	ebp
ret	0
ENDP
?max_size@?$allocator@UFoundInfo@@@std@@QBEIXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, 119304647				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?construct@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@ABU3@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?construct@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@ABU3@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	36					
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR __Val$[ebp]
push	ecx
mov	ecx, DWORD PTR $T3[ebp]
call	??0FoundInfo@@QAE@ABU0@@Z
mov	DWORD PTR tv74[ebp], eax
jmp	SHORT $LN4@construct
mov	DWORD PTR tv74[ebp], 0
mov	edx, DWORD PTR tv74[ebp]
mov	DWORD PTR $T2[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?construct@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@ABU3@@Z$0 PROC
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX0@Z				
add	esp, 8
ret	0
ENDP
__ehhandler$?construct@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@ABU3@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?construct@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@ABU3@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?allocate@?$allocator@UFoundInfo@@@std@@QAEPAUFoundInfo@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@UFoundInfo@@@std@@YAPAUFoundInfo@@IPAU1@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@UFoundInfo@@@std@@QAEXPAUFoundInfo@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@UFoundInfo@@@std@@QAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?notify@Finder@@IAE_NPAUSCNotification@@@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _notification$[ebp]
mov	ecx, DWORD PTR [eax+8]
mov	DWORD PTR tv66[ebp], ecx
cmp	DWORD PTR tv66[ebp], 2006		
je	SHORT $LN4@notify
cmp	DWORD PTR tv66[ebp], 2010		
je	SHORT $LN6@notify
cmp	DWORD PTR tv66[ebp], 2013		
je	$LN2@notify
jmp	$LN7@notify
mov	edx, DWORD PTR _notification$[ebp]
mov	eax, DWORD PTR [edx+64]
cmp	eax, DWORD PTR ?_SC_MARGE_FOLDER@ScintillaEditView@@2HB 
jne	SHORT $LN5@notify
mov	ecx, DWORD PTR _notification$[ebp]
mov	edx, DWORD PTR [ecx+20]
push	edx
mov	eax, DWORD PTR _notification$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?marginClick@ScintillaEditView@@QAEXHH@Z 
jmp	SHORT $LN7@notify
mov	BYTE PTR ?isDoubleClicked@?1??notify@Finder@@IAE_NPAUSCNotification@@@Z@4_NA, 1
mov	edx, DWORD PTR _notification$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR _pos$1[ebp], eax
cmp	DWORD PTR _pos$1[ebp], -1
jne	SHORT $LN3@notify
push	0
mov	ecx, DWORD PTR _notification$[ebp]
mov	edx, DWORD PTR [ecx+52]
push	edx
push	2136					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _pos$1[ebp], eax
mov	eax, DWORD PTR _pos$1[ebp]
push	eax
mov	ecx, DWORD PTR _pos$1[ebp]
push	ecx
push	2160					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	ecx, DWORD PTR _this$[ebp]
call	?GotoFoundLine@Finder@@QAEXXZ		
jmp	SHORT $LN7@notify
movzx	edx, BYTE PTR ?isDoubleClicked@?1??notify@Finder@@IAE_NPAUSCNotification@@@Z@4_NA
test	edx, edx
je	SHORT $LN7@notify
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+108]
mov	ecx, DWORD PTR [ecx]
call	?getFocus@Window@@QBEXXZ		
mov	BYTE PTR ?isDoubleClicked@?1??notify@Finder@@IAE_NPAUSCNotification@@@Z@4_NA, 0
xor	al, al
mov	esp, ebp
pop	ebp
ret	4
ENDP
?run_dlgProc@Finder@@MAGHIIJ@Z PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?run_dlgProc@Finder@@MAGHIIJ@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 624				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	eax, DWORD PTR _message$[ebp]
mov	DWORD PTR tv64[ebp], eax
cmp	DWORD PTR tv64[ebp], 123		
ja	SHORT $LN20@run_dlgPro
cmp	DWORD PTR tv64[ebp], 123		
je	$LN5@run_dlgPro
cmp	DWORD PTR tv64[ebp], 5
je	$LN3@run_dlgPro
cmp	DWORD PTR tv64[ebp], 78			
je	$LN2@run_dlgPro
jmp	$LN1@run_dlgPro
cmp	DWORD PTR tv64[ebp], 273		
je	SHORT $LN15@run_dlgPro
jmp	$LN1@run_dlgPro
mov	ecx, DWORD PTR _wParam$[ebp]
mov	DWORD PTR tv65[ebp], ecx
mov	edx, DWORD PTR tv65[ebp]
sub	edx, 1032				
mov	DWORD PTR tv65[ebp], edx
cmp	DWORD PTR tv65[ebp], 26			
ja	$LN6@run_dlgPro
mov	eax, DWORD PTR tv65[ebp]
movzx	ecx, BYTE PTR $LN31@run_dlgPro[eax]
jmp	DWORD PTR $LN33@run_dlgPro[ecx*4]
push	0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?foldAll@ScintillaEditView@@QAEX_N@Z	
mov	eax, 1
jmp	$LN18@run_dlgPro
push	1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?foldAll@ScintillaEditView@@QAEX_N@Z	
mov	eax, 1
jmp	$LN18@run_dlgPro
mov	ecx, DWORD PTR _this$[ebp]
call	?copy@Finder@@QAEXXZ			
mov	eax, 1
jmp	$LN18@run_dlgPro
push	0
push	0
push	2013					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	eax, 1
jmp	$LN18@run_dlgPro
mov	ecx, DWORD PTR _this$[ebp]
call	?removeAll@Finder@@QAEXXZ		
mov	eax, 1
jmp	$LN18@run_dlgPro
mov	ecx, DWORD PTR _this$[ebp]
call	?openAll@Finder@@QAEXXZ			
mov	eax, 1
jmp	$LN18@run_dlgPro
xor	eax, eax
jmp	$LN18@run_dlgPro
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?getHSelf@Window@@QBEPAUHWND__@@XZ	
cmp	DWORD PTR _wParam$[ebp], eax
jne	$LN4@run_dlgPro
lea	edx, DWORD PTR _p$3[ebp]
push	edx
call	DWORD PTR __imp__GetCursorPos@4
lea	ecx, DWORD PTR _scintillaContextmenu$2[ebp]
call	??0ContextMenu@@QAE@XZ			
mov	DWORD PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _tmp$5[ebp]
call	??0?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	0
push	OFFSET $SG173863
push	1032					
lea	ecx, DWORD PTR $T13[ebp]
call	??0MenuItemUnit@@QAE@KPB_W0@Z		
mov	DWORD PTR tv95[ebp], eax
mov	eax, DWORD PTR tv95[ebp]
mov	DWORD PTR tv259[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR tv259[ebp]
push	ecx
lea	ecx, DWORD PTR _tmp$5[ebp]
call	?push_back@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEX$$QAUMenuItemUnit@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T13[ebp]
call	??1MenuItemUnit@@QAE@XZ
push	0
push	OFFSET $SG173865
push	1033					
lea	ecx, DWORD PTR $T12[ebp]
call	??0MenuItemUnit@@QAE@KPB_W0@Z		
mov	DWORD PTR tv92[ebp], eax
mov	edx, DWORD PTR tv92[ebp]
mov	DWORD PTR tv261[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	eax, DWORD PTR tv261[ebp]
push	eax
lea	ecx, DWORD PTR _tmp$5[ebp]
call	?push_back@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEX$$QAUMenuItemUnit@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T12[ebp]
call	??1MenuItemUnit@@QAE@XZ
push	0
push	OFFSET $SG173867
push	0
lea	ecx, DWORD PTR $T11[ebp]
call	??0MenuItemUnit@@QAE@KPB_W0@Z		
mov	DWORD PTR tv276[ebp], eax
mov	ecx, DWORD PTR tv276[ebp]
mov	DWORD PTR tv263[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 4
mov	edx, DWORD PTR tv263[ebp]
push	edx
lea	ecx, DWORD PTR _tmp$5[ebp]
call	?push_back@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEX$$QAUMenuItemUnit@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T11[ebp]
call	??1MenuItemUnit@@QAE@XZ
push	0
push	OFFSET $SG173869
push	1040					
lea	ecx, DWORD PTR $T6[ebp]
call	??0MenuItemUnit@@QAE@KPB_W0@Z		
mov	DWORD PTR tv277[ebp], eax
mov	eax, DWORD PTR tv277[ebp]
mov	DWORD PTR tv265[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 5
mov	ecx, DWORD PTR tv265[ebp]
push	ecx
lea	ecx, DWORD PTR _tmp$5[ebp]
call	?push_back@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEX$$QAUMenuItemUnit@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T6[ebp]
call	??1MenuItemUnit@@QAE@XZ
push	0
push	OFFSET $SG173871
push	1041					
lea	ecx, DWORD PTR $T9[ebp]
call	??0MenuItemUnit@@QAE@KPB_W0@Z		
mov	DWORD PTR tv278[ebp], eax
mov	edx, DWORD PTR tv278[ebp]
mov	DWORD PTR tv267[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 6
mov	eax, DWORD PTR tv267[ebp]
push	eax
lea	ecx, DWORD PTR _tmp$5[ebp]
call	?push_back@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEX$$QAUMenuItemUnit@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T9[ebp]
call	??1MenuItemUnit@@QAE@XZ
push	0
push	OFFSET $SG173873
push	1051					
lea	ecx, DWORD PTR $T10[ebp]
call	??0MenuItemUnit@@QAE@KPB_W0@Z		
mov	DWORD PTR tv279[ebp], eax
mov	ecx, DWORD PTR tv279[ebp]
mov	DWORD PTR tv269[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 7
mov	edx, DWORD PTR tv269[ebp]
push	edx
lea	ecx, DWORD PTR _tmp$5[ebp]
call	?push_back@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEX$$QAUMenuItemUnit@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T10[ebp]
call	??1MenuItemUnit@@QAE@XZ
push	0
push	OFFSET $SG173875
push	0
lea	ecx, DWORD PTR $T8[ebp]
call	??0MenuItemUnit@@QAE@KPB_W0@Z		
mov	DWORD PTR tv280[ebp], eax
mov	eax, DWORD PTR tv280[ebp]
mov	DWORD PTR tv271[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 8
mov	ecx, DWORD PTR tv271[ebp]
push	ecx
lea	ecx, DWORD PTR _tmp$5[ebp]
call	?push_back@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEX$$QAUMenuItemUnit@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T8[ebp]
call	??1MenuItemUnit@@QAE@XZ
push	0
push	OFFSET $SG173877
push	1058					
lea	ecx, DWORD PTR $T7[ebp]
call	??0MenuItemUnit@@QAE@KPB_W0@Z		
mov	DWORD PTR tv281[ebp], eax
mov	edx, DWORD PTR tv281[ebp]
mov	DWORD PTR tv273[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 9
mov	eax, DWORD PTR tv273[ebp]
push	eax
lea	ecx, DWORD PTR _tmp$5[ebp]
call	?push_back@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEX$$QAUMenuItemUnit@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T7[ebp]
call	??1MenuItemUnit@@QAE@XZ
push	0
lea	ecx, DWORD PTR _tmp$5[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
lea	ecx, DWORD PTR _scintillaContextmenu$2[ebp]
call	?create@ContextMenu@@QAEXPAUHWND__@@ABV?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAUHMENU__@@@Z 
lea	ecx, DWORD PTR _p$3[ebp]
push	ecx
lea	ecx, DWORD PTR _scintillaContextmenu$2[ebp]
call	?display@ContextMenu@@QBEXABUtagPOINT@@@Z 
mov	DWORD PTR $T4[ebp], 1
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _tmp$5[ebp]
call	??1?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _scintillaContextmenu$2[ebp]
call	??1ContextMenu@@QAE@XZ			
mov	eax, DWORD PTR $T4[ebp]
jmp	SHORT $LN18@run_dlgPro
mov	edx, DWORD PTR _lParam$[ebp]
push	edx
mov	eax, DWORD PTR _wParam$[ebp]
push	eax
mov	ecx, DWORD PTR _message$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__DefWindowProcW@16
jmp	SHORT $LN18@run_dlgPro
lea	ecx, DWORD PTR _rc$14[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax+28]
call	edx
lea	eax, DWORD PTR _rc$14[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+192]
mov	edx, DWORD PTR [eax+16]
call	edx
jmp	SHORT $LN16@run_dlgPro
mov	eax, DWORD PTR _lParam$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?notify@Finder@@IAE_NPAUSCNotification@@@Z 
xor	eax, eax
jmp	SHORT $LN18@run_dlgPro
mov	ecx, DWORD PTR _lParam$[ebp]
push	ecx
mov	edx, DWORD PTR _wParam$[ebp]
push	edx
mov	eax, DWORD PTR _message$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	?run_dlgProc@DockingDlgInterface@@MAGHIIJ@Z 
jmp	SHORT $LN18@run_dlgPro
xor	eax, eax
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	16					
npad	2
DD	$LN12@run_dlgPro
DD	$LN11@run_dlgPro
DD	$LN10@run_dlgPro
DD	$LN9@run_dlgPro
DD	$LN8@run_dlgPro
DD	$LN7@run_dlgPro
DD	$LN6@run_dlgPro
DB	0
DB	1
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	2
DB	3
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	4
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	5
ENDP
__unwindfunclet$?run_dlgProc@Finder@@MAGHIIJ@Z$0 PROC
lea	ecx, DWORD PTR _scintillaContextmenu$2[ebp]
jmp	??1ContextMenu@@QAE@XZ			
ENDP
__unwindfunclet$?run_dlgProc@Finder@@MAGHIIJ@Z$1 PROC
lea	ecx, DWORD PTR _tmp$5[ebp]
jmp	??1?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ 
ENDP
__unwindfunclet$?run_dlgProc@Finder@@MAGHIIJ@Z$2 PROC
lea	ecx, DWORD PTR $T13[ebp]
jmp	??1MenuItemUnit@@QAE@XZ
ENDP
__unwindfunclet$?run_dlgProc@Finder@@MAGHIIJ@Z$3 PROC
lea	ecx, DWORD PTR $T12[ebp]
jmp	??1MenuItemUnit@@QAE@XZ
ENDP
__unwindfunclet$?run_dlgProc@Finder@@MAGHIIJ@Z$4 PROC
lea	ecx, DWORD PTR $T11[ebp]
jmp	??1MenuItemUnit@@QAE@XZ
ENDP
__unwindfunclet$?run_dlgProc@Finder@@MAGHIIJ@Z$5 PROC
lea	ecx, DWORD PTR $T6[ebp]
jmp	??1MenuItemUnit@@QAE@XZ
ENDP
__unwindfunclet$?run_dlgProc@Finder@@MAGHIIJ@Z$6 PROC
lea	ecx, DWORD PTR $T9[ebp]
jmp	??1MenuItemUnit@@QAE@XZ
ENDP
__unwindfunclet$?run_dlgProc@Finder@@MAGHIIJ@Z$7 PROC
lea	ecx, DWORD PTR $T10[ebp]
jmp	??1MenuItemUnit@@QAE@XZ
ENDP
__unwindfunclet$?run_dlgProc@Finder@@MAGHIIJ@Z$8 PROC
lea	ecx, DWORD PTR $T8[ebp]
jmp	??1MenuItemUnit@@QAE@XZ
ENDP
__unwindfunclet$?run_dlgProc@Finder@@MAGHIIJ@Z$9 PROC
lea	ecx, DWORD PTR $T7[ebp]
jmp	??1MenuItemUnit@@QAE@XZ
ENDP
__ehhandler$?run_dlgProc@Finder@@MAGHIIJ@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-628]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?run_dlgProc@Finder@@MAGHIIJ@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?DeleteResult@Finder@@QAEXXZ PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?DeleteResult@Finder@@QAEXXZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 404				
push	esi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	0
push	0
push	2008					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _currentPos$[ebp], eax
push	0
mov	eax, DWORD PTR _currentPos$[ebp]
push	eax
push	2166					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _lno$[ebp], eax
push	0
mov	ecx, DWORD PTR _lno$[ebp]
push	ecx
push	2167					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _start$[ebp], eax
push	0
mov	edx, DWORD PTR _lno$[ebp]
push	edx
push	2136					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _end$[ebp], eax
mov	eax, DWORD PTR _start$[ebp]
add	eax, 2
cmp	eax, DWORD PTR _end$[ebp]
jl	SHORT $LN3@DeleteResu
jmp	$LN4@DeleteResu
push	0
push	47					
push	150					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?setLexer@ScintillaEditView@@IAEXHW4LangType@@H@Z 
push	0
mov	ecx, DWORD PTR _lno$[ebp]
push	ecx
push	2223					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
and	eax, 8192				
je	$LN2@DeleteResu
push	-1
mov	edx, DWORD PTR _lno$[ebp]
push	edx
push	2224					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
add	eax, 1
mov	DWORD PTR _endline$25[ebp], eax
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+144]
call	?size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
cmp	DWORD PTR _endline$25[ebp], eax
jbe	SHORT $LN6@DeleteResu
push	487					
push	OFFSET $SG171127
push	OFFSET $SG171128
call	__wassert
add	esp, 12					
mov	edx, DWORD PTR _endline$25[ebp]
push	edx
lea	eax, DWORD PTR $T13[ebp]
push	eax
lea	ecx, DWORD PTR $T7[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+144]
call	?begin@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv462[ebp], eax
mov	eax, DWORD PTR tv462[ebp]
mov	DWORD PTR tv417[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv417[ebp]
call	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE?AV01@H@Z 
mov	DWORD PTR tv463[ebp], eax
mov	ecx, DWORD PTR tv463[ebp]
mov	DWORD PTR tv419[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 1
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T23[ebp], esp
mov	edx, DWORD PTR tv419[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv464[ebp], eax
mov	eax, DWORD PTR tv464[ebp]
mov	DWORD PTR tv421[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR _lno$[ebp]
push	ecx
lea	edx, DWORD PTR $T15[ebp]
push	edx
lea	eax, DWORD PTR $T5[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+144]
call	?begin@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv465[ebp], eax
mov	edx, DWORD PTR tv465[ebp]
mov	DWORD PTR tv424[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	ecx, DWORD PTR tv424[ebp]
call	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE?AV01@H@Z 
mov	DWORD PTR tv466[ebp], eax
mov	eax, DWORD PTR tv466[ebp]
mov	DWORD PTR tv426[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 4
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T18[ebp], esp
mov	edx, DWORD PTR tv426[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv467[ebp], eax
mov	eax, DWORD PTR tv467[ebp]
mov	DWORD PTR tv429[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR $T17[ebp]
push	ecx
mov	BYTE PTR __$EHRec$[ebp+8], 7
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+144]
call	?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@0@Z 
mov	DWORD PTR tv422[ebp], eax
lea	ecx, DWORD PTR $T17[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 6
lea	ecx, DWORD PTR $T15[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T5[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T13[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T7[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR _endline$25[ebp]
push	eax
lea	ecx, DWORD PTR $T16[ebp]
push	ecx
lea	edx, DWORD PTR $T14[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+180]
call	?begin@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv469[ebp], eax
mov	ecx, DWORD PTR tv469[ebp]
mov	DWORD PTR tv432[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 8
mov	ecx, DWORD PTR tv432[ebp]
call	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE?AV01@H@Z 
mov	DWORD PTR tv470[ebp], eax
mov	edx, DWORD PTR tv470[ebp]
mov	DWORD PTR tv434[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 9
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T21[ebp], esp
mov	eax, DWORD PTR tv434[ebp]
push	eax
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv471[ebp], eax
mov	ecx, DWORD PTR tv471[ebp]
mov	DWORD PTR tv436[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 10		
mov	edx, DWORD PTR _lno$[ebp]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
lea	ecx, DWORD PTR $T9[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+180]
call	?begin@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv472[ebp], eax
mov	eax, DWORD PTR tv472[ebp]
mov	DWORD PTR tv439[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 11		
mov	ecx, DWORD PTR tv439[ebp]
call	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE?AV01@H@Z 
mov	DWORD PTR tv473[ebp], eax
mov	ecx, DWORD PTR tv473[ebp]
mov	DWORD PTR tv441[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 12		
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T20[ebp], esp
mov	edx, DWORD PTR tv441[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv474[ebp], eax
mov	eax, DWORD PTR tv474[ebp]
mov	DWORD PTR tv444[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 13		
lea	ecx, DWORD PTR $T11[ebp]
push	ecx
mov	BYTE PTR __$EHRec$[ebp+8], 15		
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+180]
call	?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@0@Z 
mov	DWORD PTR tv437[ebp], eax
lea	ecx, DWORD PTR $T11[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 14		
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 9
lea	ecx, DWORD PTR $T9[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 8
lea	ecx, DWORD PTR $T16[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T14[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
push	0
mov	eax, DWORD PTR _endline$25[ebp]
push	eax
push	2167					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _end$24[ebp], eax
mov	ecx, DWORD PTR _end$24[ebp]
push	ecx
mov	edx, DWORD PTR _start$[ebp]
push	edx
push	2160					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
push	0
push	0
push	2180					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
jmp	$LN1@DeleteResu
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+144]
call	?size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
cmp	DWORD PTR _lno$[ebp], eax
jb	SHORT $LN7@DeleteResu
push	500					
push	OFFSET $SG171285
push	OFFSET $SG171286
call	__wassert
add	esp, 12					
mov	edx, DWORD PTR _lno$[ebp]
push	edx
lea	eax, DWORD PTR $T10[ebp]
push	eax
lea	ecx, DWORD PTR $T8[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+144]
call	?begin@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv476[ebp], eax
mov	eax, DWORD PTR tv476[ebp]
mov	DWORD PTR tv447[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 16		
mov	ecx, DWORD PTR tv447[ebp]
call	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE?AV01@H@Z 
mov	DWORD PTR tv477[ebp], eax
mov	ecx, DWORD PTR tv477[ebp]
mov	DWORD PTR tv449[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 17		
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T22[ebp], esp
mov	edx, DWORD PTR tv449[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv478[ebp], eax
mov	eax, DWORD PTR tv478[ebp]
mov	DWORD PTR tv451[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 18		
lea	ecx, DWORD PTR $T12[ebp]
push	ecx
mov	BYTE PTR __$EHRec$[ebp+8], 17		
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+144]
call	?erase@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@@Z 
mov	DWORD PTR tv452[ebp], eax
lea	ecx, DWORD PTR $T12[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 16		
lea	ecx, DWORD PTR $T10[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T8[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR _lno$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+180]
call	?begin@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv512[ebp], eax
mov	ecx, DWORD PTR tv512[ebp]
mov	DWORD PTR tv455[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 19		
mov	ecx, DWORD PTR tv455[ebp]
call	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QBE?AV01@H@Z 
mov	DWORD PTR tv513[ebp], eax
mov	edx, DWORD PTR tv513[ebp]
mov	DWORD PTR tv457[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 20		
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T19[ebp], esp
mov	eax, DWORD PTR tv457[ebp]
push	eax
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv514[ebp], eax
mov	ecx, DWORD PTR tv514[ebp]
mov	DWORD PTR tv459[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 21		
lea	edx, DWORD PTR $T6[ebp]
push	edx
mov	BYTE PTR __$EHRec$[ebp+8], 20		
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+180]
call	?erase@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@@Z 
mov	DWORD PTR tv460[ebp], eax
lea	ecx, DWORD PTR $T6[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 19		
lea	ecx, DWORD PTR $T4[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
push	0
push	0
push	2338					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+180]
call	?size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+184], eax
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+144]
call	?size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
mov	esi, eax
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+180]
call	?size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
cmp	esi, eax
je	SHORT $LN8@DeleteResu
push	511					
push	OFFSET $SG171296
push	OFFSET $SG171297
call	__wassert
add	esp, 12					
push	0
push	0
push	2154					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	esi, eax
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+144]
call	?size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
add	eax, 1
cmp	esi, eax
je	SHORT $LN4@DeleteResu
push	512					
push	OFFSET $SG171299
push	OFFSET $SG171300
call	__wassert
add	esp, 12					
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	esi
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$0 PROC
lea	ecx, DWORD PTR $T7[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$1 PROC
lea	ecx, DWORD PTR $T13[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$2 PROC
mov	ecx, DWORD PTR $T23[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$3 PROC
lea	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$4 PROC
lea	ecx, DWORD PTR $T15[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$5 PROC
mov	ecx, DWORD PTR $T18[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$7 PROC
lea	ecx, DWORD PTR $T14[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$8 PROC
lea	ecx, DWORD PTR $T16[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$9 PROC
mov	ecx, DWORD PTR $T21[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$10 PROC
lea	ecx, DWORD PTR $T9[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$11 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$12 PROC
mov	ecx, DWORD PTR $T20[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$14 PROC
lea	ecx, DWORD PTR $T8[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$15 PROC
lea	ecx, DWORD PTR $T10[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$16 PROC
mov	ecx, DWORD PTR $T22[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$18 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$19 PROC
lea	ecx, DWORD PTR $T4[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?DeleteResult@Finder@@QAEXXZ$20 PROC
mov	ecx, DWORD PTR $T19[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?DeleteResult@Finder@@QAEXXZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-412]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?DeleteResult@Finder@@QAEXXZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?GotoFoundLine@Finder@@QAEXXZ PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?GotoFoundLine@Finder@@QAEXXZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 100				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	0
push	0
push	2008					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _currentPos$[ebp], eax
push	0
mov	eax, DWORD PTR _currentPos$[ebp]
push	eax
push	2166					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _lno$[ebp], eax
push	0
mov	ecx, DWORD PTR _lno$[ebp]
push	ecx
push	2167					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _start$[ebp], eax
push	0
mov	edx, DWORD PTR _lno$[ebp]
push	edx
push	2136					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _end$[ebp], eax
mov	eax, DWORD PTR _start$[ebp]
add	eax, 2
cmp	eax, DWORD PTR _end$[ebp]
jl	SHORT $LN2@GotoFoundL
jmp	$LN3@GotoFoundL
push	0
mov	ecx, DWORD PTR _lno$[ebp]
push	ecx
push	2223					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
and	eax, 8192				
je	SHORT $LN1@GotoFoundL
push	0
mov	edx, DWORD PTR _lno$[ebp]
push	edx
push	2231					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
jmp	$LN3@GotoFoundL
mov	eax, DWORD PTR _lno$[ebp]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+144]
call	?begin@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv201[ebp], eax
mov	ecx, DWORD PTR tv201[ebp]
mov	DWORD PTR tv197[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR tv197[ebp]
call	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBE?AV01@H@Z 
mov	DWORD PTR tv202[ebp], eax
mov	edx, DWORD PTR tv202[ebp]
mov	DWORD PTR tv199[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR tv199[ebp]
call	??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QBEAAUFoundInfo@@XZ 
push	eax
lea	ecx, DWORD PTR _fInfo$[ebp]
call	??0FoundInfo@@QAE@ABU0@@Z
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 4
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
lea	ecx, DWORD PTR _fInfo$[ebp+8]
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
push	0
push	3032					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	DWORD PTR __imp__GetParent@4
push	eax
call	DWORD PTR __imp__SendMessageW@16
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+108]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _fInfo$[ebp+4]
push	edx
mov	eax, DWORD PTR _fInfo$[ebp]
push	eax
call	?displaySectionCentered@Searching@@SAXHHPAVScintillaEditView@@_N@Z 
add	esp, 16					
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderStyle@Finder@@QAEXXZ		
push	1
push	5
push	2057					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	255					
mov	ecx, DWORD PTR _start$[ebp]
push	ecx
push	2032					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	5
mov	edx, DWORD PTR _end$[ebp]
sub	edx, DWORD PTR _start$[ebp]
add	edx, 2
push	edx
push	2033					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	eax, DWORD PTR _end$[ebp]
add	eax, 1
push	eax
mov	ecx, DWORD PTR _start$[ebp]
push	ecx
push	4003					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _fInfo$[ebp]
call	??1FoundInfo@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$?GotoFoundLine@Finder@@QAEXXZ$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?GotoFoundLine@Finder@@QAEXXZ$1 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?GotoFoundLine@Finder@@QAEXXZ$2 PROC
lea	ecx, DWORD PTR _fInfo$[ebp]
jmp	??1FoundInfo@@QAE@XZ
ENDP
__ehhandler$?GotoFoundLine@Finder@@QAEXXZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-104]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?GotoFoundLine@Finder@@QAEXXZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?gotoNextFoundResult@Finder@@QAEXH@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 48					
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _direction$[ebp], 0
jge	SHORT $LN18@gotoNextFo
mov	DWORD PTR tv65[ebp], -1
jmp	SHORT $LN19@gotoNextFo
mov	DWORD PTR tv65[ebp], 1
mov	eax, DWORD PTR tv65[ebp]
mov	DWORD PTR _increment$[ebp], eax
push	0
push	0
push	2008					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _currentPos$[ebp], eax
push	0
mov	ecx, DWORD PTR _currentPos$[ebp]
push	ecx
push	2166					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _lno$[ebp], eax
push	0
push	0
push	2154					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _total_lines$[ebp], eax
cmp	DWORD PTR _total_lines$[ebp], 1
jg	SHORT $LN15@gotoNextFo
jmp	$LN16@gotoNextFo
mov	edx, DWORD PTR _total_lines$[ebp]
sub	edx, 1
cmp	DWORD PTR _lno$[ebp], edx
jne	SHORT $LN14@gotoNextFo
mov	eax, DWORD PTR _lno$[ebp]
sub	eax, 1
mov	DWORD PTR _lno$[ebp], eax
mov	ecx, DWORD PTR _lno$[ebp]
mov	DWORD PTR _init_lno$[ebp], ecx
push	1025					
mov	edx, DWORD PTR _lno$[ebp]
push	edx
push	2224					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _max_lno$[ebp], eax
mov	eax, DWORD PTR _total_lines$[ebp]
sub	eax, 2
cmp	DWORD PTR _max_lno$[ebp], eax
jle	SHORT $LN20@gotoNextFo
push	528					
push	OFFSET $SG171332
push	OFFSET $SG171333
call	__wassert
add	esp, 12					
push	0
mov	edx, DWORD PTR _lno$[ebp]
push	edx
push	2223					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
and	eax, 4095				
mov	DWORD PTR _level$[ebp], eax
mov	eax, DWORD PTR _lno$[ebp]
mov	DWORD PTR _min_lno$[ebp], eax
mov	ecx, DWORD PTR _level$[ebp]
mov	DWORD PTR tv141[ebp], ecx
mov	edx, DWORD PTR _level$[ebp]
sub	edx, 1
mov	DWORD PTR _level$[ebp], edx
cmp	DWORD PTR tv141[ebp], 1026		
jl	SHORT $LN12@gotoNextFo
push	0
mov	eax, DWORD PTR _min_lno$[ebp]
push	eax
push	2225					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _min_lno$[ebp], eax
cmp	DWORD PTR _min_lno$[ebp], 0
jge	SHORT $LN21@gotoNextFo
push	536					
push	OFFSET $SG171340
push	OFFSET $SG171341
call	__wassert
add	esp, 12					
jmp	SHORT $LN13@gotoNextFo
cmp	DWORD PTR _min_lno$[ebp], 0
jge	SHORT $LN11@gotoNextFo
mov	edx, DWORD PTR _lno$[ebp]
mov	DWORD PTR _min_lno$[ebp], edx
mov	eax, DWORD PTR _min_lno$[ebp]
cmp	eax, DWORD PTR _max_lno$[ebp]
jle	SHORT $LN22@gotoNextFo
push	541					
push	OFFSET $SG171344
push	OFFSET $SG171345
call	__wassert
add	esp, 12					
mov	edx, DWORD PTR _lno$[ebp]
add	edx, DWORD PTR _increment$[ebp]
mov	DWORD PTR _lno$[ebp], edx
mov	eax, DWORD PTR _lno$[ebp]
cmp	eax, DWORD PTR _max_lno$[ebp]
jle	SHORT $LN10@gotoNextFo
mov	ecx, DWORD PTR _min_lno$[ebp]
mov	DWORD PTR _lno$[ebp], ecx
jmp	SHORT $LN7@gotoNextFo
mov	edx, DWORD PTR _lno$[ebp]
cmp	edx, DWORD PTR _min_lno$[ebp]
jge	SHORT $LN7@gotoNextFo
mov	eax, DWORD PTR _max_lno$[ebp]
mov	DWORD PTR _lno$[ebp], eax
push	0
mov	ecx, DWORD PTR _lno$[ebp]
push	ecx
push	2223					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
and	eax, 8192				
je	SHORT $LN6@gotoNextFo
mov	edx, DWORD PTR _lno$[ebp]
add	edx, DWORD PTR _increment$[ebp]
mov	DWORD PTR _lno$[ebp], edx
mov	eax, DWORD PTR _lno$[ebp]
cmp	eax, DWORD PTR _max_lno$[ebp]
jle	SHORT $LN5@gotoNextFo
mov	ecx, DWORD PTR _min_lno$[ebp]
mov	DWORD PTR _lno$[ebp], ecx
jmp	SHORT $LN4@gotoNextFo
mov	edx, DWORD PTR _lno$[ebp]
cmp	edx, DWORD PTR _min_lno$[ebp]
jge	SHORT $LN4@gotoNextFo
mov	eax, DWORD PTR _max_lno$[ebp]
mov	DWORD PTR _lno$[ebp], eax
mov	ecx, DWORD PTR _lno$[ebp]
cmp	ecx, DWORD PTR _init_lno$[ebp]
jne	SHORT $LN2@gotoNextFo
jmp	SHORT $LN6@gotoNextFo
jmp	SHORT $LN7@gotoNextFo
push	0
mov	edx, DWORD PTR _lno$[ebp]
push	edx
push	2223					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
and	eax, 8192				
jne	SHORT $LN16@gotoNextFo
push	0
mov	eax, DWORD PTR _lno$[ebp]
push	eax
push	2167					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _start$1[ebp], eax
mov	ecx, DWORD PTR _start$1[ebp]
push	ecx
mov	edx, DWORD PTR _start$1[ebp]
push	edx
push	2160					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
mov	eax, DWORD PTR _lno$[ebp]
push	eax
push	2232					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
push	0
push	2169					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	ecx, DWORD PTR _this$[ebp]
call	?GotoFoundLine@Finder@@QAEXXZ		
mov	esp, ebp
pop	ebp
ret	4
ENDP
?finishFilesSearch@Finder@@QAEXH@Z PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?finishFilesSearch@Finder@@QAEXH@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 164				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 112				
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+144], eax
jne	SHORT $LN3@finishFile
mov	edx, DWORD PTR _this$[ebp]
add	edx, 128				
mov	DWORD PTR tv69[ebp], edx
jmp	SHORT $LN4@finishFile
mov	eax, DWORD PTR _this$[ebp]
add	eax, 112				
mov	DWORD PTR tv69[ebp], eax
mov	ecx, DWORD PTR tv69[ebp]
mov	DWORD PTR __pOldFoundInfos$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
add	edx, 148				
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+180], edx
jne	SHORT $LN5@finishFile
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 164				
mov	DWORD PTR tv75[ebp], ecx
jmp	SHORT $LN6@finishFile
mov	edx, DWORD PTR _this$[ebp]
add	edx, 148				
mov	DWORD PTR tv75[ebp], edx
mov	eax, DWORD PTR tv75[ebp]
mov	DWORD PTR __pOldMarkings$[ebp], eax
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T10[ebp], esp
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+144]
call	?end@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv276[ebp], eax
mov	eax, DWORD PTR tv276[ebp]
mov	DWORD PTR tv253[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T7[ebp], esp
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+144]
call	?begin@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv277[ebp], eax
mov	eax, DWORD PTR tv277[ebp]
mov	DWORD PTR tv257[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR __pOldFoundInfos$[ebp]
call	?begin@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv278[ebp], eax
mov	edx, DWORD PTR tv278[ebp]
mov	DWORD PTR tv259[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 2
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T6[ebp], esp
mov	eax, DWORD PTR tv259[ebp]
push	eax
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv279[ebp], eax
mov	ecx, DWORD PTR tv279[ebp]
mov	DWORD PTR tv262[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	edx, DWORD PTR $T5[ebp]
push	edx
mov	BYTE PTR __$EHRec$[ebp+8], 4
mov	ecx, DWORD PTR __pOldFoundInfos$[ebp]
call	??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@1@V21@1@Z 
mov	DWORD PTR tv254[ebp], eax
lea	ecx, DWORD PTR $T5[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
sub	esp, 12					
mov	eax, esp
mov	DWORD PTR $T8[ebp], esp
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+180]
call	?end@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv281[ebp], eax
mov	edx, DWORD PTR tv281[ebp]
mov	DWORD PTR tv265[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 5
sub	esp, 12					
mov	eax, esp
mov	DWORD PTR $T11[ebp], esp
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+180]
call	?begin@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv282[ebp], eax
mov	edx, DWORD PTR tv282[ebp]
mov	DWORD PTR tv269[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 6
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR __pOldMarkings$[ebp]
call	?begin@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv283[ebp], eax
mov	ecx, DWORD PTR tv283[ebp]
mov	DWORD PTR tv271[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 7
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T9[ebp], esp
mov	edx, DWORD PTR tv271[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv284[ebp], eax
mov	eax, DWORD PTR tv284[ebp]
mov	DWORD PTR tv274[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 8
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	BYTE PTR __$EHRec$[ebp+8], 9
mov	ecx, DWORD PTR __pOldMarkings$[ebp]
call	??$insert@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@1@V21@1@Z 
mov	DWORD PTR tv266[ebp], eax
lea	ecx, DWORD PTR $T4[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+144]
call	?clear@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+180]
call	?clear@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __pOldFoundInfos$[ebp]
mov	DWORD PTR [ecx+144], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __pOldMarkings$[ebp]
mov	DWORD PTR [eax+180], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+180]
call	?size@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QBEIXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+184], eax
push	0
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+180]
call	??A?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEAAUSearchResultMarking@@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+188], eax
mov	edx, DWORD PTR _count$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?addSearchHitCount@Finder@@QAEXH@Z	
push	0
push	0
push	2160					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
push	150					
push	4001					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	OFFSET $SG173807
push	OFFSET $SG173808
push	4004					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?finishFilesSearch@Finder@@QAEXH@Z$0 PROC
mov	ecx, DWORD PTR $T10[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?finishFilesSearch@Finder@@QAEXH@Z$1 PROC
mov	ecx, DWORD PTR $T7[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?finishFilesSearch@Finder@@QAEXH@Z$2 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?finishFilesSearch@Finder@@QAEXH@Z$3 PROC
mov	ecx, DWORD PTR $T6[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@UFoundInfo@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?finishFilesSearch@Finder@@QAEXH@Z$5 PROC
mov	ecx, DWORD PTR $T8[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?finishFilesSearch@Finder@@QAEXH@Z$6 PROC
mov	ecx, DWORD PTR $T11[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?finishFilesSearch@Finder@@QAEXH@Z$7 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?finishFilesSearch@Finder@@QAEXH@Z$8 PROC
mov	ecx, DWORD PTR $T9[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@USearchResultMarking@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?finishFilesSearch@Finder@@QAEXH@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-168]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?finishFilesSearch@Finder@@QAEXH@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?beginNewFilesSearch@Finder@@QAEXXZ PROC		
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
push	0
push	0
push	2141					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	eax, DWORD PTR _this$[ebp]
add	eax, 112				
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+144], eax
jne	SHORT $LN3@beginNewFi
mov	edx, DWORD PTR _this$[ebp]
add	edx, 128				
mov	DWORD PTR tv75[ebp], edx
jmp	SHORT $LN4@beginNewFi
mov	eax, DWORD PTR _this$[ebp]
add	eax, 112				
mov	DWORD PTR tv75[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR tv75[ebp]
mov	DWORD PTR [ecx+144], edx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 148				
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+180], eax
jne	SHORT $LN5@beginNewFi
mov	edx, DWORD PTR _this$[ebp]
add	edx, 164				
mov	DWORD PTR tv82[ebp], edx
jmp	SHORT $LN6@beginNewFi
mov	eax, DWORD PTR _this$[ebp]
add	eax, 148				
mov	DWORD PTR tv82[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR tv82[ebp]
mov	DWORD PTR [ecx+180], edx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+284], 0
push	0
push	1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?collapse@ScintillaEditView@@QAEXH_N@Z	
mov	esp, ebp
pop	ebp
ret	0
ENDP
?copy@Finder@@QAEXXZ PROC				
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?copy@Finder@@QAEXXZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 200				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	0
push	0
push	2143					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _selStart$4[ebp], eax
push	0
push	0
push	2145					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _selEnd$3[ebp], eax
mov	eax, DWORD PTR _selStart$4[ebp]
cmp	eax, DWORD PTR _selEnd$3[ebp]
je	SHORT $LN11@copy
mov	BYTE PTR tv77[ebp], 1
jmp	SHORT $LN12@copy
mov	BYTE PTR tv77[ebp], 0
mov	cl, BYTE PTR tv77[ebp]
mov	BYTE PTR _hasSelection$8[ebp], cl
lea	edx, DWORD PTR _lineRange$6[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?getSelectionLinesRange@ScintillaEditView@@QBE?AU?$pair@HH@std@@XZ 
movzx	eax, BYTE PTR _hasSelection$8[ebp]
test	eax, eax
je	SHORT $LN8@copy
mov	ecx, DWORD PTR _lineRange$6[ebp]
cmp	ecx, DWORD PTR _lineRange$6[ebp+4]
je	SHORT $LN8@copy
mov	edx, DWORD PTR _lineRange$6[ebp]
mov	DWORD PTR _fromLine$[ebp], edx
mov	eax, DWORD PTR _lineRange$6[ebp+4]
mov	DWORD PTR _toLine$[ebp], eax
jmp	SHORT $LN7@copy
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?getCurrentLineNumber@ScintillaEditView@@QBEJXZ 
mov	DWORD PTR _fromLine$[ebp], eax
push	0
mov	ecx, DWORD PTR _fromLine$[ebp]
push	ecx
push	2223					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
and	eax, 4095				
mov	DWORD PTR _selectedLineFoldLevel$5[ebp], eax
mov	edx, DWORD PTR _selectedLineFoldLevel$5[ebp]
push	edx
mov	eax, DWORD PTR _fromLine$[ebp]
push	eax
push	2224					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _toLine$[ebp], eax
lea	ecx, DWORD PTR _lines$[ebp]
call	??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _fromLine$[ebp]
mov	DWORD PTR _line$7[ebp], ecx
jmp	SHORT $LN6@copy
mov	edx, DWORD PTR _line$7[ebp]
add	edx, 1
mov	DWORD PTR _line$7[ebp], edx
mov	eax, DWORD PTR _line$7[ebp]
cmp	eax, DWORD PTR _toLine$[ebp]
ja	$LN4@copy
mov	ecx, DWORD PTR _line$7[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?isLineActualSearchResult@Finder@@ABE_NH@Z 
movzx	edx, al
test	edx, edx
je	$LN3@copy
sub	esp, 28					
mov	eax, esp
mov	DWORD PTR $T2[ebp], esp
mov	ecx, DWORD PTR _line$7[ebp]
push	ecx
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?getLine@ScintillaEditView@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z 
mov	DWORD PTR tv133[ebp], eax
mov	edx, DWORD PTR tv133[ebp]
mov	DWORD PTR tv209[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	eax, DWORD PTR $T10[ebp]
push	eax
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?prepareStringForClipboard@Finder@@ABE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V23@@Z 
mov	DWORD PTR tv210[ebp], eax
mov	ecx, DWORD PTR tv210[ebp]
mov	DWORD PTR tv212[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	edx, DWORD PTR tv212[ebp]
push	edx
lea	ecx, DWORD PTR _lines$[ebp]
call	?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T10[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
jmp	$LN5@copy
push	OFFSET $SG173618
lea	ecx, DWORD PTR $T11[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	eax, DWORD PTR $T11[ebp]
push	eax
lea	ecx, DWORD PTR _lines$[ebp]
push	ecx
lea	edx, DWORD PTR _toClipboard$[ebp]
push	edx
call	?stringJoin@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@ABV?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@2@ABV12@@Z 
add	esp, 12					
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR $T11[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
lea	ecx, DWORD PTR _toClipboard$[ebp]
call	?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ 
movzx	eax, al
test	eax, eax
jne	$LN2@copy
lea	ecx, DWORD PTR _toClipboard$[ebp]
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
lea	ecx, DWORD PTR $T12[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 6
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
lea	eax, DWORD PTR $T12[ebp]
push	eax
call	?str2Clipboard@@YA_NABV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PAUHWND__@@@Z 
add	esp, 8
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN13@copy
mov	DWORD PTR tv194[ebp], 1
jmp	SHORT $LN14@copy
mov	DWORD PTR tv194[ebp], 0
mov	dl, BYTE PTR tv194[ebp]
mov	BYTE PTR $T9[ebp], dl
mov	BYTE PTR __$EHRec$[ebp+8], 5
lea	ecx, DWORD PTR $T12[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
movzx	eax, BYTE PTR $T9[ebp]
test	eax, eax
je	SHORT $LN2@copy
xor	ecx, ecx
jne	SHORT $LN15@copy
push	2571					
push	OFFSET $SG173624
push	OFFSET $SG173625
call	__wassert
add	esp, 12					
push	64					
push	OFFSET $SG173626
push	OFFSET $SG173627
push	0
call	DWORD PTR __imp__MessageBoxW@16
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _toClipboard$[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _lines$[ebp]
call	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$?copy@Finder@@QAEXXZ$0 PROC
lea	ecx, DWORD PTR _lines$[ebp]
jmp	??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?copy@Finder@@QAEXXZ$1 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?copy@Finder@@QAEXXZ$2 PROC
lea	ecx, DWORD PTR $T10[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?copy@Finder@@QAEXXZ$3 PROC
lea	ecx, DWORD PTR $T11[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?copy@Finder@@QAEXXZ$4 PROC
lea	ecx, DWORD PTR _toClipboard$[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?copy@Finder@@QAEXXZ$5 PROC
lea	ecx, DWORD PTR $T12[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$?copy@Finder@@QAEXXZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-204]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?copy@Finder@@QAEXXZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?openAll@Finder@@QAEXXZ PROC				
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+144]
call	?size@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QBEIXZ 
mov	DWORD PTR _sz$[ebp], eax
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN3@openAll
mov	ecx, DWORD PTR _i$1[ebp]
add	ecx, 1
mov	DWORD PTR _i$1[ebp], ecx
mov	edx, DWORD PTR _i$1[ebp]
cmp	edx, DWORD PTR _sz$[ebp]
jae	SHORT $LN4@openAll
mov	eax, DWORD PTR _i$1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+144]
call	?at@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEAAUFoundInfo@@I@Z 
add	eax, 8
mov	ecx, eax
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
push	0
push	3032					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	DWORD PTR __imp__GetParent@4
push	eax
call	DWORD PTR __imp__SendMessageW@16
jmp	SHORT $LN2@openAll
mov	esp, ebp
pop	ebp
ret	0
ENDP
?removeAll@Finder@@QAEXXZ PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+144]
call	?clear@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+180]
call	?clear@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXXZ 
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
push	0
push	0
push	2004					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
mov	esp, ebp
pop	ebp
ret	0
ENDP
?setFinderStyle@Finder@@QAEXXZ PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?setFinderStyle@Finder@@QAEXXZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 56					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?performGlobalStyles@ScintillaEditView@@QAEXXZ 
mov	eax, 20					
imul	ecx, eax, 47
mov	edx, DWORD PTR ?langNames@ScintillaEditView@@2PAULanguageName@@A[ecx]
mov	DWORD PTR _lexerName$[ebp], edx
mov	eax, DWORD PTR _lexerName$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+228]
call	?getLStylerArray@NppParameters@@QAEAAULexerStylerArray@@XZ 
mov	ecx, eax
call	?getLexerStylerByName@LexerStylerArray@@QAEPAULexerStyler@@PB_W@Z 
mov	DWORD PTR _pStyler$[ebp], eax
cmp	DWORD PTR _pStyler$[ebp], 0
je	SHORT $LN7@setFinderS
push	6
mov	ecx, DWORD PTR _pStyler$[ebp]
call	?getStylerIndexByID@StyleArray@@QAEHH@Z	
mov	DWORD PTR _i$6[ebp], eax
cmp	DWORD PTR _i$6[ebp], -1
je	SHORT $LN7@setFinderS
mov	edx, DWORD PTR _i$6[ebp]
push	edx
mov	ecx, DWORD PTR _pStyler$[ebp]
call	?getStyler@StyleArray@@QAEAAUStyle@@H@Z	
mov	DWORD PTR _style$3[ebp], eax
push	0
mov	eax, DWORD PTR _style$3[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
push	2098					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?setSearchResultLexer@ScintillaEditView@@IAEXXZ 
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+228]
call	?getMiscStylerArray@NppParameters@@QAEAAUStyleArray@@XZ 
mov	DWORD PTR _stylers$[ebp], eax
push	32					
mov	ecx, DWORD PTR _stylers$[ebp]
call	?getStylerIndexByID@StyleArray@@QAEHH@Z	
mov	DWORD PTR _iStyleDefault$[ebp], eax
cmp	DWORD PTR _iStyleDefault$[ebp], -1
je	$LN5@setFinderS
mov	eax, DWORD PTR _iStyleDefault$[ebp]
push	eax
mov	ecx, DWORD PTR _stylers$[ebp]
call	?getStyler@StyleArray@@QAEAAUStyle@@H@Z	
mov	DWORD PTR _styleDefault$8[ebp], eax
sub	esp, 44					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
mov	edx, DWORD PTR _styleDefault$8[ebp]
push	edx
call	??0Style@@QAE@ABU0@@Z			
mov	DWORD PTR tv203[ebp], eax
mov	eax, DWORD PTR tv203[ebp]
mov	DWORD PTR tv202[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
mov	DWORD PTR __$EHRec$[ebp+8], -1
call	?setStyle@ScintillaEditView@@IAEXUStyle@@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+228]
call	?getGlobalOverrideStyle@NppParameters@@QAEAAUGlobalOverride@@XZ 
mov	DWORD PTR _go$7[ebp], eax
mov	ecx, DWORD PTR _go$7[ebp]
call	?isEnable@GlobalOverride@@QBE_NXZ	
movzx	edx, al
test	edx, edx
je	SHORT $LN4@setFinderS
push	OFFSET $SG173826
mov	ecx, DWORD PTR _stylers$[ebp]
call	?getStylerIndexByName@StyleArray@@QBEHPB_W@Z 
mov	DWORD PTR _iGlobalOverride$5[ebp], eax
cmp	DWORD PTR _iGlobalOverride$5[ebp], -1
je	SHORT $LN4@setFinderS
mov	eax, DWORD PTR _iGlobalOverride$5[ebp]
push	eax
mov	ecx, DWORD PTR _stylers$[ebp]
call	?getStyler@StyleArray@@QAEAAUStyle@@H@Z	
mov	DWORD PTR _styleGlobalOverride$4[ebp], eax
mov	ecx, DWORD PTR _go$7[ebp]
movzx	edx, BYTE PTR [ecx]
test	edx, edx
je	SHORT $LN2@setFinderS
mov	eax, DWORD PTR _styleDefault$8[ebp]
mov	ecx, DWORD PTR _styleGlobalOverride$4[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+8], edx
mov	eax, DWORD PTR _go$7[ebp]
movzx	ecx, BYTE PTR [eax+1]
test	ecx, ecx
je	SHORT $LN4@setFinderS
mov	edx, DWORD PTR _styleDefault$8[ebp]
mov	eax, DWORD PTR _styleGlobalOverride$4[ebp]
mov	ecx, DWORD PTR [eax+12]
mov	DWORD PTR [edx+12], ecx
mov	edx, DWORD PTR _styleDefault$8[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
push	0
push	2051					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	ecx, DWORD PTR _styleDefault$8[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
push	0
push	2052					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	-1
push	0
push	4003					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$?setFinderStyle@Finder@@QAEXXZ$0 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1Style@@QAE@XZ			
ENDP
__ehhandler$?setFinderStyle@Finder@@QAEXXZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-60]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?setFinderStyle@Finder@@QAEXXZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?add@Finder@@QAEXUFoundInfo@@USearchResultMarking@@PB_WH@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?add@Finder@@QAEXUFoundInfo@@USearchResultMarking@@PB_WH@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 108				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
lea	eax, DWORD PTR _fi$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [ecx+144]
call	?push_back@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXABUFoundInfo@@@Z 
push	OFFSET $SG173410
lea	ecx, DWORD PTR _str$[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR _lineNb$[ebp]
push	edx
push	OFFSET $SG173412
lea	eax, DWORD PTR _lnb$[ebp]
push	eax
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
lea	ecx, DWORD PTR _lnb$[ebp]
push	ecx
lea	ecx, DWORD PTR _str$[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	OFFSET $SG173413
lea	ecx, DWORD PTR _str$[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
lea	ecx, DWORD PTR _str$[ebp]
call	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
add	eax, DWORD PTR _mi$[ebp]
mov	DWORD PTR _mi$[ebp], eax
lea	ecx, DWORD PTR _str$[ebp]
call	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
add	eax, DWORD PTR _mi$[ebp+4]
mov	DWORD PTR _mi$[ebp+4], eax
mov	edx, DWORD PTR _foundline$[ebp]
push	edx
lea	ecx, DWORD PTR _str$[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
lea	ecx, DWORD PTR _str$[ebp]
call	?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
cmp	eax, 1024				
jb	SHORT $LN1@add
mov	DWORD PTR _endOfLongLine$2[ebp], OFFSET $SG173416
mov	eax, DWORD PTR _endOfLongLine$2[ebp]
push	eax
call	DWORD PTR __imp__lstrlenW@4
mov	ecx, 1024				
sub	ecx, eax
sub	ecx, 1
push	ecx
push	0
lea	edx, DWORD PTR $T3[ebp]
push	edx
lea	ecx, DWORD PTR _str$[ebp]
call	?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z 
mov	DWORD PTR tv69[ebp], eax
mov	eax, DWORD PTR tv69[ebp]
mov	DWORD PTR tv154[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR tv154[ebp]
push	ecx
lea	ecx, DWORD PTR _str$[ebp]
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	edx, DWORD PTR _endOfLongLine$2[ebp]
push	edx
lea	ecx, DWORD PTR _str$[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
lea	eax, DWORD PTR _mi$[ebp+4]
push	eax
lea	ecx, DWORD PTR _mi$[ebp]
push	ecx
lea	ecx, DWORD PTR _str$[ebp]
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?addGenericText@ScintillaEditView@@QBEXPB_WPAJ1@Z 
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
lea	edx, DWORD PTR _mi$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+180]
call	?push_back@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXABUSearchResultMarking@@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR _str$[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _fi$[ebp]
call	??1FoundInfo@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	52					
ENDP
__unwindfunclet$?add@Finder@@QAEXUFoundInfo@@USearchResultMarking@@PB_WH@Z$0 PROC
lea	ecx, DWORD PTR _fi$[ebp]
jmp	??1FoundInfo@@QAE@XZ
ENDP
__unwindfunclet$?add@Finder@@QAEXUFoundInfo@@USearchResultMarking@@PB_WH@Z$1 PROC
lea	ecx, DWORD PTR _str$[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$?add@Finder@@QAEXUFoundInfo@@USearchResultMarking@@PB_WH@Z$2 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$?add@Finder@@QAEXUFoundInfo@@USearchResultMarking@@PB_WH@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-112]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?add@Finder@@QAEXUFoundInfo@@USearchResultMarking@@PB_WH@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?addSearchHitCount@Finder@@QAEXH@Z PROC			
push	ebp
mov	ebp, esp
sub	esp, 108				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _count$[ebp], 1
jne	SHORT $LN7@addSearchH
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+284], 1
jne	SHORT $LN7@addSearchH
push	OFFSET $SG173392
lea	ecx, DWORD PTR _text$[ebp]
push	ecx
call	DWORD PTR __imp__wsprintfW
add	esp, 8
jmp	$LN6@addSearchH
cmp	DWORD PTR _count$[ebp], 1
jne	SHORT $LN5@addSearchH
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+284], 1
je	SHORT $LN5@addSearchH
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+284]
push	ecx
push	OFFSET $SG173395
lea	edx, DWORD PTR _text$[ebp]
push	edx
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
jmp	SHORT $LN6@addSearchH
cmp	DWORD PTR _count$[ebp], 1
je	SHORT $LN3@addSearchH
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+284], 1
jne	SHORT $LN3@addSearchH
mov	ecx, DWORD PTR _count$[ebp]
push	ecx
push	OFFSET $SG173398
lea	edx, DWORD PTR _text$[ebp]
push	edx
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
jmp	SHORT $LN6@addSearchH
cmp	DWORD PTR _count$[ebp], 1
je	SHORT $LN6@addSearchH
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+284], 1
je	SHORT $LN6@addSearchH
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+284]
push	edx
mov	eax, DWORD PTR _count$[ebp]
push	eax
push	OFFSET $SG173401
lea	ecx, DWORD PTR _text$[ebp]
push	ecx
call	DWORD PTR __imp__wsprintfW
add	esp, 16					
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
lea	edx, DWORD PTR _text$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+292]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?insertGenericTextFrom@ScintillaEditView@@QBEXHPB_W@Z 
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	4
ENDP
?addFileHitCount@Finder@@QAEXH@Z PROC			
push	ebp
mov	ebp, esp
sub	esp, 48					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _count$[ebp], 1
jne	SHORT $LN2@addFileHit
push	OFFSET $SG173383
lea	eax, DWORD PTR _text$[ebp]
push	eax
call	DWORD PTR __imp__wsprintfW
add	esp, 8
jmp	SHORT $LN1@addFileHit
mov	ecx, DWORD PTR _count$[ebp]
push	ecx
push	OFFSET $SG173385
lea	edx, DWORD PTR _text$[ebp]
push	edx
call	DWORD PTR __imp__wsprintfW
add	esp, 12					
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
lea	eax, DWORD PTR _text$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+288]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?insertGenericTextFrom@ScintillaEditView@@QBEXHPB_W@Z 
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+284]
add	ecx, 1
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+284], ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	4
ENDP
?addFileNameTitle@Finder@@QAEXPB_W@Z PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?addFileNameTitle@Finder@@QAEXPB_W@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 36					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET $SG173375
lea	ecx, DWORD PTR _str$[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _fileName$[ebp]
push	eax
lea	ecx, DWORD PTR _str$[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	OFFSET $SG173376
lea	ecx, DWORD PTR _str$[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
lea	ecx, DWORD PTR _str$[ebp]
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?addGenericText@ScintillaEditView@@QBEXPB_W@Z 
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
push	0
push	0
push	2008					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
sub	eax, 2
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+288], eax
push	OFFSET ?EmptyFoundInfo@Finder@@0UFoundInfo@@A 
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+144]
call	?push_back@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXABUFoundInfo@@@Z 
push	OFFSET ?EmptySearchResultMarking@Finder@@0USearchResultMarking@@A 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+180]
call	?push_back@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXABUSearchResultMarking@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _str$[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?addFileNameTitle@Finder@@QAEXPB_W@Z$0 PROC
lea	ecx, DWORD PTR _str$[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$?addFileNameTitle@Finder@@QAEXPB_W@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-40]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?addFileNameTitle@Finder@@QAEXPB_W@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?addSearchLine@Finder@@QAEXPB_W@Z PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?addSearchLine@Finder@@QAEXPB_W@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 36					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET $SG173368
lea	ecx, DWORD PTR _str$[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _searchName$[ebp]
push	eax
lea	ecx, DWORD PTR _str$[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	OFFSET $SG173369
lea	ecx, DWORD PTR _str$[ebp]
call	??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
lea	ecx, DWORD PTR _str$[ebp]
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?addGenericText@ScintillaEditView@@QBEXPB_W@Z 
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?setFinderReadOnly@Finder@@AAEX_N@Z	
push	0
push	0
push	2008					
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
sub	eax, 2
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+292], eax
push	OFFSET ?EmptyFoundInfo@Finder@@0UFoundInfo@@A 
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+144]
call	?push_back@?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAEXABUFoundInfo@@@Z 
push	OFFSET ?EmptySearchResultMarking@Finder@@0USearchResultMarking@@A 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+180]
call	?push_back@?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAEXABUSearchResultMarking@@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR _str$[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?addSearchLine@Finder@@QAEXPB_W@Z$0 PROC
lea	ecx, DWORD PTR _str$[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$?addSearchLine@Finder@@QAEXPB_W@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-40]
xor	ecx, eax
call	@__security_check_cookie@4
mov	ecx, DWORD PTR [edx-4]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?addSearchLine@Finder@@QAEXPB_W@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?init@Finder@@QAEXPAUHINSTANCE__@@PAUHWND__@@PAPAVScintillaEditView@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _hPere$[ebp]
push	eax
mov	ecx, DWORD PTR _hInst$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?init@DockingDlgInterface@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _ppEditView$[ebp]
mov	DWORD PTR [edx+108], eax
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??1Finder@@UAE@XZ PROC					
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1Finder@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7Finder@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], 5
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+192]
mov	edx, DWORD PTR [eax+8]
call	edx
mov	BYTE PTR __$EHRec$[ebp+8], 4
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	??1ScintillaEditView@@UAE@XZ		
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 164				
call	??1?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 148				
call	??1?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 128				
call	??1?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 112				
call	??1?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1DockingDlgInterface@@UAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1Finder@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1DockingDlgInterface@@UAE@XZ
ENDP
__unwindfunclet$??1Finder@@UAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 112				
jmp	??1?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ 
ENDP
__unwindfunclet$??1Finder@@UAE@XZ$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 128				
jmp	??1?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ 
ENDP
__unwindfunclet$??1Finder@@UAE@XZ$3 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 148				
jmp	??1?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ 
ENDP
__unwindfunclet$??1Finder@@UAE@XZ$4 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 164				
jmp	??1?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ 
ENDP
__unwindfunclet$??1Finder@@UAE@XZ$5 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
jmp	??1ScintillaEditView@@UAE@XZ		
ENDP
__ehhandler$??1Finder@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1Finder@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0Finder@@QAE@XZ PROC					
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0Finder@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	1670					
mov	ecx, DWORD PTR _this$[ebp]
call	??0DockingDlgInterface@@QAE@H@Z		
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7Finder@@6B@
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 112				
call	??0?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 128				
call	??0?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 112				
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+144], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 148				
call	??0?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 164				
call	??0?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 4
mov	eax, DWORD PTR _this$[ebp]
add	eax, 148				
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+180], eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
call	??0ScintillaEditView@@QAE@XZ		
mov	BYTE PTR __$EHRec$[ebp+8], 5
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+184], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+188], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0Finder@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1DockingDlgInterface@@UAE@XZ
ENDP
__unwindfunclet$??0Finder@@QAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 112				
jmp	??1?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ 
ENDP
__unwindfunclet$??0Finder@@QAE@XZ$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 128				
jmp	??1?$vector@UFoundInfo@@V?$allocator@UFoundInfo@@@std@@@std@@QAE@XZ 
ENDP
__unwindfunclet$??0Finder@@QAE@XZ$3 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 148				
jmp	??1?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ 
ENDP
__unwindfunclet$??0Finder@@QAE@XZ$4 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 164				
jmp	??1?$vector@USearchResultMarking@@V?$allocator@USearchResultMarking@@@std@@@std@@QAE@XZ 
ENDP
__unwindfunclet$??0Finder@@QAE@XZ$5 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 192				
jmp	??1ScintillaEditView@@UAE@XZ		
ENDP
__ehhandler$??0Finder@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0Finder@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?readBase@Searching@@CA_NPB_WPAHHH@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _i$[ebp], 0
mov	DWORD PTR _temp$[ebp], 0
mov	eax, DWORD PTR _value$[ebp]
mov	DWORD PTR [eax], 0
movzx	ecx, WORD PTR _base$[ebp]
add	ecx, 47					
mov	WORD PTR _max$[ebp], cx
mov	edx, DWORD PTR _i$[ebp]
cmp	edx, DWORD PTR _size$[ebp]
jge	$LN6@readBase
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _str$[ebp]
mov	dx, WORD PTR [ecx+eax*2]
mov	WORD PTR _current$[ebp], dx
movzx	eax, WORD PTR _current$[ebp]
cmp	eax, 65					
jl	SHORT $LN5@readBase
movzx	ecx, WORD PTR _current$[ebp]
and	ecx, 223				
mov	WORD PTR _current$[ebp], cx
movzx	edx, WORD PTR _current$[ebp]
sub	edx, 7
mov	WORD PTR _current$[ebp], dx
jmp	SHORT $LN4@readBase
movzx	eax, WORD PTR _current$[ebp]
cmp	eax, 57					
jle	SHORT $LN4@readBase
xor	al, al
jmp	SHORT $LN8@readBase
movzx	ecx, WORD PTR _current$[ebp]
cmp	ecx, 48					
jl	SHORT $LN2@readBase
movzx	edx, WORD PTR _current$[ebp]
movzx	eax, WORD PTR _max$[ebp]
cmp	edx, eax
jg	SHORT $LN2@readBase
mov	ecx, DWORD PTR _temp$[ebp]
imul	ecx, DWORD PTR _base$[ebp]
mov	DWORD PTR _temp$[ebp], ecx
movzx	edx, WORD PTR _current$[ebp]
mov	eax, DWORD PTR _temp$[ebp]
lea	ecx, DWORD PTR [eax+edx-48]
mov	DWORD PTR _temp$[ebp], ecx
jmp	SHORT $LN1@readBase
xor	al, al
jmp	SHORT $LN8@readBase
mov	edx, DWORD PTR _i$[ebp]
add	edx, 1
mov	DWORD PTR _i$[ebp], edx
jmp	$LN7@readBase
mov	eax, DWORD PTR _value$[ebp]
mov	ecx, DWORD PTR _temp$[ebp]
mov	DWORD PTR [eax], ecx
mov	al, 1
mov	esp, ebp
pop	ebp
ret	0
ENDP
?displaySectionCentered@Searching@@SAXHHPAVScintillaEditView@@_N@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 32					
movzx	eax, BYTE PTR _isDownwards$[ebp]
test	eax, eax
je	SHORT $LN6@displaySec
mov	ecx, DWORD PTR _posEnd$[ebp]
mov	DWORD PTR tv66[ebp], ecx
jmp	SHORT $LN7@displaySec
mov	edx, DWORD PTR _posStart$[ebp]
mov	DWORD PTR tv66[ebp], edx
mov	eax, DWORD PTR tv66[ebp]
mov	DWORD PTR _testPos$[ebp], eax
push	0
mov	ecx, DWORD PTR _testPos$[ebp]
push	ecx
push	2141					
mov	ecx, DWORD PTR _pEditView$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
mov	edx, DWORD PTR _testPos$[ebp]
push	edx
push	2166					
mov	ecx, DWORD PTR _pEditView$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _currentlineNumberDoc$[ebp], eax
push	0
mov	eax, DWORD PTR _currentlineNumberDoc$[ebp]
push	eax
push	2220					
mov	ecx, DWORD PTR _pEditView$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _currentlineNumberVis$[ebp], eax
push	0
mov	ecx, DWORD PTR _currentlineNumberDoc$[ebp]
push	ecx
push	2232					
mov	ecx, DWORD PTR _pEditView$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
push	0
push	2152					
mov	ecx, DWORD PTR _pEditView$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _firstVisibleLineVis$[ebp], eax
push	0
push	0
push	2370					
mov	ecx, DWORD PTR _pEditView$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
sub	eax, 1
mov	DWORD PTR _linesVisible$[ebp], eax
mov	edx, DWORD PTR _linesVisible$[ebp]
add	edx, DWORD PTR _firstVisibleLineVis$[ebp]
mov	DWORD PTR _lastVisibleLineVis$[ebp], edx
mov	DWORD PTR _linesToScroll$[ebp], 0
mov	eax, DWORD PTR _currentlineNumberVis$[ebp]
cmp	eax, DWORD PTR _firstVisibleLineVis$[ebp]
jge	SHORT $LN3@displaySec
mov	ecx, DWORD PTR _currentlineNumberVis$[ebp]
sub	ecx, DWORD PTR _firstVisibleLineVis$[ebp]
mov	DWORD PTR _linesToScroll$[ebp], ecx
mov	eax, DWORD PTR _linesVisible$[ebp]
cdq
sub	eax, edx
sar	eax, 1
mov	edx, DWORD PTR _linesToScroll$[ebp]
sub	edx, eax
mov	DWORD PTR _linesToScroll$[ebp], edx
jmp	SHORT $LN2@displaySec
mov	eax, DWORD PTR _currentlineNumberVis$[ebp]
cmp	eax, DWORD PTR _lastVisibleLineVis$[ebp]
jle	SHORT $LN2@displaySec
mov	ecx, DWORD PTR _currentlineNumberVis$[ebp]
sub	ecx, DWORD PTR _lastVisibleLineVis$[ebp]
mov	DWORD PTR _linesToScroll$[ebp], ecx
mov	eax, DWORD PTR _linesVisible$[ebp]
cdq
sub	eax, edx
sar	eax, 1
add	eax, DWORD PTR _linesToScroll$[ebp]
mov	DWORD PTR _linesToScroll$[ebp], eax
mov	edx, DWORD PTR _linesToScroll$[ebp]
push	edx
push	0
mov	ecx, DWORD PTR _pEditView$[ebp]
call	?scroll@ScintillaEditView@@QAEXHH@Z	
push	0
mov	eax, DWORD PTR _posStart$[ebp]
push	eax
push	2025					
mov	ecx, DWORD PTR _pEditView$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
mov	ecx, DWORD PTR _posEnd$[ebp]
push	ecx
push	2025					
mov	ecx, DWORD PTR _pEditView$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
mov	edx, DWORD PTR _posStart$[ebp]
push	edx
push	2026					
mov	ecx, DWORD PTR _pEditView$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	esp, ebp
pop	ebp
ret	0
ENDP
?buildSearchFlags@Searching@@SAHPBUFindOption@@@Z PROC	
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	eax, DWORD PTR _option$[ebp]
movzx	ecx, BYTE PTR [eax]
test	ecx, ecx
je	SHORT $LN3@buildSearc
mov	DWORD PTR tv67[ebp], 2
jmp	SHORT $LN4@buildSearc
mov	DWORD PTR tv67[ebp], 0
mov	edx, DWORD PTR _option$[ebp]
movzx	eax, BYTE PTR [edx+1]
test	eax, eax
je	SHORT $LN5@buildSearc
mov	DWORD PTR tv71[ebp], 4
jmp	SHORT $LN6@buildSearc
mov	DWORD PTR tv71[ebp], 0
mov	ecx, DWORD PTR _option$[ebp]
cmp	DWORD PTR [ecx+8], 2
jne	SHORT $LN7@buildSearc
mov	DWORD PTR tv75[ebp], 6291456		
jmp	SHORT $LN8@buildSearc
mov	DWORD PTR tv75[ebp], 0
mov	edx, DWORD PTR _option$[ebp]
cmp	DWORD PTR [edx+8], 2
jne	SHORT $LN9@buildSearc
mov	eax, DWORD PTR _option$[ebp]
movzx	ecx, BYTE PTR [eax+130]
test	ecx, ecx
je	SHORT $LN9@buildSearc
mov	DWORD PTR tv82[ebp], 268435456		
jmp	SHORT $LN10@buildSearc
mov	DWORD PTR tv82[ebp], 0
mov	eax, DWORD PTR tv67[ebp]
or	eax, DWORD PTR tv71[ebp]
or	eax, DWORD PTR tv75[ebp]
or	eax, DWORD PTR tv82[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?convertExtendedToString@Searching@@SAHPB_WPA_WH@Z PROC	
push	ebp
mov	ebp, esp
sub	esp, 32					
push	esi
mov	DWORD PTR _i$[ebp], 0
mov	DWORD PTR _j$[ebp], 0
mov	eax, DWORD PTR _length$[ebp]
mov	DWORD PTR _charLeft$[ebp], eax
mov	ecx, DWORD PTR _i$[ebp]
cmp	ecx, DWORD PTR _length$[ebp]
jge	$LN23@convertExt
mov	edx, DWORD PTR _i$[ebp]
mov	eax, DWORD PTR _query$[ebp]
mov	cx, WORD PTR [eax+edx*2]
mov	WORD PTR _current$[ebp], cx
mov	edx, DWORD PTR _charLeft$[ebp]
sub	edx, 1
mov	DWORD PTR _charLeft$[ebp], edx
movzx	eax, WORD PTR _current$[ebp]
cmp	eax, 92					
jne	$LN22@convertExt
cmp	DWORD PTR _charLeft$[ebp], 0
je	$LN22@convertExt
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _charLeft$[ebp]
sub	edx, 1
mov	DWORD PTR _charLeft$[ebp], edx
mov	eax, DWORD PTR _i$[ebp]
mov	ecx, DWORD PTR _query$[ebp]
mov	dx, WORD PTR [ecx+eax*2]
mov	WORD PTR _current$[ebp], dx
movzx	eax, WORD PTR _current$[ebp]
mov	DWORD PTR tv76[ebp], eax
mov	ecx, DWORD PTR tv76[ebp]
sub	ecx, 48					
mov	DWORD PTR tv76[ebp], ecx
cmp	DWORD PTR tv76[ebp], 72			
ja	$LN2@convertExt
mov	edx, DWORD PTR tv76[ebp]
movzx	eax, BYTE PTR $LN27@convertExt[edx]
jmp	DWORD PTR $LN28@convertExt[eax*4]
mov	ecx, 13					
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _result$[ebp]
mov	WORD PTR [eax+edx*2], cx
jmp	$LN20@convertExt
mov	ecx, 10					
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _result$[ebp]
mov	WORD PTR [eax+edx*2], cx
jmp	$LN20@convertExt
xor	ecx, ecx
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _result$[ebp]
mov	WORD PTR [eax+edx*2], cx
jmp	$LN20@convertExt
mov	ecx, 9
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _result$[ebp]
mov	WORD PTR [eax+edx*2], cx
jmp	$LN20@convertExt
mov	ecx, 92					
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _result$[ebp]
mov	WORD PTR [eax+edx*2], cx
jmp	$LN20@convertExt
mov	DWORD PTR _size$3[ebp], 0
mov	DWORD PTR _base$2[ebp], 0
movzx	ecx, WORD PTR _current$[ebp]
cmp	ecx, 98					
jne	SHORT $LN13@convertExt
mov	DWORD PTR _size$3[ebp], 8
mov	DWORD PTR _base$2[ebp], 2
jmp	SHORT $LN12@convertExt
movzx	edx, WORD PTR _current$[ebp]
cmp	edx, 111				
jne	SHORT $LN11@convertExt
mov	DWORD PTR _size$3[ebp], 3
mov	DWORD PTR _base$2[ebp], 8
jmp	SHORT $LN12@convertExt
movzx	eax, WORD PTR _current$[ebp]
cmp	eax, 100				
jne	SHORT $LN9@convertExt
mov	DWORD PTR _size$3[ebp], 3
mov	DWORD PTR _base$2[ebp], 10		
jmp	SHORT $LN12@convertExt
movzx	ecx, WORD PTR _current$[ebp]
cmp	ecx, 120				
jne	SHORT $LN7@convertExt
mov	DWORD PTR _size$3[ebp], 2
mov	DWORD PTR _base$2[ebp], 16		
jmp	SHORT $LN12@convertExt
movzx	edx, WORD PTR _current$[ebp]
cmp	edx, 117				
jne	SHORT $LN12@convertExt
mov	DWORD PTR _size$3[ebp], 4
mov	DWORD PTR _base$2[ebp], 16		
mov	eax, DWORD PTR _charLeft$[ebp]
cmp	eax, DWORD PTR _size$3[ebp]
jl	SHORT $LN2@convertExt
mov	DWORD PTR _res$1[ebp], 0
mov	ecx, DWORD PTR _size$3[ebp]
push	ecx
mov	edx, DWORD PTR _base$2[ebp]
push	edx
lea	eax, DWORD PTR _res$1[ebp]
push	eax
mov	ecx, DWORD PTR _i$[ebp]
mov	edx, DWORD PTR _query$[ebp]
lea	eax, DWORD PTR [edx+ecx*2+2]
push	eax
call	?readBase@Searching@@CA_NPB_WPAHHH@Z	
add	esp, 16					
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN2@convertExt
mov	edx, DWORD PTR _j$[ebp]
mov	eax, DWORD PTR _result$[ebp]
mov	cx, WORD PTR _res$1[ebp]
mov	WORD PTR [eax+edx*2], cx
mov	edx, DWORD PTR _i$[ebp]
add	edx, DWORD PTR _size$3[ebp]
mov	DWORD PTR _i$[ebp], edx
jmp	SHORT $LN20@convertExt
mov	eax, 92					
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _result$[ebp]
mov	WORD PTR [edx+ecx*2], ax
mov	eax, DWORD PTR _j$[ebp]
add	eax, 1
mov	DWORD PTR _j$[ebp], eax
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _result$[ebp]
mov	ax, WORD PTR _current$[ebp]
mov	WORD PTR [edx+ecx*2], ax
jmp	SHORT $LN1@convertExt
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _result$[ebp]
mov	eax, DWORD PTR _i$[ebp]
mov	esi, DWORD PTR _query$[ebp]
mov	ax, WORD PTR [esi+eax*2]
mov	WORD PTR [edx+ecx*2], ax
mov	ecx, DWORD PTR _i$[ebp]
add	ecx, 1
mov	DWORD PTR _i$[ebp], ecx
mov	edx, DWORD PTR _j$[ebp]
add	edx, 1
mov	DWORD PTR _j$[ebp], edx
jmp	$LN24@convertExt
xor	eax, eax
mov	ecx, DWORD PTR _j$[ebp]
mov	edx, DWORD PTR _result$[ebp]
mov	WORD PTR [edx+ecx*2], ax
mov	eax, DWORD PTR _j$[ebp]
pop	esi
mov	esp, ebp
pop	ebp
ret	0
npad	1
DD	$LN17@convertExt
DD	$LN15@convertExt
DD	$LN14@convertExt
DD	$LN18@convertExt
DD	$LN19@convertExt
DD	$LN16@convertExt
DD	$LN2@convertExt
DB	0
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	1
DB	6
DB	6
DB	6
DB	6
DB	6
DB	2
DB	6
DB	2
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	6
DB	3
DB	2
DB	6
DB	6
DB	4
DB	6
DB	5
DB	2
DB	6
DB	6
DB	2
ENDP
??_GFindOption@@QAEPAXI@Z PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1FindOption@@QAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0FindOption@@QAE@ABU0@@Z PROC				
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0FindOption@@QAE@ABU0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ___that$[ebp]
mov	dl, BYTE PTR [ecx]
mov	BYTE PTR [eax], dl
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ___that$[ebp]
mov	dl, BYTE PTR [ecx+1]
mov	BYTE PTR [eax+1], dl
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ___that$[ebp]
mov	dl, BYTE PTR [ecx+2]
mov	BYTE PTR [eax+2], dl
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ___that$[ebp]
mov	dl, BYTE PTR [ecx+3]
mov	BYTE PTR [eax+3], dl
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ___that$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ___that$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+8], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ___that$[ebp]
mov	dl, BYTE PTR [ecx+12]
mov	BYTE PTR [eax+12], dl
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ___that$[ebp]
mov	dl, BYTE PTR [ecx+13]
mov	BYTE PTR [eax+13], dl
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ___that$[ebp]
mov	dl, BYTE PTR [ecx+14]
mov	BYTE PTR [eax+14], dl
mov	eax, DWORD PTR ___that$[ebp]
add	eax, 16					
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR ___that$[ebp]
add	ecx, 44					
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 44					
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR ___that$[ebp]
add	edx, 72					
push	edx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 72					
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	eax, DWORD PTR ___that$[ebp]
add	eax, 100				
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 100				
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR ___that$[ebp]
mov	al, BYTE PTR [edx+128]
mov	BYTE PTR [ecx+128], al
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR ___that$[ebp]
mov	al, BYTE PTR [edx+129]
mov	BYTE PTR [ecx+129], al
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR ___that$[ebp]
mov	al, BYTE PTR [edx+130]
mov	BYTE PTR [ecx+130], al
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0FindOption@@QAE@ABU0@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??0FindOption@@QAE@ABU0@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 44					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??0FindOption@@QAE@ABU0@@Z$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 72					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??0FindOption@@QAE@ABU0@@Z$3 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 100				
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$??0FindOption@@QAE@ABU0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0FindOption@@QAE@ABU0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1FindOption@@QAE@XZ PROC				
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1FindOption@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 3
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 100				
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 72					
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 44					
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1FindOption@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??1FindOption@@QAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 44					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??1FindOption@@QAE@XZ$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 72					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??1FindOption@@QAE@XZ$3 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 100				
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$??1FindOption@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1FindOption@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0FindOption@@QAE@XZ PROC				
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0FindOption@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	BYTE PTR [eax], 1
mov	ecx, DWORD PTR _this$[ebp]
mov	BYTE PTR [ecx+1], 1
mov	edx, DWORD PTR _this$[ebp]
mov	BYTE PTR [edx+2], 1
mov	eax, DWORD PTR _this$[ebp]
mov	BYTE PTR [eax+3], 1
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	BYTE PTR [eax+12], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	BYTE PTR [ecx+13], 0
mov	edx, DWORD PTR _this$[ebp]
mov	BYTE PTR [edx+14], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 44					
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 72					
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
push	OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 100				
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	eax, DWORD PTR _this$[ebp]
mov	BYTE PTR [eax+128], 1
mov	ecx, DWORD PTR _this$[ebp]
mov	BYTE PTR [ecx+129], 0
mov	edx, DWORD PTR _this$[ebp]
mov	BYTE PTR [edx+130], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0FindOption@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 16					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??0FindOption@@QAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 44					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??0FindOption@@QAE@XZ$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 72					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??0FindOption@@QAE@XZ$3 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 100				
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$??0FindOption@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0FindOption@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GFoundInfo@@QAEPAXI@Z PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1FoundInfo@@QAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??4FoundInfo@@QAEAAU0@ABU0@@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ___that$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ___that$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___that$[ebp]
add	eax, 8
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0FoundInfo@@QAE@ABU0@@Z PROC				
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0FoundInfo@@QAE@ABU0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ___that$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ___that$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___that$[ebp]
add	eax, 8
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0FoundInfo@@QAE@ABU0@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$??0FoundInfo@@QAE@ABU0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0FoundInfo@@QAE@ABU0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1FoundInfo@@QAE@XZ PROC				
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1FoundInfo@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1FoundInfo@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$??1FoundInfo@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1FoundInfo@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0FoundInfo@@QAE@HHPB_W@Z PROC				
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0FoundInfo@@QAE@HHPB_W@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _start$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _end$[ebp]
mov	DWORD PTR [edx+4], eax
mov	ecx, DWORD PTR _fullPath$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$??0FoundInfo@@QAE@HHPB_W@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$??0FoundInfo@@QAE@HHPB_W@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0FoundInfo@@QAE@HHPB_W@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GStatusBar@@UAEPAXI@Z PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1StatusBar@@UAE@XZ			
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?getHeight@StatusBar@@UBEHXZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__IsWindowVisible@4
test	eax, eax
jne	SHORT $LN1@getHeight
xor	eax, eax
jmp	SHORT $LN2@getHeight
mov	ecx, DWORD PTR _this$[ebp]
call	?getHeight@Window@@UBEHXZ		
mov	esp, ebp
pop	ebp
ret	0
ENDP
?reSizeTo@StatusBar@@UAEXAAUtagRECT@@@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	1
mov	eax, DWORD PTR _rc$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _rc$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _rc$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _rc$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__MoveWindow@24
mov	ecx, DWORD PTR _rc$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?adjustParts@StatusBar@@QAEXH@Z		
push	0
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+24]
call	eax
mov	esp, ebp
pop	ebp
ret	4
ENDP
?destroy@StatusBar@@UAEXXZ PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__DestroyWindow@4
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1StatusBar@@UAE@XZ PROC				
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1StatusBar@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7StatusBar@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+24], 0
je	SHORT $LN2@StatusBar
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+24]
push	eax
call	DWORD PTR __imp__LocalUnlock@4
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+24]
push	edx
call	DWORD PTR __imp__LocalFree@4
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+20], 0
je	SHORT $LN3@StatusBar
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+20]
mov	DWORD PTR $T2[ebp], edx
mov	eax, DWORD PTR $T2[ebp]
push	eax
call	??_V@YAXPAX@Z				
add	esp, 4
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 32					
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1Window@@UAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1StatusBar@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1Window@@UAE@XZ			
ENDP
__unwindfunclet$??1StatusBar@@UAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 32					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$??1StatusBar@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1StatusBar@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GDockingDlgInterface@@UAEPAXI@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1DockingDlgInterface@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1DockingDlgInterface@@UAE@XZ PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1DockingDlgInterface@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 2
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 76					
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1StaticDialog@@UAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1DockingDlgInterface@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1StaticDialog@@UAE@XZ			
ENDP
__unwindfunclet$??1DockingDlgInterface@@UAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??1DockingDlgInterface@@UAE@XZ$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 76					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$??1DockingDlgInterface@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1DockingDlgInterface@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?run_dlgProc@DockingDlgInterface@@MAGHIIJ@Z PROC	
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	eax, DWORD PTR _message$[ebp]
mov	DWORD PTR tv64[ebp], eax
cmp	DWORD PTR tv64[ebp], 78			
je	SHORT $LN9@run_dlgPro
jmp	SHORT $LN10@run_dlgPro
mov	ecx, DWORD PTR _lParam$[ebp]
mov	DWORD PTR _pnmh$1[ebp], ecx
mov	edx, DWORD PTR _pnmh$1[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx]
cmp	ecx, DWORD PTR [eax+8]
jne	SHORT $LN10@run_dlgPro
mov	edx, DWORD PTR _pnmh$1[ebp]
mov	eax, DWORD PTR [edx+8]
and	eax, 65535				
movzx	ecx, ax
mov	DWORD PTR tv76[ebp], ecx
cmp	DWORD PTR tv76[ebp], 1052		
je	SHORT $LN3@run_dlgPro
cmp	DWORD PTR tv76[ebp], 1053		
je	SHORT $LN4@run_dlgPro
jmp	SHORT $LN10@run_dlgPro
jmp	SHORT $LN10@run_dlgPro
mov	edx, DWORD PTR _this$[ebp]
mov	BYTE PTR [edx+40], 1
jmp	SHORT $LN10@run_dlgPro
mov	eax, DWORD PTR _pnmh$1[ebp]
mov	ecx, DWORD PTR [eax+8]
shr	ecx, 16					
and	ecx, 65535				
movzx	edx, cx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+44], edx
mov	ecx, DWORD PTR _this$[ebp]
mov	BYTE PTR [ecx+40], 0
xor	eax, eax
mov	esp, ebp
pop	ebp
ret	16					
ENDP
?display@DockingDlgInterface@@UBEX_N@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
movzx	eax, BYTE PTR _toShow$[ebp]
test	eax, eax
je	SHORT $LN3@display
mov	DWORD PTR tv74[ebp], 2054		
jmp	SHORT $LN4@display
mov	DWORD PTR tv74[ebp], 2055		
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
push	0
mov	eax, DWORD PTR tv74[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
call	DWORD PTR __imp__SendMessageW@16
mov	esp, ebp
pop	ebp
ret	4
ENDP
?setForegroundColor@DockingDlgInterface@@UAEXK@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
?setBackgroundColor@DockingDlgInterface@@UAEXK@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
?destroy@DockingDlgInterface@@UAEXXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
?updateDockingDlg@DockingDlgInterface@@UAEXXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
push	0
push	2056					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	DWORD PTR __imp__SendMessageW@16
mov	esp, ebp
pop	ebp
ret	0
ENDP
?create@DockingDlgInterface@@QAEXPAUtTbData@@_N@Z PROC	
push	ebp
mov	ebp, esp
sub	esp, 528				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
push	1
movzx	eax, BYTE PTR _isRTL$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+36]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?create@StaticDialog@@UAEXH_N0@Z	
push	260					
lea	eax, DWORD PTR _temp$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetWindowTextW@12
lea	eax, DWORD PTR _temp$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 76					
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
mov	ecx, DWORD PTR _data$[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
mov	DWORD PTR [ecx], eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 76					
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
mov	ecx, DWORD PTR _data$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	edx, DWORD PTR _data$[ebp]
mov	DWORD PTR [edx+12], 0
mov	eax, DWORD PTR _data$[ebp]
mov	DWORD PTR [eax+20], 0
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	8
ENDP
?init@DockingDlgInterface@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 528				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _parent$[ebp]
push	eax
mov	ecx, DWORD PTR _hInst$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z 
push	260					
lea	edx, DWORD PTR _temp$[ebp]
push	edx
mov	eax, DWORD PTR _hInst$[ebp]
push	eax
call	DWORD PTR __imp__GetModuleFileNameW@12
lea	ecx, DWORD PTR _temp$[ebp]
push	ecx
call	DWORD PTR __imp__PathFindFileNameW@4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
call	??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z 
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0DockingDlgInterface@@QAE@H@Z PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0DockingDlgInterface@@QAE@H@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0StaticDialog@@QAE@XZ			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7DockingDlgInterface@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+32], 0
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _dlgID$[ebp]
mov	DWORD PTR [edx+36], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	BYTE PTR [ecx+40], 1
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+44], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
push	OFFSET ??_C@_11LOCGONAA@?$AA?$AA@
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 76					
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0DockingDlgInterface@@QAE@H@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1StaticDialog@@UAE@XZ			
ENDP
__unwindfunclet$??0DockingDlgInterface@@QAE@H@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??0DockingDlgInterface@@QAE@H@Z$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 76					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$??0DockingDlgInterface@@QAE@H@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0DockingDlgInterface@@QAE@H@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??_G?$pair@$$CBHUStyle@@@std@@QAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$pair@$$CBHUStyle@@@std@@QAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$pair@$$CBHUStyle@@@std@@QAE@XZ PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$pair@$$CBHUStyle@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??1Style@@QAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$pair@$$CBHUStyle@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
jmp	??1Style@@QAE@XZ			
ENDP
__ehhandler$??1?$pair@$$CBHUStyle@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$pair@$$CBHUStyle@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAEAAV01@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHUStyle@@@1@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHUStyle@@@1@XZ 
push	eax
call	?pointer_to@?$pointer_traits@PAU?$pair@$$CBHUStyle@@@std@@@std@@SAPAU?$pair@$$CBHUStyle@@@2@AAU32@@Z 
add	esp, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHUStyle@@@1@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHUStyle@@@1@XZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	esi, eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	esi, eax
je	SHORT $LN2@operator
push	289					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	290					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
push	0
push	290					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1BBG@MEFLKALA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+8]
jne	SHORT $LN7@operator
mov	DWORD PTR tv146[ebp], 1
jmp	SHORT $LN8@operator
mov	DWORD PTR tv146[ebp], 0
mov	al, BYTE PTR tv146[ebp]
pop	esi
mov	esp, ebp
pop	ebp
ret	4
ENDP
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
cmp	edx, DWORD PTR [eax+4]
jne	SHORT $LN2@operator
push	230					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	231					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
push	0
push	231					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1BBG@GEKGEJHF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx+8], eax
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHUStyle@@@1@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
cmp	edx, DWORD PTR [eax+4]
jne	SHORT $LN2@operator
push	210					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EC@HILJLMMC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl?$AAe@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	211					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
push	0
push	211					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1BBE@PIHPBAPJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	?_Myval@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAU?$pair@$$CBHUStyle@@@2@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z 
add	esp, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR __Plist$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Iterator_base12@std@@QAE@XZ		
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??_G?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Tidy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN2@Tidy
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
sar	ecx, 2
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@I@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+12], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Container_base12@std@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@I@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@I@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?end@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?end@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?end@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@end
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?end@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?end@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?begin@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?begin@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?begin@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@begin
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?begin@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?begin@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
jmp	??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Orphan_ptr@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Orphan_ptr@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 12					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	??0_Lockit@std@@QAE@H@Z			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR __Cont$[ebp]
call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
cmp	DWORD PTR __Pnext$[ebp], 0
je	SHORT $LN6@Orphan_ptr
mov	eax, DWORD PTR __Pnext$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@Orphan_ptr
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+8]
cmp	ecx, DWORD PTR [eax+4]
je	SHORT $LN2@Orphan_ptr
cmp	DWORD PTR __Ptr$[ebp], 0
je	SHORT $LN3@Orphan_ptr
mov	edx, DWORD PTR __Pnext$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+8]
cmp	ecx, DWORD PTR __Ptr$[ebp]
je	SHORT $LN3@Orphan_ptr
mov	edx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [edx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
jmp	SHORT $LN1@Orphan_ptr
mov	eax, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [eax]
call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [ecx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	edx, DWORD PTR __Pnext$[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN5@Orphan_ptr
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Lock$[ebp]
call	??1_Lockit@std@@QAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?_Orphan_ptr@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z$0 PROC
lea	ecx, DWORD PTR __Lock$[ebp]
jmp	??1_Lockit@std@@QAE@XZ			
ENDP
__ehhandler$?_Orphan_ptr@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-16]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Orphan_ptr@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Tidy@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?clear@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAEXXZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
?clear@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_ptr@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
mov	eax, DWORD PTR [eax]
mov	DWORD PTR __Pnode$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], 0
jmp	SHORT $LN3@clear
mov	eax, DWORD PTR __Pnext$1[ebp]
mov	DWORD PTR __Pnode$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Pnode$[ebp]
cmp	edx, DWORD PTR [ecx+4]
je	SHORT $LN4@clear
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR __Pnext$1[ebp], ecx
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Freenode@?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z 
jmp	SHORT $LN2@clear
mov	esp, ebp
pop	ebp
ret	0
ENDP
?end@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?end@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?end@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@end
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?end@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?end@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?begin@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?begin@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
mov	eax, DWORD PTR [eax]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?begin@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@begin
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?begin@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?begin@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ
ENDP
__ehhandler$??1?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Freenode@?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
push	eax
call	??$addressof@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z 
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
push	eax
call	??$addressof@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z 
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
call	?_Myval@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAU?$pair@$$CBHUStyle@@@2@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z 
add	esp, 4
push	eax
call	??$addressof@U?$pair@$$CBHUStyle@@@std@@@std@@YAPAU?$pair@$$CBHUStyle@@@0@AAU10@@Z 
add	esp, 4
push	eax
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@U?$pair@$$CBHUStyle@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHUStyle@@@1@@Z 
push	1
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@I@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
push	eax
call	??$addressof@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z 
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
push	eax
call	??$addressof@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z 
push	1
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
lea	edx, DWORD PTR $T1[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@I@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Free_proxy@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Container_base12@std@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??1?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Myval@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAU?$pair@$$CBHUStyle@@@2@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Pnode$[ebp]
add	eax, 8
pop	ebp
ret	0
ENDP
?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Pnode$[ebp]
add	eax, 4
pop	ebp
ret	0
ENDP
?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Pnode$[ebp]
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@I@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ 
push	eax
call	?pointer_to@?$pointer_traits@PAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@SAPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@AAU32@@Z 
add	esp, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEABU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
jne	SHORT $LN3@operator
mov	DWORD PTR tv69[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv69[ebp], 0
mov	al, BYTE PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	esi, eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	esi, eax
je	SHORT $LN2@operator
push	289					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
push	OFFSET ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	290					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
push	0
push	290					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1CEO@DJCOBHAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
push	OFFSET ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [eax+8]
cmp	edx, DWORD PTR [ecx+8]
jne	SHORT $LN7@operator
mov	DWORD PTR tv146[ebp], 1
jmp	SHORT $LN8@operator
mov	DWORD PTR tv146[ebp], 0
mov	al, BYTE PTR tv146[ebp]
pop	esi
mov	esp, ebp
pop	ebp
ret	4
ENDP
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
cmp	edx, DWORD PTR [eax+4]
jne	SHORT $LN2@operator
push	230					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	231					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
push	0
push	231					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1CEO@JJNDPOME@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx+8], eax
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEABU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
test	eax, eax
je	SHORT $LN1@operator
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+8], 0
je	SHORT $LN1@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
cmp	edx, DWORD PTR [eax+4]
jne	SHORT $LN2@operator
push	210					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EC@HILJLMMC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl?$AAe@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, OFFSET ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
test	eax, eax
je	SHORT $LN5@operator
xor	ecx, ecx
jne	SHORT $LN6@operator
push	OFFSET ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
push	OFFSET ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
push	0
push	211					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	2
call	__CrtDbgReportW
add	esp, 24					
cmp	eax, 1
jne	SHORT $LN6@operator
int	3
push	0
push	211					
push	OFFSET ??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1CEM@BAKEJGH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@
push	OFFSET ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
call	__invalid_parameter
add	esp, 20					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
call	?_Myval@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z 
add	esp, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Plist$[ebp]
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR [eax+8], ecx
mov	edx, DWORD PTR __Plist$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Iterator_base12@std@@QAE@XZ		
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Iterator_base12@std@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Iterator_base12@std@@QAE@XZ		
ENDP
__ehhandler$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GScintillaEditView@@UAEPAXI@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1ScintillaEditView@@UAE@XZ		
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?defineMarker@ScintillaEditView@@IAEXHHKKK@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _markerType$[ebp]
push	eax
mov	ecx, DWORD PTR _marker$[ebp]
push	ecx
push	2040					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	edx, DWORD PTR _fore$[ebp]
push	edx
mov	eax, DWORD PTR _marker$[ebp]
push	eax
push	2041					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	ecx, DWORD PTR _back$[ebp]
push	ecx
mov	edx, DWORD PTR _marker$[ebp]
push	edx
push	2042					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	eax, DWORD PTR _foreActive$[ebp]
push	eax
mov	ecx, DWORD PTR _marker$[ebp]
push	ecx
push	2292					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	esp, ebp
pop	ebp
ret	20					
ENDP
?setSearchResultLexer@ScintillaEditView@@IAEXXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	1
push	2
push	2057					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	1
push	1
push	2057					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	0
push	47					
push	150					
mov	ecx, DWORD PTR _this$[ebp]
call	?setLexer@ScintillaEditView@@IAEXHW4LangType@@H@Z 
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T5[ebp]
call	??0?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@QAE@XZ 
push	eax
movzx	eax, BYTE PTR $T4[ebp]
push	eax
movzx	ecx, BYTE PTR $T3[ebp]
push	ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@std@@QAE@U?$hash@PAVBuffer@@@1@U?$equal_to@PAVBuffer@@@1@@Z 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Orphan_range@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 12					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	??0_Lockit@std@@QAE@H@Z			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
cmp	DWORD PTR __Pnext$[ebp], 0
je	SHORT $LN6@Orphan_ran
mov	eax, DWORD PTR __Pnext$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __First$[ebp]
jb	SHORT $LN2@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR __Last$[ebp]
cmp	eax, DWORD PTR [edx+8]
jae	SHORT $LN3@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [ecx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
jmp	SHORT $LN1@Orphan_ran
mov	edx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [edx]
call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	
mov	eax, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [eax]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
jmp	SHORT $LN5@Orphan_ran
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Lock$[ebp]
call	??1_Lockit@std@@QAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?_Orphan_range@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z$0 PROC
lea	ecx, DWORD PTR __Lock$[ebp]
jmp	??1_Lockit@std@@QAE@XZ			
ENDP
__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-16]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Xlen@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
call	?_Xlength_error@std@@YAXPBD@Z		
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Ufill@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@PAV32@IPBV32@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Pval$[ebp]
push	edx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
call	??$_Uninitialized_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z 
add	esp, 16					
mov	edx, DWORD PTR __Count$[ebp]
mov	eax, DWORD PTR __Ptr$[ebp]
lea	eax, DWORD PTR [eax+edx*4]
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 64					
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T4[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+12], 1
lea	ecx, DWORD PTR __Where$[ebp]
call	?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ 
cmp	eax, DWORD PTR _this$[ebp]
jne	SHORT $LN13@Insert_n
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Where$[ebp+8]
cmp	ecx, DWORD PTR [eax+4]
jb	SHORT $LN13@Insert_n
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __Where$[ebp+8]
jae	SHORT $LN14@Insert_n
push	1658					
push	OFFSET ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Where$[ebp+8]
sub	edx, DWORD PTR [ecx+4]
sar	edx, 2
mov	DWORD PTR __Off$[ebp], edx
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN12@Insert_n
jmp	$LN11@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unused_capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Count$[ebp]
jae	$LN10@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ 
mov	esi, eax
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ 
sub	esi, eax
cmp	esi, DWORD PTR __Count$[ebp]
jae	SHORT $LN9@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow_to@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEII@Z 
mov	DWORD PTR __Capacity$6[ebp], eax
mov	eax, DWORD PTR __Capacity$6[ebp]
push	eax
lea	ecx, DWORD PTR $T13[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z 
mov	DWORD PTR __Newvec$10[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR __Where$[ebp+8]
sub	eax, DWORD PTR [edx+4]
sar	eax, 2
mov	DWORD PTR __Whereoff$8[ebp], eax
mov	DWORD PTR __Ncopied$9[ebp], 0
mov	BYTE PTR __$EHRec$[ebp+12], 2
mov	ecx, DWORD PTR __Val$[ebp]
push	ecx
call	??$addressof@$$CBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR __Count$[ebp]
push	edx
mov	eax, DWORD PTR __Whereoff$8[ebp]
mov	ecx, DWORD PTR __Newvec$10[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Ufill@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@PAV32@IPBV32@@Z 
mov	eax, DWORD PTR __Ncopied$9[ebp]
add	eax, 1
mov	DWORD PTR __Ncopied$9[ebp], eax
mov	ecx, DWORD PTR __Newvec$10[ebp]
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PAV21@00@Z 
mov	edx, DWORD PTR __Ncopied$9[ebp]
add	edx, 1
mov	DWORD PTR __Ncopied$9[ebp], edx
mov	eax, DWORD PTR __Whereoff$8[ebp]
add	eax, DWORD PTR __Count$[ebp]
mov	ecx, DWORD PTR __Newvec$10[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PAV21@00@Z 
jmp	SHORT $LN17@Insert_n
cmp	DWORD PTR __Ncopied$9[ebp], 1
jle	SHORT $LN7@Insert_n
mov	eax, DWORD PTR __Whereoff$8[ebp]
mov	ecx, DWORD PTR __Newvec$10[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
push	edx
mov	eax, DWORD PTR __Newvec$10[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z 
cmp	DWORD PTR __Ncopied$9[ebp], 0
jle	SHORT $LN6@Insert_n
mov	ecx, DWORD PTR __Whereoff$8[ebp]
mov	edx, DWORD PTR __Newvec$10[ebp]
lea	eax, DWORD PTR [edx+ecx*4]
mov	ecx, DWORD PTR __Count$[ebp]
lea	edx, DWORD PTR [eax+ecx*4]
push	edx
mov	eax, DWORD PTR __Whereoff$8[ebp]
mov	ecx, DWORD PTR __Newvec$10[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z 
mov	eax, DWORD PTR __Capacity$6[ebp]
push	eax
mov	ecx, DWORD PTR __Newvec$10[ebp]
push	ecx
lea	edx, DWORD PTR $T12[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN26@Insert_n
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], 1
jmp	SHORT __tryend$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], 1
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Count$[ebp], eax
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN5@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
sar	ecx, 2
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T11[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	edx, DWORD PTR __Capacity$6[ebp]
mov	eax, DWORD PTR __Newvec$10[ebp]
lea	ecx, DWORD PTR [eax+edx*4]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], ecx
mov	eax, DWORD PTR __Count$[ebp]
mov	ecx, DWORD PTR __Newvec$10[ebp]
lea	edx, DWORD PTR [ecx+eax*4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Newvec$10[ebp]
mov	DWORD PTR [ecx+4], edx
jmp	$LN11@Insert_n
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
sub	ecx, DWORD PTR __Where$[ebp+8]
sar	ecx, 2
cmp	ecx, DWORD PTR __Count$[ebp]
jae	$LN3@Insert_n
mov	edx, DWORD PTR __Val$[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR __Tmp$5[ebp], eax
mov	ecx, DWORD PTR __Count$[ebp]
mov	edx, DWORD PTR __Where$[ebp+8]
lea	eax, DWORD PTR [edx+ecx*4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR __Where$[ebp+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PAV21@00@Z 
mov	BYTE PTR __$EHRec$[ebp+12], 4
lea	ecx, DWORD PTR __Tmp$5[ebp]
push	ecx
call	??$addressof@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
sub	eax, DWORD PTR __Where$[ebp+8]
sar	eax, 2
mov	ecx, DWORD PTR __Count$[ebp]
sub	ecx, eax
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Ufill@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@PAV32@IPBV32@@Z 
jmp	SHORT $LN19@Insert_n
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	eax, DWORD PTR __Count$[ebp]
lea	ecx, DWORD PTR [edx+eax*4]
push	ecx
mov	edx, DWORD PTR __Count$[ebp]
mov	eax, DWORD PTR __Where$[ebp+8]
lea	ecx, DWORD PTR [eax+edx*4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN28@Insert_n
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], 1
jmp	SHORT __tryend$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z$3
mov	DWORD PTR __$EHRec$[ebp+12], 1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	ecx, DWORD PTR __Count$[ebp]
lea	edx, DWORD PTR [eax+ecx*4]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], edx
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR __Where$[ebp+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z 
lea	ecx, DWORD PTR __Tmp$5[ebp]
push	ecx
mov	edx, DWORD PTR __Count$[ebp]
shl	edx, 2
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
sub	ecx, edx
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
call	??$fill@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0ABV10@@Z 
add	esp, 12					
jmp	SHORT $LN11@Insert_n
mov	eax, DWORD PTR __Val$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR __Tmp$3[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
mov	DWORD PTR __Oldend$7[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR __Oldend$7[ebp]
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
shl	ecx, 2
mov	edx, DWORD PTR __Oldend$7[ebp]
sub	edx, ecx
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PAV21@00@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR __Where$[ebp+8]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z 
mov	edx, DWORD PTR __Oldend$7[ebp]
push	edx
mov	eax, DWORD PTR __Count$[ebp]
shl	eax, 2
mov	ecx, DWORD PTR __Oldend$7[ebp]
sub	ecx, eax
push	ecx
mov	edx, DWORD PTR __Where$[ebp+8]
push	edx
call	??$_Copy_backward@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00@Z 
add	esp, 12					
lea	eax, DWORD PTR __Tmp$3[ebp]
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
mov	edx, DWORD PTR __Where$[ebp+8]
lea	eax, DWORD PTR [edx+ecx*4]
push	eax
mov	ecx, DWORD PTR __Where$[ebp+8]
push	ecx
call	??$fill@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0ABV10@@Z 
add	esp, 12					
mov	edx, DWORD PTR __Off$[ebp]
push	edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
lea	ecx, DWORD PTR $T2[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv436[ebp], eax
mov	edx, DWORD PTR tv436[ebp]
mov	DWORD PTR tv430[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+12], 6
mov	ecx, DWORD PTR tv430[ebp]
call	??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z 
mov	eax, DWORD PTR $T4[ebp]
or	eax, 1
mov	DWORD PTR $T4[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+12], 1
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+12], 0
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	24					
ENDP
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z$4 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z$5 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z$6 PROC
mov	eax, DWORD PTR $T4[ebp]
and	eax, 1
je	$LN24@Insert_n
and	DWORD PTR $T4[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-84]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Tidy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN2@Tidy
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
sar	ecx, 2
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+12], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Grow_to@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEII@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ 
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ 
mov	ecx, DWORD PTR __Capacity$[ebp]
shr	ecx, 1
sub	eax, ecx
cmp	eax, DWORD PTR __Capacity$[ebp]
jae	SHORT $LN4@Grow_to
mov	DWORD PTR tv73[ebp], 0
jmp	SHORT $LN5@Grow_to
mov	edx, DWORD PTR __Capacity$[ebp]
shr	edx, 1
add	edx, DWORD PTR __Capacity$[ebp]
mov	DWORD PTR tv73[ebp], edx
mov	eax, DWORD PTR tv73[ebp]
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR __Capacity$[ebp]
cmp	ecx, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Grow_to
mov	edx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Capacity$[ebp], edx
mov	eax, DWORD PTR __Capacity$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
?clear@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+8], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 24					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T3[ebp], 0
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	eax, DWORD PTR __Val$[ebp]
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T2[ebp], esp
lea	edx, DWORD PTR __Where$[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv95[ebp], eax
mov	eax, DWORD PTR tv95[ebp]
mov	DWORD PTR tv89[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 2
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
push	ecx
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z 
mov	DWORD PTR tv66[ebp], eax
mov	edx, DWORD PTR $T3[ebp]
or	edx, 1
mov	DWORD PTR $T3[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __Where$[ebp]
call	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	24					
ENDP
__unwindfunclet$?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z$0 PROC
lea	ecx, DWORD PTR __Where$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z$1 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z$2 PROC
mov	eax, DWORD PTR $T3[ebp]
and	eax, 1
je	$LN6@insert
and	DWORD PTR $T3[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-28]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 52					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?clear@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXXZ 
mov	eax, DWORD PTR __Val$[ebp]
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv133[ebp], eax
mov	eax, DWORD PTR tv133[ebp]
mov	DWORD PTR tv95[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
mov	edx, DWORD PTR tv95[ebp]
push	edx
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv134[ebp], eax
mov	eax, DWORD PTR tv134[ebp]
mov	DWORD PTR tv131[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@IABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z 
mov	DWORD PTR tv66[ebp], eax
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z$0 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z$1 PROC
mov	ecx, DWORD PTR $T4[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-56]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBEIXZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
sub	eax, DWORD PTR [ecx+4]
sar	eax, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
?begin@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?begin@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?begin@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@begin
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?begin@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Unused_capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+8]
sar	eax, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
?capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+4]
sar	eax, 2
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAE@XZ 
push	1
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??0_Container_proxy@std@@QAE@XZ		
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Container_base12@std@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Container_base12@std@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@Z 
add	esp, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Al$[ebp]
push	eax
push	0
call	??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z 
add	esp, 8
pop	ebp
ret	0
ENDP
?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@2@@Z 
add	esp, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QBEIXZ 
pop	ebp
ret	0
ENDP
?max_size@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, 1073741823				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?construct@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@ABV32@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
push	4
call	??2@YAPAXIPAX@Z				
add	esp, 8
mov	DWORD PTR $T1[ebp], eax
cmp	DWORD PTR $T1[ebp], 0
je	SHORT $LN3@construct
mov	ecx, DWORD PTR __Val$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR $T1[ebp]
mov	DWORD PTR [eax], edx
mov	ecx, DWORD PTR $T1[ebp]
mov	DWORD PTR tv69[ebp], ecx
jmp	SHORT $LN1@construct
mov	DWORD PTR tv69[ebp], 0
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPAV10@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Init@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ 
push	eax
mov	ecx, DWORD PTR __Buckets$[ebp]
shl	ecx, 1
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z 
mov	edx, DWORD PTR __Buckets$[ebp]
sub	edx, 1
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+28], edx
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Buckets$[ebp]
mov	DWORD PTR [ecx+32], edx
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Unchecked_end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unchecked_end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@end
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?begin@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?begin@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?begin@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@begin
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?begin@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?begin@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
jmp	??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Parg$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@@Z 
mov	ecx, DWORD PTR __Al$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	edx, DWORD PTR __Al$[ebp]
push	edx
lea	ecx, DWORD PTR $T2[ebp]
call	??$?0V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z 
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
call	??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
movss	xmm0, DWORD PTR __real@3f800000
movss	DWORD PTR [ecx+36], xmm0
push	8
mov	ecx, DWORD PTR _this$[ebp]
call	?_Init@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@IAEXI@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$??0?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??0?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 12					
jmp	??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Orphan_ptr@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Orphan_ptr@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 12					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	??0_Lockit@std@@QAE@H@Z			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR __Cont$[ebp]
call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
cmp	DWORD PTR __Pnext$[ebp], 0
je	SHORT $LN6@Orphan_ptr
mov	eax, DWORD PTR __Pnext$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@Orphan_ptr
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+8]
cmp	ecx, DWORD PTR [eax+4]
je	SHORT $LN2@Orphan_ptr
cmp	DWORD PTR __Ptr$[ebp], 0
je	SHORT $LN3@Orphan_ptr
mov	edx, DWORD PTR __Pnext$[ebp]
mov	eax, DWORD PTR [edx]
mov	ecx, DWORD PTR [eax+8]
cmp	ecx, DWORD PTR __Ptr$[ebp]
je	SHORT $LN3@Orphan_ptr
mov	edx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [edx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
jmp	SHORT $LN1@Orphan_ptr
mov	eax, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [eax]
call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [ecx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	edx, DWORD PTR __Pnext$[ebp]
mov	eax, DWORD PTR [eax]
mov	DWORD PTR [edx], eax
jmp	SHORT $LN5@Orphan_ptr
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Lock$[ebp]
call	??1_Lockit@std@@QAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?_Orphan_ptr@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z$0 PROC
lea	ecx, DWORD PTR __Lock$[ebp]
jmp	??1_Lockit@std@@QAE@XZ			
ENDP
__ehhandler$?_Orphan_ptr@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-16]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Orphan_ptr@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Tidy@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?clear@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAEXXZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
?clear@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_ptr@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
mov	eax, DWORD PTR [eax]
mov	DWORD PTR __Pnode$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+4]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], 0
jmp	SHORT $LN3@clear
mov	eax, DWORD PTR __Pnext$1[ebp]
mov	DWORD PTR __Pnode$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Pnode$[ebp]
cmp	edx, DWORD PTR [ecx+4]
je	SHORT $LN4@clear
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR __Pnext$1[ebp], ecx
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Freenode@?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z 
jmp	SHORT $LN2@clear
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Unchecked_end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@end
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?begin@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?begin@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
mov	eax, DWORD PTR [eax]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?begin@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@begin
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?begin@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?begin@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ
ENDP
__ehhandler$??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ
ENDP
__ehhandler$??0?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Freenode@?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
push	eax
call	??$addressof@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z 
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
push	eax
call	??$addressof@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z 
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
call	?_Myval@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z 
add	esp, 4
push	eax
call	??$addressof@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@YAPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@0@AAU10@@Z 
add	esp, 4
push	eax
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@@Z 
push	1
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@0@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 12					
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
push	1
lea	eax, DWORD PTR $T5[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z 
mov	DWORD PTR __Pnode$[ebp], eax
cmp	DWORD PTR __Next$[ebp], 0
jne	SHORT $LN2@Buynode0
mov	ecx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR __Next$[ebp], ecx
mov	edx, DWORD PTR __Pnode$[ebp]
mov	DWORD PTR __Prev$[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+12], 0
lea	eax, DWORD PTR __Next$[ebp]
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
push	eax
call	??$addressof@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
lea	edx, DWORD PTR $T4[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z 
lea	eax, DWORD PTR __Prev$[ebp]
push	eax
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
push	eax
call	??$addressof@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z 
jmp	SHORT $LN5@Buynode0
push	1
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
lea	ecx, DWORD PTR $T2[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN8@Buynode0
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@0@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR __Pnode$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-32]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Pnode$[ebp]
push	eax
call	?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
push	eax
call	??$addressof@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z 
mov	edx, DWORD PTR __Pnode$[ebp]
push	edx
call	?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z 
add	esp, 4
push	eax
call	??$addressof@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z 
add	esp, 4
push	eax
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z 
push	1
mov	ecx, DWORD PTR __Pnode$[ebp]
push	ecx
lea	edx, DWORD PTR $T1[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@0@Z 
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Free_proxy@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Alloc_proxy@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
push	1
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??0_Container_proxy@std@@QAE@XZ		
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
push	ecx
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@XZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], eax
mov	BYTE PTR __$EHRec$[ebp+12], 1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Alloc_proxy@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEXXZ 
jmp	SHORT $LN4@List_alloc
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN8@List_alloc
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], 0
jmp	SHORT $LN2@List_alloc
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z$2 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-24]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Container_base12@std@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Myval@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Pnode$[ebp]
add	eax, 8
pop	ebp
ret	0
ENDP
?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Pnode$[ebp]
add	eax, 4
pop	ebp
ret	0
ENDP
?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Pnode$[ebp]
pop	ebp
ret	0
ENDP
??0?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Container_base12@std@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??0?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?allocate@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@IPAU10@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@std@@QAE@U?$hash@PAVBuffer@@@1@U?$equal_to@PAVBuffer@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
movzx	eax, BYTE PTR __Keyeqarg$[ebp]
push	eax
movzx	ecx, BYTE PTR __Hasharg$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Hash_oper2@$0A@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@2@@std@@QAE@U?$hash@PAVBuffer@@@1@U?$equal_to@PAVBuffer@@@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_Hash_oper2@$0A@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@2@@std@@QAE@U?$hash@PAVBuffer@@@1@U?$equal_to@PAVBuffer@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
movzx	eax, BYTE PTR __Hasharg$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Hash_oper1@$0A@U?$hash@PAVBuffer@@@std@@@std@@QAE@U?$hash@PAVBuffer@@@1@@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_Hash_oper1@$0A@U?$hash@PAVBuffer@@@std@@@std@@QAE@U?$hash@PAVBuffer@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?getCurrentBuffer@ScintillaEditView@@QAEPAVBuffer@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+32]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?clearIndicator@ScintillaEditView@@QAEXH@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR _docStart$[ebp], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?getCurrentDocLen@ScintillaEditView@@QBEHXZ 
mov	DWORD PTR _docEnd$[ebp], eax
push	0
mov	eax, DWORD PTR _indicatorNumber$[ebp]
push	eax
push	2500					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	ecx, DWORD PTR _docEnd$[ebp]
sub	ecx, DWORD PTR _docStart$[ebp]
push	ecx
mov	edx, DWORD PTR _docStart$[ebp]
push	edx
push	2505					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	esp, ebp
pop	ebp
ret	4
ENDP
?showLineNumbersMargin@ScintillaEditView@@QAEX_N@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
movzx	eax, BYTE PTR _show$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
movzx	edx, BYTE PTR [ecx+44]
cmp	eax, edx
jne	SHORT $LN3@showLineNu
jmp	SHORT $LN4@showLineNu
mov	eax, DWORD PTR _this$[ebp]
mov	cl, BYTE PTR _show$[ebp]
mov	BYTE PTR [eax+44], cl
movzx	edx, BYTE PTR _show$[ebp]
test	edx, edx
je	SHORT $LN2@showLineNu
mov	ecx, DWORD PTR _this$[ebp]
call	?updateLineNumberWidth@ScintillaEditView@@QAEXXZ 
jmp	SHORT $LN4@showLineNu
push	0
mov	eax, DWORD PTR ?_SC_MARGE_LINENUMBER@ScintillaEditView@@2HB 
push	eax
push	2242					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	esp, ebp
pop	ebp
ret	4
ENDP
?scroll@ScintillaEditView@@QAEXHH@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _line$[ebp]
push	eax
mov	ecx, DWORD PTR _column$[ebp]
push	ecx
push	2168					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	esp, ebp
pop	ebp
ret	8
ENDP
?getCurrentLineNumber@ScintillaEditView@@QBEJXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
push	0
push	0
push	2008					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
push	eax
push	2166					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	esp, ebp
pop	ebp
ret	0
ENDP
?setMakerStyle@ScintillaEditView@@QAEXW4folderStyle@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _style$[ebp], 5
jne	SHORT $LN5@setMakerSt
mov	DWORD PTR _style$[ebp], 4
mov	BYTE PTR _display$[ebp], 0
jmp	SHORT $LN4@setMakerSt
mov	BYTE PTR _display$[ebp], 1
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN3@setMakerSt
mov	eax, DWORD PTR _i$1[ebp]
add	eax, 1
mov	DWORD PTR _i$1[ebp], eax
cmp	DWORD PTR _i$1[ebp], 7
jge	SHORT $LN1@setMakerSt
push	16777215				
push	8421504					
push	16777215				
imul	ecx, DWORD PTR _style$[ebp], 28
mov	edx, DWORD PTR _i$1[ebp]
mov	eax, DWORD PTR ?_markersArray@ScintillaEditView@@1QAY06$$CBHA[ecx+edx*4]
push	eax
mov	ecx, 28					
imul	edx, ecx, 0
mov	eax, DWORD PTR _i$1[ebp]
mov	ecx, DWORD PTR ?_markersArray@ScintillaEditView@@1QAY06$$CBHA[edx+eax*4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?defineMarker@ScintillaEditView@@IAEXHHKKK@Z 
jmp	SHORT $LN2@setMakerSt
movzx	edx, BYTE PTR _display$[ebp]
push	edx
mov	eax, DWORD PTR ?_SC_MARGE_FOLDER@ScintillaEditView@@2HB 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?showMargin@ScintillaEditView@@QAEXH_N@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
?showMargin@ScintillaEditView@@QAEXH_N@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _whichMarge$[ebp]
cmp	eax, DWORD PTR ?_SC_MARGE_LINENUMBER@ScintillaEditView@@2HB 
jne	SHORT $LN4@showMargin
movzx	ecx, BYTE PTR _willBeShowed$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?showLineNumbersMargin@ScintillaEditView@@QAEX_N@Z 
jmp	SHORT $LN5@showMargin
mov	DWORD PTR _width$1[ebp], 3
mov	edx, DWORD PTR _whichMarge$[ebp]
cmp	edx, DWORD PTR ?_SC_MARGE_SYBOLE@ScintillaEditView@@2HB 
je	SHORT $LN1@showMargin
mov	eax, DWORD PTR _whichMarge$[ebp]
cmp	eax, DWORD PTR ?_SC_MARGE_FOLDER@ScintillaEditView@@2HB 
jne	SHORT $LN2@showMargin
mov	DWORD PTR _width$1[ebp], 14		
movzx	ecx, BYTE PTR _willBeShowed$[ebp]
test	ecx, ecx
je	SHORT $LN7@showMargin
mov	edx, DWORD PTR _width$1[ebp]
mov	DWORD PTR tv73[ebp], edx
jmp	SHORT $LN8@showMargin
mov	DWORD PTR tv73[ebp], 0
mov	eax, DWORD PTR tv73[ebp]
push	eax
mov	ecx, DWORD PTR _whichMarge$[ebp]
push	ecx
push	2242					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	esp, ebp
pop	ebp
ret	8
ENDP
?getSelection@ScintillaEditView@@QBE?AUSci_CharacterRange@@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
push	0
push	0
push	2143					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _crange$[ebp], eax
push	0
push	0
push	2145					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	DWORD PTR _crange$[ebp+4], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR _crange$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _crange$[ebp+4]
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?getCurrentDocLen@ScintillaEditView@@QBEHXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
push	0
push	2006					
mov	ecx, DWORD PTR _this$[ebp]
call	?execute@ScintillaEditView@@QBEJIIJ@Z	
mov	esp, ebp
pop	ebp
ret	0
ENDP
?execute@ScintillaEditView@@QBEJIIJ@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _lParam$[ebp]
push	eax
mov	ecx, DWORD PTR _wParam$[ebp]
push	ecx
mov	edx, DWORD PTR _Msg$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+16]
call	eax
add	esp, 16					
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?destroy@ScintillaEditView@@UAEXXZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__DestroyWindow@4
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1ScintillaEditView@@UAE@XZ PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1ScintillaEditView@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 88					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7ScintillaEditView@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR ?_refCount@ScintillaEditView@@1HA 
sub	ecx, 1
mov	DWORD PTR ?_refCount@ScintillaEditView@@1HA, ecx 
jne	$LN9@ScintillaE
cmp	DWORD PTR ?_hLib@ScintillaEditView@@1PAUHINSTANCE__@@A, 0 
je	$LN9@ScintillaE
mov	edx, DWORD PTR ?_hLib@ScintillaEditView@@1PAUHINSTANCE__@@A 
push	edx
call	DWORD PTR __imp__FreeLibrary@4
lea	eax, DWORD PTR _it$5[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
call	?begin@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 2
jmp	SHORT $LN7@ScintillaE
lea	ecx, DWORD PTR _it$5[ebp]
call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ 
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
call	?end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv86[ebp], eax
mov	edx, DWORD PTR tv86[ebp]
mov	DWORD PTR tv205[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 3
mov	eax, DWORD PTR tv205[ebp]
push	eax
lea	ecx, DWORD PTR _it$5[ebp]
call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z 
mov	BYTE PTR $T10[ebp], al
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
movzx	ecx, BYTE PTR $T10[ebp]
test	ecx, ecx
je	$LN5@ScintillaE
lea	edx, DWORD PTR _it2$4[ebp]
push	edx
lea	ecx, DWORD PTR _it$5[ebp]
call	??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ 
mov	ecx, DWORD PTR [eax+4]
call	?begin@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 4
jmp	SHORT $LN4@ScintillaE
lea	ecx, DWORD PTR _it2$4[ebp]
call	??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAEAAV01@XZ 
lea	eax, DWORD PTR $T2[ebp]
push	eax
lea	ecx, DWORD PTR _it$5[ebp]
call	??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ 
mov	ecx, DWORD PTR [eax+4]
call	?end@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv153[ebp], eax
mov	ecx, DWORD PTR tv153[ebp]
mov	DWORD PTR tv208[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 5
mov	edx, DWORD PTR tv208[ebp]
push	edx
lea	ecx, DWORD PTR _it2$4[ebp]
call	??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z 
mov	BYTE PTR $T9[ebp], al
mov	BYTE PTR __$EHRec$[ebp+8], 4
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
movzx	eax, BYTE PTR $T9[ebp]
test	eax, eax
je	SHORT $LN2@ScintillaE
lea	ecx, DWORD PTR _it2$4[ebp]
call	??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHUStyle@@@1@XZ 
cmp	DWORD PTR [eax+24], 0
je	SHORT $LN1@ScintillaE
lea	ecx, DWORD PTR _it2$4[ebp]
call	??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHUStyle@@@1@XZ 
mov	ecx, DWORD PTR [eax+24]
mov	DWORD PTR $T7[ebp], ecx
mov	edx, DWORD PTR $T7[ebp]
push	edx
call	??_V@YAXPAX@Z				
add	esp, 4
jmp	SHORT $LN3@ScintillaE
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR _it2$4[ebp]
call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
lea	ecx, DWORD PTR _it$5[ebp]
call	??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ 
mov	eax, DWORD PTR [eax+4]
mov	DWORD PTR $T6[ebp], eax
mov	ecx, DWORD PTR $T6[ebp]
mov	DWORD PTR $T8[ebp], ecx
cmp	DWORD PTR $T8[ebp], 0
je	SHORT $LN11@ScintillaE
push	1
mov	ecx, DWORD PTR $T8[ebp]
call	??_G?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAEPAXI@Z
mov	DWORD PTR tv199[ebp], eax
jmp	SHORT $LN12@ScintillaE
mov	DWORD PTR tv199[ebp], 0
jmp	$LN6@ScintillaE
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR _it$5[ebp]
call	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
call	??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1Window@@UAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1ScintillaEditView@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1Window@@UAE@XZ			
ENDP
__unwindfunclet$??1ScintillaEditView@@UAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
jmp	??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ
ENDP
__unwindfunclet$??1ScintillaEditView@@UAE@XZ$2 PROC
lea	ecx, DWORD PTR _it$5[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??1ScintillaEditView@@UAE@XZ$3 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??1ScintillaEditView@@UAE@XZ$4 PROC
lea	ecx, DWORD PTR _it2$4[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??1ScintillaEditView@@UAE@XZ$5 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1ScintillaEditView@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-92]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1ScintillaEditView@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0ScintillaEditView@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0ScintillaEditView@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0Window@@QAE@XZ			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7ScintillaEditView@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+16], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+20], 0
mov	eax, DWORD PTR _this$[ebp]
mov	BYTE PTR [eax+44], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	BYTE PTR [ecx+45], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
call	??0?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+88], -1
mov	eax, DWORD PTR ?_refCount@ScintillaEditView@@1HA 
add	eax, 1
mov	DWORD PTR ?_refCount@ScintillaEditView@@1HA, eax 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0ScintillaEditView@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1Window@@UAE@XZ			
ENDP
__unwindfunclet$??0ScintillaEditView@@QAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 48					
jmp	??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ
ENDP
__ehhandler$??0ScintillaEditView@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0ScintillaEditView@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??__E_Tuple_alloc@std@@YAXXZ PROC			
push	ebp
mov	ebp, esp
push	ecx
xor	eax, eax
mov	BYTE PTR $T1[ebp], al
mov	esp, ebp
pop	ebp
ret	0
ENDP
??__Eignore@std@@YAXXZ PROC				
push	ebp
mov	ebp, esp
mov	ecx, OFFSET _ignore
call	??0_Ignore@std@@QAE@XZ			
pop	ebp
ret	0
ENDP
??0_Ignore@std@@QAE@XZ PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_GTabBar@@UAEPAXI@Z PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1TabBar@@UAE@XZ			
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?getCurrentTabIndex@TabBar@@QBEHXZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
push	0
push	4875					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SendMessageW@16
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1TabBar@@UAE@XZ PROC					
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1TabBar@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7TabBar@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1Window@@UAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1TabBar@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1Window@@UAE@XZ			
ENDP
__ehhandler$??1TabBar@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1TabBar@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?getUnicodeMode@Buffer@@QBE?AW4UniMode@@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+60]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?isReadOnly@Buffer@@QBE_NXZ PROC			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
movzx	ecx, BYTE PTR [eax+68]
test	ecx, ecx
jne	SHORT $LN3@isReadOnly
mov	edx, DWORD PTR _this$[ebp]
movzx	eax, BYTE PTR [edx+136]
test	eax, eax
jne	SHORT $LN3@isReadOnly
mov	DWORD PTR tv70[ebp], 0
jmp	SHORT $LN4@isReadOnly
mov	DWORD PTR tv70[ebp], 1
mov	al, BYTE PTR tv70[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Orphan_range@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IBEXPAUMenuItemUnit@@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Orphan_range@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IBEXPAUMenuItemUnit@@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 12					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	??0_Lockit@std@@QAE@H@Z			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
cmp	DWORD PTR __Pnext$[ebp], 0
je	SHORT $LN6@Orphan_ran
mov	eax, DWORD PTR __Pnext$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __First$[ebp]
jb	SHORT $LN2@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR __Last$[ebp]
cmp	eax, DWORD PTR [edx+8]
jae	SHORT $LN3@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [ecx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
jmp	SHORT $LN1@Orphan_ran
mov	edx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [edx]
call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	
mov	eax, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [eax]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
jmp	SHORT $LN5@Orphan_ran
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Lock$[ebp]
call	??1_Lockit@std@@QAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?_Orphan_range@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IBEXPAUMenuItemUnit@@0@Z$0 PROC
lea	ecx, DWORD PTR __Lock$[ebp]
jmp	??1_Lockit@std@@QAE@XZ			
ENDP
__ehhandler$?_Orphan_range@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IBEXPAUMenuItemUnit@@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-16]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IBEXPAUMenuItemUnit@@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Xlen@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
call	?_Xlength_error@std@@YAXPBD@Z		
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Tidy@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN2@Tidy
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEXPAUMenuItemUnit@@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
mov	eax, ecx
cdq
mov	ecx, 60					
idiv	ecx
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEXPAUMenuItemUnit@@I@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+12], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Reserve@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unused_capacity@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Count$[ebp]
jae	SHORT $LN4@Reserve
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QBEIXZ 
mov	esi, eax
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QBEIXZ 
sub	esi, eax
cmp	esi, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Reserve
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IBEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow_to@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IBEII@Z 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reallocate@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEXI@Z 
pop	esi
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Reallocate@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Reallocate@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEXI@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 16					
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEPAUMenuItemUnit@@I@Z 
mov	DWORD PTR __Ptr$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAUMenuItemUnit@@@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEPAUMenuItemUnit@@PAU2@00@Z 
jmp	SHORT $LN5@Reallocate
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEXPAUMenuItemUnit@@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN8@Reallocate
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$?_Reallocate@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEXI@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QBEIXZ 
mov	DWORD PTR __Size$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+4], 0
je	SHORT $LN1@Reallocate
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEXPAUMenuItemUnit@@0@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+4]
cdq
mov	ecx, 60					
idiv	ecx
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T2[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEXPAUMenuItemUnit@@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
imul	edx, DWORD PTR __Count$[ebp], 60
add	edx, DWORD PTR __Ptr$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+12], edx
imul	ecx, DWORD PTR __Size$[ebp], 60
add	ecx, DWORD PTR __Ptr$[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Ptr$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__ehhandler$?_Reallocate@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEXI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-36]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEXI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Inside@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IBE_NPBUMenuItemUnit@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Ptr$[ebp]
cmp	ecx, DWORD PTR [eax+8]
jae	SHORT $LN3@Inside
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
cmp	eax, DWORD PTR __Ptr$[ebp]
ja	SHORT $LN3@Inside
mov	DWORD PTR tv76[ebp], 1
jmp	SHORT $LN4@Inside
mov	DWORD PTR tv76[ebp], 0
mov	al, BYTE PTR tv76[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Grow_to@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IBEII@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?capacity@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QBEIXZ 
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QBEIXZ 
mov	ecx, DWORD PTR __Capacity$[ebp]
shr	ecx, 1
sub	eax, ecx
cmp	eax, DWORD PTR __Capacity$[ebp]
jae	SHORT $LN4@Grow_to
mov	DWORD PTR tv73[ebp], 0
jmp	SHORT $LN5@Grow_to
mov	edx, DWORD PTR __Capacity$[ebp]
shr	edx, 1
add	edx, DWORD PTR __Capacity$[ebp]
mov	DWORD PTR tv73[ebp], edx
mov	eax, DWORD PTR tv73[ebp]
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR __Capacity$[ebp]
cmp	ecx, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Grow_to
mov	edx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Capacity$[ebp], edx
mov	eax, DWORD PTR __Capacity$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Destroy@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEXPAUMenuItemUnit@@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@YAXPAUMenuItemUnit@@0AAU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@0@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
?max_size@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@2@XZ 
mov	ecx, eax
call	?max_size@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QBEIXZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
sub	eax, DWORD PTR [ecx+4]
cdq
mov	ecx, 60					
idiv	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Unused_capacity@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+8]
cdq
mov	ecx, 60					
idiv	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
?capacity@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+4]
cdq
mov	ecx, 60					
idiv	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?push_back@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEX$$QAUMenuItemUnit@@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	??$addressof@UMenuItemUnit@@@std@@YAPAUMenuItemUnit@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Inside@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IBE_NPBUMenuItemUnit@@@Z 
movzx	ecx, al
test	ecx, ecx
je	$LN4@push_back
mov	edx, DWORD PTR __Val$[ebp]
push	edx
call	??$addressof@UMenuItemUnit@@@std@@YAPAUMenuItemUnit@@AAU1@@Z 
add	esp, 4
mov	ecx, DWORD PTR _this$[ebp]
sub	eax, DWORD PTR [ecx+4]
cdq
mov	ecx, 60					
idiv	ecx
mov	DWORD PTR __Idx$1[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+8]
cmp	ecx, DWORD PTR [eax+12]
jne	SHORT $LN3@push_back
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reserve@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEXI@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IBEXPAUMenuItemUnit@@0@Z 
imul	eax, DWORD PTR __Idx$1[ebp], 60
mov	ecx, DWORD PTR _this$[ebp]
add	eax, DWORD PTR [ecx+4]
push	eax
call	??$forward@UMenuItemUnit@@@std@@YA$$QAUMenuItemUnit@@AAU1@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@2@XZ 
mov	ecx, eax
call	??$construct@UMenuItemUnit@@U1@@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEXPAUMenuItemUnit@@$$QAU2@@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 60					
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], eax
jmp	SHORT $LN5@push_back
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+8]
cmp	ecx, DWORD PTR [eax+12]
jne	SHORT $LN1@push_back
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reserve@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IAEXI@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@IBEXPAUMenuItemUnit@@0@Z 
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	??$forward@UMenuItemUnit@@@std@@YA$$QAUMenuItemUnit@@AAU1@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@2@XZ 
mov	ecx, eax
call	??$construct@UMenuItemUnit@@U1@@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEXPAUMenuItemUnit@@$$QAU2@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
add	edx, 60					
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], edx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$allocator@UMenuItemUnit@@@std@@QAE@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAE@ABV?$allocator@UMenuItemUnit@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$vector@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
push	1
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??0_Container_proxy@std@@QAE@XZ		
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_val@U?$_Simple_types@UMenuItemUnit@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@UMenuItemUnit@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAE@ABV?$allocator@UMenuItemUnit@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAE@ABV?$allocator@UMenuItemUnit@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_val@U?$_Simple_types@UMenuItemUnit@@@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAE@ABV?$allocator@UMenuItemUnit@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@UMenuItemUnit@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAE@ABV?$allocator@UMenuItemUnit@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@UMenuItemUnit@@V?$allocator@UMenuItemUnit@@@std@@@std@@@std@@QAE@ABV?$allocator@UMenuItemUnit@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_val@U?$_Simple_types@UMenuItemUnit@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@UMenuItemUnit@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Container_base12@std@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@UMenuItemUnit@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??1?$_Vector_val@U?$_Simple_types@UMenuItemUnit@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@UMenuItemUnit@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_val@U?$_Simple_types@UMenuItemUnit@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@UMenuItemUnit@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Container_base12@std@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@UMenuItemUnit@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??0?$_Vector_val@U?$_Simple_types@UMenuItemUnit@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@UMenuItemUnit@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?max_size@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@V?$allocator@UMenuItemUnit@@@std@@@std@@SAIABV?$allocator@UMenuItemUnit@@@2@@Z 
add	esp, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEXPAUMenuItemUnit@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@UMenuItemUnit@@@std@@QAEXPAUMenuItemUnit@@I@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAEPAUMenuItemUnit@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@UMenuItemUnit@@@std@@QAEPAUMenuItemUnit@@I@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@UMenuItemUnit@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@UMenuItemUnit@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@V?$allocator@UMenuItemUnit@@@std@@@std@@SAIABV?$allocator@UMenuItemUnit@@@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$allocator@UMenuItemUnit@@@std@@QBEIXZ 
pop	ebp
ret	0
ENDP
?max_size@?$allocator@UMenuItemUnit@@@std@@QBEIXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, 71582788				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?allocate@?$allocator@UMenuItemUnit@@@std@@QAEPAUMenuItemUnit@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@UMenuItemUnit@@@std@@YAPAUMenuItemUnit@@IPAU1@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@UMenuItemUnit@@@std@@QAEXPAUMenuItemUnit@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@UMenuItemUnit@@@std@@QAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?getFindHistory@NppParameters@@QAEAAUFindHistory@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 2488				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?getWorkingDir@NppParameters@@QBEPB_WXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 117552				
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
?removeTransparent@NppParameters@@QAEXPAUHWND__@@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	-20					
mov	eax, DWORD PTR _hwnd$[ebp]
push	eax
call	DWORD PTR __imp__GetWindowLongW@8
and	eax, -524289				
push	eax
push	-20					
mov	ecx, DWORD PTR _hwnd$[ebp]
push	ecx
call	DWORD PTR __imp__SetWindowLongW@12
mov	esp, ebp
pop	ebp
ret	4
ENDP
?SetTransparent@NppParameters@@QAEXPAUHWND__@@H@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+116984], 0
jne	SHORT $LN3@SetTranspa
jmp	SHORT $LN4@SetTranspa
push	-20					
mov	ecx, DWORD PTR _hwnd$[ebp]
push	ecx
call	DWORD PTR __imp__GetWindowLongW@8
or	eax, 524288				
push	eax
push	-20					
mov	edx, DWORD PTR _hwnd$[ebp]
push	edx
call	DWORD PTR __imp__SetWindowLongW@12
cmp	DWORD PTR _percent$[ebp], 255		
jle	SHORT $LN2@SetTranspa
mov	DWORD PTR _percent$[ebp], 255		
cmp	DWORD PTR _percent$[ebp], 0
jge	SHORT $LN1@SetTranspa
mov	DWORD PTR _percent$[ebp], 0
push	2
mov	eax, DWORD PTR _percent$[ebp]
push	eax
push	0
mov	ecx, DWORD PTR _hwnd$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+116984]
call	eax
mov	esp, ebp
pop	ebp
ret	8
ENDP
?isTransparentAvailable@NppParameters@@QBE_NXZ PROC	
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+116984], 0
je	SHORT $LN3@isTranspar
mov	DWORD PTR tv66[ebp], 1
jmp	SHORT $LN4@isTranspar
mov	DWORD PTR tv66[ebp], 0
mov	al, BYTE PTR tv66[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?getGlobalOverrideStyle@NppParameters@@QAEAAUGlobalOverride@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 764				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?getMiscStylerArray@NppParameters@@QAEAAUStyleArray@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 115608				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?getLStylerArray@NppParameters@@QAEAAULexerStylerArray@@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 2964				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?getInstance@NppParameters@@SAPAV1@XZ PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR ?_pSelf@NppParameters@@0PAV1@A 
pop	ebp
ret	0
ENDP
?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 12					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	??0_Lockit@std@@QAE@H@Z			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
cmp	DWORD PTR __Pnext$[ebp], 0
je	SHORT $LN6@Orphan_ran
mov	eax, DWORD PTR __Pnext$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN6@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx+8]
cmp	eax, DWORD PTR __First$[ebp]
jb	SHORT $LN2@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR __Last$[ebp]
cmp	eax, DWORD PTR [edx+8]
jae	SHORT $LN3@Orphan_ran
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [ecx]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	DWORD PTR __Pnext$[ebp], eax
jmp	SHORT $LN1@Orphan_ran
mov	edx, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [edx]
call	?_Clrcont@_Iterator_base12@std@@QAEXXZ	
mov	eax, DWORD PTR __Pnext$[ebp]
mov	ecx, DWORD PTR [eax]
call	?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ 
mov	ecx, DWORD PTR __Pnext$[ebp]
mov	edx, DWORD PTR [eax]
mov	DWORD PTR [ecx], edx
jmp	SHORT $LN5@Orphan_ran
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Lock$[ebp]
call	??1_Lockit@std@@QAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z$0 PROC
lea	ecx, DWORD PTR __Lock$[ebp]
jmp	??1_Lockit@std@@QAE@XZ			
ENDP
__ehhandler$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-16]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET ??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@
call	?_Xlength_error@std@@YAXPBD@Z		
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN2@Tidy
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
mov	eax, ecx
cdq
mov	ecx, 28					
idiv	ecx
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+12], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Count$[ebp]
jae	SHORT $LN4@Reserve
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ 
mov	esi, eax
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ 
sub	esi, eax
cmp	esi, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Reserve
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ 
add	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z 
pop	esi
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 16					
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z 
mov	DWORD PTR __Ptr$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??$_Umove@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PAV21@00@Z 
jmp	SHORT $LN5@Reallocate
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN8@Reallocate
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z$1
mov	DWORD PTR __$EHRec$[ebp+12], -1
mov	ecx, DWORD PTR _this$[ebp]
call	?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ 
mov	DWORD PTR __Size$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+4], 0
je	SHORT $LN1@Reallocate
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+4]
cdq
mov	ecx, 28					
idiv	ecx
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T2[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
imul	edx, DWORD PTR __Count$[ebp], 28
add	edx, DWORD PTR __Ptr$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+12], edx
imul	ecx, DWORD PTR __Size$[ebp], 28
add	ecx, DWORD PTR __Ptr$[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Ptr$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__ehhandler$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-36]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Reallocate@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Ptr$[ebp]
cmp	ecx, DWORD PTR [eax+8]
jae	SHORT $LN3@Inside
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
cmp	eax, DWORD PTR __Ptr$[ebp]
ja	SHORT $LN3@Inside
mov	DWORD PTR tv76[ebp], 1
jmp	SHORT $LN4@Inside
mov	DWORD PTR tv76[ebp], 0
mov	al, BYTE PTR tv76[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Grow_to@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEII@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ 
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ 
mov	ecx, DWORD PTR __Capacity$[ebp]
shr	ecx, 1
sub	eax, ecx
cmp	eax, DWORD PTR __Capacity$[ebp]
jae	SHORT $LN4@Grow_to
mov	DWORD PTR tv73[ebp], 0
jmp	SHORT $LN5@Grow_to
mov	edx, DWORD PTR __Capacity$[ebp]
shr	edx, 1
add	edx, DWORD PTR __Capacity$[ebp]
mov	DWORD PTR tv73[ebp], edx
mov	eax, DWORD PTR tv73[ebp]
mov	DWORD PTR __Capacity$[ebp], eax
mov	ecx, DWORD PTR __Capacity$[ebp]
cmp	ecx, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@Grow_to
mov	edx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Capacity$[ebp], edx
mov	eax, DWORD PTR __Capacity$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@YAXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@0AAU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@0@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
?clear@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+8]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+8], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ 
mov	ecx, eax
call	?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
sub	eax, DWORD PTR [ecx+4]
cdq
mov	ecx, 28					
idiv	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
?rend@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?rend@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 40					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T4[ebp], 0
sub	esp, 12					
mov	eax, esp
mov	DWORD PTR $T3[ebp], esp
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv95[ebp], eax
mov	ecx, DWORD PTR tv95[ebp]
mov	DWORD PTR tv87[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z 
mov	DWORD PTR tv88[ebp], eax
mov	edx, DWORD PTR tv88[ebp]
mov	DWORD PTR tv90[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 2
mov	eax, DWORD PTR tv90[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	ecx, DWORD PTR $T4[ebp]
or	ecx, 1
mov	DWORD PTR $T4[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?rend@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ$0 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?rend@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ$1 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?rend@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ$2 PROC
mov	eax, DWORD PTR $T4[ebp]
and	eax, 1
je	$LN6@rend
and	DWORD PTR $T4[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?rend@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-44]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?rend@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?rbegin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?rbegin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 40					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T4[ebp], 0
sub	esp, 12					
mov	eax, esp
mov	DWORD PTR $T3[ebp], esp
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ 
mov	DWORD PTR tv95[ebp], eax
mov	ecx, DWORD PTR tv95[ebp]
mov	DWORD PTR tv87[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@1@@Z 
mov	DWORD PTR tv88[ebp], eax
mov	edx, DWORD PTR tv88[ebp]
mov	DWORD PTR tv90[ebp], edx
mov	DWORD PTR __$EHRec$[ebp+8], 2
mov	eax, DWORD PTR tv90[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z
mov	ecx, DWORD PTR $T4[ebp]
or	ecx, 1
mov	DWORD PTR $T4[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?rbegin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ$0 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?rbegin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ$1 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?rbegin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ$2 PROC
mov	eax, DWORD PTR $T4[ebp]
and	eax, 1
je	$LN6@rbegin
and	DWORD PTR $T4[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?rbegin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-44]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?rbegin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$reverse_iterator@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@end
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?end@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@PAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@PBU_Container_base12@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@begin
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?begin@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBE?AV?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Unused_capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+8]
cdq
mov	ecx, 28					
idiv	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
?capacity@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
sub	eax, DWORD PTR [ecx+4]
cdq
mov	ecx, 28					
idiv	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?push_back@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAEX$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Inside@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBE_NPBV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@@Z 
movzx	ecx, al
test	ecx, ecx
je	$LN4@push_back
mov	edx, DWORD PTR __Val$[ebp]
push	edx
call	??$addressof@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z 
add	esp, 4
mov	ecx, DWORD PTR _this$[ebp]
sub	eax, DWORD PTR [ecx+4]
cdq
mov	ecx, 28					
idiv	ecx
mov	DWORD PTR __Idx$1[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+8]
cmp	ecx, DWORD PTR [eax+12]
jne	SHORT $LN3@push_back
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z 
imul	eax, DWORD PTR __Idx$1[ebp], 28
mov	ecx, DWORD PTR _this$[ebp]
add	eax, DWORD PTR [ecx+4]
push	eax
call	??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
add	eax, 28					
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], eax
jmp	SHORT $LN5@push_back
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+8]
cmp	ecx, DWORD PTR [eax+12]
jne	SHORT $LN1@push_back
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Reserve@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IAEXI@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_range@?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@IBEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@0@Z 
mov	eax, DWORD PTR __Val$[ebp]
push	eax
call	??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ 
mov	ecx, eax
call	??$construct@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@$$QAV21@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
add	edx, 28					
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], edx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$vector@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
push	1
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??0_Container_proxy@std@@QAE@XZ		
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@std@@@std@@QAE@ABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Container_base12@std@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Container_base12@std@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?max_size@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z 
add	esp, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@V?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@SAIABV?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ 
pop	ebp
ret	0
ENDP
?max_size@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, 153391689				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?allocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YAPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@IPAV10@@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAEXPAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@2@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?getLexerStylerByName@LexerStylerArray@@QAEPAULexerStyler@@PB_W@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _lexerName$[ebp], 0
jne	SHORT $LN5@getLexerSt
xor	eax, eax
jmp	SHORT $LN6@getLexerSt
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN4@getLexerSt
mov	eax, DWORD PTR _i$1[ebp]
add	eax, 1
mov	DWORD PTR _i$1[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _i$1[ebp]
cmp	edx, DWORD PTR [ecx+112640]
jge	SHORT $LN2@getLexerSt
mov	eax, DWORD PTR _lexerName$[ebp]
push	eax
imul	ecx, DWORD PTR _i$1[ebp], 1408
add	ecx, DWORD PTR _this$[ebp]
call	?getLexerName@LexerStyler@@QBEPB_WXZ	
push	eax
call	DWORD PTR __imp__lstrcmpW@8
test	eax, eax
jne	SHORT $LN1@getLexerSt
imul	eax, DWORD PTR _i$1[ebp], 1408
add	eax, DWORD PTR _this$[ebp]
jmp	SHORT $LN6@getLexerSt
jmp	SHORT $LN3@getLexerSt
xor	eax, eax
mov	esp, ebp
pop	ebp
ret	4
ENDP
?getLexerName@LexerStyler@@QBEPB_WXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 1324				
call	?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
?getStylerIndexByName@StyleArray@@QBEHPB_W@Z PROC	
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _name$[ebp], 0
jne	SHORT $LN5@getStylerI
or	eax, -1
jmp	SHORT $LN6@getStylerI
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN4@getStylerI
mov	eax, DWORD PTR _i$1[ebp]
add	eax, 1
mov	DWORD PTR _i$1[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _i$1[ebp]
cmp	edx, DWORD PTR [ecx+1320]
jge	SHORT $LN2@getStylerI
mov	eax, DWORD PTR _name$[ebp]
push	eax
imul	ecx, DWORD PTR _i$1[ebp], 44
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+ecx+4]
push	eax
call	DWORD PTR __imp__lstrcmpW@8
test	eax, eax
jne	SHORT $LN1@getStylerI
mov	eax, DWORD PTR _i$1[ebp]
jmp	SHORT $LN6@getStylerI
jmp	SHORT $LN3@getStylerI
or	eax, -1
mov	esp, ebp
pop	ebp
ret	4
ENDP
?getStylerIndexByID@StyleArray@@QAEHH@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR _i$1[ebp], 0
jmp	SHORT $LN4@getStylerI
mov	eax, DWORD PTR _i$1[ebp]
add	eax, 1
mov	DWORD PTR _i$1[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR _i$1[ebp]
cmp	edx, DWORD PTR [ecx+1320]
jge	SHORT $LN2@getStylerI
imul	eax, DWORD PTR _i$1[ebp], 44
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+eax]
cmp	edx, DWORD PTR _id$[ebp]
jne	SHORT $LN1@getStylerI
mov	eax, DWORD PTR _i$1[ebp]
jmp	SHORT $LN5@getStylerI
jmp	SHORT $LN3@getStylerI
or	eax, -1
mov	esp, ebp
pop	ebp
ret	4
ENDP
?getStyler@StyleArray@@QAEAAUStyle@@H@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR _index$[ebp], 0
jl	SHORT $LN3@getStyler
cmp	DWORD PTR _index$[ebp], 30		
jl	SHORT $LN4@getStyler
push	402					
push	OFFSET ??_C@_1II@OPKJGEDH@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@
push	OFFSET ??_C@_1FG@JDMMPFCP@?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DM?$AA?5?$AAS?$AAC?$AAE?$AA_?$AAS?$AAT?$AAY?$AAL?$AAE?$AA_@
call	__wassert
add	esp, 12					
imul	eax, DWORD PTR _index$[ebp], 44
add	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?isEnable@GlobalOverride@@QBE_NXZ PROC			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
movzx	ecx, BYTE PTR [eax]
test	ecx, ecx
jne	SHORT $LN3@isEnable
mov	edx, DWORD PTR _this$[ebp]
movzx	eax, BYTE PTR [edx+1]
test	eax, eax
jne	SHORT $LN3@isEnable
mov	ecx, DWORD PTR _this$[ebp]
movzx	edx, BYTE PTR [ecx+2]
test	edx, edx
jne	SHORT $LN3@isEnable
mov	eax, DWORD PTR _this$[ebp]
movzx	ecx, BYTE PTR [eax+3]
test	ecx, ecx
jne	SHORT $LN3@isEnable
mov	edx, DWORD PTR _this$[ebp]
movzx	eax, BYTE PTR [edx+4]
test	eax, eax
jne	SHORT $LN3@isEnable
mov	ecx, DWORD PTR _this$[ebp]
movzx	edx, BYTE PTR [ecx+5]
test	edx, edx
jne	SHORT $LN3@isEnable
mov	eax, DWORD PTR _this$[ebp]
movzx	ecx, BYTE PTR [eax+6]
test	ecx, ecx
jne	SHORT $LN3@isEnable
mov	DWORD PTR tv85[ebp], 0
jmp	SHORT $LN4@isEnable
mov	DWORD PTR tv85[ebp], 1
mov	al, BYTE PTR tv85[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0Style@@QAE@ABU0@@Z PROC				
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0Style@@QAE@ABU0@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _style$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _style$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _style$[ebp]
mov	edx, DWORD PTR [ecx+8]
mov	DWORD PTR [eax+8], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _style$[ebp]
mov	edx, DWORD PTR [ecx+12]
mov	DWORD PTR [eax+12], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _style$[ebp]
mov	edx, DWORD PTR [ecx+16]
mov	DWORD PTR [eax+16], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _style$[ebp]
mov	edx, DWORD PTR [ecx+20]
mov	DWORD PTR [eax+20], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _style$[ebp]
mov	edx, DWORD PTR [ecx+28]
mov	DWORD PTR [eax+28], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _style$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	DWORD PTR [eax+24], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _style$[ebp]
mov	edx, DWORD PTR [ecx+36]
mov	DWORD PTR [eax+36], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _style$[ebp]
mov	edx, DWORD PTR [ecx+32]
mov	DWORD PTR [eax+32], edx
mov	eax, DWORD PTR _style$[ebp]
cmp	DWORD PTR [eax+40], 0
je	SHORT $LN2@Style
push	28					
call	??2@YAPAXI@Z				
add	esp, 4
mov	DWORD PTR $T3[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], 0
cmp	DWORD PTR $T3[ebp], 0
je	SHORT $LN5@Style
mov	ecx, DWORD PTR _style$[ebp]
mov	edx, DWORD PTR [ecx+40]
push	edx
mov	ecx, DWORD PTR $T3[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z 
mov	DWORD PTR tv128[ebp], eax
jmp	SHORT $LN6@Style
mov	DWORD PTR tv128[ebp], 0
mov	eax, DWORD PTR tv128[ebp]
mov	DWORD PTR $T2[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR $T2[ebp]
mov	DWORD PTR [ecx+40], edx
jmp	SHORT $LN3@Style
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+40], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0Style@@QAE@ABU0@@Z$0 PROC
mov	eax, DWORD PTR $T3[ebp]
push	eax
call	??3@YAXPAX@Z				
pop	ecx
ret	0
ENDP
__ehhandler$??0Style@@QAE@ABU0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0Style@@QAE@ABU0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1Style@@QAE@XZ PROC					
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+40], 0
je	SHORT $LN2@Style
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+40]
mov	DWORD PTR $T1[ebp], edx
mov	eax, DWORD PTR $T1[ebp]
mov	DWORD PTR $T2[ebp], eax
cmp	DWORD PTR $T2[ebp], 0
je	SHORT $LN4@Style
push	1
mov	ecx, DWORD PTR $T2[ebp]
call	??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z
mov	DWORD PTR tv71[ebp], eax
jmp	SHORT $LN2@Style
mov	DWORD PTR tv71[ebp], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?scaleY@DPIManager@@QAEHH@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	96					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _y$[ebp]
push	edx
call	DWORD PTR __imp__MulDiv@12
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Tidy@?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@IAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+4], 0
je	SHORT $LN2@Tidy
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+8]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Destroy@?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@IAEXPAPAUHMENU__@@0@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+12]
sub	ecx, DWORD PTR [eax+4]
sar	ecx, 2
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@std@@QAEXPAPAUHMENU__@@I@Z 
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+12], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Destroy@?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@IAEXPAPAUHMENU__@@0@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Alval$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@2@XZ 
lea	ecx, DWORD PTR __Alval$[ebp]
push	ecx
mov	edx, DWORD PTR __Last$[ebp]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@YAXPAPAUHMENU__@@0AAU?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@0@@Z 
add	esp, 12					
mov	esp, ebp
pop	ebp
ret	8
ENDP
??1?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@IAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$allocator@PAUHMENU__@@@std@@QAE@XZ	
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUHMENU__@@@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ 
push	1
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??0_Container_proxy@std@@QAE@XZ		
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_Vector_val@U?$_Simple_types@PAUHMENU__@@@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@PAUHMENU__@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUHMENU__@@@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUHMENU__@@@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_Vector_val@U?$_Simple_types@PAUHMENU__@@@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUHMENU__@@@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_Vector_val@U?$_Simple_types@PAUHMENU__@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUHMENU__@@@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@@std@@QAE@ABV?$allocator@PAUHMENU__@@@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_Vector_val@U?$_Simple_types@PAUHMENU__@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_Vector_val@U?$_Simple_types@PAUHMENU__@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Container_base12@std@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@PAUHMENU__@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??1?$_Vector_val@U?$_Simple_types@PAUHMENU__@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@PAUHMENU__@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_Vector_val@U?$_Simple_types@PAUHMENU__@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_Vector_val@U?$_Simple_types@PAUHMENU__@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Container_base12@std@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+4], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+8], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+12], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@PAUHMENU__@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??0?$_Vector_val@U?$_Simple_types@PAUHMENU__@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@PAUHMENU__@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@std@@QAEXPAPAUHMENU__@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@PAUHMENU__@@@std@@QAEXPAPAUHMENU__@@I@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$_Wrap_alloc@V?$allocator@PAUHMENU__@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@PAUHMENU__@@@std@@QAE@XZ	
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$allocator@PAUHMENU__@@@std@@QAEXPAPAUHMENU__@@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@PAUHMENU__@@@std@@QAE@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?display@ContextMenu@@QBEXABUtagPOINT@@@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
push	0
mov	edx, DWORD PTR _p$[ebp]
mov	eax, DWORD PTR [edx+4]
push	eax
mov	ecx, DWORD PTR _p$[ebp]
mov	edx, DWORD PTR [ecx]
push	edx
push	0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
call	DWORD PTR __imp__TrackPopupMenu@28
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0ContextMenu@@QAE@XZ PROC				
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0ContextMenu@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
call	??0?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0ContextMenu@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 8
jmp	??1?$vector@PAUHMENU__@@V?$allocator@PAUHMENU__@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0ContextMenu@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0ContextMenu@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GMenuItemUnit@@QAEPAXI@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1MenuItemUnit@@QAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0MenuItemUnit@@QAE@ABU0@@Z PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0MenuItemUnit@@QAE@ABU0@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ___that$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR ___that$[ebp]
add	eax, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR ___that$[ebp]
add	ecx, 32					
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 32					
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0MenuItemUnit@@QAE@ABU0@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??0MenuItemUnit@@QAE@ABU0@@Z$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 32					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$??0MenuItemUnit@@QAE@ABU0@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0MenuItemUnit@@QAE@ABU0@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1MenuItemUnit@@QAE@XZ PROC				
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1MenuItemUnit@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	BYTE PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 32					
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1MenuItemUnit@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__unwindfunclet$??1MenuItemUnit@@QAE@XZ$1 PROC
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 32					
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ENDP
__ehhandler$??1MenuItemUnit@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1MenuItemUnit@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GStaticDialog@@UAEPAXI@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1StaticDialog@@UAE@XZ			
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?destroy@StaticDialog@@UAEXXZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
push	1
push	2036					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
call	DWORD PTR __imp__SendMessageW@16
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__DestroyWindow@4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?isCheckedOrNot@StaticDialog@@QBE_NH@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
push	0
push	0
push	240					
mov	eax, DWORD PTR _checkControlID$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetDlgItem@8
push	eax
call	DWORD PTR __imp__SendMessageW@16
cmp	eax, 1
jne	SHORT $LN3@isCheckedO
mov	DWORD PTR tv78[ebp], 1
jmp	SHORT $LN4@isCheckedO
mov	DWORD PTR tv78[ebp], 0
mov	al, BYTE PTR tv78[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?getTopPoint@StaticDialog@@QBE?AUtagPOINT@@PAUHWND__@@_N@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 32					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR _rc$[ebp]
push	eax
mov	ecx, DWORD PTR _hwnd$[ebp]
push	ecx
call	DWORD PTR __imp__GetWindowRect@8
movzx	edx, BYTE PTR _isLeft$[ebp]
test	edx, edx
je	SHORT $LN2@getTopPoin
mov	eax, DWORD PTR _rc$[ebp]
mov	DWORD PTR _p$[ebp], eax
jmp	SHORT $LN1@getTopPoin
mov	ecx, DWORD PTR _rc$[ebp+8]
mov	DWORD PTR _p$[ebp], ecx
mov	edx, DWORD PTR _rc$[ebp+4]
mov	DWORD PTR _p$[ebp+4], edx
lea	eax, DWORD PTR _p$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__ScreenToClient@8
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR _p$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _p$[ebp+4]
mov	DWORD PTR [eax+4], edx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?isCreated@StaticDialog@@UBE_NXZ PROC			
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+12], 0
je	SHORT $LN3@isCreated
mov	DWORD PTR tv70[ebp], 1
jmp	SHORT $LN4@isCreated
mov	DWORD PTR tv70[ebp], 0
mov	al, BYTE PTR tv70[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1StaticDialog@@UAE@XZ PROC				
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1StaticDialog@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7StaticDialog@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?isCreated@StaticDialog@@UBE_NXZ	
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN2@StaticDial
push	0
push	-21					
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__SetWindowLongW@12
mov	ecx, DWORD PTR _this$[ebp]
call	?destroy@StaticDialog@@UAEXXZ		
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1Window@@UAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1StaticDialog@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1Window@@UAE@XZ			
ENDP
__ehhandler$??1StaticDialog@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1StaticDialog@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0StaticDialog@@QAE@XZ PROC				
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0StaticDialog@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0Window@@QAE@XZ			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7StaticDialog@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0StaticDialog@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1Window@@UAE@XZ			
ENDP
__ehhandler$??0StaticDialog@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0StaticDialog@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??_GWindow@@UAEPAXI@Z PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1Window@@UAE@XZ			
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?getFocus@Window@@QBEXXZ PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__SetFocus@4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?getHParent@Window@@QBEPAUHWND__@@XZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+8]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?getHSelf@Window@@QBEPAUHWND__@@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+12]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?isVisible@Window@@UBE_NXZ PROC				
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__IsWindowVisible@4
test	eax, eax
je	SHORT $LN3@isVisible
mov	BYTE PTR tv68[ebp], 1
jmp	SHORT $LN4@isVisible
mov	BYTE PTR tv68[ebp], 0
mov	al, BYTE PTR tv68[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?getHeight@Window@@UBEHXZ PROC				
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR _rc$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetClientRect@8
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__IsWindowVisible@4
cmp	eax, 1
jne	SHORT $LN1@getHeight
mov	eax, DWORD PTR _rc$[ebp+12]
sub	eax, DWORD PTR _rc$[ebp+4]
jmp	SHORT $LN2@getHeight
xor	eax, eax
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?getWidth@Window@@UBEHXZ PROC				
push	ebp
mov	ebp, esp
sub	esp, 24					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
mov	DWORD PTR __$ArrayPad$[ebp], eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR _rc$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetClientRect@8
mov	eax, DWORD PTR _rc$[ebp+8]
sub	eax, DWORD PTR _rc$[ebp]
mov	ecx, DWORD PTR __$ArrayPad$[ebp]
xor	ecx, ebp
call	@__security_check_cookie@4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?getWindowRect@Window@@UBEXAAUtagRECT@@@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _rc$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetWindowRect@8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?getClientRect@Window@@UBEXAAUtagRECT@@@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _rc$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__GetClientRect@8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?redraw@Window@@UBEX_N@Z PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	1
push	0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__InvalidateRect@12
movzx	edx, BYTE PTR _forceUpdate$[ebp]
test	edx, edx
je	SHORT $LN2@redraw
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
call	DWORD PTR __imp__UpdateWindow@4
mov	esp, ebp
pop	ebp
ret	4
ENDP
?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	1
mov	eax, DWORD PTR _rc$[ebp]
mov	ecx, DWORD PTR _rc$[ebp]
mov	edx, DWORD PTR [eax+12]
sub	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _rc$[ebp]
mov	ecx, DWORD PTR _rc$[ebp]
mov	edx, DWORD PTR [eax+8]
sub	edx, DWORD PTR [ecx]
push	edx
mov	eax, DWORD PTR _rc$[ebp]
mov	ecx, DWORD PTR [eax+4]
push	ecx
mov	edx, DWORD PTR _rc$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+12]
push	edx
call	DWORD PTR __imp__MoveWindow@24
push	0
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+24]
call	eax
mov	esp, ebp
pop	ebp
ret	4
ENDP
?reSizeTo@Window@@UAEXAAUtagRECT@@@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	1
mov	eax, DWORD PTR _rc$[ebp]
mov	ecx, DWORD PTR [eax+12]
push	ecx
mov	edx, DWORD PTR _rc$[ebp]
mov	eax, DWORD PTR [edx+8]
push	eax
mov	ecx, DWORD PTR _rc$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
mov	eax, DWORD PTR _rc$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__MoveWindow@24
push	0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+24]
call	eax
mov	esp, ebp
pop	ebp
ret	4
ENDP
?display@Window@@UBEX_N@Z PROC				
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
movzx	eax, BYTE PTR _toShow$[ebp]
test	eax, eax
je	SHORT $LN3@display
mov	DWORD PTR tv67[ebp], 5
jmp	SHORT $LN4@display
mov	DWORD PTR tv67[ebp], 0
mov	ecx, DWORD PTR tv67[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
push	eax
call	DWORD PTR __imp__ShowWindow@8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR _hInst$[ebp]
mov	DWORD PTR [eax+4], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR _parent$[ebp]
mov	DWORD PTR [edx+8], eax
mov	esp, ebp
pop	ebp
ret	8
ENDP
??1Window@@UAE@XZ PROC					
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7Window@@6B@
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0Window@@QAE@XZ PROC					
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7Window@@6B@
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+12], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
call	?_Xout_of_range@std@@YAXPBD@Z		
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
call	?_Xlength_error@std@@YAXPBD@Z		
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
movzx	eax, BYTE PTR __Built$[ebp]
test	eax, eax
jne	SHORT $LN4@Tidy
jmp	SHORT $LN3@Tidy
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+24], 8
jb	SHORT $LN3@Tidy
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR __Ptr$1[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
push	ecx
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z 
cmp	DWORD PTR __Newsize$[ebp], 0
jbe	SHORT $LN1@Tidy
mov	eax, DWORD PTR __Newsize$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$1[ebp]
push	ecx
call	??$addressof@_W@std@@YAPA_WAA_W@Z	
add	esp, 4
push	eax
mov	edx, DWORD PTR _this$[ebp]
add	edx, 4
push	edx
call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR __Ptr$1[ebp]
push	edx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+24], 7
mov	edx, DWORD PTR __Newsize$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp+8], 1
cmp	DWORD PTR __P2$[ebp+8], 0
jne	SHORT $LN3@Pdif
mov	DWORD PTR tv70[ebp], 0
jmp	SHORT $LN4@Pdif
lea	eax, DWORD PTR __P1$[ebp]
push	eax
lea	ecx, DWORD PTR __P2$[ebp]
call	??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z 
mov	DWORD PTR tv70[ebp], eax
mov	ecx, DWORD PTR tv70[ebp]
mov	DWORD PTR $T2[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __P2$[ebp]
call	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __P1$[ebp]
call	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR $T2[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 PROC
lea	ecx, DWORD PTR __P1$[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 PROC
lea	ecx, DWORD PTR __P2$[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR __Ptr$[ebp], 0
je	SHORT $LN2@Inside
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
cmp	DWORD PTR __Ptr$[ebp], eax
jb	SHORT $LN2@Inside
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+20]
lea	eax, DWORD PTR [eax+edx*2]
cmp	eax, DWORD PTR __Ptr$[ebp]
ja	SHORT $LN3@Inside
xor	al, al
jmp	SHORT $LN4@Inside
jmp	SHORT $LN4@Inside
mov	al, 1
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Newsize$[ebp]
jae	SHORT $LN6@Grow
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
cmp	ecx, DWORD PTR __Newsize$[ebp]
jae	SHORT $LN5@Grow
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
mov	ecx, DWORD PTR __Newsize$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z 
jmp	SHORT $LN4@Grow
movzx	edx, BYTE PTR __Trim$[ebp]
test	edx, edx
je	SHORT $LN3@Grow
cmp	DWORD PTR __Newsize$[ebp], 8
jae	SHORT $LN3@Grow
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Newsize$[ebp]
cmp	ecx, DWORD PTR [eax+20]
jae	SHORT $LN9@Grow
mov	edx, DWORD PTR __Newsize$[ebp]
mov	DWORD PTR tv129[ebp], edx
jmp	SHORT $LN10@Grow
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR tv129[ebp], ecx
mov	edx, DWORD PTR tv129[ebp]
push	edx
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z 
jmp	SHORT $LN4@Grow
cmp	DWORD PTR __Newsize$[ebp], 0
jne	SHORT $LN4@Grow
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z 
cmp	DWORD PTR __Newsize$[ebp], 0
jbe	SHORT $LN11@Grow
mov	DWORD PTR tv136[ebp], 1
jmp	SHORT $LN12@Grow
mov	DWORD PTR tv136[ebp], 0
mov	al, BYTE PTR tv136[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
xor	eax, eax
mov	WORD PTR $T1[ebp], ax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Newsize$[ebp]
mov	DWORD PTR [ecx+20], edx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Newsize$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
call	?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 16					
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Newsize$[ebp]
or	eax, 7
mov	DWORD PTR __Newres$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Newres$[ebp]
jae	SHORT $LN9@Copy
mov	ecx, DWORD PTR __Newsize$[ebp]
mov	DWORD PTR __Newres$[ebp], ecx
jmp	SHORT $LN8@Copy
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+24]
shr	ecx, 1
mov	eax, DWORD PTR __Newres$[ebp]
xor	edx, edx
mov	esi, 3
div	esi
cmp	ecx, eax
ja	SHORT $LN7@Copy
jmp	SHORT $LN8@Copy
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+24]
shr	ecx, 1
sub	eax, ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+24], eax
ja	SHORT $LN5@Copy
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
shr	ecx, 1
mov	edx, DWORD PTR _this$[ebp]
add	ecx, DWORD PTR [edx+24]
mov	DWORD PTR __Newres$[ebp], ecx
jmp	SHORT $LN8@Copy
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
mov	DWORD PTR __Newres$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	eax, DWORD PTR __Newres$[ebp]
add	eax, 1
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z 
mov	DWORD PTR __Ptr$[ebp], eax
jmp	SHORT $LN12@Copy
mov	DWORD PTR __$EHRec$[ebp], esp
mov	edx, DWORD PTR __Newsize$[ebp]
mov	DWORD PTR __Newres$[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+12], 2
mov	eax, DWORD PTR __Newres$[ebp]
add	eax, 1
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z 
mov	DWORD PTR __Ptr$[ebp], eax
jmp	SHORT $LN14@Copy
push	0
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN17@Copy
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], 1
jmp	SHORT __tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$2
mov	DWORD PTR __$EHRec$[ebp+12], 1
mov	eax, $LN19@Copy
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$3
mov	DWORD PTR __$EHRec$[ebp+12], -1
cmp	DWORD PTR __Oldlen$[ebp], 0
jbe	SHORT $LN1@Copy
mov	edx, DWORD PTR __Oldlen$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
push	eax
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
push	0
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z 
lea	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
add	edx, 4
push	edx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
mov	ecx, eax
call	??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Newres$[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR __Oldlen$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z 
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-36]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$allocator@_W@std@@QAE@ABV01@@Z	
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 12					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
lea	eax, DWORD PTR $T3[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?get_allocator@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV?$allocator@_W@2@XZ 
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __Off$[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	12					
ENDP
__unwindfunclet$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@substr
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ 
ret	0
ENDP
__ehhandler$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-16]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?substr@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE?AV12@II@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEI_WI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	1
mov	eax, DWORD PTR __Off$[ebp]
push	eax
lea	ecx, DWORD PTR __Ch$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?find@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIPB_WII@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR __Count$[ebp], 0
je	SHORT $LN7@find
push	1896					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	
add	esp, 12					
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN6@find
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Off$[ebp]
cmp	edx, DWORD PTR [ecx+20]
ja	SHORT $LN6@find
mov	eax, DWORD PTR __Off$[ebp]
jmp	$LN8@find
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Off$[ebp]
cmp	ecx, DWORD PTR [eax+20]
jae	$LN5@find
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, DWORD PTR __Off$[ebp]
mov	DWORD PTR __Nm$[ebp], eax
mov	ecx, DWORD PTR __Count$[ebp]
cmp	ecx, DWORD PTR __Nm$[ebp]
ja	$LN5@find
mov	edx, DWORD PTR __Count$[ebp]
sub	edx, 1
mov	eax, DWORD PTR __Nm$[ebp]
sub	eax, edx
mov	DWORD PTR __Nm$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ 
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
mov	DWORD PTR __Vptr$1[ebp], edx
jmp	SHORT $LN4@find
mov	eax, DWORD PTR __Uptr$2[ebp]
sub	eax, DWORD PTR __Vptr$1[ebp]
sar	eax, 1
add	eax, 1
mov	ecx, DWORD PTR __Nm$[ebp]
sub	ecx, eax
mov	DWORD PTR __Nm$[ebp], ecx
mov	edx, DWORD PTR __Uptr$2[ebp]
add	edx, 2
mov	DWORD PTR __Vptr$1[ebp], edx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR __Nm$[ebp]
push	ecx
mov	edx, DWORD PTR __Vptr$1[ebp]
push	edx
call	?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z 
add	esp, 12					
mov	DWORD PTR __Uptr$2[ebp], eax
cmp	DWORD PTR __Uptr$2[ebp], 0
je	SHORT $LN5@find
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR __Uptr$2[ebp]
push	edx
call	?compare@?$char_traits@_W@std@@SAHPB_W0I@Z 
add	esp, 12					
test	eax, eax
jne	SHORT $LN1@find
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ 
mov	ecx, DWORD PTR __Uptr$2[ebp]
sub	ecx, eax
sar	ecx, 1
mov	eax, ecx
jmp	SHORT $LN8@find
jmp	SHORT $LN3@find
mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB 
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?empty@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBE_NXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+20], 0
jne	SHORT $LN3@empty
mov	DWORD PTR tv70[ebp], 1
jmp	SHORT $LN4@empty
mov	DWORD PTR tv70[ebp], 0
mov	al, BYTE PTR tv70[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
mov	ecx, eax
call	?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ 
mov	DWORD PTR __Num$[ebp], eax
cmp	DWORD PTR __Num$[ebp], 1
ja	SHORT $LN3@max_size
mov	DWORD PTR tv75[ebp], 1
jmp	SHORT $LN4@max_size
mov	ecx, DWORD PTR __Num$[ebp]
sub	ecx, 1
mov	DWORD PTR tv75[ebp], ecx
mov	eax, DWORD PTR tv75[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+20]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?length@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+20]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
??A?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAA_WI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
cmp	ecx, DWORD PTR __Off$[ebp]
jae	SHORT $LN1@operator
push	1685					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DM@GMPLOCPK@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [eax+edx*2]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+20]
lea	eax, DWORD PTR [eax+edx*2]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@end
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR $T2[ebp]
or	ecx, 1
mov	DWORD PTR $T2[ebp], ecx
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN4@begin
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ret	0
ENDP
__ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 160				
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 3
lea	eax, DWORD PTR __Last2$[ebp]
push	eax
lea	ecx, DWORD PTR __First2$[ebp]
call	??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z 
movzx	ecx, al
test	ecx, ecx
je	$LN2@replace
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T11[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv300[ebp], eax
mov	eax, DWORD PTR tv300[ebp]
mov	DWORD PTR tv265[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 4
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T8[ebp], esp
lea	edx, DWORD PTR __Last$[ebp]
push	edx
call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv301[ebp], eax
mov	eax, DWORD PTR tv301[ebp]
mov	DWORD PTR tv269[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 5
mov	BYTE PTR __$EHRec$[ebp+8], 3
call	?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z 
add	esp, 24					
mov	DWORD PTR tv266[ebp], eax
mov	ecx, DWORD PTR tv266[ebp]
push	ecx
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ 
mov	DWORD PTR tv303[ebp], eax
mov	eax, DWORD PTR tv303[ebp]
mov	DWORD PTR tv271[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 6
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T5[ebp], esp
mov	edx, DWORD PTR tv271[ebp]
push	edx
call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv304[ebp], eax
mov	eax, DWORD PTR tv304[ebp]
mov	DWORD PTR tv274[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 7
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T6[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv305[ebp], eax
mov	eax, DWORD PTR tv305[ebp]
mov	DWORD PTR tv278[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 8
mov	BYTE PTR __$EHRec$[ebp+8], 6
call	?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z 
add	esp, 24					
mov	DWORD PTR tv275[ebp], eax
mov	ecx, DWORD PTR tv275[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T3[ebp]
call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
jmp	$LN1@replace
lea	edx, DWORD PTR __First2$[ebp]
push	edx
lea	ecx, DWORD PTR __Last2$[ebp]
call	??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z 
push	eax
lea	ecx, DWORD PTR __First2$[ebp]
call	??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ 
push	eax
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T4[ebp], esp
lea	eax, DWORD PTR __First$[ebp]
push	eax
call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv307[ebp], eax
mov	ecx, DWORD PTR tv307[ebp]
mov	DWORD PTR tv282[ebp], ecx
mov	BYTE PTR __$EHRec$[ebp+8], 9
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T10[ebp], esp
lea	edx, DWORD PTR __Last$[ebp]
push	edx
call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv308[ebp], eax
mov	eax, DWORD PTR tv308[ebp]
mov	DWORD PTR tv286[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 10		
mov	BYTE PTR __$EHRec$[ebp+8], 3
call	?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z 
add	esp, 24					
mov	DWORD PTR tv283[ebp], eax
mov	ecx, DWORD PTR tv283[ebp]
push	ecx
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ 
mov	DWORD PTR tv310[ebp], eax
mov	eax, DWORD PTR tv310[ebp]
mov	DWORD PTR tv288[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 11		
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T9[ebp], esp
mov	edx, DWORD PTR tv288[ebp]
push	edx
call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv311[ebp], eax
mov	eax, DWORD PTR tv311[ebp]
mov	DWORD PTR tv291[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 12		
sub	esp, 12					
mov	ecx, esp
mov	DWORD PTR $T7[ebp], esp
lea	edx, DWORD PTR __First$[ebp]
push	edx
call	??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
mov	DWORD PTR tv312[ebp], eax
mov	eax, DWORD PTR tv312[ebp]
mov	DWORD PTR tv295[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 13		
mov	BYTE PTR __$EHRec$[ebp+8], 11		
call	?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z 
add	esp, 24					
mov	DWORD PTR tv292[ebp], eax
mov	ecx, DWORD PTR tv292[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z 
mov	BYTE PTR __$EHRec$[ebp+8], 3
lea	ecx, DWORD PTR $T2[ebp]
call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR $T12[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+8], 2
lea	ecx, DWORD PTR __First$[ebp]
call	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 1
lea	ecx, DWORD PTR __Last$[ebp]
call	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	BYTE PTR __$EHRec$[ebp+8], 0
lea	ecx, DWORD PTR __First2$[ebp]
call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Last2$[ebp]
call	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR $T12[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	48					
ENDP
__unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 PROC
lea	ecx, DWORD PTR __Last2$[ebp]
jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 PROC
lea	ecx, DWORD PTR __First2$[ebp]
jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 PROC
lea	ecx, DWORD PTR __Last$[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 PROC
lea	ecx, DWORD PTR __First$[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 PROC
mov	ecx, DWORD PTR $T11[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 PROC
mov	ecx, DWORD PTR $T8[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 PROC
lea	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 PROC
mov	ecx, DWORD PTR $T5[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 PROC
mov	ecx, DWORD PTR $T6[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 PROC
mov	ecx, DWORD PTR $T4[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 PROC
mov	ecx, DWORD PTR $T10[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 PROC
lea	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 PROC
mov	ecx, DWORD PTR $T9[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 PROC
mov	ecx, DWORD PTR $T7[ebp]
jmp	??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-164]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR __Count$[ebp], 0
je	SHORT $LN9@replace
push	1449					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z 
movzx	edx, al
test	edx, edx
je	SHORT $LN8@replace
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Ptr$[ebp]
sub	ecx, eax
sar	ecx, 1
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
mov	eax, DWORD PTR __N0$[ebp]
push	eax
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z 
jmp	$LN11@replace
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
cmp	eax, DWORD PTR __Off$[ebp]
jae	SHORT $LN7@replace
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+20]
sub	edx, DWORD PTR __Off$[ebp]
cmp	edx, DWORD PTR __N0$[ebp]
jae	SHORT $LN6@replace
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
sub	ecx, DWORD PTR __Off$[ebp]
mov	DWORD PTR __N0$[ebp], ecx
or	edx, -1
sub	edx, DWORD PTR __Count$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
sub	ecx, DWORD PTR __N0$[ebp]
cmp	edx, ecx
ja	SHORT $LN5@replace
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, DWORD PTR __N0$[ebp]
sub	eax, DWORD PTR __Off$[ebp]
mov	DWORD PTR __Nm$[ebp], eax
mov	ecx, DWORD PTR __Count$[ebp]
cmp	ecx, DWORD PTR __N0$[ebp]
jae	SHORT $LN4@replace
mov	edx, DWORD PTR __Nm$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
mov	eax, DWORD PTR __N0$[ebp]
lea	ecx, DWORD PTR [edx+eax*2]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [eax+edx*2]
mov	ecx, DWORD PTR __Count$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
cmp	DWORD PTR __Count$[ebp], 0
ja	SHORT $LN2@replace
cmp	DWORD PTR __N0$[ebp], 0
jbe	$LN3@replace
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
add	ecx, DWORD PTR __Count$[ebp]
sub	ecx, DWORD PTR __N0$[ebp]
mov	DWORD PTR __Num$[ebp], ecx
push	0
mov	edx, DWORD PTR __Num$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN3@replace
mov	ecx, DWORD PTR __N0$[ebp]
cmp	ecx, DWORD PTR __Count$[ebp]
jae	SHORT $LN1@replace
mov	edx, DWORD PTR __Nm$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
mov	eax, DWORD PTR __N0$[ebp]
lea	ecx, DWORD PTR [edx+eax*2]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [eax+edx*2]
mov	ecx, DWORD PTR __Count$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [eax+edx*2]
push	eax
call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Num$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	16					
ENDP
?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
cmp	ecx, DWORD PTR __Off$[ebp]
jb	SHORT $LN13@replace
mov	ecx, DWORD PTR __Right$[ebp]
call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Roff$[ebp]
jae	SHORT $LN14@replace
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, DWORD PTR __Off$[ebp]
cmp	eax, DWORD PTR __N0$[ebp]
jae	SHORT $LN12@replace
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+20]
sub	edx, DWORD PTR __Off$[ebp]
mov	DWORD PTR __N0$[ebp], edx
mov	ecx, DWORD PTR __Right$[ebp]
call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
sub	eax, DWORD PTR __Roff$[ebp]
mov	DWORD PTR __Num$[ebp], eax
mov	eax, DWORD PTR __Num$[ebp]
cmp	eax, DWORD PTR __Count$[ebp]
jae	SHORT $LN11@replace
mov	ecx, DWORD PTR __Num$[ebp]
mov	DWORD PTR __Count$[ebp], ecx
or	edx, -1
sub	edx, DWORD PTR __Count$[ebp]
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
sub	ecx, DWORD PTR __N0$[ebp]
cmp	edx, ecx
ja	SHORT $LN10@replace
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, DWORD PTR __N0$[ebp]
sub	eax, DWORD PTR __Off$[ebp]
mov	DWORD PTR __Nm$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+20]
add	edx, DWORD PTR __Count$[ebp]
sub	edx, DWORD PTR __N0$[ebp]
mov	DWORD PTR __Newsize$[ebp], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
cmp	ecx, DWORD PTR __Newsize$[ebp]
jae	SHORT $LN9@replace
push	0
mov	edx, DWORD PTR __Newsize$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z 
mov	eax, DWORD PTR _this$[ebp]
cmp	eax, DWORD PTR __Right$[ebp]
je	SHORT $LN8@replace
mov	ecx, DWORD PTR __Nm$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [eax+edx*2]
mov	ecx, DWORD PTR __N0$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
mov	eax, DWORD PTR __Count$[ebp]
lea	ecx, DWORD PTR [edx+eax*2]
push	ecx
call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	edx, DWORD PTR __Count$[ebp]
push	edx
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ 
mov	ecx, DWORD PTR __Roff$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
jmp	$LN7@replace
mov	eax, DWORD PTR __Count$[ebp]
cmp	eax, DWORD PTR __N0$[ebp]
ja	SHORT $LN6@replace
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	edx, DWORD PTR __Roff$[ebp]
lea	eax, DWORD PTR [eax+edx*2]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Nm$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
mov	eax, DWORD PTR __N0$[ebp]
lea	ecx, DWORD PTR [edx+eax*2]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [eax+edx*2]
mov	ecx, DWORD PTR __Count$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
jmp	$LN7@replace
mov	eax, DWORD PTR __Roff$[ebp]
cmp	eax, DWORD PTR __Off$[ebp]
ja	SHORT $LN4@replace
mov	ecx, DWORD PTR __Nm$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [eax+edx*2]
mov	ecx, DWORD PTR __N0$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
mov	eax, DWORD PTR __Count$[ebp]
lea	ecx, DWORD PTR [edx+eax*2]
push	ecx
call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	edx, DWORD PTR __Count$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Roff$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
jmp	$LN7@replace
mov	eax, DWORD PTR __Off$[ebp]
add	eax, DWORD PTR __N0$[ebp]
cmp	eax, DWORD PTR __Roff$[ebp]
ja	SHORT $LN2@replace
mov	ecx, DWORD PTR __Nm$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [eax+edx*2]
mov	ecx, DWORD PTR __N0$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
mov	eax, DWORD PTR __Count$[ebp]
lea	ecx, DWORD PTR [edx+eax*2]
push	ecx
call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	edx, DWORD PTR __Count$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Roff$[ebp]
add	ecx, DWORD PTR __Count$[ebp]
sub	ecx, DWORD PTR __N0$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
jmp	$LN7@replace
mov	eax, DWORD PTR __N0$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Roff$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Nm$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Off$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
mov	eax, DWORD PTR __N0$[ebp]
lea	ecx, DWORD PTR [edx+eax*2]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [eax+edx*2]
mov	ecx, DWORD PTR __Count$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Count$[ebp]
sub	eax, DWORD PTR __N0$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Roff$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
mov	eax, DWORD PTR __Count$[ebp]
lea	ecx, DWORD PTR [edx+eax*2]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [eax+edx*2]
mov	ecx, DWORD PTR __N0$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Newsize$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	20					
ENDP
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
cmp	ecx, DWORD PTR __Off$[ebp]
jae	SHORT $LN4@erase
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, DWORD PTR __Off$[ebp]
cmp	eax, DWORD PTR __Count$[ebp]
ja	SHORT $LN3@erase
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z 
jmp	SHORT $LN2@erase
cmp	DWORD PTR __Count$[ebp], 0
jbe	SHORT $LN2@erase
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	edx, DWORD PTR __Off$[ebp]
lea	eax, DWORD PTR [eax+edx*2]
mov	DWORD PTR __Ptr$2[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+20]
sub	edx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Newsize$1[ebp], edx
mov	eax, DWORD PTR __Newsize$1[ebp]
sub	eax, DWORD PTR __Off$[ebp]
push	eax
mov	ecx, DWORD PTR __Count$[ebp]
mov	edx, DWORD PTR __Ptr$2[ebp]
lea	eax, DWORD PTR [edx+ecx*2]
push	eax
mov	ecx, DWORD PTR __Ptr$2[ebp]
push	ecx
call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	edx, DWORD PTR __Newsize$1[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
cmp	ecx, DWORD PTR __Off$[ebp]
jae	SHORT $LN1@erase
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ 
mov	edx, DWORD PTR __Off$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	1168					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
call	?length@?$char_traits@_W@std@@SAIPB_W@Z	
add	esp, 4
push	eax
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR __Count$[ebp], 0
je	SHORT $LN3@assign
push	1151					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z 
movzx	edx, al
test	edx, edx
je	SHORT $LN2@assign
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Ptr$[ebp]
sub	ecx, eax
sar	ecx, 1
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z 
jmp	SHORT $LN4@assign
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN1@assign
mov	edx, DWORD PTR __Count$[ebp]
push	edx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
push	eax
call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR __Right$[ebp]
call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Roff$[ebp]
jae	SHORT $LN5@assign
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ 
mov	ecx, DWORD PTR __Right$[ebp]
call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
sub	eax, DWORD PTR __Roff$[ebp]
mov	DWORD PTR __Num$[ebp], eax
mov	eax, DWORD PTR __Count$[ebp]
cmp	eax, DWORD PTR __Num$[ebp]
jae	SHORT $LN4@assign
mov	ecx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Num$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	edx, DWORD PTR __Right$[ebp]
jne	SHORT $LN3@assign
mov	eax, DWORD PTR __Roff$[ebp]
add	eax, DWORD PTR __Num$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z 
mov	ecx, DWORD PTR __Roff$[ebp]
push	ecx
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z 
jmp	SHORT $LN2@assign
push	0
mov	edx, DWORD PTR __Num$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN2@assign
mov	ecx, DWORD PTR __Num$[ebp]
push	ecx
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ 
mov	edx, DWORD PTR __Roff$[ebp]
lea	eax, DWORD PTR [eax+edx*2]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
push	eax
call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Num$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB 
push	eax
push	0
mov	ecx, DWORD PTR __Right$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	1086					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
call	?length@?$char_traits@_W@std@@SAIPB_W@Z	
add	esp, 4
push	eax
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR __Count$[ebp], 0
je	SHORT $LN4@append
push	1066					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??$_Debug_pointer@_W@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z 
movzx	edx, al
test	edx, edx
je	SHORT $LN3@append
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR __Ptr$[ebp]
sub	ecx, eax
sar	ecx, 1
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z 
jmp	SHORT $LN6@append
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB 
sub	ecx, DWORD PTR [eax+20]
cmp	ecx, DWORD PTR __Count$[ebp]
ja	SHORT $LN2@append
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ 
cmp	DWORD PTR __Count$[ebp], 0
jbe	SHORT $LN1@append
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
add	eax, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Num$[ebp], eax
push	0
mov	ecx, DWORD PTR __Num$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z 
movzx	edx, al
test	edx, edx
je	SHORT $LN1@append
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+20]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	eax, DWORD PTR __Num$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR __Right$[ebp]
call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Roff$[ebp]
jae	SHORT $LN4@append
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ 
mov	ecx, DWORD PTR __Right$[ebp]
call	?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ 
sub	eax, DWORD PTR __Roff$[ebp]
mov	DWORD PTR __Num$[ebp], eax
mov	eax, DWORD PTR __Num$[ebp]
cmp	eax, DWORD PTR __Count$[ebp]
jae	SHORT $LN3@append
mov	ecx, DWORD PTR __Num$[ebp]
mov	DWORD PTR __Count$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB 
sub	eax, DWORD PTR [edx+20]
cmp	eax, DWORD PTR __Count$[ebp]
ja	SHORT $LN2@append
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ 
cmp	DWORD PTR __Count$[ebp], 0
jbe	SHORT $LN1@append
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+20]
add	edx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Num$[ebp], edx
push	0
mov	eax, DWORD PTR __Num$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN1@append
mov	edx, DWORD PTR __Count$[ebp]
push	edx
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ 
mov	ecx, DWORD PTR __Roff$[ebp]
lea	edx, DWORD PTR [eax+ecx*2]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+20]
lea	eax, DWORD PTR [eax+edx*2]
push	eax
call	?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Num$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	12					
ENDP
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB 
push	eax
push	0
mov	ecx, DWORD PTR __Right$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	eax, DWORD PTR __Right$[ebp]
je	SHORT $LN2@operator
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
push	eax
lea	edx, DWORD PTR $T2[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
push	eax
call	??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z 
add	esp, 8
movzx	eax, al
test	eax, eax
je	SHORT $LN1@operator
xor	ecx, ecx
je	SHORT $LN1@operator
push	0
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z 
lea	edx, DWORD PTR $T1[ebp]
push	edx
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z 
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	0
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
cmp	DWORD PTR [eax+24], 8
jae	SHORT $LN2@Assign_rv
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [ecx+20]
add	edx, 1
push	edx
mov	eax, DWORD PTR __Right$[ebp]
add	eax, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
push	ecx
call	?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z 
add	esp, 12					
jmp	SHORT $LN1@Assign_rv
mov	edx, DWORD PTR __Right$[ebp]
add	edx, 4
push	edx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 4
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
mov	ecx, eax
call	??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z 
mov	edx, DWORD PTR __Right$[ebp]
mov	DWORD PTR [edx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [ecx+20]
mov	DWORD PTR [eax+20], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [ecx+24]
mov	DWORD PTR [eax+24], edx
push	0
push	0
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 32					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	eax, DWORD PTR __Right$[ebp]
je	$LN4@operator
push	0
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z 
xor	ecx, ecx
je	SHORT $LN3@operator
lea	edx, DWORD PTR $T6[ebp]
push	edx
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z 
lea	eax, DWORD PTR $T5[ebp]
push	eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
push	eax
call	??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z 
add	esp, 8
movzx	edx, al
test	edx, edx
je	SHORT $LN2@operator
sub	esp, 12					
mov	eax, esp
mov	DWORD PTR $T3[ebp], esp
push	eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ 
mov	DWORD PTR tv170[ebp], eax
mov	ecx, DWORD PTR tv170[ebp]
mov	DWORD PTR tv166[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
sub	esp, 12					
mov	edx, esp
mov	DWORD PTR $T2[ebp], esp
push	edx
mov	ecx, DWORD PTR __Right$[ebp]
call	?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ 
mov	DWORD PTR tv171[ebp], eax
mov	eax, DWORD PTR tv171[ebp]
mov	DWORD PTR tv169[ebp], eax
mov	BYTE PTR __$EHRec$[ebp+8], 1
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z 
jmp	SHORT $LN4@operator
mov	ecx, DWORD PTR __Right$[ebp]
push	ecx
call	??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 PROC
mov	ecx, DWORD PTR $T3[ebp]
jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 PROC
mov	ecx, DWORD PTR $T2[ebp]
jmp	??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
ENDP
__ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-36]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z 
mov	ecx, DWORD PTR __Right$[ebp]
push	ecx
call	??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z 
add	esp, 4
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@$$QAV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$allocator@_W@std@@QAE@XZ		
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z 
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Al$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z 
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __Roff$[ebp]
push	edx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	16					
ENDP
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@IIABV?$allocator@_W@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$allocator@_W@std@@QAE@XZ		
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T3[ebp]
push	eax
lea	ecx, DWORD PTR $T2[ebp]
push	ecx
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ 
mov	ecx, eax
call	?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z 
mov	edx, DWORD PTR ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB 
push	edx
push	0
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ 
push	1
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??0_Container_proxy@std@@QAE@XZ		
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Container_base12@std@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+24], 8
jb	SHORT $LN3@Myptr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	??$addressof@_W@std@@YAPA_WAA_W@Z	
add	esp, 4
mov	DWORD PTR tv72[ebp], eax
jmp	SHORT $LN4@Myptr
mov	eax, DWORD PTR _this$[ebp]
add	eax, 4
mov	DWORD PTR tv72[ebp], eax
mov	eax, DWORD PTR tv72[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+24], 8
jb	SHORT $LN3@Myptr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	??$addressof@_W@std@@YAPA_WAA_W@Z	
add	esp, 4
mov	DWORD PTR tv72[ebp], eax
jmp	SHORT $LN4@Myptr
mov	eax, DWORD PTR _this$[ebp]
add	eax, 4
mov	DWORD PTR tv72[ebp], eax
mov	eax, DWORD PTR tv72[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Container_base12@std@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+20], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+24], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z 
add	esp, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@_W@std@@QAEPA_WI@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Right$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@_W@std@@QAE@ABV01@@Z	
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@_W@std@@QAE@XZ		
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
lea	ecx, DWORD PTR $T1[ebp]
push	ecx
call	?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z 
add	esp, 8
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z PROC 
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
push	eax
mov	ecx, DWORD PTR __Al$[ebp]
call	?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$allocator@_W@std@@QBEIXZ	
pop	ebp
ret	0
ENDP
?max_size@?$allocator@_W@std@@QBEIXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, 2147483647				
mov	esp, ebp
pop	ebp
ret	0
ENDP
?allocate@?$allocator@_W@std@@QAEPA_WI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@_W@std@@YAPA_WIPA_W@Z	
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@_W@std@@QAE@ABV01@@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$allocator@_W@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$allocator@_W@std@@QAE@ABV01@@Z	
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??_G_System_error_category@std@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1_System_error_category@std@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1_System_error_category@std@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1_System_error_category@std@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Generic_error_category@std@@UAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Generic_error_category@std@@UAE@XZ
ENDP
__ehhandler$??1_System_error_category@std@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Errval$[ebp]
push	eax
call	?_Syserror_map@std@@YAPBDH@Z		
add	esp, 4
test	eax, eax
je	SHORT $LN2@default_er
call	?generic_category@std@@YAABVerror_category@1@XZ 
push	eax
mov	ecx, DWORD PTR __Errval$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0error_condition@std@@QAE@HABVerror_category@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	SHORT $LN3@default_er
jmp	SHORT $LN3@default_er
call	?system_category@std@@YAABVerror_category@1@XZ 
push	eax
mov	edx, DWORD PTR __Errval$[ebp]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0error_condition@std@@QAE@HABVerror_category@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR __Errcode$[ebp]
push	eax
call	?_Winerror_map@std@@YAPBDH@Z		
add	esp, 4
mov	DWORD PTR __Name$[ebp], eax
cmp	DWORD PTR __Name$[ebp], 0
je	SHORT $LN3@message
mov	ecx, DWORD PTR __Name$[ebp]
mov	DWORD PTR tv69[ebp], ecx
jmp	SHORT $LN4@message
mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
mov	edx, DWORD PTR tv69[ebp]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN6@message
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ 
ret	0
ENDP
__ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?name@_System_error_category@std@@UBEPBDXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, OFFSET ??_C@_06FHFOAHML@system?$AA@
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0_System_error_category@std@@QAE@XZ PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0_System_error_category@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Generic_error_category@std@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7_System_error_category@std@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Generic_error_category@std@@UAE@XZ
ENDP
__ehhandler$??0_System_error_category@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??_G_Iostream_error_category@std@@UAEPAXI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Iostream_error_category@std@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1_Iostream_error_category@std@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1_Iostream_error_category@std@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Generic_error_category@std@@UAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Generic_error_category@std@@UAE@XZ
ENDP
__ehhandler$??1_Iostream_error_category@std@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
cmp	DWORD PTR __Errcode$[ebp], 1
jne	SHORT $LN2@message
push	OFFSET ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
jmp	SHORT $LN3@message
jmp	SHORT $LN3@message
mov	ecx, DWORD PTR __Errcode$[ebp]
push	ecx
mov	edx, DWORD PTR ___$ReturnUdt$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN6@message
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ 
ret	0
ENDP
__ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?name@_Iostream_error_category@std@@UBEPBDXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, OFFSET ??_C@_08LLGCOLLL@iostream?$AA@
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0_Iostream_error_category@std@@QAE@XZ PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0_Iostream_error_category@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Generic_error_category@std@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7_Iostream_error_category@std@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Generic_error_category@std@@UAE@XZ
ENDP
__ehhandler$??0_Iostream_error_category@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??_G_Generic_error_category@std@@UAEPAXI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Generic_error_category@std@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??1_Generic_error_category@std@@UAE@XZ PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1_Generic_error_category@std@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1error_category@std@@UAE@XZ		
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1error_category@std@@UAE@XZ		
ENDP
__ehhandler$??1_Generic_error_category@std@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR $T2[ebp], 0
mov	eax, DWORD PTR __Errcode$[ebp]
push	eax
call	?_Syserror_map@std@@YAPBDH@Z		
add	esp, 4
mov	DWORD PTR __Name$[ebp], eax
cmp	DWORD PTR __Name$[ebp], 0
je	SHORT $LN3@message
mov	ecx, DWORD PTR __Name$[ebp]
mov	DWORD PTR tv69[ebp], ecx
jmp	SHORT $LN4@message
mov	DWORD PTR tv69[ebp], OFFSET ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
mov	edx, DWORD PTR tv69[ebp]
push	edx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR $T2[ebp]
or	eax, 1
mov	DWORD PTR $T2[ebp], eax
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 PROC
mov	eax, DWORD PTR $T2[ebp]
and	eax, 1
je	$LN6@message
and	DWORD PTR $T2[ebp], -2			
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
jmp	??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ 
ret	0
ENDP
__ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?name@_Generic_error_category@std@@UBEPBDXZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, OFFSET ??_C@_07DCLBNMLN@generic?$AA@
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0_Generic_error_category@std@@QAE@XZ PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0_Generic_error_category@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0error_category@std@@QAE@XZ		
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7_Generic_error_category@std@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1error_category@std@@UAE@XZ		
ENDP
__ehhandler$??0_Generic_error_category@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??8error_condition@std@@QBE_NABV01@@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
push	esi
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR __Right$[ebp]
call	?category@error_condition@std@@QBEABVerror_category@2@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?category@error_condition@std@@QBEABVerror_category@2@XZ 
mov	ecx, eax
call	??8error_category@std@@QBE_NABV01@@Z	
movzx	eax, al
test	eax, eax
je	SHORT $LN3@operator
mov	ecx, DWORD PTR _this$[ebp]
call	?value@error_condition@std@@QBEHXZ	
mov	esi, eax
mov	ecx, DWORD PTR __Right$[ebp]
call	?value@error_condition@std@@QBEHXZ	
cmp	esi, eax
jne	SHORT $LN3@operator
mov	DWORD PTR tv78[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv78[ebp], 0
mov	al, BYTE PTR tv78[ebp]
pop	esi
mov	esp, ebp
pop	ebp
ret	4
ENDP
?category@error_condition@std@@QBEABVerror_category@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+4]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?value@error_condition@std@@QBEHXZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0error_condition@std@@QAE@HABVerror_category@1@@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Val$[ebp]
mov	DWORD PTR [eax], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR __Cat$[ebp]
mov	DWORD PTR [edx+4], eax
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
?category@error_code@std@@QBEABVerror_category@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+4]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?value@error_code@std@@QBEHXZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??_Gerror_category@std@@UAEPAXI@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1error_category@std@@UAE@XZ		
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??8error_category@std@@QBE_NABV01@@Z PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	eax, DWORD PTR __Right$[ebp]
jne	SHORT $LN3@operator
mov	DWORD PTR tv65[ebp], 1
jmp	SHORT $LN4@operator
mov	DWORD PTR tv65[ebp], 0
mov	al, BYTE PTR tv65[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR __Code$[ebp]
call	?category@error_code@std@@QBEABVerror_category@2@XZ 
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??8error_category@std@@QBE_NABV01@@Z	
movzx	eax, al
test	eax, eax
je	SHORT $LN3@equivalent
mov	ecx, DWORD PTR __Code$[ebp]
call	?value@error_code@std@@QBEHXZ		
cmp	eax, DWORD PTR __Errval$[ebp]
jne	SHORT $LN3@equivalent
mov	DWORD PTR tv74[ebp], 1
jmp	SHORT $LN4@equivalent
mov	DWORD PTR tv74[ebp], 0
mov	al, BYTE PTR tv74[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Cond$[ebp]
push	eax
mov	ecx, DWORD PTR __Errval$[ebp]
push	ecx
lea	edx, DWORD PTR $T1[ebp]
push	edx
mov	eax, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [eax]
mov	ecx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+12]
call	eax
mov	ecx, eax
call	??8error_condition@std@@QBE_NABV01@@Z	
mov	esp, ebp
pop	ebp
ret	8
ENDP
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
mov	ecx, DWORD PTR __Errval$[ebp]
push	ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0error_condition@std@@QAE@HABVerror_category@1@@Z 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
??1error_category@std@@UAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0error_category@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], OFFSET ??_7error_category@std@@6B@
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?system_category@std@@YAABVerror_category@1@XZ PROC	
push	ebp
mov	ebp, esp
mov	eax, OFFSET ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A 
pop	ebp
ret	0
ENDP
?generic_category@std@@YAABVerror_category@1@XZ PROC	
push	ebp
mov	ebp, esp
mov	eax, OFFSET ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A 
pop	ebp
ret	0
ENDP
??$_Debug_pointer@_W@std@@YAXPB_W0I@Z PROC		
push	ebp
mov	ebp, esp
cmp	DWORD PTR __First$[ebp], 0
jne	SHORT $LN2@Debug_poin
mov	eax, DWORD PTR __Line$[ebp]
push	eax
mov	ecx, DWORD PTR __File$[ebp]
push	ecx
push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
pop	ebp
ret	0
ENDP
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z PROC		
push	ebp
mov	ebp, esp
cmp	DWORD PTR __First$[ebp], 0
jne	SHORT $LN2@Debug_poin
mov	eax, DWORD PTR __Line$[ebp]
push	eax
mov	ecx, DWORD PTR __File$[ebp]
push	ecx
push	OFFSET ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
pop	ebp
ret	0
ENDP
??0id@locale@std@@QAE@I@Z PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Val$[ebp]
mov	DWORD PTR [eax], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??_Gruntime_error@std@@UAEPAXI@Z PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??1runtime_error@std@@UAE@XZ
mov	eax, DWORD PTR ___flags$[ebp]
and	eax, 1
je	SHORT $LN1@scalar
mov	ecx, DWORD PTR _this$[ebp]
push	ecx
call	??3@YAXPAX@Z				
add	esp, 4
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0runtime_error@std@@QAE@ABV01@@Z PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR ___that$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0exception@std@@QAE@ABV01@@Z		
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0runtime_error@std@@QAE@ABV01@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1exception@std@@UAE@XZ		
ENDP
__ehhandler$??0runtime_error@std@@QAE@ABV01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@ABV01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1runtime_error@std@@UAE@XZ PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1runtime_error@std@@UAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1exception@std@@UAE@XZ		
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1runtime_error@std@@UAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1exception@std@@UAE@XZ		
ENDP
__ehhandler$??1runtime_error@std@@UAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1runtime_error@std@@UAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0runtime_error@std@@QAE@PBD@Z PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0runtime_error@std@@QAE@PBD@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR __Message$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0exception@std@@QAE@ABQBD@Z		
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], OFFSET ??_7runtime_error@std@@6B@
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0runtime_error@std@@QAE@PBD@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1exception@std@@UAE@XZ		
ENDP
__ehhandler$??0runtime_error@std@@QAE@PBD@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0runtime_error@std@@QAE@PBD@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
call	?_Xout_of_range@std@@YAXPBD@Z		
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	OFFSET ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
call	?_Xlength_error@std@@YAXPBD@Z		
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
movzx	eax, BYTE PTR __Built$[ebp]
test	eax, eax
jne	SHORT $LN4@Tidy
jmp	SHORT $LN3@Tidy
mov	ecx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [ecx+24], 16			
jb	SHORT $LN3@Tidy
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR __Ptr$1[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
add	ecx, 4
push	ecx
lea	edx, DWORD PTR $T3[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ 
mov	ecx, eax
call	??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z 
cmp	DWORD PTR __Newsize$[ebp], 0
jbe	SHORT $LN1@Tidy
mov	eax, DWORD PTR __Newsize$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$1[ebp]
push	ecx
call	??$addressof@D@std@@YAPADAAD@Z		
add	esp, 4
push	eax
mov	edx, DWORD PTR _this$[ebp]
add	edx, 4
push	edx
call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z 
add	esp, 12					
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
add	ecx, 1
push	ecx
mov	edx, DWORD PTR __Ptr$1[ebp]
push	edx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ 
mov	ecx, eax
call	?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+24], 15			
mov	edx, DWORD PTR __Newsize$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR __Ptr$[ebp], 0
je	SHORT $LN2@Inside
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
cmp	DWORD PTR __Ptr$[ebp], eax
jb	SHORT $LN2@Inside
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
mov	ecx, DWORD PTR _this$[ebp]
add	eax, DWORD PTR [ecx+20]
cmp	eax, DWORD PTR __Ptr$[ebp]
ja	SHORT $LN3@Inside
xor	al, al
jmp	SHORT $LN4@Inside
jmp	SHORT $LN4@Inside
mov	al, 1
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Newsize$[ebp]
jae	SHORT $LN6@Grow
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
cmp	ecx, DWORD PTR __Newsize$[ebp]
jae	SHORT $LN5@Grow
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
push	eax
mov	ecx, DWORD PTR __Newsize$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z 
jmp	SHORT $LN4@Grow
movzx	edx, BYTE PTR __Trim$[ebp]
test	edx, edx
je	SHORT $LN3@Grow
cmp	DWORD PTR __Newsize$[ebp], 16		
jae	SHORT $LN3@Grow
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Newsize$[ebp]
cmp	ecx, DWORD PTR [eax+20]
jae	SHORT $LN9@Grow
mov	edx, DWORD PTR __Newsize$[ebp]
mov	DWORD PTR tv129[ebp], edx
jmp	SHORT $LN10@Grow
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
mov	DWORD PTR tv129[ebp], ecx
mov	edx, DWORD PTR tv129[ebp]
push	edx
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z 
jmp	SHORT $LN4@Grow
cmp	DWORD PTR __Newsize$[ebp], 0
jne	SHORT $LN4@Grow
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
cmp	DWORD PTR __Newsize$[ebp], 0
jbe	SHORT $LN11@Grow
mov	DWORD PTR tv136[ebp], 1
jmp	SHORT $LN12@Grow
mov	DWORD PTR tv136[ebp], 0
mov	al, BYTE PTR tv136[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	BYTE PTR $T1[ebp], 0
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Newsize$[ebp]
mov	DWORD PTR [eax+20], ecx
lea	edx, DWORD PTR $T1[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
add	eax, DWORD PTR __Newsize$[ebp]
push	eax
call	?assign@?$char_traits@D@std@@SAXAADABD@Z 
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
sub	esp, 16					
push	ebx
push	esi
push	edi
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR __$EHRec$[ebp], esp
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Newsize$[ebp]
or	eax, 15					
mov	DWORD PTR __Newres$[ebp], eax
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Newres$[ebp]
jae	SHORT $LN9@Copy
mov	ecx, DWORD PTR __Newsize$[ebp]
mov	DWORD PTR __Newres$[ebp], ecx
jmp	SHORT $LN8@Copy
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+24]
shr	ecx, 1
mov	eax, DWORD PTR __Newres$[ebp]
xor	edx, edx
mov	esi, 3
div	esi
cmp	ecx, eax
ja	SHORT $LN7@Copy
jmp	SHORT $LN8@Copy
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ 
mov	edx, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [edx+24]
shr	ecx, 1
sub	eax, ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	DWORD PTR [edx+24], eax
ja	SHORT $LN5@Copy
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+24]
shr	ecx, 1
mov	edx, DWORD PTR _this$[ebp]
add	ecx, DWORD PTR [edx+24]
mov	DWORD PTR __Newres$[ebp], ecx
jmp	SHORT $LN8@Copy
mov	ecx, DWORD PTR _this$[ebp]
call	?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ 
mov	DWORD PTR __Newres$[ebp], eax
mov	DWORD PTR __$EHRec$[ebp+12], 0
mov	eax, DWORD PTR __Newres$[ebp]
add	eax, 1
push	eax
lea	ecx, DWORD PTR $T4[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z 
mov	DWORD PTR __Ptr$[ebp], eax
jmp	SHORT $LN12@Copy
mov	DWORD PTR __$EHRec$[ebp], esp
mov	edx, DWORD PTR __Newsize$[ebp]
mov	DWORD PTR __Newres$[ebp], edx
mov	BYTE PTR __$EHRec$[ebp+12], 2
mov	eax, DWORD PTR __Newres$[ebp]
add	eax, 1
push	eax
lea	ecx, DWORD PTR $T3[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ 
mov	ecx, eax
call	?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z 
mov	DWORD PTR __Ptr$[ebp], eax
jmp	SHORT $LN14@Copy
push	0
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z 
push	0
push	0
call	__CxxThrowException@8
mov	eax, $LN17@Copy
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], 1
jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$2
mov	DWORD PTR __$EHRec$[ebp+12], 1
mov	eax, $LN19@Copy
ret	0
mov	DWORD PTR __$EHRec$[ebp+12], -1
jmp	SHORT __tryend$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$3
mov	DWORD PTR __$EHRec$[ebp+12], -1
cmp	DWORD PTR __Oldlen$[ebp], 0
jbe	SHORT $LN1@Copy
mov	edx, DWORD PTR __Oldlen$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
push	eax
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z 
add	esp, 12					
push	0
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z 
lea	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	edx, DWORD PTR _this$[ebp]
add	edx, 4
push	edx
lea	eax, DWORD PTR $T2[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ 
mov	ecx, eax
call	??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Newres$[ebp]
mov	DWORD PTR [ecx+24], edx
mov	eax, DWORD PTR __Oldlen$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
mov	ecx, DWORD PTR __$EHRec$[ebp+4]
mov	DWORD PTR fs:0, ecx
pop	ecx
pop	edi
pop	esi
pop	ebx
mov	esp, ebp
pop	ebp
ret	8
ENDP
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-36]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
lea	eax, DWORD PTR $T1[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ 
mov	ecx, eax
call	?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ 
mov	DWORD PTR __Num$[ebp], eax
cmp	DWORD PTR __Num$[ebp], 1
ja	SHORT $LN3@max_size
mov	DWORD PTR tv75[ebp], 1
jmp	SHORT $LN4@max_size
mov	ecx, DWORD PTR __Num$[ebp]
sub	ecx, 1
mov	DWORD PTR tv75[ebp], ecx
mov	eax, DWORD PTR tv75[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [eax+20]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 12					
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
cmp	ecx, DWORD PTR __Off$[ebp]
jae	SHORT $LN4@erase
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ 
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, DWORD PTR __Off$[ebp]
cmp	eax, DWORD PTR __Count$[ebp]
ja	SHORT $LN3@erase
mov	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
jmp	SHORT $LN2@erase
cmp	DWORD PTR __Count$[ebp], 0
jbe	SHORT $LN2@erase
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
add	eax, DWORD PTR __Off$[ebp]
mov	DWORD PTR __Ptr$2[ebp], eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx+20]
sub	eax, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Newsize$1[ebp], eax
mov	ecx, DWORD PTR __Newsize$1[ebp]
sub	ecx, DWORD PTR __Off$[ebp]
push	ecx
mov	edx, DWORD PTR __Ptr$2[ebp]
add	edx, DWORD PTR __Count$[ebp]
push	edx
mov	eax, DWORD PTR __Ptr$2[ebp]
push	eax
call	?move@?$char_traits@D@std@@SAPADPADPBDI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Newsize$1[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax+20]
cmp	ecx, DWORD PTR __Off$[ebp]
jae	SHORT $LN1@erase
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ 
mov	edx, DWORD PTR __Off$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	1168					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	
add	esp, 12					
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
call	?length@?$char_traits@D@std@@SAIPBD@Z	
add	esp, 4
push	eax
mov	edx, DWORD PTR __Ptr$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z 
mov	esp, ebp
pop	ebp
ret	4
ENDP
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR __Count$[ebp], 0
je	SHORT $LN3@assign
push	1151					
push	OFFSET ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z	
add	esp, 12					
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z 
movzx	edx, al
test	edx, edx
je	SHORT $LN2@assign
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
mov	ecx, DWORD PTR __Ptr$[ebp]
sub	ecx, eax
push	ecx
mov	edx, DWORD PTR _this$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z 
jmp	SHORT $LN4@assign
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z 
movzx	ecx, al
test	ecx, ecx
je	SHORT $LN1@assign
mov	edx, DWORD PTR __Count$[ebp]
push	edx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
push	eax
call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z 
add	esp, 12					
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	8
ENDP
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR __Right$[ebp]
call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ 
cmp	eax, DWORD PTR __Roff$[ebp]
jae	SHORT $LN5@assign
mov	ecx, DWORD PTR _this$[ebp]
call	?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ 
mov	ecx, DWORD PTR __Right$[ebp]
call	?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ 
sub	eax, DWORD PTR __Roff$[ebp]
mov	DWORD PTR __Num$[ebp], eax
mov	eax, DWORD PTR __Count$[ebp]
cmp	eax, DWORD PTR __Num$[ebp]
jae	SHORT $LN4@assign
mov	ecx, DWORD PTR __Count$[ebp]
mov	DWORD PTR __Num$[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
cmp	edx, DWORD PTR __Right$[ebp]
jne	SHORT $LN3@assign
mov	eax, DWORD PTR __Roff$[ebp]
add	eax, DWORD PTR __Num$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z 
mov	ecx, DWORD PTR __Roff$[ebp]
push	ecx
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z 
jmp	SHORT $LN2@assign
push	0
mov	edx, DWORD PTR __Num$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z 
movzx	eax, al
test	eax, eax
je	SHORT $LN2@assign
mov	ecx, DWORD PTR __Num$[ebp]
push	ecx
mov	ecx, DWORD PTR __Right$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ 
add	eax, DWORD PTR __Roff$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ 
push	eax
call	?copy@?$char_traits@D@std@@SAPADPADPBDI@Z 
add	esp, 12					
mov	edx, DWORD PTR __Num$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	12					
ENDP
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	0
push	1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR $T2[ebp]
call	??0?$allocator@D@std@@QAE@XZ		
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z 
mov	DWORD PTR __$EHRec$[ebp+8], 0
push	0
push	0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z 
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ 
ENDP
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR ___$ReturnUdt$[ebp]
call	??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ 
mov	eax, DWORD PTR ___$ReturnUdt$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ 
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR [eax]
push	ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z 
push	1
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 16					
mov	DWORD PTR _this$[ebp], ecx
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ 
push	1
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx], eax
lea	ecx, DWORD PTR $T1[ebp]
call	??0_Container_proxy@std@@QAE@XZ		
push	eax
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
push	eax
lea	ecx, DWORD PTR __Alproxy$[ebp]
call	??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [edx], eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
ENDP
__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ 
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
ENDP
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	ecx, DWORD PTR _this$[ebp]
call	??1_Container_base12@std@@QAE@XZ	
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+24], 16			
jb	SHORT $LN3@Myptr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	??$addressof@D@std@@YAPADAAD@Z		
add	esp, 4
mov	DWORD PTR tv72[ebp], eax
jmp	SHORT $LN4@Myptr
mov	eax, DWORD PTR _this$[ebp]
add	eax, 4
mov	DWORD PTR tv72[ebp], eax
mov	eax, DWORD PTR tv72[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax+24], 16			
jb	SHORT $LN3@Myptr
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
push	edx
call	??$addressof@D@std@@YAPADAAD@Z		
add	esp, 4
mov	DWORD PTR tv72[ebp], eax
jmp	SHORT $LN4@Myptr
mov	eax, DWORD PTR _this$[ebp]
add	eax, 4
mov	DWORD PTR tv72[ebp], eax
mov	eax, DWORD PTR tv72[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
push	ecx
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0_Container_base12@std@@QAE@XZ	
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax+20], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+24], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 PROC
mov	ecx, DWORD PTR _this$[ebp]
jmp	??1_Container_base12@std@@QAE@XZ	
ENDP
__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-8]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
push	eax
call	?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z 
add	esp, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ptr$[ebp]
push	ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?deallocate@?$allocator@D@std@@QAEXPADI@Z 
mov	esp, ebp
pop	ebp
ret	8
ENDP
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z PROC 
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?allocate@?$allocator@D@std@@QAEPADI@Z	
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	??0?$allocator@D@std@@QAE@XZ		
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z PROC 
push	ebp
mov	ebp, esp
mov	ecx, DWORD PTR __Al$[ebp]
call	?max_size@?$allocator@D@std@@QBEIXZ	
pop	ebp
ret	0
ENDP
?max_size@?$allocator@D@std@@QBEIXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
or	eax, -1
mov	esp, ebp
pop	ebp
ret	0
ENDP
?allocate@?$allocator@D@std@@QAEPADI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
push	0
mov	eax, DWORD PTR __Count$[ebp]
push	eax
call	??$_Allocate@D@std@@YAPADIPAD@Z		
add	esp, 8
mov	esp, ebp
pop	ebp
ret	4
ENDP
?deallocate@?$allocator@D@std@@QAEXPADI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR __Ptr$[ebp]
push	eax
call	??3@YAXPAX@Z				
add	esp, 4
mov	esp, ebp
pop	ebp
ret	8
ENDP
??0?$allocator@D@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??__Eallocator_arg@std@@YAXXZ PROC			
push	ebp
mov	ebp, esp
push	ecx
xor	eax, eax
mov	BYTE PTR $T1[ebp], al
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Orphan_me@_Iterator_base12@std@@QAEXXZ PROC		
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN5@Orphan_me
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, 4
mov	DWORD PTR __Pnext$1[ebp], edx
mov	eax, DWORD PTR __Pnext$1[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@Orphan_me
mov	ecx, DWORD PTR __Pnext$1[ebp]
mov	edx, DWORD PTR [ecx]
cmp	edx, DWORD PTR _this$[ebp]
je	SHORT $LN2@Orphan_me
mov	eax, DWORD PTR __Pnext$1[ebp]
mov	ecx, DWORD PTR [eax]
add	ecx, 4
mov	DWORD PTR __Pnext$1[ebp], ecx
jmp	SHORT $LN3@Orphan_me
mov	edx, DWORD PTR __Pnext$1[ebp]
cmp	DWORD PTR [edx], 0
jne	SHORT $LN1@Orphan_me
push	201					
push	OFFSET ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
push	OFFSET ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
call	?_Debug_message@std@@YAXPB_W0I@Z	
add	esp, 12					
mov	eax, DWORD PTR __Pnext$1[ebp]
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx+4]
mov	DWORD PTR [eax], edx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ PROC	
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
add	eax, 4
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN3@Getcont
mov	DWORD PTR tv68[ebp], 0
jmp	SHORT $LN4@Getcont
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR tv68[ebp], eax
mov	eax, DWORD PTR tv68[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Clrcont@_Iterator_base12@std@@QAEXXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC 
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 16					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
cmp	DWORD PTR __Parent$[ebp], 0
jne	SHORT $LN3@Adopt
push	3
lea	ecx, DWORD PTR __Lock$3[ebp]
call	??0_Lockit@std@@QAE@H@Z			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Lock$3[ebp]
call	??1_Lockit@std@@QAE@XZ			
jmp	SHORT $LN4@Adopt
mov	eax, DWORD PTR __Parent$[ebp]
mov	ecx, DWORD PTR [eax]
mov	DWORD PTR __Parent_proxy$4[ebp], ecx
mov	edx, DWORD PTR _this$[ebp]
mov	eax, DWORD PTR [edx]
cmp	eax, DWORD PTR __Parent_proxy$4[ebp]
je	SHORT $LN4@Adopt
push	3
lea	ecx, DWORD PTR __Lock$2[ebp]
call	??0_Lockit@std@@QAE@H@Z			
mov	DWORD PTR __$EHRec$[ebp+8], 1
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ 
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR __Parent_proxy$4[ebp]
mov	eax, DWORD PTR [edx+4]
mov	DWORD PTR [ecx+4], eax
mov	ecx, DWORD PTR __Parent_proxy$4[ebp]
mov	edx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], edx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Parent_proxy$4[ebp]
mov	DWORD PTR [eax], ecx
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Lock$2[ebp]
call	??1_Lockit@std@@QAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 PROC
lea	ecx, DWORD PTR __Lock$3[ebp]
jmp	??1_Lockit@std@@QAE@XZ			
ENDP
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 PROC
lea	ecx, DWORD PTR __Lock$2[ebp]
jmp	??1_Lockit@std@@QAE@XZ			
ENDP
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-20]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??1_Iterator_base12@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??1_Iterator_base12@std@@QAE@XZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
push	3
lea	ecx, DWORD PTR __Lock$[ebp]
call	??0_Lockit@std@@QAE@H@Z			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Lock$[ebp]
call	??1_Lockit@std@@QAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 PROC
lea	ecx, DWORD PTR __Lock$[ebp]
jmp	??1_Lockit@std@@QAE@XZ			
ENDP
__ehhandler$??1_Iterator_base12@std@@QAE@XZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
jmp	___CxxFrameHandler3
ENDP
ENDP
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 8
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [eax]
cmp	edx, DWORD PTR [ecx]
jne	SHORT $LN4@operator
jmp	SHORT $LN3@operator
mov	eax, DWORD PTR __Right$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN2@operator
mov	ecx, DWORD PTR __Right$[ebp]
mov	edx, DWORD PTR [ecx]
mov	eax, DWORD PTR [edx]
push	eax
mov	ecx, DWORD PTR _this$[ebp]
call	?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z 
jmp	SHORT $LN3@operator
push	3
lea	ecx, DWORD PTR __Lock$2[ebp]
call	??0_Lockit@std@@QAE@H@Z			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_me@_Iterator_base12@std@@QAEXXZ 
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Lock$2[ebp]
call	??1_Lockit@std@@QAE@XZ			
mov	eax, DWORD PTR _this$[ebp]
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 PROC
lea	ecx, DWORD PTR __Lock$2[ebp]
jmp	??1_Lockit@std@@QAE@XZ			
ENDP
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-12]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
jmp	___CxxFrameHandler3
ENDP
ENDP
??0_Iterator_base12@std@@QAE@ABU01@@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	edx, DWORD PTR __Right$[ebp]
push	edx
mov	ecx, DWORD PTR _this$[ebp]
call	??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z 
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	4
ENDP
??0_Iterator_base12@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Orphan_all@_Container_base12@std@@QAEXXZ PROC		
push	ebp
mov	ebp, esp
push	-1
push	__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
mov	eax, DWORD PTR fs:0
push	eax
sub	esp, 12					
mov	eax, DWORD PTR ___security_cookie
xor	eax, ebp
push	eax
lea	eax, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, eax
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
je	SHORT $LN5@Orphan_all
push	3
lea	ecx, DWORD PTR __Lock$2[ebp]
call	??0_Lockit@std@@QAE@H@Z			
mov	DWORD PTR __$EHRec$[ebp+8], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, 4
mov	DWORD PTR __Pnext$3[ebp], edx
jmp	SHORT $LN3@Orphan_all
mov	eax, DWORD PTR __Pnext$3[ebp]
mov	ecx, DWORD PTR [eax]
mov	edx, DWORD PTR __Pnext$3[ebp]
mov	eax, DWORD PTR [ecx+4]
mov	DWORD PTR [edx], eax
mov	ecx, DWORD PTR __Pnext$3[ebp]
cmp	DWORD PTR [ecx], 0
je	SHORT $LN1@Orphan_all
mov	edx, DWORD PTR __Pnext$3[ebp]
mov	eax, DWORD PTR [edx]
mov	DWORD PTR [eax], 0
jmp	SHORT $LN2@Orphan_all
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
mov	DWORD PTR [edx+4], 0
mov	DWORD PTR __$EHRec$[ebp+8], -1
lea	ecx, DWORD PTR __Lock$2[ebp]
call	??1_Lockit@std@@QAE@XZ			
mov	ecx, DWORD PTR __$EHRec$[ebp]
mov	DWORD PTR fs:0, ecx
pop	ecx
mov	esp, ebp
pop	ebp
ret	0
ENDP
__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 PROC
lea	ecx, DWORD PTR __Lock$2[ebp]
jmp	??1_Lockit@std@@QAE@XZ			
ENDP
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ PROC
mov	edx, DWORD PTR [esp+8]
lea	eax, DWORD PTR [edx+12]
mov	ecx, DWORD PTR [edx-16]
xor	ecx, eax
call	@__security_check_cookie@4
mov	eax, OFFSET __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
jmp	___CxxFrameHandler3
ENDP
ENDP
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ PROC 
push	ebp
mov	ebp, esp
sub	esp, 8
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
cmp	DWORD PTR [eax], 0
jne	SHORT $LN3@Getpfirst
mov	DWORD PTR tv68[ebp], 0
jmp	SHORT $LN4@Getpfirst
mov	ecx, DWORD PTR _this$[ebp]
mov	edx, DWORD PTR [ecx]
add	edx, 4
mov	DWORD PTR tv68[ebp], edx
mov	eax, DWORD PTR tv68[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??1_Container_base12@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	ecx, DWORD PTR _this$[ebp]
call	?_Orphan_all@_Container_base12@std@@QAEXXZ 
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0_Container_base12@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??0_Container_proxy@std@@QAE@XZ PROC			
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	eax, DWORD PTR _this$[ebp]
mov	DWORD PTR [eax], 0
mov	ecx, DWORD PTR _this$[ebp]
mov	DWORD PTR [ecx+4], 0
mov	eax, DWORD PTR _this$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	DWORD PTR _this$[ebp], ecx
mov	esp, ebp
pop	ebp
ret	4
ENDP
??__Epiecewise_construct@std@@YAXXZ PROC		
push	ebp
mov	ebp, esp
push	ecx
xor	eax, eax
mov	BYTE PTR $T1[ebp], al
mov	esp, ebp
pop	ebp
ret	0
ENDP
?assign@?$char_traits@D@std@@SAXAADABD@Z PROC		
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Left$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	dl, BYTE PTR [ecx]
mov	BYTE PTR [eax], dl
pop	ebp
ret	0
ENDP
?move@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN3@move
mov	eax, DWORD PTR __First1$[ebp]
mov	DWORD PTR tv69[ebp], eax
jmp	SHORT $LN4@move
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __First2$[ebp]
push	edx
mov	eax, DWORD PTR __First1$[ebp]
push	eax
call	_memmove
add	esp, 12					
mov	DWORD PTR tv69[ebp], eax
mov	eax, DWORD PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN3@copy
mov	eax, DWORD PTR __First1$[ebp]
mov	DWORD PTR tv69[ebp], eax
jmp	SHORT $LN4@copy
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __First2$[ebp]
push	edx
mov	eax, DWORD PTR __First1$[ebp]
push	eax
call	_memcpy
add	esp, 12					
mov	DWORD PTR tv69[ebp], eax
mov	eax, DWORD PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?length@?$char_traits@D@std@@SAIPBD@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __First$[ebp]
movsx	ecx, BYTE PTR [eax]
test	ecx, ecx
jne	SHORT $LN3@length
mov	DWORD PTR tv68[ebp], 0
jmp	SHORT $LN4@length
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	_strlen
add	esp, 4
mov	DWORD PTR tv68[ebp], eax
mov	eax, DWORD PTR tv68[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z PROC	
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Left$[ebp]
mov	ecx, DWORD PTR __Right$[ebp]
mov	dx, WORD PTR [ecx]
mov	WORD PTR [eax], dx
pop	ebp
ret	0
ENDP
?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN3@move
mov	eax, DWORD PTR __First1$[ebp]
mov	DWORD PTR tv69[ebp], eax
jmp	SHORT $LN4@move
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __First2$[ebp]
push	edx
mov	eax, DWORD PTR __First1$[ebp]
push	eax
call	_wmemmove
add	esp, 12					
mov	DWORD PTR tv69[ebp], eax
mov	eax, DWORD PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?find@?$char_traits@_W@std@@SAPB_WPB_WIAB_W@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN3@find
mov	DWORD PTR tv69[ebp], 0
jmp	SHORT $LN4@find
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __Ch$[ebp]
movzx	edx, WORD PTR [ecx]
push	edx
mov	eax, DWORD PTR __First$[ebp]
push	eax
call	_wmemchr
add	esp, 12					
mov	DWORD PTR tv69[ebp], eax
mov	eax, DWORD PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z PROC	
push	ebp
mov	ebp, esp
push	ecx
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN3@copy
mov	eax, DWORD PTR __First1$[ebp]
mov	DWORD PTR tv69[ebp], eax
jmp	SHORT $LN4@copy
mov	ecx, DWORD PTR __Count$[ebp]
push	ecx
mov	edx, DWORD PTR __First2$[ebp]
push	edx
mov	eax, DWORD PTR __First1$[ebp]
push	eax
call	_wmemcpy
add	esp, 12					
mov	DWORD PTR tv69[ebp], eax
mov	eax, DWORD PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?length@?$char_traits@_W@std@@SAIPB_W@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR __First$[ebp]
movzx	ecx, WORD PTR [eax]
test	ecx, ecx
jne	SHORT $LN3@length
mov	DWORD PTR tv68[ebp], 0
jmp	SHORT $LN4@length
mov	edx, DWORD PTR __First$[ebp]
push	edx
call	_wcslen
add	esp, 4
mov	DWORD PTR tv68[ebp], eax
mov	eax, DWORD PTR tv68[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
?compare@?$char_traits@_W@std@@SAHPB_W0I@Z PROC		
push	ebp
mov	ebp, esp
push	ecx
cmp	DWORD PTR __Count$[ebp], 0
jne	SHORT $LN3@compare
mov	DWORD PTR tv69[ebp], 0
jmp	SHORT $LN4@compare
mov	eax, DWORD PTR __Count$[ebp]
push	eax
mov	ecx, DWORD PTR __First2$[ebp]
push	ecx
mov	edx, DWORD PTR __First1$[ebp]
push	edx
call	_wmemcmp
add	esp, 12					
mov	DWORD PTR tv69[ebp], eax
mov	eax, DWORD PTR tv69[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
??3@YAXPAX0@Z PROC					
push	ebp
mov	ebp, esp
pop	ebp
ret	0
ENDP
??2@YAPAXIPAX@Z PROC					
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __Where$[ebp]
pop	ebp
ret	0
ENDP
_wmemmove PROC						
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __N$[ebp]
shl	eax, 1
push	eax
mov	ecx, DWORD PTR __S2$[ebp]
push	ecx
mov	edx, DWORD PTR __S1$[ebp]
push	edx
call	_memmove
add	esp, 12					
pop	ebp
ret	0
ENDP
_wmemcpy PROC						
push	ebp
mov	ebp, esp
mov	eax, DWORD PTR __N$[ebp]
shl	eax, 1
push	eax
mov	ecx, DWORD PTR __S2$[ebp]
push	ecx
mov	edx, DWORD PTR __S1$[ebp]
push	edx
call	_memcpy
add	esp, 12					
pop	ebp
ret	0
ENDP
_wmemcmp PROC						
push	ebp
mov	ebp, esp
push	ecx
jmp	SHORT $LN4@wmemcmp
mov	eax, DWORD PTR __S1$[ebp]
add	eax, 2
mov	DWORD PTR __S1$[ebp], eax
mov	ecx, DWORD PTR __S2$[ebp]
add	ecx, 2
mov	DWORD PTR __S2$[ebp], ecx
mov	edx, DWORD PTR __N$[ebp]
sub	edx, 1
mov	DWORD PTR __N$[ebp], edx
cmp	DWORD PTR __N$[ebp], 0
jbe	SHORT $LN2@wmemcmp
mov	eax, DWORD PTR __S1$[ebp]
movzx	ecx, WORD PTR [eax]
mov	edx, DWORD PTR __S2$[ebp]
movzx	eax, WORD PTR [edx]
cmp	ecx, eax
je	SHORT $LN1@wmemcmp
mov	ecx, DWORD PTR __S1$[ebp]
movzx	edx, WORD PTR [ecx]
mov	eax, DWORD PTR __S2$[ebp]
movzx	ecx, WORD PTR [eax]
cmp	edx, ecx
jge	SHORT $LN7@wmemcmp
mov	DWORD PTR tv74[ebp], -1
jmp	SHORT $LN8@wmemcmp
mov	DWORD PTR tv74[ebp], 1
mov	eax, DWORD PTR tv74[ebp]
jmp	SHORT $LN5@wmemcmp
jmp	SHORT $LN3@wmemcmp
xor	eax, eax
mov	esp, ebp
pop	ebp
ret	0
ENDP
_wmemchr PROC						
push	ebp
mov	ebp, esp
jmp	SHORT $LN4@wmemchr
mov	eax, DWORD PTR __S$[ebp]
add	eax, 2
mov	DWORD PTR __S$[ebp], eax
mov	ecx, DWORD PTR __N$[ebp]
sub	ecx, 1
mov	DWORD PTR __N$[ebp], ecx
cmp	DWORD PTR __N$[ebp], 0
jbe	SHORT $LN2@wmemchr
mov	edx, DWORD PTR __S$[ebp]
movzx	eax, WORD PTR [edx]
movzx	ecx, WORD PTR __C$[ebp]
cmp	eax, ecx
jne	SHORT $LN1@wmemchr
mov	eax, DWORD PTR __S$[ebp]
jmp	SHORT $LN5@wmemchr
jmp	SHORT $LN3@wmemchr
xor	eax, eax
pop	ebp
ret	0
ENDP
_hypot	PROC						
push	ebp
mov	ebp, esp
sub	esp, 8
movsd	xmm0, QWORD PTR __Y$[ebp]
movsd	QWORD PTR [esp], xmm0
sub	esp, 8
movsd	xmm0, QWORD PTR __X$[ebp]
movsd	QWORD PTR [esp], xmm0
call	__hypot
add	esp, 16					
pop	ebp
ret	0
ENDP
_RtlSecureZeroMemory PROC				
push	ebp
mov	ebp, esp
push	ecx
mov	eax, DWORD PTR _ptr$[ebp]
mov	DWORD PTR _vptr$[ebp], eax
cmp	DWORD PTR _cnt$[ebp], 0
je	SHORT $LN1@RtlSecureZ
mov	ecx, DWORD PTR _vptr$[ebp]
mov	BYTE PTR [ecx], 0
mov	edx, DWORD PTR _vptr$[ebp]
add	edx, 1
mov	DWORD PTR _vptr$[ebp], edx
mov	eax, DWORD PTR _cnt$[ebp]
sub	eax, 1
mov	DWORD PTR _cnt$[ebp], eax
jmp	SHORT $LN2@RtlSecureZ
mov	eax, DWORD PTR _ptr$[ebp]
mov	esp, ebp
pop	ebp
ret	0
ENDP
