??0trayIconControler@@QAE@PAUHWND__@@IIPAUHICON__@@PA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '3B8h']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '7']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax+10h],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_C]']
mov ['[edx+14h],', 'eax']
mov ['ecx,', '[ebp+lpString2]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '18h']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__lstrcpyW@8']
push ['offset', '$SG63539']
call ['dword', 'ptr', 'ds:__imp__RegisterWindowMessageW@4']
mov ['eax,', '[ebp+var_4]']
mov ['byte', 'ptr', '[eax+3B8h],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
?doTrayIcon@trayIconControler@@QAEHK@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+lpData],', 'ecx']
cmp ['[ebp+dwMessage],', '0']
jz ['short', 'loc_AC']
cmp ['[ebp+dwMessage],', '2']
jz ['short', 'loc_AC']
mov ['eax,', '1']
jmp ['short', 'loc_115']
mov ['eax,', '[ebp+lpData]']
movzx ['ecx,', 'byte', 'ptr', '[eax+3B8h]']
test ['ecx,', 'ecx']
jz ['short', 'loc_C0']
cmp ['[ebp+dwMessage],', '0']
jz ['short', 'loc_D4']
mov ['edx,', '[ebp+lpData]']
movzx ['eax,', 'byte', 'ptr', '[edx+3B8h]']
test ['eax,', 'eax']
jnz ['short', 'loc_DB']
cmp ['[ebp+dwMessage],', '2']
jnz ['short', 'loc_DB']
mov ['eax,', '2']
jmp ['short', 'loc_115']
mov ['ecx,', '[ebp+lpData]']
push ['ecx']
mov ['edx,', '[ebp+dwMessage]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__Shell_NotifyIconW@8']
mov ['eax,', '[ebp+lpData]']
movzx ['ecx,', 'byte', 'ptr', '[eax+3B8h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_100']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_107']
mov ['[ebp+var_8],', '0']
mov ['edx,', '[ebp+lpData]']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['[edx+3B8h],', 'al']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
