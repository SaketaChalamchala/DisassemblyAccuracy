??0WindowsDlg@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0WindowsDlg@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['offset', '?WindowsDlgMap@@3PAVWINRECT@@A']
mov ['ecx,', '[ebp+var_10]']
call ['??0SizeableDlg@@QAE@PAVWINRECT@@@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7WindowsDlg@@6B@']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
mov ['byte', 'ptr', '[ecx+54h],', '0']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', 'ds:_SIZEZERO']
mov ['[edx+2Ch],', 'eax']
mov ['ecx,', 'ds:dword_144']
mov ['[edx+30h],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', 'ds:_SIZEZERO']
mov ['[edx+34h],', 'eax']
mov ['ecx,', 'ds:dword_144']
mov ['[edx+38h],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?doDialog@WindowsDlg@@QAEHPAVTiXmlNodeA@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+dwInitParam],', 'ecx']
mov ['eax,', '[ebp+dwInitParam]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+58h],', 'ecx']
mov ['edx,', '[ebp+dwInitParam]']
push ['edx']
push ['offset', '?dlgProc@StaticDialog@@KGHPAUHWND__@@IIJ@Z']
mov ['eax,', '[ebp+dwInitParam]']
mov ['ecx,', '[eax+8]']
push ['ecx']
push ['(offset', 'loc_1B57+1)']
mov ['edx,', '[ebp+dwInitParam]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__DialogBoxParamW@20']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?init@WindowsDlg@@UAEXPAUHINSTANCE__@@PAUHWND__@@PAVDocTabView@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx+3Ch],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?doRefresh@WindowsDlg@@QAEX_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '20h']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
jz ['loc_6CD']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+2Ch]']
call ['eax']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['loc_6CD']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx+28h],', '0']
jz ['loc_6CD']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+3Ch],', '0']
jz ['short', 'loc_5E4']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+3Ch]']
call ['?nbItem@TabBar@@QBEHXZ']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_5EB']
mov ['[ebp+var_14],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+wParam],', 'edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
mov ['[ebp+var_10],', 'eax']
movzx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jnz ['short', 'loc_614']
mov ['ecx,', '[ebp+wParam]']
cmp ['ecx,', '[ebp+var_10]']
jnz ['short', 'loc_614']
jmp ['loc_6CD']
mov ['edx,', '[ebp+wParam]']
cmp ['edx,', '[ebp+var_10]']
jz ['short', 'loc_66F']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+wParam]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z']
mov ['ecx,', '[ebp+var_10]']
cmp ['ecx,', '[ebp+wParam]']
jnb ['short', 'loc_640']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_651']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+wParam]']
jnb ['short', 'loc_66F']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_648']
movzx ['edx,', '[ebp+arg_0]']
test ['edx,', 'edx']
jz ['short', 'loc_680']
mov ['[ebp+var_1C],', '3']
jmp ['short', 'loc_687']
mov ['[ebp+var_1C],', '2']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+lParam],', 'eax']
mov ['ecx,', '[ebp+lParam]']
push ['ecx']
mov ['edx,', '[ebp+wParam]']
push ['edx']
push ['102Fh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
push ['0']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '10h']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__InvalidateRect@12']
mov ['ecx,', '[ebp+var_4]']
call ['?resetSelection@WindowsDlg@@IAEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['?updateButtonState@WindowsDlg@@IAEXXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?changeDlgLang@WindowsDlg@@QAE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '3Ch']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+58h],', '0']
jnz ['short', 'loc_6F9']
xor ['al,', 'al']
jmp ['loc_86E']
call ['?getInstance@WcharMbcsConvertor@@SAPAV1@XZ']
mov ['[ebp+var_20],', 'eax']
mov ['[ebp+var_10],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+58h]']
call ['?GetDocument@TiXmlNodeA@@QBEPAVTiXmlDocumentA@@XZ']
mov ['ecx,', 'eax']
call ['?FirstChild@TiXmlNodeA@@QBEPAV1@XZ']
mov ['ecx,', 'eax']
call ['?ToDeclaration@TiXmlNodeA@@QBEPAVTiXmlDeclarationA@@XZ']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_74C']
mov ['ecx,', '[ebp+var_18]']
call ['?Encoding@TiXmlDeclarationA@@QBEPBDXZ']
mov ['[ebp+var_28],', 'eax']
call ['?getInstance@EncodingMapper@@SAPAV1@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['edx,', '[ebp+var_28]']
push ['edx']
mov ['ecx,', '[ebp+var_2C]']
call ['?getEncodingFromString@EncodingMapper@@QBEHPBD@Z']
mov ['[ebp+var_10],', 'eax']
push ['offset', '$SG132585']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+58h]']
call ['?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ']
mov ['ecx,', 'eax']
call ['?Attribute@TiXmlElementA@@QBEPBDPBD@Z']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_7A9']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_C]']
movsx ['ecx,', 'byte', 'ptr', '[eax+edx]']
test ['ecx,', 'ecx']
jz ['short', 'loc_7A9']
push ['0']
push ['0']
push ['0FFFFFFFFh']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
call ['?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z']
mov ['[ebp+lpString],', 'eax']
mov ['ecx,', '[ebp+lpString]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__SetWindowTextW@8']
push ['offset', '$SG132589']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+58h]']
call ['?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_7CE']
push ['offset', '$SG132593']
mov ['ecx,', '[ebp+var_8]']
call ['?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['loc_86C']
mov ['ecx,', '[ebp+var_8]']
call ['?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ']
mov ['[ebp+var_1C],', 'eax']
lea ['edx,', '[ebp+nIDDlgItem]']
push ['edx']
push ['offset', '$SG132597']
mov ['ecx,', '[ebp+var_1C]']
call ['?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z']
mov ['[ebp+var_34],', 'eax']
push ['offset', '$SG132599']
mov ['ecx,', '[ebp+var_1C]']
call ['?Attribute@TiXmlElementA@@QBEPBDPBD@Z']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_34],', '0']
jz ['short', 'loc_867']
cmp ['[ebp+var_14],', '0']
jz ['short', 'loc_867']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+var_14]']
movsx ['eax,', 'byte', 'ptr', '[edx+ecx]']
test ['eax,', 'eax']
jz ['short', 'loc_867']
mov ['ecx,', '[ebp+nIDDlgItem]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__GetDlgItem@8']
mov ['[ebp+hWnd],', 'eax']
cmp ['[ebp+hWnd],', '0']
jz ['short', 'loc_867']
push ['0']
push ['0']
push ['0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', '[ebp+var_20]']
call ['?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z']
mov ['[ebp+var_3C],', 'eax']
mov ['eax,', '[ebp+var_3C]']
push ['eax']
mov ['ecx,', '[ebp+hWnd]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SetWindowTextW@8']
jmp ['loc_7BE']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?run_dlgProc@WindowsDlg@@MAGHIIJ@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10Ch']
push ['esi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_30],', 'eax']
cmp ['[ebp+var_30],', '110h']
ja ['short', 'loc_8DA']
cmp ['[ebp+var_30],', '110h']
jz ['short', 'loc_8E8']
cmp ['[ebp+var_30],', '2']
jz ['loc_9BF']
cmp ['[ebp+var_30],', '4Eh']
jz ['loc_9C9']
jmp ['loc_FA9']
cmp ['[ebp+var_30],', '111h']
jz ['short', 'loc_90A']
jmp ['loc_FA9']
mov ['ecx,', '[ebp+this]']
call ['?changeDlgLang@WindowsDlg@@QAE_NXZ']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+this]']
push ['ecx']
call ['?run_dlgProc@SizeableDlg@@MAGHIIJ@Z']
jmp ['loc_FBE']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_24],', 'edx']
cmp ['[ebp+var_24],', '1B5Ah']
ja ['short', 'loc_933']
cmp ['[ebp+var_24],', '1B5Ah']
jz ['short', 'loc_984']
cmp ['[ebp+var_24],', '1']
jz ['short', 'loc_947']
cmp ['[ebp+var_24],', '2']
jz ['short', 'loc_959']
jmp ['loc_9BF']
cmp ['[ebp+var_24],', '1B5Bh']
jz ['short', 'loc_996']
cmp ['[ebp+var_24],', '1B5Ch']
jz ['short', 'loc_9A8']
jmp ['short', 'loc_9BF']
mov ['ecx,', '[ebp+this]']
call ['?activateCurrent@WindowsDlg@@IAEXXZ']
mov ['eax,', '1']
jmp ['loc_FBE']
push ['offset', '?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__GetWindowRect@8']
push ['2']
mov ['edx,', '[ebp+this]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__EndDialog@8']
mov ['eax,', '1']
jmp ['loc_FBE']
mov ['ecx,', '[ebp+this]']
call ['?doSave@WindowsDlg@@IAEXXZ']
mov ['eax,', '1']
jmp ['loc_FBE']
mov ['ecx,', '[ebp+this]']
call ['?doClose@WindowsDlg@@IAEXXZ']
mov ['eax,', '1']
jmp ['loc_FBE']
mov ['ecx,', '[ebp+this]']
call ['?doSortToTabs@WindowsDlg@@IAEXXZ']
mov ['ecx,', '[ebp+this]']
mov ['byte', 'ptr', '[ecx+54h],', '0']
mov ['ecx,', '[ebp+this]']
call ['?updateButtonState@WindowsDlg@@IAEXXZ']
mov ['eax,', '1']
jmp ['loc_FBE']
cmp ['[ebp+arg_8],', '1B59h']
jnz ['loc_FA9']
mov ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax+8],', '0FFFFFF4Fh']
jnz ['loc_C55']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0Ch]']
and ['eax,', '1']
jz ['loc_C46']
mov ['ecx,', '2']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+20h]']
xor ['eax,', 'eax']
mov ['[edx+ecx],', 'ax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+10h]']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+3Ch]']
call ['?nbItem@TabBar@@QBEHXZ']
cmp ['[ebp+var_34],', 'eax']
jge ['short', 'loc_A3E']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '40h']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
cmp ['[ebp+var_34],', 'eax']
jl ['short', 'loc_A45']
xor ['eax,', 'eax']
jmp ['loc_FBE']
mov ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '40h']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['edx,', '[eax]']
mov ['[ebp+var_34],', 'edx']
mov ['eax,', '[ebp+var_34]']
push ['eax']
mov ['ecx,', '[ebp+this]']
mov ['ecx,', '[ecx+3Ch]']
call ['?getBufferByIndex@DocTabView@@QAEPAVBuffer@@H@Z']
mov ['[ebp+var_74],', 'eax']
mov ['edx,', '[ebp+var_74]']
push ['edx']
call ['?getInstance@FileManager@@SAPAV1@XZ']
mov ['ecx,', 'eax']
call ['?getBufferByID@FileManager@@QAEPAVBuffer@@PAV2@@Z']
mov ['[ebp+var_28],', 'eax']
mov ['eax,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[eax+14h],', '0']
jnz ['loc_B65']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+24h]']
mov ['[ebp+var_14],', 'edx']
mov ['ecx,', '[ebp+var_28]']
call ['?getFileName@Buffer@@QBEPB_WXZ']
mov ['[ebp+Source],', 'eax']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+Source]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+20h]']
push ['eax']
call ['_wcsncpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+20h]']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[edx+ecx*2-2],', 'ax']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+20h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__lstrlenW@4']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_28]']
call ['?isDirty@Buffer@@QBE_NXZ']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_B1F']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_14]']
cmp ['eax,', '[edx+24h]']
jge ['short', 'loc_B1D']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+20h]']
mov ['eax,', '2Ah']
mov ['ecx,', '[ebp+var_14]']
mov ['[edx+ecx*2],', 'ax']
mov ['edx,', '[ebp+var_14]']
add ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+20h]']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+var_14]']
mov ['[ecx+eax*2],', 'dx']
jmp ['short', 'loc_B60']
mov ['ecx,', '[ebp+var_28]']
call ['?isReadOnly@Buffer@@QBE_NXZ']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_B60']
mov ['edx,', '_readonlyString']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__lstrlenW@4']
add ['eax,', '[ebp+var_14]']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_14]']
cmp ['ecx,', '[eax+24h]']
jg ['short', 'loc_B60']
mov ['edx,', '_readonlyString']
push ['edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__lstrcatW@8']
jmp ['loc_C46']
mov ['edx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[edx+14h],', '1']
jnz ['loc_BF3']
mov ['ecx,', '[ebp+var_28]']
call ['?getFullPathName@Buffer@@QBEPB_WXZ']
mov ['[ebp+lpString],', 'eax']
mov ['ecx,', '[ebp+var_28]']
call ['?getFileName@Buffer@@QBEPB_WXZ']
mov ['[ebp+var_7C],', 'eax']
mov ['eax,', '[ebp+lpString]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__lstrlenW@4']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_7C]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__lstrlenW@4']
sub ['esi,', 'eax']
mov ['[ebp+var_2C],', 'esi']
jnz ['short', 'loc_BB3']
mov ['[ebp+var_2C],', '1']
mov ['[ebp+lpString],', 'offset', '$SG132341']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+24h]']
cmp ['eax,', '[ebp+var_2C]']
jge ['short', 'loc_BC7']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+24h]']
mov ['[ebp+var_2C],', 'edx']
mov ['eax,', '[ebp+var_2C]']
sub ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+lpString]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+20h]']
push ['eax']
call ['_wcsncpy']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+20h]']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_2C]']
mov ['[edx+ecx*2-2],', 'ax']
jmp ['short', 'loc_C46']
mov ['edx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[edx+14h],', '2']
jnz ['short', 'loc_C46']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+24h]']
mov ['[ebp+var_78],', 'ecx']
call ['?getInstance@NppParameters@@SAPAV1@XZ']
mov ['[ebp+var_70],', 'eax']
mov ['ecx,', '[ebp+var_28]']
call ['?getLangType@Buffer@@QBE?AW4LangType@@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_70]']
call ['?getLangFromID@NppParameters@@QBEPAULang@@W4LangType@@@Z']
mov ['[ebp+var_58],', 'eax']
cmp ['[ebp+var_58],', '0']
jz ['short', 'loc_C46']
mov ['edx,', '[ebp+var_78]']
sub ['edx,', '1']
push ['edx']
mov ['ecx,', '[ebp+var_58]']
call ['?getLangName@Lang@@QBEPB_WXZ']
push ['eax']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+20h]']
push ['ecx']
call ['_wcsncpy']
add ['esp,', '0Ch']
mov ['eax,', '1']
jmp ['loc_FBE']
jmp ['loc_FA9']
mov ['edx,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[edx+8],', '0FFFFFF94h']
jnz ['loc_E7E']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_54],', 'eax']
mov ['ecx,', '[ebp+var_54]']
cmp ['dword', 'ptr', '[ecx+0Ch],', '0FFFFFFFFh']
jnz ['loc_E6F']
mov ['[ebp+var_19],', '0']
mov ['edx,', '[ebp+var_54]']
mov ['eax,', '[edx+10h]']
mov ['[ebp+var_48],', 'eax']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ecx+50h]']
cmp ['edx,', '[ebp+var_48]']
jnz ['short', 'loc_C9D']
mov ['[ebp+var_19],', '1']
mov ['eax,', '[ebp+this]']
mov ['dword', 'ptr', '[eax+50h],', '0FFFFFFFFh']
jmp ['short', 'loc_CA6']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ebp+var_48]']
mov ['[ecx+50h],', 'edx']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '40h']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
mov ['[ebp+var_50],', 'eax']
lea ['ecx,', '[ebp+var_90]']
call ['??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_50]']
push ['eax']
lea ['ecx,', '[ebp+var_90]']
call ['?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z']
mov ['[ebp+wParam],', '0']
jmp ['short', 'loc_CE7']
mov ['ecx,', '[ebp+wParam]']
add ['ecx,', '1']
mov ['[ebp+wParam],', 'ecx']
mov ['edx,', '[ebp+wParam]']
cmp ['edx,', '[ebp+var_50]']
jge ['short', 'loc_D2A']
push ['2']
mov ['eax,', '[ebp+wParam]']
push ['eax']
push ['102Ch']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ecx+28h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['esi,', 'eax']
mov ['eax,', '[ebp+wParam]']
push ['eax']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '40h']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_90]']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['[eax],', 'esi']
jmp ['short', 'loc_CDE']
movzx ['edx,', '[ebp+var_19]']
push ['edx']
mov ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ecx+3Ch]']
push ['edx']
lea ['ecx,', '[ebp+var_B0]']
call ['??0BufferEquivalent@@QAE@PAVDocTabView@@H_N@Z']
sub ['esp,', '10h']
mov ['ecx,', 'esp']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['edx,', '[eax+4]']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[eax+8]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[eax+0Ch]']
mov ['[ecx+0Ch],', 'eax']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_94],', 'esp']
push ['ecx']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '40h']
call ['?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
mov ['[ebp+var_68],', 'eax']
mov ['edx,', '[ebp+var_68]']
mov ['[ebp+var_98],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
sub ['esp,', '0Ch']
mov ['eax,', 'esp']
mov ['[ebp+var_A0],', 'esp']
push ['eax']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '40h']
call ['?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
mov ['[ebp+var_6C],', 'eax']
mov ['ecx,', '[ebp+var_6C]']
mov ['[ebp+var_9C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
call ['??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z']
add ['esp,', '28h']
mov ['[ebp+wParam],', '0']
jmp ['short', 'loc_DCC']
mov ['edx,', '[ebp+wParam]']
add ['edx,', '1']
mov ['[ebp+wParam],', 'edx']
mov ['eax,', '[ebp+wParam]']
cmp ['eax,', '[ebp+var_50]']
jge ['short', 'loc_E38']
mov ['[ebp+var_D4],', '2']
mov ['ecx,', '[ebp+wParam]']
push ['ecx']
mov ['ecx,', '[ebp+this]']
add ['ecx,', '40h']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['edx,', '[eax]']
push ['edx']
lea ['ecx,', '[ebp+var_90]']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_E09']
mov ['[ebp+var_5C],', '2']
jmp ['short', 'loc_E10']
mov ['[ebp+var_5C],', '0']
mov ['eax,', '[ebp+var_5C]']
mov ['[ebp+var_D8],', 'eax']
lea ['ecx,', '[ebp+lParam]']
push ['ecx']
mov ['edx,', '[ebp+wParam]']
push ['edx']
push ['102Bh']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
jmp ['short', 'loc_DC3']
push ['0']
mov ['edx,', '[ebp+this]']
add ['edx,', '10h']
push ['edx']
mov ['eax,', '[ebp+this]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__InvalidateRect@12']
mov ['edx,', '[ebp+this]']
mov ['byte', 'ptr', '[edx+54h],', '1']
mov ['ecx,', '[ebp+this]']
call ['?updateButtonState@WindowsDlg@@IAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_90]']
call ['??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
mov ['eax,', '1']
jmp ['loc_FBE']
jmp ['loc_FA9']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax+8],', '0FFFFFF8Eh']
jz ['short', 'loc_E99']
mov ['ecx,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[ecx+8],', '0FFFFFF9Bh']
jz ['short', 'loc_E99']
mov ['edx,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[edx+8],', '0FFFFFF8Dh']
jnz ['short', 'loc_EB0']
mov ['ecx,', '[ebp+this]']
call ['?updateButtonState@WindowsDlg@@IAEXXZ']
mov ['eax,', '1']
jmp ['loc_FBE']
jmp ['loc_FA9']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax+8],', '0FFFFFFFDh']
jnz ['short', 'loc_EDE']
push ['0']
push ['1']
push ['111h']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__PostMessageW@16']
mov ['eax,', '1']
jmp ['loc_FBE']
jmp ['loc_FA9']
mov ['eax,', '[ebp+var_20]']
cmp ['dword', 'ptr', '[eax+8],', '0FFFFFF65h']
jnz ['loc_FA9']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_60],', 'ecx']
push ['11h']
call ['dword', 'ptr', 'ds:__imp__GetKeyState@4']
mov ['[ebp+var_44],', 'ax']
push ['12h']
call ['dword', 'ptr', 'ds:__imp__GetKeyState@4']
mov ['[ebp+var_3C],', 'ax']
push ['10h']
call ['dword', 'ptr', 'ds:__imp__GetKeyState@4']
mov ['[ebp+var_4C],', 'ax']
mov ['edx,', '[ebp+var_60]']
movzx ['eax,', 'word', 'ptr', '[edx+0Ch]']
cmp ['eax,', '41h']
jnz ['short', 'loc_FA2']
movsx ['ecx,', '[ebp+var_44]']
test ['ecx,', 'ecx']
jge ['short', 'loc_FA2']
movsx ['edx,', '[ebp+var_3C]']
test ['edx,', 'edx']
jl ['short', 'loc_FA2']
movsx ['eax,', '[ebp+var_4C]']
test ['eax,', 'eax']
jl ['short', 'loc_FA2']
mov ['[ebp+var_38],', '0']
push ['0']
push ['0']
push ['1004h']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ecx+28h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+var_64],', 'eax']
jmp ['short', 'loc_F67']
mov ['eax,', '[ebp+var_38]']
add ['eax,', '1']
mov ['[ebp+var_38],', 'eax']
mov ['ecx,', '[ebp+var_38]']
cmp ['ecx,', '[ebp+var_64]']
jge ['short', 'loc_FA2']
mov ['[ebp+var_108],', '2']
mov ['[ebp+var_10C],', '2']
lea ['edx,', '[ebp+var_118]']
push ['edx']
mov ['eax,', '[ebp+var_38]']
push ['eax']
push ['102Bh']
mov ['ecx,', '[ebp+this]']
mov ['edx,', '[ecx+28h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
jmp ['short', 'loc_F5E']
mov ['eax,', '1']
jmp ['short', 'loc_FBE']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+this]']
push ['eax']
call ['?run_dlgProc@SizeableDlg@@MAGHIIJ@Z']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
?onInitDialog@WindowsDlg@@MAEHXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '70h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_38],', 'ecx']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '20h']
call ['?InitToFitSizeFromCurrent@CWinMgr@@QAEXPAUHWND__@@@Z']
push ['1']
lea ['edx,', '[ebp+var_34]']
push ['edx']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '20h']
call ['?GetRect@CWinMgr@@QAE?AUtagRECT@@I@Z']
push ['eax']
call ['?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z']
add ['esp,', '4']
mov ['[ebp+var_4C],', 'eax']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[ebp+var_4C]']
mov ['[eax+2Ch],', 'ecx']
mov ['edx,', '[ebp+var_48]']
mov ['[eax+30h],', 'edx']
push ['1B59h']
lea ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '20h']
call ['?GetRect@CWinMgr@@QAE?AUtagRECT@@I@Z']
push ['eax']
call ['?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z']
add ['esp,', '4']
mov ['[ebp+var_44],', 'eax']
mov ['[ebp+var_40],', 'edx']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ebp+var_44]']
mov ['[ecx+34h],', 'edx']
mov ['eax,', '[ebp+var_40]']
mov ['[ecx+38h],', 'eax']
mov ['ecx,', '[ebp+var_38]']
mov ['dword', 'ptr', '[ecx+50h],', '0FFFFFFFFh']
mov ['edx,', '[ebp+var_38]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '20h']
call ['?CalcLayout@CWinMgr@@QAEXPAUHWND__@@@Z']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '20h']
mov ['eax,', '[ebp+var_38]']
mov ['edx,', '[eax+20h]']
mov ['eax,', '[edx+8]']
call ['eax']
mov ['ecx,', '[ebp+var_38]']
add ['ecx,', '10h']
push ['ecx']
mov ['edx,', '[ebp+var_38]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[eax+1Ch]']
call ['edx']
push ['1B59h']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__GetDlgItem@8']
mov ['edx,', '[ebp+var_38]']
mov ['[edx+28h],', 'eax']
push ['0']
push ['0']
push ['1037h']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+lParam],', 'eax']
mov ['edx,', '[ebp+lParam]']
or ['edx,', '10030h']
mov ['[ebp+lParam],', 'edx']
mov ['eax,', '[ebp+lParam]']
push ['eax']
push ['0']
push ['1036h']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ecx+28h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
lea ['eax,', '[ebp+Rect]']
push ['eax']
mov ['ecx,', '[ebp+var_38]']
mov ['edx,', '[ecx+28h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__GetClientRect@8']
mov ['eax,', '[ebp+Rect.right]']
sub ['eax,', '[ebp+Rect.left]']
mov ['[ebp+var_50],', 'eax']
push ['20h']
push ['0']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
mov ['[ebp+Dst],', '0Fh']
mov ['[ebp+var_6C],', '0']
mov ['[ebp+var_64],', 'offset', '$SG132617']
mov ['eax,', '[ebp+var_50]']
cdq
and ['edx,', '3']
add ['eax,', 'edx']
sar ['eax,', '2']
mov ['[ebp+var_68],', 'eax']
lea ['edx,', '[ebp+Dst]']
push ['edx']
push ['0']
push ['1061h']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+var_64],', 'offset', '$SG132618']
mov ['[ebp+var_68],', '12Ch']
lea ['edx,', '[ebp+Dst]']
push ['edx']
push ['1']
push ['1061h']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+var_6C],', '2']
mov ['[ebp+var_64],', 'offset', '$SG132619']
mov ['[ebp+var_68],', '28h']
lea ['edx,', '[ebp+Dst]']
push ['edx']
push ['2']
push ['1061h']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['ecx,', '[ebp+var_38]']
call ['?fitColumnsToSize@WindowsDlg@@IAEXXZ']
cmp ['ds:?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A.bottom,', '0']
jle ['short', 'loc_1200']
cmp ['ds:?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A.right,', '0']
jle ['short', 'loc_1200']
push ['40h']
mov ['edx,', 'ds:?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A.bottom']
sub ['edx,', 'ds:?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A.top']
push ['edx']
mov ['eax,', 'ds:?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A.right']
sub ['eax,', 'ds:?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A.left']
push ['eax']
mov ['ecx,', 'ds:?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A.top']
push ['ecx']
mov ['edx,', 'ds:?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A.left']
push ['edx']
push ['0']
mov ['eax,', '[ebp+var_38]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SetWindowPos@28']
jmp ['short', 'loc_1208']
mov ['ecx,', '[ebp+var_38]']
call ['?goToCenter@StaticDialog@@QAEXXZ']
push ['1']
mov ['ecx,', '[ebp+var_38]']
call ['?doRefresh@WindowsDlg@@QAEX_N@Z']
mov ['eax,', '1']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?onSize@WindowsDlg@@MAEXIHH@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?onSize@SizeableDlg@@MAEXIHH@Z']
mov ['ecx,', '[ebp+var_4]']
call ['?fitColumnsToSize@WindowsDlg@@IAEXXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?onGetMinMaxInfo@WindowsDlg@@MAEXPAUtagMINMAXINFO@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?onGetMinMaxInfo@SizeableDlg@@MAEXPAUtagMINMAXINFO@@@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?onWinMgr@WindowsDlg@@MAEJIJ@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx+8],', '1']
jnz ['loc_131C']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '1B59h']
ja ['short', 'loc_12C2']
cmp ['[ebp+var_4],', '1B59h']
jz ['short', 'loc_12F9']
cmp ['[ebp+var_4],', '0']
jbe ['short', 'loc_131C']
cmp ['[ebp+var_4],', '2']
jbe ['short', 'loc_12D6']
jmp ['short', 'loc_131C']
cmp ['[ebp+var_4],', '1B5Ah']
jb ['short', 'loc_131C']
cmp ['[ebp+var_4],', '1B5Ch']
jbe ['short', 'loc_12D6']
jmp ['short', 'loc_131C']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[eax+2Ch]']
mov ['edx,', '[eax+30h]']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+1Ch],', 'ecx']
mov ['[eax+20h],', 'edx']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+2Ch],', '1']
mov ['eax,', '1']
jmp ['short', 'loc_132C']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[edx+34h]']
mov ['ecx,', '[edx+38h]']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+1Ch],', 'eax']
mov ['[edx+20h],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+2Ch],', '1']
mov ['eax,', '1']
jmp ['short', 'loc_132C']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_C]']
call ['?onWinMgr@SizeableDlg@@MAEJIJ@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?destroy@WindowsDlg@@MAEXXZ proc near   
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
push ['offset', '?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__GetWindowRect@8']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+hWnd],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
mov ['edx,', '[ebp+hWnd]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__DestroyWindow@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?fitColumnsToSize@WindowsDlg@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_1C],', 'ecx']
lea ['eax,', '[ebp+Rect]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ecx+28h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__GetClientRect@8']
test ['eax,', 'eax']
jz ['short', 'loc_141E']
mov ['eax,', '[ebp+Rect.right]']
sub ['eax,', '[ebp+Rect.left]']
mov ['[ebp+lParam],', 'eax']
push ['0']
push ['0']
push ['101Dh']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ecx+28h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['ecx,', '[ebp+lParam]']
sub ['ecx,', 'eax']
mov ['[ebp+lParam],', 'ecx']
push ['0']
push ['2']
push ['101Dh']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx+28h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['ecx,', '[ebp+lParam]']
sub ['ecx,', 'eax']
mov ['[ebp+lParam],', 'ecx']
push ['2']
call ['dword', 'ptr', 'ds:__imp__GetSystemMetrics@4']
mov ['edx,', '[ebp+lParam]']
sub ['edx,', 'eax']
mov ['[ebp+lParam],', 'edx']
mov ['eax,', '[ebp+lParam]']
sub ['eax,', '1']
mov ['[ebp+lParam],', 'eax']
mov ['ecx,', '[ebp+lParam]']
push ['ecx']
push ['1']
push ['101Eh']
mov ['edx,', '[ebp+var_1C]']
mov ['eax,', '[edx+28h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?resetSelection@WindowsDlg@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?resetSelection@WindowsDlg@@IAEXXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+3Ch]']
call ['?getCurrentTabIndex@TabBar@@QBEHXZ']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+wParam],', '0']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
mov ['[ebp+var_4],', '0']
lea ['edx,', '[ebp+var_30]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
jmp ['short', 'loc_14AC']
lea ['ecx,', '[ebp+var_24]']
call ['??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ']
mov ['eax,', '[ebp+wParam]']
add ['eax,', '1']
mov ['[ebp+wParam],', 'eax']
lea ['ecx,', '[ebp+var_30]']
push ['ecx']
lea ['ecx,', '[ebp+var_24]']
call ['??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_152E']
lea ['ecx,', '[ebp+var_24]']
call ['??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ']
mov ['eax,', '[eax]']
cmp ['eax,', '[ebp+var_18]']
jnz ['short', 'loc_14F8']
mov ['[ebp+var_54],', '3']
mov ['[ebp+var_58],', '3']
lea ['ecx,', '[ebp+lParam]']
push ['ecx']
mov ['edx,', '[ebp+wParam]']
push ['edx']
push ['102Bh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
jmp ['short', 'loc_1529']
mov ['[ebp+var_88],', '2']
mov ['[ebp+var_8C],', '0']
lea ['edx,', '[ebp+var_98]']
push ['edx']
mov ['eax,', '[ebp+wParam]']
push ['eax']
push ['102Bh']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+28h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
jmp ['loc_149B']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_30]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?doSave@WindowsDlg@@IAEXXZ proc near    
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '34h']
mov ['[ebp+var_4],', 'ecx']
lea ['ecx,', '[ebp+lParam]']
call ['??0NMWINDLG@@QAE@XZ']
mov ['[ebp+var_24],', '2']
push ['2']
push ['0FFFFFFFFh']
push ['100Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+lParam],', 'eax']
mov ['ecx,', 'ds:?WDN_NOTIFY@@3IB']
mov ['[ebp+var_2C],', 'ecx']
push ['0']
push ['0']
push ['1032h']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+28h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+var_1C],', 'eax']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+var_1C]']
mov ['edx,', '4']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??_U@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+wParam],', '0FFFFFFFFh']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_15FA']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
push ['2']
mov ['edx,', '[ebp+wParam]']
push ['edx']
push ['100Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+wParam],', 'eax']
cmp ['[ebp+wParam],', '0FFFFFFFFh']
jnz ['short', 'loc_161D']
jmp ['short', 'loc_1639']
mov ['edx,', '[ebp+wParam]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[eax]']
mov ['[edx+ecx*4],', 'eax']
jmp ['short', 'loc_15F1']
lea ['ecx,', '[ebp+lParam]']
push ['ecx']
push ['0']
mov ['edx,', 'ds:?WDN_NOTIFY@@3IB']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['??_V@YAXPAX@Z']
add ['esp,', '4']
push ['0']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '10h']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+28h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__InvalidateRect@12']
push ['0']
push ['0']
push ['1032h']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+28h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
push ['eax']
push ['0']
push ['1015h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?doClose@WindowsDlg@@IAEXXZ proc near   
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?doClose@WindowsDlg@@IAEXXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '160h']
push ['esi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
lea ['ecx,', '[ebp+var_8C]']
call ['??0NMWINDLG@@QAE@XZ']
mov ['[ebp+var_7C],', '3']
push ['2']
push ['0FFFFFFFFh']
push ['100Ch']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0FFFFFFFFh']
jnz ['short', 'loc_1712']
jmp ['loc_1BC2']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['eax,', '[eax]']
mov ['[ebp+var_78],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+0Ch]']
mov ['[ebp+var_8C],', 'edx']
mov ['eax,', 'ds:?WDN_NOTIFY@@3IB']
mov ['[ebp+var_84],', 'eax']
push ['0']
push ['0']
push ['1032h']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+28h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+var_74],', 'eax']
mov ['eax,', '[ebp+var_74]']
mov ['[ebp+var_28],', 'eax']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+var_74]']
mov ['edx,', '4']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??_U@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_50],', 'eax']
mov ['eax,', '[ebp+var_50]']
mov ['[ebp+var_70],', 'eax']
lea ['ecx,', '[ebp+var_A8]']
call ['??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_6C],', '7FFFFFFFh']
lea ['ecx,', '[ebp+var_6C]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
lea ['ecx,', '[ebp+var_A8]']
call ['?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z']
mov ['[ebp+wParam],', '0FFFFFFFFh']
mov ['[ebp+var_20],', '0']
jmp ['short', 'loc_17C6']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
push ['2']
mov ['ecx,', '[ebp+wParam]']
push ['ecx']
push ['100Ch']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+28h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+wParam],', 'eax']
cmp ['[ebp+wParam],', '0FFFFFFFFh']
jnz ['short', 'loc_17E9']
jmp ['short', 'loc_184D']
mov ['[ebp+var_128],', '2']
mov ['[ebp+var_12C],', '0']
lea ['ecx,', '[ebp+lParam]']
push ['ecx']
mov ['edx,', '[ebp+wParam]']
push ['edx']
push ['102Bh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['edx,', '[ebp+wParam]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['ecx,', '[ebp+var_20]']
mov ['edx,', '[ebp+var_70]']
mov ['eax,', '[eax]']
mov ['[edx+ecx*4],', 'eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
lea ['ecx,', '[ebp+var_A8]']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['edx,', '[ebp+wParam]']
mov ['[eax],', 'edx']
jmp ['loc_17BD']
lea ['eax,', '[ebp+var_8C]']
push ['eax']
push ['0']
mov ['ecx,', 'ds:?WDN_NOTIFY@@3IB']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
cmp ['[ebp+var_80],', '0']
jz ['loc_1AE0']
lea ['ecx,', '[ebp+var_98]']
push ['ecx']
lea ['ecx,', '[ebp+var_A8]']
call ['?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_18A7']
mov ['edx,', '[ebp+var_1C]']
add ['edx,', '1']
mov ['[ebp+var_1C],', 'edx']
lea ['ecx,', '[ebp+var_98]']
call ['??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ']
mov ['eax,', '[ebp+var_1C]']
cmp ['eax,', '[ebp+var_28]']
jnb ['loc_1992']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ebp+var_70]']
cmp ['dword', 'ptr', '[edx+ecx*4],', '0FFFFFFFFh']
jnz ['loc_198D']
lea ['ecx,', '[ebp+var_98]']
call ['??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ']
mov ['eax,', '[eax]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['ecx,', '[eax]']
mov ['[ebp+var_3C],', 'ecx']
lea ['ecx,', '[ebp+var_98]']
call ['??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ']
mov ['edx,', '[eax]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['dword', 'ptr', '[eax],', '0FFFFFFFFh']
lea ['eax,', '[ebp+var_60]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_B8]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
jmp ['short', 'loc_1933']
lea ['ecx,', '[ebp+var_60]']
call ['??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ']
lea ['edx,', '[ebp+var_B8]']
push ['edx']
lea ['ecx,', '[ebp+var_60]']
call ['??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_1972']
lea ['ecx,', '[ebp+var_60]']
call ['??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ']
mov ['ecx,', '[eax]']
cmp ['ecx,', '[ebp+var_3C]']
jle ['short', 'loc_1970']
lea ['ecx,', '[ebp+var_60]']
call ['??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ']
mov ['[ebp+var_2C],', 'eax']
mov ['edx,', '[ebp+var_2C]']
mov ['eax,', '[edx]']
sub ['eax,', '1']
mov ['ecx,', '[ebp+var_2C]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_192B']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_B8]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_60]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
jmp ['loc_1893']
mov ['[ebp+var_4C],', '0FFFFFFFFh']
lea ['edx,', '[ebp+var_FC]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
mov ['[ebp+var_64],', 'eax']
mov ['eax,', '[ebp+var_64]']
mov ['[ebp+var_44],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_D8],', 'esp']
mov ['edx,', '[ebp+var_44]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_68],', 'eax']
mov ['eax,', '[ebp+var_68]']
mov ['[ebp+var_CC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_4C]']
push ['ecx']
lea ['edx,', '[ebp+var_21]']
push ['edx']
lea ['eax,', '[ebp+var_104]']
push ['eax']
call ['??$bind2nd@U?$equal_to@H@std@@H@std@@YA?AV?$binder2nd@U?$equal_to@H@std@@@0@ABU?$equal_to@H@0@ABH@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[eax]']
push ['edx']
sub ['esp,', '0Ch']
mov ['eax,', 'esp']
mov ['[ebp+var_C0],', 'esp']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
mov ['[ebp+var_54],', 'eax']
mov ['ecx,', '[ebp+var_54]']
mov ['[ebp+var_AC],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
sub ['esp,', '0Ch']
mov ['edx,', 'esp']
mov ['[ebp+var_C4],', 'esp']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
mov ['[ebp+var_34],', 'eax']
mov ['eax,', '[ebp+var_34]']
mov ['[ebp+var_BC],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_F0]']
push ['ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
call ['??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z']
add ['esp,', '24h']
mov ['[ebp+var_38],', 'eax']
mov ['edx,', '[ebp+var_38]']
mov ['[ebp+var_40],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_C8],', 'esp']
mov ['eax,', '[ebp+var_40]']
push ['eax']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_48],', 'eax']
mov ['ecx,', '[ebp+var_48]']
mov ['[ebp+var_D0],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '9']
lea ['edx,', '[ebp+var_E4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
mov ['byte', 'ptr', '[ebp+var_4],', '0Ah']
call ['?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z']
mov ['[ebp+var_D4],', 'eax']
lea ['ecx,', '[ebp+var_E4]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
lea ['ecx,', '[ebp+var_F0]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_FC]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_98]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_70]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
call ['??_V@YAXPAX@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_10]']
mov ['ecx,', '[edx+3Ch]']
call ['?nbItem@TabBar@@QBEHXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
cmp ['esi,', 'eax']
jz ['short', 'loc_1B1D']
push ['1']
mov ['ecx,', '[ebp+var_10]']
call ['?doRefresh@WindowsDlg@@QAEX_N@Z']
jmp ['loc_1BB0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
cmp ['[ebp+var_14],', 'eax']
jnz ['short', 'loc_1B36']
mov ['eax,', '[ebp+var_14]']
sub ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
cmp ['[ebp+var_14],', '0']
jl ['short', 'loc_1B90']
mov ['[ebp+var_15C],', '2']
mov ['[ebp+var_160],', '2']
lea ['ecx,', '[ebp+var_16C]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
push ['102Bh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
sub ['eax,', '1']
push ['eax']
push ['0']
push ['1015h']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+28h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
push ['0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
push ['eax']
push ['102Fh']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+28h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_A8]']
call ['??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?doSortToTabs@WindowsDlg@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?doSortToTabs@WindowsDlg@@IAEXXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '50h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['2']
push ['0FFFFFFFFh']
push ['100Ch']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+var_1C],', '0FFFFFFFFh']
jnz ['short', 'loc_1C2E']
mov ['[ebp+var_1C],', '0']
lea ['ecx,', '[ebp+lParam]']
call ['??0NMWINDLG@@QAE@XZ']
mov ['[ebp+var_4C],', '4']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+lParam],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['edx,', '[eax]']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', 'ds:?WDN_NOTIFY@@3IB']
mov ['[ebp+var_54],', 'eax']
push ['0']
push ['0']
push ['1004h']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+28h]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+var_44],', 'eax']
mov ['eax,', '[ebp+var_44]']
mov ['[ebp+var_28],', 'eax']
xor ['ecx,', 'ecx']
mov ['eax,', '[ebp+var_44]']
mov ['edx,', '4']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??_U@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_40],', 'eax']
lea ['ecx,', '[ebp+var_3C]']
call ['??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_24],', '7FFFFFFFh']
lea ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
lea ['ecx,', '[ebp+var_3C]']
call ['?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z']
mov ['[ebp+wParam],', '0FFFFFFFFh']
mov ['[ebp+var_18],', '0']
jmp ['short', 'loc_1CE5']
mov ['eax,', '[ebp+var_18]']
add ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
push ['0']
mov ['ecx,', '[ebp+wParam]']
push ['ecx']
push ['100Ch']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+28h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+wParam],', 'eax']
cmp ['[ebp+wParam],', '0FFFFFFFFh']
jnz ['short', 'loc_1D08']
jmp ['short', 'loc_1D43']
mov ['ecx,', '[ebp+wParam]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['edx,', '[ebp+var_18]']
mov ['ecx,', '[ebp+var_40]']
mov ['eax,', '[eax]']
mov ['[ecx+edx*4],', 'eax']
mov ['ecx,', '[ebp+wParam]']
cmp ['ecx,', '[ebp+var_1C]']
jnz ['short', 'loc_1D30']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+var_48],', 'edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
lea ['ecx,', '[ebp+var_3C]']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['ecx,', '[ebp+wParam]']
mov ['[eax],', 'ecx']
jmp ['short', 'loc_1CDC']
lea ['edx,', '[ebp+lParam]']
push ['edx']
push ['0']
mov ['eax,', 'ds:?WDN_NOTIFY@@3IB']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+8]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
cmp ['[ebp+var_50],', '0']
jz ['short', 'loc_1D77']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ']
push ['1']
mov ['ecx,', '[ebp+var_10]']
call ['?doRefresh@WindowsDlg@@QAEX_N@Z']
mov ['eax,', '[ebp+var_40]']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
call ['??_V@YAXPAX@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_3C]']
call ['??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?updateButtonState@WindowsDlg@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
push ['0']
push ['0']
push ['1032h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jnz ['short', 'loc_1E28']
push ['0']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__GetDlgItem@8']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__EnableWindow@8']
push ['0']
push ['1B5Ah']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__GetDlgItem@8']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__EnableWindow@8']
push ['0']
push ['1B5Bh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__GetDlgItem@8']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__EnableWindow@8']
jmp ['short', 'loc_1E96']
push ['1']
push ['1B5Ah']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__GetDlgItem@8']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__EnableWindow@8']
push ['1']
push ['1B5Bh']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__GetDlgItem@8']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__EnableWindow@8']
cmp ['[ebp+var_8],', '1']
jnz ['short', 'loc_1E7E']
push ['1']
push ['1']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__GetDlgItem@8']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__EnableWindow@8']
jmp ['short', 'loc_1E96']
push ['0']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__GetDlgItem@8']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__EnableWindow@8']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+54h]']
push ['edx']
push ['1B5Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__GetDlgItem@8']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__EnableWindow@8']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?activateCurrent@WindowsDlg@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['[ebp+var_4],', 'ecx']
push ['0']
push ['0']
push ['1032h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+28h]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
cmp ['eax,', '1']
jnz ['loc_1F6A']
lea ['ecx,', '[ebp+lParam]']
call ['??0NMWINDLG@@QAE@XZ']
mov ['[ebp+var_14],', '1']
push ['2']
push ['0FFFFFFFFh']
push ['100Ch']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+28h]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '40h']
call ['??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z']
mov ['ecx,', '[eax]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
mov ['[ebp+lParam],', 'eax']
mov ['ecx,', 'ds:?WDN_NOTIFY@@3IB']
mov ['[ebp+var_1C],', 'ecx']
lea ['edx,', '[ebp+lParam]']
push ['edx']
push ['0']
mov ['eax,', 'ds:?WDN_NOTIFY@@3IB']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
push ['offset', '?_lastKnownLocation@WindowsDlg@@1UtagRECT@@A']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__GetWindowRect@8']
push ['1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__EndDialog@8']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?init@WindowsDlg@@EAEXPAUHINSTANCE__@@PAUHWND__@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '$SG132287']
test ['eax,', 'eax']
jz ['short', 'loc_1F97']
push ['0D8h']
push ['offset', '$SG132288']
push ['offset', '$SG132289']
call ['__wassert']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+3Ch],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??0WindowsMenu@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1WindowsMenu@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_1FEB']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__DestroyMenu@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '9Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_74],', 'ecx']
push ['offset', 'MenuName']
mov ['eax,', '[ebp+hInstance]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__LoadMenuW@8']
mov ['ecx,', '[ebp+var_74]']
mov ['[ecx],', 'eax']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_209B']
mov ['edx,', '2']
imul ['eax,', 'edx,', '0']
mov ['ecx,', '[ebp+Str]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax]']
test ['edx,', 'edx']
jz ['short', 'loc_209B']
mov ['eax,', '[ebp+Str]']
push ['eax']
lea ['ecx,', '[ebp+var_6C]']
call ['??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z']
mov ['[ebp+var_4],', '0']
push ['offset', '$SG133098']
lea ['ecx,', '[ebp+var_6C]']
call ['??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z']
lea ['ecx,', '[ebp+var_6C]']
call ['?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ']
push ['eax']
push ['2AF9h']
push ['0']
push ['2AF9h']
mov ['ecx,', '[ebp+var_74]']
mov ['edx,', '[ecx]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__ModifyMenuW@20']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_6C]']
call ['??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ']
mov ['[ebp+uId],', '0']
mov ['eax,', '[ebp+hMenu]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__GetMenuItemCount@4']
sub ['eax,', '1']
mov ['[ebp+uId],', 'eax']
jmp ['short', 'loc_20BD']
mov ['ecx,', '[ebp+uId]']
sub ['ecx,', '1']
mov ['[ebp+uId],', 'ecx']
cmp ['[ebp+uId],', '0']
jbe ['short', 'loc_20E1']
push ['400h']
mov ['edx,', '[ebp+uId]']
push ['edx']
mov ['eax,', '[ebp+hMenu]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__GetMenuState@12']
and ['eax,', '10h']
jnz ['short', 'loc_20DD']
jmp ['short', 'loc_20B4']
jmp ['short', 'loc_20E1']
jmp ['short', 'loc_20B4']
push ['30h']
push ['0']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['_memset']
add ['esp,', '0Ch']
mov ['[ebp+Dst],', '30h']
mov ['[ebp+var_A4],', '44h']
push ['20h']
lea ['edx,', '[ebp+Buffer]']
push ['edx']
push ['2AF8h']
mov ['eax,', '[ebp+hInstance]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__LoadStringW@16']
cmp ['[ebp+Str],', '0']
jz ['short', 'loc_213E']
mov ['ecx,', '2']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+Str]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx]']
test ['ecx,', 'ecx']
jz ['short', 'loc_213E']
mov ['edx,', '[ebp+Str]']
mov ['[ebp+var_78],', 'edx']
jmp ['short', 'loc_2144']
lea ['eax,', '[ebp+Buffer]']
mov ['[ebp+var_78],', 'eax']
mov ['ecx,', '[ebp+var_78]']
mov ['[ebp+var_84],', 'ecx']
mov ['edx,', '[ebp+var_74]']
mov ['eax,', '[edx]']
mov ['[ebp+var_94],', 'eax']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
push ['1']
mov ['edx,', '[ebp+uId]']
push ['edx']
mov ['eax,', '[ebp+hMenu]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__InsertMenuItemW@16']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0C4h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_10],', 'eax']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_70],', 'ecx']
mov ['eax,', '[ebp+var_70]']
mov ['ecx,', '[ebp+hMenu]']
cmp ['ecx,', '[eax]']
jnz ['loc_2404']
mov ['ecx,', '[ebp+arg_4]']
call ['?getCurrentTabIndex@TabBar@@QBEHXZ']
mov ['[ebp+var_68],', 'eax']
mov ['[ebp+var_60],', '0Ah']
mov ['ecx,', '[ebp+arg_4]']
call ['?nbItem@TabBar@@QBEHXZ']
mov ['[ebp+var_54],', 'eax']
mov ['edx,', '[ebp+var_54]']
cmp ['edx,', '[ebp+var_60]']
jge ['short', 'loc_21F9']
mov ['eax,', '[ebp+var_54]']
mov ['[ebp+var_5C],', 'eax']
jmp ['short', 'loc_21FF']
mov ['ecx,', '[ebp+var_60]']
mov ['[ebp+var_5C],', 'ecx']
mov ['edx,', '[ebp+var_5C]']
mov ['[ebp+var_54],', 'edx']
mov ['[ebp+uId],', '2B0Ch']
mov ['[ebp+var_50],', '0']
jmp ['short', 'loc_2227']
mov ['eax,', '[ebp+uId]']
add ['eax,', '1']
mov ['[ebp+uId],', 'eax']
mov ['ecx,', '[ebp+var_50]']
add ['ecx,', '1']
mov ['[ebp+var_50],', 'ecx']
mov ['edx,', '[ebp+var_54]']
add ['edx,', '2B0Ch']
cmp ['[ebp+uId],', 'edx']
jge ['loc_23DE']
mov ['eax,', '[ebp+var_50]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['?getBufferByIndex@DocTabView@@QAEPAVBuffer@@H@Z']
mov ['[ebp+var_7C],', 'eax']
mov ['ecx,', '[ebp+var_7C]']
push ['ecx']
call ['?getInstance@FileManager@@SAPAV1@XZ']
mov ['ecx,', 'eax']
call ['?getBufferByID@FileManager@@QAEPAVBuffer@@PAV2@@Z']
mov ['[ebp+var_78],', 'eax']
push ['30h']
push ['0']
lea ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memset']
add ['esp,', '0Ch']
mov ['[ebp+Dst],', '30h']
mov ['[ebp+var_CC],', '43h']
mov ['ecx,', '[ebp+var_78]']
call ['?getFileName@Buffer@@QBEPB_WXZ']
push ['eax']
lea ['ecx,', '[ebp+var_48]']
call ['??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z']
mov ['[ebp+var_4],', '0']
lea ['eax,', '[ebp+var_48]']
push ['eax']
mov ['ecx,', '[ebp+var_50]']
push ['ecx']
push ['3Ch']
lea ['edx,', '[ebp+var_2C]']
push ['edx']
call ['?BuildMenuFileName@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@HIABV12@@Z']
add ['esp,', '10h']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_48]']
call ['??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ']
sub ['esp,', '0Ch']
mov ['eax,', 'esp']
mov ['[ebp+var_9C],', 'esp']
push ['eax']
lea ['ecx,', '[ebp+var_2C]']
call ['?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ']
mov ['[ebp+var_74],', 'eax']
mov ['ecx,', '[ebp+var_74]']
mov ['[ebp+var_94],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
sub ['esp,', '0Ch']
mov ['edx,', 'esp']
mov ['[ebp+var_80],', 'esp']
push ['edx']
lea ['ecx,', '[ebp+var_2C]']
call ['?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ']
mov ['[ebp+var_64],', 'eax']
mov ['eax,', '[ebp+var_64]']
mov ['[ebp+var_A0],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_90]']
call ['??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z']
mov ['[ebp+var_98],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
xor ['ecx,', 'ecx']
mov ['[ebp+var_56],', 'cx']
lea ['edx,', '[ebp+var_56]']
push ['edx']
lea ['ecx,', '[ebp+var_90]']
call ['?push_back@?$vector@_WV?$allocator@_W@std@@@std@@QAEX$$QA_W@Z']
push ['0']
lea ['ecx,', '[ebp+var_90]']
call ['??A?$vector@_WV?$allocator@_W@std@@@std@@QAEAA_WI@Z']
mov ['[ebp+var_AC],', 'eax']
mov ['eax,', '[ebp+var_C4]']
and ['eax,', '0FFFFFFF4h']
mov ['[ebp+var_C4],', 'eax']
mov ['ecx,', '[ebp+var_50]']
cmp ['ecx,', '[ebp+var_68]']
jnz ['short', 'loc_2368']
mov ['edx,', '[ebp+var_C4]']
or ['edx,', '8']
mov ['[ebp+var_C4],', 'edx']
mov ['eax,', '[ebp+uId]']
mov ['[ebp+var_C0],', 'eax']
push ['0']
mov ['ecx,', '[ebp+uId]']
push ['ecx']
mov ['edx,', '[ebp+hMenu]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__GetMenuState@12']
mov ['[ebp+var_6C],', 'eax']
cmp ['[ebp+var_6C],', '0FFFFFFFFh']
jnz ['short', 'loc_23A4']
lea ['eax,', '[ebp+Dst]']
push ['eax']
push ['0']
push ['2AF9h']
mov ['ecx,', '[ebp+hMenu]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__InsertMenuItemW@16']
jmp ['short', 'loc_23BB']
lea ['edx,', '[ebp+Dst]']
push ['edx']
push ['0']
mov ['eax,', '[ebp+uId]']
push ['eax']
mov ['ecx,', '[ebp+hMenu]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SetMenuItemInfoW@16']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_90]']
call ['??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ']
jmp ['loc_2215']
jmp ['short', 'loc_23E9']
mov ['edx,', '[ebp+uId]']
add ['edx,', '1']
mov ['[ebp+uId],', 'edx']
cmp ['[ebp+uId],', '2B15h']
jg ['short', 'loc_2404']
push ['0']
mov ['eax,', '[ebp+uId]']
push ['eax']
mov ['ecx,', '[ebp+hMenu]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__DeleteMenu@12']
jmp ['short', 'loc_23E0']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['ecx,', '[ebp+var_10]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0WindowsDlg@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1SizeableDlg@@UAE@XZ']
endp
__unwindfunclet$??0WindowsDlg@@QAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '40h']
jmp ['??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
endp
__ehhandler$??0WindowsDlg@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0WindowsDlg@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z$0 proc near
lea ['ecx,', '[ebp-90h]']
jmp ['??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z$1 proc near
mov ['ecx,', '[ebp-94h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z$2 proc near
mov ['ecx,', '[ebp-0A0h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-114h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?run_dlgProc@WindowsDlg@@MAGHIIJ@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?resetSelection@WindowsDlg@@IAEXXZ$0 proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?resetSelection@WindowsDlg@@IAEXXZ$1 proc near
lea ['ecx,', '[ebp-30h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?resetSelection@WindowsDlg@@IAEXXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-90h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?resetSelection@WindowsDlg@@IAEXXZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$0 proc near
lea ['ecx,', '[ebp-0A8h]']
jmp ['??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$1 proc near
lea ['ecx,', '[ebp-98h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$2 proc near
lea ['ecx,', '[ebp-60h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$3 proc near
lea ['ecx,', '[ebp-0B8h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$4 proc near
lea ['ecx,', '[ebp-0FCh]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$5 proc near
mov ['ecx,', '[ebp-0D8h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$6 proc near
mov ['ecx,', '[ebp-0C0h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$7 proc near
mov ['ecx,', '[ebp-0C4h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$8 proc near
lea ['ecx,', '[ebp-0F0h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?doClose@WindowsDlg@@IAEXXZ$9 proc near
mov ['ecx,', '[ebp-0C8h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?doClose@WindowsDlg@@IAEXXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-168h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?doClose@WindowsDlg@@IAEXXZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?doSortToTabs@WindowsDlg@@IAEXXZ$0 proc near
lea ['ecx,', '[ebp-3Ch]']
jmp ['??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
endp
__ehhandler$?doSortToTabs@WindowsDlg@@IAEXXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?doSortToTabs@WindowsDlg@@IAEXXZ']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z$0 proc near
lea ['ecx,', '[ebp-6Ch]']
jmp ['??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ']
endp
__ehhandler$?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0A0h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?init@WindowsMenu@@QAEXPAUHINSTANCE__@@PAUHMENU__@@PB_W@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$0 proc near
lea ['ecx,', '[ebp-48h]']
jmp ['??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ']
endp
__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$1 proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ']
endp
__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$2 proc near
mov ['ecx,', '[ebp-9Ch]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$3 proc near
mov ['ecx,', '[ebp-80h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z$4 proc near
lea ['ecx,', '[ebp-90h]']
jmp ['??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ']
endp
__ehhandler$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0C8h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?initPopupMenu@WindowsMenu@@QAEXPAUHMENU__@@PAVDocTabView@@@Z']
jmp ['___CxxFrameHandler3']
endp
??$?0AAPAHAAHX@?$pair@PAHH@std@@QAE@AAPAHAAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$forward@AAPAH@std@@YAAAPAHAAPAH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAH@std@@YAAAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '20h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_D]']
call ['??0?$allocator@_W@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_20],', 'esp']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_24],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_28],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_2C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
endp
__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 proc near
mov ['ecx,', '[ebp-20h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 proc near
mov ['ecx,', '[ebp-28h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$?0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@X@?$vector@_WV?$allocator@_W@std@@@std@@QAE@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Advance@PAHH@std@@YAXAAPAHHUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
pop ['ebp']
retn
endp
??$_Allocate@D@std@@YAPADIPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_2753']
jmp ['short', 'loc_2773']
cmp ['[ebp+arg_0],', '0FFFFFFFFh']
ja ['short', 'loc_276E']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_2773']
call ['?_Xbad_alloc@std@@YAXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Allocate@H@std@@YAPAHIPAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_278F']
jmp ['short', 'loc_27B5']
cmp ['[ebp+arg_0],', '3FFFFFFFh']
ja ['short', 'loc_27B0']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '2']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_27B5']
call ['?_Xbad_alloc@std@@YAXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_27CF']
jmp ['short', 'loc_27F5']
cmp ['[ebp+arg_0],', '1FFFFFFFh']
ja ['short', 'loc_27F0']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '3']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_27F5']
call ['?_Xbad_alloc@std@@YAXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_280F']
jmp ['short', 'loc_2834']
cmp ['[ebp+arg_0],', '7FFFFFFFh']
ja ['short', 'loc_282F']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '1']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_2834']
call ['?_Xbad_alloc@std@@YAXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '5Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_286D']
cmp ['[ebp+arg_10],', '0']
jnz ['short', 'loc_2872']
jmp ['loc_2BA6']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '[ebp+arg_10]']
cmp ['eax,', '2']
jnz ['short', 'loc_28CF']
push ['0B63h']
push ['offset', '??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
sub ['esp,', '10h']
mov ['eax,', 'esp']
mov ['ecx,', '[ebp+arg_18]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_1C]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_20]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_24]']
mov ['[eax+0Ch],', 'edx']
call ['??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z']
add ['esp,', '20h']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_28CA']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['??$iter_swap@PAHPAH@std@@YAXPAH0@Z']
add ['esp,', '8']
jmp ['loc_2BA6']
mov ['eax,', '[ebp+arg_C]']
cmp ['eax,', '[ebp+arg_10]']
jg ['loc_297F']
mov ['ecx,', '[ebp+arg_14]']
call ['?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ']
cmp ['[ebp+arg_C],', 'eax']
jg ['loc_297F']
mov ['ecx,', '[ebp+arg_14]']
call ['?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ']
sub ['esp,', '14h']
mov ['ecx,', 'esp']
mov ['[ebp+var_2C],', 'esp']
push ['eax']
call ['??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_30],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
lea ['ecx,', '[ebp+var_54]']
push ['ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
call ['??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z']
add ['esp,', '20h']
mov ['[ebp+var_34],', 'eax']
lea ['ecx,', '[ebp+var_54]']
call ['??1?$_Temp_iterator@H@std@@QAE@XZ']
sub ['esp,', '10h']
mov ['edx,', 'esp']
mov ['eax,', '[ebp+arg_18]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_1C]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_20]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+arg_24]']
mov ['[edx+0Ch],', 'ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+arg_14]']
call ['?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
call ['?_First@?$_Temp_iterator@H@std@@QBEPAHXZ']
push ['eax']
call ['??$_Merge@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z']
add ['esp,', '24h']
jmp ['loc_2BA6']
mov ['ecx,', '[ebp+arg_14]']
call ['?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ']
cmp ['[ebp+arg_10],', 'eax']
jg ['loc_2A23']
mov ['ecx,', '[ebp+arg_14]']
call ['?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ']
sub ['esp,', '14h']
mov ['ecx,', 'esp']
mov ['[ebp+var_38],', 'esp']
push ['eax']
call ['??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z']
mov ['[ebp+var_28],', 'eax']
mov ['edx,', '[ebp+var_28]']
mov ['[ebp+var_3C],', 'edx']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
lea ['edx,', '[ebp+var_68]']
push ['edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
call ['??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z']
add ['esp,', '20h']
mov ['[ebp+var_40],', 'eax']
lea ['ecx,', '[ebp+var_68]']
call ['??1?$_Temp_iterator@H@std@@QAE@XZ']
sub ['esp,', '10h']
mov ['eax,', 'esp']
mov ['ecx,', '[ebp+arg_18]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_1C]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_20]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_24]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
call ['?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
call ['?_First@?$_Temp_iterator@H@std@@QBEPAHXZ']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['??$_Merge_backward@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z']
add ['esp,', '24h']
jmp ['loc_2BA6']
mov ['eax,', '[ebp+arg_10]']
cmp ['eax,', '[ebp+arg_C]']
jge ['short', 'loc_2A99']
mov ['eax,', '[ebp+arg_C]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_14],', '0']
mov ['ecx,', '[ebp+Dst]']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
lea ['eax,', '[ebp+var_10]']
push ['eax']
call ['??$advance@PAHH@std@@YAXAAPAHH@Z']
add ['esp,', '0FFFFFFF8h']
mov ['ecx,', 'esp']
mov ['edx,', '[ebp+arg_18]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_1C]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_20]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_24]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$lower_bound@PAHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@@Z']
add ['esp,', '1Ch']
mov ['[ebp+var_1C],', 'eax']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Distance@PAHH@std@@YAXPAH0AAH@Z']
add ['esp,', '0Ch']
jmp ['short', 'loc_2B05']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+arg_10]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+Src]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
lea ['eax,', '[ebp+var_1C]']
push ['eax']
call ['??$advance@PAHH@std@@YAXAAPAHH@Z']
add ['esp,', '0FFFFFFF8h']
mov ['ecx,', 'esp']
mov ['edx,', '[ebp+arg_18]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_1C]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_20]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_24]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['??$upper_bound@PAHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@@Z']
add ['esp,', '1Ch']
mov ['[ebp+var_10],', 'eax']
lea ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['??$_Distance@PAHH@std@@YAXPAH0AAH@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
call ['??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z']
add ['esp,', '18h']
mov ['[ebp+var_20],', 'eax']
sub ['esp,', '10h']
mov ['ecx,', 'esp']
mov ['edx,', '[ebp+arg_18]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_1C]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_20]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_24]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z']
add ['esp,', '18h']
mov ['ecx,', 'esp']
mov ['edx,', '[ebp+arg_18]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_1C]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_20]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_24]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
sub ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_20]']
push ['eax']
call ['??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z']
add ['esp,', '28h']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z$0 proc near
mov ['ecx,', '[ebp-2Ch]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__unwindfunclet$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z$2 proc near
mov ['ecx,', '[ebp-38h]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__ehhandler$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-60h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+Src],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_18],', 'ecx']
jmp ['short', 'loc_2C20']
mov ['edx,', '[ebp+var_18]']
sub ['edx,', '20h']
mov ['[ebp+var_18],', 'edx']
cmp ['[ebp+var_18],', '20h']
jl ['short', 'loc_2C6B']
mov ['eax,', '[ebp+Src]']
mov ['[ebp+var_1C],', 'eax']
push ['20h']
lea ['ecx,', '[ebp+var_1C]']
push ['ecx']
call ['??$advance@PAHH@std@@YAXAAPAHH@Z']
add ['esp,', '0FFFFFFF8h']
mov ['edx,', 'esp']
mov ['eax,', '[ebp+arg_10]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_14]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_18]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+arg_1C]']
mov ['[edx+0Ch],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Insertion_sort@PAHUBufferEquivalent@@@std@@YAXPAH0UBufferEquivalent@@@Z']
add ['esp,', '18h']
mov ['ecx,', '[ebp+var_1C]']
mov ['[ebp+Src],', 'ecx']
jmp ['short', 'loc_2C17']
sub ['esp,', '10h']
mov ['edx,', 'esp']
mov ['eax,', '[ebp+arg_10]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_14]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_18]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+arg_1C]']
mov ['[edx+0Ch],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Insertion_sort@PAHUBufferEquivalent@@@std@@YAXPAH0UBufferEquivalent@@@Z']
add ['esp,', '18h']
mov ['[ebp+var_10],', '20h']
jmp ['short', 'loc_2CA8']
mov ['ecx,', '[ebp+var_10]']
shl ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
cmp ['edx,', '[ebp+arg_8]']
jge ['loc_2D64']
sub ['esp,', '10h']
mov ['eax,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_14]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_18]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_1C]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['ecx,', '[ebp+arg_C]']
call ['?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ']
sub ['esp,', '14h']
mov ['ecx,', 'esp']
mov ['[ebp+var_24],', 'esp']
push ['eax']
call ['??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_20]']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
call ['??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z']
add ['esp,', '34h']
mov ['edx,', '[ebp+var_10]']
shl ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
sub ['esp,', '10h']
mov ['eax,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_14]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_18]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_1C]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['ecx,', '[ebp+arg_C]']
call ['?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
call ['?_First@?$_Temp_iterator@H@std@@QBEPAHXZ']
push ['eax']
call ['??$_Chunked_merge@PAHPAHHUBufferEquivalent@@@std@@YAXPAH00HHUBufferEquivalent@@@Z']
add ['esp,', '24h']
jmp ['loc_2CA0']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z$0 proc near
mov ['ecx,', '[ebp-24h]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__ehhandler$??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '48h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
cmp ['[ebp+arg_C],', '0']
jz ['short', 'loc_2DC9']
cmp ['[ebp+arg_10],', '0']
jnz ['short', 'loc_2DE6']
mov ['eax,', '[ebp+arg_10]']
push ['eax']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['??$advance@PAHH@std@@YAXAAPAHH@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+Dst]']
jmp ['loc_2F32']
jmp ['loc_2F32']
mov ['edx,', '[ebp+arg_C]']
cmp ['edx,', '[ebp+arg_10]']
jg ['loc_2E8B']
mov ['ecx,', '[ebp+arg_14]']
call ['?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ']
cmp ['[ebp+arg_C],', 'eax']
jg ['loc_2E8B']
mov ['ecx,', '[ebp+arg_14]']
call ['?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ']
sub ['esp,', '14h']
mov ['ecx,', 'esp']
mov ['[ebp+var_18],', 'esp']
push ['eax']
call ['??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
lea ['eax,', '[ebp+var_40]']
push ['eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
call ['??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z']
add ['esp,', '20h']
mov ['[ebp+var_20],', 'eax']
lea ['ecx,', '[ebp+var_40]']
call ['??1?$_Temp_iterator@H@std@@QAE@XZ']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Move@PAHPAH@std@@YAPAHPAH00@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_14]']
call ['?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
call ['?_First@?$_Temp_iterator@H@std@@QBEPAHXZ']
push ['eax']
call ['??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z']
add ['esp,', '0Ch']
jmp ['loc_2F32']
jmp ['loc_2F32']
mov ['ecx,', '[ebp+arg_14]']
call ['?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ']
cmp ['[ebp+arg_10],', 'eax']
jg ['loc_2F1E']
mov ['ecx,', '[ebp+arg_14]']
call ['?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ']
sub ['esp,', '14h']
mov ['ecx,', 'esp']
mov ['[ebp+var_24],', 'esp']
push ['eax']
call ['??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_28],', 'edx']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
lea ['edx,', '[ebp+var_54]']
push ['edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
call ['??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z']
add ['esp,', '20h']
mov ['[ebp+var_2C],', 'eax']
lea ['ecx,', '[ebp+var_54]']
call ['??1?$_Temp_iterator@H@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
call ['?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
call ['?_First@?$_Temp_iterator@H@std@@QBEPAHXZ']
push ['eax']
call ['??$_Move@PAHPAH@std@@YAPAHPAH00@Z']
add ['esp,', '0Ch']
jmp ['short', 'loc_2F32']
jmp ['short', 'loc_2F32']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['??$rotate@PAH@std@@YAPAHPAH00@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z$0 proc near
mov ['ecx,', '[ebp-18h]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__unwindfunclet$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z$2 proc near
mov ['ecx,', '[ebp-24h]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__ehhandler$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-4Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Buffered_rotate@PAHHH@std@@YAPAHPAH00HHAAV?$_Temp_iterator@H@0@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Chunked_merge@PAHPAHHUBufferEquivalent@@@std@@YAXPAH00HHUBufferEquivalent@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '[ebp+arg_C]']
shl ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_2F89']
mov ['ecx,', '[ebp+arg_10]']
sub ['ecx,', '[ebp+var_10]']
mov ['[ebp+arg_10],', 'ecx']
mov ['edx,', '[ebp+var_10]']
cmp ['edx,', '[ebp+arg_10]']
jg ['short', 'loc_2FFD']
mov ['eax,', '[ebp+Src]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
lea ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$advance@PAHH@std@@YAXAAPAHH@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
call ['??$advance@PAHH@std@@YAXAAPAHH@Z']
add ['esp,', '0FFFFFFF8h']
mov ['eax,', 'esp']
mov ['ecx,', '[ebp+arg_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_18]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_1C]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_20]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Merge@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z']
add ['esp,', '24h']
mov ['[ebp+Dst],', 'eax']
mov ['edx,', '[ebp+var_8]']
mov ['[ebp+Src],', 'edx']
jmp ['short', 'loc_2F80']
mov ['eax,', '[ebp+arg_10]']
cmp ['eax,', '[ebp+arg_C]']
jg ['short', 'loc_301B']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Move@PAHPAH@std@@YAPAHPAH00@Z']
add ['esp,', '0Ch']
jmp ['short', 'loc_3066']
mov ['ecx,', '[ebp+Src]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
lea ['eax,', '[ebp+var_C]']
push ['eax']
call ['??$advance@PAHH@std@@YAXAAPAHH@Z']
add ['esp,', '0FFFFFFF8h']
mov ['ecx,', 'esp']
mov ['edx,', '[ebp+arg_14]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_18]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_1C]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_20]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
call ['??$_Merge@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z']
add ['esp,', '24h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '80h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_1C]']
shl ['eax,', '1']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_30AE']
mov ['ecx,', '[ebp+arg_20]']
sub ['ecx,', '[ebp+var_1C]']
mov ['[ebp+arg_20],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
cmp ['edx,', '[ebp+arg_20]']
jg ['loc_3170']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+arg_1C]']
push ['ecx']
lea ['edx,', '[ebp+var_10]']
push ['edx']
call ['??$advance@PAHH@std@@YAXAAPAHH@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_1C]']
push ['ecx']
lea ['edx,', '[ebp+var_14]']
push ['edx']
call ['??$advance@PAHH@std@@YAXAAPAHH@Z']
add ['esp,', '8']
sub ['esp,', '10h']
mov ['eax,', 'esp']
mov ['ecx,', '[ebp+arg_24]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_28]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_2C]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_30]']
mov ['[eax+0Ch],', 'edx']
sub ['esp,', '14h']
mov ['ecx,', 'esp']
mov ['[ebp+var_34],', 'esp']
lea ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_38],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_14]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['eax,', '[ebp+var_64]']
push ['eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
call ['??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z']
add ['esp,', '38h']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_28],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['edx,', '[ebp+var_28]']
push ['edx']
lea ['ecx,', '[ebp+arg_8]']
call ['??4?$_Temp_iterator@H@std@@QAEAAV01@ABV01@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_64]']
call ['??1?$_Temp_iterator@H@std@@QAE@XZ']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+arg_0],', 'eax']
jmp ['loc_30A5']
mov ['ecx,', '[ebp+arg_20]']
cmp ['ecx,', '[ebp+arg_1C]']
jg ['short', 'loc_31BE']
sub ['esp,', '14h']
mov ['ecx,', 'esp']
mov ['[ebp+var_3C],', 'esp']
lea ['edx,', '[ebp+arg_8]']
push ['edx']
call ['??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_40],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['eax,', '[ebp+var_78]']
push ['eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
call ['??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z']
add ['esp,', '20h']
mov ['[ebp+var_44],', 'eax']
lea ['ecx,', '[ebp+var_78]']
call ['??1?$_Temp_iterator@H@std@@QAE@XZ']
jmp ['loc_323F']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'ecx']
mov ['edx,', '[ebp+arg_1C]']
push ['edx']
lea ['eax,', '[ebp+var_18]']
push ['eax']
call ['??$advance@PAHH@std@@YAXAAPAHH@Z']
add ['esp,', '8']
sub ['esp,', '10h']
mov ['ecx,', 'esp']
mov ['edx,', '[ebp+arg_24]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_28]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_2C]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_30]']
mov ['[ecx+0Ch],', 'eax']
sub ['esp,', '14h']
mov ['ecx,', 'esp']
mov ['[ebp+var_48],', 'esp']
lea ['edx,', '[ebp+arg_8]']
push ['edx']
call ['??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_4C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_8C]']
push ['edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
call ['??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z']
add ['esp,', '38h']
mov ['[ebp+var_50],', 'eax']
lea ['ecx,', '[ebp+var_8C]']
call ['??1?$_Temp_iterator@H@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_8]']
call ['??1?$_Temp_iterator@H@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$0 proc near
lea ['ecx,', '[ebp+10h]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$1 proc near
mov ['ecx,', '[ebp-34h]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$2 proc near
lea ['ecx,', '[ebp-64h]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$3 proc near
mov ['ecx,', '[ebp-3Ch]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__unwindfunclet$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z$5 proc near
mov ['ecx,', '[ebp-48h]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__ehhandler$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-84h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Chunked_merge@PAHV?$_Temp_iterator@H@std@@HUBufferEquivalent@@@std@@YAXPAH0V?$_Temp_iterator@H@0@HHUBufferEquivalent@@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Construct@HH@std@@YAXPAH$$QAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Construct@HH@std@@YAXPAH$$QAH@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_330C']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$forward@H@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_3313']
mov ['[ebp+var_14],', '0']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Construct@HH@std@@YAXPAH$$QAH@Z$0 proc near
mov ['eax,', '[ebp-18h]']
push ['eax']
mov ['eax,', '[ebp-10h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$_Construct@HH@std@@YAXPAH$$QAH@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Construct@HH@std@@YAXPAH$$QAH@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '20h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_1C],', 'ecx']
mov ['[ebp+var_4],', '1']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_E]']
push ['ecx']
call ['??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
mov ['[ebp+var_D],', 'dl']
movzx ['eax,', '[ebp+var_D]']
push ['eax']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_20],', 'esp']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_24],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_28],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_2C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_1C]']
call ['??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
endp
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 proc near
mov ['ecx,', '[ebp-20h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 proc near
mov ['ecx,', '[ebp-28h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '3Ch']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_4],', '1']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_30],', 'esp']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_34],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_38],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_3C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z']
add ['esp,', '18h']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Buy@?$vector@_WV?$allocator@_W@std@@@std@@IAE_NI@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['loc_3578']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_40],', 'esp']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_44],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_48],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_28],', 'eax']
mov ['eax,', '[ebp+var_28]']
mov ['[ebp+var_4C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['ecx,', '[ebp+var_14]']
call ['??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_2C]']
mov ['[ecx+8],', 'edx']
jmp ['short', 'loc_3568']
endp
__catch$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$0 proc near
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXXZ']
push ['0']
push ['0']
call ['__CxxThrowException@8']
endp
$LN14_0         proc near               
mov ['dword', 'ptr', '[ebp-4],', '1']
endp
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$2 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$3 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$4 proc near
mov ['ecx,', '[ebp-30h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$5 proc near
mov ['ecx,', '[ebp-38h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$6 proc near
mov ['ecx,', '[ebp-40h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z$7 proc near
mov ['ecx,', '[ebp-48h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-50h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Construct@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@QAEXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0Uforward_iterator_tag@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
call ['??$forward@AAH@std@@YAAAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
call ['??$forward@AAH@std@@YAAAHAAH@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
call ['??RBufferEquivalent@@QBE_NHH@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_362A']
xor ['al,', 'al']
jmp ['short', 'loc_366E']
jmp ['short', 'loc_366C']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
call ['??$forward@AAH@std@@YAAAHAAH@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
push ['eax']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
call ['??$forward@AAH@std@@YAAAHAAH@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
push ['edx']
lea ['ecx,', '[ebp+arg_0]']
call ['??RBufferEquivalent@@QBE_NHH@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_366C']
mov ['ecx,', '[ebp+arg_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_18]']
push ['edx']
push ['offset', '??_C@_1CE@IGJMOCCK@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAo?$AAp?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['al,', '1']
pop ['ebp']
retn
endp
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_368E']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_36AE']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$_Debug_pointer@UBufferEquivalent@@@std@@YAXAAUBufferEquivalent@@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
??$_Debug_pointer@V?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAXAAV?$binder2nd@U?$equal_to@H@std@@@0@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_36EE']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_370E']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_3760']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_3760']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$_Debug_range2@PA_W@std@@YAXPA_W0PB_WIUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_37B4']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_37B4']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
call ['??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_3844']
mov ['edx,', '[ebp+arg_1C]']
push ['edx']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_1C]']
push ['edx']
mov ['eax,', '[ebp+arg_18]']
push ['eax']
lea ['ecx,', '[ebp+arg_C]']
push ['ecx']
call ['??$_Debug_pointer@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@PB_WI@Z']
add ['esp,', '0Ch']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['ecx,', '[ebp+arg_C]']
call ['??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_3844']
mov ['ecx,', '[ebp+arg_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_18]']
push ['edx']
push ['offset', '??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
call ['??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range2@PAH@std@@YAXPAH0PB_WIUrandom_access_iterator_tag@0@@Z']
add ['esp,', '14h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Debug_range@PA_W@std@@YAXPA_W0PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
call ['??$_Iter_cat@PA_W@std@@YA?AUrandom_access_iterator_tag@0@ABQA_W@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range2@PA_W@std@@YAXPA_W0PB_WIUrandom_access_iterator_tag@0@@Z']
add ['esp,', '14h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_D]']
push ['ecx']
call ['??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_18]']
push ['edx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_1C],', 'esp']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_20],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_24],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_28],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Debug_range2@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z']
add ['esp,', '24h']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$2 proc near
mov ['ecx,', '[ebp-1Ch]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z$3 proc near
mov ['ecx,', '[ebp-24h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Destroy@H@std@@YAXPAH@Z proc near   
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXPA_W0AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@_W_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PA_W0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXPA_W0AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXPA_W0AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
??$_Dist_type@PAH@std@@YAPAHPAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
endp
??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z$0 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Distance2@PAHH@std@@YAXPAH0AAHUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_3B3B']
push ['2E9h']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z']
add ['esp,', '0Ch']
push ['2EAh']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+arg_0]']
sar ['eax,', '2']
mov ['ecx,', '[ebp+arg_8]']
add ['eax,', '[ecx]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'eax']
pop ['ebp']
retn
endp
??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
call ['??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_3BB8']
push ['2E9h']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@PB_WI@Z']
add ['esp,', '0Ch']
push ['2EAh']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$_Debug_pointer@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAXAAV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@PB_WI@Z']
add ['esp,', '0Ch']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['ecx,', '[ebp+arg_C]']
call ['??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z']
mov ['edx,', '[ebp+arg_18]']
add ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_18]']
mov ['[ecx],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-4]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Distance@PAHH@std@@YAXPAH0AAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
call ['??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Distance2@PAHH@std@@YAXPAH0AAHUrandom_access_iterator_tag@0@@Z']
add ['esp,', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Fill_n@PAHIH@std@@YAPAHPAHIABH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_3C6F']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
mov ['[ebp+arg_0],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_3C81']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_3C5D']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$_Find_if@PAHV?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAPAHPAH0V?$binder2nd@U?$equal_to@H@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_3C96']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_3CB5']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
lea ['ecx,', '[ebp+arg_8]']
call ['??R?$binder2nd@U?$equal_to@H@std@@@std@@QBE_NAAH@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_3CB3']
jmp ['short', 'loc_3CB5']
jmp ['short', 'loc_3C8D']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$_Insertion_sort1@PAHUBufferEquivalent@@H@std@@YAXPAH0UBufferEquivalent@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['eax,', '[ebp+Src]']
cmp ['eax,', '[ebp+arg_4]']
jz ['loc_3DF0']
mov ['ecx,', '[ebp+Src]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '4']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_4]']
jz ['loc_3DF0']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
call ['??$_Move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
mov ['[ebp+var_10],', 'eax']
push ['0BBEh']
push ['offset', '??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
lea ['edx,', '[ebp+var_10]']
push ['edx']
sub ['esp,', '10h']
mov ['eax,', 'esp']
mov ['ecx,', '[ebp+arg_8]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_10]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_14]']
mov ['[eax+0Ch],', 'edx']
call ['??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z']
add ['esp,', '20h']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_3D6F']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z']
add ['esp,', '0Ch']
lea ['edx,', '[ebp+var_10]']
push ['edx']
call ['??$_Move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+Src]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_3DEB']
mov ['eax,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_3D7D']
mov ['ecx,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '4']
mov ['[ebp+var_C],', 'edx']
push ['0BC6h']
push ['offset', '??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+var_C]']
push ['eax']
lea ['ecx,', '[ebp+var_10]']
push ['ecx']
sub ['esp,', '10h']
mov ['edx,', 'esp']
mov ['eax,', '[ebp+arg_8]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_10]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+arg_14]']
mov ['[edx+0Ch],', 'ecx']
call ['??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z']
add ['esp,', '20h']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_3DD8']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['??$_Move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_3D77']
lea ['eax,', '[ebp+var_10]']
push ['eax']
call ['??$_Move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['loc_3CD4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Insertion_sort@PAHUBufferEquivalent@@@std@@YAXPAH0UBufferEquivalent@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Val_type@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
sub ['esp,', '10h']
mov ['ecx,', 'esp']
mov ['edx,', '[ebp+arg_8]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_C]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_10]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_14]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
call ['??$_Insertion_sort1@PAHUBufferEquivalent@@H@std@@YAXPAH0UBufferEquivalent@@0@Z']
add ['esp,', '1Ch']
pop ['ebp']
retn
endp
??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_1]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Iter_cat@PA_W@std@@YA?AUrandom_access_iterator_tag@0@ABQA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_1]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_1]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Iter_cat@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_1]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Lower_bound@PAHHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', '0']
lea ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Distance@PAHH@std@@YAXPAH0AAH@Z']
add ['esp,', '0Ch']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_3F0E']
mov ['eax,', '[ebp+var_4]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
call ['??$advance@PAHH@std@@YAXAAPAHH@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+arg_C]']
call ['??RBufferEquivalent@@QBE_NHH@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_3F06']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '4']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', 'ecx']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_3F0C']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_3EA5']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Merge@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['eax,', '[ebp+Src]']
cmp ['eax,', '[ebp+arg_4]']
jz ['loc_3FE4']
mov ['ecx,', '[ebp+arg_8]']
cmp ['ecx,', '[ebp+arg_C]']
jz ['loc_3FE4']
push ['0B45h']
push ['offset', '??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
sub ['esp,', '10h']
mov ['ecx,', 'esp']
mov ['edx,', '[ebp+arg_14]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_18]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_1C]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_20]']
mov ['[ecx+0Ch],', 'eax']
call ['??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z']
add ['esp,', '20h']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_3FAA']
mov ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['??$_Move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+Dst]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+Dst]']
add ['eax,', '4']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '4']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
cmp ['edx,', '[ebp+arg_C]']
jnz ['short', 'loc_3FA8']
jmp ['short', 'loc_3FE4']
jmp ['short', 'loc_3FDF']
mov ['eax,', '[ebp+Src]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
call ['??$_Move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+Dst]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '4']
mov ['[ebp+Dst],', 'ecx']
mov ['edx,', '[ebp+Src]']
add ['edx,', '4']
mov ['[ebp+Src],', 'edx']
mov ['eax,', '[ebp+Src]']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_3FDF']
jmp ['short', 'loc_3FE4']
jmp ['loc_3F36']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Move@PAHPAH@std@@YAPAHPAH00@Z']
add ['esp,', '0Ch']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$_Move@PAHPAH@std@@YAPAHPAH00@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '4Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[ebp+arg_8]']
jz ['loc_412B']
mov ['ecx,', '[ebp+arg_C]']
cmp ['ecx,', '[ebp+arg_10]']
jz ['loc_412B']
push ['0B45h']
push ['offset', '??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
sub ['esp,', '10h']
mov ['ecx,', 'esp']
mov ['edx,', '[ebp+arg_28]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_2C]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_30]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_34]']
mov ['[ecx+0Ch],', 'eax']
call ['??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z']
add ['esp,', '20h']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_40E2']
mov ['edx,', '[ebp+arg_C]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['??$_Move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
push ['0']
lea ['ecx,', '[ebp+arg_14]']
call ['??E?$_Temp_iterator@H@std@@QAEAAV01@H@Z']
mov ['ecx,', 'eax']
call ['??D?$_Temp_iterator@H@std@@QAEAAV01@XZ']
mov ['ecx,', 'eax']
call ['??4?$_Temp_iterator@H@std@@QAEAAV01@$$QAH@Z']
mov ['edx,', '[ebp+arg_C]']
add ['edx,', '4']
mov ['[ebp+arg_C],', 'edx']
mov ['eax,', '[ebp+arg_C]']
cmp ['eax,', '[ebp+arg_10]']
jnz ['short', 'loc_40E0']
jmp ['short', 'loc_412B']
jmp ['short', 'loc_4126']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_1C],', 'ecx']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
call ['??$_Move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
push ['eax']
push ['0']
lea ['ecx,', '[ebp+arg_14]']
call ['??E?$_Temp_iterator@H@std@@QAEAAV01@H@Z']
mov ['ecx,', 'eax']
call ['??D?$_Temp_iterator@H@std@@QAEAAV01@XZ']
mov ['ecx,', 'eax']
call ['??4?$_Temp_iterator@H@std@@QAEAAV01@$$QAH@Z']
mov ['ecx,', '[ebp+arg_4]']
add ['ecx,', '4']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ebp+arg_8]']
jnz ['short', 'loc_4126']
jmp ['short', 'loc_412B']
jmp ['loc_405F']
sub ['esp,', '14h']
mov ['ecx,', 'esp']
mov ['[ebp+var_34],', 'esp']
lea ['eax,', '[ebp+arg_14]']
push ['eax']
call ['??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_38],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+var_58]']
push ['ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z']
add ['esp,', '20h']
mov ['[ebp+var_28],', 'eax']
mov ['edx,', '[ebp+var_28]']
mov ['[ebp+var_2C],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
lea ['ecx,', '[ebp+arg_14]']
call ['??4?$_Temp_iterator@H@std@@QAEAAV01@ABV01@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_58]']
call ['??1?$_Temp_iterator@H@std@@QAE@XZ']
sub ['esp,', '14h']
mov ['ecx,', 'esp']
mov ['[ebp+var_3C],', 'esp']
lea ['edx,', '[ebp+arg_14]']
push ['edx']
call ['??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_40],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z']
add ['esp,', '20h']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_10]']
or ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_14]']
call ['??1?$_Temp_iterator@H@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$0 proc near
lea ['ecx,', '[ebp+1Ch]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$1 proc near
mov ['ecx,', '[ebp-34h]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$2 proc near
lea ['ecx,', '[ebp-58h]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$3 proc near
mov ['ecx,', '[ebp-3Ch]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__unwindfunclet$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z$4 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN15']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
retn
endp
__ehhandler$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-50h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Merge@PAHPAHV?$_Temp_iterator@H@std@@UBufferEquivalent@@@std@@YA?AV?$_Temp_iterator@H@0@PAH000V10@UBufferEquivalent@@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Merge_backward@PAHPAHPAHUBufferEquivalent@@@std@@YAPAHPAH0000UBufferEquivalent@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['loc_430B']
mov ['ecx,', '[ebp+Src]']
cmp ['ecx,', '[ebp+arg_C]']
jz ['loc_430B']
mov ['edx,', '[ebp+arg_4]']
sub ['edx,', '4']
mov ['[ebp+arg_4],', 'edx']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '4']
mov ['[ebp+arg_C],', 'eax']
push ['0B26h']
push ['offset', '??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
sub ['esp,', '10h']
mov ['eax,', 'esp']
mov ['ecx,', '[ebp+arg_14]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_18]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_1C]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_20]']
mov ['[eax+0Ch],', 'edx']
call ['??$_Debug_lt_pred@UBufferEquivalent@@AAHAAH@std@@YA_NUBufferEquivalent@@AAH1PB_WI@Z']
add ['esp,', '20h']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_42D7']
mov ['ecx,', '[ebp+arg_10]']
sub ['ecx,', '4']
mov ['[ebp+arg_10],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_C]']
add ['eax,', '4']
mov ['[ebp+arg_C],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jnz ['short', 'loc_42D5']
jmp ['short', 'loc_430B']
jmp ['short', 'loc_4306']
mov ['edx,', '[ebp+arg_10]']
sub ['edx,', '4']
mov ['[ebp+arg_10],', 'edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$_Move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_10]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+Src]']
cmp ['ecx,', '[ebp+arg_C]']
jnz ['short', 'loc_4306']
jmp ['short', 'loc_430B']
jmp ['loc_4257']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z']
add ['esp,', '0Ch']
mov ['[ebp+arg_10],', 'eax']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$_Move@AAH@std@@YA$$QAHAAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$_Move@PAHPAH@std@@YAPAHPAH00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
call ['??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Move@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+Src]']
sar ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memmove']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+Dst]']
lea ['eax,', '[edx+ecx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_4],', '1']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$_Ptr_cat@PAHV?$_Temp_iterator@H@std@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAHAAV?$_Temp_iterator@H@0@@Z']
add ['esp,', '8']
mov ['[ebp+var_D],', 'al']
movzx ['edx,', '[ebp+var_D]']
push ['edx']
sub ['esp,', '14h']
mov ['ecx,', 'esp']
mov ['[ebp+var_1C],', 'esp']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_20],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '24h']
mov ['[ebp+var_24],', 'eax']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_Temp_iterator@H@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z$1 proc near
mov ['ecx,', '[ebp-1Ch]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z$2 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN6_2']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
retn
endp
__ehhandler$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_44DC']
lea ['ecx,', '[ebp+arg_C]']
call ['??E?$_Temp_iterator@H@std@@QAEAAV01@XZ']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '4']
mov ['[ebp+arg_4],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_8]']
jz ['short', 'loc_4502']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+arg_C]']
call ['??D?$_Temp_iterator@H@std@@QAEAAV01@XZ']
mov ['ecx,', 'eax']
call ['??4?$_Temp_iterator@H@std@@QAEAAV01@$$QAH@Z']
jmp ['short', 'loc_44CB']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z']
mov ['ecx,', '[ebp+var_10]']
or ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_Temp_iterator@H@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__unwindfunclet$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z$1 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN8_1']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
retn
endp
__ehhandler$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Move@PAHV?$_Temp_iterator@H@std@@@std@@YA?AV?$_Temp_iterator@H@0@PAH0V10@U_Nonscalar_ptr_iterator_tag@0@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Move_backward@PAHPAH@std@@YAPAHPAH00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
call ['??$_Move_backward@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Move_backward@PAHPAH@std@@YAPAHPAH00U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+Src]']
sar ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
shl ['eax,', '2']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', 'eax']
push ['ecx']
call ['_memmove']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_4]']
shl ['edx,', '2']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['al,', '[ebp+var_1]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Ptr_cat@PAHV?$_Temp_iterator@H@std@@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@AAPAHAAV?$_Temp_iterator@H@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['al,', '[ebp+var_1]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Ptr_cat@_W_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PA_W0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['al,', '[ebp+var_1]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$_Rechecked@PA_WPA_W@std@@YAAAPA_WAAPA_WPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$_Rechecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@AAV10@PAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Rechecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV12@PAH@Z']
pop ['ebp']
retn
endp
??$_Remove_if@PAHV?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAPAHPAH0V?$binder2nd@U?$equal_to@H@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
add ['ecx,', '4']
mov ['[ebp+arg_0],', 'ecx']
jmp ['short', 'loc_465E']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_4697']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['ecx,', '[ebp+arg_8]']
call ['??R?$binder2nd@U?$equal_to@H@std@@@std@@QBE_NAAH@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_4695']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_4655']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Rotate@PAH@std@@YAXPAH00Urandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Dist_type@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Rotate@PAHHH@std@@YAXPAH0000@Z']
add ['esp,', '14h']
pop ['ebp']
retn
endp
??$_Rotate@PAHHH@std@@YAXPAH0000@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '24h']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+arg_0]']
sar ['eax,', '2']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+arg_0]']
sar ['ecx,', '2']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+var_10],', 'edx']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_4716']
mov ['eax,', '[ebp+var_4]']
cdq
idiv ['[ebp+var_10]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_10],', 'ecx']
jmp ['short', 'loc_46F8']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '[ebp+arg_0]']
sar ['edx,', '2']
cmp ['[ebp+var_4],', 'edx']
jge ['loc_47D7']
jmp ['short', 'loc_4733']
mov ['eax,', '[ebp+var_4]']
sub ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jle ['loc_47D7']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[edx+ecx*4]']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_14]']
lea ['ecx,', '[eax+edx*4]']
cmp ['ecx,', '[ebp+arg_8]']
jnz ['short', 'loc_4765']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_18],', 'edx']
jmp ['short', 'loc_4771']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+var_14]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
push ['edx']
call ['??$iter_swap@PAHPAH@std@@YAXPAH0@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+var_8]']
sar ['ecx,', '2']
cmp ['[ebp+var_C],', 'ecx']
jge ['short', 'loc_47A9']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+var_8]']
lea ['ecx,', '[eax+edx*4]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_47C0']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '[ebp+var_8]']
sar ['edx,', '2']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', 'edx']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[ecx+eax*4]']
mov ['[ebp+var_1C],', 'edx']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+var_20]']
jnz ['short', 'loc_47D0']
jmp ['short', 'loc_47D2']
jmp ['short', 'loc_4777']
jmp ['loc_472A']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', '0']
lea ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
call ['??$_Distance@PAHH@std@@YAXPAH0AAH@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '1']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
push ['eax']
lea ['ecx,', '[ebp+var_24]']
call ['??0?$_Temp_iterator@H@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
sub ['esp,', '10h']
mov ['eax,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_14]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_18]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_1C]']
mov ['[eax+0Ch],', 'edx']
lea ['eax,', '[ebp+var_24]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z']
add ['esp,', '20h']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_24]']
call ['??1?$_Temp_iterator@H@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z$0 proc near
lea ['ecx,', '[ebp-24h]']
jmp ['??1?$_Temp_iterator@H@std@@QAE@XZ']
endp
__ehhandler$??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
cmp ['[ebp+arg_8],', '20h']
jg ['short', 'loc_48ED']
sub ['esp,', '10h']
mov ['eax,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_14]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_18]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_1C]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Insertion_sort@PAHUBufferEquivalent@@@std@@YAXPAH0UBufferEquivalent@@@Z']
add ['esp,', '18h']
jmp ['loc_4A2F']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '1']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['edx,', '[ebp+Src]']
mov ['[ebp+Dst],', 'edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
lea ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['??$advance@PAHH@std@@YAXAAPAHH@Z']
add ['esp,', '8']
mov ['ecx,', '[ebp+arg_C]']
call ['?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ']
cmp ['[ebp+var_4],', 'eax']
jg ['short', 'loc_4988']
sub ['esp,', '10h']
mov ['edx,', 'esp']
mov ['eax,', '[ebp+arg_10]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_14]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_18]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+arg_1C]']
mov ['[edx+0Ch],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
call ['??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z']
add ['esp,', '10h']
mov ['eax,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_14]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_18]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_1C]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['??$_Buffered_merge_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z']
add ['esp,', '20h']
jmp ['short', 'loc_49F0']
sub ['esp,', '10h']
mov ['ecx,', 'esp']
mov ['edx,', '[ebp+arg_10]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_14]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_18]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_1C]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z']
add ['esp,', '10h']
mov ['edx,', 'esp']
mov ['eax,', '[ebp+arg_10]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+arg_14]']
mov ['[edx+4],', 'ecx']
mov ['eax,', '[ebp+arg_18]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+arg_1C]']
mov ['[edx+0Ch],', 'ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
sub ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH0HAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z']
add ['esp,', '20h']
sub ['esp,', '10h']
mov ['eax,', 'esp']
mov ['ecx,', '[ebp+arg_10]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_14]']
mov ['[eax+4],', 'edx']
mov ['ecx,', '[ebp+arg_18]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_1C]']
mov ['[eax+0Ch],', 'edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
sub ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
call ['??$_Buffered_merge@PAHHHUBufferEquivalent@@@std@@YAXPAH00HHAAV?$_Temp_iterator@H@0@UBufferEquivalent@@@Z']
add ['esp,', '28h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '28h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_4],', '1']
lea ['eax,', '[ebp+var_D]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
lea ['ecx,', '[ebp+var_D]']
push ['ecx']
mov ['edx,', '[ebp+arg_18]']
push ['edx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_28],', 'esp']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_2C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_30],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_34],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z']
add ['esp,', '20h']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
mov ['[ebp+var_24],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
__unwindfunclet$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z$2 proc near
mov ['ecx,', '[ebp-28h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z$3 proc near
mov ['ecx,', '[ebp-30h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-2Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Ucopy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0PA_W@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z']
add ['esp,', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
??$_Umove@PA_W@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WPA_W00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_move@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z']
add ['esp,', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
??$_Unchecked@PAH@std@@YAPAHPAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$_Unchecked@PA_W@std@@YAPA_WPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEPA_WXZ']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z$0 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z$0 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Uninit_copy@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Ptr_cat@_W_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PA_W0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Uninit_copy@_W_W@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '14h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Uninit_copy@_W_W@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['192h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Debug_range@PA_W@std@@YAXPA_W0PB_WI@Z']
add ['esp,', '10h']
push ['193h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+Src]']
sar ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memmove']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
lea ['eax,', '[eax+ecx*2]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Uninit_def_fill_n@HIH@std@@YAXPAHIAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0']
lea ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Fill_n@PAHIH@std@@YAPAHPAHIABH@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Uninit_fill_n@HIHH@std@@YAXPAHIPBHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Fill_n@PAHIH@std@@YAPAHPAHIABH@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['1D6h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z']
add ['esp,', '10h']
push ['1D7h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['??$_Debug_pointer@H@std@@YAXPAHPB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+Src]']
sar ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memmove']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
lea ['eax,', '[eax+ecx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Val_type@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Uninit_move@HHH@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Uninit_move@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Ptr_cat@_W_W@std@@YA?AU_Scalar_ptr_iterator_tag@0@PA_W0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Val_type@PA_W@std@@YAPA_WPA_W@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Uninit_move@_W_W_W@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Uninit_move@_W_W_W@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['1D6h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Debug_range@PA_W@std@@YAXPA_W0PB_WI@Z']
add ['esp,', '10h']
push ['1D7h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['??$_Debug_pointer@_W@std@@YAXPA_WPB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+Src]']
sar ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memmove']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
lea ['eax,', '[eax+ecx*2]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '28h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
mov ['ecx,', '[ebp+arg_18]']
push ['ecx']
call ['??$_Unchecked@PA_W@std@@YAPA_WPA_W@Z']
add ['esp,', '4']
push ['eax']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_28],', 'esp']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+var_2C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_30],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_34],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Unchecked@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['[ebp+Src],', 'eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Uninit_copy@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z']
add ['esp,', '10h']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_20]']
push ['edx']
lea ['eax,', '[ebp+arg_18]']
push ['eax']
call ['??$_Rechecked@PA_WPA_W@std@@YAAAPA_WAAPA_WPA_W@Z']
add ['esp,', '8']
mov ['ecx,', '[eax]']
mov ['[ebp+var_24],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z$2 proc near
mov ['ecx,', '[ebp-28h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z$3 proc near
mov ['ecx,', '[ebp-30h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-2Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninitialized_copy@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@PA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@std@@YAPA_WV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0PA_WAAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z']
jmp ['___CxxFrameHandler3']
endp
??$_Uninitialized_default_fill_n@PAHIU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAHIAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Uninit_def_fill_n@HIH@std@@YAXPAHIAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '14h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Uninitialized_fill_n@PAHIHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAHIPBHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@HH@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAH0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninit_fill_n@HIHH@std@@YAXPAHIPBHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Uninitialized_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Unchecked@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Uninit_move@PAHPAHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAPAHPAH00AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z']
add ['esp,', '10h']
push ['eax']
lea ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
pop ['ebp']
retn
endp
??$_Uninitialized_move@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Unchecked@PA_W@std@@YAPA_WPA_W@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PA_W@std@@YAPA_WPA_W@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PA_W@std@@YAPA_WPA_W@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Uninit_move@PA_WPA_WU?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAPA_WPA_W00AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z']
add ['esp,', '10h']
push ['eax']
lea ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Rechecked@PA_WPA_W@std@@YAAAPA_WAAPA_WPA_W@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
pop ['ebp']
retn
endp
??$_Upper_bound@PAHHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', '0']
lea ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Distance@PAHH@std@@YAXPAH0AAH@Z']
add ['esp,', '0Ch']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_519E']
mov ['eax,', '[ebp+var_4]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
lea ['edx,', '[ebp+var_8]']
push ['edx']
call ['??$advance@PAHH@std@@YAXAAPAHH@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+arg_C]']
call ['??RBufferEquivalent@@QBE_NHH@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_5196']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '4']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+var_C]']
add ['ecx,', '1']
mov ['edx,', '[ebp+var_4]']
sub ['edx,', 'ecx']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_519C']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_5135']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Val_type@PAH@std@@YAPAHPAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
endp
??$_Val_type@PA_W@std@@YAPA_WPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
endp
??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z$0 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
jmp ['___CxxFrameHandler3']
endp
??$addressof@$$CBH@std@@YAPBHABH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$addressof@D@std@@YAPADAAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$addressof@H@std@@YAPAHAAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$addressof@_W@std@@YAPA_WAA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$advance@PAHH@std@@YAXAAPAHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
call ['??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Advance@PAHH@std@@YAXAAPAHHUrandom_access_iterator_tag@0@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$bind2nd@U?$equal_to@H@std@@H@std@@YA?AV?$binder2nd@U?$equal_to@H@std@@@0@ABU?$equal_to@H@0@ABH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_8]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
lea ['edx,', '[ebp+var_4]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$binder2nd@U?$equal_to@H@std@@@std@@QAE@ABU?$equal_to@H@1@ABH@Z']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_5331']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_5338']
mov ['[ebp+var_14],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-10h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
jmp ['___CxxFrameHandler3']
endp
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
pop ['ebp']
retn
endp
??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_5431']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_5438']
mov ['[ebp+var_14],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-10h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z']
jmp ['___CxxFrameHandler3']
endp
??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z']
pop ['ebp']
retn
endp
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['8']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_5537']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
mov ['eax,', '[eax+4]']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx],', 'edx']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_553E']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-10h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
jmp ['___CxxFrameHandler3']
endp
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
pop ['ebp']
retn
endp
??$construct@_W_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_W$$QA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@_W@std@@YA$$QA_WAA_W@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@_W_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PA_W$$QA_W@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['2']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_5637']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@_W@std@@YA$$QA_WAA_W@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_10]']
mov ['ax,', '[eax]']
mov ['[edx],', 'ax']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_563E']
mov ['[ebp+var_14],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-10h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z']
jmp ['___CxxFrameHandler3']
endp
??$construct@_W_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PA_W$$QA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@_W@std@@YA$$QA_WAA_W@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@_W_W@?$allocator@_W@std@@QAEXPA_W$$QA_W@Z']
pop ['ebp']
retn
endp
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z']
pop ['ebp']
retn
endp
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z']
pop ['ebp']
retn
endp
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
pop ['ebp']
retn
endp
??$distance@PAH@std@@YAHPAH0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', '0']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
call ['??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
lea ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Distance2@PAHH@std@@YAXPAH0AAHUrandom_access_iterator_tag@0@@Z']
add ['esp,', '10h']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '24h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
mov ['[ebp+var_14],', '0']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_D]']
push ['ecx']
call ['??$_Iter_cat@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
lea ['ecx,', '[ebp+var_14]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_24],', 'esp']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_28],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_2C],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_30],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Distance2@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@H@std@@YAXV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0AAHUrandom_access_iterator_tag@0@@Z']
add ['esp,', '20h']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_20],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_20]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z$2 proc near
mov ['ecx,', '[ebp-24h]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z$3 proc near
mov ['ecx,', '[ebp-2Ch]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-28h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$distance@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@std@@YAHV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@0@0@Z']
jmp ['___CxxFrameHandler3']
endp
??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '40h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_4],', '2']
push ['35h']
push ['offset', '??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_30],', 'esp']
lea ['eax,', '[ebp+arg_10]']
push ['eax']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['[ebp+var_34],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_38],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_3C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
call ['??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z']
add ['esp,', '20h']
push ['36h']
push ['offset', '??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
lea ['ecx,', '[ebp+arg_1C]']
push ['ecx']
call ['??$_Debug_pointer@V?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAXAAV?$binder2nd@U?$equal_to@H@std@@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+arg_20]']
push ['edx']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_40],', 'esp']
lea ['edx,', '[ebp+arg_10]']
push ['edx']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_44],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
call ['??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_48],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_4C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
call ['??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
call ['??$_Find_if@PAHV?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAPAHPAH0V?$binder2nd@U?$equal_to@H@std@@@0@@Z']
add ['esp,', '10h']
mov ['[ebp+var_2C],', 'eax']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Rechecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@AAV10@PAH@Z']
add ['esp,', '8']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['ecx,', '[ebp+var_10]']
or ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_10]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$0 proc near
lea ['ecx,', '[ebp+18h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$1 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$2 proc near
mov ['ecx,', '[ebp-30h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$3 proc near
mov ['ecx,', '[ebp-38h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$4 proc near
mov ['ecx,', '[ebp-40h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$5 proc near
mov ['ecx,', '[ebp-48h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$6 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN10_0']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-44h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z']
jmp ['___CxxFrameHandler3']
endp
??$forward@AAH@std@@YAAAHAAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$forward@AAPAH@std@@YAAAPAHAAPAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$forward@H@std@@YA$$QAHAAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$forward@_W@std@@YA$$QA_WAA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$get_temporary_buffer@H@std@@YA?AU?$pair@PAHH@0@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
cmp ['[ebp+arg_4],', '0']
jge ['short', 'loc_5ABF']
mov ['[ebp+arg_4],', '0']
jmp ['short', 'loc_5ACD']
cmp ['[ebp+arg_4],', '3FFFFFFFh']
jbe ['short', 'loc_5ACD']
call ['?_Xbad_alloc@std@@YAXXZ']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_5AE1']
mov ['eax,', '[ebp+arg_4]']
cdq
sub ['eax,', 'edx']
sar ['eax,', '1']
mov ['[ebp+arg_4],', 'eax']
cmp ['[ebp+arg_4],', '0']
jle ['short', 'loc_5B08']
push ['offset', '?nothrow@std@@3Unothrow_t@1@B']
mov ['eax,', '[ebp+arg_4]']
shl ['eax,', '2']
push ['eax']
call ['??2@YAPAXIABUnothrow_t@std@@@Z']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_5B06']
jmp ['short', 'loc_5B08']
jmp ['short', 'loc_5AD6']
lea ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['edx,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$?0AAPAHAAHX@?$pair@PAHH@std@@QAE@AAPAHAAH@Z']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$iter_swap@PAHPAH@std@@YAXPAH0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$swap@H@std@@YAXAAH0@Z']
add ['esp,', '8']
pop ['ebp']
retn
endp
??$lower_bound@PAHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Dist_type@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
sub ['esp,', '10h']
mov ['ecx,', 'esp']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_14]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_18]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Lower_bound@PAHHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@0@Z']
add ['esp,', '20h']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
pop ['ebp']
retn
endp
??$move@AAH@std@@YA$$QAHAAH@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '54h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_4],', '2']
mov ['eax,', '[ebp+arg_20]']
push ['eax']
mov ['ecx,', '[ebp+arg_1C]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_38],', 'esp']
lea ['edx,', '[ebp+arg_10]']
push ['edx']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_3C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_40],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_44],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
lea ['ecx,', '[ebp+var_60]']
push ['ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
call ['??$find_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z']
add ['esp,', '24h']
mov ['[ebp+var_1C],', 'eax']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['eax,', '[ebp+var_20]']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
call ['??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@ABV01@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_60]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
lea ['ecx,', '[ebp+arg_10]']
push ['ecx']
lea ['ecx,', '[ebp+arg_4]']
call ['??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_5C9D']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['ecx,', '[ebp+var_10]']
or ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_10]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['loc_5D69']
jmp ['loc_5D51']
mov ['edx,', '[ebp+arg_20]']
push ['edx']
mov ['eax,', '[ebp+arg_1C]']
push ['eax']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_48],', 'esp']
lea ['edx,', '[ebp+arg_10]']
push ['edx']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_4C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
call ['??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_28]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_50],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
mov ['[ebp+var_54],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
call ['??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
push ['ecx']
call ['??$_Remove_if@PAHV?$binder2nd@U?$equal_to@H@std@@@std@@@std@@YAPAHPAH0V?$binder2nd@U?$equal_to@H@std@@@0@@Z']
add ['esp,', '10h']
mov ['[ebp+var_34],', 'eax']
mov ['edx,', '[ebp+var_34]']
push ['edx']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Rechecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAAAV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@AAV10@PAH@Z']
add ['esp,', '8']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['ecx,', '[ebp+var_10]']
or ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_10]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_5D69']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_10]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$0 proc near
lea ['ecx,', '[ebp+18h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$1 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$2 proc near
mov ['ecx,', '[ebp-38h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$3 proc near
mov ['ecx,', '[ebp-40h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$4 proc near
lea ['ecx,', '[ebp-60h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$5 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN11']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
retn
endp
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$6 proc near
mov ['ecx,', '[ebp-48h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z$7 proc near
mov ['ecx,', '[ebp-50h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-58h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$remove_if@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@V?$binder2nd@U?$equal_to@H@std@@@2@@std@@YA?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@V10@0V?$binder2nd@U?$equal_to@H@std@@@0@@Z']
jmp ['___CxxFrameHandler3']
endp
??$return_temporary_buffer@H@std@@YAXPAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
pop ['ebp']
retn
endp
??$rotate@PAH@std@@YAPAHPAH00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['0CA9h']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z']
add ['esp,', '10h']
push ['0CAAh']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Debug_range@PAH@std@@YAXPAH0PB_WI@Z']
add ['esp,', '10h']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_5E85']
mov ['edx,', '[ebp+arg_4]']
cmp ['edx,', '[ebp+arg_8]']
jz ['short', 'loc_5E85']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
call ['??$_Iter_cat@PAH@std@@YA?AUrandom_access_iterator_tag@0@ABQAH@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Unchecked@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Rotate@PAH@std@@YAXPAH00Urandom_access_iterator_tag@0@@Z']
add ['esp,', '10h']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$distance@PAH@std@@YAHPAH0@Z']
add ['esp,', '8']
push ['eax']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$advance@PAHH@std@@YAXAAPAHH@Z']
add ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '58h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_4],', '1']
push ['0CC8h']
push ['offset', '??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_38],', 'esp']
lea ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_3C],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_40],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_44],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Debug_range@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0PB_WI@Z']
add ['esp,', '20h']
push ['0CC9h']
push ['offset', '??_C@_1JC@HALMDPKM@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
lea ['ecx,', '[ebp+arg_18]']
push ['ecx']
call ['??$_Debug_pointer@UBufferEquivalent@@@std@@YAXAAUBufferEquivalent@@PB_WI@Z']
add ['esp,', '0Ch']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
lea ['ecx,', '[ebp+arg_0]']
call ['??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['loc_603F']
sub ['esp,', '10h']
mov ['ecx,', 'esp']
mov ['edx,', '[ebp+arg_18]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_1C]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_20]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_24]']
mov ['[ecx+0Ch],', 'eax']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_48],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_4C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Val_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_50],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_20],', 'eax']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_54],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Dist_type@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_58],', 'esp']
lea ['edx,', '[ebp+arg_C]']
push ['edx']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_28],', 'eax']
mov ['eax,', '[ebp+var_28]']
mov ['[ebp+var_5C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_60],', 'esp']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_30],', 'eax']
mov ['eax,', '[ebp+var_30]']
mov ['[ebp+var_64],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
call ['??$_Unchecked@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@YAPAHV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['[ebp+Src],', 'eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Stable_sort@PAHHHUBufferEquivalent@@@std@@YAXPAH000UBufferEquivalent@@@Z']
add ['esp,', '20h']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_0]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+arg_C]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$0 proc near
lea ['ecx,', '[ebp+14h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$1 proc near
lea ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$2 proc near
mov ['ecx,', '[ebp-38h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$3 proc near
mov ['ecx,', '[ebp-40h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$4 proc near
mov ['ecx,', '[ebp-48h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$5 proc near
mov ['ecx,', '[ebp-50h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$6 proc near
mov ['ecx,', '[ebp-58h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z$7 proc near
mov ['ecx,', '[ebp-60h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-5Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$stable_sort@V?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@UBufferEquivalent@@@std@@YAXV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@0@0UBufferEquivalent@@@Z']
jmp ['___CxxFrameHandler3']
endp
??$swap@H@std@@YAXAAH0@Z proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
lea ['eax,', '[ebp+var_4]']
push ['eax']
call ['??$_Move@AAH@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$upper_bound@PAHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Dist_type@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
sub ['esp,', '10h']
mov ['ecx,', 'esp']
mov ['edx,', '[ebp+arg_C]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+arg_10]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+arg_14]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+arg_18]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAH@std@@YAPAHPAH@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Upper_bound@PAHHHUBufferEquivalent@@@std@@YAPAHPAH0ABHUBufferEquivalent@@0@Z']
add ['esp,', '20h']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Rechecked@PAHPAH@std@@YAAAPAHAAPAHPAH@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
pop ['ebp']
retn
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Iterator_base12@std@@QAE@ABU01@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Iterator_base12@std@@QAE@ABU01@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+8],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Container_base12@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Container_base12@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0?$_Temp_iterator@H@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??4?$_Temp_iterator@H@std@@QAEAAV01@ABV01@@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0?$_Temp_iterator@H@std@@QAE@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+10h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Container_base12@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Container_base12@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@D@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@H@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@_W@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$allocator@D@std@@QAE@XZ proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$allocator@H@std@@QAE@XZ proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$allocator@_W@std@@QAE@XZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
lea ['ecx,', '[ebp+var_D]']
call ['??0?$allocator@D@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['[ebp+var_4],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_14]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
lea ['ecx,', '[ebp+var_D]']
call ['??0?$allocator@_W@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z']
mov ['[ebp+var_4],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_14]']
call ['?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z']
mov ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$binder2nd@U?$equal_to@H@std@@@std@@QAE@ABU?$equal_to@H@1@ABH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['[eax+4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
lea ['ecx,', '[ebp+var_D]']
call ['??0?$allocator@H@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??0?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@ABV?$allocator@H@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0BufferEquivalent@@QAE@PAVDocTabView@@H_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['dl,', '[ebp+arg_8]']
mov ['[ecx+0Ch],', 'dl']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
??0NMWINDLG@@QAE@XZ proc near           
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+Dst],', 'ecx']
push ['20h']
push ['0']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memset']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+Dst]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0_Container_base12@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0_Container_proxy@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0_Generic_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0_Generic_error_category@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0error_category@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_Generic_error_category@std@@6B@']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1error_category@std@@UAE@XZ']
endp
__ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0_Ignore@std@@QAE@XZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0_Iostream_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0_Iostream_error_category@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Generic_error_category@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_Iostream_error_category@std@@6B@']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Generic_error_category@std@@UAE@XZ']
endp
__ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0_Iterator_base12@std@@QAE@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0_Iterator_base12@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0_System_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0_System_error_category@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Generic_error_category@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_System_error_category@std@@6B@']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Generic_error_category@std@@UAE@XZ']
endp
__ehhandler$??0_System_error_category@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0_System_error_category@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0error_category@std@@QAE@XZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??0id@locale@std@@QAE@I@Z proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Iterator_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Iterator_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Container_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Container_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Temp_iterator@H@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_74EB']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_74C4']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ecx+8]']
jz ['short', 'loc_74DD']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['??$_Destroy@H@std@@YAXPAH@Z']
add ['esp,', '4']
jmp ['short', 'loc_74BB']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
push ['edx']
call ['??$return_temporary_buffer@H@std@@YAXPAH@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Container_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@H@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Container_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
push ['0']
push ['1']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
push ['0']
push ['1']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$vector@_WV?$allocator@_W@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1SizeableDlg@@UAE@XZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1SizeableDlg@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '20h']
call ['??1CWinMgr@@UAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1StaticDialog@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1SizeableDlg@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1StaticDialog@@UAE@XZ']
endp
__unwindfunclet$??1SizeableDlg@@UAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '20h']
jmp ['??1CWinMgr@@UAE@XZ']
endp
__ehhandler$??1SizeableDlg@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1SizeableDlg@@UAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1StaticDialog@@UAE@XZ proc near       
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1StaticDialog@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7StaticDialog@@6B@']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?isCreated@StaticDialog@@UBE_NXZ']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_7A72']
push ['0']
push ['0FFFFFFEBh']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__SetWindowLongW@12']
mov ['ecx,', '[ebp+var_10]']
call ['?destroy@StaticDialog@@UAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1Window@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1StaticDialog@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1Window@@UAE@XZ']
endp
__ehhandler$??1StaticDialog@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1StaticDialog@@UAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1Window@@UAE@XZ proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7Window@@6B@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1WindowsDlg@@UAE@XZ proc near         
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1WindowsDlg@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '40h']
call ['??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1SizeableDlg@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1WindowsDlg@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1SizeableDlg@@UAE@XZ']
endp
__unwindfunclet$??1WindowsDlg@@UAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '40h']
jmp ['??1?$vector@HV?$allocator@H@std@@@std@@QAE@XZ']
endp
__ehhandler$??1WindowsDlg@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1WindowsDlg@@UAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1_Container_base12@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1_Generic_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1_Generic_error_category@std@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1error_category@std@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1error_category@std@@UAE@XZ']
endp
__ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1_Iostream_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1_Iostream_error_category@std@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Generic_error_category@std@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Generic_error_category@std@@UAE@XZ']
endp
__ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1_Iterator_base12@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1_Iterator_base12@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['3']
lea ['ecx,', '[ebp+var_14]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_14]']
call ['??1_Lockit@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 proc near
lea ['ecx,', '[ebp-14h]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__ehhandler$??1_Iterator_base12@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1_System_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1_System_error_category@std@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Generic_error_category@std@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Generic_error_category@std@@UAE@XZ']
endp
__ehhandler$??1_System_error_category@std@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1_System_error_category@std@@UAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1error_category@std@@UAE@XZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7error_category@std@@6B@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??2@YAPAXIPAX@Z proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
pop ['ebp']
retn
endp
??3@YAXPAX0@Z   proc near               
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
??4?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??4?$_Temp_iterator@H@std@@QAEAAV01@$$QAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[ecx+4]']
cmp ['ecx,', '[eax+8]']
jnb ['short', 'loc_7DC9']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$forward@H@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
mov ['ecx,', '[edx+4]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ecx+4]']
add ['edx,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+10h]']
mov ['[ecx+4],', 'edx']
jmp ['short', 'loc_7E15']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[eax+4]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$forward@H@std@@YA$$QAHAAH@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+var_C]']
push ['eax']
call ['??$_Construct@HH@std@@YAXPAH$$QAH@Z']
add ['esp,', '8']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
mov ['eax,', '[edx+4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??4?$_Temp_iterator@H@std@@QAEAAV01@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+10h]']
mov ['[eax+10h],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??4?$_Iterator012@Urandom_access_iterator_tag@std@@HHPBHABHU_Iterator_base12@2@@std@@QAEAAU01@ABU01@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??4?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??4?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@ABV01@@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_7EB6']
jmp ['short', 'loc_7EF8']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_7ED0']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
jmp ['short', 'loc_7EF8']
push ['3']
lea ['ecx,', '[ebp+var_14]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_14]']
call ['??1_Lockit@std@@QAE@XZ']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 proc near
lea ['ecx,', '[ebp-14h]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
jmp ['___CxxFrameHandler3']
endp
??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+8]']
cmp ['eax,', '[edx+8]']
jnz ['short', 'loc_7F5C']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_7F63']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+8]']
cmp ['eax,', '[edx+8]']
jnz ['short', 'loc_7F98']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_7F9F']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??8error_category@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_0]']
jnz ['short', 'loc_7FC2']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_7FC9']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??8error_condition@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?category@error_condition@std@@QBEABVerror_category@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?category@error_condition@std@@QBEABVerror_category@2@XZ']
mov ['ecx,', 'eax']
call ['??8error_category@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_801C']
mov ['ecx,', '[ebp+var_4]']
call ['?value@error_condition@std@@QBEHXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?value@error_condition@std@@QBEHXZ']
cmp ['esi,', 'eax']
jnz ['short', 'loc_801C']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_8023']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??9?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_8055']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_805C']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_808D']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_8094']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??A?$vector@HV?$allocator@H@std@@@std@@QAEAAHI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_811C']
push ['4B1h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_80D8']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_80FE']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['4B2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_80FE']
int ['3']
push ['0']
push ['4B2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1HC@HBCEAHKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAi?$AAn?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa?$AAl?$AAl?$AAo?$AAc@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??A?$vector@_WV?$allocator@_W@std@@@std@@QAEAA_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_81AC']
push ['4B1h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_8168']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_818E']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['4B2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_818E']
int ['3']
push ['0']
push ['4B2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1IC@MBIJKJB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAw?$AAc?$AAh?$AAa?$AAr?$AA_?$AAt?$AA?0?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAa@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*2]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??D?$_Temp_iterator@H@std@@QAEAAV01@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_8212']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_8212']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
cmp ['edx,', '[eax+4]']
jb ['short', 'loc_8212']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+8]']
ja ['short', 'loc_8271']
push ['48h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EG@FOHJJHAC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_8233']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_8256']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['49h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_8256']
int ['3']
push ['0']
push ['49h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1ME@LLCFNFIO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??D?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEAAHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??D?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEABHXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??E?$_Temp_iterator@H@std@@QAEAAV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??E?$_Temp_iterator@H@std@@QAEAAV01@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_82DF']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_82DF']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+8]']
ja ['short', 'loc_833E']
push ['65h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EE@EJDKCLKB@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_8300']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_8323']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['66h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_8323']
int ['3']
push ['0']
push ['66h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1MG@OPNGNDCB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['[edx+8],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??E?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??E?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV01@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+8]']
sub ['eax,', '[edx+8]']
sar ['eax,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '1Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
lea ['ecx,', '[ebp+var_28]']
call ['??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_18],', 'edx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_18]']
call ['??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_28]']
call ['??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_1C]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 proc near
lea ['ecx,', '[ebp-28h]']
jmp ['??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[ecx+8]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_845C']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_8463']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??R?$binder2nd@U?$equal_to@H@std@@@std@@QBE_NAAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??R?$equal_to@H@std@@QBE_NABH0@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??R?$equal_to@H@std@@QBE_NABH0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_84AA']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_84B1']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??RBufferEquivalent@@QBE_NHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_84CF']
xor ['al,', 'al']
jmp ['short', 'loc_84FA']
mov ['ecx,', '[ebp+var_4]']
movzx ['edx,', 'byte', 'ptr', '[ecx+0Ch]']
test ['edx,', 'edx']
jz ['short', 'loc_84EA']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
lea ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$swap@H@std@@YAXAAH0@Z']
add ['esp,', '8']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?compare@BufferEquivalent@@QBE_NHH@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??RNumericStringEquivalence@@QBE_NPB_W0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['?numstrcmp@NumericStringEquivalence@@SAHPB_W0@Z']
add ['esp,', '8']
test ['eax,', 'eax']
jge ['short', 'loc_8526']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_852D']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??Y?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_GStaticDialog@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1StaticDialog@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_8577']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_GWindow@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1Window@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_85A3']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_GWindowsDlg@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1WindowsDlg@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_85CF']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_G_Generic_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_85FB']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iostream_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_8627']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_G_System_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_System_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_8653']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_Gerror_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_867F']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
call ['??0_Generic_error_category@std@@QAE@XZ']
push ['offset', '??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
pop ['ebp']
retn
endp
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
call ['??0_Iostream_error_category@std@@QAE@XZ']
push ['offset', '??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
pop ['ebp']
retn
endp
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
call ['??0_System_error_category@std@@QAE@XZ']
push ['offset', '??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
pop ['ebp']
retn
endp
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A']
call ['??0id@locale@std@@QAE@I@Z']
pop ['ebp']
retn
endp
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A']
call ['??0id@locale@std@@QAE@I@Z']
pop ['ebp']
retn
endp
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$numpunct@D@std@@2V0locale@2@A']
call ['??0id@locale@std@@QAE@I@Z']
pop ['ebp']
retn
endp
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$numpunct@_W@std@@2V0locale@2@A']
call ['??0id@locale@std@@QAE@I@Z']
pop ['ebp']
retn
endp
??__EWDN_NOTIFY@@YAXXZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['offset', '$SG132116']
call ['dword', 'ptr', 'ds:__imp__RegisterWindowMessageW@4']
mov ['ds:?WDN_NOTIFY@@3IB,', 'eax']
pop ['ebp']
retn
endp
??__EWindowsDlgMap@@YAXXZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['80008h']
push ['0']
push ['13h']
mov ['ecx,', 'offset', '?WindowsDlgMap@@3PAVWINRECT@@A']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['0']
push ['23h']
mov ['ecx,', 'offset', 'unk_18C']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['0']
push ['13h']
mov ['ecx,', 'offset', 'unk_1B0']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['1B59h']
push ['3']
mov ['ecx,', 'offset', 'unk_1D4']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['14h']
push ['0FFFFFFFFh']
push ['1']
mov ['ecx,', 'offset', 'unk_1F8']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['0FFFFFFFFh']
push ['0F0h']
mov ['ecx,', 'offset', 'unk_21C']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0Ch']
push ['0FFFFFFFFh']
push ['1']
mov ['ecx,', 'offset', 'unk_240']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['0']
push ['14h']
mov ['ecx,', 'offset', 'unk_264']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0Ch']
push ['0FFFFFFFFh']
push ['1']
mov ['ecx,', 'offset', 'unk_288']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['1']
push ['4']
mov ['ecx,', 'offset', 'unk_2AC']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0FFFFFFF4h']
push ['0FFFFFFFFh']
push ['1']
mov ['ecx,', 'offset', 'unk_2D0']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['1B5Ah']
push ['4']
mov ['ecx,', 'offset', 'unk_2F4']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0FFFFFFF4h']
push ['0FFFFFFFFh']
push ['1']
mov ['ecx,', 'offset', 'unk_318']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['1B5Bh']
push ['4']
mov ['ecx,', 'offset', 'unk_33C']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0FFFFFFF4h']
push ['0FFFFFFFFh']
push ['1']
mov ['ecx,', 'offset', 'unk_360']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['1B5Ch']
push ['4']
mov ['ecx,', 'offset', 'unk_384']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['0FFFFFFFFh']
push ['3']
mov ['ecx,', 'offset', 'unk_3A8']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['2']
push ['4']
mov ['ecx,', 'offset', 'unk_3CC']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['0FFFFFFFFh']
push ['0F0h']
mov ['ecx,', 'offset', 'unk_3F0']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['0FFFFFFFFh']
push ['0F0h']
mov ['ecx,', 'offset', 'unk_414']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['0FFFFFFFFh']
push ['0F0h']
mov ['ecx,', 'offset', 'unk_438']
call ['??0WINRECT@@QAE@GHJ@Z']
push ['0']
push ['0FFFFFFFFh']
push ['0']
mov ['ecx,', 'offset', 'unk_45C']
call ['??0WINRECT@@QAE@GHJ@Z']
pop ['ebp']
retn
endp
??__E_Tuple_alloc@std@@YAXXZ proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
xor ['eax,', 'eax']
mov ['[ebp+var_1],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??__Eallocator_arg@std@@YAXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
xor ['eax,', 'eax']
mov ['[ebp+var_1],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??__Eignore@std@@YAXXZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '_ignore']
call ['??0_Ignore@std@@QAE@XZ']
pop ['ebp']
retn
endp
??__Epiecewise_construct@std@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
xor ['eax,', 'eax']
mov ['[ebp+var_1],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
call ['??1_Generic_error_category@std@@UAE@XZ']
pop ['ebp']
retn
endp
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
call ['??1_Iostream_error_category@std@@UAE@XZ']
pop ['ebp']
retn
endp
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
call ['??1_System_error_category@std@@UAE@XZ']
pop ['ebp']
retn
endp
?CalcLayout@CWinMgr@@QAEXPAUHWND__@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_18],', 'ecx']
cmp ['[ebp+hWnd],', '0']
jnz ['short', 'loc_8964']
push ['0EFh']
push ['offset', '??_C@_1KO@LJAFCIDL@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@']
push ['offset', '??_C@_19HBMCHKM@?$AAh?$AAW?$AAn?$AAd?$AA?$AA@']
call ['__wassert']
add ['esp,', '0Ch']
lea ['ecx,', '[ebp+Rect]']
push ['ecx']
mov ['edx,', '[ebp+hWnd]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__GetClientRect@8']
mov ['eax,', '[ebp+hWnd]']
push ['eax']
sub ['esp,', '10h']
mov ['ecx,', 'esp']
mov ['edx,', '[ebp+Rect.left]']
mov ['[ecx],', 'edx']
mov ['eax,', '[ebp+Rect.top]']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+Rect.right]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[ebp+Rect.bottom]']
mov ['[ecx+0Ch],', 'eax']
mov ['ecx,', '[ebp+var_18]']
call ['?CalcLayout@CWinMgr@@QAEXUtagRECT@@PAUHWND__@@@Z']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?CalcLayout@CWinMgr@@QAEXUtagRECT@@PAUHWND__@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jnz ['short', 'loc_89D3']
push ['0FDh']
push ['offset', '??_C@_1KO@LJAFCIDL@?$AAc?$AA?3?$AA?2?$AAw?$AAo?$AAr?$AAk?$AAs?$AAp?$AAa?$AAc?$AAe?$AA?2?$AAn?$AAo?$AAt?$AAe?$AAp?$AAa?$AAd?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AAp?$AAl?$AAu?$AAs?$AA?9?$AA6@']
push ['offset', '??_C@_1M@JJLBEALK@?$AAm?$AA_?$AAm?$AAa?$AAp?$AA?$AA@']
call ['__wassert']
add ['esp,', '0Ch']
lea ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
call ['?SetRect@WINRECT@@QAEXABUtagRECT@@@Z']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
call ['eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['14h']
endp
?Encoding@TiXmlDeclarationA@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '60h']
call ['?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?FirstChild@TiXmlNodeA@@QBEPAV1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+14h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetRect@CWinMgr@@QAE?AUtagRECT@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?FindRect@CWinMgr@@QAEPAVWINRECT@@H@Z']
mov ['ecx,', 'eax']
call ['?GetRect@WINRECT@@QAEAAUtagRECT@@XZ']
mov ['ecx,', '[ebp+retstr]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
mov ['edx,', '[eax+4]']
mov ['[ecx+4],', 'edx']
mov ['edx,', '[eax+8]']
mov ['[ecx+8],', 'edx']
mov ['eax,', '[eax+0Ch]']
mov ['[ecx+0Ch],', 'eax']
mov ['eax,', '[ebp+retstr]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?GetRect@WINRECT@@QAEAAUtagRECT@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?GetSize@@YA?AUtagSIZE@@JJ@Z proc near  
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?RectHeight@@YAJABUtagRECT@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
pop ['ebp']
retn
endp
?RectToSize@@YA?AUtagSIZE@@ABUtagRECT@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?RectHeight@@YAJABUtagRECT@@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?RectWidth@@YAJABUtagRECT@@@Z']
add ['esp,', '4']
push ['eax']
call ['?GetSize@@YA?AUtagSIZE@@JJ@Z']
add ['esp,', '8']
mov ['[ebp+var_8],', 'eax']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?RectWidth@@YAJABUtagRECT@@@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[ecx]']
pop ['ebp']
retn
endp
?SetRect@WINRECT@@QAEXABUtagRECT@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '8']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['[eax],', 'edx']
mov ['edx,', '[ecx+4]']
mov ['[eax+4],', 'edx']
mov ['edx,', '[ecx+8]']
mov ['[eax+8],', 'edx']
mov ['ecx,', '[ecx+0Ch]']
mov ['[eax+0Ch],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?ToDeclaration@TiXmlNodeA@@QBEPAVTiXmlDeclarationA@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_8B40']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+10h],', '5']
jnz ['short', 'loc_8B40']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_8B47']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_8B70']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+10h],', '1']
jnz ['short', 'loc_8B70']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_8B77']
mov ['[ebp+var_8],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_8BD8']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1_Lockit@std@@QAE@XZ']
jmp ['short', 'loc_8C2F']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
cmp ['eax,', '[ebp+var_14]']
jz ['short', 'loc_8C2F']
push ['3']
lea ['ecx,', '[ebp+var_1C]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
mov ['[ecx+4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1_Lockit@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 proc near
lea ['ecx,', '[ebp-1Ch]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
jmp ['___CxxFrameHandler3']
endp
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_1]']
call ['?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_10]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_1]']
call ['?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_10]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_1]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_10]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_1]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_10]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Buy@?$vector@_WV?$allocator@_W@std@@@std@@IAE_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_8DBF']
xor ['al,', 'al']
jmp ['short', 'loc_8E13']
jmp ['short', 'loc_8E11']
mov ['ecx,', '[ebp+var_8]']
call ['?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_8DD6']
mov ['ecx,', '[ebp+var_8]']
call ['?_Xlen@?$vector@_WV?$allocator@_W@std@@@std@@IBEXXZ']
jmp ['short', 'loc_8E11']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
mov ['[eax+8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*2]']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx+0Ch],', 'eax']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Clrcont@_Iterator_base12@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_8E5A']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', 'eax']
jz ['short', 'loc_8EC2']
push ['0FAh']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
test ['eax,', 'eax']
jz ['short', 'loc_8E7E']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_8EA4']
push ['offset', '??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0FBh']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_8EA4']
int ['3']
push ['0']
push ['0FBh']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Compat@?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEXABV12@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_8EF6']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', 'eax']
jz ['short', 'loc_8F5E']
push ['0F0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DM@HINDPMBP@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
test ['eax,', 'eax']
jz ['short', 'loc_8F1A']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_8F40']
push ['offset', '??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0F1h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_8F40']
int ['3']
push ['0']
push ['0F1h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1LO@MGELDLOO@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '10h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
or ['eax,', '0Fh']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_18]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+var_1C]']
jnb ['short', 'loc_8FB5']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_9007']
mov ['edx,', '[ebp+var_18]']
mov ['ecx,', '[edx+18h]']
shr ['ecx,', '1']
mov ['eax,', '[ebp+var_1C]']
xor ['edx,', 'edx']
mov ['esi,', '3']
div ['esi']
cmp ['ecx,', 'eax']
ja ['short', 'loc_8FCF']
jmp ['short', 'loc_9007']
mov ['ecx,', '[ebp+var_18]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
mov ['edx,', '[ebp+var_18]']
mov ['ecx,', '[edx+18h]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
mov ['edx,', '[ebp+var_18]']
cmp ['[edx+18h],', 'eax']
ja ['short', 'loc_8FFC']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+18h]']
shr ['ecx,', '1']
mov ['edx,', '[ebp+var_18]']
add ['ecx,', '[edx+18h]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_9007']
mov ['ecx,', '[ebp+var_18]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '1']
push ['eax']
lea ['ecx,', '[ebp+var_11]']
push ['ecx']
mov ['ecx,', '[ebp+var_18]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_908A']
endp
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
mov ['[ebp-10h],', 'esp']
mov ['edx,', '[ebp+8]']
mov ['[ebp-1Ch],', 'edx']
mov ['byte', 'ptr', '[ebp-4],', '2']
mov ['eax,', '[ebp-1Ch]']
add ['eax,', '1']
push ['eax']
lea ['ecx,', '[ebp-12h]']
push ['ecx']
mov ['ecx,', '[ebp-18h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z']
mov ['[ebp-20h],', 'eax']
jmp ['short', 'loc_9074']
endp
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
push ['0']
push ['1']
mov ['ecx,', '[ebp-18h]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
endp
$LN17           proc near               
mov ['dword', 'ptr', '[ebp-4],', '1']
endp
$LN19           proc near               
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
cmp ['dword', 'ptr', '[ebp+0Ch],', '0']
jbe ['short', 'loc_90B9']
mov ['edx,', '[ebp+0Ch]']
push ['edx']
mov ['ecx,', '[ebp-18h]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
mov ['eax,', '[ebp-20h]']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
push ['0']
push ['1']
mov ['ecx,', '[ebp-18h]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
lea ['ecx,', '[ebp-20h]']
push ['ecx']
mov ['edx,', '[ebp-18h]']
add ['edx,', '4']
push ['edx']
lea ['eax,', '[ebp-13h]']
push ['eax']
mov ['ecx,', '[ebp-18h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z']
mov ['ecx,', '[ebp-18h]']
mov ['edx,', '[ebp-1Ch]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+0Ch]']
push ['eax']
mov ['ecx,', '[ebp-18h]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['ecx,', '[ebp-0Ch]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
jmp ['___CxxFrameHandler3']
endp
?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '10h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
or ['eax,', '7']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_18]']
call ['?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+var_1C]']
jnb ['short', 'loc_9175']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_91C7']
mov ['edx,', '[ebp+var_18]']
mov ['ecx,', '[edx+18h]']
shr ['ecx,', '1']
mov ['eax,', '[ebp+var_1C]']
xor ['edx,', 'edx']
mov ['esi,', '3']
div ['esi']
cmp ['ecx,', 'eax']
ja ['short', 'loc_918F']
jmp ['short', 'loc_91C7']
mov ['ecx,', '[ebp+var_18]']
call ['?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ']
mov ['edx,', '[ebp+var_18]']
mov ['ecx,', '[edx+18h]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
mov ['edx,', '[ebp+var_18]']
cmp ['[edx+18h],', 'eax']
ja ['short', 'loc_91BC']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+18h]']
shr ['ecx,', '1']
mov ['edx,', '[ebp+var_18]']
add ['ecx,', '[edx+18h]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_91C7']
mov ['ecx,', '[ebp+var_18]']
call ['?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '1']
push ['eax']
lea ['ecx,', '[ebp+var_11]']
push ['ecx']
mov ['ecx,', '[ebp+var_18]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_924A']
endp
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
mov ['[ebp-10h],', 'esp']
mov ['edx,', '[ebp+8]']
mov ['[ebp-1Ch],', 'edx']
mov ['byte', 'ptr', '[ebp-4],', '2']
mov ['eax,', '[ebp-1Ch]']
add ['eax,', '1']
push ['eax']
lea ['ecx,', '[ebp-12h]']
push ['ecx']
mov ['ecx,', '[ebp-18h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z']
mov ['[ebp-20h],', 'eax']
jmp ['short', 'loc_9234']
endp
__catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
push ['0']
push ['1']
mov ['ecx,', '[ebp-18h]']
call ['?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
endp
$LN17_0         proc near               
mov ['dword', 'ptr', '[ebp-4],', '1']
endp
$LN19_0         proc near               
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
cmp ['dword', 'ptr', '[ebp+0Ch],', '0']
jbe ['short', 'loc_9279']
mov ['edx,', '[ebp+0Ch]']
push ['edx']
mov ['ecx,', '[ebp-18h]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ']
push ['eax']
mov ['eax,', '[ebp-20h]']
push ['eax']
call ['?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z']
add ['esp,', '0Ch']
push ['0']
push ['1']
mov ['ecx,', '[ebp-18h]']
call ['?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z']
lea ['ecx,', '[ebp-20h]']
push ['ecx']
mov ['edx,', '[ebp-18h]']
add ['edx,', '4']
push ['edx']
lea ['eax,', '[ebp-13h]']
push ['eax']
mov ['ecx,', '[ebp-18h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z']
mov ['ecx,', '[ebp-18h]']
mov ['edx,', '[ebp-1Ch]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+0Ch]']
push ['eax']
mov ['ecx,', '[ebp-18h]']
call ['?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z']
mov ['ecx,', '[ebp-0Ch]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z']
jmp ['___CxxFrameHandler3']
endp
?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAH0AAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXPA_W0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@_W@std@@@std@@@std@@YAXPA_W0AAU?$_Wrap_alloc@V?$allocator@_W@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_1],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+14h],', 'ecx']
lea ['edx,', '[ebp+var_1]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?assign@?$char_traits@D@std@@SAXAADABD@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
xor ['eax,', 'eax']
mov ['[ebp+var_2],', 'ax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+14h],', 'edx']
lea ['eax,', '[ebp+var_2]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[eax+ecx*2]']
push ['edx']
call ['?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_First@?$_Temp_iterator@H@std@@QBEPAHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+10h]']
mov ['eax,', '[ecx]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_9556']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_9560']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_9582']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_958D']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '4']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_95C6']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_95E6']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
jmp ['short', 'loc_9630']
movzx ['edx,', '[ebp+arg_4]']
test ['edx,', 'edx']
jz ['short', 'loc_9620']
cmp ['[ebp+arg_0],', '10h']
jnb ['short', 'loc_9620']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+14h]']
jnb ['short', 'loc_9607']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+Size],', 'edx']
jmp ['short', 'loc_9610']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+Size]']
push ['edx']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
jmp ['short', 'loc_9630']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_9630']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
cmp ['[ebp+arg_0],', '0']
jbe ['short', 'loc_963F']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_9646']
mov ['[ebp+var_C],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_C]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_966E']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_968E']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z']
jmp ['short', 'loc_96D8']
movzx ['edx,', '[ebp+arg_4]']
test ['edx,', 'edx']
jz ['short', 'loc_96C8']
cmp ['[ebp+arg_0],', '8']
jnb ['short', 'loc_96C8']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+14h]']
jnb ['short', 'loc_96AF']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_8],', 'edx']
jmp ['short', 'loc_96B8']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z']
jmp ['short', 'loc_96D8']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_96D8']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z']
cmp ['[ebp+arg_0],', '0']
jbe ['short', 'loc_96E7']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_96EE']
mov ['[ebp+var_C],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_C]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_8]']
call ['?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_4]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
cmp ['eax,', '[ebp+var_4]']
jnb ['short', 'loc_9729']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_9734']
mov ['edx,', '[ebp+var_4]']
shr ['edx,', '1']
add ['edx,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_9748']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Grow_to@?$vector@_WV?$allocator@_W@std@@@std@@IBEII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?capacity@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_8]']
call ['?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_4]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
cmp ['eax,', '[ebp+var_4]']
jnb ['short', 'loc_9785']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_9790']
mov ['edx,', '[ebp+var_4]']
shr ['edx,', '1']
add ['edx,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_97A4']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Init@?$_Temp_iterator@H@std@@QAEAAV12@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+10h]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[ecx]']
mov ['[eax+4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_97FD']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
cmp ['[ebp+arg_0],', 'eax']
jb ['short', 'loc_97FD']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+14h]']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_9803']
xor ['al,', 'al']
jmp ['short', 'loc_9805']
jmp ['short', 'loc_9805']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_983C']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ']
cmp ['[ebp+arg_0],', 'eax']
jb ['short', 'loc_983C']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+14h]']
lea ['eax,', '[eax+edx*2]']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_9842']
xor ['al,', 'al']
jmp ['short', 'loc_9844']
jmp ['short', 'loc_9844']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+8]']
jnb ['short', 'loc_9874']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_9874']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_987B']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Inside@?$vector@_WV?$allocator@_W@std@@@std@@IBE_NPB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+8]']
jnb ['short', 'loc_98AC']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_98AC']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_98B3']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Last@?$_Temp_iterator@H@std@@QBEPAHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+10h]']
mov ['eax,', '[ecx+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z']
mov ['edx,', '[ebp+var_10]']
or ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
__unwindfunclet$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z$0 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z$1 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN5']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z']
jmp ['___CxxFrameHandler3']
endp
?_Maxlen@?$_Temp_iterator@H@std@@QAEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+10h]']
cmp ['dword', 'ptr', '[ecx],', '0']
jnz ['short', 'loc_99E1']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
jle ['short', 'loc_99E1']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+10h]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
lea ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['??$get_temporary_buffer@H@std@@YA?AU?$pair@PAHH@0@H@Z']
add ['esp,', '8']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[ebp+var_C]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+0Ch],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+10h]']
mov ['eax,', '[eax+0Ch]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_9A16']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_9A1F']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_9A4E']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_9A57']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '8']
jb ['short', 'loc_9A86']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@_W@std@@YAPA_WAA_W@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_9A8F']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '8']
jb ['short', 'loc_9ABE']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@_W@std@@YAPA_WAA_W@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_9AC7']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_9B5B']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx]']
add ['edx,', '4']
mov ['[ebp+var_10],', 'edx']
jmp ['short', 'loc_9B2B']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ecx+4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[ecx],', '0']
jz ['short', 'loc_9B40']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_9B1E']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1_Lockit@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-10h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ']
jmp ['___CxxFrameHandler3']
endp
?_Orphan_me@_Iterator_base12@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_9BFE']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
add ['edx,', '4']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_9BCB']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
cmp ['edx,', '[ebp+var_8]']
jz ['short', 'loc_9BCB']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '4']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_9BAC']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jnz ['short', 'loc_9BEA']
push ['0C9h']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_9C9C']
mov ['eax,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_9C9C']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_0]']
jb ['short', 'loc_9C70']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_9C7F']
mov ['ecx,', '[ebp+var_10]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_9C9A']
mov ['edx,', '[ebp+var_10]']
mov ['ecx,', '[edx]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_9C4E']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1_Lockit@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__ehhandler$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-10h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z']
jmp ['___CxxFrameHandler3']
endp
?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_9D78']
mov ['eax,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_9D78']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_0]']
jb ['short', 'loc_9D4C']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_9D5B']
mov ['ecx,', '[ebp+var_10]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_9D76']
mov ['edx,', '[ebp+var_10]']
mov ['ecx,', '[edx]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_9D2A']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1_Lockit@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__ehhandler$?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-10h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z']
jmp ['___CxxFrameHandler3']
endp
?_Pop_back_n@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '2']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
sub ['edx,', 'eax']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['[eax+8],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '10h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_11]']
push ['ecx']
mov ['ecx,', '[ebp+var_18]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
call ['??$_Umove@PAH@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAH00@Z']
jmp ['short', 'loc_9EA2']
endp
__catch$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z$0 proc near
mov ['ecx,', '[ebp+8]']
push ['ecx']
mov ['edx,', '[ebp-1Ch]']
push ['edx']
lea ['eax,', '[ebp-12h]']
push ['eax']
mov ['ecx,', '[ebp-18h]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
endp
$LN8            proc near               
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
endp
__ehhandler$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z']
jmp ['___CxxFrameHandler3']
endp
?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '10h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_11]']
push ['ecx']
mov ['ecx,', '[ebp+var_18]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
call ['??$_Umove@PA_W@?$vector@_WV?$allocator@_W@std@@@std@@IAEPA_WPA_W00@Z']
jmp ['short', 'loc_9FFE']
endp
__catch$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z$0 proc near
mov ['ecx,', '[ebp+8]']
push ['ecx']
mov ['edx,', '[ebp-1Ch]']
push ['edx']
lea ['eax,', '[ebp-12h]']
push ['eax']
mov ['ecx,', '[ebp-18h]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
endp
$LN8_0          proc near               
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
endp
__ehhandler$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z']
jmp ['___CxxFrameHandler3']
endp
?_Rechecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAEAAV12@PAH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_A12F']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
sub ['esi,', 'eax']
cmp ['esi,', '[ebp+arg_0]']
jnb ['short', 'loc_A112']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow_to@?$vector@HV?$allocator@H@std@@@std@@IBEII@Z']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reallocate@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Reserve@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unused_capacity@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_A18B']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ']
sub ['esi,', 'eax']
cmp ['esi,', '[ebp+arg_0]']
jnb ['short', 'loc_A16E']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$vector@_WV?$allocator@_W@std@@@std@@IBEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow_to@?$vector@_WV?$allocator@_W@std@@@std@@IBEII@Z']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reallocate@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_8],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jnz ['short', 'loc_A1A7']
jmp ['short', 'loc_A21A']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx+18h],', '10h']
jb ['short', 'loc_A21A']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '4']
push ['ecx']
lea ['edx,', '[ebp+var_1]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z']
cmp ['[ebp+Size],', '0']
jbe ['short', 'loc_A1F9']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '4']
push ['edx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+18h]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
lea ['eax,', '[ebp+var_2]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+18h],', '0Fh']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_8],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jnz ['short', 'loc_A24B']
jmp ['short', 'loc_A2BE']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx+18h],', '8']
jb ['short', 'loc_A2BE']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '4']
push ['ecx']
lea ['edx,', '[ebp+var_1]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_A29D']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['??$addressof@_W@std@@YAPA_WAA_W@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '4']
push ['edx']
call ['?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+18h]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
lea ['eax,', '[ebp+var_2]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+18h],', '7']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_A354']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
sar ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z']
mov ['edx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Tidy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_A3CF']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Destroy@?$vector@_WV?$allocator@_W@std@@@std@@IAEXPA_W0@Z']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
sar ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z']
mov ['edx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIPBH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_fill_n@PAHIHU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAHIPBHAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
lea ['eax,', '[eax+edx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?_Unchecked@?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEPA_WXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Unchecked@?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBEPAHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Unused_capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+8]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Unused_capacity@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+8]']
sar ['eax,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['offset', '??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@']
call ['?_Xlength_error@std@@YAXPBD@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['offset', '??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@']
call ['?_Xlength_error@std@@YAXPBD@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Xlen@?$vector@HV?$allocator@H@std@@@std@@IBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['offset', '??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
call ['?_Xlength_error@std@@YAXPBD@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Xlen@?$vector@_WV?$allocator@_W@std@@@std@@IBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['offset', '??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
call ['?_Xlength_error@std@@YAXPBD@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['offset', '??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@']
call ['?_Xout_of_range@std@@YAXPBD@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['offset', '??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@']
call ['?_Xout_of_range@std@@YAXPBD@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@D@std@@QAEPADI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEPAHI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@H@std@@QAEPAHI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@_W@std@@QAEPA_WI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$allocator@D@std@@QAEPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@D@std@@YAPADIPAD@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$allocator@H@std@@QAEPAHI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@H@std@@YAPAHIPAH@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@_W@std@@YAPA_WIPA_W@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_A5FE']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_8]']
jnb ['short', 'loc_A61A']
mov ['ecx,', '[ebp+var_8]']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', 'ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB']
sub ['eax,', '[edx+14h]']
cmp ['eax,', '[ebp+arg_8]']
ja ['short', 'loc_A632']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ']
cmp ['[ebp+arg_8],', '0']
jbe ['short', 'loc_A692']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+14h]']
add ['edx,', '[ebp+arg_8]']
mov ['[ebp+var_8],', 'edx']
push ['0']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_A692']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ']
mov ['ecx,', '[ebp+arg_4]']
lea ['edx,', '[eax+ecx*2]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+14h]']
lea ['eax,', '[eax+edx*2]']
push ['eax']
call ['?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['43Eh']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['??$_Debug_pointer@_W@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['?length@?$char_traits@_W@std@@SAIPB_W@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_A6FD']
push ['42Ah']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Debug_pointer@_W@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_A732']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ']
mov ['ecx,', '[ebp+Src]']
sub ['ecx,', 'eax']
sar ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?append@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z']
jmp ['short', 'loc_A7A3']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', 'ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB']
sub ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_4]']
ja ['short', 'loc_A74B']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_A7A0']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
add ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
push ['0']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_A7A0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[edx+14h]']
lea ['edx,', '[eax+ecx*2]']
push ['edx']
call ['?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_A7CA']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+Size],', 'eax']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+Size]']
jnb ['short', 'loc_A7E6']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_0]']
jnz ['short', 'loc_A80D']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z']
jmp ['short', 'loc_A84F']
push ['0']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_A84F']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ']
add ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['490h']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['?length@?$char_traits@D@std@@SAIPBD@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+Size],', '0']
jz ['short', 'loc_A8B7']
push ['47Fh']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_A8EA']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+Src]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z']
jmp ['short', 'loc_A927']
push ['0']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_A924']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_A94E']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+var_8]']
jnb ['short', 'loc_A96A']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_0]']
jnz ['short', 'loc_A991']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z']
jmp ['short', 'loc_A9D6']
push ['0']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_A9D6']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ']
mov ['edx,', '[ebp+arg_4]']
lea ['eax,', '[eax+edx*2]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ']
push ['eax']
call ['?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_8]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['490h']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['??$_Debug_pointer@_W@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['?length@?$char_traits@_W@std@@SAIPB_W@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_AA3F']
push ['47Fh']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Debug_pointer@_W@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_AA74']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ']
mov ['ecx,', '[ebp+Src]']
sub ['ecx,', 'eax']
sar ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z']
jmp ['short', 'loc_AAB1']
push ['0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_AAAE']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ']
push ['eax']
call ['?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
pop ['ebp']
retn
endp
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx]']
mov ['[eax],', 'dx']
pop ['ebp']
retn
endp
?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
or ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN4']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ']
jmp ['___CxxFrameHandler3']
endp
?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_14]']
or ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ$0 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN4_1']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
jmp ['___CxxFrameHandler3']
endp
?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?capacity@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?capacity@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?category@error_code@std@@QBEABVerror_category@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ecx+8],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?compare@BufferEquivalent@@QBE_NHH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '30h']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['ecx,', '[ecx+4]']
call ['?getBufferByIndex@DocTabView@@QAEPAVBuffer@@H@Z']
mov ['[ebp+var_14],', 'eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
call ['?getBufferByIndex@DocTabView@@QAEPAVBuffer@@H@Z']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_14]']
push ['ecx']
call ['?getInstance@FileManager@@SAPAV1@XZ']
mov ['ecx,', 'eax']
call ['?getBufferByID@FileManager@@QAEPAVBuffer@@PAV2@@Z']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_18]']
push ['edx']
call ['?getInstance@FileManager@@SAPAV1@XZ']
mov ['ecx,', 'eax']
call ['?getBufferByID@FileManager@@QAEPAVBuffer@@PAV2@@Z']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jnz ['short', 'loc_AD5A']
mov ['ecx,', '[ebp+var_8]']
call ['?getFileName@Buffer@@QBEPB_WXZ']
mov ['[ebp+Str],', 'eax']
mov ['ecx,', '[ebp+var_C]']
call ['?getFileName@Buffer@@QBEPB_WXZ']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??RNumericStringEquivalence@@QBE_NPB_W0@Z']
jmp ['short', 'loc_ADCB']
jmp ['short', 'loc_ADC9']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '1']
jnz ['short', 'loc_AD8D']
mov ['ecx,', '[ebp+var_8]']
call ['?getFullPathName@Buffer@@QBEPB_WXZ']
mov ['[ebp+var_28],', 'eax']
mov ['ecx,', '[ebp+var_C]']
call ['?getFullPathName@Buffer@@QBEPB_WXZ']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
push ['ecx']
mov ['edx,', '[ebp+var_28]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??RNumericStringEquivalence@@QBE_NPB_W0@Z']
jmp ['short', 'loc_ADCB']
jmp ['short', 'loc_ADC9']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '2']
jnz ['short', 'loc_ADC9']
mov ['ecx,', '[ebp+var_8]']
call ['?getLangType@Buffer@@QBE?AW4LangType@@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
call ['?getLangType@Buffer@@QBE?AW4LangType@@XZ']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
cmp ['ecx,', '[ebp+var_30]']
jge ['short', 'loc_ADBD']
mov ['[ebp+var_10],', '1']
jmp ['short', 'loc_ADC4']
mov ['[ebp+var_10],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_10]']
jmp ['short', 'loc_ADCB']
xor ['al,', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_ADE6']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_ADFD']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_AE16']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_AE2D']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_wmemcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@D@std@@QAEXPADI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QAEXPAHI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@H@std@@QAEXPAHI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$allocator@H@std@@QAEXPAHI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?_Syserror_map@std@@YAPBDH@Z']
add ['esp,', '4']
test ['eax,', 'eax']
jz ['short', 'loc_AF54']
call ['?generic_category@std@@YAABVerror_category@1@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_AF69']
jmp ['short', 'loc_AF69']
call ['?system_category@std@@YAABVerror_category@1@XZ']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?destroy@StaticDialog@@UAEXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
push ['1']
push ['7F4h']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+8]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__DestroyWindow@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?display@Window@@UBEX_N@Z proc near     
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jz ['short', 'loc_AFDE']
mov ['[ebp+nCmdShow],', '5']
jmp ['short', 'loc_AFE5']
mov ['[ebp+nCmdShow],', '0']
mov ['ecx,', '[ebp+nCmdShow]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__ShowWindow@8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+14h]']
lea ['eax,', '[eax+edx*2]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
or ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN4_0']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ']
jmp ['___CxxFrameHandler3']
endp
?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@PAHPBU_Container_base12@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_14]']
or ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ$0 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN4_2']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
jmp ['___CxxFrameHandler3']
endp
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?category@error_code@std@@QBEABVerror_category@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['??8error_category@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_B177']
mov ['ecx,', '[ebp+arg_0]']
call ['?value@error_code@std@@QBEHXZ']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_B177']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_B17E']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
mov ['ecx,', 'eax']
call ['??8error_condition@std@@QBE_NABV01@@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_B1D2']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_B204']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
ja ['short', 'loc_B220']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
jmp ['short', 'loc_B266']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_B266']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
mov ['[ebp+Dst],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['?move@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_B28A']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_B2BC']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
ja ['short', 'loc_B2D8']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z']
jmp ['short', 'loc_B324']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_B324']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[eax+edx*2]']
mov ['[ebp+Dst],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+14h]']
sub ['edx,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
sub ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ebp+Dst]']
lea ['eax,', '[edx+ecx*2]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
call ['?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_C]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '84h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_4],', '2']
lea ['eax,', '[ebp+var_90]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?begin@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
mov ['[ebp+var_44],', 'eax']
mov ['ecx,', '[ebp+var_44]']
mov ['[ebp+var_30],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '1']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_30]']
push ['eax']
lea ['ecx,', '[ebp+arg_4]']
call ['??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_B3E5']
lea ['edx,', '[ebp+var_84]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?end@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@XZ']
mov ['[ebp+var_38],', 'eax']
mov ['eax,', '[ebp+var_38]']
mov ['[ebp+var_48],', 'eax']
mov ['[ebp+var_4],', '4']
mov ['ecx,', '[ebp+var_14]']
or ['ecx,', '2']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_48]']
push ['edx']
lea ['ecx,', '[ebp+arg_10]']
call ['??8?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_B3E5']
mov ['[ebp+var_1C],', '1']
jmp ['short', 'loc_B3EC']
mov ['[ebp+var_1C],', '0']
mov ['cl,', 'byte', 'ptr', '[ebp+var_1C]']
mov ['[ebp+var_15],', 'cl']
mov ['[ebp+var_4],', '3']
mov ['edx,', '[ebp+var_14]']
and ['edx,', '2']
jz ['short', 'loc_B410']
and ['[ebp+var_14],', '0FFFFFFFDh']
lea ['ecx,', '[ebp+var_84]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '2']
mov ['eax,', '[ebp+var_14]']
and ['eax,', '1']
jz ['short', 'loc_B42E']
and ['[ebp+var_14],', '0FFFFFFFEh']
lea ['ecx,', '[ebp+var_90]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
movzx ['ecx,', '[ebp+var_15]']
test ['ecx,', 'ecx']
jz ['short', 'loc_B443']
mov ['ecx,', '[ebp+var_10]']
call ['?clear@?$vector@HV?$allocator@H@std@@@std@@QAEXXZ']
jmp ['loc_B589']
lea ['edx,', '[ebp+arg_10]']
push ['edx']
lea ['ecx,', '[ebp+arg_4]']
call ['??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['loc_B589']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_58],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_40],', 'eax']
mov ['eax,', '[ebp+var_40]']
mov ['[ebp+var_68],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z']
mov ['[ebp+var_70],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_78],', 'esp']
lea ['edx,', '[ebp+arg_10]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_34],', 'eax']
mov ['eax,', '[ebp+var_34]']
mov ['[ebp+var_64],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '7']
lea ['ecx,', '[ebp+var_54]']
push ['ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z']
mov ['[ebp+var_74],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '8']
lea ['edx,', '[ebp+var_54]']
push ['edx']
lea ['ecx,', '[ebp+var_2C]']
call ['??9?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['loc_B571']
lea ['ecx,', '[ebp+var_2C]']
push ['ecx']
lea ['ecx,', '[ebp+var_54]']
call ['??M?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jnz ['short', 'loc_B511']
lea ['ecx,', '[ebp+var_2C]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['eax,', '[ebp+var_10]']
jnz ['short', 'loc_B511']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+Dst]']
cmp ['ecx,', '[eax+4]']
jb ['short', 'loc_B511']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+Src]']
jnb ['short', 'loc_B528']
push ['5C5h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Move@PAHPAH@std@@YAPAHPAH00@Z']
add ['esp,', '0Ch']
mov ['[ebp+var_20],', 'eax']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_range@?$vector@HV?$allocator@H@std@@@std@@IBEXPAH0@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_20]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Destroy@?$vector@HV?$allocator@H@std@@@std@@IAEXPAH0@Z']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ebp+var_20]']
mov ['[edx+8],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '6']
lea ['ecx,', '[ebp+var_54]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_2C]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_6C],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_3C],', 'eax']
mov ['eax,', '[ebp+var_3C]']
mov ['[ebp+var_5C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '9']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$vector@HV?$allocator@H@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@@Z']
mov ['[ebp+var_60],', 'eax']
mov ['edx,', '[ebp+var_14]']
or ['edx,', '4']
mov ['[ebp+var_14],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_10]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['1Ch']
endp
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$0 proc near
lea ['ecx,', '[ebp+18h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$1 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$2 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN14']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
lea ['ecx,', '[ebp-90h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
retn
endp
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$3 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '2']
jz ['$LN16']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFDh']
lea ['ecx,', '[ebp-84h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
retn
endp
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$4 proc near
mov ['ecx,', '[ebp-58h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$5 proc near
lea ['ecx,', '[ebp-2Ch]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$6 proc near
mov ['ecx,', '[ebp-78h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$7 proc near
lea ['ecx,', '[ebp-54h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$8 proc near
mov ['ecx,', '[ebp-6Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z$9 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '4']
jz ['$LN25']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFBh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-88h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?erase@?$vector@HV?$allocator@H@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@H@std@@@std@@@2@0@Z']
jmp ['___CxxFrameHandler3']
endp
?generic_category@std@@YAABVerror_category@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
pop ['ebp']
retn
endp
?getBufferByID@FileManager@@QAEPAVBuffer@@PAV2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?getClientRect@Window@@UBEXAAUtagRECT@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+lpRect]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__GetClientRect@8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?getCurrentTabIndex@TabBar@@QBEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['0']
push ['0']
push ['130Bh']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__SendMessageW@16']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?getFileName@Buffer@@QBEPB_WXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+0A8h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?getFullPathName@Buffer@@QBEPB_WXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '8Ch']
call ['?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?getHeight@Window@@UBEHXZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_18],', 'ecx']
lea ['eax,', '[ebp+Rect]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__GetClientRect@8']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__IsWindowVisible@4']
cmp ['eax,', '1']
jnz ['short', 'loc_B766']
mov ['eax,', '[ebp+Rect.bottom]']
sub ['eax,', '[ebp+Rect.top]']
jmp ['short', 'loc_B768']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?getInstance@EncodingMapper@@SAPAV1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'dword', 'ptr', 'ds:?_pSelf@EncodingMapper@@0PAV1@A']
pop ['ebp']
retn
endp
?getInstance@FileManager@@SAPAV1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'dword', 'ptr', 'ds:?_pSelf@FileManager@@0PAV1@A']
pop ['ebp']
retn
endp
?getInstance@NppParameters@@SAPAV1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'dword', 'ptr', 'ds:?_pSelf@NppParameters@@0PAV1@A']
pop ['ebp']
retn
endp
?getInstance@WcharMbcsConvertor@@SAPAV1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'dword', 'ptr', 'ds:?_pSelf@WcharMbcsConvertor@@1PAV1@A']
pop ['ebp']
retn
endp
?getLangFromID@NppParameters@@QBEPAULang@@W4LangType@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_B7C3']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ecx+92Ch]']
jge ['short', 'loc_B806']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+eax*4+7ECh]']
mov ['eax,', '[edx]']
cmp ['eax,', '[ebp+arg_0]']
jz ['short', 'loc_B7F5']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[edx+ecx*4+7ECh],', '0']
jnz ['short', 'loc_B804']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['eax,', '[ecx+eax*4+7ECh]']
jmp ['short', 'loc_B808']
jmp ['short', 'loc_B7BA']
xor ['eax,', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?getLangName@Lang@@QBEPB_WXZ proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '4']
call ['?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?getLangType@Buffer@@QBE?AW4LangType@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+14h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?getWidth@Window@@UBEHXZ proc near      
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_18],', 'ecx']
lea ['eax,', '[ebp+Rect]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__GetClientRect@8']
mov ['eax,', '[ebp+Rect.right]']
sub ['eax,', '[ebp+Rect.left]']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?getWindowRect@Window@@UBEXAAUtagRECT@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+lpRect]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__GetWindowRect@8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+8],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?isCreated@StaticDialog@@UBE_NXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+0Ch],', '0']
jz ['short', 'loc_B8CF']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_B8D6']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?isDirty@Buffer@@QBE_NXZ proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['al,', '[eax+34h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?isReadOnly@Buffer@@QBE_NXZ proc near   
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
movzx ['ecx,', 'byte', 'ptr', '[eax+44h]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_B91F']
mov ['edx,', '[ebp+var_4]']
movzx ['eax,', 'byte', 'ptr', '[edx+88h]']
test ['eax,', 'eax']
jnz ['short', 'loc_B91F']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_B926']
mov ['[ebp+var_8],', '1']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?isVisible@Window@@UBE_NXZ proc near    
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__IsWindowVisible@4']
test ['eax,', 'eax']
jz ['short', 'loc_B950']
mov ['[ebp+var_1],', '1']
jmp ['short', 'loc_B954']
mov ['[ebp+var_1],', '0']
mov ['al,', '[ebp+var_1]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?length@?$char_traits@D@std@@SAIPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_B973']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_B982']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+Str]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_B9A3']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_B9B2']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_wcslen']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$allocator@D@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
or ['eax,', '0FFFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$allocator@H@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '3FFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$allocator@_W@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '7FFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@D@std@@QBEIXZ']
pop ['ebp']
retn
endp
?max_size@?$allocator_traits@V?$allocator@H@std@@@std@@SAIABV?$allocator@H@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@H@std@@QBEIXZ']
pop ['ebp']
retn
endp
?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@_W@std@@QBEIXZ']
pop ['ebp']
retn
endp
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['[ebp+var_10],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '1']
ja ['short', 'loc_BA92']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_BA9B']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+var_C]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['[ebp+var_10],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '1']
ja ['short', 'loc_BAD2']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_BADB']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+var_C]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@H@std@@@std@@QBEIXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_1C],', 'ecx']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?_Syserror_map@std@@YAPBDH@Z']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_BB70']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+Str],', 'ecx']
jmp ['short', 'loc_BB77']
mov ['[ebp+Str],', 'offset', '??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_18]']
or ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
mov ['eax,', '[ebp-18h]']
and ['eax,', '1']
jz ['$LN6']
and ['dword', 'ptr', '[ebp-18h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
retn
endp
__ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
jmp ['___CxxFrameHandler3']
endp
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_10],', '0']
cmp ['[ebp+arg_4],', '1']
jnz ['short', 'loc_BC35']
push ['offset', '??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
or ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_BC58']
jmp ['short', 'loc_BC58']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
or ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN6_0']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
retn
endp
__ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
jmp ['___CxxFrameHandler3']
endp
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_1C],', 'ecx']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?_Winerror_map@std@@YAPBDH@Z']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_BCEC']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+Str],', 'ecx']
jmp ['short', 'loc_BCF3']
mov ['[ebp+Str],', 'offset', '??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_18]']
or ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
mov ['eax,', '[ebp-18h]']
and ['eax,', '1']
jz ['$LN6_1']
and ['dword', 'ptr', '[ebp-18h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
retn
endp
__ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
jmp ['___CxxFrameHandler3']
endp
?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_BD6A']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_BD81']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memmove']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_BD9A']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_BDB1']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_wmemmove']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?name@_Generic_error_category@std@@UBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_07DCLBNMLN@generic?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?name@_Iostream_error_category@std@@UBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_08LLGCOLLL@iostream?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?name@_System_error_category@std@@UBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_06FHFOAHML@system?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?nbItem@TabBar@@QBEHXZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+10h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?numstrcmp@NumericStringEquivalence@@SAHPB_W0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
push ['esi']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+Str]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jz ['short', 'loc_BE1E']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'word', 'ptr', '[edx]']
test ['eax,', 'eax']
jnz ['short', 'loc_BE44']
mov ['ecx,', '[ebp+Str]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
cmp ['edx,', 'ecx']
jz ['short', 'loc_BE3F']
mov ['edx,', '[ebp+Str]']
movzx ['eax,', 'word', 'ptr', '[edx]']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
sub ['eax,', 'edx']
mov ['[ebp+var_4],', 'eax']
jmp ['loc_BF78']
mov ['eax,', '[ebp+Str]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
push ['ecx']
call ['_iswdigit']
add ['esp,', '4']
test ['eax,', 'eax']
jz ['short', 'loc_BEC8']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'word', 'ptr', '[edx]']
push ['eax']
call ['_iswdigit']
add ['esp,', '4']
test ['eax,', 'eax']
jz ['short', 'loc_BEC8']
push ['0Ah']
lea ['ecx,', '[ebp+EndPtr]']
push ['ecx']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_wcstol']
add ['esp,', '0Ch']
mov ['esi,', 'eax']
push ['0Ah']
lea ['eax,', '[ebp+var_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['_wcstol']
add ['esp,', '0Ch']
sub ['esi,', 'eax']
mov ['[ebp+var_4],', 'esi']
jnz ['short', 'loc_BEAC']
mov ['edx,', '[ebp+var_C]']
sub ['edx,', '[ebp+arg_4]']
sar ['edx,', '1']
mov ['eax,', '[ebp+EndPtr]']
sub ['eax,', '[ebp+Str]']
sar ['eax,', '1']
sub ['edx,', 'eax']
mov ['[ebp+var_4],', 'edx']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_BEB7']
jmp ['loc_BF78']
mov ['ecx,', '[ebp+EndPtr]']
mov ['[ebp+Str],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['[ebp+arg_4],', 'edx']
jmp ['loc_BF73']
mov ['eax,', '[ebp+Str]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
push ['ecx']
call ['_iswascii']
add ['esp,', '4']
test ['eax,', 'eax']
jz ['short', 'loc_BF05']
mov ['edx,', '[ebp+Str]']
movzx ['eax,', 'word', 'ptr', '[edx]']
push ['eax']
call ['_iswupper']
add ['esp,', '4']
test ['eax,', 'eax']
jz ['short', 'loc_BF05']
mov ['ecx,', '[ebp+Str]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
push ['edx']
call ['_towlower']
add ['esp,', '4']
movzx ['eax,', 'ax']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_BF0E']
mov ['ecx,', '[ebp+Str]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
mov ['[ebp+var_10],', 'edx']
mov ['eax,', '[ebp+arg_4]']
movzx ['ecx,', 'word', 'ptr', '[eax]']
push ['ecx']
call ['_iswascii']
add ['esp,', '4']
test ['eax,', 'eax']
jz ['short', 'loc_BF4B']
mov ['edx,', '[ebp+arg_4]']
movzx ['eax,', 'word', 'ptr', '[edx]']
push ['eax']
call ['_iswupper']
add ['esp,', '4']
test ['eax,', 'eax']
jz ['short', 'loc_BF4B']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
push ['edx']
call ['_towlower']
add ['esp,', '4']
movzx ['eax,', 'ax']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_BF54']
mov ['ecx,', '[ebp+arg_4]']
movzx ['edx,', 'word', 'ptr', '[ecx]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_10]']
sub ['eax,', '[ebp+var_14]']
mov ['[ebp+var_4],', 'eax']
jz ['short', 'loc_BF61']
jmp ['short', 'loc_BF78']
mov ['ecx,', '[ebp+Str]']
add ['ecx,', '2']
mov ['[ebp+Str],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
add ['edx,', '2']
mov ['[ebp+arg_4],', 'edx']
jmp ['loc_BE0A']
cmp ['[ebp+var_4],', '0']
jge ['short', 'loc_BF87']
mov ['[ebp+var_1C],', '0FFFFFFFFh']
jmp ['short', 'loc_BFA3']
cmp ['[ebp+var_4],', '0']
jle ['short', 'loc_BF96']
mov ['[ebp+var_18],', '1']
jmp ['short', 'loc_BF9D']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?push_back@?$vector@_WV?$allocator@_W@std@@@std@@QAEX$$QA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$addressof@_W@std@@YAPA_WAA_W@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Inside@?$vector@_WV?$allocator@_W@std@@@std@@IBE_NPB_W@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['loc_C05B']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$addressof@_W@std@@YAPA_WAA_W@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_8]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[edx+8]']
cmp ['ecx,', '[eax+0Ch]']
jnz ['short', 'loc_C004']
push ['1']
mov ['ecx,', '[ebp+var_8]']
call ['?_Reserve@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_C]']
lea ['eax,', '[ecx+edx*2]']
push ['eax']
call ['??$forward@_W@std@@YA$$QA_WAA_W@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
push ['edx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@_W_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_W$$QA_W@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
add ['edx,', '2']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+8],', 'edx']
jmp ['short', 'loc_C0BF']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ecx+8]']
cmp ['eax,', '[edx+0Ch]']
jnz ['short', 'loc_C073']
push ['1']
mov ['ecx,', '[ebp+var_8]']
call ['?_Reserve@?$vector@_WV?$allocator@_W@std@@@std@@IAEXI@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_range@?$vector@_WV?$allocator@_W@std@@@std@@IBEXPA_W0@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$forward@_W@std@@YA$$QA_WAA_W@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+8]']
push ['ecx']
lea ['edx,', '[ebp+var_2]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@_W_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_W$$QA_W@Z']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '2']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+8],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?reSizeTo@Window@@UAEXAAUtagRECT@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__MoveWindow@24']
push ['0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+18h]']
call ['eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0Ch]']
sub ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
sub ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__MoveWindow@24']
push ['0']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+18h]']
call ['eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?redraw@Window@@UBEX_N@Z proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['1']
push ['0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__InvalidateRect@12']
movzx ['edx,', '[ebp+arg_0]']
test ['edx,', 'edx']
jz ['short', 'loc_C191']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__UpdateWindow@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '8']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_18],', 'ecx']
mov ['ecx,', '[ebp+var_18]']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
cmp ['[ebp+arg_0],', 'eax']
jnb ['short', 'loc_C1ED']
mov ['ecx,', '[ebp+var_18]']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
sub ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
call ['?_Pop_back_n@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z']
jmp ['loc_C28D']
mov ['ecx,', '[ebp+var_18]']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['loc_C28D']
lea ['eax,', '[ebp+var_11]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@HV?$allocator@H@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@H@std@@@2@XZ']
mov ['ecx,', '[ebp+var_18]']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+arg_0]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['ecx,', '[ebp+var_18]']
call ['?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z']
mov ['[ebp+var_4],', '0']
lea ['edx,', '[ebp+var_11]']
push ['edx']
mov ['ecx,', '[ebp+var_18]']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+arg_0]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+8]']
push ['eax']
call ['??$_Uninitialized_default_fill_n@PAHIU?$_Wrap_alloc@V?$allocator@H@std@@@std@@@std@@YAXPAHIAAU?$_Wrap_alloc@V?$allocator@H@std@@@0@@Z']
add ['esp,', '0Ch']
jmp ['short', 'loc_C261']
endp
__catch$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z$0 proc near
mov ['ecx,', '[ebp-18h]']
call ['?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ']
push ['0']
push ['0']
call ['__CxxThrowException@8']
endp
$LN10           proc near               
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
endp
__ehhandler$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z']
jmp ['___CxxFrameHandler3']
endp
?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '0Ch']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
cmp ['[ebp+arg_0],', 'eax']
jnb ['short', 'loc_C315']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
sub ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Pop_back_n@?$vector@HV?$allocator@H@std@@@std@@QAEXI@Z']
jmp ['loc_C415']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['loc_C415']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$addressof@$$CBH@std@@YAPBHABH@Z']
add ['esp,', '4']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Inside@?$vector@HV?$allocator@H@std@@@std@@IBE_NPBH@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_C392']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['??$addressof@H@std@@YAPAHAAH@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_18]']
sub ['edx,', 'eax']
sar ['edx,', '2']
mov ['[ebp+var_1C],', 'edx']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+arg_0]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
push ['eax']
call ['??$addressof@H@std@@YAPAHAAH@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_1C]']
lea ['edx,', '[eax+ecx*4]']
mov ['[ebp+var_18],', 'edx']
jmp ['short', 'loc_C3A8']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+arg_0]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['?_Reserve@?$vector@HV?$allocator@H@std@@@std@@IAEXI@Z']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_18]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+arg_0]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?_Ufill@?$vector@HV?$allocator@H@std@@@std@@IAEPAHPAHIPBH@Z']
jmp ['short', 'loc_C3E9']
endp
__catch$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z$0 proc near
mov ['ecx,', '[ebp-14h]']
call ['?_Tidy@?$vector@HV?$allocator@H@std@@@std@@IAEXXZ']
push ['0']
push ['0']
call ['__CxxThrowException@8']
endp
$LN12           proc near               
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
endp
__ehhandler$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?resize@?$vector@HV?$allocator@H@std@@@std@@QAEXIABH@Z']
jmp ['___CxxFrameHandler3']
endp
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+14h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+14h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?size@?$vector@HV?$allocator@H@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?size@?$vector@_WV?$allocator@_W@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?system_category@std@@YAABVerror_category@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
pop ['ebp']
retn
endp
?value@error_code@std@@QBEHXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?value@error_condition@std@@QBEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_hypot          proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
movsd ['xmm0,', '[ebp+arg_8]']
movsd ['[esp+8+var_8],', 'xmm0']
sub ['esp,', '8']
movsd ['xmm0,', '[ebp+arg_0]']
movsd ['[esp+10h+var_10],', 'xmm0']
call ['__hypot']
add ['esp,', '10h']
pop ['ebp']
retn
endp
_wmemcpy        proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
shl ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
_wmemmove       proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
shl ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memmove']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
