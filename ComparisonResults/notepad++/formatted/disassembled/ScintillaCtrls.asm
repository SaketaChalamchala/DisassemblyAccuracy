?createSintilla@ScintillaCtrls@@QAEPAUHWND__@@PAU2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?createSintilla@ScintillaCtrls@@QAEPAUHWND__@@PAU2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+14h],', 'ecx']
push ['5Ch']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_DC8']
mov ['ecx,', '[ebp+var_18]']
call ['??0ScintillaEditView@@QAE@XZ']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_DCF']
mov ['[ebp+var_1C],', '0']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_20]']
mov ['[ebp+var_14],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+14h]']
push ['edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+10h]']
push ['ecx']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[eax+4]']
call ['edx']
lea ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?push_back@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEXABQAVScintillaEditView@@@Z']
mov ['ecx,', '[ebp+var_14]']
call ['?getHSelf@Window@@QBEPAUHWND__@@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?getScintillaEditViewFrom@ScintillaCtrls@@QAEPAVScintillaEditView@@PAUHWND__@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?getIndexFrom@ScintillaCtrls@@AAEHPAUHWND__@@@Z']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0FFFFFFFFh']
jz ['short', 'loc_E5B']
mov ['ecx,', '[ebp+var_8]']
call ['?size@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ']
cmp ['[ebp+var_4],', 'eax']
jb ['short', 'loc_E5F']
xor ['eax,', 'eax']
jmp ['short', 'loc_E6D']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['??A?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEAAPAVScintillaEditView@@I@Z']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?destroyScintilla@ScintillaCtrls@@QAE_NPAUHWND__@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?destroyScintilla@ScintillaCtrls@@QAE_NPAUHWND__@@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '58h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?getIndexFrom@ScintillaCtrls@@AAEHPAUHWND__@@@Z']
mov ['[ebp+Dst],', 'eax']
cmp ['[ebp+Dst],', '0FFFFFFFFh']
jnz ['short', 'loc_EC4']
xor ['al,', 'al']
jmp ['loc_FA0']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['??A?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEAAPAVScintillaEditView@@I@Z']
mov ['edx,', '[eax]']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_20]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_20]']
mov ['eax,', '[edx+8]']
call ['eax']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['??A?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEAAPAVScintillaEditView@@I@Z']
mov ['edx,', '[eax]']
mov ['[ebp+var_24],', 'edx']
mov ['eax,', '[ebp+var_24]']
mov ['[ebp+var_1C],', 'eax']
cmp ['[ebp+var_1C],', '0']
jz ['short', 'loc_F12']
push ['1']
mov ['ecx,', '[ebp+var_1C]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_1C]']
mov ['eax,', '[edx]']
call ['eax']
mov ['[ebp+var_28],', 'eax']
jmp ['short', 'loc_F19']
mov ['[ebp+var_28],', '0']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
lea ['edx,', '[ebp+var_4C]']
push ['edx']
lea ['eax,', '[ebp+var_58]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?begin@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@XZ']
mov ['[ebp+var_2C],', 'eax']
mov ['ecx,', '[ebp+var_2C]']
mov ['[ebp+var_30],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_30]']
call ['??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AV01@H@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_58]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_38],', 'esp']
lea ['edx,', '[ebp+var_4C]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_34],', 'eax']
mov ['eax,', '[ebp+var_34]']
mov ['[ebp+var_3C],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
lea ['ecx,', '[ebp+var_64]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
call ['?erase@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z']
mov ['[ebp+var_40],', 'eax']
lea ['ecx,', '[ebp+var_64]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_D],', '1']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_4C]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
mov ['al,', '[ebp+var_D]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?destroy@ScintillaCtrls@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '1Ch']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_8]']
call ['?size@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ']
mov ['[ebp+var_14],', 'eax']
jmp ['short', 'loc_FE6']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+var_14]']
jnb ['short', 'loc_1045']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['??A?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEAAPAVScintillaEditView@@I@Z']
mov ['eax,', '[eax]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
call ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['??A?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEAAPAVScintillaEditView@@I@Z']
mov ['edx,', '[eax]']
mov ['[ebp+var_18],', 'edx']
mov ['eax,', '[ebp+var_18]']
mov ['[ebp+var_C],', 'eax']
cmp ['[ebp+var_C],', '0']
jz ['short', 'loc_103C']
push ['1']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[edx]']
call ['eax']
mov ['[ebp+var_1C],', 'eax']
jmp ['short', 'loc_1043']
mov ['[ebp+var_1C],', '0']
jmp ['short', 'loc_FDD']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?getIndexFrom@ScintillaCtrls@@AAEHPAUHWND__@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_8]']
call ['?size@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_1076']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '1']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+var_C]']
jnb ['short', 'loc_109D']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['??A?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEAAPAVScintillaEditView@@I@Z']
mov ['ecx,', '[eax]']
call ['?getHSelf@Window@@QBEPAUHWND__@@XZ']
cmp ['eax,', '[ebp+arg_0]']
jnz ['short', 'loc_109B']
mov ['eax,', '[ebp+var_4]']
jmp ['short', 'loc_10A0']
jmp ['short', 'loc_106D']
or ['eax,', '0FFFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?createSintilla@ScintillaCtrls@@QAEPAUHWND__@@PAU2@@Z$0 proc near
mov ['eax,', '[ebp-18h]']
push ['eax']
call ['??3@YAXPAX@Z']
pop ['ecx']
retn
endp
__ehhandler$?createSintilla@ScintillaCtrls@@QAEPAUHWND__@@PAU2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?createSintilla@ScintillaCtrls@@QAEPAUHWND__@@PAU2@@Z']
jmp ['___CxxFrameHandler3']
endp
__unwindfunclet$?destroyScintilla@ScintillaCtrls@@QAE_NPAUHWND__@@@Z$0 proc near
lea ['ecx,', '[ebp-58h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?destroyScintilla@ScintillaCtrls@@QAE_NPAUHWND__@@@Z$1 proc near
lea ['ecx,', '[ebp-4Ch]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?destroyScintilla@ScintillaCtrls@@QAE_NPAUHWND__@@@Z$2 proc near
mov ['ecx,', '[ebp-38h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?destroyScintilla@ScintillaCtrls@@QAE_NPAUHWND__@@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-5Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?destroyScintilla@ScintillaCtrls@@QAE_NPAUHWND__@@@Z']
jmp ['___CxxFrameHandler3']
endp
??$?0U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$?0V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??$?0U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$_Allocate@D@std@@YAPADIPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_1143']
jmp ['short', 'loc_1163']
cmp ['[ebp+arg_0],', '0FFFFFFFFh']
ja ['short', 'loc_115E']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_1163']
call ['?_Xbad_alloc@std@@YAXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Allocate@PAVScintillaEditView@@@std@@YAPAPAVScintillaEditView@@IPAPAV1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_117F']
jmp ['short', 'loc_11A5']
cmp ['[ebp+arg_0],', '3FFFFFFFh']
ja ['short', 'loc_11A0']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '2']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_11A5']
call ['?_Xbad_alloc@std@@YAXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Allocate@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@IPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_11BF']
jmp ['short', 'loc_11E5']
cmp ['[ebp+arg_0],', '0FFFFFFFh']
ja ['short', 'loc_11E0']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '4']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_11E5']
call ['?_Xbad_alloc@std@@YAXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_11FF']
jmp ['short', 'loc_1225']
cmp ['[ebp+arg_0],', '1FFFFFFFh']
ja ['short', 'loc_1220']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '3']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_1225']
call ['?_Xbad_alloc@std@@YAXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Allocate@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_123F']
jmp ['short', 'loc_1265']
cmp ['[ebp+arg_0],', '3FFFFFFFh']
ja ['short', 'loc_1260']
mov ['eax,', '[ebp+arg_0]']
shl ['eax,', '2']
push ['eax']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jnz ['short', 'loc_1265']
call ['?_Xbad_alloc@std@@YAXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Copy_backward@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Copy_backward@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Copy_backward@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_12C9']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '4']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_8]']
sub ['edx,', '4']
mov ['[ebp+arg_8],', 'edx']
mov ['eax,', '[ebp+arg_4]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx],', 'ecx']
jmp ['short', 'loc_12A3']
mov ['eax,', '[ebp+arg_8]']
pop ['ebp']
retn
endp
??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_12EE']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$_Debug_pointer@PAVScintillaEditView@@@std@@YAXPAPAVScintillaEditView@@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_130E']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$_Debug_pointer@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_132E']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['offset', '??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$_Debug_range2@PAPAVScintillaEditView@@@std@@YAXPAPAVScintillaEditView@@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_1380']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Debug_pointer@PAVScintillaEditView@@@std@@YAXPAPAVScintillaEditView@@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Debug_pointer@PAVScintillaEditView@@@std@@YAXPAPAVScintillaEditView@@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_1380']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$_Debug_range2@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_13D4']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Debug_pointer@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Debug_pointer@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+arg_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_13D4']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
push ['offset', '??_C@_1CO@DGLIKNHI@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$_Debug_range@PAPAVScintillaEditView@@@std@@YAXPAPAVScintillaEditView@@0PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
call ['??$_Iter_cat@PAPAVScintillaEditView@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVScintillaEditView@@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range2@PAPAVScintillaEditView@@@std@@YAXPAPAVScintillaEditView@@0PB_WIUrandom_access_iterator_tag@0@@Z']
add ['esp,', '14h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Debug_range@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0PB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
call ['??$_Iter_cat@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@@Z']
add ['esp,', '8']
mov ['dl,', '[eax]']
movzx ['eax,', 'dl']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range2@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0PB_WIUrandom_access_iterator_tag@0@@Z']
add ['esp,', '14h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@0@0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_148A']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_14A0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+arg_8]']
call ['??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z']
jmp ['short', 'loc_1481']
pop ['ebp']
retn
endp
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@U_Nonscalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_14E6']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_14FC']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+arg_8]']
call ['??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z']
jmp ['short', 'loc_14DD']
pop ['ebp']
retn
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@YAXPAPAVScintillaEditView@@0AAU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@PAVScintillaEditView@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVScintillaEditView@@0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@YAXPAPAVScintillaEditView@@0AAU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@YAXPAPAVScintillaEditView@@0AAU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@0@U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
??$_Fill@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
jmp ['short', 'loc_154A']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
mov ['[ebp+arg_0],', 'eax']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_155E']
mov ['edx,', '[ebp+arg_8]']
mov ['eax,', '[edx]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ecx],', 'eax']
jmp ['short', 'loc_1541']
pop ['ebp']
retn
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@U_Container_proxy@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
pop ['ebp']
retn
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@U_Container_proxy@2@U32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
pop ['ebp']
retn
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z']
pop ['ebp']
retn
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_4]']
call ['?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBEIXZ']
pop ['ebp']
retn
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
call ['??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z']
pop ['ebp']
retn
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV21@@Z']
pop ['ebp']
retn
endp
??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
call ['??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['ecx,', '[ebp+arg_4]']
call ['??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z']
pop ['ebp']
retn
endp
??$_Iter_cat@PAPAVScintillaEditView@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAPAVScintillaEditView@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_1]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Iter_cat@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA?AUrandom_access_iterator_tag@0@ABQAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['cl,', '[ebp+var_1]']
mov ['[eax],', 'cl']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Move@PAPAVScintillaEditView@@PAPAV1@@std@@YAPAPAVScintillaEditView@@PAPAV1@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Ptr_cat@PAVScintillaEditView@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVScintillaEditView@@0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
call ['??$_Move@PAPAVScintillaEditView@@PAPAV1@@std@@YAPAPAVScintillaEditView@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Move@PAPAVScintillaEditView@@PAPAV1@@std@@YAPAPAVScintillaEditView@@PAPAV1@00U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+Src]']
sar ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memmove']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+Dst]']
lea ['eax,', '[edx+ecx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Ptr_cat@PAVScintillaEditView@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVScintillaEditView@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['al,', '[ebp+var_1]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Ptr_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@0@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['al,', '[ebp+var_1]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Ptr_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['al,', '[ebp+var_1]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Rechecked@PAPAVScintillaEditView@@PAPAV1@@std@@YAAAPAPAVScintillaEditView@@AAPAPAV1@PAPAV1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$_Rechecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAPAV10@PAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$_Umove@PAPAVScintillaEditView@@@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IAEPAPAVScintillaEditView@@PAPAV2@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_move@PAPAVScintillaEditView@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@YAPAPAVScintillaEditView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@0@@Z']
add ['esp,', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
??$_Umove@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PAV21@00@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std']
add ['esp,', '10h']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
??$_Unchecked@PAPAVScintillaEditView@@@std@@YAPAPAVScintillaEditView@@PAPAV1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$_Uninit_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_17A3']
mov ['ecx,', '[ebp+arg_4]']
sub ['ecx,', '1']
mov ['[ebp+arg_4],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_17BB']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV21@@Z']
jmp ['short', 'loc_1791']
jmp ['short', 'loc_17ED']
__catch$??$_Uninit_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_i proc near
jmp ['short', 'loc_17C8']
mov ['edx,', '[ebp-14h]']
add ['edx,', '4']
mov ['[ebp-14h],', 'edx']
mov ['eax,', '[ebp-14h]']
cmp ['eax,', '[ebp+8]']
jz ['short', 'loc_17DE']
mov ['ecx,', '[ebp-14h]']
push ['ecx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z']
jmp ['short', 'loc_17BF']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_17FD']
$LN13           proc near               
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
endp
__ehhandler$??$_Uninit_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_p proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_data,', 'fs:nothing,', 'gs:nothing']
public ['??$_Uninit_move@PAPAVScintillaEditView@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@YAPAPAVScintillaEditView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@0@@Z']
??$_Uninit_move@PAPAVScintillaEditView@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@YAPAPAVScintillaEditView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Ptr_cat@PAVScintillaEditView@@PAV1@@std@@YA?AU_Scalar_ptr_iterator_tag@0@PAPAVScintillaEditView@@0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Val_type@PAPAVScintillaEditView@@@std@@YAPAPAVScintillaEditView@@PAPAV1@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Uninit_move@PAVScintillaEditView@@PAV1@PAV1@@std@@YAPAPAVScintillaEditView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z']
add ['esp,', '18h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0']
add ['esp,', '18h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_data,', 'fs:nothing,', 'gs:nothing']
public ['??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonsc']
??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_iterator_t proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
push ['1B6h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0PB_WI@Z']
add ['esp,', '10h']
push ['1B7h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
call ['??$_Debug_pointer@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_8]']
mov ['[ebp+var_14],', 'eax']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_1937']
mov ['ecx,', '[ebp+arg_8]']
add ['ecx,', '4']
mov ['[ebp+arg_8],', 'ecx']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '4']
mov ['[ebp+arg_0],', 'edx']
mov ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
jz ['short', 'loc_1951']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['ecx,', '[ebp+arg_C]']
call ['??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z']
jmp ['short', 'loc_1925']
jmp ['short', 'loc_1983']
__catch$??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_ptr_it proc near
jmp ['short', 'loc_195E']
mov ['eax,', '[ebp-14h]']
add ['eax,', '4']
mov ['[ebp-14h],', 'eax']
mov ['ecx,', '[ebp-14h]']
cmp ['ecx,', '[ebp+10h]']
jz ['short', 'loc_1974']
mov ['edx,', '[ebp-14h]']
push ['edx']
mov ['ecx,', '[ebp+14h]']
call ['??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z']
jmp ['short', 'loc_1955']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN13_0']
retn
mov ['[ebp+var_4],', '0FFFFFFFFh']
jmp ['short', 'loc_1993']
$LN13_0         proc near               
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
endp
__ehhandler$??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@0U_Nonscalar_pt proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@']
jmp ['___CxxFrameHandler3']
align ['4']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_data,', 'fs:nothing,', 'gs:nothing']
public ['??$_Uninit_move@PAVScintillaEditView@@PAV1@PAV1@@std@@YAPAPAVScintillaEditView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z']
??$_Uninit_move@PAVScintillaEditView@@PAV1@PAV1@@std@@YAPAPAVScintillaEditView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@0@0U_Scalar_ptr_iterator_tag@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['1D6h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
call ['??$_Debug_range@PAPAVScintillaEditView@@@std@@YAXPAPAVScintillaEditView@@0PB_WI@Z']
add ['esp,', '10h']
push ['1D7h']
push ['offset', '??_C@_1IO@LKIDJAMC@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['??$_Debug_pointer@PAVScintillaEditView@@@std@@YAXPAPAVScintillaEditView@@PB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+arg_4]']
sub ['eax,', '[ebp+Src]']
sar ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
shl ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memmove']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_4]']
lea ['eax,', '[eax+ecx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??$_Uninitialized_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Ptr_cat@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YA?AU_Nonscalar_ptr_iterator_tag@0@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0@Z']
add ['esp,', '8']
mov ['[ebp+var_1],', 'al']
movzx ['edx,', '[ebp+var_1]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Val_type@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninit_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@']
add ['esp,', '18h']
mov ['esp,', 'ebp']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_data,', 'fs:nothing,', 'gs:nothing']
public ['??$_Uninitialized_move@PAPAVScintillaEditView@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@YAPAPAVScintillaEditView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@0@@Z']
??$_Uninitialized_move@PAPAVScintillaEditView@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@YAPAPAVScintillaEditView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Unchecked@PAPAVScintillaEditView@@@std@@YAPAPAVScintillaEditView@@PAPAV1@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAPAVScintillaEditView@@@std@@YAPAPAVScintillaEditView@@PAPAV1@@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAPAVScintillaEditView@@@std@@YAPAPAVScintillaEditView@@PAPAV1@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Uninit_move@PAPAVScintillaEditView@@PAPAV1@U?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@YAPAPAVScintillaEditView@@PAPAV1@00AAU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@0@@Z']
add ['esp,', '10h']
push ['eax']
lea ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Rechecked@PAPAVScintillaEditView@@PAPAV1@@std@@YAAAPAPAVScintillaEditView@@AAPAPAV1@PAPAV1@@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
pop ['ebp']
retn
endp
??$_Uninitialized_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_C]']
push ['eax']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Uninit_move@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@00AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@']
add ['esp,', '10h']
push ['eax']
lea ['ecx,', '[ebp+arg_8]']
push ['ecx']
call ['??$_Rechecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@PAV12@@std@@YAAAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAPAV10@PAV10@@Z']
add ['esp,', '8']
mov ['eax,', '[eax]']
pop ['ebp']
retn
align ['10h']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_data,', 'fs:nothing,', 'gs:nothing']
public ['??$_Val_type@PAPAVScintillaEditView@@@std@@YAPAPAVScintillaEditView@@PAPAV1@@Z']
??$_Val_type@PAPAVScintillaEditView@@@std@@YAPAPAVScintillaEditView@@PAPAV1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
endp
??$_Val_type@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
xor ['eax,', 'eax']
pop ['ebp']
retn
endp
??$addressof@$$CBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$addressof@D@std@@YAPADAAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$addressof@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@0@AAPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$addressof@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$addressof@QAVScintillaEditView@@@std@@YAPBQAVScintillaEditView@@ABQAV1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$addressof@U?$pair@$$CBHUStyle@@@std@@@std@@YAPAU?$pair@$$CBHUStyle@@@0@AAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$addressof@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@YAPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@0@AAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$addressof@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$addressof@_W@std@@YAPA_WAA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_1BE5']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_1BEC']
mov ['[ebp+var_14],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-10h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
jmp ['___CxxFrameHandler3']
endp
??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAPAD@std@@YAAAPADAAPAD@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z']
pop ['ebp']
retn
endp
??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@1@PAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU31@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_1CE5']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_1CEC']
mov ['[ebp+var_14],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-10h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z']
jmp ['___CxxFrameHandler3']
endp
??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@1@PAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z']
pop ['ebp']
retn
endp
??$construct@PAVScintillaEditView@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEXPAPAVScintillaEditView@@AAPAV2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@AAPAVScintillaEditView@@@std@@YAAAPAVScintillaEditView@@AAPAV1@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PAVScintillaEditView@@AAPAV1@@?$allocator_traits@V?$allocator@PAVScintillaEditView@@@std@@@std@@SAXAAV?$allocator@PAVScintillaEditView@@@1@PAPAVScintillaEditView@@AAPAV3@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$construct@PAVScintillaEditView@@AAPAV1@@?$allocator@PAVScintillaEditView@@@std@@QAEXPAPAVScintillaEditView@@AAPAV2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@PAVScintillaEditView@@AAPAV1@@?$allocator@PAVScintillaEditView@@@std@@QAEXPAPAVScintillaEditView@@AAPAV2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_1DE5']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@AAPAVScintillaEditView@@@std@@YAAAPAVScintillaEditView@@AAPAV1@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_1DEC']
mov ['[ebp+var_14],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??$construct@PAVScintillaEditView@@AAPAV1@@?$allocator@PAVScintillaEditView@@@std@@QAEXPAPAVScintillaEditView@@AAPAV2@@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-10h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@PAVScintillaEditView@@AAPAV1@@?$allocator@PAVScintillaEditView@@@std@@QAEXPAPAVScintillaEditView@@AAPAV2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@PAVScintillaEditView@@AAPAV1@@?$allocator@PAVScintillaEditView@@@std@@QAEXPAPAVScintillaEditView@@AAPAV2@@Z']
jmp ['___CxxFrameHandler3']
endp
??$construct@PAVScintillaEditView@@AAPAV1@@?$allocator_traits@V?$allocator@PAVScintillaEditView@@@std@@@std@@SAXAAV?$allocator@PAVScintillaEditView@@@1@PAPAVScintillaEditView@@AAPAV3@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@AAPAVScintillaEditView@@@std@@YAAAPAVScintillaEditView@@AAPAV1@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@PAVScintillaEditView@@AAPAV1@@?$allocator@PAVScintillaEditView@@@std@@QAEXPAPAVScintillaEditView@@AAPAV2@@Z']
pop ['ebp']
retn
endp
??$construct@PAVScintillaEditView@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEXPAPAVScintillaEditView@@ABQAV2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@ABQAVScintillaEditView@@@std@@YAABQAVScintillaEditView@@ABQAV1@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@PAVScintillaEditView@@ABQAV1@@?$allocator_traits@V?$allocator@PAVScintillaEditView@@@std@@@std@@SAXAAV?$allocator@PAVScintillaEditView@@@1@PAPAVScintillaEditView@@ABQAV3@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$construct@PAVScintillaEditView@@ABQAV1@@?$allocator_traits@V?$allocator@PAVScintillaEditView@@@std@@@std@@SAXAAV?$allocator@PAVScintillaEditView@@@1@PAPAVScintillaEditView@@ABQAV3@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@ABQAVScintillaEditView@@@std@@YAABQAVScintillaEditView@@ABQAV1@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?construct@?$allocator@PAVScintillaEditView@@@std@@QAEXPAPAVScintillaEditView@@ABQAV3@@Z']
pop ['ebp']
retn
endp
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['8']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_1F63']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
mov ['eax,', '[eax+4]']
mov ['ecx,', '[ebp+var_10]']
mov ['[ecx],', 'edx']
mov ['[ecx+4],', 'eax']
mov ['edx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'edx']
jmp ['short', 'loc_1F6A']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-10h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
jmp ['___CxxFrameHandler3']
endp
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@U_Container_proxy@2@U32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z']
add ['esp,', '10h']
pop ['ebp']
retn
endp
??$construct@U_Container_proxy@std@@U12@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@$$QAU31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
pop ['ebp']
retn
endp
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV31@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV31@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@ABV32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV31@@Z']
add ['esp,', '10h']
pop ['ebp']
retn
endp
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@ABV12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@ABV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?construct@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@ABV32@@Z']
pop ['ebp']
retn
endp
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV31@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
call ['??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV31@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_4],', '0']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_214D']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
call ['??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z']
add ['esp,', '4']
mov ['edx,', '[eax]']
mov ['eax,', '[ebp+var_10]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+var_14],', 'ecx']
jmp ['short', 'loc_2154']
mov ['[ebp+var_14],', '0']
mov ['edx,', '[ebp+var_14]']
mov ['[ebp+var_1C],', 'edx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z$0 proc near
mov ['eax,', '[ebp+8]']
push ['eax']
mov ['eax,', '[ebp-10h]']
push ['eax']
call ['??3@YAXPAX0@Z']
add ['esp,', '8']
retn
endp
__ehhandler$??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z']
jmp ['___CxxFrameHandler3']
endp
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@V32@@_Alloc_construct@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV31@@Z']
add ['esp,', '10h']
pop ['ebp']
retn
endp
??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV31@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
push ['eax']
call ['??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??$construct@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@$$QAV21@@Z']
pop ['ebp']
retn
endp
??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z']
pop ['ebp']
retn
endp
??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@1@PAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@1@PAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z']
pop ['ebp']
retn
endp
??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@1@PAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@1@PAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z']
pop ['ebp']
retn
endp
??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z']
pop ['ebp']
retn
endp
??$destroy@U?$pair@$$CBHUStyle@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHUStyle@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@U?$pair@$$CBHUStyle@@@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@1@PAU?$pair@$$CBHUStyle@@@1@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@U?$pair@$$CBHUStyle@@@std@@@?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHUStyle@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['ecx,', '[ebp+arg_0]']
call ['??_G?$pair@$$CBHUStyle@@@std@@QAEPAXI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@U?$pair@$$CBHUStyle@@@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@1@PAU?$pair@$$CBHUStyle@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@U?$pair@$$CBHUStyle@@@std@@@?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAEXPAU?$pair@$$CBHUStyle@@@1@@Z']
pop ['ebp']
retn
endp
??$destroy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@1@PAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$allocator_traits@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@SAXAAV?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@1@PAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@@Z']
pop ['ebp']
retn
endp
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@U_Container_proxy@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@U_Container_proxy@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@U_Container_proxy@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@1@PAU_Container_proxy@1@@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$destroy@U_Container_proxy@std@@@?$allocator_traits@V?$allocator@U_Container_proxy@std@@@std@@@std@@SAXAAV?$allocator@U_Container_proxy@std@@@1@PAU_Container_proxy@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
pop ['ebp']
retn
endp
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@1@@Z']
pop ['ebp']
retn
endp
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@_Alloc_destroy@std@@SAXHAAU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAXAAV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@1@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??$destroy@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@@Z']
pop ['ebp']
retn
endp
??$fill@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0A3Eh']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Debug_range@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0PB_WI@Z']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Unchecked@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@PAV10@@Z']
add ['esp,', '4']
push ['eax']
call ['??$_Fill@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@V12@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0ABV10@@Z']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$forward@AAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$forward@AAPAVScintillaEditView@@@std@@YAAAPAVScintillaEditView@@AAPAV1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$forward@ABQAVScintillaEditView@@@std@@YAABQAVScintillaEditView@@ABQAV1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$forward@ABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??$forward@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YA$$QAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@AAV10@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
??0?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??0?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@@Z']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
call ['??0?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
lea ['ecx,', '[ebp+var_D]']
call ['??$?0V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z']
lea ['eax,', '[ebp+var_D]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '0Ch']
call ['??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_14]']
movss ['xmm0,', 'ds:__real@3f800000']
movss ['dword', 'ptr', '[ecx+24h],', 'xmm0']
push ['8']
mov ['ecx,', '[ebp+var_14]']
call ['?_Init@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@IAEXI@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z$0 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ']
endp
__unwindfunclet$??0?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z$1 proc near
mov ['ecx,', '[ebp-14h]']
add ['ecx,', '0Ch']
jmp ['??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Hash_oper1@$0A@U?$hash@PAVBuffer@@@std@@@std@@QAE@U?$hash@PAVBuffer@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0?$_Hash_oper2@$0A@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@2@@std@@QAE@U?$hash@PAVBuffer@@@1@U?$equal_to@PAVBuffer@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Hash_oper1@$0A@U?$hash@PAVBuffer@@@std@@@std@@QAE@U?$hash@PAVBuffer@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Iterator_base12@std@@QAE@ABU01@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Iterator_base12@std@@QAE@ABU01@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Iterator_base12@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
push ['ecx']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_14],', 'ecx']
mov ['ecx,', '[ebp+var_14]']
call ['??0?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
call ['?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@XZ']
mov ['ecx,', '[ebp+var_14]']
mov ['[ecx+4],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_14]']
call ['?_Alloc_proxy@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEXXZ']
jmp ['short', 'loc_29AA']
endp
__catch$??0?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z$0 proc near
mov ['edx,', '[ebp-14h]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp-14h]']
call ['?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
endp
$LN8_1          proc near               
mov ['dword', 'ptr', '[ebp-4],', '0']
endp
__unwindfunclet$??0?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z$2 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Adopt@_Iterator_base0@std@@QAEXPBX@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base0@2@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??0?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Container_base12@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Container_base12@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+14h],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+18h],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@std@@QAE@U?$hash@PAVBuffer@@@1@U?$equal_to@PAVBuffer@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
movzx ['eax,', '[ebp+arg_4]']
push ['eax']
movzx ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Hash_oper2@$0A@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@2@@std@@QAE@U?$hash@PAVBuffer@@@1@U?$equal_to@PAVBuffer@@@1@@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??0?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@PAPAVScintillaEditView@@PBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@PAPAVScintillaEditView@@PBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@PAPAVScintillaEditView@@PBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@PAPAVScintillaEditView@@PBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@PAPAVScintillaEditView@@PBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@ABU01@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
mov ['[ecx+8],', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+8],', 'ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@PAPAVScintillaEditView@@PBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@PAPAVScintillaEditView@@PBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@PAPAVScintillaEditView@@PBU_Container_base12@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@PAPAVScintillaEditView@@PBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@PAPAVScintillaEditView@@PBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@PAPAVScintillaEditView@@PBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Container_base12@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax+4],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+8],', '0']
mov ['edx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@D@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@PAVScintillaEditView@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??0?$allocator@_W@std@@QAE@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$allocator@D@std@@QAE@XZ proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$allocator@PAVScintillaEditView@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$allocator@_W@std@@QAE@XZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
lea ['ecx,', '[ebp+var_D]']
call ['??0?$allocator@D@std@@QAE@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z']
mov ['[ebp+var_4],', '0']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_14]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['eax,', '[ebp+Str]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ']
endp
__ehhandler$??0?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
lea ['ecx,', '[ebp+var_D]']
call ['??0?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@QAE@XZ']
push ['eax']
movzx ['eax,', '[ebp+var_E]']
push ['eax']
movzx ['ecx,', '[ebp+var_F]']
push ['ecx']
lea ['ecx,', '[ebp+var_10]']
call ['??0?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@std@@QAE@U?$hash@PAVBuffer@@@1@U?$equal_to@PAVBuffer@@@1@@Z']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['??0?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@ABV?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@1@ABV?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['??0?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ']
endp
__ehhandler$??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@ABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z']
jmp ['___CxxFrameHandler3']
endp
??0ScintillaEditView@@QAE@XZ proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0ScintillaEditView@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0Window@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7ScintillaEditView@@6B@']
mov ['ecx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[ecx+10h],', '0']
mov ['edx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[edx+14h],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['byte', 'ptr', '[eax+2Ch],', '0']
mov ['ecx,', '[ebp+var_10]']
mov ['byte', 'ptr', '[ecx+2Dh],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '30h']
call ['??0?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['edx,', '[ebp+var_10]']
mov ['dword', 'ptr', '[edx+58h],', '0FFFFFFFFh']
mov ['eax,', 'dword', 'ptr', 'ds:?_refCount@ScintillaEditView@@1HA']
add ['eax,', '1']
mov ['dword', 'ptr', 'ds:?_refCount@ScintillaEditView@@1HA,', 'eax']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0ScintillaEditView@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1Window@@UAE@XZ']
endp
__unwindfunclet$??0ScintillaEditView@@QAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '30h']
jmp ['??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ']
endp
__ehhandler$??0ScintillaEditView@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0ScintillaEditView@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0Window@@QAE@XZ proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7Window@@6B@']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax+0Ch],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0_Container_base12@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0_Container_proxy@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0_Generic_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0_Generic_error_category@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0error_category@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_Generic_error_category@std@@6B@']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1error_category@std@@UAE@XZ']
endp
__ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0_Ignore@std@@QAE@XZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0_Iostream_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0_Iostream_error_category@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Generic_error_category@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_Iostream_error_category@std@@6B@']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Generic_error_category@std@@UAE@XZ']
endp
__ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0_Iterator_base12@std@@QAE@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??0_Iterator_base12@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['ecx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[ecx+4],', '0']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0_System_error_category@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??0_System_error_category@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['??0_Generic_error_category@std@@QAE@XZ']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7_System_error_category@std@@6B@']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Generic_error_category@std@@UAE@XZ']
endp
__ehhandler$??0_System_error_category@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??0_System_error_category@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??0error_category@std@@QAE@XZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7error_category@std@@6B@']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
??0id@locale@std@@QAE@I@Z proc near     
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ']
endp
__unwindfunclet$??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ']
endp
__ehhandler$??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '1']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '0Ch']
call ['??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ']
endp
__unwindfunclet$??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ$1 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '0Ch']
jmp ['??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ']
endp
__ehhandler$??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Iterator_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Iterator_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Iterator_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Iterator_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Iterator_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z']
mov ['ecx,', '[ebp+var_10]']
call ['?_Free_proxy@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z']
mov ['ecx,', '[ebp+var_10]']
call ['?_Free_proxy@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@$$CBHUStyle@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Ubidirectional_iterator_tag@std@@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@HPBU32@ABU32@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_List_unchecked_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@U_Iterator_base12@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Container_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Container_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Container_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Container_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@PAVScintillaEditView@@HPBQAV3@ABQAV3@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Iterator012@Urandom_access_iterator_tag@std@@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@HPBV32@ABV32@U_Iterator_base12@2@@std@@QAE@XZ']
endp
__ehhandler$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Container_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Container_base12@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Container_base12@std@@QAE@XZ']
endp
__ehhandler$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
push ['0']
push ['1']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
push ['0']
push ['1']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ']
endp
__ehhandler$??1?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ']
endp
__ehhandler$??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$pair@$$CBHUStyle@@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$pair@$$CBHUStyle@@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '4']
call ['??1Style@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$pair@$$CBHUStyle@@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
add ['ecx,', '4']
jmp ['??1Style@@QAE@XZ']
endp
__ehhandler$??1?$pair@$$CBHUStyle@@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$pair@$$CBHUStyle@@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Tidy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1ScintillaEditView@@UAE@XZ proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1ScintillaEditView@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '58h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7ScintillaEditView@@6B@']
mov ['[ebp+var_4],', '1']
mov ['ecx,', 'dword', 'ptr', 'ds:?_refCount@ScintillaEditView@@1HA']
sub ['ecx,', '1']
mov ['dword', 'ptr', 'ds:?_refCount@ScintillaEditView@@1HA,', 'ecx']
jnz ['loc_4F30']
cmp ['dword', 'ptr', 'ds:?_hLib@ScintillaEditView@@1PAUHINSTANCE__@@A,', '0']
jz ['loc_4F30']
mov ['edx,', 'dword', 'ptr', 'ds:?_hLib@ScintillaEditView@@1PAUHINSTANCE__@@A']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__FreeLibrary@4']
lea ['eax,', '[ebp+var_40]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '30h']
call ['?begin@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
jmp ['short', 'loc_4E10']
lea ['ecx,', '[ebp+var_40]']
call ['??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ']
lea ['ecx,', '[ebp+var_58]']
push ['ecx']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '30h']
call ['?end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_1C],', 'eax']
mov ['edx,', '[ebp+var_1C]']
mov ['[ebp+var_20],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '3']
mov ['eax,', '[ebp+var_20]']
push ['eax']
lea ['ecx,', '[ebp+var_40]']
call ['??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z']
mov ['[ebp+var_D],', 'al']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_58]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
movzx ['ecx,', '[ebp+var_D]']
test ['ecx,', 'ecx']
jz ['loc_4F24']
lea ['edx,', '[ebp+var_4C]']
push ['edx']
lea ['ecx,', '[ebp+var_40]']
call ['??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ']
mov ['ecx,', '[eax+4]']
call ['?begin@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
jmp ['short', 'loc_4E75']
lea ['ecx,', '[ebp+var_4C]']
call ['??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAEAAV01@XZ']
lea ['eax,', '[ebp+var_64]']
push ['eax']
lea ['ecx,', '[ebp+var_40]']
call ['??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ']
mov ['ecx,', '[eax+4]']
call ['?end@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_24],', 'eax']
mov ['ecx,', '[ebp+var_24]']
mov ['[ebp+var_28],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '5']
mov ['edx,', '[ebp+var_28]']
push ['edx']
lea ['ecx,', '[ebp+var_4C]']
call ['??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z']
mov ['[ebp+var_E],', 'al']
mov ['byte', 'ptr', '[ebp+var_4],', '4']
lea ['ecx,', '[ebp+var_64]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
movzx ['eax,', '[ebp+var_E]']
test ['eax,', 'eax']
jz ['short', 'loc_4EE3']
lea ['ecx,', '[ebp+var_4C]']
call ['??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHUStyle@@@1@XZ']
cmp ['dword', 'ptr', '[eax+18h],', '0']
jz ['short', 'loc_4EE1']
lea ['ecx,', '[ebp+var_4C]']
call ['??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHUStyle@@@1@XZ']
mov ['ecx,', '[eax+18h]']
mov ['[ebp+var_2C],', 'ecx']
mov ['edx,', '[ebp+var_2C]']
push ['edx']
call ['??_V@YAXPAX@Z']
add ['esp,', '4']
jmp ['short', 'loc_4E6D']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
lea ['ecx,', '[ebp+var_4C]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
lea ['ecx,', '[ebp+var_40]']
call ['??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ']
mov ['eax,', '[eax+4]']
mov ['[ebp+var_30],', 'eax']
mov ['ecx,', '[ebp+var_30]']
mov ['[ebp+var_18],', 'ecx']
cmp ['[ebp+var_18],', '0']
jz ['short', 'loc_4F18']
push ['1']
mov ['ecx,', '[ebp+var_18]']
call ['??_G?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAEPAXI@Z']
mov ['[ebp+var_34],', 'eax']
jmp ['short', 'loc_4F1F']
mov ['[ebp+var_34],', '0']
jmp ['loc_4E08']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_40]']
call ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
add ['ecx,', '30h']
call ['??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_14]']
call ['??1Window@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1ScintillaEditView@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-14h]']
jmp ['??1Window@@UAE@XZ']
endp
__unwindfunclet$??1ScintillaEditView@@UAE@XZ$1 proc near
mov ['ecx,', '[ebp-14h]']
add ['ecx,', '30h']
jmp ['??1?$unordered_map@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@U?$hash@PAVBuffer@@@3@U?$equal_to@PAVBuffer@@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@@std@@QAE@XZ']
endp
__unwindfunclet$??1ScintillaEditView@@UAE@XZ$2 proc near
lea ['ecx,', '[ebp-40h]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??1ScintillaEditView@@UAE@XZ$3 proc near
lea ['ecx,', '[ebp-58h]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??1ScintillaEditView@@UAE@XZ$4 proc near
lea ['ecx,', '[ebp-4Ch]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??1ScintillaEditView@@UAE@XZ$5 proc near
lea ['ecx,', '[ebp-64h]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$??1ScintillaEditView@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-5Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1ScintillaEditView@@UAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1Style@@QAE@XZ proc near              
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+28h],', '0']
jz ['short', 'loc_4FED']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+28h]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '0']
jz ['short', 'loc_4FE6']
push ['1']
mov ['ecx,', '[ebp+var_8]']
call ['??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_4FED']
mov ['[ebp+var_10],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1Window@@UAE@XZ proc near             
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7Window@@6B@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1_Container_base12@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??1_Generic_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1_Generic_error_category@std@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1error_category@std@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1error_category@std@@UAE@XZ']
endp
__ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1_Iostream_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1_Iostream_error_category@std@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Generic_error_category@std@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Generic_error_category@std@@UAE@XZ']
endp
__ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1_Iterator_base12@std@@QAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1_Iterator_base12@std@@QAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
push ['3']
lea ['ecx,', '[ebp+var_14]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_14]']
call ['??1_Lockit@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 proc near
lea ['ecx,', '[ebp-14h]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__ehhandler$??1_Iterator_base12@std@@QAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1_System_error_category@std@@UAE@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??1_System_error_category@std@@UAE@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
mov ['ecx,', '[ebp+var_10]']
call ['??1_Generic_error_category@std@@UAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
mov ['ecx,', '[ebp-10h]']
jmp ['??1_Generic_error_category@std@@UAE@XZ']
endp
__ehhandler$??1_System_error_category@std@@UAE@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-8]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??1_System_error_category@std@@UAE@XZ']
jmp ['___CxxFrameHandler3']
endp
??1error_category@std@@UAE@XZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', 'offset', '??_7error_category@std@@6B@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??2@YAPAXIPAX@Z proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_4]']
pop ['ebp']
retn
endp
??3@YAXPAX0@Z   proc near               
push ['ebp']
mov ['ebp,', 'esp']
pop ['ebp']
retn
endp
??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax]']
cmp ['edx,', '[ecx]']
jnz ['short', 'loc_524A']
jmp ['short', 'loc_528C']
mov ['eax,', '[ebp+arg_0]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_5264']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
jmp ['short', 'loc_528C']
push ['3']
lea ['ecx,', '[ebp+var_14]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_14]']
call ['??1_Lockit@std@@QAE@XZ']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 proc near
lea ['ecx,', '[ebp-14h]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z']
jmp ['___CxxFrameHandler3']
endp
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_52F0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', 'eax']
jz ['short', 'loc_5358']
push ['121h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
test ['eax,', 'eax']
jz ['short', 'loc_5314']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_533A']
push ['offset', '??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['122h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_533A']
int ['3']
push ['0']
push ['122h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1BBG@MEFLKALA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
push ['offset', '??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_536F']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_5376']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_53AC']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', 'eax']
jz ['short', 'loc_5414']
push ['121h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DI@MDELDGPI@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@']
test ['eax,', 'eax']
jz ['short', 'loc_53D0']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_53F6']
push ['offset', '??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['122h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_53F6']
int ['3']
push ['0']
push ['122h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1CEO@DJCOBHAB@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
push ['offset', '??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
cmp ['edx,', '[ecx+8]']
jnz ['short', 'loc_542B']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_5432']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??8error_category@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['eax,', '[ebp+arg_0]']
jnz ['short', 'loc_5456']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_545D']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??8error_condition@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
push ['esi']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?category@error_condition@std@@QBEABVerror_category@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?category@error_condition@std@@QBEABVerror_category@2@XZ']
mov ['ecx,', 'eax']
call ['??8error_category@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_54B0']
mov ['ecx,', '[ebp+var_4]']
call ['?value@error_condition@std@@QBEHXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+arg_0]']
call ['?value@error_condition@std@@QBEHXZ']
cmp ['esi,', 'eax']
jnz ['short', 'loc_54B0']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_54B7']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_54E9']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_54F0']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??9?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['??8?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBE_NABV01@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jnz ['short', 'loc_5521']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_5528']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??A?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEAAPAVScintillaEditView@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_55B0']
push ['4B1h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_556C']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5592']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['4B2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_5592']
int ['3']
push ['0']
push ['4B2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1MK@HJPEJHDM@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAS?$AAc?$AAi?$AAn?$AAt?$AAi?$AAl?$AAl?$AAa?$AAE?$AAd?$AAi?$AAt?$AAV@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBEPAU?$pair@$$CBHUStyle@@@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHUStyle@@@1@XZ']
push ['eax']
call ['?pointer_to@?$pointer_traits@PAU?$pair@$$CBHUStyle@@@std@@@std@@SAPAU?$pair@$$CBHUStyle@@@2@AAU32@@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??C?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ']
push ['eax']
call ['?pointer_to@?$pointer_traits@PAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@SAPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@AAU32@@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHUStyle@@@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_562B']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_562B']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
cmp ['edx,', '[eax+4]']
jnz ['short', 'loc_5693']
push ['0D2h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EC@HILJLMMC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl?$AAe@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_564F']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5675']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0D3h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_5675']
int ['3']
push ['0']
push ['0D3h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1BBE@PIHPBAPJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['?_Myval@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAU?$pair@$$CBHUStyle@@@2@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEABU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_56D7']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_56D7']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
cmp ['edx,', '[eax+4]']
jnz ['short', 'loc_573F']
push ['0D2h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EC@HILJLMMC@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb?$AAl?$AAe@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_56FB']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5721']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0D3h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_5721']
int ['3']
push ['0']
push ['0D3h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1CEM@BAKEJGH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['?_Myval@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBEAAU?$pair@$$CBHUStyle@@@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QBEABU?$pair@$$CBHUStyle@@@1@XZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??D?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEAAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??D?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QBEABU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@XZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAEAAV01@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_57AB']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_57AB']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
cmp ['edx,', '[eax+4]']
jnz ['short', 'loc_5813']
push ['0E6h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_57CF']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_57F5']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0E7h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_57F5']
int ['3']
push ['0']
push ['0E7h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1BBG@GEKGEJHF@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_5863']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+8],', '0']
jz ['short', 'loc_5863']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
cmp ['edx,', '[eax+4]']
jnz ['short', 'loc_58CB']
push ['0E6h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EA@DOGAGKDH@?$AAl?$AAi?$AAs?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAi?$AAn?$AAc?$AAr?$AAe?$AAm?$AAe?$AAn?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_5887']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_58AD']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0E7h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_58AD']
int ['3']
push ['0']
push ['0E7h']
push ['offset', '??_C@_1II@KCNBAEMF@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1CEO@JJNDPOME@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAL?$AAi?$AAs?$AAt?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['[edx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAEAAV01@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAEAAV01@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??E?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??E?$_List_const_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAEAAV01@XZ']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AV01@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['ecx,', '[ebp+var_20]']
call ['??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAEAAV01@H@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['edx,', '[ebp+var_10]']
or ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AV01@H@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AV01@H@Z$1 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN5_0']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AV01@H@Z']
jmp ['___CxxFrameHandler3']
endp
??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '14h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+var_14]']
push ['eax']
lea ['ecx,', '[ebp+var_20]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
lea ['ecx,', '[ebp+var_20]']
call ['??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['edx,', '[ebp+var_10]']
or ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+var_20]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$0 proc near
lea ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z$1 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN5_1']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-18h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$??H?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBE?AV01@H@Z']
jmp ['___CxxFrameHandler3']
endp
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_5ADA']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
lea ['esi,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', '[eax+4]']
jb ['short', 'loc_5ADA']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[edx+ecx*4]']
cmp ['[eax+8],', 'edx']
jnb ['short', 'loc_5B42']
push ['9Fh']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_5AFE']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5B24']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0A0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_5B24']
int ['3']
push ['0']
push ['0A0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1PC@LBPAGKOJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
test ['eax,', 'eax']
jz ['short', 'loc_5BA6']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
lea ['esi,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['esi,', '[eax+4]']
jb ['short', 'loc_5BA6']
mov ['ecx,', '[ebp+var_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+8]']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[edx+ecx*4]']
cmp ['[eax+8],', 'edx']
jnb ['short', 'loc_5C0E']
push ['9Fh']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EM@FKAOCOMF@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AA?$CL?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', 'offset', '??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@']
test ['eax,', 'eax']
jz ['short', 'loc_5BCA']
xor ['ecx,', 'ecx']
jnz ['short', 'loc_5BF0']
push ['offset', '??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@']
push ['offset', '??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@']
push ['0']
push ['0A0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['2']
call ['__CrtDbgReportW']
add ['esp,', '18h']
cmp ['eax,', '1']
jnz ['short', 'loc_5BF0']
int ['3']
push ['0']
push ['0A0h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DAI@BKGFFCGA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAV?$AAe?$AAc?$AAt?$AAo?$AAr?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@']
push ['offset', '??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@']
call ['__invalid_parameter']
add ['esp,', '14h']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
mov ['edx,', '[ebp+arg_0]']
lea ['eax,', '[ecx+edx*4]']
mov ['ecx,', '[ebp+var_4]']
mov ['[ecx+8],', 'eax']
mov ['eax,', '[ebp+var_4]']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAEAAV01@H@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??Y?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['??Y?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEAAV01@H@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_G?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5C87']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_G?$pair@$$CBHUStyle@@@std@@QAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$pair@$$CBHUStyle@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5CB3']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_G?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5CDF']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_GScintillaEditView@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1ScintillaEditView@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5D0B']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_GWindow@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1Window@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5D37']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_G_Generic_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Generic_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5D63']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_Iostream_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5D8F']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_G_System_error_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1_System_error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5DBB']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??_Gerror_category@std@@UAEPAXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['??1error_category@std@@UAE@XZ']
mov ['eax,', '[ebp+arg_0]']
and ['eax,', '1']
jz ['short', 'loc_5DE7']
mov ['ecx,', '[ebp+var_4]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
call ['??0_Generic_error_category@std@@QAE@XZ']
push ['offset', '??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
pop ['ebp']
retn
endp
??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
call ['??0_Iostream_error_category@std@@QAE@XZ']
push ['offset', '??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
pop ['ebp']
retn
endp
??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
call ['??0_System_error_category@std@@QAE@XZ']
push ['offset', '??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ']
call ['_atexit']
add ['esp,', '4']
pop ['ebp']
retn
endp
??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A']
call ['??0id@locale@std@@QAE@I@Z']
pop ['ebp']
retn
endp
??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A']
call ['??0id@locale@std@@QAE@I@Z']
pop ['ebp']
retn
endp
??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$numpunct@D@std@@2V0locale@2@A']
call ['??0id@locale@std@@QAE@I@Z']
pop ['ebp']
retn
endp
??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0']
mov ['ecx,', 'offset', '?id@?$numpunct@_W@std@@2V0locale@2@A']
call ['??0id@locale@std@@QAE@I@Z']
pop ['ebp']
retn
endp
??__E_Tuple_alloc@std@@YAXXZ proc near  
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
xor ['eax,', 'eax']
mov ['[ebp+var_1],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??__Eallocator_arg@std@@YAXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
xor ['eax,', 'eax']
mov ['[ebp+var_1],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??__Eignore@std@@YAXXZ proc near        
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '_ignore']
call ['??0_Ignore@std@@QAE@XZ']
pop ['ebp']
retn
endp
??__Epiecewise_construct@std@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
xor ['eax,', 'eax']
mov ['[ebp+var_1],', 'al']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
call ['??1_Generic_error_category@std@@UAE@XZ']
pop ['ebp']
retn
endp
??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A']
call ['??1_Iostream_error_category@std@@UAE@XZ']
pop ['ebp']
retn
endp
??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
call ['??1_System_error_category@std@@UAE@XZ']
pop ['ebp']
retn
endp
?_Adopt@_Iterator_base0@std@@QAEXPBX@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_5F6C']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1_Lockit@std@@QAE@XZ']
jmp ['short', 'loc_5FC3']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
mov ['[ebp+var_14],', 'ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
cmp ['eax,', '[ebp+var_14]']
jz ['short', 'loc_5FC3']
push ['3']
lea ['ecx,', '[ebp+var_1C]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_me@_Iterator_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ebp+var_14]']
mov ['eax,', '[edx+4]']
mov ['[ecx+4],', 'eax']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ebp+var_10]']
mov ['[ecx+4],', 'edx']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+var_14]']
mov ['[eax],', 'ecx']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_1C]']
call ['??1_Lockit@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 proc near
lea ['ecx,', '[ebp-1Ch]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z']
jmp ['___CxxFrameHandler3']
endp
?_Alloc_proxy@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_1]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_10]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_1]']
call ['?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_10]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Alloc_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAE@XZ']
push ['1']
lea ['ecx,', '[ebp+var_1]']
call ['?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['[ecx],', 'eax']
lea ['ecx,', '[ebp+var_10]']
call ['??0_Container_proxy@std@@QAE@XZ']
push ['eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['??$construct@U_Container_proxy@std@@U12@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_8]']
mov ['[edx],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Buyheadnode@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['0']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@0@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '0Ch']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_1C],', 'ecx']
push ['1']
lea ['eax,', '[ebp+var_11]']
push ['eax']
mov ['ecx,', '[ebp+var_1C]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z']
mov ['[ebp+var_18],', 'eax']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_6149']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+arg_0],', 'ecx']
mov ['edx,', '[ebp+var_18]']
mov ['[ebp+arg_4],', 'edx']
mov ['[ebp+var_4],', '0']
lea ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['edx,', '[ebp+var_12]']
push ['edx']
mov ['ecx,', '[ebp+var_1C]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['edx,', '[ebp+var_13]']
push ['edx']
mov ['ecx,', '[ebp+var_1C]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@AAPAU12@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@AAPAU21@@Z']
jmp ['short', 'loc_61D4']
endp
__catch$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@0@Z$0 proc near
push ['1']
mov ['eax,', '[ebp-18h]']
push ['eax']
lea ['ecx,', '[ebp-14h]']
push ['ecx']
mov ['ecx,', '[ebp-1Ch]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
endp
$LN8_2          proc near               
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
endp
__ehhandler$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-20h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Buynode0@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@0@Z']
jmp ['___CxxFrameHandler3']
endp
?_Clrcont@_Iterator_base12@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '10h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
or ['eax,', '0Fh']
mov ['[ebp+var_1C],', 'eax']
mov ['ecx,', '[ebp+var_18]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+var_1C]']
jnb ['short', 'loc_6279']
mov ['ecx,', '[ebp+arg_0]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_62CB']
mov ['edx,', '[ebp+var_18]']
mov ['ecx,', '[edx+18h]']
shr ['ecx,', '1']
mov ['eax,', '[ebp+var_1C]']
xor ['edx,', 'edx']
mov ['esi,', '3']
div ['esi']
cmp ['ecx,', 'eax']
ja ['short', 'loc_6293']
jmp ['short', 'loc_62CB']
mov ['ecx,', '[ebp+var_18]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
mov ['edx,', '[ebp+var_18]']
mov ['ecx,', '[edx+18h]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
mov ['edx,', '[ebp+var_18]']
cmp ['[edx+18h],', 'eax']
ja ['short', 'loc_62C0']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+18h]']
shr ['ecx,', '1']
mov ['edx,', '[ebp+var_18]']
add ['ecx,', '[edx+18h]']
mov ['[ebp+var_1C],', 'ecx']
jmp ['short', 'loc_62CB']
mov ['ecx,', '[ebp+var_18]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_1C]']
add ['eax,', '1']
push ['eax']
lea ['ecx,', '[ebp+var_11]']
push ['ecx']
mov ['ecx,', '[ebp+var_18]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z']
mov ['[ebp+var_20],', 'eax']
jmp ['short', 'loc_634E']
endp
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
mov ['[ebp-10h],', 'esp']
mov ['edx,', '[ebp+8]']
mov ['[ebp-1Ch],', 'edx']
mov ['byte', 'ptr', '[ebp-4],', '2']
mov ['eax,', '[ebp-1Ch]']
add ['eax,', '1']
push ['eax']
lea ['ecx,', '[ebp-12h]']
push ['ecx']
mov ['ecx,', '[ebp-18h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z']
mov ['[ebp-20h],', 'eax']
jmp ['short', 'loc_6338']
endp
__catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
push ['0']
push ['1']
mov ['ecx,', '[ebp-18h]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
endp
$LN17           proc near               
mov ['dword', 'ptr', '[ebp-4],', '1']
endp
$LN19           proc near               
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
cmp ['dword', 'ptr', '[ebp+0Ch],', '0']
jbe ['short', 'loc_637D']
mov ['edx,', '[ebp+0Ch]']
push ['edx']
mov ['ecx,', '[ebp-18h]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
mov ['eax,', '[ebp-20h]']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
push ['0']
push ['1']
mov ['ecx,', '[ebp-18h]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
lea ['ecx,', '[ebp-20h]']
push ['ecx']
mov ['edx,', '[ebp-18h]']
add ['edx,', '4']
push ['edx']
lea ['eax,', '[ebp-13h]']
push ['eax']
mov ['ecx,', '[ebp-18h]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z']
mov ['ecx,', '[ebp-18h]']
mov ['edx,', '[ebp-1Ch]']
mov ['[ecx+18h],', 'edx']
mov ['eax,', '[ebp+0Ch]']
push ['eax']
mov ['ecx,', '[ebp-18h]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['ecx,', '[ebp-0Ch]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
pop ['edi']
pop ['esi']
pop ['ebx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
jmp ['___CxxFrameHandler3']
endp
?_Destroy@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IAEXPAPAVScintillaEditView@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@YAXPAPAVScintillaEditView@@0AAU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Destroy_range@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@0AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@0@@Z']
add ['esp,', '0Ch']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['[ebp+var_1],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+14h],', 'ecx']
lea ['edx,', '[ebp+var_1]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?assign@?$char_traits@D@std@@SAXAADABD@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
xor ['eax,', 'eax']
mov ['[ebp+var_2],', 'ax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+14h],', 'edx']
lea ['eax,', '[ebp+var_2]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ']
mov ['ecx,', '[ebp+arg_0]']
lea ['edx,', '[eax+ecx*2]']
push ['edx']
call ['?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Free_proxy@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Free_proxy@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Free_proxy@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax]']
push ['ecx']
lea ['ecx,', '[ebp+var_1]']
call ['??$destroy@U_Container_proxy@std@@@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@1@@Z']
push ['1']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['eax,', '[ebp+var_2]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_3]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Freeheadnode@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['eax,', '[ebp+var_2]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z']
push ['1']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_3]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Freenode@?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['eax,', '[ebp+var_2]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@@Z']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?_Myval@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAU?$pair@$$CBHUStyle@@@2@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@U?$pair@$$CBHUStyle@@@std@@@std@@YAPAU?$pair@$$CBHUStyle@@@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['edx,', '[ebp+var_3]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@U?$pair@$$CBHUStyle@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@$$CBHUStyle@@@1@@Z']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Freenode@?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@AAPAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['eax,', '[ebp+var_2]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@@Z']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?_Myval@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z']
add ['esp,', '4']
push ['eax']
call ['??$addressof@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@YAPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@0@AAU10@@Z']
add ['esp,', '4']
push ['eax']
lea ['edx,', '[ebp+var_3]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@1@@Z']
push ['1']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_4]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Getal@?$_List_alloc@$0A@U?$_List_base_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_6986']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_6990']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx]']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jnz ['short', 'loc_69B2']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_69BD']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
add ['edx,', '4']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_69F6']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+18h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_6A16']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z']
jmp ['short', 'loc_6A60']
movzx ['edx,', '[ebp+arg_4]']
test ['edx,', 'edx']
jz ['short', 'loc_6A50']
cmp ['[ebp+arg_0],', '10h']
jnb ['short', 'loc_6A50']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+14h]']
jnb ['short', 'loc_6A37']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+Size],', 'edx']
jmp ['short', 'loc_6A40']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+Size]']
push ['edx']
push ['1']
mov ['ecx,', '[ebp+var_4]']
call ['?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z']
jmp ['short', 'loc_6A60']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_6A60']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
cmp ['[ebp+arg_0],', '0']
jbe ['short', 'loc_6A6F']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_6A76']
mov ['[ebp+var_C],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_C]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?_Grow_to@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IBEII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?capacity@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_8]']
call ['?max_size@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_4]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
cmp ['eax,', '[ebp+var_4]']
jnb ['short', 'loc_6AB1']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_6ABC']
mov ['edx,', '[ebp+var_4]']
shr ['edx,', '1']
add ['edx,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_6AD0']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Grow_to@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEII@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_8]']
call ['?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ']
mov ['ecx,', '[ebp+var_4]']
shr ['ecx,', '1']
sub ['eax,', 'ecx']
cmp ['eax,', '[ebp+var_4]']
jnb ['short', 'loc_6B0D']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_6B18']
mov ['edx,', '[ebp+var_4]']
shr ['edx,', '1']
add ['edx,', '[ebp+var_4]']
mov ['[ebp+var_C],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_4],', 'eax']
mov ['ecx,', '[ebp+var_4]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_6B2C']
mov ['edx,', '[ebp+arg_0]']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Init@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
lea ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
shl ['ecx,', '1']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '0Ch']
call ['?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z']
mov ['edx,', '[ebp+arg_0]']
sub ['edx,', '1']
mov ['eax,', '[ebp+var_4]']
mov ['[eax+1Ch],', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_0]']
mov ['[ecx+20h],', 'edx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '40h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_34],', '0']
mov ['[ebp+var_4],', '1']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['eax,', '[ebp+var_18]']
jnz ['short', 'loc_6BDC']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[ebp+arg_C]']
cmp ['ecx,', '[eax+4]']
jb ['short', 'loc_6BDC']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_C]']
jnb ['short', 'loc_6BF3']
push ['67Ah']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EK@EEHFMKDC@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAi?$AAn?$AAs?$AAe?$AAr?$AAt?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ebp+arg_C]']
sub ['edx,', '[ecx+4]']
sar ['edx,', '2']
mov ['[ebp+var_3C],', 'edx']
cmp ['[ebp+arg_10],', '0']
jnz ['short', 'loc_6C0D']
jmp ['loc_6F72']
mov ['ecx,', '[ebp+var_18]']
call ['?_Unused_capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_10]']
jnb ['loc_6E01']
mov ['ecx,', '[ebp+var_18]']
call ['?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_18]']
call ['?size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ']
sub ['esi,', 'eax']
cmp ['esi,', '[ebp+arg_10]']
jnb ['short', 'loc_6C3F']
mov ['ecx,', '[ebp+var_18]']
call ['?_Xlen@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXXZ']
mov ['ecx,', '[ebp+var_18]']
call ['?size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_10]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
call ['?_Grow_to@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEII@Z']
mov ['[ebp+var_2C],', 'eax']
mov ['eax,', '[ebp+var_2C]']
push ['eax']
lea ['ecx,', '[ebp+var_11]']
push ['ecx']
mov ['ecx,', '[ebp+var_18]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[ebp+arg_C]']
sub ['eax,', '[edx+4]']
sar ['eax,', '2']
mov ['[ebp+var_24],', 'eax']
mov ['[ebp+var_20],', '0']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+arg_14]']
push ['ecx']
call ['??$addressof@$$CBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPBV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@ABV10@@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+arg_10]']
push ['edx']
mov ['eax,', '[ebp+var_24]']
mov ['ecx,', '[ebp+var_1C]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['ecx,', '[ebp+var_18]']
call ['?_Ufill@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@PAV32@IPBV32@@Z']
mov ['eax,', '[ebp+var_20]']
add ['eax,', '1']
mov ['[ebp+var_20],', 'eax']
mov ['ecx,', '[ebp+var_1C]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_18]']
call ['??$_Umove@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PAV21@00@Z']
mov ['edx,', '[ebp+var_20]']
add ['edx,', '1']
mov ['[ebp+var_20],', 'edx']
mov ['eax,', '[ebp+var_24]']
add ['eax,', '[ebp+arg_10]']
mov ['ecx,', '[ebp+var_1C]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+arg_C]']
push ['edx']
mov ['ecx,', '[ebp+var_18]']
call ['??$_Umove@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PAV21@00@Z']
jmp ['short', 'loc_6D66']
__catch$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@ proc near
cmp ['dword', 'ptr', '[ebp-20h],', '1']
jle ['short', 'loc_6D14']
mov ['eax,', '[ebp-24h]']
mov ['ecx,', '[ebp-1Ch]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['eax,', '[ebp-1Ch]']
push ['eax']
mov ['ecx,', '[ebp-18h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z']
cmp ['dword', 'ptr', '[ebp-20h],', '0']
jle ['short', 'loc_6D3C']
mov ['ecx,', '[ebp-24h]']
mov ['edx,', '[ebp-1Ch]']
lea ['eax,', '[edx+ecx*4]']
mov ['ecx,', '[ebp+18h]']
lea ['edx,', '[eax+ecx*4]']
push ['edx']
mov ['eax,', '[ebp-24h]']
mov ['ecx,', '[ebp-1Ch]']
lea ['edx,', '[ecx+eax*4]']
push ['edx']
mov ['ecx,', '[ebp-18h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z']
mov ['eax,', '[ebp-2Ch]']
push ['eax']
mov ['ecx,', '[ebp-1Ch]']
push ['ecx']
lea ['edx,', '[ebp-12h]']
push ['edx']
mov ['ecx,', '[ebp-18h]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN26']
retn
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_6D76']
$LN26           proc near               
mov ['dword', 'ptr', '[ebp-4],', '1']
endp
__catch$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@_0 proc near
mov ['ecx,', '[ebp-18h]']
mov ['edx,', '[ecx+8]']
mov ['eax,', '[ebp+18h]']
lea ['ecx,', '[edx+eax*4]']
push ['ecx']
mov ['edx,', '[ebp+18h]']
mov ['eax,', '[ebp+14h]']
lea ['ecx,', '[eax+edx*4]']
push ['ecx']
mov ['ecx,', '[ebp-18h]']
call ['?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
mov ['eax,', 'offset', '$LN28']
retn
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_6EAD']
$LN28           proc near               
mov ['dword', 'ptr', '[ebp-4],', '1']
endp
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyl proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyl_0 proc near
lea ['ecx,', '[ebp-50h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
__unwindfunclet$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyl_1 proc near
mov ['eax,', '[ebp-34h]']
and ['eax,', '1']
jz ['$LN24']
and ['dword', 'ptr', '[ebp-34h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
retn
__ehhandler$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-54h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@s']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_data,', 'fs:nothing,', 'gs:nothing']
public ['?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z']
?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+arg_0],', '0']
jz ['short', 'loc_7045']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
cmp ['[ebp+arg_0],', 'eax']
jb ['short', 'loc_7045']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+var_4]']
add ['eax,', '[ecx+14h]']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_704B']
xor ['al,', 'al']
jmp ['short', 'loc_704D']
jmp ['short', 'loc_704D']
mov ['al,', '1']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Inside@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IBE_NPBQAVScintillaEditView@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
cmp ['ecx,', '[eax+8]']
jnb ['short', 'loc_707C']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
cmp ['eax,', '[ebp+arg_0]']
ja ['short', 'loc_707C']
mov ['[ebp+var_8],', '1']
jmp ['short', 'loc_7083']
mov ['[ebp+var_8],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Make_iter@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Make_iter@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+var_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_C]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@PAPAVScintillaEditView@@PBU_Container_base12@1@@Z']
mov ['edx,', '[ebp+var_10]']
or ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
__unwindfunclet$?_Make_iter@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z$0 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?_Make_iter@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z$1 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN5']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?_Make_iter@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Make_iter@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z']
jmp ['___CxxFrameHandler3']
endp
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_715E']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_7167']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '10h']
jb ['short', 'loc_7196']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_719F']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax+18h],', '8']
jb ['short', 'loc_71CE']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['??$addressof@_W@std@@YAPA_WAA_W@Z']
add ['esp,', '4']
mov ['[ebp+var_8],', 'eax']
jmp ['short', 'loc_71D7']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '4']
mov ['[ebp+var_8],', 'eax']
mov ['eax,', '[ebp+var_8]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Myval@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAU?$pair@$$CBHUStyle@@@2@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '8']
pop ['ebp']
retn
endp
?_Myval@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '8']
pop ['ebp']
retn
endp
?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
pop ['ebp']
retn
endp
?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+var_14]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_7293']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx]']
add ['edx,', '4']
mov ['[ebp+var_10],', 'edx']
jmp ['short', 'loc_7263']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[ecx+4]']
mov ['[edx],', 'eax']
mov ['ecx,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[ecx],', '0']
jz ['short', 'loc_7278']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['dword', 'ptr', '[eax],', '0']
jmp ['short', 'loc_7256']
mov ['ecx,', '[ebp+var_14]']
mov ['edx,', '[ecx]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1_Lockit@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
__unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-10h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ']
jmp ['___CxxFrameHandler3']
endp
?_Orphan_me@_Iterator_base12@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_7336']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx]']
add ['edx,', '4']
mov ['[ebp+var_4],', 'edx']
mov ['eax,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_7303']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
cmp ['edx,', '[ebp+var_8]']
jz ['short', 'loc_7303']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax]']
add ['ecx,', '4']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_72E4']
mov ['edx,', '[ebp+var_4]']
cmp ['dword', 'ptr', '[edx],', '0']
jnz ['short', 'loc_7322']
push ['0C9h']
push ['offset', '??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Orphan_ptr@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_ptr@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_73DD']
mov ['eax,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_73DD']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[edx+8]']
cmp ['ecx,', '[eax+4]']
jz ['short', 'loc_73B1']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_73C0']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_73C0']
mov ['edx,', '[ebp+var_10]']
mov ['ecx,', '[edx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_73DB']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_10]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_7386']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1_Lockit@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$?_Orphan_ptr@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__ehhandler$?_Orphan_ptr@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-10h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_ptr@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z']
jmp ['___CxxFrameHandler3']
endp
?_Orphan_ptr@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_ptr@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_74C5']
mov ['eax,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_74C5']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_14]']
mov ['ecx,', '[edx+8]']
cmp ['ecx,', '[eax+4]']
jz ['short', 'loc_7499']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_74A8']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx]']
mov ['ecx,', '[eax+8]']
cmp ['ecx,', '[ebp+arg_4]']
jz ['short', 'loc_74A8']
mov ['edx,', '[ebp+var_10]']
mov ['ecx,', '[edx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_74C3']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_10]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[eax]']
mov ['[edx],', 'eax']
jmp ['short', 'loc_746E']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1_Lockit@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$?_Orphan_ptr@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__ehhandler$?_Orphan_ptr@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-10h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_ptr@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z']
jmp ['___CxxFrameHandler3']
endp
?_Orphan_range@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IBEXPAPAVScintillaEditView@@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_range@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IBEXPAPAVScintillaEditView@@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_75A4']
mov ['eax,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_75A4']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_0]']
jb ['short', 'loc_7578']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_7587']
mov ['ecx,', '[ebp+var_10]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_75A2']
mov ['edx,', '[ebp+var_10]']
mov ['ecx,', '[edx]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_7556']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1_Lockit@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$?_Orphan_range@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IBEXPAPAVScintillaEditView@@0@Z$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__ehhandler$?_Orphan_range@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IBEXPAPAVScintillaEditView@@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-10h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_range@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IBEXPAPAVScintillaEditView@@0@Z']
jmp ['___CxxFrameHandler3']
endp
?_Orphan_range@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '0Ch']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
push ['3']
lea ['ecx,', '[ebp+var_18]']
call ['??0_Lockit@std@@QAE@H@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
call ['?_Getpfirst@_Container_base12@std@@QBEPAPAU_Iterator_base12@2@XZ']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_7680']
mov ['eax,', '[ebp+var_10]']
cmp ['dword', 'ptr', '[eax],', '0']
jz ['short', 'loc_7680']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+arg_0]']
jb ['short', 'loc_7654']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+arg_4]']
cmp ['eax,', '[edx+8]']
jnb ['short', 'loc_7663']
mov ['ecx,', '[ebp+var_10]']
mov ['ecx,', '[ecx]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['[ebp+var_10],', 'eax']
jmp ['short', 'loc_767E']
mov ['edx,', '[ebp+var_10]']
mov ['ecx,', '[edx]']
call ['?_Clrcont@_Iterator_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax]']
call ['?_Getpnext@_Iterator_base12@std@@QAEPAPAU12@XZ']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[eax]']
mov ['[ecx],', 'edx']
jmp ['short', 'loc_7632']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_18]']
call ['??1_Lockit@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$?_Orphan_range@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z$0 proc near
lea ['ecx,', '[ebp-18h]']
jmp ['??1_Lockit@std@@QAE@XZ']
endp
__ehhandler$?_Orphan_range@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-10h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Orphan_range@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z']
jmp ['___CxxFrameHandler3']
endp
?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
pop ['ebp']
retn
endp
?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
add ['eax,', '4']
pop ['ebp']
retn
endp
?_Reallocate@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?_Reallocate@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IAEXI@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
push ['ecx']
sub ['esp,', '10h']
push ['ebx']
push ['esi']
push ['edi']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'esp']
mov ['[ebp+var_18],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
lea ['ecx,', '[ebp+var_11]']
push ['ecx']
mov ['ecx,', '[ebp+var_18]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?allocate@?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEPAPAVScintillaEditView@@I@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['[ebp+var_4],', '0']
mov ['edx,', '[ebp+var_1C]']
push ['edx']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_18]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
call ['??$_Umove@PAPAVScintillaEditView@@@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IAEPAPAVScintillaEditView@@PAPAV2@00@Z']
jmp ['short', 'loc_7772']
endp
__catch$?_Reallocate@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IAEXI@Z$0 proc near
mov ['ecx,', '[ebp+8]']
push ['ecx']
mov ['edx,', '[ebp-1Ch]']
push ['edx']
lea ['eax,', '[ebp-12h]']
push ['eax']
mov ['ecx,', '[ebp-18h]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEXPAPAVScintillaEditView@@I@Z']
push ['0']
push ['0']
call ['__CxxThrowException@8']
endp
$LN8_0          proc near               
mov ['dword', 'ptr', '[ebp-4],', '0FFFFFFFFh']
endp
__ehhandler$?_Reallocate@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IAEXI@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-24h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?_Reallocate@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IAEXI@Z']
jmp ['___CxxFrameHandler3']
endp
?_Reserve@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IAEXI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
push ['esi']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unused_capacity@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_0]']
jnb ['short', 'loc_788B']
mov ['ecx,', '[ebp+var_4]']
call ['?max_size@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ']
mov ['esi,', 'eax']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ']
sub ['esi,', 'eax']
cmp ['esi,', '[ebp+arg_0]']
jnb ['short', 'loc_786E']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xlen@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IBEXXZ']
mov ['ecx,', '[ebp+var_4]']
call ['?size@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ']
add ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow_to@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IBEII@Z']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Reallocate@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IAEXI@Z']
pop ['esi']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_8],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jnz ['short', 'loc_78A7']
jmp ['short', 'loc_791A']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx+18h],', '10h']
jb ['short', 'loc_791A']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '4']
push ['ecx']
lea ['edx,', '[ebp+var_1]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z']
cmp ['[ebp+Size],', '0']
jbe ['short', 'loc_78F9']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['??$addressof@D@std@@YAPADAAD@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '4']
push ['edx']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+18h]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
lea ['eax,', '[ebp+var_2]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+18h],', '0Fh']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_8],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jnz ['short', 'loc_794B']
jmp ['short', 'loc_79BE']
mov ['ecx,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[ecx+18h],', '8']
jb ['short', 'loc_79BE']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '4']
push ['ecx']
lea ['edx,', '[ebp+var_1]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_799D']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
call ['??$addressof@_W@std@@YAPA_WAA_W@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '4']
push ['edx']
call ['?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z']
add ['esp,', '0Ch']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+18h]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+var_C]']
push ['edx']
lea ['eax,', '[ebp+var_2]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+18h],', '7']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?_Tidy@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?clear@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAEXXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Tidy@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?clear@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAEXXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Tidy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_7A7C']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@0@Z']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
sar ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@I@Z']
mov ['edx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Tidy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
cmp ['dword', 'ptr', '[eax+4],', '0']
jz ['short', 'loc_7AF8']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[edx+0Ch]']
sub ['ecx,', '[eax+4]']
sar ['ecx,', '2']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+4]']
push ['eax']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z']
mov ['edx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[edx+4],', '0']
mov ['eax,', '[ebp+var_8]']
mov ['dword', 'ptr', '[eax+8],', '0']
mov ['ecx,', '[ebp+var_8]']
mov ['dword', 'ptr', '[ecx+0Ch],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Ufill@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@PAV32@IPBV32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ']
lea ['ecx,', '[ebp+var_1]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['??$_Uninitialized_fill_n@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@IV12@U?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@YAXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPBV10@AAU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@st']
add ['esp,', '10h']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[ebp+arg_0]']
lea ['eax,', '[eax+edx*4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?_Unchecked_end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Unchecked_end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Unchecked_end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?_Unused_capacity@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+8]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Unused_capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+8]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['offset', '??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@']
call ['?_Xlength_error@std@@YAXPBD@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Xlen@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['offset', '??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
call ['?_Xlength_error@std@@YAXPBD@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Xlen@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['offset', '??_C@_0BD@OLBABOEK@vector?$DMT?$DO?5too?5long?$AA@']
call ['?_Xlength_error@std@@YAXPBD@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['offset', '??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@']
call ['?_Xout_of_range@std@@YAXPBD@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@D@std@@QAEPADI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEPAPAVScintillaEditView@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@PAVScintillaEditView@@@std@@QAEPAPAVScintillaEditView@@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?allocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$allocator@D@std@@QAEPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@D@std@@YAPADIPAD@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$allocator@PAVScintillaEditView@@@std@@QAEPAPAVScintillaEditView@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@PAVScintillaEditView@@@std@@YAPAPAVScintillaEditView@@IPAPAV1@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@YAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@0@IPAU10@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?allocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$_Allocate@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@YAPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@0@IPAV10@@Z']
add ['esp,', '8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
cmp ['eax,', '[ebp+arg_4]']
jnb ['short', 'loc_7D7E']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['ecx,', '[ebp+arg_0]']
call ['?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+Size],', 'eax']
mov ['eax,', '[ebp+arg_8]']
cmp ['eax,', '[ebp+Size]']
jnb ['short', 'loc_7D9A']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ebp+Size],', 'ecx']
mov ['edx,', '[ebp+var_4]']
cmp ['edx,', '[ebp+arg_0]']
jnz ['short', 'loc_7DC1']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
push ['0']
mov ['ecx,', '[ebp+var_4]']
call ['?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z']
jmp ['short', 'loc_7E03']
push ['0']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_7E03']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ']
add ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['0Ch']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['490h']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Str]']
push ['eax']
call ['??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Str]']
push ['ecx']
call ['?length@?$char_traits@D@std@@SAIPBD@Z']
add ['esp,', '4']
push ['eax']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
cmp ['[ebp+Size],', '0']
jz ['short', 'loc_7E6B']
push ['47Fh']
push ['offset', '??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
mov ['eax,', '[ebp+Src]']
push ['eax']
call ['??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z']
movzx ['edx,', 'al']
test ['edx,', 'edx']
jz ['short', 'loc_7E9E']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
mov ['ecx,', '[ebp+Src]']
sub ['ecx,', 'eax']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z']
jmp ['short', 'loc_7EDB']
push ['0']
mov ['eax,', '[ebp+Size]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_7ED8']
mov ['edx,', '[ebp+Size]']
push ['edx']
mov ['eax,', '[ebp+Src]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
push ['eax']
call ['?copy@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dl,', '[ecx]']
mov ['[eax],', 'dl']
pop ['ebp']
retn
endp
?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_4]']
mov ['dx,', '[ecx]']
mov ['[eax],', 'dx']
pop ['ebp']
retn
endp
?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '34h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['ecx,', '[ebp+var_10]']
call ['?clear@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXXZ']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_40]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?begin@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_18],', 'eax']
mov ['[ebp+var_4],', '0']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_20],', 'esp']
mov ['edx,', '[ebp+var_18]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_1C],', 'eax']
mov ['eax,', '[ebp+var_1C]']
mov ['[ebp+var_24],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
lea ['ecx,', '[ebp+var_34]']
push ['ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
call ['?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$C']
mov ['[ebp+var_28],', 'eax']
lea ['ecx,', '[ebp+var_34]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['[ebp+var_4],', '0FFFFFFFFh']
lea ['ecx,', '[ebp+var_40]']
call ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z$0 proc near
lea ['ecx,', '[ebp-40h]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z$1 proc near
mov ['ecx,', '[ebp-20h]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
endp
__ehhandler$?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-38h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?assign@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXIABV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@@Z']
jmp ['___CxxFrameHandler3']
endp
?begin@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?begin@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?begin@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
or ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?begin@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ$0 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN4_7']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?begin@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?begin@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ']
jmp ['___CxxFrameHandler3']
endp
?begin@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?begin@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?begin@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
or ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?begin@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ$0 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN4_2']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?begin@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?begin@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ']
jmp ['___CxxFrameHandler3']
endp
?begin@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?begin@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
or ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?begin@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ$0 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN4_5']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?begin@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?begin@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ']
jmp ['___CxxFrameHandler3']
endp
?begin@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?begin@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_14]']
or ['ecx,', '1']
mov ['[ebp+var_14],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?begin@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ$0 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN4_0']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?begin@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?begin@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ']
jmp ['___CxxFrameHandler3']
endp
?begin@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?begin@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@PAPAVScintillaEditView@@PBU_Container_base12@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_14]']
or ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?begin@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@XZ$0 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN4']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?begin@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?begin@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@XZ']
jmp ['___CxxFrameHandler3']
endp
?begin@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?begin@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@PAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@1@PBU_Container_base12@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_14]']
or ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?begin@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ$0 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN4_4']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?begin@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?begin@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ']
jmp ['___CxxFrameHandler3']
endp
?capacity@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?capacity@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?category@error_code@std@@QBEABVerror_category@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?clear@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_ptr@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[edx+4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
jmp ['short', 'loc_845F']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+4]']
jz ['short', 'loc_8489']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Freenode@?$_List_buy@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@@Z']
jmp ['short', 'loc_8459']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?clear@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', 'ecx']
push ['0']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_ptr@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QBEXAAV12@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['eax,', '[eax]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
push ['edx']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+4]']
mov ['[eax],', 'edx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+4]']
push ['ecx']
call ['?_Prevnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['edx,', '[ebp+var_4]']
mov ['ecx,', '[edx+4]']
mov ['[eax],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+8],', '0']
jmp ['short', 'loc_84FB']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_8]']
cmp ['edx,', '[ecx+4]']
jz ['short', 'loc_8525']
mov ['eax,', '[ebp+var_8]']
push ['eax']
call ['?_Nextnode@?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@SAAAPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@PAU32@@Z']
add ['esp,', '4']
mov ['ecx,', '[eax]']
mov ['[ebp+var_C],', 'ecx']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Freenode@?$_List_buy@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@@Z']
jmp ['short', 'loc_84F5']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?clear@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAEXXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Orphan_all@_Container_base12@std@@QAEXXZ']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
call ['?_Destroy@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@0@Z']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+4]']
mov ['[ecx+8],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?construct@?$allocator@PAVScintillaEditView@@@std@@QAEXPAPAVScintillaEditView@@ABQAV3@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_8596']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ebp+arg_4]']
mov ['eax,', '[edx]']
mov ['[ecx],', 'eax']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_859D']
mov ['[ebp+var_8],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?construct@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@ABV32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['4']
call ['??2@YAPAXIPAX@Z']
add ['esp,', '8']
mov ['[ebp+var_4],', 'eax']
cmp ['[ebp+var_4],', '0']
jz ['short', 'loc_85D6']
mov ['ecx,', '[ebp+arg_4]']
mov ['edx,', '[ecx]']
mov ['eax,', '[ebp+var_4]']
mov ['[eax],', 'edx']
mov ['ecx,', '[ebp+var_4]']
mov ['[ebp+var_8],', 'ecx']
jmp ['short', 'loc_85DD']
mov ['[ebp+var_8],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_85F6']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_860D']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
cmp ['[ebp+arg_8],', '0']
jnz ['short', 'loc_8626']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_863D']
mov ['ecx,', '[ebp+arg_8]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_wmemcpy']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@D@std@@QAEXPADI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEXPAPAVScintillaEditView@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@PAVScintillaEditView@@@std@@QAEXPAPAVScintillaEditView@@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@U_Container_proxy@std@@@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$allocator@PAVScintillaEditView@@@std@@QAEXPAPAVScintillaEditView@@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$allocator@U?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@std@@@std@@QAEXPAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$allocator@U?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@std@@@std@@QAEXPAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QAEXPAV?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?_Syserror_map@std@@YAPBDH@Z']
add ['esp,', '4']
test ['eax,', 'eax']
jz ['short', 'loc_88B4']
call ['?generic_category@std@@YAABVerror_category@1@XZ']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_88C9']
jmp ['short', 'loc_88C9']
call ['?system_category@std@@YAABVerror_category@1@XZ']
push ['eax']
mov ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0error_condition@std@@QAE@HABVerror_category@1@@Z']
mov ['eax,', '[ebp+arg_0]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?destroy@ScintillaEditView@@UAEXXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__DestroyWindow@4']
mov ['edx,', '[ebp+var_4]']
mov ['dword', 'ptr', '[edx+0Ch],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?display@Window@@UBEX_N@Z proc near     
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
movzx ['eax,', '[ebp+arg_0]']
test ['eax,', 'eax']
jz ['short', 'loc_892E']
mov ['[ebp+nCmdShow],', '5']
jmp ['short', 'loc_8935']
mov ['[ebp+nCmdShow],', '0']
mov ['ecx,', '[ebp+nCmdShow]']
push ['ecx']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__ShowWindow@8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?end@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?end@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?end@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
or ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?end@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ$0 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN4_8']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?end@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?end@?$_Hash@V?$_Umap_traits@HUStyle@@V?$_Uhash_compare@HU?$hash@H@std@@U?$equal_to@H@2@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ']
jmp ['___CxxFrameHandler3']
endp
?end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
mov ['ecx,', '[ebp+var_14]']
call ['?end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ']
mov ['[ebp+var_4],', '0']
mov ['ecx,', '[ebp+var_10]']
or ['ecx,', '1']
mov ['[ebp+var_10],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ$0 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN4_3']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?end@?$_Hash@V?$_Umap_traits@PAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@V?$_Uhash_compare@PAVBuffer@@U?$hash@PAVBuffer@@@std@@U?$equal_to@PAVBuffer@@@3@@3@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@3@$0A@@std@@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ']
jmp ['___CxxFrameHandler3']
endp
?end@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?end@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@$$CBHUStyle@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_14]']
or ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?end@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ$0 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN4_6']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?end@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?end@?$list@U?$pair@$$CBHUStyle@@@std@@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@$$CBHUStyle@@@std@@@std@@@std@@@2@XZ']
jmp ['___CxxFrameHandler3']
endp
?end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['eax,', '[ebp+var_10]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@PAU?$_List_node@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@PAX@1@PBV?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@1@@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_14]']
or ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
__unwindfunclet$?end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ$0 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN4_1']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?end@?$list@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@V?$allocator@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@2@@std@@QAE?AV?$_List_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@2@XZ']
jmp ['___CxxFrameHandler3']
endp
?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['ecx,', '[ebp+arg_0]']
call ['?category@error_code@std@@QBEABVerror_category@2@XZ']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['??8error_category@std@@QBE_NABV01@@Z']
movzx ['eax,', 'al']
test ['eax,', 'eax']
jz ['short', 'loc_8BE3']
mov ['ecx,', '[ebp+arg_0]']
call ['?value@error_code@std@@QBEHXZ']
cmp ['eax,', '[ebp+arg_4]']
jnz ['short', 'loc_8BE3']
mov ['[ebp+var_4],', '1']
jmp ['short', 'loc_8BEA']
mov ['[ebp+var_4],', '0']
mov ['al,', 'byte', 'ptr', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
lea ['edx,', '[ebp+var_C]']
push ['edx']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
call ['eax']
mov ['ecx,', 'eax']
call ['??8error_condition@std@@QBE_NABV01@@Z']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_8C3E']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+14h]']
cmp ['ecx,', '[ebp+arg_0]']
jnb ['short', 'loc_8C70']
mov ['ecx,', '[ebp+var_4]']
call ['?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_0]']
cmp ['eax,', '[ebp+arg_4]']
ja ['short', 'loc_8C8C']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
jmp ['short', 'loc_8CD2']
cmp ['[ebp+arg_4],', '0']
jbe ['short', 'loc_8CD2']
mov ['ecx,', '[ebp+var_4]']
call ['?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ']
add ['eax,', '[ebp+arg_0]']
mov ['[ebp+Dst],', 'eax']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+14h]']
sub ['eax,', '[ebp+arg_4]']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
sub ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
add ['edx,', '[ebp+arg_4]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['?move@?$char_traits@D@std@@SAPADPADPBDI@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['ecx,', '[ebp+var_4]']
call ['?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?erase@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?erase@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_10],', 'ecx']
mov ['[ebp+var_14],', '0']
mov ['[ebp+var_4],', '1']
lea ['ecx,', '[ebp+arg_4]']
call ['?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ']
cmp ['eax,', '[ebp+var_10]']
jnz ['short', 'loc_8D35']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[ebp+Dst]']
cmp ['ecx,', '[eax+4]']
jb ['short', 'loc_8D35']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
cmp ['eax,', '[ebp+Dst]']
ja ['short', 'loc_8D4C']
push ['5A2h']
push ['offset', '??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@']
push ['offset', '??_C@_1EI@HGIDLLCM@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAe?$AAr?$AAa?$AAs?$AAe?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAo?$AAu?$AAt?$AAs?$AAi?$AAd?$AAe?$AA?5?$AAr?$AAa@']
call ['?_Debug_message@std@@YAXPB_W0I@Z']
add ['esp,', '0Ch']
mov ['ecx,', '[ebp+Dst]']
push ['ecx']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+Dst]']
add ['ecx,', '4']
push ['ecx']
call ['??$_Move@PAPAVScintillaEditView@@PAPAV1@@std@@YAPAPAVScintillaEditView@@PAPAV1@00@Z']
add ['esp,', '0Ch']
mov ['edx,', '[ebp+var_10]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
mov ['edx,', '[ecx+8]']
sub ['edx,', '4']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Destroy@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IAEXPAPAVScintillaEditView@@0@Z']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
mov ['ecx,', '[ebp+var_10]']
call ['?_Orphan_range@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IBEXPAPAVScintillaEditView@@0@Z']
mov ['eax,', '[ebp+var_10]']
mov ['ecx,', '[eax+8]']
sub ['ecx,', '4']
mov ['edx,', '[ebp+var_10]']
mov ['[edx+8],', 'ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_1C],', 'esp']
lea ['eax,', '[ebp+arg_4]']
push ['eax']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_18],', 'eax']
mov ['ecx,', '[ebp+var_18]']
mov ['[ebp+var_20],', 'ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_10]']
call ['?_Make_iter@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z']
mov ['[ebp+var_24],', 'eax']
mov ['eax,', '[ebp+var_14]']
or ['eax,', '1']
mov ['[ebp+var_14],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['10h']
endp
__unwindfunclet$?erase@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z$0 proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z$1 proc near
mov ['ecx,', '[ebp-1Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
endp
__unwindfunclet$?erase@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z$2 proc near
mov ['eax,', '[ebp-14h]']
and ['eax,', '1']
jz ['$LN8']
and ['dword', 'ptr', '[ebp-14h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@std@@QAE@XZ']
retn
endp
__ehhandler$?erase@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?erase@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@PAVScintillaEditView@@@std@@@std@@@2@@Z']
jmp ['___CxxFrameHandler3']
endp
?generic_category@std@@YAABVerror_category@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A']
pop ['ebp']
retn
endp
?getClientRect@Window@@UBEXAAUtagRECT@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+lpRect]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__GetClientRect@8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?getHSelf@Window@@QBEPAUHWND__@@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+0Ch]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?getHeight@Window@@UBEHXZ proc near     
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_18],', 'ecx']
lea ['eax,', '[ebp+Rect]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__GetClientRect@8']
mov ['eax,', '[ebp+var_18]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__IsWindowVisible@4']
cmp ['eax,', '1']
jnz ['short', 'loc_8EBE']
mov ['eax,', '[ebp+Rect.bottom]']
sub ['eax,', '[ebp+Rect.top]']
jmp ['short', 'loc_8EC0']
xor ['eax,', 'eax']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?getWidth@Window@@UBEHXZ proc near      
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '18h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
mov ['[ebp+var_4],', 'eax']
mov ['[ebp+var_18],', 'ecx']
lea ['eax,', '[ebp+Rect]']
push ['eax']
mov ['ecx,', '[ebp+var_18]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__GetClientRect@8']
mov ['eax,', '[ebp+Rect.right]']
sub ['eax,', '[ebp+Rect.left]']
mov ['ecx,', '[ebp+var_4]']
xor ['ecx,', 'ebp']
call ['@__security_check_cookie@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?getWindowRect@Window@@UBEXAAUtagRECT@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+lpRect]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__GetWindowRect@8']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?init@Window@@UAEXPAUHINSTANCE__@@PAUHWND__@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+arg_0]']
mov ['[eax+4],', 'ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[ebp+arg_4]']
mov ['[edx+8],', 'eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '18h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_18],', 'ecx']
mov ['[ebp+var_10],', '0']
mov ['[ebp+var_4],', '1']
mov ['eax,', '[ebp+arg_14]']
push ['eax']
mov ['ecx,', '[ebp+arg_10]']
push ['ecx']
sub ['esp,', '0Ch']
mov ['ecx,', 'esp']
mov ['[ebp+var_1C],', 'esp']
lea ['edx,', '[ebp+arg_4]']
push ['edx']
call ['??0?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@ABV01@@Z']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+var_14]']
mov ['[ebp+var_20],', 'eax']
mov ['byte', 'ptr', '[ebp+var_4],', '2']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
mov ['byte', 'ptr', '[ebp+var_4],', '1']
mov ['ecx,', '[ebp+var_18]']
call ['?_Insert_n@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@IAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@']
mov ['[ebp+var_24],', 'eax']
mov ['edx,', '[ebp+var_10]']
or ['edx,', '1']
mov ['[ebp+var_10],', 'edx']
mov ['byte', 'ptr', '[ebp+var_4],', '0']
lea ['ecx,', '[ebp+arg_4]']
call ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['18h']
assume ['cs:_text$x']
assume ['es:nothing,', 'ss:nothing,', 'ds:_data,', 'fs:nothing,', 'gs:nothing']
__unwindfunclet$?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@ proc near
lea ['ecx,', '[ebp+0Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
__unwindfunclet$?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@_0 proc near
mov ['ecx,', '[ebp-1Ch]']
jmp ['??1?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
__unwindfunclet$?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@_1 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN6_2']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QAE@XZ']
retn
__ehhandler$?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-1Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?insert@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QAE?AV?$_Vector_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@V?$_Vector_const_iterator@V?$_Vector_val@U?$_Simple_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@']
jmp ['___CxxFrameHandler3']
assume ['cs:_text$mn']
assume ['es:nothing,', 'ss:nothing,', 'ds:_data,', 'fs:nothing,', 'gs:nothing']
public ['?isVisible@Window@@UBE_NXZ']
?isVisible@Window@@UBE_NXZ proc near    
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__IsWindowVisible@4']
test ['eax,', 'eax']
jz ['short', 'loc_9044']
mov ['[ebp+var_1],', '1']
jmp ['short', 'loc_9048']
mov ['[ebp+var_1],', '0']
mov ['al,', '[ebp+var_1]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?length@?$char_traits@D@std@@SAIPBD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['eax,', '[ebp+Str]']
movsx ['ecx,', 'byte', 'ptr', '[eax]']
test ['ecx,', 'ecx']
jnz ['short', 'loc_9067']
mov ['[ebp+var_4],', '0']
jmp ['short', 'loc_9076']
mov ['edx,', '[ebp+Str]']
push ['edx']
call ['_strlen']
add ['esp,', '4']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@PAVScintillaEditView@@@std@@@std@@SAIABV?$allocator@PAVScintillaEditView@@@2@@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
push ['eax']
call ['?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@2@@Z']
add ['esp,', '4']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$allocator@D@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
or ['eax,', '0FFFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$allocator@PAVScintillaEditView@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '3FFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '3FFFFFFFh']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$allocator_traits@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAIABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
push ['0']
call ['??$_Fn@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@_Alloc_max_size@std@@SAIHABU?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@1@@Z']
add ['esp,', '8']
pop ['ebp']
retn
endp
?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@D@std@@QBEIXZ']
pop ['ebp']
retn
endp
?max_size@?$allocator_traits@V?$allocator@PAVScintillaEditView@@@std@@@std@@SAIABV?$allocator@PAVScintillaEditView@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@PAVScintillaEditView@@@std@@QBEIXZ']
pop ['ebp']
retn
endp
?max_size@?$allocator_traits@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@SAIABV?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@2@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['ecx,', '[ebp+arg_0]']
call ['?max_size@?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@QBEIXZ']
pop ['ebp']
retn
endp
?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['[ebp+var_10],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_10]']
call ['?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ']
mov ['[ebp+var_8],', 'eax']
cmp ['[ebp+var_8],', '1']
ja ['short', 'loc_9182']
mov ['[ebp+var_C],', '1']
jmp ['short', 'loc_918B']
mov ['ecx,', '[ebp+var_8]']
sub ['ecx,', '1']
mov ['[ebp+var_C],', 'ecx']
mov ['eax,', '[ebp+var_C]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?max_size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
mov ['[ebp+var_8],', 'ecx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@@std@@QBE?AU?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['?max_size@?$_Wrap_alloc@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@std@@@std@@QBEIXZ']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_1C],', 'ecx']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?_Syserror_map@std@@YAPBDH@Z']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_9220']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+Str],', 'ecx']
jmp ['short', 'loc_9227']
mov ['[ebp+Str],', 'offset', '??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_18]']
or ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
mov ['eax,', '[ebp-18h]']
and ['eax,', '1']
jz ['$LN6']
and ['dword', 'ptr', '[ebp-18h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
retn
endp
__ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
jmp ['___CxxFrameHandler3']
endp
?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '8']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_14],', 'ecx']
mov ['[ebp+var_10],', '0']
cmp ['[ebp+arg_4],', '1']
jnz ['short', 'loc_92E5']
push ['offset', '??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
or ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+arg_0]']
jmp ['short', 'loc_9308']
jmp ['short', 'loc_9308']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['ecx,', '[ebp+var_14]']
call ['?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_10]']
or ['eax,', '1']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
mov ['eax,', '[ebp-10h]']
and ['eax,', '1']
jz ['$LN6_0']
and ['dword', 'ptr', '[ebp-10h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
retn
endp
__ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-0Ch]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
jmp ['___CxxFrameHandler3']
endp
?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['0FFFFFFFFh']
push ['offset', '__ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
mov ['eax,', 'large', 'fs:0']
push ['eax']
sub ['esp,', '10h']
mov ['eax,', 'dword', 'ptr', 'ds:___security_cookie']
xor ['eax,', 'ebp']
push ['eax']
lea ['eax,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'eax']
mov ['[ebp+var_1C],', 'ecx']
mov ['[ebp+var_18],', '0']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
call ['?_Winerror_map@std@@YAPBDH@Z']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
cmp ['[ebp+var_10],', '0']
jz ['short', 'loc_939C']
mov ['ecx,', '[ebp+var_10]']
mov ['[ebp+Str],', 'ecx']
jmp ['short', 'loc_93A3']
mov ['[ebp+Str],', 'offset', '??_C@_0O@BFJCFAAK@unknown?5error?$AA@']
mov ['edx,', '[ebp+Str]']
push ['edx']
mov ['ecx,', '[ebp+arg_0]']
call ['??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z']
mov ['[ebp+var_4],', '0']
mov ['eax,', '[ebp+var_18]']
or ['eax,', '1']
mov ['[ebp+var_18],', 'eax']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+var_C]']
mov ['large', 'fs:0,', 'ecx']
pop ['ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['8']
endp
__unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
mov ['eax,', '[ebp-18h]']
and ['eax,', '1']
jz ['$LN6_1']
and ['dword', 'ptr', '[ebp-18h],', '0FFFFFFFEh']
mov ['ecx,', '[ebp+8]']
jmp ['??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ']
retn
endp
__ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
mov ['edx,', '[esp+arg_4]']
lea ['eax,', '[edx+0Ch]']
mov ['ecx,', '[edx-14h]']
xor ['ecx,', 'eax']
call ['@__security_check_cookie@4']
mov ['eax,', 'offset', '__ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z']
jmp ['___CxxFrameHandler3']
endp
?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
cmp ['[ebp+Size],', '0']
jnz ['short', 'loc_941A']
mov ['eax,', '[ebp+Dst]']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_9431']
mov ['ecx,', '[ebp+Size]']
push ['ecx']
mov ['edx,', '[ebp+Src]']
push ['edx']
mov ['eax,', '[ebp+Dst]']
push ['eax']
call ['_memmove']
add ['esp,', '0Ch']
mov ['[ebp+var_4],', 'eax']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?name@_Generic_error_category@std@@UBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_07DCLBNMLN@generic?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?name@_Iostream_error_category@std@@UBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_08LLGCOLLL@iostream?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?name@_System_error_category@std@@UBEPBDXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', 'offset', '??_C@_06FHFOAHML@system?$AA@']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?pointer_to@?$pointer_traits@PAU?$pair@$$CBHUStyle@@@std@@@std@@SAPAU?$pair@$$CBHUStyle@@@2@AAU32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$addressof@U?$pair@$$CBHUStyle@@@std@@@std@@YAPAU?$pair@$$CBHUStyle@@@0@AAU10@@Z']
add ['esp,', '4']
pop ['ebp']
retn
endp
?pointer_to@?$pointer_traits@PAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@SAPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@2@AAU32@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$addressof@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@YAPAU?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@0@AAU10@@Z']
add ['esp,', '4']
pop ['ebp']
retn
endp
?push_back@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEXABQAVScintillaEditView@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_8],', 'ecx']
mov ['eax,', '[ebp+arg_0]']
push ['eax']
call ['??$addressof@QAVScintillaEditView@@@std@@YAPBQAVScintillaEditView@@ABQAV1@@Z']
add ['esp,', '4']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Inside@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IBE_NPBQAVScintillaEditView@@@Z']
movzx ['ecx,', 'al']
test ['ecx,', 'ecx']
jz ['short', 'loc_9533']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
call ['??$addressof@QAVScintillaEditView@@@std@@YAPBQAVScintillaEditView@@ABQAV1@@Z']
add ['esp,', '4']
mov ['ecx,', '[ebp+var_8]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['[ebp+var_C],', 'eax']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[edx+8]']
cmp ['ecx,', '[eax+0Ch]']
jnz ['short', 'loc_94E5']
push ['1']
mov ['ecx,', '[ebp+var_8]']
call ['?_Reserve@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IAEXI@Z']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_range@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IBEXPAPAVScintillaEditView@@0@Z']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+4]']
mov ['edx,', '[ebp+var_C]']
lea ['eax,', '[ecx+edx*4]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
push ['edx']
lea ['eax,', '[ebp+var_1]']
push ['eax']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PAVScintillaEditView@@AAPAV1@@?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEXPAPAVScintillaEditView@@AAPAV2@@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
add ['edx,', '4']
mov ['eax,', '[ebp+var_8]']
mov ['[eax+8],', 'edx']
jmp ['short', 'loc_958E']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ecx+8]']
cmp ['eax,', '[edx+0Ch]']
jnz ['short', 'loc_954B']
push ['1']
mov ['ecx,', '[ebp+var_8]']
call ['?_Reserve@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IAEXI@Z']
mov ['ecx,', '[ebp+var_8]']
mov ['edx,', '[ecx+8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+8]']
push ['ecx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Orphan_range@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@IBEXPAPAVScintillaEditView@@0@Z']
mov ['edx,', '[ebp+arg_0]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+8]']
push ['ecx']
lea ['edx,', '[ebp+var_2]']
push ['edx']
mov ['ecx,', '[ebp+var_8]']
call ['?_Getal@?$_Vector_alloc@$0A@U?$_Vec_base_types@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@2@XZ']
mov ['ecx,', 'eax']
call ['??$construct@PAVScintillaEditView@@ABQAV1@@?$_Wrap_alloc@V?$allocator@PAVScintillaEditView@@@std@@@std@@QAEXPAPAVScintillaEditView@@ABQAV2@@Z']
mov ['eax,', '[ebp+var_8]']
mov ['ecx,', '[eax+8]']
add ['ecx,', '4']
mov ['edx,', '[ebp+var_8]']
mov ['[edx+8],', 'ecx']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?reSizeTo@Window@@UAEXAAUtagRECT@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx+8]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax]']
push ['ecx']
mov ['edx,', '[ebp+var_4]']
mov ['eax,', '[edx+0Ch]']
push ['eax']
call ['dword', 'ptr', 'ds:__imp__MoveWindow@24']
push ['0']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+18h]']
call ['eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?reSizeToWH@Window@@UAEXAAUtagRECT@@@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['1']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+0Ch]']
sub ['edx,', '[ecx+4]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[ebp+arg_0]']
mov ['edx,', '[eax+8]']
sub ['edx,', '[ecx]']
push ['edx']
mov ['eax,', '[ebp+arg_0]']
mov ['ecx,', '[eax+4]']
push ['ecx']
mov ['edx,', '[ebp+arg_0]']
mov ['eax,', '[edx]']
push ['eax']
mov ['ecx,', '[ebp+var_4]']
mov ['edx,', '[ecx+0Ch]']
push ['edx']
call ['dword', 'ptr', 'ds:__imp__MoveWindow@24']
push ['0']
mov ['eax,', '[ebp+var_4]']
mov ['edx,', '[eax]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[edx+18h]']
call ['eax']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?redraw@Window@@UBEX_N@Z proc near      
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
push ['1']
push ['0']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__InvalidateRect@12']
movzx ['edx,', '[ebp+arg_0]']
test ['edx,', 'edx']
jz ['short', 'loc_965D']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[eax+0Ch]']
push ['ecx']
call ['dword', 'ptr', 'ds:__imp__UpdateWindow@4']
mov ['esp,', 'ebp']
pop ['ebp']
retn ['4']
endp
?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax+14h]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?size@?$vector@PAVScintillaEditView@@V?$allocator@PAVScintillaEditView@@@std@@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?size@?$vector@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@U?$_Wrap_alloc@V?$allocator@V?$_List_unchecked_iterator@V?$_List_val@U?$_List_simple_types@U?$pair@QAVBuffer@@PAV?$unordered_map@HUStyle@@U?$hash@H@std@@U?$equal_to@H@3@V?$allocator@U?$pair@$$CBHUStyle@@@std@@@3@@std@@@std@@@std@@@std@@@std@@@std@@@2@@std@@QBEIXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['ecx,', '[ebp+var_4]']
mov ['eax,', '[eax+8]']
sub ['eax,', '[ecx+4]']
sar ['eax,', '2']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?system_category@std@@YAABVerror_category@1@XZ proc near
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', 'offset', '?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A']
pop ['ebp']
retn
endp
?value@error_code@std@@QBEHXZ proc near 
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?value@error_condition@std@@QBEHXZ proc near
push ['ebp']
mov ['ebp,', 'esp']
push ['ecx']
mov ['[ebp+var_4],', 'ecx']
mov ['eax,', '[ebp+var_4]']
mov ['eax,', '[eax]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
_hypot          proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '8']
movsd ['xmm0,', '[ebp+arg_8]']
movsd ['[esp+8+var_8],', 'xmm0']
sub ['esp,', '8']
movsd ['xmm0,', '[ebp+arg_0]']
movsd ['[esp+10h+var_10],', 'xmm0']
call ['__hypot']
add ['esp,', '10h']
pop ['ebp']
retn
endp
_wmemcpy        proc near               
push ['ebp']
mov ['ebp,', 'esp']
mov ['eax,', '[ebp+arg_8]']
shl ['eax,', '1']
push ['eax']
mov ['ecx,', '[ebp+Src]']
push ['ecx']
mov ['edx,', '[ebp+Dst]']
push ['edx']
call ['_memcpy']
add ['esp,', '0Ch']
pop ['ebp']
retn
endp
