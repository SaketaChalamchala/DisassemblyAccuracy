?UTF8Length@@YAIPB_WI@Z proc near       
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_1F']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['short', 'loc_75']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
test ['ecx,', 'ecx']
jz ['short', 'loc_75']
mov ['edx,', '[ebp+var_8]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
mov ['[ebp+var_C],', 'ecx']
cmp ['[ebp+var_C],', '80h']
jnb ['short', 'loc_56']
mov ['edx,', '[ebp+var_4]']
add ['edx,', '1']
mov ['[ebp+var_4],', 'edx']
jmp ['short', 'loc_73']
cmp ['[ebp+var_C],', '800h']
jnb ['short', 'loc_6A']
mov ['eax,', '[ebp+var_4]']
add ['eax,', '2']
mov ['[ebp+var_4],', 'eax']
jmp ['short', 'loc_73']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '3']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_16']
mov ['eax,', '[ebp+var_4]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?UTF8FromUCS2@@YAXPB_WIPADI@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_4],', '0']
mov ['[ebp+var_C],', '0']
jmp ['short', 'loc_9F']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['loc_190']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
test ['ecx,', 'ecx']
jz ['loc_190']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_0]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
mov ['[ebp+var_8],', 'ecx']
cmp ['[ebp+var_8],', '80h']
jnb ['short', 'loc_EC']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '[ebp+var_4]']
mov ['al,', 'byte', 'ptr', '[ebp+var_8]']
mov ['[edx],', 'al']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
jmp ['loc_18B']
cmp ['[ebp+var_8],', '800h']
jnb ['short', 'loc_131']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '6']
or ['edx,', '0C0h']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+var_4]']
mov ['[eax],', 'dl']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3Fh']
or ['edx,', '80h']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+var_4]']
mov ['[eax],', 'dl']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
jmp ['short', 'loc_18B']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '0Ch']
or ['edx,', '0E0h']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+var_4]']
mov ['[eax],', 'dl']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_8]']
shr ['edx,', '6']
and ['edx,', '3Fh']
or ['edx,', '80h']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+var_4]']
mov ['[eax],', 'dl']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
mov ['edx,', '[ebp+var_8]']
and ['edx,', '3Fh']
or ['edx,', '80h']
mov ['eax,', '[ebp+arg_8]']
add ['eax,', '[ebp+var_4]']
mov ['[eax],', 'dl']
mov ['ecx,', '[ebp+var_4]']
add ['ecx,', '1']
mov ['[ebp+var_4],', 'ecx']
jmp ['loc_96']
mov ['edx,', '[ebp+arg_8]']
add ['edx,', '[ebp+arg_C]']
mov ['byte', 'ptr', '[edx],', '0']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?UCS2Length@@YAIPBDI@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '0Ch']
mov ['[ebp+var_C],', '0']
mov ['[ebp+var_8],', '0']
jmp ['short', 'loc_1BF']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['short', 'loc_1F5']
mov ['edx,', '[ebp+arg_0]']
add ['edx,', '[ebp+var_8]']
mov ['al,', '[edx]']
mov ['[ebp+var_1],', 'al']
movzx ['ecx,', '[ebp+var_1]']
cmp ['ecx,', '80h']
jl ['short', 'loc_1EA']
movzx ['edx,', '[ebp+var_1]']
cmp ['edx,', '0C0h']
jle ['short', 'loc_1F3']
mov ['eax,', '[ebp+var_C]']
add ['eax,', '1']
mov ['[ebp+var_C],', 'eax']
jmp ['short', 'loc_1B6']
mov ['eax,', '[ebp+var_C]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?UCS2FromUTF8@@YAIPBDIPA_WI@Z proc near 
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '10h']
mov ['[ebp+var_C],', '0']
mov ['eax,', '[ebp+arg_0]']
mov ['[ebp+var_10],', 'eax']
mov ['[ebp+var_8],', '0']
mov ['ecx,', '[ebp+var_8]']
cmp ['ecx,', '[ebp+arg_4]']
jnb ['loc_33F']
mov ['edx,', '[ebp+var_C]']
cmp ['edx,', '[ebp+arg_C]']
jnb ['loc_33F']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '[ebp+var_8]']
mov ['cl,', '[eax]']
mov ['[ebp+var_1],', 'cl']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
movzx ['eax,', '[ebp+var_1]']
cmp ['eax,', '80h']
jge ['short', 'loc_265']
movzx ['cx,', '[ebp+var_1]']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_8]']
mov ['[eax+edx*2],', 'cx']
jmp ['loc_331']
movzx ['ecx,', '[ebp+var_1]']
cmp ['ecx,', '0E0h']
jge ['short', 'loc_2B8']
movzx ['edx,', '[ebp+var_1]']
and ['edx,', '1Fh']
shl ['edx,', '6']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx+eax*2],', 'dx']
mov ['edx,', '[ebp+var_10]']
add ['edx,', '[ebp+var_8]']
mov ['al,', '[edx]']
mov ['[ebp+var_1],', 'al']
mov ['ecx,', '[ebp+var_8]']
add ['ecx,', '1']
mov ['[ebp+var_8],', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_8]']
movzx ['ecx,', 'word', 'ptr', '[eax+edx*2]']
movzx ['edx,', '[ebp+var_1]']
and ['edx,', '7Fh']
add ['ecx,', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx+eax*2],', 'cx']
jmp ['short', 'loc_331']
movzx ['eax,', '[ebp+var_1]']
and ['eax,', '0Fh']
shl ['eax,', '0Ch']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+arg_8]']
mov ['[edx+ecx*2],', 'ax']
mov ['eax,', '[ebp+var_10]']
add ['eax,', '[ebp+var_8]']
mov ['cl,', '[eax]']
mov ['[ebp+var_1],', 'cl']
mov ['edx,', '[ebp+var_8]']
add ['edx,', '1']
mov ['[ebp+var_8],', 'edx']
mov ['eax,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_8]']
movzx ['edx,', 'word', 'ptr', '[ecx+eax*2]']
movzx ['eax,', '[ebp+var_1]']
and ['eax,', '7Fh']
shl ['eax,', '6']
add ['edx,', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['eax,', '[ebp+arg_8]']
mov ['[eax+ecx*2],', 'dx']
mov ['ecx,', '[ebp+var_10]']
add ['ecx,', '[ebp+var_8]']
mov ['dl,', '[ecx]']
mov ['[ebp+var_1],', 'dl']
mov ['eax,', '[ebp+var_8]']
add ['eax,', '1']
mov ['[ebp+var_8],', 'eax']
mov ['ecx,', '[ebp+var_C]']
mov ['edx,', '[ebp+arg_8]']
movzx ['eax,', 'word', 'ptr', '[edx+ecx*2]']
movzx ['ecx,', '[ebp+var_1]']
and ['ecx,', '7Fh']
add ['eax,', 'ecx']
mov ['edx,', '[ebp+var_C]']
mov ['ecx,', '[ebp+arg_8]']
mov ['[ecx+edx*2],', 'ax']
mov ['edx,', '[ebp+var_C]']
add ['edx,', '1']
mov ['[ebp+var_C],', 'edx']
jmp ['loc_21A']
mov ['eax,', '[ebp+var_C]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?ascii_to_utf8@@YAIPBDIPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
cmp ['[ebp+cbMultiByte],', '0']
jz ['short', 'loc_362']
cmp ['[ebp+lpMultiByteStr],', '0']
jnz ['short', 'loc_378']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+arg_8]']
mov ['byte', 'ptr', '[edx+ecx],', '0']
xor ['eax,', 'eax']
jmp ['loc_41A']
imul ['eax,', '[ebp+cbMultiByte],', '3']
add ['eax,', '1']
xor ['ecx,', 'ecx']
mov ['edx,', '2']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_10],', 'eax']
mov ['eax,', '[ebp+var_10]']
mov ['[ebp+lpWideCharStr],', 'eax']
cmp ['[ebp+lpWideCharStr],', '0']
jnz ['short', 'loc_3BA']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+arg_8]']
mov ['byte', 'ptr', '[eax+edx],', '0']
xor ['eax,', 'eax']
jmp ['short', 'loc_41A']
mov ['ecx,', '[ebp+cbMultiByte]']
add ['ecx,', '1']
push ['ecx']
mov ['edx,', '[ebp+lpWideCharStr]']
push ['edx']
mov ['eax,', '[ebp+cbMultiByte]']
push ['eax']
mov ['ecx,', '[ebp+lpMultiByteStr]']
push ['ecx']
push ['0']
push ['0']
call ['dword', 'ptr', 'ds:__imp__MultiByteToWideChar@24']
mov ['[ebp+var_8],', 'eax']
mov ['edx,', '[ebp+var_8]']
push ['edx']
mov ['eax,', '[ebp+lpWideCharStr]']
push ['eax']
call ['?UTF8Length@@YAIPB_WI@Z']
add ['esp,', '8']
mov ['[ebp+var_C],', 'eax']
mov ['ecx,', '[ebp+var_C]']
push ['ecx']
mov ['edx,', '[ebp+arg_8]']
push ['edx']
mov ['eax,', '[ebp+var_8]']
push ['eax']
mov ['ecx,', '[ebp+lpWideCharStr]']
push ['ecx']
call ['?UTF8FromUCS2@@YAXPB_WIPADI@Z']
add ['esp,', '10h']
mov ['edx,', '[ebp+lpWideCharStr]']
mov ['[ebp+var_14],', 'edx']
mov ['eax,', '[ebp+var_14]']
push ['eax']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_C]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
?utf8_to_ascii@@YAHPBDIPAD@Z proc near
push ['ebp']
mov ['ebp,', 'esp']
sub ['esp,', '14h']
cmp ['[ebp+arg_4],', '0']
jz ['short', 'loc_432']
cmp ['[ebp+arg_0],', '0']
jnz ['short', 'loc_448']
mov ['eax,', '1']
imul ['ecx,', 'eax,', '0']
mov ['edx,', '[ebp+lpMultiByteStr]']
mov ['byte', 'ptr', '[edx+ecx],', '0']
xor ['eax,', 'eax']
jmp ['loc_4E9']
mov ['eax,', '[ebp+arg_4]']
add ['eax,', '1']
xor ['ecx,', 'ecx']
mov ['edx,', '2']
mul ['edx']
seto ['cl']
neg ['ecx']
or ['ecx,', 'eax']
push ['ecx']
call ['??2@YAPAXI@Z']
add ['esp,', '4']
mov ['[ebp+var_C],', 'eax']
mov ['eax,', '[ebp+var_C]']
mov ['[ebp+lpWideCharStr],', 'eax']
cmp ['[ebp+lpWideCharStr],', '0']
jnz ['short', 'loc_489']
mov ['ecx,', '1']
imul ['edx,', 'ecx,', '0']
mov ['eax,', '[ebp+lpMultiByteStr]']
mov ['byte', 'ptr', '[eax+edx],', '0']
xor ['eax,', 'eax']
jmp ['short', 'loc_4E9']
mov ['ecx,', '[ebp+arg_4]']
push ['ecx']
mov ['edx,', '[ebp+lpWideCharStr]']
push ['edx']
mov ['eax,', '[ebp+arg_4]']
push ['eax']
mov ['ecx,', '[ebp+arg_0]']
push ['ecx']
call ['?UCS2FromUTF8@@YAIPBDIPA_WI@Z']
add ['esp,', '10h']
mov ['[ebp+cchWideChar],', 'eax']
xor ['edx,', 'edx']
mov ['eax,', '[ebp+cchWideChar]']
mov ['ecx,', '[ebp+lpWideCharStr]']
mov ['[ecx+eax*2],', 'dx']
push ['0']
push ['0']
mov ['edx,', '[ebp+cchWideChar]']
add ['edx,', '1']
push ['edx']
mov ['eax,', '[ebp+lpMultiByteStr]']
push ['eax']
mov ['ecx,', '[ebp+cchWideChar]']
push ['ecx']
mov ['edx,', '[ebp+lpWideCharStr]']
push ['edx']
push ['0']
push ['0']
call ['dword', 'ptr', 'ds:__imp__WideCharToMultiByte@32']
mov ['[ebp+var_14],', 'eax']
mov ['eax,', '[ebp+lpWideCharStr]']
mov ['[ebp+var_10],', 'eax']
mov ['ecx,', '[ebp+var_10]']
push ['ecx']
call ['??3@YAXPAX@Z']
add ['esp,', '4']
mov ['eax,', '[ebp+var_14]']
mov ['esp,', 'ebp']
pop ['ebp']
retn
endp
