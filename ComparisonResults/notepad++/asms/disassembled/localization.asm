.rdata:00000000 ;
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ; |   This file has been generated by The Interactive Disassembler (IDA)    |
.rdata:00000000 ; |           Copyright (c) 2015 Hex-Rays, <support@hex-rays.com>           |
.rdata:00000000 ; |                      License info: 48-3677-7074-51                      |
.rdata:00000000 ; |             Michalis Polychronakis, Stony Brook University              |
.rdata:00000000 ; +-------------------------------------------------------------------------+
.rdata:00000000 ;
.rdata:00000000 ; Input MD5   : EF9AA998022CC87379571FB8D71C5318
.rdata:00000000 ; Input CRC32 : 096C3A44
.rdata:00000000
.rdata:00000000 ; File Name   : C:\workspace\notepad-plus-plus-6.7.9.2\PowerEditor\visual.net\Unicode Debug\localization.obj
.rdata:00000000 ; Format      : COFF (X386MAGIC)
.rdata:00000000 ; includelib "uuid.lib"
.rdata:00000000 ; includelib "libcpmtd"
.rdata:00000000 ; must resolve: ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.rdata:00000000 ; must resolve: ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.rdata:00000000 ; must resolve: ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@D@std@@2V0locale@2@A
.rdata:00000000 ; must resolve: ?id@?$numpunct@_W@std@@2V0locale@2@A
.rdata:00000000 ; includelib "LIBCMTD"
.rdata:00000000 ; includelib "OLDNAMES"
.rdata:00000000
.rdata:00000000                 include uni.inc ; see unicode subdir of ida for info on unicode
.rdata:00000000
.rdata:00000000                 .686p
.rdata:00000000                 .mmx
.rdata:00000000                 .model flat
.rdata:00000000
.rdata:00000000 ; ===========================================================================
.rdata:00000000
.rdata:00000000 ; Segment type: Pure data
.rdata:00000000 ; Segment permissions: Read
.rdata:00000000 _rdata          segment dword public 'DATA' use32
.rdata:00000000                 assume cs:_rdata
.rdata:00000000 ; char _SG169992[]
.rdata:00000000 $SG169992       db 'Dialog',0           ; DATA XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *):loc_29DDo
.rdata:00000007                 align 4
.rdata:00000008 ; char _SG169997[]
.rdata:00000008 $SG169997       db 'title',0            ; DATA XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+74o
.rdata:0000000E                 align 10h
.rdata:00000010 ; char _SG170002[]
.rdata:00000010 $SG170002       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *):loc_2A9Ao
.rdata:00000015                 align 4
.rdata:00000018 ; char _SG170006[]
.rdata:00000018 $SG170006       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *):loc_2AACo
.rdata:0000001D                 align 10h
.rdata:00000020 ; char _SG170010[]
.rdata:00000020 $SG170010       dd offset loc_6468+1    ; DATA XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+125o
.rdata:00000024 ; char _SG170012[]
.rdata:00000024 $SG170012       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+135o
.rdata:00000029                 align 4
.rdata:0000002C ; wchar_t _SG170023
.rdata:0000002C $SG170023       dw 0                    ; DATA XREF: NativeLangSpeaker::getMsgBoxLang(char const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+9o
.rdata:0000002E                 db    0
.rdata:0000002F                 db    0
.rdata:00000030 ; wchar_t _SG170024
.rdata:00000030 $SG170024       dw 0                    ; DATA XREF: NativeLangSpeaker::getMsgBoxLang(char const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+16o
.rdata:00000032                 db    0
.rdata:00000033                 db    0
.rdata:00000034 ; char _SG170027[]
.rdata:00000034 $SG170027       db 'MessageBox',0       ; DATA XREF: NativeLangSpeaker::getMsgBoxLang(char const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_4B42o
.rdata:0000003F                 align 10h
.rdata:00000040 ; char _SG170032[]
.rdata:00000040 $SG170032       db 'title',0            ; DATA XREF: NativeLangSpeaker::getMsgBoxLang(char const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+79o
.rdata:00000046                 align 4
.rdata:00000048 ; char _SG170034[]
.rdata:00000048 $SG170034       db 'message',0          ; DATA XREF: NativeLangSpeaker::getMsgBoxLang(char const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+90o
.rdata:00000050 $SG143412       db '12 12 56 1',0       ; DATA XREF: .data:_acTop_xpmo
.rdata:0000005B                 align 4
.rdata:0000005C $SG143413       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:0000114Co
.rdata:00000068 $SG143414       db '.',9,'c #8AB2E9',0  ; DATA XREF: .data:00001150o
.rdata:00000074 $SG143415       db '+',9,'c #CCDCF6',0  ; DATA XREF: .data:00001154o
.rdata:00000080 $SG143416       db '@',9,'c #80ABEA',0  ; DATA XREF: .data:00001158o
.rdata:0000008C $SG143417       db '#',9,'c #7DA9E8',0  ; DATA XREF: .data:0000115Co
.rdata:00000098 $SG143418       db '$',9,'c #C7DAF3',0  ; DATA XREF: .data:00001160o
.rdata:000000A4 $SG143419       db '%',9,'c #79A7E6',0  ; DATA XREF: .data:00001164o
.rdata:000000B0 $SG143420       db '&',9,'c #ADC8EF',0  ; DATA XREF: .data:00001168o
.rdata:000000BC ; char _SG170045[]
.rdata:000000BC $SG170045       db 'ProjectManager',0   ; DATA XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *):loc_4C9Bo
.rdata:000000CB                 align 4
.rdata:000000CC $SG143421       db '*',9,'c #87B0E8',0  ; DATA XREF: .data:0000116Co
.rdata:000000D8 $SG143422       db '=',9,'c #BBD2F0',0  ; DATA XREF: .data:00001170o
.rdata:000000E4 ; char _SG170047[]
.rdata:000000E4 $SG170047       db 'Menus',0            ; DATA XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *):loc_4CD7o
.rdata:000000EA                 align 4
.rdata:000000EC $SG143423       db '-',9,'c #6EA0E2',0  ; DATA XREF: .data:00001174o
.rdata:000000F8 $SG143424       db ';',9,'c #A8C7EE',0  ; DATA XREF: .data:00001178o
.rdata:00000104 $SG143425       db '>',9,'c #A3C2ED',0  ; DATA XREF: .data:0000117Co
.rdata:00000110 $SG143426       db ',',9,'c #75A4E3',0  ; DATA XREF: .data:00001180o
.rdata:0000011C $SG143427       db 27h,9,'c #A7C4EB',0  ; DATA XREF: .data:00001184o
.rdata:00000128 ; char _SG170052[]
.rdata:00000128 $SG170052       db 'Item',0             ; DATA XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+111o
.rdata:0000012D                 align 10h
.rdata:00000130 $SG143428       db ')',9,'c #6297E1',0  ; DATA XREF: .data:00001188o
.rdata:0000013C $SG143429       db '!',9,'c #A1C1EC',0  ; DATA XREF: .data:0000118Co
.rdata:00000148 $SG143430       db '~',9,'c #92B7E8',0  ; DATA XREF: .data:00001190o
.rdata:00000154 $SG143431       db '{',9,'c #99BBE9',0  ; DATA XREF: .data:00001194o
.rdata:00000160 ; char _SG170056[]
.rdata:00000160 $SG170056       db 'Item',0             ; DATA XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *):loc_4D63o
.rdata:00000165                 align 4
.rdata:00000168 $SG143432       db ']',9,'c #6197DD',0  ; DATA XREF: .data:00001198o
.rdata:00000174 $SG143433       db '^',9,'c #96B9E6',0  ; DATA XREF: .data:0000119Co
.rdata:00000180 $SG143434       db '/',9,'c #538EDB',0  ; DATA XREF: .data:000011A0o
.rdata:0000018C $SG143435       db '(',9,'c #99BBEA',0  ; DATA XREF: .data:000011A4o
.rdata:00000198 ; char _SG170060[]
.rdata:00000198 $SG170060       dd offset loc_6468+1    ; DATA XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+148o
.rdata:0000019C $SG143436       db '_',9,'c #80AAE3',0  ; DATA XREF: .data:000011A8o
.rdata:000001A8 $SG143437       db ':',9,'c #81ABE3',0  ; DATA XREF: .data:000011ACo
.rdata:000001B4 ; char _SG170062[]
.rdata:000001B4 $SG170062       db 'name',0             ; DATA XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+166o
.rdata:000001B9                 align 4
.rdata:000001BC $SG143438       db '<',9,'c #8AB1E4',0  ; DATA XREF: .data:000011B0o
.rdata:000001C8 $SG143439       db '[',9,'c #4B88D6',0  ; DATA XREF: .data:000011B4o
.rdata:000001D4 $SG143440       db '}',9,'c #4882D1',0  ; DATA XREF: .data:000011B8o
.rdata:000001E0 $SG143441       db '|',9,'c #4384D6',0  ; DATA XREF: .data:000011BCo
.rdata:000001EC $SG143442       db '1',9,'c #90B5E7',0  ; DATA XREF: .data:000011C0o
.rdata:000001F8 $SG143443       db '2',9,'c #74A3E0',0  ; DATA XREF: .data:000011C4o
.rdata:00000204 $SG143444       db '3',9,'c #77A4E0',0  ; DATA XREF: .data:000011C8o
.rdata:00000210 $SG143445       db '4',9,'c #81ABE2',0  ; DATA XREF: .data:000011CCo
.rdata:0000021C $SG143446       db '5',9,'c #437FD3',0  ; DATA XREF: .data:000011D0o
.rdata:00000228 $SG143447       db '6',9,'c #7FA2DF',0  ; DATA XREF: .data:000011D4o
.rdata:00000234 $SG143448       db '7',9,'c #3577D2',0  ; DATA XREF: .data:000011D8o
.rdata:00000240 $SG143449       db '8',9,'c #87AFE4',0  ; DATA XREF: .data:000011DCo
.rdata:0000024C $SG143450       db '9',9,'c #72A1DF',0  ; DATA XREF: .data:000011E0o
.rdata:00000258 $SG143451       db '0',9,'c #7CA9E1',0  ; DATA XREF: .data:000011E4o
.rdata:00000264 $SG143452       db 'a',9,'c #3F7AD0',0  ; DATA XREF: .data:000011E8o
.rdata:00000270 $SG143453       db 'b',9,'c #85A4DE',0  ; DATA XREF: .data:000011ECo
.rdata:0000027C ; char _SG170078[]
.rdata:0000027C $SG170078       db 'name',0             ; DATA XREF: NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *):loc_4F25o
.rdata:00000281                 align 4
.rdata:00000284 $SG143454       db 'c',9,'c #FBFCFE',0  ; DATA XREF: .data:000011F0o
.rdata:00000290 $SG143455       db 'd',9,'c #236ECD',0  ; DATA XREF: .data:000011F4o
.rdata:0000029C $SG143456       db 'e',9,'c #7EA8E1',0  ; DATA XREF: .data:000011F8o
.rdata:000002A8 $SG143457       db 'f',9,'c #79A6E0',0  ; DATA XREF: .data:000011FCo
.rdata:000002B4 $SG143458       db 'g',9,'c #3D77D0',0  ; DATA XREF: .data:00001200o
.rdata:000002C0 $SG143459       db 'h',9,'c #87A4DC',0  ; DATA XREF: .data:00001204o
.rdata:000002CC $SG143460       db 'i',9,'c #1A62C9',0  ; DATA XREF: .data:00001208o
.rdata:000002D8 $SG143461       db 'j',9,'c #75A3DF',0  ; DATA XREF: .data:0000120Co
.rdata:000002E4 $SG143462       db 'k',9,'c #3C74CF',0  ; DATA XREF: .data:00001210o
.rdata:000002F0 $SG143463       db 'l',9,'c #8DA6DE',0  ; DATA XREF: .data:00001214o
.rdata:000002FC $SG143464       db 'm',9,'c #1859C4',0  ; DATA XREF: .data:00001218o
.rdata:00000308 $SG143465       db 'n',9,'c #3B71CC',0  ; DATA XREF: .data:0000121Co
.rdata:00000314 $SG143466       db 'o',9,'c #8EA5DD',0  ; DATA XREF: .data:00001220o
.rdata:00000320 $SG143467       db 'p',9,'c #164EC0',0  ; DATA XREF: .data:00001224o
.rdata:0000032C $SG143468       db 'q',9,'c #92A7DD',0  ; DATA XREF: .data:00001228o
.rdata:00000338 $SG143469       db '    .+      ',0     ; DATA XREF: .data:0000122Co
.rdata:00000345                 align 4
.rdata:00000348 $SG143470       db '    @#$     ',0     ; DATA XREF: .data:00001230o
.rdata:00000355                 align 4
.rdata:00000358 $SG143471       db '    %&*=    ',0     ; DATA XREF: .data:00001234o
.rdata:00000365                 align 4
.rdata:00000368 $SG143472       db '    -;>,',27h,'   ',0 ; DATA XREF: .data:00001238o
.rdata:00000375                 align 4
.rdata:00000378 $SG143473       db '    )!~{]^  ',0     ; DATA XREF: .data:0000123Co
.rdata:00000385                 align 4
.rdata:00000388 ; wchar_t _SG170098
.rdata:00000388 $SG170098:                              ; DATA XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *):loc_5052o
.rdata:00000388                 unicode 0, <$INT_REPLACE$>,0
.rdata:000003A4 $SG143474       db '    /(_:<[} ',0     ; DATA XREF: .data:00001240o
.rdata:000003B1                 align 4
.rdata:000003B4 $SG143475       db '    |123456 ',0     ; DATA XREF: .data:00001244o
.rdata:000003C1                 align 4
.rdata:000003C4 $SG143476       db '    7890abc ',0     ; DATA XREF: .data:00001248o
.rdata:000003D1                 align 4
.rdata:000003D4 $SG143477       db '    defgh   ',0     ; DATA XREF: .data:0000124Co
.rdata:000003E1                 align 4
.rdata:000003E4 $SG143478       db '    ijkl    ',0     ; DATA XREF: .data:00001250o
.rdata:000003F1                 align 4
.rdata:000003F4 ; wchar_t _SG170103
.rdata:000003F4 $SG170103:                              ; DATA XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+15Co
.rdata:000003F4                 unicode 0, <$INT_REPLACE$>,0
.rdata:00000410 $SG143479       db '    mno     ',0     ; DATA XREF: .data:00001254o
.rdata:0000041D                 align 10h
.rdata:00000420 $SG143480       db '    pq      ',0     ; DATA XREF: .data:00001258o
.rdata:0000042D                 align 10h
.rdata:00000430 $SG143482       db '12 12 54 1',0       ; DATA XREF: .data:_acBottom_xpmo
.rdata:0000043B                 align 4
.rdata:0000043C $SG143483       db ' ',9,'c #FFFFFF',0  ; DATA XREF: .data:00001264o
.rdata:00000448 $SG143484       db '.',9,'c #C4D7F3',0  ; DATA XREF: .data:00001268o
.rdata:00000454 ; wchar_t _SG170109
.rdata:00000454 $SG170109:                              ; DATA XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+253o
.rdata:00000454                 unicode 0, <$STR_REPLACE$>,0
.rdata:00000470 $SG143485       db '+',9,'c #72A1E3',0  ; DATA XREF: .data:0000126Co
.rdata:0000047C $SG143486       db '@',9,'c #C1D6F2',0  ; DATA XREF: .data:00001270o
.rdata:00000488 $SG143487       db '#',9,'c #6397E1',0  ; DATA XREF: .data:00001274o
.rdata:00000494 $SG143488       db '$',9,'c #5990DD',0  ; DATA XREF: .data:00001278o
.rdata:000004A0 $SG143489       db '%',9,'c #BBD2F0',0  ; DATA XREF: .data:0000127Co
.rdata:000004AC ; wchar_t _SG170114
.rdata:000004AC $SG170114:                              ; DATA XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+30Eo
.rdata:000004AC                 unicode 0, <$STR_REPLACE$>,0
.rdata:000004C8 $SG143490       db '&',9,'c #7AA6E5',0  ; DATA XREF: .data:00001280o
.rdata:000004D4 $SG143491       db '*',9,'c #9ABDEA',0  ; DATA XREF: .data:00001284o
.rdata:000004E0 $SG143492       db '=',9,'c #4A87D9',0  ; DATA XREF: .data:00001288o
.rdata:000004EC $SG143493       db '-',9,'c #B1CAEE',0  ; DATA XREF: .data:0000128Co
.rdata:000004F8 $SG143494       db ';',9,'c #75A4E3',0  ; DATA XREF: .data:00001290o
.rdata:00000504 $SG143495       db '>',9,'c #99BBE9',0  ; DATA XREF: .data:00001294o
.rdata:00000510 $SG143496       db ',',9,'c #95B9E8',0  ; DATA XREF: .data:00001298o
.rdata:0000051C $SG143497       db 27h,9,'c #3A7CD4',0  ; DATA XREF: .data:0000129Co
.rdata:00000528 $SG143498       db ')',9,'c #A9C6EC',0  ; DATA XREF: .data:000012A0o
.rdata:00000534 $SG143499       db '!',9,'c #71A0E0',0  ; DATA XREF: .data:000012A4o
.rdata:00000540 $SG143500       db '~',9,'c #86AFE5',0  ; DATA XREF: .data:000012A8o
.rdata:0000054C $SG143501       db '{',9,'c #8DB2E6',0  ; DATA XREF: .data:000012ACo
.rdata:00000558 $SG143502       db ']',9,'c #2A72CF',0  ; DATA XREF: .data:000012B0o
.rdata:00000564 $SG143503       db '^',9,'c #73A0E0',0  ; DATA XREF: .data:000012B4o
.rdata:00000570 $SG143504       db '/',9,'c #6B9DE0',0  ; DATA XREF: .data:000012B8o
.rdata:0000057C $SG143505       db '(',9,'c #95B8E8',0  ; DATA XREF: .data:000012BCo
.rdata:00000588 $SG143506       db '_',9,'c #81ABE3',0  ; DATA XREF: .data:000012C0o
.rdata:00000594 $SG143507       db ':',9,'c #72A1DF',0  ; DATA XREF: .data:000012C4o
.rdata:000005A0 $SG143508       db '<',9,'c #83ADE3',0  ; DATA XREF: .data:000012C8o
.rdata:000005AC $SG143509       db '[',9,'c #1B65C9',0  ; DATA XREF: .data:000012CCo
.rdata:000005B8 $SG143510       db '}',9,'c #5F95DC',0  ; DATA XREF: .data:000012D0o
.rdata:000005C4 $SG143511       db '|',9,'c #8BB3E5',0  ; DATA XREF: .data:000012D4o
.rdata:000005D0 $SG143512       db '1',9,'c #77A4E0',0  ; DATA XREF: .data:000012D8o
.rdata:000005DC $SG143513       db '2',9,'c #679ADC',0  ; DATA XREF: .data:000012DCo
.rdata:000005E8 $SG143514       db '3',9,'c #7AA6E1',0  ; DATA XREF: .data:000012E0o
.rdata:000005F4 $SG143515       db '4',9,'c #195CC6',0  ; DATA XREF: .data:000012E4o
.rdata:00000600 $SG143516       db '5',9,'c #FCFDFE',0  ; DATA XREF: .data:000012E8o
.rdata:0000060C $SG143517       db '6',9,'c #8DB2E4',0  ; DATA XREF: .data:000012ECo
.rdata:00000618 $SG143518       db '7',9,'c #4885D6',0  ; DATA XREF: .data:000012F0o
.rdata:00000624 $SG143519       db '8',9,'c #7CA9E1',0  ; DATA XREF: .data:000012F4o
.rdata:00000630 $SG143520       db '9',9,'c #6698DB',0  ; DATA XREF: .data:000012F8o
.rdata:0000063C $SG143521       db '0',9,'c #71A1DE',0  ; DATA XREF: .data:000012FCo
.rdata:00000648 $SG143522       db 'a',9,'c #1752C0',0  ; DATA XREF: .data:00001300o
.rdata:00000654 $SG143523       db 'b',9,'c #88ABE0',0  ; DATA XREF: .data:00001304o
.rdata:00000660 $SG143524       db 'c',9,'c #3D77D0',0  ; DATA XREF: .data:00001308o
.rdata:0000066C $SG143525       db 'd',9,'c #6E9FDD',0  ; DATA XREF: .data:0000130Co
.rdata:00000678 $SG143526       db 'e',9,'c #699BDC',0  ; DATA XREF: .data:00001310o
.rdata:00000684 $SG143527       db 'f',9,'c #1547BD',0  ; DATA XREF: .data:00001314o
.rdata:00000690 $SG143528       db 'g',9,'c #8DA6DE',0  ; DATA XREF: .data:00001318o
.rdata:0000069C $SG143529       db 'h',9,'c #376BC9',0  ; DATA XREF: .data:0000131Co
.rdata:000006A8 $SG143530       db 'i',9,'c #6295DA',0  ; DATA XREF: .data:00001320o
.rdata:000006B4 $SG143531       db 'j',9,'c #1440B9',0  ; DATA XREF: .data:00001324o
.rdata:000006C0 $SG143532       db 'k',9,'c #8DA0DB',0  ; DATA XREF: .data:00001328o
.rdata:000006CC $SG143533       db 'l',9,'c #315FC4',0  ; DATA XREF: .data:0000132Co
.rdata:000006D8 $SG143534       db 'm',9,'c #1339B7',0  ; DATA XREF: .data:00001330o
.rdata:000006E4 $SG143535       db 'n',9,'c #909FDA',0  ; DATA XREF: .data:00001334o
.rdata:000006F0 $SG143536       db 'o',9,'c #1233B4',0  ; DATA XREF: .data:00001338o
.rdata:000006FC $SG143537       db '         .+ ',0     ; DATA XREF: .data:0000133Co
.rdata:00000709                 align 4
.rdata:0000070C $SG143538       db '        @#$ ',0     ; DATA XREF: .data:00001340o
.rdata:00000719                 align 4
.rdata:0000071C $SG143539       db '       %&*= L',0    ; DATA XREF: .data:00001344o
.rdata:0000072A                 align 4
.rdata:0000072C $SG143540       db '      -;>,',27h,' ',0 ; DATA XREF: .data:00001348o
.rdata:00000739                 align 4
.rdata:0000073C $SG143541       db '     )!>~{] ',0     ; DATA XREF: .data:0000134Co
.rdata:00000749                 align 4
.rdata:0000074C $SG143542       db '    ^/(_:<[ ',0     ; DATA XREF: .data:00001350o
.rdata:00000759                 align 4
.rdata:0000075C $SG143543       db '    (}|1234 ',0     ; DATA XREF: .data:00001354o
.rdata:00000769                 align 4
.rdata:0000076C $SG143544       db '    567890a ',0     ; DATA XREF: .data:00001358o
.rdata:00000779                 align 4
.rdata:0000077C $SG143545       db '      bcdef ',0     ; DATA XREF: .data:0000135Co
.rdata:00000789                 align 4
.rdata:0000078C $SG143546       db '       ghij ',0     ; DATA XREF: .data:00001360o
.rdata:00000799                 align 4
.rdata:0000079C $SG143547       db '        klm ',0     ; DATA XREF: .data:00001364o
.rdata:000007A9                 align 4
.rdata:000007AC $SG143548       db '         no ',0     ; DATA XREF: .data:00001368o
.rdata:000007B9                 align 4
.rdata:000007BC $SG143550       db '13 14 54 1',0       ; DATA XREF: .data:_bookmark_xpmo
.rdata:000007C7                 align 4
.rdata:000007C8 $SG143551       db ' ',9,'c None',0     ; DATA XREF: .data:00001374o
.rdata:000007D1                 align 4
.rdata:000007D4 $SG143552       db '.',9,'c #545254',0  ; DATA XREF: .data:00001378o
.rdata:000007E0 $SG143553       db '+',9,'c #3C3E3C',0  ; DATA XREF: .data:0000137Co
.rdata:000007EC $SG143554       db '@',9,'c #646464',0  ; DATA XREF: .data:00001380o
.rdata:000007F8 $SG143555       db '#',9,'c #A4A4A4',0  ; DATA XREF: .data:00001384o
.rdata:00000804 $SG143556       db '$',9,'c #B7B8B7',0  ; DATA XREF: .data:00001388o
.rdata:00000810 $SG143557       db '%',9,'c #747284',0  ; DATA XREF: .data:0000138Co
.rdata:0000081C $SG143558       db '&',9,'c #B4B2C4',0  ; DATA XREF: .data:00001390o
.rdata:00000828 $SG143559       db '*',9,'c #DCD7E4',0  ; DATA XREF: .data:00001394o
.rdata:00000834 $SG143560       db '=',9,'c #1C1A1C',0  ; DATA XREF: .data:00001398o
.rdata:00000840 $SG143561       db '-',9,'c #403E58',0  ; DATA XREF: .data:0000139Co
.rdata:0000084C $SG143562       db ';',9,'c #5C5A8C',0  ; DATA XREF: .data:000013A0o
.rdata:00000858 $SG143563       db '>',9,'c #7C7EAC',0  ; DATA XREF: .data:000013A4o
.rdata:00000864 $SG143564       db ',',9,'c #7C8EBC',0  ; DATA XREF: .data:000013A8o
.rdata:00000870 $SG143565       db 27h,9,'c #242644',0  ; DATA XREF: .data:000013ACo
.rdata:0000087C $SG143566       db ')',9,'c #282668',0  ; DATA XREF: .data:000013B0o
.rdata:00000888 $SG143567       db '!',9,'c #24367C',0  ; DATA XREF: .data:000013B4o
.rdata:00000894 $SG143568       db '~',9,'c #244A84',0  ; DATA XREF: .data:000013B8o
.rdata:000008A0 $SG143569       db '{',9,'c #2C5098',0  ; DATA XREF: .data:000013BCo
.rdata:000008AC $SG143570       db ']',9,'c #14162C',0  ; DATA XREF: .data:000013C0o
.rdata:000008B8 $SG143571       db '^',9,'c #142E7C',0  ; DATA XREF: .data:000013C4o
.rdata:000008C4 $SG143572       db '/',9,'c #143789',0  ; DATA XREF: .data:000013C8o
.rdata:000008D0 $SG143573       db '(',9,'c #204990',0  ; DATA XREF: .data:000013CCo
.rdata:000008DC $SG143574       db '_',9,'c #174091',0  ; DATA XREF: .data:000013D0o
.rdata:000008E8 $SG143575       db ':',9,'c #0C0630',0  ; DATA XREF: .data:000013D4o
.rdata:000008F4 $SG143576       db '<',9,'c #24327C',0  ; DATA XREF: .data:000013D8o
.rdata:00000900 $SG143577       db '[',9,'c #2450A0',0  ; DATA XREF: .data:000013DCo
.rdata:0000090C $SG143578       db '}',9,'c #345DB4',0  ; DATA XREF: .data:000013E0o
.rdata:00000918 $SG143579       db '|',9,'c #3C68B8',0  ; DATA XREF: .data:000013E4o
.rdata:00000924 $SG143580       db '1',9,'c #141244',0  ; DATA XREF: .data:000013E8o
.rdata:00000930 $SG143581       db '2',9,'c #24428C',0  ; DATA XREF: .data:000013ECo
.rdata:0000093C $SG143582       db '3',9,'c #3462B9',0  ; DATA XREF: .data:000013F0o
.rdata:00000948 $SG143583       db '4',9,'c #4470C4',0  ; DATA XREF: .data:000013F4o
.rdata:00000954 $SG143584       db '5',9,'c #4C7FD6',0  ; DATA XREF: .data:000013F8o
.rdata:00000960 $SG143585       db '6',9,'c #4472CC',0  ; DATA XREF: .data:000013FCo
.rdata:0000096C $SG143586       db '7',9,'c #24224C',0  ; DATA XREF: .data:00001400o
.rdata:00000978 $SG143587       db '8',9,'c #5C8DEC',0  ; DATA XREF: .data:00001404o
.rdata:00000984 $SG143588       db '9',9,'c #5C94F6',0  ; DATA XREF: .data:00001408o
.rdata:00000990 $SG143589       db '0',9,'c #5482DF',0  ; DATA XREF: .data:0000140Co
.rdata:0000099C $SG143590       db 'a',9,'c #619DF7',0  ; DATA XREF: .data:00001410o
.rdata:000009A8 $SG143591       db 'b',9,'c #6CA6FC',0  ; DATA XREF: .data:00001414o
.rdata:000009B4 $SG143592       db 'c',9,'c #64A2FC',0  ; DATA XREF: .data:00001418o
.rdata:000009C0 $SG143593       db 'd',9,'c #1C2E5C',0  ; DATA XREF: .data:0000141Co
.rdata:000009CC $SG143594       db 'e',9,'c #6CA2FC',0  ; DATA XREF: .data:00001420o
.rdata:000009D8 $SG143595       db 'f',9,'c #74B2FC',0  ; DATA XREF: .data:00001424o
.rdata:000009E4 $SG143596       db 'g',9,'c #7CB8FC',0  ; DATA XREF: .data:00001428o
.rdata:000009F0 $SG143597       db 'h',9,'c #1C3264',0  ; DATA XREF: .data:0000142Co
.rdata:000009FC $SG143598       db 'i',9,'c #346AD4',0  ; DATA XREF: .data:00001430o
.rdata:00000A08 $SG143599       db 'j',9,'c #7CBEFC',0  ; DATA XREF: .data:00001434o
.rdata:00000A14 $SG143600       db 'k',9,'c #3C72DC',0  ; DATA XREF: .data:00001438o
.rdata:00000A20 $SG143601       db 'l',9,'c #243250',0  ; DATA XREF: .data:0000143Co
.rdata:00000A2C $SG143602       db 'm',9,'c #346AB4',0  ; DATA XREF: .data:00001440o
.rdata:00000A38 $SG143603       db 'n',9,'c #3C82DC',0  ; DATA XREF: .data:00001444o
.rdata:00000A44 $SG143604       db 'o',9,'c #6C6A6C',0  ; DATA XREF: .data:00001448o
.rdata:00000A50 $SG143605       db '     .+.     ',0    ; DATA XREF: .data:0000144Co
.rdata:00000A5E                 align 10h
.rdata:00000A60 $SG143606       db '   @##$##@   ',0    ; DATA XREF: .data:00001450o
.rdata:00000A6E                 align 10h
.rdata:00000A70 $SG143607       db '  @%&***&%@  ',0    ; DATA XREF: .data:00001454o
.rdata:00000A7E                 align 10h
.rdata:00000A80 $SG143608       db ' =-;>,,,>;-= ',0    ; DATA XREF: .data:00001458o
.rdata:00000A8E                 align 10h
.rdata:00000A90 $SG143609       db ' ',27h,')!~{{{~!)',27h,' ',0
.rdata:00000A90                                         ; DATA XREF: .data:0000145Co
.rdata:00000A9E                 align 10h
.rdata:00000AA0 $SG143610       db '])^/({{{(_^)]',0    ; DATA XREF: .data:00001460o
.rdata:00000AAE                 align 10h
.rdata:00000AB0 $SG143611       db ':<_[}|||}[_<:',0    ; DATA XREF: .data:00001464o
.rdata:00000ABE                 align 10h
.rdata:00000AC0 $SG143612       db '12[3455563[21',0    ; DATA XREF: .data:00001468o
.rdata:00000ACE                 align 10h
.rdata:00000AD0 $SG143613       db '7_365899063_7',0    ; DATA XREF: .data:0000146Co
.rdata:00000ADE                 align 10h
.rdata:00000AE0 $SG143614       db ' /|09abc904/ ',0    ; DATA XREF: .data:00001470o
.rdata:00000AEE                 align 10h
.rdata:00000AF0 $SG143615       db ' d}8efgfb83d ',0    ; DATA XREF: .data:00001474o
.rdata:00000AFE                 align 10h
.rdata:00000B00 $SG143616       db '  hiafjgakh  ',0    ; DATA XREF: .data:00001478o
.rdata:00000B0E                 align 10h
.rdata:00000B10 $SG143617       db '   l~mnm~l   ',0    ; DATA XREF: .data:0000147Co
.rdata:00000B1E                 align 10h
.rdata:00000B20 $SG143618       db '     o@o     ',0    ; DATA XREF: .data:00001480o
.rdata:00000B2E                 align 10h
.rdata:00000B30 ; char _SG169324[]
.rdata:00000B30 $SG169324       db 'NotepadPlus',0      ; DATA XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+13o
.rdata:00000B3C ; char _SG169326[]
.rdata:00000B3C $SG169326       db 'Native-Langue',0    ; DATA XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+31o
.rdata:00000B4A                 align 4
.rdata:00000B4C ; char _SG169330[]
.rdata:00000B4C $SG169330       db 'RTL',0              ; DATA XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+5Eo
.rdata:00000B50 ; char _SG169332[]
.rdata:00000B50 $SG169332       db 'yes',0              ; DATA XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+74o
.rdata:00000B54 ; char _SG169334[]
.rdata:00000B54 $SG169334       db 'filename',0         ; DATA XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool):loc_24FBo
.rdata:00000B5D                 align 10h
.rdata:00000B60 ; char _SG169336[]
.rdata:00000B60 $SG169336       db 'english.xml',0      ; DATA XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+D6o
.rdata:00000B6C ; wchar_t _SG169348
.rdata:00000B6C $SG169348       dw 0                    ; DATA XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+37o
.rdata:00000B6E                 db    0
.rdata:00000B6F                 db    0
.rdata:00000B70 ; char _SG169350[]
.rdata:00000B70 $SG169350       db 'Menu',0             ; DATA XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *):loc_2D6Co
.rdata:00000B75                 align 4
.rdata:00000B78 ; wchar_t _SG169352
.rdata:00000B78 $SG169352       dw 0                    ; DATA XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+74o
.rdata:00000B7A                 db    0
.rdata:00000B7B                 db    0
.rdata:00000B7C ; char _SG169353[]
.rdata:00000B7C $SG169353       db 'Main',0             ; DATA XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *):loc_2DA9o
.rdata:00000B81                 align 4
.rdata:00000B84 ; wchar_t _SG169355
.rdata:00000B84 $SG169355       dw 0                    ; DATA XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+AFo
.rdata:00000B86                 db    0
.rdata:00000B87                 db    0
.rdata:00000B88 ; char _SG169357[]
.rdata:00000B88 $SG169357       db 'Entries',0          ; DATA XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *):loc_2DE4o
.rdata:00000B90 ; wchar_t _SG169359
.rdata:00000B90 $SG169359       dw 0                    ; DATA XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+EAo
.rdata:00000B92                 db    0
.rdata:00000B93                 db    0
.rdata:00000B94 ; char _SG169362[]
.rdata:00000B94 $SG169362       db 'Item',0             ; DATA XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+117o
.rdata:00000B99                 align 4
.rdata:00000B9C ; char _SG169366[]
.rdata:00000B9C $SG169366       db 'Item',0             ; DATA XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *):loc_2E39o
.rdata:00000BA1                 align 4
.rdata:00000BA4 ; char _SG169369[]
.rdata:00000BA4 $SG169369       db 'idName',0           ; DATA XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+14Eo
.rdata:00000BAB                 align 4
.rdata:00000BAC ; char _SG169372[]
.rdata:00000BAC $SG169372       db 'name',0             ; DATA XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+164o
.rdata:00000BB1                 align 4
.rdata:00000BB4 ; wchar_t _SG169374
.rdata:00000BB4 $SG169374       dw 0                    ; DATA XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *):loc_2ED4o
.rdata:00000BB6                 db    0
.rdata:00000BB7                 db    0
.rdata:00000BB8 ; wchar_t _SG169381
.rdata:00000BB8 $SG169381       dw 0                    ; DATA XREF: NativeLangSpeaker::getNativeLangMenuString(int)+37o
.rdata:00000BBA                 db    0
.rdata:00000BBB                 db    0
.rdata:00000BBC ; char _SG169383[]
.rdata:00000BBC $SG169383       db 'Menu',0             ; DATA XREF: NativeLangSpeaker::getNativeLangMenuString(int):loc_2F6Co
.rdata:00000BC1                 align 4
.rdata:00000BC4 ; wchar_t _SG169385
.rdata:00000BC4 $SG169385       dw 0                    ; DATA XREF: NativeLangSpeaker::getNativeLangMenuString(int)+74o
.rdata:00000BC6                 db    0
.rdata:00000BC7                 db    0
.rdata:00000BC8 ; char _SG169386[]
.rdata:00000BC8 $SG169386       db 'Main',0             ; DATA XREF: NativeLangSpeaker::getNativeLangMenuString(int):loc_2FA9o
.rdata:00000BCD                 align 10h
.rdata:00000BD0 ; wchar_t _SG169388
.rdata:00000BD0 $SG169388       dw 0                    ; DATA XREF: NativeLangSpeaker::getNativeLangMenuString(int)+AFo
.rdata:00000BD2                 db    0
.rdata:00000BD3                 db    0
.rdata:00000BD4 ; char _SG169389[]
.rdata:00000BD4 $SG169389       db 'Commands',0         ; DATA XREF: NativeLangSpeaker::getNativeLangMenuString(int):loc_2FE4o
.rdata:00000BDD                 align 10h
.rdata:00000BE0 ; wchar_t _SG169391
.rdata:00000BE0 $SG169391       dw 0                    ; DATA XREF: NativeLangSpeaker::getNativeLangMenuString(int)+EAo
.rdata:00000BE2                 db    0
.rdata:00000BE3                 db    0
.rdata:00000BE4 ; char _SG169394[]
.rdata:00000BE4 $SG169394       db 'Item',0             ; DATA XREF: NativeLangSpeaker::getNativeLangMenuString(int)+117o
.rdata:00000BE9                 align 4
.rdata:00000BEC ; char _SG169398[]
.rdata:00000BEC $SG169398       db 'Item',0             ; DATA XREF: NativeLangSpeaker::getNativeLangMenuString(int):loc_3039o
.rdata:00000BF1                 align 4
.rdata:00000BF4 ; char _SG169402[]
.rdata:00000BF4 $SG169402       dd offset loc_6468+1    ; DATA XREF: NativeLangSpeaker::getNativeLangMenuString(int)+14Eo
.rdata:00000BF8 ; char _SG169404[]
.rdata:00000BF8 $SG169404       db 'name',0             ; DATA XREF: NativeLangSpeaker::getNativeLangMenuString(int)+167o
.rdata:00000BFD                 align 10h
.rdata:00000C00 ; wchar_t _SG169406
.rdata:00000C00 $SG169406       dw 0                    ; DATA XREF: NativeLangSpeaker::getNativeLangMenuString(int):loc_30C9o
.rdata:00000C02                 db    0
.rdata:00000C03                 db    0
.rdata:00000C04 ; char _SG169425[]
.rdata:00000C04 $SG169425       db 'Menu',0             ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_3119o
.rdata:00000C09                 align 4
.rdata:00000C0C ; char _SG169427[]
.rdata:00000C0C $SG169427       db 'Main',0             ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_3136o
.rdata:00000C11                 align 4
.rdata:00000C14 ; char _SG169430[]
.rdata:00000C14 $SG169430       db 'Entries',0          ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_3151o
.rdata:00000C1C ; char _SG169435[]
.rdata:00000C1C $SG169435       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+7Bo
.rdata:00000C21                 align 4
.rdata:00000C24 ; char _SG169439[]
.rdata:00000C24 $SG169439       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_318Do
.rdata:00000C29                 align 4
.rdata:00000C2C ; char _SG169442[]
.rdata:00000C2C $SG169442       db 'menuId',0           ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+B2o
.rdata:00000C33                 align 4
.rdata:00000C34 ; char _SG169447[]
.rdata:00000C34 $SG169447       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+DFo
.rdata:00000C39                 align 4
.rdata:00000C3C ; char _SG169450[]
.rdata:00000C3C $SG169450       db 'idName',0           ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_3231o
.rdata:00000C43                 align 4
.rdata:00000C44 ; char _SG169453[]
.rdata:00000C44 $SG169453       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+14Bo
.rdata:00000C49                 align 4
.rdata:00000C4C ; char _SG169455[]
.rdata:00000C4C $SG169455       db 'Plugins',0          ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+15Bo
.rdata:00000C54 ; char _SG169459[]
.rdata:00000C54 $SG169459       db 'Window',0           ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_329Ao
.rdata:00000C5B                 align 4
.rdata:00000C5C ; char _SG169462[]
.rdata:00000C5C $SG169462       db 'Commands',0         ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_32DCo
.rdata:00000C65                 align 4
.rdata:00000C68 ; char _SG169464[]
.rdata:00000C68 $SG169464       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+1ECo
.rdata:00000C6D                 align 10h
.rdata:00000C70 ; char _SG169468[]
.rdata:00000C70 $SG169468       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_32FEo
.rdata:00000C75                 align 4
.rdata:00000C78 ; char _SG169471[]
.rdata:00000C78 $SG169471       dd offset loc_6468+1    ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+223o
.rdata:00000C7C ; char _SG169473[]
.rdata:00000C7C $SG169473       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+230o
.rdata:00000C81                 align 4
.rdata:00000C84 ; char _SG169476[]
.rdata:00000C84 $SG169476       db 'SubEntries',0       ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_3376o
.rdata:00000C8F                 align 10h
.rdata:00000C90 ; char _SG169478[]
.rdata:00000C90 $SG169478       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+286o
.rdata:00000C95                 align 4
.rdata:00000C98 ; char _SG169482[]
.rdata:00000C98 $SG169482       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_3398o
.rdata:00000C9D                 align 10h
.rdata:00000CA0 ; char _SG169488[]
.rdata:00000CA0 $SG169488       db 'subMenuId',0        ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+2BDo
.rdata:00000CAA                 align 4
.rdata:00000CAC ; char _SG169490[]
.rdata:00000CAC $SG169490       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+2CDo
.rdata:00000CB1                 align 4
.rdata:00000CB4 ; char _SG169511[]
.rdata:00000CB4 $SG169511       db 'Menu',0             ; DATA XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+15o
.rdata:00000CB9                 align 4
.rdata:00000CBC ; char _SG169513[]
.rdata:00000CBC $SG169513       db 'TabBar',0           ; DATA XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+31o
.rdata:00000CC3                 align 4
.rdata:00000CC4 ; char _SG169519[]
.rdata:00000CC4 $SG169519       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+5Ao
.rdata:00000CC9                 align 4
.rdata:00000CCC ; char _SG169523[]
.rdata:00000CCC $SG169523       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *):loc_286Co
.rdata:00000CD1                 align 4
.rdata:00000CD4 ; char _SG169527[]
.rdata:00000CD4 $SG169527       db 'CMID',0             ; DATA XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+95o
.rdata:00000CD9                 align 4
.rdata:00000CDC ; char _SG169533[]
.rdata:00000CDC $SG169533       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+CBo
.rdata:00000CE1                 align 4
.rdata:00000CE4 ; char _SG169547[]
.rdata:00000CE4 $SG169547       db 'Menu',0             ; DATA XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+31o
.rdata:00000CE9                 align 4
.rdata:00000CEC ; char _SG169549[]
.rdata:00000CEC $SG169549       db 'TabBar',0           ; DATA XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+49o
.rdata:00000CF3                 align 4
.rdata:00000CF4 ; char _SG169552[]
.rdata:00000CF4 $SG169552       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+5Fo
.rdata:00000CF9                 align 4
.rdata:00000CFC ; char _SG169556[]
.rdata:00000CFC $SG169556       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *):loc_2BE1o
.rdata:00000D01                 align 4
.rdata:00000D04 ; char _SG169559[]
.rdata:00000D04 $SG169559       db 'CMID',0             ; DATA XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+96o
.rdata:00000D09                 align 4
.rdata:00000D0C ; char _SG169561[]
.rdata:00000D0C $SG169561       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+A9o
.rdata:00000D11                 align 4
.rdata:00000D14 ; char _SG169564[]
.rdata:00000D14 $SG169564       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+C1o
.rdata:00000D19                 align 4
.rdata:00000D1C ; char _SG169578[]
.rdata:00000D1C $SG169578       db 'Dialog',0           ; DATA XREF: NativeLangSpeaker::changeConfigLang(HWND__ *):loc_25C6o
.rdata:00000D23                 align 4
.rdata:00000D24 ; char _SG169580[]
.rdata:00000D24 $SG169580       db 'StyleConfig',0      ; DATA XREF: NativeLangSpeaker::changeConfigLang(HWND__ *):loc_25E3o
.rdata:00000D30 ; char _SG169584[]
.rdata:00000D30 $SG169584       db 'title',0            ; DATA XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+56o
.rdata:00000D36                 align 4
.rdata:00000D38 ; char _SG169588[]
.rdata:00000D38 $SG169588       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeConfigLang(HWND__ *):loc_2666o
.rdata:00000D3D                 align 10h
.rdata:00000D40 ; char _SG169592[]
.rdata:00000D40 $SG169592       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeConfigLang(HWND__ *):loc_2678o
.rdata:00000D45                 align 4
.rdata:00000D48 ; char _SG169596[]
.rdata:00000D48 $SG169596       dd offset loc_6468+1    ; DATA XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+F1o
.rdata:00000D4C ; char _SG169598[]
.rdata:00000D4C $SG169598       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+101o
.rdata:00000D51                 align 4
.rdata:00000D54 ; char _SG169603[]
.rdata:00000D54 $SG169603       db 'SubDialog',0        ; DATA XREF: NativeLangSpeaker::changeConfigLang(HWND__ *):loc_2726o
.rdata:00000D5E                 align 10h
.rdata:00000D60 ; char _SG169605[]
.rdata:00000D60 $SG169605       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+186o
.rdata:00000D65                 align 4
.rdata:00000D68 ; char _SG169609[]
.rdata:00000D68 $SG169609       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeConfigLang(HWND__ *):loc_2748o
.rdata:00000D6D                 align 10h
.rdata:00000D70 ; char _SG169613[]
.rdata:00000D70 $SG169613       dd offset loc_6468+1    ; DATA XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+1C1o
.rdata:00000D74 ; char _SG169615[]
.rdata:00000D74 $SG169615       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+1D1o
.rdata:00000D79                 align 4
.rdata:00000D7C ; char _SG169643[]
.rdata:00000D7C $SG169643       db 'Dialog',0           ; DATA XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *):loc_3E76o
.rdata:00000D83                 align 4
.rdata:00000D84 ; char _SG169645[]
.rdata:00000D84 $SG169645       db 'UserDefine',0       ; DATA XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *):loc_3E93o
.rdata:00000D8F                 align 10h
.rdata:00000D90 ; char _SG169649[]
.rdata:00000D90 $SG169649       db 'StylerDialog',0     ; DATA XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *)+56o
.rdata:00000D9D                 align 10h
.rdata:00000DA0 ; char _SG169652[]
.rdata:00000DA0 $SG169652       db 'title',0            ; DATA XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *):loc_3ED1o
.rdata:00000DA6                 align 4
.rdata:00000DA8 ; char _SG169656[]
.rdata:00000DA8 $SG169656       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *):loc_3F2Bo
.rdata:00000DAD                 align 10h
.rdata:00000DB0 ; char _SG169660[]
.rdata:00000DB0 $SG169660       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *):loc_3F3Do
.rdata:00000DB5                 align 4
.rdata:00000DB8 ; char _SG169664[]
.rdata:00000DB8 $SG169664       dd offset loc_6468+1    ; DATA XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *)+106o
.rdata:00000DBC ; char _SG169666[]
.rdata:00000DBC $SG169666       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *)+116o
.rdata:00000DC1                 align 4
.rdata:00000DC4 ; char _SG169677[]
.rdata:00000DC4 $SG169677       db 'Dialog',0           ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *):loc_3949o
.rdata:00000DCB                 align 4
.rdata:00000DCC ; char _SG169679[]
.rdata:00000DCC $SG169679       db 'UserDefine',0       ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *):loc_3969o
.rdata:00000DD7                 align 4
.rdata:00000DD8 ; char _SG169684[]
.rdata:00000DD8 $SG169684       db 'title',0            ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+7Do
.rdata:00000DDE                 align 10h
.rdata:00000DE0 ; char _SG169694[]
.rdata:00000DE0 $SG169694       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *):loc_3A44o
.rdata:00000DE5                 align 4
.rdata:00000DE8 ; char _SG169698[]
.rdata:00000DE8 $SG169698       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *):loc_3A59o
.rdata:00000DED                 align 10h
.rdata:00000DF0 ; char _SG169702[]
.rdata:00000DF0 $SG169702       dd offset loc_6468+1    ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+174o
.rdata:00000DF4 ; char _SG169704[]
.rdata:00000DF4 $SG169704       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+18Ao
.rdata:00000DF9                 align 4
.rdata:00000DFC $SG169719       dd 646C6F46h            ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+2CCr
.rdata:00000E00 word_E00        dw 7265h                ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+2D4r
.rdata:00000E02 byte_E02        db 0                    ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+2DFr
.rdata:00000E03                 align 4
.rdata:00000E04 $SG169720       dd 7779654Bh            ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+2F3r
.rdata:00000E08 dword_E08       dd 7364726Fh            ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+2FCr
.rdata:00000E0C byte_E0C        db 0                    ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+305r
.rdata:00000E0D                 align 10h
.rdata:00000E10 $SG169721       dd 6D6D6F43h            ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+319r
.rdata:00000E14 dword_E14       dd 746E65h              ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+322r
.rdata:00000E18 $SG169722       dd 7265704Fh            ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+332r
.rdata:00000E1C dword_E1C       dd 726F7461h            ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+33Br
.rdata:00000E20 byte_E20        db 0                    ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+343r
.rdata:00000E21                 align 4
.rdata:00000E24 ; char _SG169729[]
.rdata:00000E24 $SG169729       db 'title',0            ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+3A9o
.rdata:00000E2A                 align 4
.rdata:00000E2C ; char _SG169733[]
.rdata:00000E2C $SG169733       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *):loc_3D37o
.rdata:00000E31                 align 4
.rdata:00000E34 ; char _SG169737[]
.rdata:00000E34 $SG169737       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *):loc_3D4Fo
.rdata:00000E39                 align 4
.rdata:00000E3C ; char _SG169741[]
.rdata:00000E3C $SG169741       dd offset loc_6468+1    ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+46Ao
.rdata:00000E40 ; char _SG169743[]
.rdata:00000E40 $SG169743       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+480o
.rdata:00000E45                 align 4
.rdata:00000E48 ; char _SG169754[]
.rdata:00000E48 $SG169754       db 'Dialog',0           ; DATA XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+40o
.rdata:00000E4F                 align 10h
.rdata:00000E50 ; char _SG169757[]
.rdata:00000E50 $SG169757       db 'Find',0             ; DATA XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+70o
.rdata:00000E55                 align 4
.rdata:00000E58 ; char _SG169760[]
.rdata:00000E58 $SG169760       db 'titleFind',0        ; DATA XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+9Ao
.rdata:00000E62                 align 4
.rdata:00000E64 ; char _SG169762[]
.rdata:00000E64 $SG169762       db 'titleReplace',0     ; DATA XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+B7o
.rdata:00000E71                 align 4
.rdata:00000E74 ; char _SG169764[]
.rdata:00000E74 $SG169764       db 'titleFindInFiles',0 ; DATA XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+D4o
.rdata:00000E85                 align 4
.rdata:00000E88 ; char _SG169766[]
.rdata:00000E88 $SG169766       db 'titleMark',0        ; DATA XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+F1o
.rdata:00000E92                 align 4
.rdata:00000E94 ; char _SG169808[]
.rdata:00000E94 $SG169808       db 'Find',0             ; DATA XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+389o
.rdata:00000E99                 align 4
.rdata:00000E9C ; char _SG169814[]
.rdata:00000E9C $SG169814       db 'Preference',0       ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+29o
.rdata:00000EA7                 align 4
.rdata:00000EA8 ; char _SG169817[]
.rdata:00000EA8 $SG169817       db 'Global',0           ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+54o
.rdata:00000EAF                 align 10h
.rdata:00000EB0 ; wchar_t _SG169820
.rdata:00000EB0 $SG169820:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+B3o
.rdata:00000EB0                 unicode 0, <Global>,0
.rdata:00000EBE                 align 10h
.rdata:00000EC0 ; char _SG169821[]
.rdata:00000EC0 $SG169821       db 'Scintillas',0       ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+C7o
.rdata:00000ECB                 align 4
.rdata:00000ECC ; wchar_t _SG169824
.rdata:00000ECC $SG169824:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+126o
.rdata:00000ECC                 unicode 0, <Scintillas>,0
.rdata:00000EE2                 align 4
.rdata:00000EE4 ; char _SG169825[]
.rdata:00000EE4 $SG169825       db 'NewDoc',0           ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+13Ao
.rdata:00000EEB                 align 4
.rdata:00000EEC ; wchar_t _SG169828
.rdata:00000EEC $SG169828:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+19Co
.rdata:00000EEC                 unicode 0, <NewDoc>,0
.rdata:00000EFA                 align 4
.rdata:00000EFC ; char _SG169829[]
.rdata:00000EFC $SG169829       db 'DefaultDir',0       ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+1B0o
.rdata:00000F07                 align 4
.rdata:00000F08 ; wchar_t _SG169832
.rdata:00000F08 $SG169832:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+212o
.rdata:00000F08                 unicode 0, <DefaultDir>,0
.rdata:00000F1E                 align 10h
.rdata:00000F20 ; char _SG169833[]
.rdata:00000F20 $SG169833       db 'RecentFilesHistory',0
.rdata:00000F20                                         ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+226o
.rdata:00000F33                 align 4
.rdata:00000F34 ; wchar_t _SG169836
.rdata:00000F34 $SG169836:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+288o
.rdata:00000F34                 unicode 0, <RecentFilesHistory>,0
.rdata:00000F5A                 align 4
.rdata:00000F5C ; char _SG169837[]
.rdata:00000F5C $SG169837       db 'FileAssoc',0        ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+29Co
.rdata:00000F66                 align 4
.rdata:00000F68 ; wchar_t _SG169840
.rdata:00000F68 $SG169840:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+2FEo
.rdata:00000F68                 unicode 0, <FileAssoc>,0
.rdata:00000F7C ; char _SG169841[]
.rdata:00000F7C $SG169841       db 'LangMenu',0         ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+312o
.rdata:00000F85                 align 4
.rdata:00000F88 ; wchar_t _SG169844
.rdata:00000F88 $SG169844:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+374o
.rdata:00000F88                 unicode 0, <LangMenu>,0
.rdata:00000F9A                 align 4
.rdata:00000F9C ; char _SG169845[]
.rdata:00000F9C $SG169845       db 'TabSettings',0      ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+388o
.rdata:00000FA8 ; wchar_t _SG169848
.rdata:00000FA8 $SG169848:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+3EAo
.rdata:00000FA8                 unicode 0, <TabSettings>,0
.rdata:00000FC0 ; char _SG169849[]
.rdata:00000FC0 $SG169849       db 'Print',0            ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+3FEo
.rdata:00000FC6                 align 4
.rdata:00000FC8 ; wchar_t _SG169852
.rdata:00000FC8 $SG169852:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+460o
.rdata:00000FC8                 unicode 0, <Print>,0
.rdata:00000FD4 ; char _SG169853[]
.rdata:00000FD4 $SG169853       db 'MISC',0             ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+474o
.rdata:00000FD9                 align 4
.rdata:00000FDC ; wchar_t _SG169856
.rdata:00000FDC $SG169856:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+4D6o
.rdata:00000FDC                 unicode 0, <MISC>,0
.rdata:00000FE6                 align 4
.rdata:00000FE8 ; char _SG169857[]
.rdata:00000FE8 $SG169857       db 'Backup',0           ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+4EAo
.rdata:00000FEF                 align 10h
.rdata:00000FF0 ; wchar_t _SG169860
.rdata:00000FF0 $SG169860:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+54Co
.rdata:00000FF0                 unicode 0, <Backup>,0
.rdata:00000FFE                 align 10h
.rdata:00001000 ; char _SG169861[]
.rdata:00001000 $SG169861       db 'AutoCompletion',0   ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+560o
.rdata:0000100F                 align 10h
.rdata:00001010 ; wchar_t _SG169864
.rdata:00001010 $SG169864:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+5C2o
.rdata:00001010                 unicode 0, <AutoCompletion>,0
.rdata:0000102E                 align 10h
.rdata:00001030 ; char _SG169865[]
.rdata:00001030 $SG169865       db 'MultiInstance',0    ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+5D6o
.rdata:0000103E                 align 10h
.rdata:00001040 ; wchar_t _SG169868
.rdata:00001040 $SG169868:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+638o
.rdata:00001040                 unicode 0, <MultiInstance>,0
.rdata:0000105C ; char _SG169869[]
.rdata:0000105C $SG169869       db 'Delimiter',0        ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+64Co
.rdata:00001066                 align 4
.rdata:00001068 ; wchar_t _SG169872
.rdata:00001068 $SG169872:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+6AEo
.rdata:00001068                 unicode 0, <Delimiter>,0
.rdata:0000107C ; char _SG169873[]
.rdata:0000107C $SG169873       db 'Cloud',0            ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+6C2o
.rdata:00001082                 align 4
.rdata:00001084 ; wchar_t _SG169876
.rdata:00001084 $SG169876:                              ; DATA XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+724o
.rdata:00001084                 unicode 0, <Cloud>,0
.rdata:00001090 ; char _SG169897[]
.rdata:00001090 $SG169897       db 'Shortcuts',0        ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void)+4Ao
.rdata:0000109A                 align 4
.rdata:0000109C ; char _SG169899[]
.rdata:0000109C $SG169899       db 'Main',0             ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void):loc_3547o
.rdata:000010A1                 align 4
.rdata:000010A4 ; char _SG169902[]
.rdata:000010A4 $SG169902       db 'Entries',0          ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void):loc_3562o
.rdata:000010AC ; char _SG169905[]
.rdata:000010AC $SG169905       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void):loc_357Do
.rdata:000010B1                 align 4
.rdata:000010B4 ; char _SG169909[]
.rdata:000010B4 $SG169909       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void):loc_358Fo
.rdata:000010B9                 align 4
.rdata:000010BC ; char _SG169914[]
.rdata:000010BC $SG169914       db 'index',0            ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void)+D8o
.rdata:000010C2                 align 4
.rdata:000010C4 ; char _SG169915[]
.rdata:000010C4 $SG169915       dd offset loc_6468+1    ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void)+EDo
.rdata:000010C8 ; char _SG169918[]
.rdata:000010C8 $SG169918       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void)+10Co
.rdata:000010CD                 align 10h
.rdata:000010D0 ; char _SG169924[]
.rdata:000010D0 $SG169924       db 'Shortcuts',0        ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void):loc_364Do
.rdata:000010DA                 align 4
.rdata:000010DC ; char _SG169926[]
.rdata:000010DC $SG169926       db 'Scintilla',0        ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void):loc_366Ao
.rdata:000010E6                 align 4
.rdata:000010E8 ; char _SG169928[]
.rdata:000010E8 $SG169928       db 'Entries',0          ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void):loc_3685o
.rdata:000010F0 ; char _SG169931[]
.rdata:000010F0 $SG169931       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void):loc_36A0o
.rdata:000010F5                 align 4
.rdata:000010F8 ; char _SG169935[]
.rdata:000010F8 $SG169935       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void):loc_36B2o
.rdata:000010FD                 align 10h
.rdata:00001100 ; char _SG169939[]
.rdata:00001100 $SG169939       db 'index',0            ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void)+1FBo
.rdata:00001106                 align 4
.rdata:00001108 ; char _SG169942[]
.rdata:00001108 $SG169942       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeShortcutLang(void)+21Ao
.rdata:0000110D                 align 10h
.rdata:00001110 ; char _SG169952[]
.rdata:00001110 $SG169952       db 'Dialog',0           ; DATA XREF: NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *):loc_3776o
.rdata:00001117                 align 4
.rdata:00001118 ; char _SG169954[]
.rdata:00001118 $SG169954       db 'ShortcutMapper',0   ; DATA XREF: NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *):loc_3793o
.rdata:00001127                 align 4
.rdata:00001128 ; char _SG169957[]
.rdata:00001128 $SG169957       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *):loc_37AEo
.rdata:0000112D                 align 10h
.rdata:00001130 ; char _SG169961[]
.rdata:00001130 $SG169961       db 'Item',0             ; DATA XREF: NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *):loc_37C0o
.rdata:00001135                 align 4
.rdata:00001138 ; char _SG169965[]
.rdata:00001138 $SG169965       db 'index',0            ; DATA XREF: NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *)+85o
.rdata:0000113E                 align 10h
.rdata:00001140 ; char _SG169968[]
.rdata:00001140 $SG169968       db 'name',0             ; DATA XREF: NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *)+A2o
.rdata:00001145                 align 4
.rdata:00001145 _rdata          ends
.rdata:00001145
.data:00001148 ; ===========================================================================
.data:00001148
.data:00001148 ; Segment type: Pure data
.data:00001148 ; Segment permissions: Read/Write
.data:00001148 ; Segment alignment 'qword' can not be represented in assembly
.data:00001148 _data           segment para public 'DATA' use32
.data:00001148                 assume cs:_data
.data:00001148                 ;org 1148h
.data:00001148 _acTop_xpm      dd offset $SG143412     ; "12 12 56 1"
.data:0000114C                 dd offset $SG143413     ; " \tc #FFFFFF"
.data:00001150                 dd offset $SG143414     ; ".\tc #8AB2E9"
.data:00001154                 dd offset $SG143415     ; "+\tc #CCDCF6"
.data:00001158                 dd offset $SG143416     ; "@\tc #80ABEA"
.data:0000115C                 dd offset $SG143417     ; "#\tc #7DA9E8"
.data:00001160                 dd offset $SG143418     ; "$\tc #C7DAF3"
.data:00001164                 dd offset $SG143419     ; "%\tc #79A7E6"
.data:00001168                 dd offset $SG143420     ; "&\tc #ADC8EF"
.data:0000116C                 dd offset $SG143421     ; "*\tc #87B0E8"
.data:00001170                 dd offset $SG143422     ; "=\tc #BBD2F0"
.data:00001174                 dd offset $SG143423     ; "-\tc #6EA0E2"
.data:00001178                 dd offset $SG143424     ; ";\tc #A8C7EE"
.data:0000117C                 dd offset $SG143425     ; ">\tc #A3C2ED"
.data:00001180                 dd offset $SG143426     ; ",\tc #75A4E3"
.data:00001184                 dd offset $SG143427     ; "'\tc #A7C4EB"
.data:00001188                 dd offset $SG143428     ; ")\tc #6297E1"
.data:0000118C                 dd offset $SG143429     ; "!\tc #A1C1EC"
.data:00001190                 dd offset $SG143430     ; "~\tc #92B7E8"
.data:00001194                 dd offset $SG143431     ; "{\tc #99BBE9"
.data:00001198                 dd offset $SG143432     ; "]\tc #6197DD"
.data:0000119C                 dd offset $SG143433     ; "^\tc #96B9E6"
.data:000011A0                 dd offset $SG143434     ; "/\tc #538EDB"
.data:000011A4                 dd offset $SG143435     ; "(\tc #99BBEA"
.data:000011A8                 dd offset $SG143436     ; "_\tc #80AAE3"
.data:000011AC                 dd offset $SG143437     ; ":\tc #81ABE3"
.data:000011B0                 dd offset $SG143438     ; "<\tc #8AB1E4"
.data:000011B4                 dd offset $SG143439     ; "[\tc #4B88D6"
.data:000011B8                 dd offset $SG143440     ; "}\tc #4882D1"
.data:000011BC                 dd offset $SG143441     ; "|\tc #4384D6"
.data:000011C0                 dd offset $SG143442     ; "1\tc #90B5E7"
.data:000011C4                 dd offset $SG143443     ; "2\tc #74A3E0"
.data:000011C8                 dd offset $SG143444     ; "3\tc #77A4E0"
.data:000011CC                 dd offset $SG143445     ; "4\tc #81ABE2"
.data:000011D0                 dd offset $SG143446     ; "5\tc #437FD3"
.data:000011D4                 dd offset $SG143447     ; "6\tc #7FA2DF"
.data:000011D8                 dd offset $SG143448     ; "7\tc #3577D2"
.data:000011DC                 dd offset $SG143449     ; "8\tc #87AFE4"
.data:000011E0                 dd offset $SG143450     ; "9\tc #72A1DF"
.data:000011E4                 dd offset $SG143451     ; "0\tc #7CA9E1"
.data:000011E8                 dd offset $SG143452     ; "a\tc #3F7AD0"
.data:000011EC                 dd offset $SG143453     ; "b\tc #85A4DE"
.data:000011F0                 dd offset $SG143454     ; "c\tc #FBFCFE"
.data:000011F4                 dd offset $SG143455     ; "d\tc #236ECD"
.data:000011F8                 dd offset $SG143456     ; "e\tc #7EA8E1"
.data:000011FC                 dd offset $SG143457     ; "f\tc #79A6E0"
.data:00001200                 dd offset $SG143458     ; "g\tc #3D77D0"
.data:00001204                 dd offset $SG143459     ; "h\tc #87A4DC"
.data:00001208                 dd offset $SG143460     ; "i\tc #1A62C9"
.data:0000120C                 dd offset $SG143461     ; "j\tc #75A3DF"
.data:00001210                 dd offset $SG143462     ; "k\tc #3C74CF"
.data:00001214                 dd offset $SG143463     ; "l\tc #8DA6DE"
.data:00001218                 dd offset $SG143464     ; "m\tc #1859C4"
.data:0000121C                 dd offset $SG143465     ; "n\tc #3B71CC"
.data:00001220                 dd offset $SG143466     ; "o\tc #8EA5DD"
.data:00001224                 dd offset $SG143467     ; "p\tc #164EC0"
.data:00001228                 dd offset $SG143468     ; "q\tc #92A7DD"
.data:0000122C                 dd offset $SG143469     ; "    .+      "
.data:00001230                 dd offset $SG143470     ; "    @#$     "
.data:00001234                 dd offset $SG143471     ; "    %&*=    "
.data:00001238                 dd offset $SG143472     ; "    -;>,'   "
.data:0000123C                 dd offset $SG143473     ; "    )!~{]^  "
.data:00001240                 dd offset $SG143474     ; "    /(_:<[} "
.data:00001244                 dd offset $SG143475     ; "    |123456 "
.data:00001248                 dd offset $SG143476     ; "    7890abc "
.data:0000124C                 dd offset $SG143477     ; "    defgh   "
.data:00001250                 dd offset $SG143478     ; "    ijkl    "
.data:00001254                 dd offset $SG143479     ; "    mno     "
.data:00001258                 dd offset $SG143480     ; "    pq      "
.data:0000125C                 align 10h
.data:00001260 _acBottom_xpm   dd offset $SG143482     ; "12 12 54 1"
.data:00001264                 dd offset $SG143483     ; " \tc #FFFFFF"
.data:00001268                 dd offset $SG143484     ; ".\tc #C4D7F3"
.data:0000126C                 dd offset $SG143485     ; "+\tc #72A1E3"
.data:00001270                 dd offset $SG143486     ; "@\tc #C1D6F2"
.data:00001274                 dd offset $SG143487     ; "#\tc #6397E1"
.data:00001278                 dd offset $SG143488     ; "$\tc #5990DD"
.data:0000127C                 dd offset $SG143489     ; "%\tc #BBD2F0"
.data:00001280                 dd offset $SG143490     ; "&\tc #7AA6E5"
.data:00001284                 dd offset $SG143491     ; "*\tc #9ABDEA"
.data:00001288                 dd offset $SG143492     ; "=\tc #4A87D9"
.data:0000128C                 dd offset $SG143493     ; "-\tc #B1CAEE"
.data:00001290                 dd offset $SG143494     ; ";\tc #75A4E3"
.data:00001294                 dd offset $SG143495     ; ">\tc #99BBE9"
.data:00001298                 dd offset $SG143496     ; ",\tc #95B9E8"
.data:0000129C                 dd offset $SG143497     ; "'\tc #3A7CD4"
.data:000012A0                 dd offset $SG143498     ; ")\tc #A9C6EC"
.data:000012A4                 dd offset $SG143499     ; "!\tc #71A0E0"
.data:000012A8                 dd offset $SG143500     ; "~\tc #86AFE5"
.data:000012AC                 dd offset $SG143501     ; "{\tc #8DB2E6"
.data:000012B0                 dd offset $SG143502     ; "]\tc #2A72CF"
.data:000012B4                 dd offset $SG143503     ; "^\tc #73A0E0"
.data:000012B8                 dd offset $SG143504     ; "/\tc #6B9DE0"
.data:000012BC                 dd offset $SG143505     ; "(\tc #95B8E8"
.data:000012C0                 dd offset $SG143506     ; "_\tc #81ABE3"
.data:000012C4                 dd offset $SG143507     ; ":\tc #72A1DF"
.data:000012C8                 dd offset $SG143508     ; "<\tc #83ADE3"
.data:000012CC                 dd offset $SG143509     ; "[\tc #1B65C9"
.data:000012D0                 dd offset $SG143510     ; "}\tc #5F95DC"
.data:000012D4                 dd offset $SG143511     ; "|\tc #8BB3E5"
.data:000012D8                 dd offset $SG143512     ; "1\tc #77A4E0"
.data:000012DC                 dd offset $SG143513     ; "2\tc #679ADC"
.data:000012E0                 dd offset $SG143514     ; "3\tc #7AA6E1"
.data:000012E4                 dd offset $SG143515     ; "4\tc #195CC6"
.data:000012E8                 dd offset $SG143516     ; "5\tc #FCFDFE"
.data:000012EC                 dd offset $SG143517     ; "6\tc #8DB2E4"
.data:000012F0                 dd offset $SG143518     ; "7\tc #4885D6"
.data:000012F4                 dd offset $SG143519     ; "8\tc #7CA9E1"
.data:000012F8                 dd offset $SG143520     ; "9\tc #6698DB"
.data:000012FC                 dd offset $SG143521     ; "0\tc #71A1DE"
.data:00001300                 dd offset $SG143522     ; "a\tc #1752C0"
.data:00001304                 dd offset $SG143523     ; "b\tc #88ABE0"
.data:00001308                 dd offset $SG143524     ; "c\tc #3D77D0"
.data:0000130C                 dd offset $SG143525     ; "d\tc #6E9FDD"
.data:00001310                 dd offset $SG143526     ; "e\tc #699BDC"
.data:00001314                 dd offset $SG143527     ; "f\tc #1547BD"
.data:00001318                 dd offset $SG143528     ; "g\tc #8DA6DE"
.data:0000131C                 dd offset $SG143529     ; "h\tc #376BC9"
.data:00001320                 dd offset $SG143530     ; "i\tc #6295DA"
.data:00001324                 dd offset $SG143531     ; "j\tc #1440B9"
.data:00001328                 dd offset $SG143532     ; "k\tc #8DA0DB"
.data:0000132C                 dd offset $SG143533     ; "l\tc #315FC4"
.data:00001330                 dd offset $SG143534     ; "m\tc #1339B7"
.data:00001334                 dd offset $SG143535     ; "n\tc #909FDA"
.data:00001338                 dd offset $SG143536     ; "o\tc #1233B4"
.data:0000133C                 dd offset $SG143537     ; "         .+ "
.data:00001340                 dd offset $SG143538     ; "        @#$ "
.data:00001344                 dd offset $SG143539     ; "       %&*= L"
.data:00001348                 dd offset $SG143540     ; "      -;>,' "
.data:0000134C                 dd offset $SG143541     ; "     )!>~{] "
.data:00001350                 dd offset $SG143542     ; "    ^/(_:<[ "
.data:00001354                 dd offset $SG143543     ; "    (}|1234 "
.data:00001358                 dd offset $SG143544     ; "    567890a "
.data:0000135C                 dd offset $SG143545     ; "      bcdef "
.data:00001360                 dd offset $SG143546     ; "       ghij "
.data:00001364                 dd offset $SG143547     ; "        klm "
.data:00001368                 dd offset $SG143548     ; "         no "
.data:0000136C                 align 10h
.data:00001370 _bookmark_xpm   dd offset $SG143550     ; "13 14 54 1"
.data:00001374                 dd offset $SG143551     ; " \tc None"
.data:00001378                 dd offset $SG143552     ; ".\tc #545254"
.data:0000137C                 dd offset $SG143553     ; "+\tc #3C3E3C"
.data:00001380                 dd offset $SG143554     ; "@\tc #646464"
.data:00001384                 dd offset $SG143555     ; "#\tc #A4A4A4"
.data:00001388                 dd offset $SG143556     ; "$\tc #B7B8B7"
.data:0000138C                 dd offset $SG143557     ; "%\tc #747284"
.data:00001390                 dd offset $SG143558     ; "&\tc #B4B2C4"
.data:00001394                 dd offset $SG143559     ; "*\tc #DCD7E4"
.data:00001398                 dd offset $SG143560     ; "=\tc #1C1A1C"
.data:0000139C                 dd offset $SG143561     ; "-\tc #403E58"
.data:000013A0                 dd offset $SG143562     ; ";\tc #5C5A8C"
.data:000013A4                 dd offset $SG143563     ; ">\tc #7C7EAC"
.data:000013A8                 dd offset $SG143564     ; ",\tc #7C8EBC"
.data:000013AC                 dd offset $SG143565     ; "'\tc #242644"
.data:000013B0                 dd offset $SG143566     ; ")\tc #282668"
.data:000013B4                 dd offset $SG143567     ; "!\tc #24367C"
.data:000013B8                 dd offset $SG143568     ; "~\tc #244A84"
.data:000013BC                 dd offset $SG143569     ; "{\tc #2C5098"
.data:000013C0                 dd offset $SG143570     ; "]\tc #14162C"
.data:000013C4                 dd offset $SG143571     ; "^\tc #142E7C"
.data:000013C8                 dd offset $SG143572     ; "/\tc #143789"
.data:000013CC                 dd offset $SG143573     ; "(\tc #204990"
.data:000013D0                 dd offset $SG143574     ; "_\tc #174091"
.data:000013D4                 dd offset $SG143575     ; ":\tc #0C0630"
.data:000013D8                 dd offset $SG143576     ; "<\tc #24327C"
.data:000013DC                 dd offset $SG143577     ; "[\tc #2450A0"
.data:000013E0                 dd offset $SG143578     ; "}\tc #345DB4"
.data:000013E4                 dd offset $SG143579     ; "|\tc #3C68B8"
.data:000013E8                 dd offset $SG143580     ; "1\tc #141244"
.data:000013EC                 dd offset $SG143581     ; "2\tc #24428C"
.data:000013F0                 dd offset $SG143582     ; "3\tc #3462B9"
.data:000013F4                 dd offset $SG143583     ; "4\tc #4470C4"
.data:000013F8                 dd offset $SG143584     ; "5\tc #4C7FD6"
.data:000013FC                 dd offset $SG143585     ; "6\tc #4472CC"
.data:00001400                 dd offset $SG143586     ; "7\tc #24224C"
.data:00001404                 dd offset $SG143587     ; "8\tc #5C8DEC"
.data:00001408                 dd offset $SG143588     ; "9\tc #5C94F6"
.data:0000140C                 dd offset $SG143589     ; "0\tc #5482DF"
.data:00001410                 dd offset $SG143590     ; "a\tc #619DF7"
.data:00001414                 dd offset $SG143591     ; "b\tc #6CA6FC"
.data:00001418                 dd offset $SG143592     ; "c\tc #64A2FC"
.data:0000141C                 dd offset $SG143593     ; "d\tc #1C2E5C"
.data:00001420                 dd offset $SG143594     ; "e\tc #6CA2FC"
.data:00001424                 dd offset $SG143595     ; "f\tc #74B2FC"
.data:00001428                 dd offset $SG143596     ; "g\tc #7CB8FC"
.data:0000142C                 dd offset $SG143597     ; "h\tc #1C3264"
.data:00001430                 dd offset $SG143598     ; "i\tc #346AD4"
.data:00001434                 dd offset $SG143599     ; "j\tc #7CBEFC"
.data:00001438                 dd offset $SG143600     ; "k\tc #3C72DC"
.data:0000143C                 dd offset $SG143601     ; "l\tc #243250"
.data:00001440                 dd offset $SG143602     ; "m\tc #346AB4"
.data:00001444                 dd offset $SG143603     ; "n\tc #3C82DC"
.data:00001448                 dd offset $SG143604     ; "o\tc #6C6A6C"
.data:0000144C                 dd offset $SG143605     ; "     .+.     "
.data:00001450                 dd offset $SG143606     ; "   @##$##@   "
.data:00001454                 dd offset $SG143607     ; "  @%&***&%@  "
.data:00001458                 dd offset $SG143608     ; " =-;>,,,>;-= "
.data:0000145C                 dd offset $SG143609     ; " ')!~{{{~!)' "
.data:00001460                 dd offset $SG143610     ; "])^/({{{(_^)]"
.data:00001464                 dd offset $SG143611     ; ":<_[}|||}[_<:"
.data:00001468                 dd offset $SG143612     ; "12[3455563[21"
.data:0000146C                 dd offset $SG143613     ; "7_365899063_7"
.data:00001470                 dd offset $SG143614     ; " /|09abc904/ "
.data:00001474                 dd offset $SG143615     ; " d}8efgfb83d "
.data:00001478                 dd offset $SG143616     ; "  hiafjgakh  "
.data:0000147C                 dd offset $SG143617     ; "   l~mnm~l   "
.data:00001480                 dd offset $SG143618     ; "     o@o     "
.data:00001484                 align 8
.data:00001488                 public ?menuPos@@3PAVMenuPosition@@A
.data:00001488 ; class MenuPosition * menuPos
.data:00001488 ?menuPos@@3PAVMenuPosition@@A db    0   ; DATA XREF: getMenuPosition(char const *)+45o
.data:00001488                                         ; getMenuPosition(char const *)+57o
.data:00001489                 db    0
.data:0000148A                 db    0
.data:0000148B                 db    0
.data:0000148C                 db 0FFh
.data:0000148D                 db 0FFh
.data:0000148E                 db 0FFh
.data:0000148F                 db 0FFh
.data:00001490                 db 0FFh
.data:00001491                 db 0FFh
.data:00001492                 db 0FFh
.data:00001493                 db 0FFh
.data:00001494 aFile           db 'file',0             ; DATA XREF: getMenuPosition(char const *)+2Fo
.data:00001499                 db    0
.data:0000149A                 db    0
.data:0000149B                 db    0
.data:0000149C                 db    0
.data:0000149D                 db    0
.data:0000149E                 db    0
.data:0000149F                 db    0
.data:000014A0                 db    0
.data:000014A1                 db    0
.data:000014A2                 db    0
.data:000014A3                 db    0
.data:000014A4                 db    0
.data:000014A5                 db    0
.data:000014A6                 db    0
.data:000014A7                 db    0
.data:000014A8                 db    0
.data:000014A9                 db    0
.data:000014AA                 db    0
.data:000014AB                 db    0
.data:000014AC                 db    0
.data:000014AD                 db    0
.data:000014AE                 db    0
.data:000014AF                 db    0
.data:000014B0                 db    0
.data:000014B1                 db    0
.data:000014B2                 db    0
.data:000014B3                 db    0
.data:000014B4                 db    0
.data:000014B5                 db    0
.data:000014B6                 db    0
.data:000014B7                 db    0
.data:000014B8                 db    0
.data:000014B9                 db    0
.data:000014BA                 db    0
.data:000014BB                 db    0
.data:000014BC                 db    0
.data:000014BD                 db    0
.data:000014BE                 db    0
.data:000014BF                 db    0
.data:000014C0                 db    0
.data:000014C1                 db    0
.data:000014C2                 db    0
.data:000014C3                 db    0
.data:000014C4                 db    0
.data:000014C5                 db    0
.data:000014C6                 db    0
.data:000014C7                 db    0
.data:000014C8                 db    0
.data:000014C9                 db    0
.data:000014CA                 db    0
.data:000014CB                 db    0
.data:000014CC                 db    0
.data:000014CD                 db    0
.data:000014CE                 db    0
.data:000014CF                 db    0
.data:000014D0                 db    0
.data:000014D1                 db    0
.data:000014D2                 db    0
.data:000014D3                 db    0
.data:000014D4                 db    1
.data:000014D5                 db    0
.data:000014D6                 db    0
.data:000014D7                 db    0
.data:000014D8                 db 0FFh
.data:000014D9                 db 0FFh
.data:000014DA                 db 0FFh
.data:000014DB                 db 0FFh
.data:000014DC                 db 0FFh
.data:000014DD                 db 0FFh
.data:000014DE                 db 0FFh
.data:000014DF                 db 0FFh
.data:000014E0                 db  65h ; e
.data:000014E1                 db  64h ; d
.data:000014E2                 db  69h ; i
.data:000014E3                 db  74h ; t
.data:000014E4                 db    0
.data:000014E5                 db    0
.data:000014E6                 db    0
.data:000014E7                 db    0
.data:000014E8                 db    0
.data:000014E9                 db    0
.data:000014EA                 db    0
.data:000014EB                 db    0
.data:000014EC                 db    0
.data:000014ED                 db    0
.data:000014EE                 db    0
.data:000014EF                 db    0
.data:000014F0                 db    0
.data:000014F1                 db    0
.data:000014F2                 db    0
.data:000014F3                 db    0
.data:000014F4                 db    0
.data:000014F5                 db    0
.data:000014F6                 db    0
.data:000014F7                 db    0
.data:000014F8                 db    0
.data:000014F9                 db    0
.data:000014FA                 db    0
.data:000014FB                 db    0
.data:000014FC                 db    0
.data:000014FD                 db    0
.data:000014FE                 db    0
.data:000014FF                 db    0
.data:00001500                 db    0
.data:00001501                 db    0
.data:00001502                 db    0
.data:00001503                 db    0
.data:00001504                 db    0
.data:00001505                 db    0
.data:00001506                 db    0
.data:00001507                 db    0
.data:00001508                 db    0
.data:00001509                 db    0
.data:0000150A                 db    0
.data:0000150B                 db    0
.data:0000150C                 db    0
.data:0000150D                 db    0
.data:0000150E                 db    0
.data:0000150F                 db    0
.data:00001510                 db    0
.data:00001511                 db    0
.data:00001512                 db    0
.data:00001513                 db    0
.data:00001514                 db    0
.data:00001515                 db    0
.data:00001516                 db    0
.data:00001517                 db    0
.data:00001518                 db    0
.data:00001519                 db    0
.data:0000151A                 db    0
.data:0000151B                 db    0
.data:0000151C                 db    0
.data:0000151D                 db    0
.data:0000151E                 db    0
.data:0000151F                 db    0
.data:00001520                 db    2
.data:00001521                 db    0
.data:00001522                 db    0
.data:00001523                 db    0
.data:00001524                 db 0FFh
.data:00001525                 db 0FFh
.data:00001526                 db 0FFh
.data:00001527                 db 0FFh
.data:00001528                 db 0FFh
.data:00001529                 db 0FFh
.data:0000152A                 db 0FFh
.data:0000152B                 db 0FFh
.data:0000152C                 db  73h ; s
.data:0000152D                 db  65h ; e
.data:0000152E                 db  61h ; a
.data:0000152F                 db  72h ; r
.data:00001530                 db  63h ; c
.data:00001531                 db  68h ; h
.data:00001532                 db    0
.data:00001533                 db    0
.data:00001534                 db    0
.data:00001535                 db    0
.data:00001536                 db    0
.data:00001537                 db    0
.data:00001538                 db    0
.data:00001539                 db    0
.data:0000153A                 db    0
.data:0000153B                 db    0
.data:0000153C                 db    0
.data:0000153D                 db    0
.data:0000153E                 db    0
.data:0000153F                 db    0
.data:00001540                 db    0
.data:00001541                 db    0
.data:00001542                 db    0
.data:00001543                 db    0
.data:00001544                 db    0
.data:00001545                 db    0
.data:00001546                 db    0
.data:00001547                 db    0
.data:00001548                 db    0
.data:00001549                 db    0
.data:0000154A                 db    0
.data:0000154B                 db    0
.data:0000154C                 db    0
.data:0000154D                 db    0
.data:0000154E                 db    0
.data:0000154F                 db    0
.data:00001550                 db    0
.data:00001551                 db    0
.data:00001552                 db    0
.data:00001553                 db    0
.data:00001554                 db    0
.data:00001555                 db    0
.data:00001556                 db    0
.data:00001557                 db    0
.data:00001558                 db    0
.data:00001559                 db    0
.data:0000155A                 db    0
.data:0000155B                 db    0
.data:0000155C                 db    0
.data:0000155D                 db    0
.data:0000155E                 db    0
.data:0000155F                 db    0
.data:00001560                 db    0
.data:00001561                 db    0
.data:00001562                 db    0
.data:00001563                 db    0
.data:00001564                 db    0
.data:00001565                 db    0
.data:00001566                 db    0
.data:00001567                 db    0
.data:00001568                 db    0
.data:00001569                 db    0
.data:0000156A                 db    0
.data:0000156B                 db    0
.data:0000156C                 db    3
.data:0000156D                 db    0
.data:0000156E                 db    0
.data:0000156F                 db    0
.data:00001570                 db 0FFh
.data:00001571                 db 0FFh
.data:00001572                 db 0FFh
.data:00001573                 db 0FFh
.data:00001574                 db 0FFh
.data:00001575                 db 0FFh
.data:00001576                 db 0FFh
.data:00001577                 db 0FFh
.data:00001578                 db  76h ; v
.data:00001579                 db  69h ; i
.data:0000157A                 db  65h ; e
.data:0000157B                 db  77h ; w
.data:0000157C                 db    0
.data:0000157D                 db    0
.data:0000157E                 db    0
.data:0000157F                 db    0
.data:00001580                 db    0
.data:00001581                 db    0
.data:00001582                 db    0
.data:00001583                 db    0
.data:00001584                 db    0
.data:00001585                 db    0
.data:00001586                 db    0
.data:00001587                 db    0
.data:00001588                 db    0
.data:00001589                 db    0
.data:0000158A                 db    0
.data:0000158B                 db    0
.data:0000158C                 db    0
.data:0000158D                 db    0
.data:0000158E                 db    0
.data:0000158F                 db    0
.data:00001590                 db    0
.data:00001591                 db    0
.data:00001592                 db    0
.data:00001593                 db    0
.data:00001594                 db    0
.data:00001595                 db    0
.data:00001596                 db    0
.data:00001597                 db    0
.data:00001598                 db    0
.data:00001599                 db    0
.data:0000159A                 db    0
.data:0000159B                 db    0
.data:0000159C                 db    0
.data:0000159D                 db    0
.data:0000159E                 db    0
.data:0000159F                 db    0
.data:000015A0                 db    0
.data:000015A1                 db    0
.data:000015A2                 db    0
.data:000015A3                 db    0
.data:000015A4                 db    0
.data:000015A5                 db    0
.data:000015A6                 db    0
.data:000015A7                 db    0
.data:000015A8                 db    0
.data:000015A9                 db    0
.data:000015AA                 db    0
.data:000015AB                 db    0
.data:000015AC                 db    0
.data:000015AD                 db    0
.data:000015AE                 db    0
.data:000015AF                 db    0
.data:000015B0                 db    0
.data:000015B1                 db    0
.data:000015B2                 db    0
.data:000015B3                 db    0
.data:000015B4                 db    0
.data:000015B5                 db    0
.data:000015B6                 db    0
.data:000015B7                 db    0
.data:000015B8                 db    4
.data:000015B9                 db    0
.data:000015BA                 db    0
.data:000015BB                 db    0
.data:000015BC                 db 0FFh
.data:000015BD                 db 0FFh
.data:000015BE                 db 0FFh
.data:000015BF                 db 0FFh
.data:000015C0                 db 0FFh
.data:000015C1                 db 0FFh
.data:000015C2                 db 0FFh
.data:000015C3                 db 0FFh
.data:000015C4                 db  65h ; e
.data:000015C5                 db  6Eh ; n
.data:000015C6                 db  63h ; c
.data:000015C7                 db  6Fh ; o
.data:000015C8                 db  64h ; d
.data:000015C9                 db  69h ; i
.data:000015CA                 db  6Eh ; n
.data:000015CB                 db  67h ; g
.data:000015CC                 db    0
.data:000015CD                 db    0
.data:000015CE                 db    0
.data:000015CF                 db    0
.data:000015D0                 db    0
.data:000015D1                 db    0
.data:000015D2                 db    0
.data:000015D3                 db    0
.data:000015D4                 db    0
.data:000015D5                 db    0
.data:000015D6                 db    0
.data:000015D7                 db    0
.data:000015D8                 db    0
.data:000015D9                 db    0
.data:000015DA                 db    0
.data:000015DB                 db    0
.data:000015DC                 db    0
.data:000015DD                 db    0
.data:000015DE                 db    0
.data:000015DF                 db    0
.data:000015E0                 db    0
.data:000015E1                 db    0
.data:000015E2                 db    0
.data:000015E3                 db    0
.data:000015E4                 db    0
.data:000015E5                 db    0
.data:000015E6                 db    0
.data:000015E7                 db    0
.data:000015E8                 db    0
.data:000015E9                 db    0
.data:000015EA                 db    0
.data:000015EB                 db    0
.data:000015EC                 db    0
.data:000015ED                 db    0
.data:000015EE                 db    0
.data:000015EF                 db    0
.data:000015F0                 db    0
.data:000015F1                 db    0
.data:000015F2                 db    0
.data:000015F3                 db    0
.data:000015F4                 db    0
.data:000015F5                 db    0
.data:000015F6                 db    0
.data:000015F7                 db    0
.data:000015F8                 db    0
.data:000015F9                 db    0
.data:000015FA                 db    0
.data:000015FB                 db    0
.data:000015FC                 db    0
.data:000015FD                 db    0
.data:000015FE                 db    0
.data:000015FF                 db    0
.data:00001600                 db    0
.data:00001601                 db    0
.data:00001602                 db    0
.data:00001603                 db    0
.data:00001604                 db    5
.data:00001605                 db    0
.data:00001606                 db    0
.data:00001607                 db    0
.data:00001608                 db 0FFh
.data:00001609                 db 0FFh
.data:0000160A                 db 0FFh
.data:0000160B                 db 0FFh
.data:0000160C                 db 0FFh
.data:0000160D                 db 0FFh
.data:0000160E                 db 0FFh
.data:0000160F                 db 0FFh
.data:00001610                 db  6Ch ; l
.data:00001611                 db  61h ; a
.data:00001612                 db  6Eh ; n
.data:00001613                 db  67h ; g
.data:00001614                 db  75h ; u
.data:00001615                 db  61h ; a
.data:00001616                 db  67h ; g
.data:00001617                 db  65h ; e
.data:00001618                 db    0
.data:00001619                 db    0
.data:0000161A                 db    0
.data:0000161B                 db    0
.data:0000161C                 db    0
.data:0000161D                 db    0
.data:0000161E                 db    0
.data:0000161F                 db    0
.data:00001620                 db    0
.data:00001621                 db    0
.data:00001622                 db    0
.data:00001623                 db    0
.data:00001624                 db    0
.data:00001625                 db    0
.data:00001626                 db    0
.data:00001627                 db    0
.data:00001628                 db    0
.data:00001629                 db    0
.data:0000162A                 db    0
.data:0000162B                 db    0
.data:0000162C                 db    0
.data:0000162D                 db    0
.data:0000162E                 db    0
.data:0000162F                 db    0
.data:00001630                 db    0
.data:00001631                 db    0
.data:00001632                 db    0
.data:00001633                 db    0
.data:00001634                 db    0
.data:00001635                 db    0
.data:00001636                 db    0
.data:00001637                 db    0
.data:00001638                 db    0
.data:00001639                 db    0
.data:0000163A                 db    0
.data:0000163B                 db    0
.data:0000163C                 db    0
.data:0000163D                 db    0
.data:0000163E                 db    0
.data:0000163F                 db    0
.data:00001640                 db    0
.data:00001641                 db    0
.data:00001642                 db    0
.data:00001643                 db    0
.data:00001644                 db    0
.data:00001645                 db    0
.data:00001646                 db    0
.data:00001647                 db    0
.data:00001648                 db    0
.data:00001649                 db    0
.data:0000164A                 db    0
.data:0000164B                 db    0
.data:0000164C                 db    0
.data:0000164D                 db    0
.data:0000164E                 db    0
.data:0000164F                 db    0
.data:00001650                 db    6
.data:00001651                 db    0
.data:00001652                 db    0
.data:00001653                 db    0
.data:00001654                 db 0FFh
.data:00001655                 db 0FFh
.data:00001656                 db 0FFh
.data:00001657                 db 0FFh
.data:00001658                 db 0FFh
.data:00001659                 db 0FFh
.data:0000165A                 db 0FFh
.data:0000165B                 db 0FFh
.data:0000165C                 db  73h ; s
.data:0000165D                 db  65h ; e
.data:0000165E                 db  74h ; t
.data:0000165F                 db  74h ; t
.data:00001660                 db  69h ; i
.data:00001661                 db  6Eh ; n
.data:00001662                 db  67h ; g
.data:00001663                 db  73h ; s
.data:00001664                 db    0
.data:00001665                 db    0
.data:00001666                 db    0
.data:00001667                 db    0
.data:00001668                 db    0
.data:00001669                 db    0
.data:0000166A                 db    0
.data:0000166B                 db    0
.data:0000166C                 db    0
.data:0000166D                 db    0
.data:0000166E                 db    0
.data:0000166F                 db    0
.data:00001670                 db    0
.data:00001671                 db    0
.data:00001672                 db    0
.data:00001673                 db    0
.data:00001674                 db    0
.data:00001675                 db    0
.data:00001676                 db    0
.data:00001677                 db    0
.data:00001678                 db    0
.data:00001679                 db    0
.data:0000167A                 db    0
.data:0000167B                 db    0
.data:0000167C                 db    0
.data:0000167D                 db    0
.data:0000167E                 db    0
.data:0000167F                 db    0
.data:00001680                 db    0
.data:00001681                 db    0
.data:00001682                 db    0
.data:00001683                 db    0
.data:00001684                 db    0
.data:00001685                 db    0
.data:00001686                 db    0
.data:00001687                 db    0
.data:00001688                 db    0
.data:00001689                 db    0
.data:0000168A                 db    0
.data:0000168B                 db    0
.data:0000168C                 db    0
.data:0000168D                 db    0
.data:0000168E                 db    0
.data:0000168F                 db    0
.data:00001690                 db    0
.data:00001691                 db    0
.data:00001692                 db    0
.data:00001693                 db    0
.data:00001694                 db    0
.data:00001695                 db    0
.data:00001696                 db    0
.data:00001697                 db    0
.data:00001698                 db    0
.data:00001699                 db    0
.data:0000169A                 db    0
.data:0000169B                 db    0
.data:0000169C                 db    7
.data:0000169D                 db    0
.data:0000169E                 db    0
.data:0000169F                 db    0
.data:000016A0                 db 0FFh
.data:000016A1                 db 0FFh
.data:000016A2                 db 0FFh
.data:000016A3                 db 0FFh
.data:000016A4                 db 0FFh
.data:000016A5                 db 0FFh
.data:000016A6                 db 0FFh
.data:000016A7                 db 0FFh
.data:000016A8                 db  6Dh ; m
.data:000016A9                 db  61h ; a
.data:000016AA                 db  63h ; c
.data:000016AB                 db  72h ; r
.data:000016AC                 db  6Fh ; o
.data:000016AD                 db    0
.data:000016AE                 db    0
.data:000016AF                 db    0
.data:000016B0                 db    0
.data:000016B1                 db    0
.data:000016B2                 db    0
.data:000016B3                 db    0
.data:000016B4                 db    0
.data:000016B5                 db    0
.data:000016B6                 db    0
.data:000016B7                 db    0
.data:000016B8                 db    0
.data:000016B9                 db    0
.data:000016BA                 db    0
.data:000016BB                 db    0
.data:000016BC                 db    0
.data:000016BD                 db    0
.data:000016BE                 db    0
.data:000016BF                 db    0
.data:000016C0                 db    0
.data:000016C1                 db    0
.data:000016C2                 db    0
.data:000016C3                 db    0
.data:000016C4                 db    0
.data:000016C5                 db    0
.data:000016C6                 db    0
.data:000016C7                 db    0
.data:000016C8                 db    0
.data:000016C9                 db    0
.data:000016CA                 db    0
.data:000016CB                 db    0
.data:000016CC                 db    0
.data:000016CD                 db    0
.data:000016CE                 db    0
.data:000016CF                 db    0
.data:000016D0                 db    0
.data:000016D1                 db    0
.data:000016D2                 db    0
.data:000016D3                 db    0
.data:000016D4                 db    0
.data:000016D5                 db    0
.data:000016D6                 db    0
.data:000016D7                 db    0
.data:000016D8                 db    0
.data:000016D9                 db    0
.data:000016DA                 db    0
.data:000016DB                 db    0
.data:000016DC                 db    0
.data:000016DD                 db    0
.data:000016DE                 db    0
.data:000016DF                 db    0
.data:000016E0                 db    0
.data:000016E1                 db    0
.data:000016E2                 db    0
.data:000016E3                 db    0
.data:000016E4                 db    0
.data:000016E5                 db    0
.data:000016E6                 db    0
.data:000016E7                 db    0
.data:000016E8                 db    8
.data:000016E9                 db    0
.data:000016EA                 db    0
.data:000016EB                 db    0
.data:000016EC                 db 0FFh
.data:000016ED                 db 0FFh
.data:000016EE                 db 0FFh
.data:000016EF                 db 0FFh
.data:000016F0                 db 0FFh
.data:000016F1                 db 0FFh
.data:000016F2                 db 0FFh
.data:000016F3                 db 0FFh
.data:000016F4                 db  72h ; r
.data:000016F5                 db  75h ; u
.data:000016F6                 db  6Eh ; n
.data:000016F7                 db    0
.data:000016F8                 db    0
.data:000016F9                 db    0
.data:000016FA                 db    0
.data:000016FB                 db    0
.data:000016FC                 db    0
.data:000016FD                 db    0
.data:000016FE                 db    0
.data:000016FF                 db    0
.data:00001700                 db    0
.data:00001701                 db    0
.data:00001702                 db    0
.data:00001703                 db    0
.data:00001704                 db    0
.data:00001705                 db    0
.data:00001706                 db    0
.data:00001707                 db    0
.data:00001708                 db    0
.data:00001709                 db    0
.data:0000170A                 db    0
.data:0000170B                 db    0
.data:0000170C                 db    0
.data:0000170D                 db    0
.data:0000170E                 db    0
.data:0000170F                 db    0
.data:00001710                 db    0
.data:00001711                 db    0
.data:00001712                 db    0
.data:00001713                 db    0
.data:00001714                 db    0
.data:00001715                 db    0
.data:00001716                 db    0
.data:00001717                 db    0
.data:00001718                 db    0
.data:00001719                 db    0
.data:0000171A                 db    0
.data:0000171B                 db    0
.data:0000171C                 db    0
.data:0000171D                 db    0
.data:0000171E                 db    0
.data:0000171F                 db    0
.data:00001720                 db    0
.data:00001721                 db    0
.data:00001722                 db    0
.data:00001723                 db    0
.data:00001724                 db    0
.data:00001725                 db    0
.data:00001726                 db    0
.data:00001727                 db    0
.data:00001728                 db    0
.data:00001729                 db    0
.data:0000172A                 db    0
.data:0000172B                 db    0
.data:0000172C                 db    0
.data:0000172D                 db    0
.data:0000172E                 db    0
.data:0000172F                 db    0
.data:00001730                 db    0
.data:00001731                 db    0
.data:00001732                 db    0
.data:00001733                 db    0
.data:00001734                 db    0
.data:00001735                 db    0
.data:00001736                 db    0
.data:00001737                 db    0
.data:00001738                 db    2
.data:00001739                 db    0
.data:0000173A                 db    0
.data:0000173B                 db    0
.data:0000173C                 db 0FFh
.data:0000173D                 db 0FFh
.data:0000173E                 db 0FFh
.data:0000173F                 db 0FFh
.data:00001740                 db  66h ; f
.data:00001741                 db  69h ; i
.data:00001742                 db  6Ch ; l
.data:00001743                 db  65h ; e
.data:00001744                 db  2Dh ; -
.data:00001745                 db  6Fh ; o
.data:00001746                 db  70h ; p
.data:00001747                 db  65h ; e
.data:00001748                 db  6Eh ; n
.data:00001749                 db  46h ; F
.data:0000174A                 db  6Fh ; o
.data:0000174B                 db  6Ch ; l
.data:0000174C                 db  64h ; d
.data:0000174D                 db  65h ; e
.data:0000174E                 db  72h ; r
.data:0000174F                 db    0
.data:00001750                 db    0
.data:00001751                 db    0
.data:00001752                 db    0
.data:00001753                 db    0
.data:00001754                 db    0
.data:00001755                 db    0
.data:00001756                 db    0
.data:00001757                 db    0
.data:00001758                 db    0
.data:00001759                 db    0
.data:0000175A                 db    0
.data:0000175B                 db    0
.data:0000175C                 db    0
.data:0000175D                 db    0
.data:0000175E                 db    0
.data:0000175F                 db    0
.data:00001760                 db    0
.data:00001761                 db    0
.data:00001762                 db    0
.data:00001763                 db    0
.data:00001764                 db    0
.data:00001765                 db    0
.data:00001766                 db    0
.data:00001767                 db    0
.data:00001768                 db    0
.data:00001769                 db    0
.data:0000176A                 db    0
.data:0000176B                 db    0
.data:0000176C                 db    0
.data:0000176D                 db    0
.data:0000176E                 db    0
.data:0000176F                 db    0
.data:00001770                 db    0
.data:00001771                 db    0
.data:00001772                 db    0
.data:00001773                 db    0
.data:00001774                 db    0
.data:00001775                 db    0
.data:00001776                 db    0
.data:00001777                 db    0
.data:00001778                 db    0
.data:00001779                 db    0
.data:0000177A                 db    0
.data:0000177B                 db    0
.data:0000177C                 db    0
.data:0000177D                 db    0
.data:0000177E                 db    0
.data:0000177F                 db    0
.data:00001780                 db    0
.data:00001781                 db    0
.data:00001782                 db    0
.data:00001783                 db    0
.data:00001784                 db  0Bh
.data:00001785                 db    0
.data:00001786                 db    0
.data:00001787                 db    0
.data:00001788                 db 0FFh
.data:00001789                 db 0FFh
.data:0000178A                 db 0FFh
.data:0000178B                 db 0FFh
.data:0000178C                 db  66h ; f
.data:0000178D                 db  69h ; i
.data:0000178E                 db  6Ch ; l
.data:0000178F                 db  65h ; e
.data:00001790                 db  2Dh ; -
.data:00001791                 db  63h ; c
.data:00001792                 db  6Ch ; l
.data:00001793                 db  6Fh ; o
.data:00001794                 db  73h ; s
.data:00001795                 db  65h ; e
.data:00001796                 db  4Dh ; M
.data:00001797                 db  6Fh ; o
.data:00001798                 db  72h ; r
.data:00001799                 db  65h ; e
.data:0000179A                 db    0
.data:0000179B                 db    0
.data:0000179C                 db    0
.data:0000179D                 db    0
.data:0000179E                 db    0
.data:0000179F                 db    0
.data:000017A0                 db    0
.data:000017A1                 db    0
.data:000017A2                 db    0
.data:000017A3                 db    0
.data:000017A4                 db    0
.data:000017A5                 db    0
.data:000017A6                 db    0
.data:000017A7                 db    0
.data:000017A8                 db    0
.data:000017A9                 db    0
.data:000017AA                 db    0
.data:000017AB                 db    0
.data:000017AC                 db    0
.data:000017AD                 db    0
.data:000017AE                 db    0
.data:000017AF                 db    0
.data:000017B0                 db    0
.data:000017B1                 db    0
.data:000017B2                 db    0
.data:000017B3                 db    0
.data:000017B4                 db    0
.data:000017B5                 db    0
.data:000017B6                 db    0
.data:000017B7                 db    0
.data:000017B8                 db    0
.data:000017B9                 db    0
.data:000017BA                 db    0
.data:000017BB                 db    0
.data:000017BC                 db    0
.data:000017BD                 db    0
.data:000017BE                 db    0
.data:000017BF                 db    0
.data:000017C0                 db    0
.data:000017C1                 db    0
.data:000017C2                 db    0
.data:000017C3                 db    0
.data:000017C4                 db    0
.data:000017C5                 db    0
.data:000017C6                 db    0
.data:000017C7                 db    0
.data:000017C8                 db    0
.data:000017C9                 db    0
.data:000017CA                 db    0
.data:000017CB                 db    0
.data:000017CC                 db    0
.data:000017CD                 db    0
.data:000017CE                 db    0
.data:000017CF                 db    0
.data:000017D0                 db  14h
.data:000017D1                 db    0
.data:000017D2                 db    0
.data:000017D3                 db    0
.data:000017D4                 db 0FFh
.data:000017D5                 db 0FFh
.data:000017D6                 db 0FFh
.data:000017D7                 db 0FFh
.data:000017D8                 db  66h ; f
.data:000017D9                 db  69h ; i
.data:000017DA                 db  6Ch ; l
.data:000017DB                 db  65h ; e
.data:000017DC                 db  2Dh ; -
.data:000017DD                 db  72h ; r
.data:000017DE                 db  65h ; e
.data:000017DF                 db  63h ; c
.data:000017E0                 db  65h ; e
.data:000017E1                 db  6Eh ; n
.data:000017E2                 db  74h ; t
.data:000017E3                 db  46h ; F
.data:000017E4                 db  69h ; i
.data:000017E5                 db  6Ch ; l
.data:000017E6                 db  65h ; e
.data:000017E7                 db  73h ; s
.data:000017E8                 db    0
.data:000017E9                 db    0
.data:000017EA                 db    0
.data:000017EB                 db    0
.data:000017EC                 db    0
.data:000017ED                 db    0
.data:000017EE                 db    0
.data:000017EF                 db    0
.data:000017F0                 db    0
.data:000017F1                 db    0
.data:000017F2                 db    0
.data:000017F3                 db    0
.data:000017F4                 db    0
.data:000017F5                 db    0
.data:000017F6                 db    0
.data:000017F7                 db    0
.data:000017F8                 db    0
.data:000017F9                 db    0
.data:000017FA                 db    0
.data:000017FB                 db    0
.data:000017FC                 db    0
.data:000017FD                 db    0
.data:000017FE                 db    0
.data:000017FF                 db    0
.data:00001800                 db    0
.data:00001801                 db    0
.data:00001802                 db    0
.data:00001803                 db    0
.data:00001804                 db    0
.data:00001805                 db    0
.data:00001806                 db    0
.data:00001807                 db    0
.data:00001808                 db    0
.data:00001809                 db    0
.data:0000180A                 db    0
.data:0000180B                 db    0
.data:0000180C                 db    0
.data:0000180D                 db    0
.data:0000180E                 db    0
.data:0000180F                 db    0
.data:00001810                 db    0
.data:00001811                 db    0
.data:00001812                 db    0
.data:00001813                 db    0
.data:00001814                 db    0
.data:00001815                 db    0
.data:00001816                 db    0
.data:00001817                 db    0
.data:00001818                 db    1
.data:00001819                 db    0
.data:0000181A                 db    0
.data:0000181B                 db    0
.data:0000181C                 db  0Ah
.data:0000181D                 db    0
.data:0000181E                 db    0
.data:0000181F                 db    0
.data:00001820                 db 0FFh
.data:00001821                 db 0FFh
.data:00001822                 db 0FFh
.data:00001823                 db 0FFh
.data:00001824                 db  65h ; e
.data:00001825                 db  64h ; d
.data:00001826                 db  69h ; i
.data:00001827                 db  74h ; t
.data:00001828                 db  2Dh ; -
.data:00001829                 db  63h ; c
.data:0000182A                 db  6Fh ; o
.data:0000182B                 db  70h ; p
.data:0000182C                 db  79h ; y
.data:0000182D                 db  54h ; T
.data:0000182E                 db  6Fh ; o
.data:0000182F                 db  43h ; C
.data:00001830                 db  6Ch ; l
.data:00001831                 db  69h ; i
.data:00001832                 db  70h ; p
.data:00001833                 db  62h ; b
.data:00001834                 db  6Fh ; o
.data:00001835                 db  61h ; a
.data:00001836                 db  72h ; r
.data:00001837                 db  64h ; d
.data:00001838                 db    0
.data:00001839                 db    0
.data:0000183A                 db    0
.data:0000183B                 db    0
.data:0000183C                 db    0
.data:0000183D                 db    0
.data:0000183E                 db    0
.data:0000183F                 db    0
.data:00001840                 db    0
.data:00001841                 db    0
.data:00001842                 db    0
.data:00001843                 db    0
.data:00001844                 db    0
.data:00001845                 db    0
.data:00001846                 db    0
.data:00001847                 db    0
.data:00001848                 db    0
.data:00001849                 db    0
.data:0000184A                 db    0
.data:0000184B                 db    0
.data:0000184C                 db    0
.data:0000184D                 db    0
.data:0000184E                 db    0
.data:0000184F                 db    0
.data:00001850                 db    0
.data:00001851                 db    0
.data:00001852                 db    0
.data:00001853                 db    0
.data:00001854                 db    0
.data:00001855                 db    0
.data:00001856                 db    0
.data:00001857                 db    0
.data:00001858                 db    0
.data:00001859                 db    0
.data:0000185A                 db    0
.data:0000185B                 db    0
.data:0000185C                 db    0
.data:0000185D                 db    0
.data:0000185E                 db    0
.data:0000185F                 db    0
.data:00001860                 db    0
.data:00001861                 db    0
.data:00001862                 db    0
.data:00001863                 db    0
.data:00001864                 db    1
.data:00001865                 db    0
.data:00001866                 db    0
.data:00001867                 db    0
.data:00001868                 db  0Bh
.data:00001869                 db    0
.data:0000186A                 db    0
.data:0000186B                 db    0
.data:0000186C                 db 0FFh
.data:0000186D                 db 0FFh
.data:0000186E                 db 0FFh
.data:0000186F                 db 0FFh
.data:00001870                 db  65h ; e
.data:00001871                 db  64h ; d
.data:00001872                 db  69h ; i
.data:00001873                 db  74h ; t
.data:00001874                 db  2Dh ; -
.data:00001875                 db  69h ; i
.data:00001876                 db  6Eh ; n
.data:00001877                 db  64h ; d
.data:00001878                 db  65h ; e
.data:00001879                 db  6Eh ; n
.data:0000187A                 db  74h ; t
.data:0000187B                 db    0
.data:0000187C                 db    0
.data:0000187D                 db    0
.data:0000187E                 db    0
.data:0000187F                 db    0
.data:00001880                 db    0
.data:00001881                 db    0
.data:00001882                 db    0
.data:00001883                 db    0
.data:00001884                 db    0
.data:00001885                 db    0
.data:00001886                 db    0
.data:00001887                 db    0
.data:00001888                 db    0
.data:00001889                 db    0
.data:0000188A                 db    0
.data:0000188B                 db    0
.data:0000188C                 db    0
.data:0000188D                 db    0
.data:0000188E                 db    0
.data:0000188F                 db    0
.data:00001890                 db    0
.data:00001891                 db    0
.data:00001892                 db    0
.data:00001893                 db    0
.data:00001894                 db    0
.data:00001895                 db    0
.data:00001896                 db    0
.data:00001897                 db    0
.data:00001898                 db    0
.data:00001899                 db    0
.data:0000189A                 db    0
.data:0000189B                 db    0
.data:0000189C                 db    0
.data:0000189D                 db    0
.data:0000189E                 db    0
.data:0000189F                 db    0
.data:000018A0                 db    0
.data:000018A1                 db    0
.data:000018A2                 db    0
.data:000018A3                 db    0
.data:000018A4                 db    0
.data:000018A5                 db    0
.data:000018A6                 db    0
.data:000018A7                 db    0
.data:000018A8                 db    0
.data:000018A9                 db    0
.data:000018AA                 db    0
.data:000018AB                 db    0
.data:000018AC                 db    0
.data:000018AD                 db    0
.data:000018AE                 db    0
.data:000018AF                 db    0
.data:000018B0                 db    1
.data:000018B1                 db    0
.data:000018B2                 db    0
.data:000018B3                 db    0
.data:000018B4                 db  0Ch
.data:000018B5                 db    0
.data:000018B6                 db    0
.data:000018B7                 db    0
.data:000018B8                 db 0FFh
.data:000018B9                 db 0FFh
.data:000018BA                 db 0FFh
.data:000018BB                 db 0FFh
.data:000018BC                 db  65h ; e
.data:000018BD                 db  64h ; d
.data:000018BE                 db  69h ; i
.data:000018BF                 db  74h ; t
.data:000018C0                 db  2Dh ; -
.data:000018C1                 db  63h ; c
.data:000018C2                 db  6Fh ; o
.data:000018C3                 db  6Eh ; n
.data:000018C4                 db  76h ; v
.data:000018C5                 db  65h ; e
.data:000018C6                 db  72h ; r
.data:000018C7                 db  74h ; t
.data:000018C8                 db  43h ; C
.data:000018C9                 db  61h ; a
.data:000018CA                 db  73h ; s
.data:000018CB                 db  65h ; e
.data:000018CC                 db  54h ; T
.data:000018CD                 db  6Fh ; o
.data:000018CE                 db    0
.data:000018CF                 db    0
.data:000018D0                 db    0
.data:000018D1                 db    0
.data:000018D2                 db    0
.data:000018D3                 db    0
.data:000018D4                 db    0
.data:000018D5                 db    0
.data:000018D6                 db    0
.data:000018D7                 db    0
.data:000018D8                 db    0
.data:000018D9                 db    0
.data:000018DA                 db    0
.data:000018DB                 db    0
.data:000018DC                 db    0
.data:000018DD                 db    0
.data:000018DE                 db    0
.data:000018DF                 db    0
.data:000018E0                 db    0
.data:000018E1                 db    0
.data:000018E2                 db    0
.data:000018E3                 db    0
.data:000018E4                 db    0
.data:000018E5                 db    0
.data:000018E6                 db    0
.data:000018E7                 db    0
.data:000018E8                 db    0
.data:000018E9                 db    0
.data:000018EA                 db    0
.data:000018EB                 db    0
.data:000018EC                 db    0
.data:000018ED                 db    0
.data:000018EE                 db    0
.data:000018EF                 db    0
.data:000018F0                 db    0
.data:000018F1                 db    0
.data:000018F2                 db    0
.data:000018F3                 db    0
.data:000018F4                 db    0
.data:000018F5                 db    0
.data:000018F6                 db    0
.data:000018F7                 db    0
.data:000018F8                 db    0
.data:000018F9                 db    0
.data:000018FA                 db    0
.data:000018FB                 db    0
.data:000018FC                 db    1
.data:000018FD                 db    0
.data:000018FE                 db    0
.data:000018FF                 db    0
.data:00001900                 db  0Dh
.data:00001901                 db    0
.data:00001902                 db    0
.data:00001903                 db    0
.data:00001904                 db 0FFh
.data:00001905                 db 0FFh
.data:00001906                 db 0FFh
.data:00001907                 db 0FFh
.data:00001908                 db  65h ; e
.data:00001909                 db  64h ; d
.data:0000190A                 db  69h ; i
.data:0000190B                 db  74h ; t
.data:0000190C                 db  2Dh ; -
.data:0000190D                 db  6Ch ; l
.data:0000190E                 db  69h ; i
.data:0000190F                 db  6Eh ; n
.data:00001910                 db  65h ; e
.data:00001911                 db  4Fh ; O
.data:00001912                 db  70h ; p
.data:00001913                 db  65h ; e
.data:00001914                 db  72h ; r
.data:00001915                 db  61h ; a
.data:00001916                 db  74h ; t
.data:00001917                 db  69h ; i
.data:00001918                 db  6Fh ; o
.data:00001919                 db  6Eh ; n
.data:0000191A                 db  73h ; s
.data:0000191B                 db    0
.data:0000191C                 db    0
.data:0000191D                 db    0
.data:0000191E                 db    0
.data:0000191F                 db    0
.data:00001920                 db    0
.data:00001921                 db    0
.data:00001922                 db    0
.data:00001923                 db    0
.data:00001924                 db    0
.data:00001925                 db    0
.data:00001926                 db    0
.data:00001927                 db    0
.data:00001928                 db    0
.data:00001929                 db    0
.data:0000192A                 db    0
.data:0000192B                 db    0
.data:0000192C                 db    0
.data:0000192D                 db    0
.data:0000192E                 db    0
.data:0000192F                 db    0
.data:00001930                 db    0
.data:00001931                 db    0
.data:00001932                 db    0
.data:00001933                 db    0
.data:00001934                 db    0
.data:00001935                 db    0
.data:00001936                 db    0
.data:00001937                 db    0
.data:00001938                 db    0
.data:00001939                 db    0
.data:0000193A                 db    0
.data:0000193B                 db    0
.data:0000193C                 db    0
.data:0000193D                 db    0
.data:0000193E                 db    0
.data:0000193F                 db    0
.data:00001940                 db    0
.data:00001941                 db    0
.data:00001942                 db    0
.data:00001943                 db    0
.data:00001944                 db    0
.data:00001945                 db    0
.data:00001946                 db    0
.data:00001947                 db    0
.data:00001948                 db    1
.data:00001949                 db    0
.data:0000194A                 db    0
.data:0000194B                 db    0
.data:0000194C                 db  0Eh
.data:0000194D                 db    0
.data:0000194E                 db    0
.data:0000194F                 db    0
.data:00001950                 db 0FFh
.data:00001951                 db 0FFh
.data:00001952                 db 0FFh
.data:00001953                 db 0FFh
.data:00001954                 db  65h ; e
.data:00001955                 db  64h ; d
.data:00001956                 db  69h ; i
.data:00001957                 db  74h ; t
.data:00001958                 db  2Dh ; -
.data:00001959                 db  63h ; c
.data:0000195A                 db  6Fh ; o
.data:0000195B                 db  6Dh ; m
.data:0000195C                 db  6Dh ; m
.data:0000195D                 db  65h ; e
.data:0000195E                 db  6Eh ; n
.data:0000195F                 db  74h ; t
.data:00001960                 db    0
.data:00001961                 db    0
.data:00001962                 db    0
.data:00001963                 db    0
.data:00001964                 db    0
.data:00001965                 db    0
.data:00001966                 db    0
.data:00001967                 db    0
.data:00001968                 db    0
.data:00001969                 db    0
.data:0000196A                 db    0
.data:0000196B                 db    0
.data:0000196C                 db    0
.data:0000196D                 db    0
.data:0000196E                 db    0
.data:0000196F                 db    0
.data:00001970                 db    0
.data:00001971                 db    0
.data:00001972                 db    0
.data:00001973                 db    0
.data:00001974                 db    0
.data:00001975                 db    0
.data:00001976                 db    0
.data:00001977                 db    0
.data:00001978                 db    0
.data:00001979                 db    0
.data:0000197A                 db    0
.data:0000197B                 db    0
.data:0000197C                 db    0
.data:0000197D                 db    0
.data:0000197E                 db    0
.data:0000197F                 db    0
.data:00001980                 db    0
.data:00001981                 db    0
.data:00001982                 db    0
.data:00001983                 db    0
.data:00001984                 db    0
.data:00001985                 db    0
.data:00001986                 db    0
.data:00001987                 db    0
.data:00001988                 db    0
.data:00001989                 db    0
.data:0000198A                 db    0
.data:0000198B                 db    0
.data:0000198C                 db    0
.data:0000198D                 db    0
.data:0000198E                 db    0
.data:0000198F                 db    0
.data:00001990                 db    0
.data:00001991                 db    0
.data:00001992                 db    0
.data:00001993                 db    0
.data:00001994                 db    1
.data:00001995                 db    0
.data:00001996                 db    0
.data:00001997                 db    0
.data:00001998                 db  0Fh
.data:00001999                 db    0
.data:0000199A                 db    0
.data:0000199B                 db    0
.data:0000199C                 db 0FFh
.data:0000199D                 db 0FFh
.data:0000199E                 db 0FFh
.data:0000199F                 db 0FFh
.data:000019A0                 db  65h ; e
.data:000019A1                 db  64h ; d
.data:000019A2                 db  69h ; i
.data:000019A3                 db  74h ; t
.data:000019A4                 db  2Dh ; -
.data:000019A5                 db  61h ; a
.data:000019A6                 db  75h ; u
.data:000019A7                 db  74h ; t
.data:000019A8                 db  6Fh ; o
.data:000019A9                 db  43h ; C
.data:000019AA                 db  6Fh ; o
.data:000019AB                 db  6Dh ; m
.data:000019AC                 db  70h ; p
.data:000019AD                 db  6Ch ; l
.data:000019AE                 db  65h ; e
.data:000019AF                 db  74h ; t
.data:000019B0                 db  69h ; i
.data:000019B1                 db  6Fh ; o
.data:000019B2                 db  6Eh ; n
.data:000019B3                 db    0
.data:000019B4                 db    0
.data:000019B5                 db    0
.data:000019B6                 db    0
.data:000019B7                 db    0
.data:000019B8                 db    0
.data:000019B9                 db    0
.data:000019BA                 db    0
.data:000019BB                 db    0
.data:000019BC                 db    0
.data:000019BD                 db    0
.data:000019BE                 db    0
.data:000019BF                 db    0
.data:000019C0                 db    0
.data:000019C1                 db    0
.data:000019C2                 db    0
.data:000019C3                 db    0
.data:000019C4                 db    0
.data:000019C5                 db    0
.data:000019C6                 db    0
.data:000019C7                 db    0
.data:000019C8                 db    0
.data:000019C9                 db    0
.data:000019CA                 db    0
.data:000019CB                 db    0
.data:000019CC                 db    0
.data:000019CD                 db    0
.data:000019CE                 db    0
.data:000019CF                 db    0
.data:000019D0                 db    0
.data:000019D1                 db    0
.data:000019D2                 db    0
.data:000019D3                 db    0
.data:000019D4                 db    0
.data:000019D5                 db    0
.data:000019D6                 db    0
.data:000019D7                 db    0
.data:000019D8                 db    0
.data:000019D9                 db    0
.data:000019DA                 db    0
.data:000019DB                 db    0
.data:000019DC                 db    0
.data:000019DD                 db    0
.data:000019DE                 db    0
.data:000019DF                 db    0
.data:000019E0                 db    1
.data:000019E1                 db    0
.data:000019E2                 db    0
.data:000019E3                 db    0
.data:000019E4                 db  10h
.data:000019E5                 db    0
.data:000019E6                 db    0
.data:000019E7                 db    0
.data:000019E8                 db 0FFh
.data:000019E9                 db 0FFh
.data:000019EA                 db 0FFh
.data:000019EB                 db 0FFh
.data:000019EC                 db  65h ; e
.data:000019ED                 db  64h ; d
.data:000019EE                 db  69h ; i
.data:000019EF                 db  74h ; t
.data:000019F0                 db  2Dh ; -
.data:000019F1                 db  65h ; e
.data:000019F2                 db  6Fh ; o
.data:000019F3                 db  6Ch ; l
.data:000019F4                 db  43h ; C
.data:000019F5                 db  6Fh ; o
.data:000019F6                 db  6Eh ; n
.data:000019F7                 db  76h ; v
.data:000019F8                 db  65h ; e
.data:000019F9                 db  72h ; r
.data:000019FA                 db  73h ; s
.data:000019FB                 db  69h ; i
.data:000019FC                 db  6Fh ; o
.data:000019FD                 db  6Eh ; n
.data:000019FE                 db    0
.data:000019FF                 db    0
.data:00001A00                 db    0
.data:00001A01                 db    0
.data:00001A02                 db    0
.data:00001A03                 db    0
.data:00001A04                 db    0
.data:00001A05                 db    0
.data:00001A06                 db    0
.data:00001A07                 db    0
.data:00001A08                 db    0
.data:00001A09                 db    0
.data:00001A0A                 db    0
.data:00001A0B                 db    0
.data:00001A0C                 db    0
.data:00001A0D                 db    0
.data:00001A0E                 db    0
.data:00001A0F                 db    0
.data:00001A10                 db    0
.data:00001A11                 db    0
.data:00001A12                 db    0
.data:00001A13                 db    0
.data:00001A14                 db    0
.data:00001A15                 db    0
.data:00001A16                 db    0
.data:00001A17                 db    0
.data:00001A18                 db    0
.data:00001A19                 db    0
.data:00001A1A                 db    0
.data:00001A1B                 db    0
.data:00001A1C                 db    0
.data:00001A1D                 db    0
.data:00001A1E                 db    0
.data:00001A1F                 db    0
.data:00001A20                 db    0
.data:00001A21                 db    0
.data:00001A22                 db    0
.data:00001A23                 db    0
.data:00001A24                 db    0
.data:00001A25                 db    0
.data:00001A26                 db    0
.data:00001A27                 db    0
.data:00001A28                 db    0
.data:00001A29                 db    0
.data:00001A2A                 db    0
.data:00001A2B                 db    0
.data:00001A2C                 db    1
.data:00001A2D                 db    0
.data:00001A2E                 db    0
.data:00001A2F                 db    0
.data:00001A30                 db  11h
.data:00001A31                 db    0
.data:00001A32                 db    0
.data:00001A33                 db    0
.data:00001A34                 db 0FFh
.data:00001A35                 db 0FFh
.data:00001A36                 db 0FFh
.data:00001A37                 db 0FFh
.data:00001A38                 db  65h ; e
.data:00001A39                 db  64h ; d
.data:00001A3A                 db  69h ; i
.data:00001A3B                 db  74h ; t
.data:00001A3C                 db  2Dh ; -
.data:00001A3D                 db  62h ; b
.data:00001A3E                 db  6Ch ; l
.data:00001A3F                 db  61h ; a
.data:00001A40                 db  6Eh ; n
.data:00001A41                 db  6Bh ; k
.data:00001A42                 db  4Fh ; O
.data:00001A43                 db  70h ; p
.data:00001A44                 db  65h ; e
.data:00001A45                 db  72h ; r
.data:00001A46                 db  61h ; a
.data:00001A47                 db  74h ; t
.data:00001A48                 db  69h ; i
.data:00001A49                 db  6Fh ; o
.data:00001A4A                 db  6Eh ; n
.data:00001A4B                 db  73h ; s
.data:00001A4C                 db    0
.data:00001A4D                 db    0
.data:00001A4E                 db    0
.data:00001A4F                 db    0
.data:00001A50                 db    0
.data:00001A51                 db    0
.data:00001A52                 db    0
.data:00001A53                 db    0
.data:00001A54                 db    0
.data:00001A55                 db    0
.data:00001A56                 db    0
.data:00001A57                 db    0
.data:00001A58                 db    0
.data:00001A59                 db    0
.data:00001A5A                 db    0
.data:00001A5B                 db    0
.data:00001A5C                 db    0
.data:00001A5D                 db    0
.data:00001A5E                 db    0
.data:00001A5F                 db    0
.data:00001A60                 db    0
.data:00001A61                 db    0
.data:00001A62                 db    0
.data:00001A63                 db    0
.data:00001A64                 db    0
.data:00001A65                 db    0
.data:00001A66                 db    0
.data:00001A67                 db    0
.data:00001A68                 db    0
.data:00001A69                 db    0
.data:00001A6A                 db    0
.data:00001A6B                 db    0
.data:00001A6C                 db    0
.data:00001A6D                 db    0
.data:00001A6E                 db    0
.data:00001A6F                 db    0
.data:00001A70                 db    0
.data:00001A71                 db    0
.data:00001A72                 db    0
.data:00001A73                 db    0
.data:00001A74                 db    0
.data:00001A75                 db    0
.data:00001A76                 db    0
.data:00001A77                 db    0
.data:00001A78                 db    1
.data:00001A79                 db    0
.data:00001A7A                 db    0
.data:00001A7B                 db    0
.data:00001A7C                 db  12h
.data:00001A7D                 db    0
.data:00001A7E                 db    0
.data:00001A7F                 db    0
.data:00001A80                 db 0FFh
.data:00001A81                 db 0FFh
.data:00001A82                 db 0FFh
.data:00001A83                 db 0FFh
.data:00001A84                 db  65h ; e
.data:00001A85                 db  64h ; d
.data:00001A86                 db  69h ; i
.data:00001A87                 db  74h ; t
.data:00001A88                 db  2Dh ; -
.data:00001A89                 db  70h ; p
.data:00001A8A                 db  61h ; a
.data:00001A8B                 db  73h ; s
.data:00001A8C                 db  74h ; t
.data:00001A8D                 db  65h ; e
.data:00001A8E                 db  53h ; S
.data:00001A8F                 db  70h ; p
.data:00001A90                 db  65h ; e
.data:00001A91                 db  63h ; c
.data:00001A92                 db  69h ; i
.data:00001A93                 db  61h ; a
.data:00001A94                 db  6Ch ; l
.data:00001A95                 db    0
.data:00001A96                 db    0
.data:00001A97                 db    0
.data:00001A98                 db    0
.data:00001A99                 db    0
.data:00001A9A                 db    0
.data:00001A9B                 db    0
.data:00001A9C                 db    0
.data:00001A9D                 db    0
.data:00001A9E                 db    0
.data:00001A9F                 db    0
.data:00001AA0                 db    0
.data:00001AA1                 db    0
.data:00001AA2                 db    0
.data:00001AA3                 db    0
.data:00001AA4                 db    0
.data:00001AA5                 db    0
.data:00001AA6                 db    0
.data:00001AA7                 db    0
.data:00001AA8                 db    0
.data:00001AA9                 db    0
.data:00001AAA                 db    0
.data:00001AAB                 db    0
.data:00001AAC                 db    0
.data:00001AAD                 db    0
.data:00001AAE                 db    0
.data:00001AAF                 db    0
.data:00001AB0                 db    0
.data:00001AB1                 db    0
.data:00001AB2                 db    0
.data:00001AB3                 db    0
.data:00001AB4                 db    0
.data:00001AB5                 db    0
.data:00001AB6                 db    0
.data:00001AB7                 db    0
.data:00001AB8                 db    0
.data:00001AB9                 db    0
.data:00001ABA                 db    0
.data:00001ABB                 db    0
.data:00001ABC                 db    0
.data:00001ABD                 db    0
.data:00001ABE                 db    0
.data:00001ABF                 db    0
.data:00001AC0                 db    0
.data:00001AC1                 db    0
.data:00001AC2                 db    0
.data:00001AC3                 db    0
.data:00001AC4                 db    2
.data:00001AC5                 db    0
.data:00001AC6                 db    0
.data:00001AC7                 db    0
.data:00001AC8                 db  12h
.data:00001AC9                 db    0
.data:00001ACA                 db    0
.data:00001ACB                 db    0
.data:00001ACC                 db 0FFh
.data:00001ACD                 db 0FFh
.data:00001ACE                 db 0FFh
.data:00001ACF                 db 0FFh
.data:00001AD0                 db  73h ; s
.data:00001AD1                 db  65h ; e
.data:00001AD2                 db  61h ; a
.data:00001AD3                 db  72h ; r
.data:00001AD4                 db  63h ; c
.data:00001AD5                 db  68h ; h
.data:00001AD6                 db  2Dh ; -
.data:00001AD7                 db  6Dh ; m
.data:00001AD8                 db  61h ; a
.data:00001AD9                 db  72h ; r
.data:00001ADA                 db  6Bh ; k
.data:00001ADB                 db  41h ; A
.data:00001ADC                 db  6Ch ; l
.data:00001ADD                 db  6Ch ; l
.data:00001ADE                 db    0
.data:00001ADF                 db    0
.data:00001AE0                 db    0
.data:00001AE1                 db    0
.data:00001AE2                 db    0
.data:00001AE3                 db    0
.data:00001AE4                 db    0
.data:00001AE5                 db    0
.data:00001AE6                 db    0
.data:00001AE7                 db    0
.data:00001AE8                 db    0
.data:00001AE9                 db    0
.data:00001AEA                 db    0
.data:00001AEB                 db    0
.data:00001AEC                 db    0
.data:00001AED                 db    0
.data:00001AEE                 db    0
.data:00001AEF                 db    0
.data:00001AF0                 db    0
.data:00001AF1                 db    0
.data:00001AF2                 db    0
.data:00001AF3                 db    0
.data:00001AF4                 db    0
.data:00001AF5                 db    0
.data:00001AF6                 db    0
.data:00001AF7                 db    0
.data:00001AF8                 db    0
.data:00001AF9                 db    0
.data:00001AFA                 db    0
.data:00001AFB                 db    0
.data:00001AFC                 db    0
.data:00001AFD                 db    0
.data:00001AFE                 db    0
.data:00001AFF                 db    0
.data:00001B00                 db    0
.data:00001B01                 db    0
.data:00001B02                 db    0
.data:00001B03                 db    0
.data:00001B04                 db    0
.data:00001B05                 db    0
.data:00001B06                 db    0
.data:00001B07                 db    0
.data:00001B08                 db    0
.data:00001B09                 db    0
.data:00001B0A                 db    0
.data:00001B0B                 db    0
.data:00001B0C                 db    0
.data:00001B0D                 db    0
.data:00001B0E                 db    0
.data:00001B0F                 db    0
.data:00001B10                 db    2
.data:00001B11                 db    0
.data:00001B12                 db    0
.data:00001B13                 db    0
.data:00001B14                 db  13h
.data:00001B15                 db    0
.data:00001B16                 db    0
.data:00001B17                 db    0
.data:00001B18                 db 0FFh
.data:00001B19                 db 0FFh
.data:00001B1A                 db 0FFh
.data:00001B1B                 db 0FFh
.data:00001B1C                 db  73h ; s
.data:00001B1D                 db  65h ; e
.data:00001B1E                 db  61h ; a
.data:00001B1F                 db  72h ; r
.data:00001B20                 db  63h ; c
.data:00001B21                 db  68h ; h
.data:00001B22                 db  2Dh ; -
.data:00001B23                 db  75h ; u
.data:00001B24                 db  6Eh ; n
.data:00001B25                 db  6Dh ; m
.data:00001B26                 db  61h ; a
.data:00001B27                 db  72h ; r
.data:00001B28                 db  6Bh ; k
.data:00001B29                 db  41h ; A
.data:00001B2A                 db  6Ch ; l
.data:00001B2B                 db  6Ch ; l
.data:00001B2C                 db    0
.data:00001B2D                 db    0
.data:00001B2E                 db    0
.data:00001B2F                 db    0
.data:00001B30                 db    0
.data:00001B31                 db    0
.data:00001B32                 db    0
.data:00001B33                 db    0
.data:00001B34                 db    0
.data:00001B35                 db    0
.data:00001B36                 db    0
.data:00001B37                 db    0
.data:00001B38                 db    0
.data:00001B39                 db    0
.data:00001B3A                 db    0
.data:00001B3B                 db    0
.data:00001B3C                 db    0
.data:00001B3D                 db    0
.data:00001B3E                 db    0
.data:00001B3F                 db    0
.data:00001B40                 db    0
.data:00001B41                 db    0
.data:00001B42                 db    0
.data:00001B43                 db    0
.data:00001B44                 db    0
.data:00001B45                 db    0
.data:00001B46                 db    0
.data:00001B47                 db    0
.data:00001B48                 db    0
.data:00001B49                 db    0
.data:00001B4A                 db    0
.data:00001B4B                 db    0
.data:00001B4C                 db    0
.data:00001B4D                 db    0
.data:00001B4E                 db    0
.data:00001B4F                 db    0
.data:00001B50                 db    0
.data:00001B51                 db    0
.data:00001B52                 db    0
.data:00001B53                 db    0
.data:00001B54                 db    0
.data:00001B55                 db    0
.data:00001B56                 db    0
.data:00001B57                 db    0
.data:00001B58                 db    0
.data:00001B59                 db    0
.data:00001B5A                 db    0
.data:00001B5B                 db    0
.data:00001B5C                 db    2
.data:00001B5D                 db    0
.data:00001B5E                 db    0
.data:00001B5F                 db    0
.data:00001B60                 db  14h
.data:00001B61                 db    0
.data:00001B62                 db    0
.data:00001B63                 db    0
.data:00001B64                 db 0FFh
.data:00001B65                 db 0FFh
.data:00001B66                 db 0FFh
.data:00001B67                 db 0FFh
.data:00001B68                 db  73h ; s
.data:00001B69                 db  65h ; e
.data:00001B6A                 db  61h ; a
.data:00001B6B                 db  72h ; r
.data:00001B6C                 db  63h ; c
.data:00001B6D                 db  68h ; h
.data:00001B6E                 db  2Dh ; -
.data:00001B6F                 db  6Ah ; j
.data:00001B70                 db  75h ; u
.data:00001B71                 db  6Dh ; m
.data:00001B72                 db  70h ; p
.data:00001B73                 db  55h ; U
.data:00001B74                 db  70h ; p
.data:00001B75                 db    0
.data:00001B76                 db    0
.data:00001B77                 db    0
.data:00001B78                 db    0
.data:00001B79                 db    0
.data:00001B7A                 db    0
.data:00001B7B                 db    0
.data:00001B7C                 db    0
.data:00001B7D                 db    0
.data:00001B7E                 db    0
.data:00001B7F                 db    0
.data:00001B80                 db    0
.data:00001B81                 db    0
.data:00001B82                 db    0
.data:00001B83                 db    0
.data:00001B84                 db    0
.data:00001B85                 db    0
.data:00001B86                 db    0
.data:00001B87                 db    0
.data:00001B88                 db    0
.data:00001B89                 db    0
.data:00001B8A                 db    0
.data:00001B8B                 db    0
.data:00001B8C                 db    0
.data:00001B8D                 db    0
.data:00001B8E                 db    0
.data:00001B8F                 db    0
.data:00001B90                 db    0
.data:00001B91                 db    0
.data:00001B92                 db    0
.data:00001B93                 db    0
.data:00001B94                 db    0
.data:00001B95                 db    0
.data:00001B96                 db    0
.data:00001B97                 db    0
.data:00001B98                 db    0
.data:00001B99                 db    0
.data:00001B9A                 db    0
.data:00001B9B                 db    0
.data:00001B9C                 db    0
.data:00001B9D                 db    0
.data:00001B9E                 db    0
.data:00001B9F                 db    0
.data:00001BA0                 db    0
.data:00001BA1                 db    0
.data:00001BA2                 db    0
.data:00001BA3                 db    0
.data:00001BA4                 db    0
.data:00001BA5                 db    0
.data:00001BA6                 db    0
.data:00001BA7                 db    0
.data:00001BA8                 db    2
.data:00001BA9                 db    0
.data:00001BAA                 db    0
.data:00001BAB                 db    0
.data:00001BAC                 db  15h
.data:00001BAD                 db    0
.data:00001BAE                 db    0
.data:00001BAF                 db    0
.data:00001BB0                 db 0FFh
.data:00001BB1                 db 0FFh
.data:00001BB2                 db 0FFh
.data:00001BB3                 db 0FFh
.data:00001BB4                 db  73h ; s
.data:00001BB5                 db  65h ; e
.data:00001BB6                 db  61h ; a
.data:00001BB7                 db  72h ; r
.data:00001BB8                 db  63h ; c
.data:00001BB9                 db  68h ; h
.data:00001BBA                 db  2Dh ; -
.data:00001BBB                 db  6Ah ; j
.data:00001BBC                 db  75h ; u
.data:00001BBD                 db  6Dh ; m
.data:00001BBE                 db  70h ; p
.data:00001BBF                 db  44h ; D
.data:00001BC0                 db  6Fh ; o
.data:00001BC1                 db  77h ; w
.data:00001BC2                 db  6Eh ; n
.data:00001BC3                 db    0
.data:00001BC4                 db    0
.data:00001BC5                 db    0
.data:00001BC6                 db    0
.data:00001BC7                 db    0
.data:00001BC8                 db    0
.data:00001BC9                 db    0
.data:00001BCA                 db    0
.data:00001BCB                 db    0
.data:00001BCC                 db    0
.data:00001BCD                 db    0
.data:00001BCE                 db    0
.data:00001BCF                 db    0
.data:00001BD0                 db    0
.data:00001BD1                 db    0
.data:00001BD2                 db    0
.data:00001BD3                 db    0
.data:00001BD4                 db    0
.data:00001BD5                 db    0
.data:00001BD6                 db    0
.data:00001BD7                 db    0
.data:00001BD8                 db    0
.data:00001BD9                 db    0
.data:00001BDA                 db    0
.data:00001BDB                 db    0
.data:00001BDC                 db    0
.data:00001BDD                 db    0
.data:00001BDE                 db    0
.data:00001BDF                 db    0
.data:00001BE0                 db    0
.data:00001BE1                 db    0
.data:00001BE2                 db    0
.data:00001BE3                 db    0
.data:00001BE4                 db    0
.data:00001BE5                 db    0
.data:00001BE6                 db    0
.data:00001BE7                 db    0
.data:00001BE8                 db    0
.data:00001BE9                 db    0
.data:00001BEA                 db    0
.data:00001BEB                 db    0
.data:00001BEC                 db    0
.data:00001BED                 db    0
.data:00001BEE                 db    0
.data:00001BEF                 db    0
.data:00001BF0                 db    0
.data:00001BF1                 db    0
.data:00001BF2                 db    0
.data:00001BF3                 db    0
.data:00001BF4                 db    2
.data:00001BF5                 db    0
.data:00001BF6                 db    0
.data:00001BF7                 db    0
.data:00001BF8                 db  17h
.data:00001BF9                 db    0
.data:00001BFA                 db    0
.data:00001BFB                 db    0
.data:00001BFC                 db 0FFh
.data:00001BFD                 db 0FFh
.data:00001BFE                 db 0FFh
.data:00001BFF                 db 0FFh
.data:00001C00                 db  73h ; s
.data:00001C01                 db  65h ; e
.data:00001C02                 db  61h ; a
.data:00001C03                 db  72h ; r
.data:00001C04                 db  63h ; c
.data:00001C05                 db  68h ; h
.data:00001C06                 db  2Dh ; -
.data:00001C07                 db  62h ; b
.data:00001C08                 db  6Fh ; o
.data:00001C09                 db  6Fh ; o
.data:00001C0A                 db  6Bh ; k
.data:00001C0B                 db  6Dh ; m
.data:00001C0C                 db  61h ; a
.data:00001C0D                 db  72h ; r
.data:00001C0E                 db  6Bh ; k
.data:00001C0F                 db    0
.data:00001C10                 db    0
.data:00001C11                 db    0
.data:00001C12                 db    0
.data:00001C13                 db    0
.data:00001C14                 db    0
.data:00001C15                 db    0
.data:00001C16                 db    0
.data:00001C17                 db    0
.data:00001C18                 db    0
.data:00001C19                 db    0
.data:00001C1A                 db    0
.data:00001C1B                 db    0
.data:00001C1C                 db    0
.data:00001C1D                 db    0
.data:00001C1E                 db    0
.data:00001C1F                 db    0
.data:00001C20                 db    0
.data:00001C21                 db    0
.data:00001C22                 db    0
.data:00001C23                 db    0
.data:00001C24                 db    0
.data:00001C25                 db    0
.data:00001C26                 db    0
.data:00001C27                 db    0
.data:00001C28                 db    0
.data:00001C29                 db    0
.data:00001C2A                 db    0
.data:00001C2B                 db    0
.data:00001C2C                 db    0
.data:00001C2D                 db    0
.data:00001C2E                 db    0
.data:00001C2F                 db    0
.data:00001C30                 db    0
.data:00001C31                 db    0
.data:00001C32                 db    0
.data:00001C33                 db    0
.data:00001C34                 db    0
.data:00001C35                 db    0
.data:00001C36                 db    0
.data:00001C37                 db    0
.data:00001C38                 db    0
.data:00001C39                 db    0
.data:00001C3A                 db    0
.data:00001C3B                 db    0
.data:00001C3C                 db    0
.data:00001C3D                 db    0
.data:00001C3E                 db    0
.data:00001C3F                 db    0
.data:00001C40                 db    3
.data:00001C41                 db    0
.data:00001C42                 db    0
.data:00001C43                 db    0
.data:00001C44                 db    4
.data:00001C45                 db    0
.data:00001C46                 db    0
.data:00001C47                 db    0
.data:00001C48                 db 0FFh
.data:00001C49                 db 0FFh
.data:00001C4A                 db 0FFh
.data:00001C4B                 db 0FFh
.data:00001C4C                 db  76h ; v
.data:00001C4D                 db  69h ; i
.data:00001C4E                 db  65h ; e
.data:00001C4F                 db  77h ; w
.data:00001C50                 db  2Dh ; -
.data:00001C51                 db  73h ; s
.data:00001C52                 db  68h ; h
.data:00001C53                 db  6Fh ; o
.data:00001C54                 db  77h ; w
.data:00001C55                 db  53h ; S
.data:00001C56                 db  79h ; y
.data:00001C57                 db  6Dh ; m
.data:00001C58                 db  62h ; b
.data:00001C59                 db  6Fh ; o
.data:00001C5A                 db  6Ch ; l
.data:00001C5B                 db    0
.data:00001C5C                 db    0
.data:00001C5D                 db    0
.data:00001C5E                 db    0
.data:00001C5F                 db    0
.data:00001C60                 db    0
.data:00001C61                 db    0
.data:00001C62                 db    0
.data:00001C63                 db    0
.data:00001C64                 db    0
.data:00001C65                 db    0
.data:00001C66                 db    0
.data:00001C67                 db    0
.data:00001C68                 db    0
.data:00001C69                 db    0
.data:00001C6A                 db    0
.data:00001C6B                 db    0
.data:00001C6C                 db    0
.data:00001C6D                 db    0
.data:00001C6E                 db    0
.data:00001C6F                 db    0
.data:00001C70                 db    0
.data:00001C71                 db    0
.data:00001C72                 db    0
.data:00001C73                 db    0
.data:00001C74                 db    0
.data:00001C75                 db    0
.data:00001C76                 db    0
.data:00001C77                 db    0
.data:00001C78                 db    0
.data:00001C79                 db    0
.data:00001C7A                 db    0
.data:00001C7B                 db    0
.data:00001C7C                 db    0
.data:00001C7D                 db    0
.data:00001C7E                 db    0
.data:00001C7F                 db    0
.data:00001C80                 db    0
.data:00001C81                 db    0
.data:00001C82                 db    0
.data:00001C83                 db    0
.data:00001C84                 db    0
.data:00001C85                 db    0
.data:00001C86                 db    0
.data:00001C87                 db    0
.data:00001C88                 db    0
.data:00001C89                 db    0
.data:00001C8A                 db    0
.data:00001C8B                 db    0
.data:00001C8C                 db    3
.data:00001C8D                 db    0
.data:00001C8E                 db    0
.data:00001C8F                 db    0
.data:00001C90                 db    5
.data:00001C91                 db    0
.data:00001C92                 db    0
.data:00001C93                 db    0
.data:00001C94                 db 0FFh
.data:00001C95                 db 0FFh
.data:00001C96                 db 0FFh
.data:00001C97                 db 0FFh
.data:00001C98                 db  76h ; v
.data:00001C99                 db  69h ; i
.data:00001C9A                 db  65h ; e
.data:00001C9B                 db  77h ; w
.data:00001C9C                 db  2Dh ; -
.data:00001C9D                 db  7Ah ; z
.data:00001C9E                 db  6Fh ; o
.data:00001C9F                 db  6Fh ; o
.data:00001CA0                 db  6Dh ; m
.data:00001CA1                 db    0
.data:00001CA2                 db    0
.data:00001CA3                 db    0
.data:00001CA4                 db    0
.data:00001CA5                 db    0
.data:00001CA6                 db    0
.data:00001CA7                 db    0
.data:00001CA8                 db    0
.data:00001CA9                 db    0
.data:00001CAA                 db    0
.data:00001CAB                 db    0
.data:00001CAC                 db    0
.data:00001CAD                 db    0
.data:00001CAE                 db    0
.data:00001CAF                 db    0
.data:00001CB0                 db    0
.data:00001CB1                 db    0
.data:00001CB2                 db    0
.data:00001CB3                 db    0
.data:00001CB4                 db    0
.data:00001CB5                 db    0
.data:00001CB6                 db    0
.data:00001CB7                 db    0
.data:00001CB8                 db    0
.data:00001CB9                 db    0
.data:00001CBA                 db    0
.data:00001CBB                 db    0
.data:00001CBC                 db    0
.data:00001CBD                 db    0
.data:00001CBE                 db    0
.data:00001CBF                 db    0
.data:00001CC0                 db    0
.data:00001CC1                 db    0
.data:00001CC2                 db    0
.data:00001CC3                 db    0
.data:00001CC4                 db    0
.data:00001CC5                 db    0
.data:00001CC6                 db    0
.data:00001CC7                 db    0
.data:00001CC8                 db    0
.data:00001CC9                 db    0
.data:00001CCA                 db    0
.data:00001CCB                 db    0
.data:00001CCC                 db    0
.data:00001CCD                 db    0
.data:00001CCE                 db    0
.data:00001CCF                 db    0
.data:00001CD0                 db    0
.data:00001CD1                 db    0
.data:00001CD2                 db    0
.data:00001CD3                 db    0
.data:00001CD4                 db    0
.data:00001CD5                 db    0
.data:00001CD6                 db    0
.data:00001CD7                 db    0
.data:00001CD8                 db    3
.data:00001CD9                 db    0
.data:00001CDA                 db    0
.data:00001CDB                 db    0
.data:00001CDC                 db    6
.data:00001CDD                 db    0
.data:00001CDE                 db    0
.data:00001CDF                 db    0
.data:00001CE0                 db 0FFh
.data:00001CE1                 db 0FFh
.data:00001CE2                 db 0FFh
.data:00001CE3                 db 0FFh
.data:00001CE4                 db  76h ; v
.data:00001CE5                 db  69h ; i
.data:00001CE6                 db  65h ; e
.data:00001CE7                 db  77h ; w
.data:00001CE8                 db  2Dh ; -
.data:00001CE9                 db  6Dh ; m
.data:00001CEA                 db  6Fh ; o
.data:00001CEB                 db  76h ; v
.data:00001CEC                 db  65h ; e
.data:00001CED                 db  43h ; C
.data:00001CEE                 db  6Ch ; l
.data:00001CEF                 db  6Fh ; o
.data:00001CF0                 db  6Eh ; n
.data:00001CF1                 db  65h ; e
.data:00001CF2                 db  44h ; D
.data:00001CF3                 db  6Fh ; o
.data:00001CF4                 db  63h ; c
.data:00001CF5                 db  75h ; u
.data:00001CF6                 db  6Dh ; m
.data:00001CF7                 db  65h ; e
.data:00001CF8                 db  6Eh ; n
.data:00001CF9                 db  74h ; t
.data:00001CFA                 db    0
.data:00001CFB                 db    0
.data:00001CFC                 db    0
.data:00001CFD                 db    0
.data:00001CFE                 db    0
.data:00001CFF                 db    0
.data:00001D00                 db    0
.data:00001D01                 db    0
.data:00001D02                 db    0
.data:00001D03                 db    0
.data:00001D04                 db    0
.data:00001D05                 db    0
.data:00001D06                 db    0
.data:00001D07                 db    0
.data:00001D08                 db    0
.data:00001D09                 db    0
.data:00001D0A                 db    0
.data:00001D0B                 db    0
.data:00001D0C                 db    0
.data:00001D0D                 db    0
.data:00001D0E                 db    0
.data:00001D0F                 db    0
.data:00001D10                 db    0
.data:00001D11                 db    0
.data:00001D12                 db    0
.data:00001D13                 db    0
.data:00001D14                 db    0
.data:00001D15                 db    0
.data:00001D16                 db    0
.data:00001D17                 db    0
.data:00001D18                 db    0
.data:00001D19                 db    0
.data:00001D1A                 db    0
.data:00001D1B                 db    0
.data:00001D1C                 db    0
.data:00001D1D                 db    0
.data:00001D1E                 db    0
.data:00001D1F                 db    0
.data:00001D20                 db    0
.data:00001D21                 db    0
.data:00001D22                 db    0
.data:00001D23                 db    0
.data:00001D24                 db    3
.data:00001D25                 db    0
.data:00001D26                 db    0
.data:00001D27                 db    0
.data:00001D28                 db    7
.data:00001D29                 db    0
.data:00001D2A                 db    0
.data:00001D2B                 db    0
.data:00001D2C                 db 0FFh
.data:00001D2D                 db 0FFh
.data:00001D2E                 db 0FFh
.data:00001D2F                 db 0FFh
.data:00001D30                 db  76h ; v
.data:00001D31                 db  69h ; i
.data:00001D32                 db  65h ; e
.data:00001D33                 db  77h ; w
.data:00001D34                 db  2Dh ; -
.data:00001D35                 db  74h ; t
.data:00001D36                 db  61h ; a
.data:00001D37                 db  62h ; b
.data:00001D38                 db    0
.data:00001D39                 db    0
.data:00001D3A                 db    0
.data:00001D3B                 db    0
.data:00001D3C                 db    0
.data:00001D3D                 db    0
.data:00001D3E                 db    0
.data:00001D3F                 db    0
.data:00001D40                 db    0
.data:00001D41                 db    0
.data:00001D42                 db    0
.data:00001D43                 db    0
.data:00001D44                 db    0
.data:00001D45                 db    0
.data:00001D46                 db    0
.data:00001D47                 db    0
.data:00001D48                 db    0
.data:00001D49                 db    0
.data:00001D4A                 db    0
.data:00001D4B                 db    0
.data:00001D4C                 db    0
.data:00001D4D                 db    0
.data:00001D4E                 db    0
.data:00001D4F                 db    0
.data:00001D50                 db    0
.data:00001D51                 db    0
.data:00001D52                 db    0
.data:00001D53                 db    0
.data:00001D54                 db    0
.data:00001D55                 db    0
.data:00001D56                 db    0
.data:00001D57                 db    0
.data:00001D58                 db    0
.data:00001D59                 db    0
.data:00001D5A                 db    0
.data:00001D5B                 db    0
.data:00001D5C                 db    0
.data:00001D5D                 db    0
.data:00001D5E                 db    0
.data:00001D5F                 db    0
.data:00001D60                 db    0
.data:00001D61                 db    0
.data:00001D62                 db    0
.data:00001D63                 db    0
.data:00001D64                 db    0
.data:00001D65                 db    0
.data:00001D66                 db    0
.data:00001D67                 db    0
.data:00001D68                 db    0
.data:00001D69                 db    0
.data:00001D6A                 db    0
.data:00001D6B                 db    0
.data:00001D6C                 db    0
.data:00001D6D                 db    0
.data:00001D6E                 db    0
.data:00001D6F                 db    0
.data:00001D70                 db    3
.data:00001D71                 db    0
.data:00001D72                 db    0
.data:00001D73                 db    0
.data:00001D74                 db  10h
.data:00001D75                 db    0
.data:00001D76                 db    0
.data:00001D77                 db    0
.data:00001D78                 db 0FFh
.data:00001D79                 db 0FFh
.data:00001D7A                 db 0FFh
.data:00001D7B                 db 0FFh
.data:00001D7C                 db  76h ; v
.data:00001D7D                 db  69h ; i
.data:00001D7E                 db  65h ; e
.data:00001D7F                 db  77h ; w
.data:00001D80                 db  2Dh ; -
.data:00001D81                 db  63h ; c
.data:00001D82                 db  6Fh ; o
.data:00001D83                 db  6Ch ; l
.data:00001D84                 db  6Ch ; l
.data:00001D85                 db  61h ; a
.data:00001D86                 db  70h ; p
.data:00001D87                 db  73h ; s
.data:00001D88                 db  65h ; e
.data:00001D89                 db  4Ch ; L
.data:00001D8A                 db  65h ; e
.data:00001D8B                 db  76h ; v
.data:00001D8C                 db  65h ; e
.data:00001D8D                 db  6Ch ; l
.data:00001D8E                 db    0
.data:00001D8F                 db    0
.data:00001D90                 db    0
.data:00001D91                 db    0
.data:00001D92                 db    0
.data:00001D93                 db    0
.data:00001D94                 db    0
.data:00001D95                 db    0
.data:00001D96                 db    0
.data:00001D97                 db    0
.data:00001D98                 db    0
.data:00001D99                 db    0
.data:00001D9A                 db    0
.data:00001D9B                 db    0
.data:00001D9C                 db    0
.data:00001D9D                 db    0
.data:00001D9E                 db    0
.data:00001D9F                 db    0
.data:00001DA0                 db    0
.data:00001DA1                 db    0
.data:00001DA2                 db    0
.data:00001DA3                 db    0
.data:00001DA4                 db    0
.data:00001DA5                 db    0
.data:00001DA6                 db    0
.data:00001DA7                 db    0
.data:00001DA8                 db    0
.data:00001DA9                 db    0
.data:00001DAA                 db    0
.data:00001DAB                 db    0
.data:00001DAC                 db    0
.data:00001DAD                 db    0
.data:00001DAE                 db    0
.data:00001DAF                 db    0
.data:00001DB0                 db    0
.data:00001DB1                 db    0
.data:00001DB2                 db    0
.data:00001DB3                 db    0
.data:00001DB4                 db    0
.data:00001DB5                 db    0
.data:00001DB6                 db    0
.data:00001DB7                 db    0
.data:00001DB8                 db    0
.data:00001DB9                 db    0
.data:00001DBA                 db    0
.data:00001DBB                 db    0
.data:00001DBC                 db    3
.data:00001DBD                 db    0
.data:00001DBE                 db    0
.data:00001DBF                 db    0
.data:00001DC0                 db  11h
.data:00001DC1                 db    0
.data:00001DC2                 db    0
.data:00001DC3                 db    0
.data:00001DC4                 db 0FFh
.data:00001DC5                 db 0FFh
.data:00001DC6                 db 0FFh
.data:00001DC7                 db 0FFh
.data:00001DC8                 db  76h ; v
.data:00001DC9                 db  69h ; i
.data:00001DCA                 db  65h ; e
.data:00001DCB                 db  77h ; w
.data:00001DCC                 db  2Dh ; -
.data:00001DCD                 db  75h ; u
.data:00001DCE                 db  6Eh ; n
.data:00001DCF                 db  63h ; c
.data:00001DD0                 db  6Fh ; o
.data:00001DD1                 db  6Ch ; l
.data:00001DD2                 db  6Ch ; l
.data:00001DD3                 db  61h ; a
.data:00001DD4                 db  70h ; p
.data:00001DD5                 db  73h ; s
.data:00001DD6                 db  65h ; e
.data:00001DD7                 db  4Ch ; L
.data:00001DD8                 db  65h ; e
.data:00001DD9                 db  76h ; v
.data:00001DDA                 db  65h ; e
.data:00001DDB                 db  6Ch ; l
.data:00001DDC                 db    0
.data:00001DDD                 db    0
.data:00001DDE                 db    0
.data:00001DDF                 db    0
.data:00001DE0                 db    0
.data:00001DE1                 db    0
.data:00001DE2                 db    0
.data:00001DE3                 db    0
.data:00001DE4                 db    0
.data:00001DE5                 db    0
.data:00001DE6                 db    0
.data:00001DE7                 db    0
.data:00001DE8                 db    0
.data:00001DE9                 db    0
.data:00001DEA                 db    0
.data:00001DEB                 db    0
.data:00001DEC                 db    0
.data:00001DED                 db    0
.data:00001DEE                 db    0
.data:00001DEF                 db    0
.data:00001DF0                 db    0
.data:00001DF1                 db    0
.data:00001DF2                 db    0
.data:00001DF3                 db    0
.data:00001DF4                 db    0
.data:00001DF5                 db    0
.data:00001DF6                 db    0
.data:00001DF7                 db    0
.data:00001DF8                 db    0
.data:00001DF9                 db    0
.data:00001DFA                 db    0
.data:00001DFB                 db    0
.data:00001DFC                 db    0
.data:00001DFD                 db    0
.data:00001DFE                 db    0
.data:00001DFF                 db    0
.data:00001E00                 db    0
.data:00001E01                 db    0
.data:00001E02                 db    0
.data:00001E03                 db    0
.data:00001E04                 db    0
.data:00001E05                 db    0
.data:00001E06                 db    0
.data:00001E07                 db    0
.data:00001E08                 db    3
.data:00001E09                 db    0
.data:00001E0A                 db    0
.data:00001E0B                 db    0
.data:00001E0C                 db  15h
.data:00001E0D                 db    0
.data:00001E0E                 db    0
.data:00001E0F                 db    0
.data:00001E10                 db 0FFh
.data:00001E11                 db 0FFh
.data:00001E12                 db 0FFh
.data:00001E13                 db 0FFh
.data:00001E14                 db  76h ; v
.data:00001E15                 db  69h ; i
.data:00001E16                 db  65h ; e
.data:00001E17                 db  77h ; w
.data:00001E18                 db  2Dh ; -
.data:00001E19                 db  70h ; p
.data:00001E1A                 db  72h ; r
.data:00001E1B                 db  6Fh ; o
.data:00001E1C                 db  6Ah ; j
.data:00001E1D                 db  65h ; e
.data:00001E1E                 db  63h ; c
.data:00001E1F                 db  74h ; t
.data:00001E20                 db    0
.data:00001E21                 db    0
.data:00001E22                 db    0
.data:00001E23                 db    0
.data:00001E24                 db    0
.data:00001E25                 db    0
.data:00001E26                 db    0
.data:00001E27                 db    0
.data:00001E28                 db    0
.data:00001E29                 db    0
.data:00001E2A                 db    0
.data:00001E2B                 db    0
.data:00001E2C                 db    0
.data:00001E2D                 db    0
.data:00001E2E                 db    0
.data:00001E2F                 db    0
.data:00001E30                 db    0
.data:00001E31                 db    0
.data:00001E32                 db    0
.data:00001E33                 db    0
.data:00001E34                 db    0
.data:00001E35                 db    0
.data:00001E36                 db    0
.data:00001E37                 db    0
.data:00001E38                 db    0
.data:00001E39                 db    0
.data:00001E3A                 db    0
.data:00001E3B                 db    0
.data:00001E3C                 db    0
.data:00001E3D                 db    0
.data:00001E3E                 db    0
.data:00001E3F                 db    0
.data:00001E40                 db    0
.data:00001E41                 db    0
.data:00001E42                 db    0
.data:00001E43                 db    0
.data:00001E44                 db    0
.data:00001E45                 db    0
.data:00001E46                 db    0
.data:00001E47                 db    0
.data:00001E48                 db    0
.data:00001E49                 db    0
.data:00001E4A                 db    0
.data:00001E4B                 db    0
.data:00001E4C                 db    0
.data:00001E4D                 db    0
.data:00001E4E                 db    0
.data:00001E4F                 db    0
.data:00001E50                 db    0
.data:00001E51                 db    0
.data:00001E52                 db    0
.data:00001E53                 db    0
.data:00001E54                 db    4
.data:00001E55                 db    0
.data:00001E56                 db    0
.data:00001E57                 db    0
.data:00001E58                 db    5
.data:00001E59                 db    0
.data:00001E5A                 db    0
.data:00001E5B                 db    0
.data:00001E5C                 db 0FFh
.data:00001E5D                 db 0FFh
.data:00001E5E                 db 0FFh
.data:00001E5F                 db 0FFh
.data:00001E60                 db  65h ; e
.data:00001E61                 db  6Eh ; n
.data:00001E62                 db  63h ; c
.data:00001E63                 db  6Fh ; o
.data:00001E64                 db  64h ; d
.data:00001E65                 db  69h ; i
.data:00001E66                 db  6Eh ; n
.data:00001E67                 db  67h ; g
.data:00001E68                 db  2Dh ; -
.data:00001E69                 db  63h ; c
.data:00001E6A                 db  68h ; h
.data:00001E6B                 db  61h ; a
.data:00001E6C                 db  72h ; r
.data:00001E6D                 db  61h ; a
.data:00001E6E                 db  63h ; c
.data:00001E6F                 db  74h ; t
.data:00001E70                 db  65h ; e
.data:00001E71                 db  72h ; r
.data:00001E72                 db  53h ; S
.data:00001E73                 db  65h ; e
.data:00001E74                 db  74h ; t
.data:00001E75                 db  73h ; s
.data:00001E76                 db    0
.data:00001E77                 db    0
.data:00001E78                 db    0
.data:00001E79                 db    0
.data:00001E7A                 db    0
.data:00001E7B                 db    0
.data:00001E7C                 db    0
.data:00001E7D                 db    0
.data:00001E7E                 db    0
.data:00001E7F                 db    0
.data:00001E80                 db    0
.data:00001E81                 db    0
.data:00001E82                 db    0
.data:00001E83                 db    0
.data:00001E84                 db    0
.data:00001E85                 db    0
.data:00001E86                 db    0
.data:00001E87                 db    0
.data:00001E88                 db    0
.data:00001E89                 db    0
.data:00001E8A                 db    0
.data:00001E8B                 db    0
.data:00001E8C                 db    0
.data:00001E8D                 db    0
.data:00001E8E                 db    0
.data:00001E8F                 db    0
.data:00001E90                 db    0
.data:00001E91                 db    0
.data:00001E92                 db    0
.data:00001E93                 db    0
.data:00001E94                 db    0
.data:00001E95                 db    0
.data:00001E96                 db    0
.data:00001E97                 db    0
.data:00001E98                 db    0
.data:00001E99                 db    0
.data:00001E9A                 db    0
.data:00001E9B                 db    0
.data:00001E9C                 db    0
.data:00001E9D                 db    0
.data:00001E9E                 db    0
.data:00001E9F                 db    0
.data:00001EA0                 db    4
.data:00001EA1                 db    0
.data:00001EA2                 db    0
.data:00001EA3                 db    0
.data:00001EA4                 db    5
.data:00001EA5                 db    0
.data:00001EA6                 db    0
.data:00001EA7                 db    0
.data:00001EA8                 db    0
.data:00001EA9                 db    0
.data:00001EAA                 db    0
.data:00001EAB                 db    0
.data:00001EAC                 db  65h ; e
.data:00001EAD                 db  6Eh ; n
.data:00001EAE                 db  63h ; c
.data:00001EAF                 db  6Fh ; o
.data:00001EB0                 db  64h ; d
.data:00001EB1                 db  69h ; i
.data:00001EB2                 db  6Eh ; n
.data:00001EB3                 db  67h ; g
.data:00001EB4                 db  2Dh ; -
.data:00001EB5                 db  61h ; a
.data:00001EB6                 db  72h ; r
.data:00001EB7                 db  61h ; a
.data:00001EB8                 db  62h ; b
.data:00001EB9                 db  69h ; i
.data:00001EBA                 db  63h ; c
.data:00001EBB                 db    0
.data:00001EBC                 db    0
.data:00001EBD                 db    0
.data:00001EBE                 db    0
.data:00001EBF                 db    0
.data:00001EC0                 db    0
.data:00001EC1                 db    0
.data:00001EC2                 db    0
.data:00001EC3                 db    0
.data:00001EC4                 db    0
.data:00001EC5                 db    0
.data:00001EC6                 db    0
.data:00001EC7                 db    0
.data:00001EC8                 db    0
.data:00001EC9                 db    0
.data:00001ECA                 db    0
.data:00001ECB                 db    0
.data:00001ECC                 db    0
.data:00001ECD                 db    0
.data:00001ECE                 db    0
.data:00001ECF                 db    0
.data:00001ED0                 db    0
.data:00001ED1                 db    0
.data:00001ED2                 db    0
.data:00001ED3                 db    0
.data:00001ED4                 db    0
.data:00001ED5                 db    0
.data:00001ED6                 db    0
.data:00001ED7                 db    0
.data:00001ED8                 db    0
.data:00001ED9                 db    0
.data:00001EDA                 db    0
.data:00001EDB                 db    0
.data:00001EDC                 db    0
.data:00001EDD                 db    0
.data:00001EDE                 db    0
.data:00001EDF                 db    0
.data:00001EE0                 db    0
.data:00001EE1                 db    0
.data:00001EE2                 db    0
.data:00001EE3                 db    0
.data:00001EE4                 db    0
.data:00001EE5                 db    0
.data:00001EE6                 db    0
.data:00001EE7                 db    0
.data:00001EE8                 db    0
.data:00001EE9                 db    0
.data:00001EEA                 db    0
.data:00001EEB                 db    0
.data:00001EEC                 db    4
.data:00001EED                 db    0
.data:00001EEE                 db    0
.data:00001EEF                 db    0
.data:00001EF0                 db    5
.data:00001EF1                 db    0
.data:00001EF2                 db    0
.data:00001EF3                 db    0
.data:00001EF4                 db    1
.data:00001EF5                 db    0
.data:00001EF6                 db    0
.data:00001EF7                 db    0
.data:00001EF8                 db  65h ; e
.data:00001EF9                 db  6Eh ; n
.data:00001EFA                 db  63h ; c
.data:00001EFB                 db  6Fh ; o
.data:00001EFC                 db  64h ; d
.data:00001EFD                 db  69h ; i
.data:00001EFE                 db  6Eh ; n
.data:00001EFF                 db  67h ; g
.data:00001F00                 db  2Dh ; -
.data:00001F01                 db  62h ; b
.data:00001F02                 db  61h ; a
.data:00001F03                 db  6Ch ; l
.data:00001F04                 db  74h ; t
.data:00001F05                 db  69h ; i
.data:00001F06                 db  63h ; c
.data:00001F07                 db    0
.data:00001F08                 db    0
.data:00001F09                 db    0
.data:00001F0A                 db    0
.data:00001F0B                 db    0
.data:00001F0C                 db    0
.data:00001F0D                 db    0
.data:00001F0E                 db    0
.data:00001F0F                 db    0
.data:00001F10                 db    0
.data:00001F11                 db    0
.data:00001F12                 db    0
.data:00001F13                 db    0
.data:00001F14                 db    0
.data:00001F15                 db    0
.data:00001F16                 db    0
.data:00001F17                 db    0
.data:00001F18                 db    0
.data:00001F19                 db    0
.data:00001F1A                 db    0
.data:00001F1B                 db    0
.data:00001F1C                 db    0
.data:00001F1D                 db    0
.data:00001F1E                 db    0
.data:00001F1F                 db    0
.data:00001F20                 db    0
.data:00001F21                 db    0
.data:00001F22                 db    0
.data:00001F23                 db    0
.data:00001F24                 db    0
.data:00001F25                 db    0
.data:00001F26                 db    0
.data:00001F27                 db    0
.data:00001F28                 db    0
.data:00001F29                 db    0
.data:00001F2A                 db    0
.data:00001F2B                 db    0
.data:00001F2C                 db    0
.data:00001F2D                 db    0
.data:00001F2E                 db    0
.data:00001F2F                 db    0
.data:00001F30                 db    0
.data:00001F31                 db    0
.data:00001F32                 db    0
.data:00001F33                 db    0
.data:00001F34                 db    0
.data:00001F35                 db    0
.data:00001F36                 db    0
.data:00001F37                 db    0
.data:00001F38                 db    4
.data:00001F39                 db    0
.data:00001F3A                 db    0
.data:00001F3B                 db    0
.data:00001F3C                 db    5
.data:00001F3D                 db    0
.data:00001F3E                 db    0
.data:00001F3F                 db    0
.data:00001F40                 db    2
.data:00001F41                 db    0
.data:00001F42                 db    0
.data:00001F43                 db    0
.data:00001F44                 db  65h ; e
.data:00001F45                 db  6Eh ; n
.data:00001F46                 db  63h ; c
.data:00001F47                 db  6Fh ; o
.data:00001F48                 db  64h ; d
.data:00001F49                 db  69h ; i
.data:00001F4A                 db  6Eh ; n
.data:00001F4B                 db  67h ; g
.data:00001F4C                 db  2Dh ; -
.data:00001F4D                 db  63h ; c
.data:00001F4E                 db  65h ; e
.data:00001F4F                 db  6Ch ; l
.data:00001F50                 db  74h ; t
.data:00001F51                 db  69h ; i
.data:00001F52                 db  63h ; c
.data:00001F53                 db    0
.data:00001F54                 db    0
.data:00001F55                 db    0
.data:00001F56                 db    0
.data:00001F57                 db    0
.data:00001F58                 db    0
.data:00001F59                 db    0
.data:00001F5A                 db    0
.data:00001F5B                 db    0
.data:00001F5C                 db    0
.data:00001F5D                 db    0
.data:00001F5E                 db    0
.data:00001F5F                 db    0
.data:00001F60                 db    0
.data:00001F61                 db    0
.data:00001F62                 db    0
.data:00001F63                 db    0
.data:00001F64                 db    0
.data:00001F65                 db    0
.data:00001F66                 db    0
.data:00001F67                 db    0
.data:00001F68                 db    0
.data:00001F69                 db    0
.data:00001F6A                 db    0
.data:00001F6B                 db    0
.data:00001F6C                 db    0
.data:00001F6D                 db    0
.data:00001F6E                 db    0
.data:00001F6F                 db    0
.data:00001F70                 db    0
.data:00001F71                 db    0
.data:00001F72                 db    0
.data:00001F73                 db    0
.data:00001F74                 db    0
.data:00001F75                 db    0
.data:00001F76                 db    0
.data:00001F77                 db    0
.data:00001F78                 db    0
.data:00001F79                 db    0
.data:00001F7A                 db    0
.data:00001F7B                 db    0
.data:00001F7C                 db    0
.data:00001F7D                 db    0
.data:00001F7E                 db    0
.data:00001F7F                 db    0
.data:00001F80                 db    0
.data:00001F81                 db    0
.data:00001F82                 db    0
.data:00001F83                 db    0
.data:00001F84                 db    4
.data:00001F85                 db    0
.data:00001F86                 db    0
.data:00001F87                 db    0
.data:00001F88                 db    5
.data:00001F89                 db    0
.data:00001F8A                 db    0
.data:00001F8B                 db    0
.data:00001F8C                 db    3
.data:00001F8D                 db    0
.data:00001F8E                 db    0
.data:00001F8F                 db    0
.data:00001F90                 db  65h ; e
.data:00001F91                 db  6Eh ; n
.data:00001F92                 db  63h ; c
.data:00001F93                 db  6Fh ; o
.data:00001F94                 db  64h ; d
.data:00001F95                 db  69h ; i
.data:00001F96                 db  6Eh ; n
.data:00001F97                 db  67h ; g
.data:00001F98                 db  2Dh ; -
.data:00001F99                 db  63h ; c
.data:00001F9A                 db  79h ; y
.data:00001F9B                 db  72h ; r
.data:00001F9C                 db  69h ; i
.data:00001F9D                 db  6Ch ; l
.data:00001F9E                 db  6Ch ; l
.data:00001F9F                 db  69h ; i
.data:00001FA0                 db  63h ; c
.data:00001FA1                 db    0
.data:00001FA2                 db    0
.data:00001FA3                 db    0
.data:00001FA4                 db    0
.data:00001FA5                 db    0
.data:00001FA6                 db    0
.data:00001FA7                 db    0
.data:00001FA8                 db    0
.data:00001FA9                 db    0
.data:00001FAA                 db    0
.data:00001FAB                 db    0
.data:00001FAC                 db    0
.data:00001FAD                 db    0
.data:00001FAE                 db    0
.data:00001FAF                 db    0
.data:00001FB0                 db    0
.data:00001FB1                 db    0
.data:00001FB2                 db    0
.data:00001FB3                 db    0
.data:00001FB4                 db    0
.data:00001FB5                 db    0
.data:00001FB6                 db    0
.data:00001FB7                 db    0
.data:00001FB8                 db    0
.data:00001FB9                 db    0
.data:00001FBA                 db    0
.data:00001FBB                 db    0
.data:00001FBC                 db    0
.data:00001FBD                 db    0
.data:00001FBE                 db    0
.data:00001FBF                 db    0
.data:00001FC0                 db    0
.data:00001FC1                 db    0
.data:00001FC2                 db    0
.data:00001FC3                 db    0
.data:00001FC4                 db    0
.data:00001FC5                 db    0
.data:00001FC6                 db    0
.data:00001FC7                 db    0
.data:00001FC8                 db    0
.data:00001FC9                 db    0
.data:00001FCA                 db    0
.data:00001FCB                 db    0
.data:00001FCC                 db    0
.data:00001FCD                 db    0
.data:00001FCE                 db    0
.data:00001FCF                 db    0
.data:00001FD0                 db    4
.data:00001FD1                 db    0
.data:00001FD2                 db    0
.data:00001FD3                 db    0
.data:00001FD4                 db    5
.data:00001FD5                 db    0
.data:00001FD6                 db    0
.data:00001FD7                 db    0
.data:00001FD8                 db    4
.data:00001FD9                 db    0
.data:00001FDA                 db    0
.data:00001FDB                 db    0
.data:00001FDC                 db  65h ; e
.data:00001FDD                 db  6Eh ; n
.data:00001FDE                 db  63h ; c
.data:00001FDF                 db  6Fh ; o
.data:00001FE0                 db  64h ; d
.data:00001FE1                 db  69h ; i
.data:00001FE2                 db  6Eh ; n
.data:00001FE3                 db  67h ; g
.data:00001FE4                 db  2Dh ; -
.data:00001FE5                 db  63h ; c
.data:00001FE6                 db  65h ; e
.data:00001FE7                 db  6Eh ; n
.data:00001FE8                 db  74h ; t
.data:00001FE9                 db  72h ; r
.data:00001FEA                 db  61h ; a
.data:00001FEB                 db  6Ch ; l
.data:00001FEC                 db  45h ; E
.data:00001FED                 db  75h ; u
.data:00001FEE                 db  72h ; r
.data:00001FEF                 db  6Fh ; o
.data:00001FF0                 db  70h ; p
.data:00001FF1                 db  65h ; e
.data:00001FF2                 db  61h ; a
.data:00001FF3                 db  6Eh ; n
.data:00001FF4                 db    0
.data:00001FF5                 db    0
.data:00001FF6                 db    0
.data:00001FF7                 db    0
.data:00001FF8                 db    0
.data:00001FF9                 db    0
.data:00001FFA                 db    0
.data:00001FFB                 db    0
.data:00001FFC                 db    0
.data:00001FFD                 db    0
.data:00001FFE                 db    0
.data:00001FFF                 db    0
.data:00002000                 db    0
.data:00002001                 db    0
.data:00002002                 db    0
.data:00002003                 db    0
.data:00002004                 db    0
.data:00002005                 db    0
.data:00002006                 db    0
.data:00002007                 db    0
.data:00002008                 db    0
.data:00002009                 db    0
.data:0000200A                 db    0
.data:0000200B                 db    0
.data:0000200C                 db    0
.data:0000200D                 db    0
.data:0000200E                 db    0
.data:0000200F                 db    0
.data:00002010                 db    0
.data:00002011                 db    0
.data:00002012                 db    0
.data:00002013                 db    0
.data:00002014                 db    0
.data:00002015                 db    0
.data:00002016                 db    0
.data:00002017                 db    0
.data:00002018                 db    0
.data:00002019                 db    0
.data:0000201A                 db    0
.data:0000201B                 db    0
.data:0000201C                 db    4
.data:0000201D                 db    0
.data:0000201E                 db    0
.data:0000201F                 db    0
.data:00002020                 db    5
.data:00002021                 db    0
.data:00002022                 db    0
.data:00002023                 db    0
.data:00002024                 db    5
.data:00002025                 db    0
.data:00002026                 db    0
.data:00002027                 db    0
.data:00002028                 db  65h ; e
.data:00002029                 db  6Eh ; n
.data:0000202A                 db  63h ; c
.data:0000202B                 db  6Fh ; o
.data:0000202C                 db  64h ; d
.data:0000202D                 db  69h ; i
.data:0000202E                 db  6Eh ; n
.data:0000202F                 db  67h ; g
.data:00002030                 db  2Dh ; -
.data:00002031                 db  63h ; c
.data:00002032                 db  68h ; h
.data:00002033                 db  69h ; i
.data:00002034                 db  6Eh ; n
.data:00002035                 db  65h ; e
.data:00002036                 db  73h ; s
.data:00002037                 db  65h ; e
.data:00002038                 db    0
.data:00002039                 db    0
.data:0000203A                 db    0
.data:0000203B                 db    0
.data:0000203C                 db    0
.data:0000203D                 db    0
.data:0000203E                 db    0
.data:0000203F                 db    0
.data:00002040                 db    0
.data:00002041                 db    0
.data:00002042                 db    0
.data:00002043                 db    0
.data:00002044                 db    0
.data:00002045                 db    0
.data:00002046                 db    0
.data:00002047                 db    0
.data:00002048                 db    0
.data:00002049                 db    0
.data:0000204A                 db    0
.data:0000204B                 db    0
.data:0000204C                 db    0
.data:0000204D                 db    0
.data:0000204E                 db    0
.data:0000204F                 db    0
.data:00002050                 db    0
.data:00002051                 db    0
.data:00002052                 db    0
.data:00002053                 db    0
.data:00002054                 db    0
.data:00002055                 db    0
.data:00002056                 db    0
.data:00002057                 db    0
.data:00002058                 db    0
.data:00002059                 db    0
.data:0000205A                 db    0
.data:0000205B                 db    0
.data:0000205C                 db    0
.data:0000205D                 db    0
.data:0000205E                 db    0
.data:0000205F                 db    0
.data:00002060                 db    0
.data:00002061                 db    0
.data:00002062                 db    0
.data:00002063                 db    0
.data:00002064                 db    0
.data:00002065                 db    0
.data:00002066                 db    0
.data:00002067                 db    0
.data:00002068                 db    4
.data:00002069                 db    0
.data:0000206A                 db    0
.data:0000206B                 db    0
.data:0000206C                 db    5
.data:0000206D                 db    0
.data:0000206E                 db    0
.data:0000206F                 db    0
.data:00002070                 db    6
.data:00002071                 db    0
.data:00002072                 db    0
.data:00002073                 db    0
.data:00002074                 db  65h ; e
.data:00002075                 db  6Eh ; n
.data:00002076                 db  63h ; c
.data:00002077                 db  6Fh ; o
.data:00002078                 db  64h ; d
.data:00002079                 db  69h ; i
.data:0000207A                 db  6Eh ; n
.data:0000207B                 db  67h ; g
.data:0000207C                 db  2Dh ; -
.data:0000207D                 db  65h ; e
.data:0000207E                 db  61h ; a
.data:0000207F                 db  73h ; s
.data:00002080                 db  74h ; t
.data:00002081                 db  65h ; e
.data:00002082                 db  72h ; r
.data:00002083                 db  6Eh ; n
.data:00002084                 db  45h ; E
.data:00002085                 db  75h ; u
.data:00002086                 db  72h ; r
.data:00002087                 db  6Fh ; o
.data:00002088                 db  70h ; p
.data:00002089                 db  65h ; e
.data:0000208A                 db  61h ; a
.data:0000208B                 db  6Eh ; n
.data:0000208C                 db    0
.data:0000208D                 db    0
.data:0000208E                 db    0
.data:0000208F                 db    0
.data:00002090                 db    0
.data:00002091                 db    0
.data:00002092                 db    0
.data:00002093                 db    0
.data:00002094                 db    0
.data:00002095                 db    0
.data:00002096                 db    0
.data:00002097                 db    0
.data:00002098                 db    0
.data:00002099                 db    0
.data:0000209A                 db    0
.data:0000209B                 db    0
.data:0000209C                 db    0
.data:0000209D                 db    0
.data:0000209E                 db    0
.data:0000209F                 db    0
.data:000020A0                 db    0
.data:000020A1                 db    0
.data:000020A2                 db    0
.data:000020A3                 db    0
.data:000020A4                 db    0
.data:000020A5                 db    0
.data:000020A6                 db    0
.data:000020A7                 db    0
.data:000020A8                 db    0
.data:000020A9                 db    0
.data:000020AA                 db    0
.data:000020AB                 db    0
.data:000020AC                 db    0
.data:000020AD                 db    0
.data:000020AE                 db    0
.data:000020AF                 db    0
.data:000020B0                 db    0
.data:000020B1                 db    0
.data:000020B2                 db    0
.data:000020B3                 db    0
.data:000020B4                 db    4
.data:000020B5                 db    0
.data:000020B6                 db    0
.data:000020B7                 db    0
.data:000020B8                 db    5
.data:000020B9                 db    0
.data:000020BA                 db    0
.data:000020BB                 db    0
.data:000020BC                 db    7
.data:000020BD                 db    0
.data:000020BE                 db    0
.data:000020BF                 db    0
.data:000020C0                 db  65h ; e
.data:000020C1                 db  6Eh ; n
.data:000020C2                 db  63h ; c
.data:000020C3                 db  6Fh ; o
.data:000020C4                 db  64h ; d
.data:000020C5                 db  69h ; i
.data:000020C6                 db  6Eh ; n
.data:000020C7                 db  67h ; g
.data:000020C8                 db  2Dh ; -
.data:000020C9                 db  67h ; g
.data:000020CA                 db  72h ; r
.data:000020CB                 db  65h ; e
.data:000020CC                 db  65h ; e
.data:000020CD                 db  6Bh ; k
.data:000020CE                 db    0
.data:000020CF                 db    0
.data:000020D0                 db    0
.data:000020D1                 db    0
.data:000020D2                 db    0
.data:000020D3                 db    0
.data:000020D4                 db    0
.data:000020D5                 db    0
.data:000020D6                 db    0
.data:000020D7                 db    0
.data:000020D8                 db    0
.data:000020D9                 db    0
.data:000020DA                 db    0
.data:000020DB                 db    0
.data:000020DC                 db    0
.data:000020DD                 db    0
.data:000020DE                 db    0
.data:000020DF                 db    0
.data:000020E0                 db    0
.data:000020E1                 db    0
.data:000020E2                 db    0
.data:000020E3                 db    0
.data:000020E4                 db    0
.data:000020E5                 db    0
.data:000020E6                 db    0
.data:000020E7                 db    0
.data:000020E8                 db    0
.data:000020E9                 db    0
.data:000020EA                 db    0
.data:000020EB                 db    0
.data:000020EC                 db    0
.data:000020ED                 db    0
.data:000020EE                 db    0
.data:000020EF                 db    0
.data:000020F0                 db    0
.data:000020F1                 db    0
.data:000020F2                 db    0
.data:000020F3                 db    0
.data:000020F4                 db    0
.data:000020F5                 db    0
.data:000020F6                 db    0
.data:000020F7                 db    0
.data:000020F8                 db    0
.data:000020F9                 db    0
.data:000020FA                 db    0
.data:000020FB                 db    0
.data:000020FC                 db    0
.data:000020FD                 db    0
.data:000020FE                 db    0
.data:000020FF                 db    0
.data:00002100                 db    4
.data:00002101                 db    0
.data:00002102                 db    0
.data:00002103                 db    0
.data:00002104                 db    5
.data:00002105                 db    0
.data:00002106                 db    0
.data:00002107                 db    0
.data:00002108                 db    8
.data:00002109                 db    0
.data:0000210A                 db    0
.data:0000210B                 db    0
.data:0000210C                 db  65h ; e
.data:0000210D                 db  6Eh ; n
.data:0000210E                 db  63h ; c
.data:0000210F                 db  6Fh ; o
.data:00002110                 db  64h ; d
.data:00002111                 db  69h ; i
.data:00002112                 db  6Eh ; n
.data:00002113                 db  67h ; g
.data:00002114                 db  2Dh ; -
.data:00002115                 db  68h ; h
.data:00002116                 db  65h ; e
.data:00002117                 db  62h ; b
.data:00002118                 db  72h ; r
.data:00002119                 db  65h ; e
.data:0000211A                 db  77h ; w
.data:0000211B                 db    0
.data:0000211C                 db    0
.data:0000211D                 db    0
.data:0000211E                 db    0
.data:0000211F                 db    0
.data:00002120                 db    0
.data:00002121                 db    0
.data:00002122                 db    0
.data:00002123                 db    0
.data:00002124                 db    0
.data:00002125                 db    0
.data:00002126                 db    0
.data:00002127                 db    0
.data:00002128                 db    0
.data:00002129                 db    0
.data:0000212A                 db    0
.data:0000212B                 db    0
.data:0000212C                 db    0
.data:0000212D                 db    0
.data:0000212E                 db    0
.data:0000212F                 db    0
.data:00002130                 db    0
.data:00002131                 db    0
.data:00002132                 db    0
.data:00002133                 db    0
.data:00002134                 db    0
.data:00002135                 db    0
.data:00002136                 db    0
.data:00002137                 db    0
.data:00002138                 db    0
.data:00002139                 db    0
.data:0000213A                 db    0
.data:0000213B                 db    0
.data:0000213C                 db    0
.data:0000213D                 db    0
.data:0000213E                 db    0
.data:0000213F                 db    0
.data:00002140                 db    0
.data:00002141                 db    0
.data:00002142                 db    0
.data:00002143                 db    0
.data:00002144                 db    0
.data:00002145                 db    0
.data:00002146                 db    0
.data:00002147                 db    0
.data:00002148                 db    0
.data:00002149                 db    0
.data:0000214A                 db    0
.data:0000214B                 db    0
.data:0000214C                 db    4
.data:0000214D                 db    0
.data:0000214E                 db    0
.data:0000214F                 db    0
.data:00002150                 db    5
.data:00002151                 db    0
.data:00002152                 db    0
.data:00002153                 db    0
.data:00002154                 db    9
.data:00002155                 db    0
.data:00002156                 db    0
.data:00002157                 db    0
.data:00002158                 db  65h ; e
.data:00002159                 db  6Eh ; n
.data:0000215A                 db  63h ; c
.data:0000215B                 db  6Fh ; o
.data:0000215C                 db  64h ; d
.data:0000215D                 db  69h ; i
.data:0000215E                 db  6Eh ; n
.data:0000215F                 db  67h ; g
.data:00002160                 db  2Dh ; -
.data:00002161                 db  6Ah ; j
.data:00002162                 db  61h ; a
.data:00002163                 db  70h ; p
.data:00002164                 db  61h ; a
.data:00002165                 db  6Eh ; n
.data:00002166                 db  65h ; e
.data:00002167                 db  73h ; s
.data:00002168                 db  65h ; e
.data:00002169                 db    0
.data:0000216A                 db    0
.data:0000216B                 db    0
.data:0000216C                 db    0
.data:0000216D                 db    0
.data:0000216E                 db    0
.data:0000216F                 db    0
.data:00002170                 db    0
.data:00002171                 db    0
.data:00002172                 db    0
.data:00002173                 db    0
.data:00002174                 db    0
.data:00002175                 db    0
.data:00002176                 db    0
.data:00002177                 db    0
.data:00002178                 db    0
.data:00002179                 db    0
.data:0000217A                 db    0
.data:0000217B                 db    0
.data:0000217C                 db    0
.data:0000217D                 db    0
.data:0000217E                 db    0
.data:0000217F                 db    0
.data:00002180                 db    0
.data:00002181                 db    0
.data:00002182                 db    0
.data:00002183                 db    0
.data:00002184                 db    0
.data:00002185                 db    0
.data:00002186                 db    0
.data:00002187                 db    0
.data:00002188                 db    0
.data:00002189                 db    0
.data:0000218A                 db    0
.data:0000218B                 db    0
.data:0000218C                 db    0
.data:0000218D                 db    0
.data:0000218E                 db    0
.data:0000218F                 db    0
.data:00002190                 db    0
.data:00002191                 db    0
.data:00002192                 db    0
.data:00002193                 db    0
.data:00002194                 db    0
.data:00002195                 db    0
.data:00002196                 db    0
.data:00002197                 db    0
.data:00002198                 db    4
.data:00002199                 db    0
.data:0000219A                 db    0
.data:0000219B                 db    0
.data:0000219C                 db    5
.data:0000219D                 db    0
.data:0000219E                 db    0
.data:0000219F                 db    0
.data:000021A0                 db  0Ah
.data:000021A1                 db    0
.data:000021A2                 db    0
.data:000021A3                 db    0
.data:000021A4                 db  65h ; e
.data:000021A5                 db  6Eh ; n
.data:000021A6                 db  63h ; c
.data:000021A7                 db  6Fh ; o
.data:000021A8                 db  64h ; d
.data:000021A9                 db  69h ; i
.data:000021AA                 db  6Eh ; n
.data:000021AB                 db  67h ; g
.data:000021AC                 db  2Dh ; -
.data:000021AD                 db  6Bh ; k
.data:000021AE                 db  6Fh ; o
.data:000021AF                 db  72h ; r
.data:000021B0                 db  65h ; e
.data:000021B1                 db  61h ; a
.data:000021B2                 db  6Eh ; n
.data:000021B3                 db    0
.data:000021B4                 db    0
.data:000021B5                 db    0
.data:000021B6                 db    0
.data:000021B7                 db    0
.data:000021B8                 db    0
.data:000021B9                 db    0
.data:000021BA                 db    0
.data:000021BB                 db    0
.data:000021BC                 db    0
.data:000021BD                 db    0
.data:000021BE                 db    0
.data:000021BF                 db    0
.data:000021C0                 db    0
.data:000021C1                 db    0
.data:000021C2                 db    0
.data:000021C3                 db    0
.data:000021C4                 db    0
.data:000021C5                 db    0
.data:000021C6                 db    0
.data:000021C7                 db    0
.data:000021C8                 db    0
.data:000021C9                 db    0
.data:000021CA                 db    0
.data:000021CB                 db    0
.data:000021CC                 db    0
.data:000021CD                 db    0
.data:000021CE                 db    0
.data:000021CF                 db    0
.data:000021D0                 db    0
.data:000021D1                 db    0
.data:000021D2                 db    0
.data:000021D3                 db    0
.data:000021D4                 db    0
.data:000021D5                 db    0
.data:000021D6                 db    0
.data:000021D7                 db    0
.data:000021D8                 db    0
.data:000021D9                 db    0
.data:000021DA                 db    0
.data:000021DB                 db    0
.data:000021DC                 db    0
.data:000021DD                 db    0
.data:000021DE                 db    0
.data:000021DF                 db    0
.data:000021E0                 db    0
.data:000021E1                 db    0
.data:000021E2                 db    0
.data:000021E3                 db    0
.data:000021E4                 db    4
.data:000021E5                 db    0
.data:000021E6                 db    0
.data:000021E7                 db    0
.data:000021E8                 db    5
.data:000021E9                 db    0
.data:000021EA                 db    0
.data:000021EB                 db    0
.data:000021EC                 db  0Bh
.data:000021ED                 db    0
.data:000021EE                 db    0
.data:000021EF                 db    0
.data:000021F0                 db  65h ; e
.data:000021F1                 db  6Eh ; n
.data:000021F2                 db  63h ; c
.data:000021F3                 db  6Fh ; o
.data:000021F4                 db  64h ; d
.data:000021F5                 db  69h ; i
.data:000021F6                 db  6Eh ; n
.data:000021F7                 db  67h ; g
.data:000021F8                 db  2Dh ; -
.data:000021F9                 db  6Eh ; n
.data:000021FA                 db  6Fh ; o
.data:000021FB                 db  72h ; r
.data:000021FC                 db  74h ; t
.data:000021FD                 db  68h ; h
.data:000021FE                 db  45h ; E
.data:000021FF                 db  75h ; u
.data:00002200                 db  72h ; r
.data:00002201                 db  6Fh ; o
.data:00002202                 db  70h ; p
.data:00002203                 db  65h ; e
.data:00002204                 db  61h ; a
.data:00002205                 db  6Eh ; n
.data:00002206                 db    0
.data:00002207                 db    0
.data:00002208                 db    0
.data:00002209                 db    0
.data:0000220A                 db    0
.data:0000220B                 db    0
.data:0000220C                 db    0
.data:0000220D                 db    0
.data:0000220E                 db    0
.data:0000220F                 db    0
.data:00002210                 db    0
.data:00002211                 db    0
.data:00002212                 db    0
.data:00002213                 db    0
.data:00002214                 db    0
.data:00002215                 db    0
.data:00002216                 db    0
.data:00002217                 db    0
.data:00002218                 db    0
.data:00002219                 db    0
.data:0000221A                 db    0
.data:0000221B                 db    0
.data:0000221C                 db    0
.data:0000221D                 db    0
.data:0000221E                 db    0
.data:0000221F                 db    0
.data:00002220                 db    0
.data:00002221                 db    0
.data:00002222                 db    0
.data:00002223                 db    0
.data:00002224                 db    0
.data:00002225                 db    0
.data:00002226                 db    0
.data:00002227                 db    0
.data:00002228                 db    0
.data:00002229                 db    0
.data:0000222A                 db    0
.data:0000222B                 db    0
.data:0000222C                 db    0
.data:0000222D                 db    0
.data:0000222E                 db    0
.data:0000222F                 db    0
.data:00002230                 db    4
.data:00002231                 db    0
.data:00002232                 db    0
.data:00002233                 db    0
.data:00002234                 db    5
.data:00002235                 db    0
.data:00002236                 db    0
.data:00002237                 db    0
.data:00002238                 db  0Ch
.data:00002239                 db    0
.data:0000223A                 db    0
.data:0000223B                 db    0
.data:0000223C                 db  65h ; e
.data:0000223D                 db  6Eh ; n
.data:0000223E                 db  63h ; c
.data:0000223F                 db  6Fh ; o
.data:00002240                 db  64h ; d
.data:00002241                 db  69h ; i
.data:00002242                 db  6Eh ; n
.data:00002243                 db  67h ; g
.data:00002244                 db  2Dh ; -
.data:00002245                 db  74h ; t
.data:00002246                 db  68h ; h
.data:00002247                 db  61h ; a
.data:00002248                 db  69h ; i
.data:00002249                 db    0
.data:0000224A                 db    0
.data:0000224B                 db    0
.data:0000224C                 db    0
.data:0000224D                 db    0
.data:0000224E                 db    0
.data:0000224F                 db    0
.data:00002250                 db    0
.data:00002251                 db    0
.data:00002252                 db    0
.data:00002253                 db    0
.data:00002254                 db    0
.data:00002255                 db    0
.data:00002256                 db    0
.data:00002257                 db    0
.data:00002258                 db    0
.data:00002259                 db    0
.data:0000225A                 db    0
.data:0000225B                 db    0
.data:0000225C                 db    0
.data:0000225D                 db    0
.data:0000225E                 db    0
.data:0000225F                 db    0
.data:00002260                 db    0
.data:00002261                 db    0
.data:00002262                 db    0
.data:00002263                 db    0
.data:00002264                 db    0
.data:00002265                 db    0
.data:00002266                 db    0
.data:00002267                 db    0
.data:00002268                 db    0
.data:00002269                 db    0
.data:0000226A                 db    0
.data:0000226B                 db    0
.data:0000226C                 db    0
.data:0000226D                 db    0
.data:0000226E                 db    0
.data:0000226F                 db    0
.data:00002270                 db    0
.data:00002271                 db    0
.data:00002272                 db    0
.data:00002273                 db    0
.data:00002274                 db    0
.data:00002275                 db    0
.data:00002276                 db    0
.data:00002277                 db    0
.data:00002278                 db    0
.data:00002279                 db    0
.data:0000227A                 db    0
.data:0000227B                 db    0
.data:0000227C                 db    4
.data:0000227D                 db    0
.data:0000227E                 db    0
.data:0000227F                 db    0
.data:00002280                 db    5
.data:00002281                 db    0
.data:00002282                 db    0
.data:00002283                 db    0
.data:00002284                 db  0Dh
.data:00002285                 db    0
.data:00002286                 db    0
.data:00002287                 db    0
.data:00002288                 db  65h ; e
.data:00002289                 db  6Eh ; n
.data:0000228A                 db  63h ; c
.data:0000228B                 db  6Fh ; o
.data:0000228C                 db  64h ; d
.data:0000228D                 db  69h ; i
.data:0000228E                 db  6Eh ; n
.data:0000228F                 db  67h ; g
.data:00002290                 db  2Dh ; -
.data:00002291                 db  74h ; t
.data:00002292                 db  75h ; u
.data:00002293                 db  72h ; r
.data:00002294                 db  6Bh ; k
.data:00002295                 db  69h ; i
.data:00002296                 db  73h ; s
.data:00002297                 db  68h ; h
.data:00002298                 db    0
.data:00002299                 db    0
.data:0000229A                 db    0
.data:0000229B                 db    0
.data:0000229C                 db    0
.data:0000229D                 db    0
.data:0000229E                 db    0
.data:0000229F                 db    0
.data:000022A0                 db    0
.data:000022A1                 db    0
.data:000022A2                 db    0
.data:000022A3                 db    0
.data:000022A4                 db    0
.data:000022A5                 db    0
.data:000022A6                 db    0
.data:000022A7                 db    0
.data:000022A8                 db    0
.data:000022A9                 db    0
.data:000022AA                 db    0
.data:000022AB                 db    0
.data:000022AC                 db    0
.data:000022AD                 db    0
.data:000022AE                 db    0
.data:000022AF                 db    0
.data:000022B0                 db    0
.data:000022B1                 db    0
.data:000022B2                 db    0
.data:000022B3                 db    0
.data:000022B4                 db    0
.data:000022B5                 db    0
.data:000022B6                 db    0
.data:000022B7                 db    0
.data:000022B8                 db    0
.data:000022B9                 db    0
.data:000022BA                 db    0
.data:000022BB                 db    0
.data:000022BC                 db    0
.data:000022BD                 db    0
.data:000022BE                 db    0
.data:000022BF                 db    0
.data:000022C0                 db    0
.data:000022C1                 db    0
.data:000022C2                 db    0
.data:000022C3                 db    0
.data:000022C4                 db    0
.data:000022C5                 db    0
.data:000022C6                 db    0
.data:000022C7                 db    0
.data:000022C8                 db    4
.data:000022C9                 db    0
.data:000022CA                 db    0
.data:000022CB                 db    0
.data:000022CC                 db    5
.data:000022CD                 db    0
.data:000022CE                 db    0
.data:000022CF                 db    0
.data:000022D0                 db  0Eh
.data:000022D1                 db    0
.data:000022D2                 db    0
.data:000022D3                 db    0
.data:000022D4                 db  65h ; e
.data:000022D5                 db  6Eh ; n
.data:000022D6                 db  63h ; c
.data:000022D7                 db  6Fh ; o
.data:000022D8                 db  64h ; d
.data:000022D9                 db  69h ; i
.data:000022DA                 db  6Eh ; n
.data:000022DB                 db  67h ; g
.data:000022DC                 db  2Dh ; -
.data:000022DD                 db  77h ; w
.data:000022DE                 db  65h ; e
.data:000022DF                 db  73h ; s
.data:000022E0                 db  74h ; t
.data:000022E1                 db  65h ; e
.data:000022E2                 db  72h ; r
.data:000022E3                 db  6Eh ; n
.data:000022E4                 db  45h ; E
.data:000022E5                 db  75h ; u
.data:000022E6                 db  72h ; r
.data:000022E7                 db  6Fh ; o
.data:000022E8                 db  70h ; p
.data:000022E9                 db  65h ; e
.data:000022EA                 db  61h ; a
.data:000022EB                 db  6Eh ; n
.data:000022EC                 db    0
.data:000022ED                 db    0
.data:000022EE                 db    0
.data:000022EF                 db    0
.data:000022F0                 db    0
.data:000022F1                 db    0
.data:000022F2                 db    0
.data:000022F3                 db    0
.data:000022F4                 db    0
.data:000022F5                 db    0
.data:000022F6                 db    0
.data:000022F7                 db    0
.data:000022F8                 db    0
.data:000022F9                 db    0
.data:000022FA                 db    0
.data:000022FB                 db    0
.data:000022FC                 db    0
.data:000022FD                 db    0
.data:000022FE                 db    0
.data:000022FF                 db    0
.data:00002300                 db    0
.data:00002301                 db    0
.data:00002302                 db    0
.data:00002303                 db    0
.data:00002304                 db    0
.data:00002305                 db    0
.data:00002306                 db    0
.data:00002307                 db    0
.data:00002308                 db    0
.data:00002309                 db    0
.data:0000230A                 db    0
.data:0000230B                 db    0
.data:0000230C                 db    0
.data:0000230D                 db    0
.data:0000230E                 db    0
.data:0000230F                 db    0
.data:00002310                 db    0
.data:00002311                 db    0
.data:00002312                 db    0
.data:00002313                 db    0
.data:00002314                 db    4
.data:00002315                 db    0
.data:00002316                 db    0
.data:00002317                 db    0
.data:00002318                 db    5
.data:00002319                 db    0
.data:0000231A                 db    0
.data:0000231B                 db    0
.data:0000231C                 db  0Fh
.data:0000231D                 db    0
.data:0000231E                 db    0
.data:0000231F                 db    0
.data:00002320                 db  65h ; e
.data:00002321                 db  6Eh ; n
.data:00002322                 db  63h ; c
.data:00002323                 db  6Fh ; o
.data:00002324                 db  64h ; d
.data:00002325                 db  69h ; i
.data:00002326                 db  6Eh ; n
.data:00002327                 db  67h ; g
.data:00002328                 db  2Dh ; -
.data:00002329                 db  76h ; v
.data:0000232A                 db  69h ; i
.data:0000232B                 db  65h ; e
.data:0000232C                 db  74h ; t
.data:0000232D                 db  6Eh ; n
.data:0000232E                 db  61h ; a
.data:0000232F                 db  6Dh ; m
.data:00002330                 db  65h ; e
.data:00002331                 db  73h ; s
.data:00002332                 db  65h ; e
.data:00002333                 db    0
.data:00002334                 db    0
.data:00002335                 db    0
.data:00002336                 db    0
.data:00002337                 db    0
.data:00002338                 db    0
.data:00002339                 db    0
.data:0000233A                 db    0
.data:0000233B                 db    0
.data:0000233C                 db    0
.data:0000233D                 db    0
.data:0000233E                 db    0
.data:0000233F                 db    0
.data:00002340                 db    0
.data:00002341                 db    0
.data:00002342                 db    0
.data:00002343                 db    0
.data:00002344                 db    0
.data:00002345                 db    0
.data:00002346                 db    0
.data:00002347                 db    0
.data:00002348                 db    0
.data:00002349                 db    0
.data:0000234A                 db    0
.data:0000234B                 db    0
.data:0000234C                 db    0
.data:0000234D                 db    0
.data:0000234E                 db    0
.data:0000234F                 db    0
.data:00002350                 db    0
.data:00002351                 db    0
.data:00002352                 db    0
.data:00002353                 db    0
.data:00002354                 db    0
.data:00002355                 db    0
.data:00002356                 db    0
.data:00002357                 db    0
.data:00002358                 db    0
.data:00002359                 db    0
.data:0000235A                 db    0
.data:0000235B                 db    0
.data:0000235C                 db    0
.data:0000235D                 db    0
.data:0000235E                 db    0
.data:0000235F                 db    0
.data:00002360                 db    6
.data:00002361                 db    0
.data:00002362                 db    0
.data:00002363                 db    0
.data:00002364                 db    4
.data:00002365                 db    0
.data:00002366                 db    0
.data:00002367                 db    0
.data:00002368                 db 0FFh
.data:00002369                 db 0FFh
.data:0000236A                 db 0FFh
.data:0000236B                 db 0FFh
.data:0000236C                 db  73h ; s
.data:0000236D                 db  65h ; e
.data:0000236E                 db  74h ; t
.data:0000236F                 db  74h ; t
.data:00002370                 db  69h ; i
.data:00002371                 db  6Eh ; n
.data:00002372                 db  67h ; g
.data:00002373                 db  73h ; s
.data:00002374                 db  2Dh ; -
.data:00002375                 db  69h ; i
.data:00002376                 db  6Dh ; m
.data:00002377                 db  70h ; p
.data:00002378                 db  6Fh ; o
.data:00002379                 db  72h ; r
.data:0000237A                 db  74h ; t
.data:0000237B                 db    0
.data:0000237C                 db    0
.data:0000237D                 db    0
.data:0000237E                 db    0
.data:0000237F                 db    0
.data:00002380                 db    0
.data:00002381                 db    0
.data:00002382                 db    0
.data:00002383                 db    0
.data:00002384                 db    0
.data:00002385                 db    0
.data:00002386                 db    0
.data:00002387                 db    0
.data:00002388                 db    0
.data:00002389                 db    0
.data:0000238A                 db    0
.data:0000238B                 db    0
.data:0000238C                 db    0
.data:0000238D                 db    0
.data:0000238E                 db    0
.data:0000238F                 db    0
.data:00002390                 db    0
.data:00002391                 db    0
.data:00002392                 db    0
.data:00002393                 db    0
.data:00002394                 db    0
.data:00002395                 db    0
.data:00002396                 db    0
.data:00002397                 db    0
.data:00002398                 db    0
.data:00002399                 db    0
.data:0000239A                 db    0
.data:0000239B                 db    0
.data:0000239C                 db    0
.data:0000239D                 db    0
.data:0000239E                 db    0
.data:0000239F                 db    0
.data:000023A0                 db    0
.data:000023A1                 db    0
.data:000023A2                 db    0
.data:000023A3                 db    0
.data:000023A4                 db    0
.data:000023A5                 db    0
.data:000023A6                 db    0
.data:000023A7                 db    0
.data:000023A8                 db    0
.data:000023A9                 db    0
.data:000023AA                 db    0
.data:000023AB                 db    0
.data:000023AC                 db 0FFh
.data:000023AD                 db 0FFh
.data:000023AE                 db 0FFh
.data:000023AF                 db 0FFh
.data:000023B0                 db 0FFh
.data:000023B1                 db 0FFh
.data:000023B2                 db 0FFh
.data:000023B3                 db 0FFh
.data:000023B4                 db 0FFh
.data:000023B5                 db 0FFh
.data:000023B6                 db 0FFh
.data:000023B7                 db 0FFh
.data:000023B8                 db    0
.data:000023B9                 db    0
.data:000023BA                 db    0
.data:000023BB                 db    0
.data:000023BC                 db    0
.data:000023BD                 db    0
.data:000023BE                 db    0
.data:000023BF                 db    0
.data:000023C0                 db    0
.data:000023C1                 db    0
.data:000023C2                 db    0
.data:000023C3                 db    0
.data:000023C4                 db    0
.data:000023C5                 db    0
.data:000023C6                 db    0
.data:000023C7                 db    0
.data:000023C8                 db    0
.data:000023C9                 db    0
.data:000023CA                 db    0
.data:000023CB                 db    0
.data:000023CC                 db    0
.data:000023CD                 db    0
.data:000023CE                 db    0
.data:000023CF                 db    0
.data:000023D0                 db    0
.data:000023D1                 db    0
.data:000023D2                 db    0
.data:000023D3                 db    0
.data:000023D4                 db    0
.data:000023D5                 db    0
.data:000023D6                 db    0
.data:000023D7                 db    0
.data:000023D8                 db    0
.data:000023D9                 db    0
.data:000023DA                 db    0
.data:000023DB                 db    0
.data:000023DC                 db    0
.data:000023DD                 db    0
.data:000023DE                 db    0
.data:000023DF                 db    0
.data:000023E0                 db    0
.data:000023E1                 db    0
.data:000023E2                 db    0
.data:000023E3                 db    0
.data:000023E4                 db    0
.data:000023E5                 db    0
.data:000023E6                 db    0
.data:000023E7                 db    0
.data:000023E8                 db    0
.data:000023E9                 db    0
.data:000023EA                 db    0
.data:000023EB                 db    0
.data:000023EC                 db    0
.data:000023ED                 db    0
.data:000023EE                 db    0
.data:000023EF                 db    0
.data:000023F0                 db    0
.data:000023F1                 db    0
.data:000023F2                 db    0
.data:000023F3                 db    0
.data:000023F4                 db    0
.data:000023F5                 db    0
.data:000023F6                 db    0
.data:000023F7                 db    0
.data:000023F8                 public ?tabContextMenuItemPos@@3PAHA
.data:000023F8 ; int * tabContextMenuItemPos
.data:000023F8 ?tabContextMenuItemPos@@3PAHA dd 0      ; DATA XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+C1r
.data:000023FC                 db    1
.data:000023FD                 db    0
.data:000023FE                 db    0
.data:000023FF                 db    0
.data:00002400                 db    4
.data:00002401                 db    0
.data:00002402                 db    0
.data:00002403                 db    0
.data:00002404                 db    5
.data:00002405                 db    0
.data:00002406                 db    0
.data:00002407                 db    0
.data:00002408                 db    9
.data:00002409                 db    0
.data:0000240A                 db    0
.data:0000240B                 db    0
.data:0000240C                 db  15h
.data:0000240D                 db    0
.data:0000240E                 db    0
.data:0000240F                 db    0
.data:00002410                 db  16h
.data:00002411                 db    0
.data:00002412                 db    0
.data:00002413                 db    0
.data:00002414                 db  11h
.data:00002415                 db    0
.data:00002416                 db    0
.data:00002417                 db    0
.data:00002418                 db  12h
.data:00002419                 db    0
.data:0000241A                 db    0
.data:0000241B                 db    0
.data:0000241C                 db  13h
.data:0000241D                 db    0
.data:0000241E                 db    0
.data:0000241F                 db    0
.data:00002420                 db    6
.data:00002421                 db    0
.data:00002422                 db    0
.data:00002423                 db    0
.data:00002424                 db    7
.data:00002425                 db    0
.data:00002426                 db    0
.data:00002427                 db    0
.data:00002428                 db  0Eh
.data:00002429                 db    0
.data:0000242A                 db    0
.data:0000242B                 db    0
.data:0000242C                 db  0Fh
.data:0000242D                 db    0
.data:0000242E                 db    0
.data:0000242F                 db    0
.data:00002430                 db  17h
.data:00002431                 db    0
.data:00002432                 db    0
.data:00002433                 db    0
.data:00002434                 db  18h
.data:00002435                 db    0
.data:00002436                 db    0
.data:00002437                 db    0
.data:00002438                 db    8
.data:00002439                 db    0
.data:0000243A                 db    0
.data:0000243B                 db    0
.data:0000243C                 db    2
.data:0000243D                 db    0
.data:0000243E                 db    0
.data:0000243F                 db    0
.data:00002440                 db    3
.data:00002441                 db    0
.data:00002442                 db    0
.data:00002443                 db    0
.data:00002444                 db  0Bh
.data:00002445                 db    0
.data:00002446                 db    0
.data:00002447                 db    0
.data:00002448                 db  0Ch
.data:00002449                 db    0
.data:0000244A                 db    0
.data:0000244B                 db    0
.data:0000244C                 db 0FFh
.data:0000244D                 db 0FFh
.data:0000244E                 db 0FFh
.data:0000244F                 db 0FFh
.data:0000244F _data           ends
.data:0000244F
.text$mn:00002450 ; ===========================================================================
.text$mn:00002450
.text$mn:00002450 ; Segment type: Pure code
.text$mn:00002450 ; Segment permissions: Read/Execute
.text$mn:00002450 _text$mn        segment para public 'CODE' use32
.text$mn:00002450                 assume cs:_text$mn
.text$mn:00002450                 ;org 2450h
.text$mn:00002450                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00002450
.text$mn:00002450 ; =============== S U B R O U T I N E =======================================
.text$mn:00002450
.text$mn:00002450 ; Attributes: bp-based frame
.text$mn:00002450
.text$mn:00002450 ; void __thiscall NativeLangSpeaker::init(NativeLangSpeaker *this, struct TiXmlDocumentA *, bool)
.text$mn:00002450                 public ?init@NativeLangSpeaker@@QAEXPAVTiXmlDocumentA@@_N@Z
.text$mn:00002450 ?init@NativeLangSpeaker@@QAEXPAVTiXmlDocumentA@@_N@Z proc near
.text$mn:00002450
.text$mn:00002450 var_24          = dword ptr -24h
.text$mn:00002450 var_20          = dword ptr -20h
.text$mn:00002450 var_1C          = dword ptr -1Ch
.text$mn:00002450 var_18          = dword ptr -18h
.text$mn:00002450 var_14          = dword ptr -14h
.text$mn:00002450 var_10          = dword ptr -10h
.text$mn:00002450 var_C           = dword ptr -0Ch
.text$mn:00002450 Str1            = dword ptr -8
.text$mn:00002450 var_4           = dword ptr -4
.text$mn:00002450 arg_0           = dword ptr  8
.text$mn:00002450 arg_4           = byte ptr  0Ch
.text$mn:00002450
.text$mn:00002450                 push    ebp
.text$mn:00002451                 mov     ebp, esp
.text$mn:00002453                 sub     esp, 24h
.text$mn:00002456                 mov     [ebp+var_4], ecx
.text$mn:00002459                 cmp     [ebp+arg_0], 0
.text$mn:0000245D                 jz      loc_25A3
.text$mn:00002463                 push    offset $SG169324 ; "NotepadPlus"
.text$mn:00002468                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000246B                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00002470                 mov     ecx, [ebp+var_4]
.text$mn:00002473                 mov     [ecx], eax
.text$mn:00002475                 mov     edx, [ebp+var_4]
.text$mn:00002478                 cmp     dword ptr [edx], 0
.text$mn:0000247B                 jz      loc_25A3
.text$mn:00002481                 push    offset $SG169326 ; "Native-Langue"
.text$mn:00002486                 mov     eax, [ebp+var_4]
.text$mn:00002489                 mov     ecx, [eax]      ; this
.text$mn:0000248B                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00002490                 mov     ecx, [ebp+var_4]
.text$mn:00002493                 mov     [ecx], eax
.text$mn:00002495                 mov     edx, [ebp+var_4]
.text$mn:00002498                 cmp     dword ptr [edx], 0
.text$mn:0000249B                 jz      loc_25A3
.text$mn:000024A1                 mov     eax, [ebp+var_4]
.text$mn:000024A4                 mov     ecx, [eax]      ; this
.text$mn:000024A6                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:000024AB                 mov     [ebp+var_10], eax
.text$mn:000024AE                 push    offset $SG169330 ; "RTL"
.text$mn:000024B3                 mov     ecx, [ebp+var_10] ; this
.text$mn:000024B6                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:000024BB                 mov     [ebp+Str1], eax
.text$mn:000024BE                 cmp     [ebp+Str1], 0
.text$mn:000024C2                 jz      short loc_24F4
.text$mn:000024C4                 push    offset $SG169332 ; "yes"
.text$mn:000024C9                 mov     ecx, [ebp+Str1]
.text$mn:000024CC                 push    ecx             ; Str1
.text$mn:000024CD                 call    _strcmp
.text$mn:000024D2                 add     esp, 8
.text$mn:000024D5                 test    eax, eax
.text$mn:000024D7                 jnz     short loc_24E2
.text$mn:000024D9                 mov     [ebp+var_C], 1
.text$mn:000024E0                 jmp     short loc_24E9
.text$mn:000024E2 ; ---------------------------------------------------------------------------
.text$mn:000024E2
.text$mn:000024E2 loc_24E2:                               ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+87j
.text$mn:000024E2                 mov     [ebp+var_C], 0
.text$mn:000024E9
.text$mn:000024E9 loc_24E9:                               ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+90j
.text$mn:000024E9                 mov     edx, [ebp+var_4]
.text$mn:000024EC                 mov     al, byte ptr [ebp+var_C]
.text$mn:000024EF                 mov     [edx+8], al
.text$mn:000024F2                 jmp     short loc_24FB
.text$mn:000024F4 ; ---------------------------------------------------------------------------
.text$mn:000024F4
.text$mn:000024F4 loc_24F4:                               ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+72j
.text$mn:000024F4                 mov     ecx, [ebp+var_4]
.text$mn:000024F7                 mov     byte ptr [ecx+8], 0
.text$mn:000024FB
.text$mn:000024FB loc_24FB:                               ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+A2j
.text$mn:000024FB                 push    offset $SG169334 ; "filename"
.text$mn:00002500                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002503                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00002508                 mov     edx, [ebp+var_4]
.text$mn:0000250B                 mov     [edx+0Ch], eax
.text$mn:0000250E                 movzx   eax, [ebp+arg_4]
.text$mn:00002512                 test    eax, eax
.text$mn:00002514                 jnz     short loc_2542
.text$mn:00002516                 mov     ecx, [ebp+var_4]
.text$mn:00002519                 cmp     dword ptr [ecx+0Ch], 0
.text$mn:0000251D                 jz      short loc_2542
.text$mn:0000251F                 mov     edx, [ebp+var_4]
.text$mn:00002522                 mov     eax, [edx+0Ch]
.text$mn:00002525                 push    eax             ; Str2
.text$mn:00002526                 push    offset $SG169336 ; "english.xml"
.text$mn:0000252B                 call    _stricmp
.text$mn:00002530                 add     esp, 8
.text$mn:00002533                 test    eax, eax
.text$mn:00002535                 jnz     short loc_2542
.text$mn:00002537                 mov     ecx, [ebp+var_4]
.text$mn:0000253A                 mov     dword ptr [ecx], 0
.text$mn:00002540                 jmp     short loc_25A3
.text$mn:00002542 ; ---------------------------------------------------------------------------
.text$mn:00002542
.text$mn:00002542 loc_2542:                               ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+C4j
.text$mn:00002542                                         ; NativeLangSpeaker::init(TiXmlDocumentA *,bool)+CDj ...
.text$mn:00002542                 mov     edx, [ebp+var_4]
.text$mn:00002545                 mov     ecx, [edx]      ; this
.text$mn:00002547                 call    ?GetDocument@TiXmlNodeA@@QBEPAVTiXmlDocumentA@@XZ ; TiXmlNodeA::GetDocument(void)
.text$mn:0000254C                 mov     ecx, eax        ; this
.text$mn:0000254E                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::FirstChild(void)
.text$mn:00002553                 mov     ecx, eax        ; this
.text$mn:00002555                 call    ?ToDeclaration@TiXmlNodeA@@QBEPAVTiXmlDeclarationA@@XZ ; TiXmlNodeA::ToDeclaration(void)
.text$mn:0000255A                 mov     [ebp+var_14], eax
.text$mn:0000255D                 cmp     [ebp+var_14], 0
.text$mn:00002561                 jz      short loc_25A3
.text$mn:00002563                 mov     ecx, [ebp+var_14] ; this
.text$mn:00002566                 call    ?Encoding@TiXmlDeclarationA@@QBEPBDXZ ; TiXmlDeclarationA::Encoding(void)
.text$mn:0000256B                 mov     [ebp+var_20], eax
.text$mn:0000256E                 call    ?getInstance@EncodingMapper@@SAPAV1@XZ ; EncodingMapper::getInstance(void)
.text$mn:00002573                 mov     [ebp+var_24], eax
.text$mn:00002576                 mov     eax, [ebp+var_20]
.text$mn:00002579                 push    eax             ; char *
.text$mn:0000257A                 mov     ecx, [ebp+var_24] ; this
.text$mn:0000257D                 call    ?getEncodingFromString@EncodingMapper@@QBEHPBD@Z ; EncodingMapper::getEncodingFromString(char const *)
.text$mn:00002582                 mov     [ebp+var_18], eax
.text$mn:00002585                 cmp     [ebp+var_18], 0FFFFFFFFh
.text$mn:00002589                 jz      short loc_2593
.text$mn:0000258B                 mov     ecx, [ebp+var_18]
.text$mn:0000258E                 mov     [ebp+var_1C], ecx
.text$mn:00002591                 jmp     short loc_259A
.text$mn:00002593 ; ---------------------------------------------------------------------------
.text$mn:00002593
.text$mn:00002593 loc_2593:                               ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+139j
.text$mn:00002593                 mov     [ebp+var_1C], 0
.text$mn:0000259A
.text$mn:0000259A loc_259A:                               ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+141j
.text$mn:0000259A                 mov     edx, [ebp+var_4]
.text$mn:0000259D                 mov     eax, [ebp+var_1C]
.text$mn:000025A0                 mov     [edx+4], eax
.text$mn:000025A3
.text$mn:000025A3 loc_25A3:                               ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+Dj
.text$mn:000025A3                                         ; NativeLangSpeaker::init(TiXmlDocumentA *,bool)+2Bj ...
.text$mn:000025A3                 mov     esp, ebp
.text$mn:000025A5                 pop     ebp
.text$mn:000025A6                 retn    8
.text$mn:000025A6 ?init@NativeLangSpeaker@@QAEXPAVTiXmlDocumentA@@_N@Z endp
.text$mn:000025A6
.text$mn:000025A6 ; ---------------------------------------------------------------------------
.text$mn:000025A9                 align 10h
.text$mn:000025B0
.text$mn:000025B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000025B0
.text$mn:000025B0 ; Attributes: bp-based frame
.text$mn:000025B0
.text$mn:000025B0 ; void __thiscall NativeLangSpeaker::changeConfigLang(NativeLangSpeaker *this, HWND)
.text$mn:000025B0                 public ?changeConfigLang@NativeLangSpeaker@@QAEXPAUHWND__@@@Z
.text$mn:000025B0 ?changeConfigLang@NativeLangSpeaker@@QAEXPAUHWND__@@@Z proc near
.text$mn:000025B0
.text$mn:000025B0 var_4C          = dword ptr -4Ch
.text$mn:000025B0 var_48          = dword ptr -48h
.text$mn:000025B0 var_44          = dword ptr -44h
.text$mn:000025B0 var_40          = dword ptr -40h
.text$mn:000025B0 nIDDlgItem      = dword ptr -3Ch
.text$mn:000025B0 var_38          = dword ptr -38h
.text$mn:000025B0 lpString        = dword ptr -34h
.text$mn:000025B0 var_30          = dword ptr -30h
.text$mn:000025B0 var_2C          = dword ptr -2Ch
.text$mn:000025B0 var_28          = dword ptr -28h
.text$mn:000025B0 var_24          = dword ptr -24h
.text$mn:000025B0 var_20          = dword ptr -20h
.text$mn:000025B0 var_1C          = dword ptr -1Ch
.text$mn:000025B0 var_18          = dword ptr -18h
.text$mn:000025B0 var_14          = dword ptr -14h
.text$mn:000025B0 var_10          = dword ptr -10h
.text$mn:000025B0 var_C           = dword ptr -0Ch
.text$mn:000025B0 var_8           = dword ptr -8
.text$mn:000025B0 var_4           = dword ptr -4
.text$mn:000025B0 hWnd            = dword ptr  8
.text$mn:000025B0
.text$mn:000025B0                 push    ebp
.text$mn:000025B1                 mov     ebp, esp
.text$mn:000025B3                 sub     esp, 4Ch
.text$mn:000025B6                 mov     [ebp+var_8], ecx
.text$mn:000025B9                 mov     eax, [ebp+var_8]
.text$mn:000025BC                 cmp     dword ptr [eax], 0
.text$mn:000025BF                 jnz     short loc_25C6
.text$mn:000025C1                 jmp     loc_27F6
.text$mn:000025C6 ; ---------------------------------------------------------------------------
.text$mn:000025C6
.text$mn:000025C6 loc_25C6:                               ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+Fj
.text$mn:000025C6                 push    offset $SG169578 ; "Dialog"
.text$mn:000025CB                 mov     ecx, [ebp+var_8]
.text$mn:000025CE                 mov     ecx, [ecx]      ; this
.text$mn:000025D0                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:000025D5                 mov     [ebp+var_4], eax
.text$mn:000025D8                 cmp     [ebp+var_4], 0
.text$mn:000025DC                 jnz     short loc_25E3
.text$mn:000025DE                 jmp     loc_27F6
.text$mn:000025E3 ; ---------------------------------------------------------------------------
.text$mn:000025E3
.text$mn:000025E3 loc_25E3:                               ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+2Cj
.text$mn:000025E3                 push    offset $SG169580 ; "StyleConfig"
.text$mn:000025E8                 mov     ecx, [ebp+var_4] ; this
.text$mn:000025EB                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:000025F0                 mov     [ebp+var_4], eax
.text$mn:000025F3                 cmp     [ebp+var_4], 0
.text$mn:000025F7                 jnz     short loc_25FE
.text$mn:000025F9                 jmp     loc_27F6
.text$mn:000025FE ; ---------------------------------------------------------------------------
.text$mn:000025FE
.text$mn:000025FE loc_25FE:                               ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+47j
.text$mn:000025FE                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00002603                 mov     [ebp+var_20], eax
.text$mn:00002606                 push    offset $SG169584 ; "title"
.text$mn:0000260B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000260E                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00002613                 mov     ecx, eax        ; this
.text$mn:00002615                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:0000261A                 mov     [ebp+var_14], eax
.text$mn:0000261D                 cmp     [ebp+var_14], 0
.text$mn:00002621                 jz      short loc_2666
.text$mn:00002623                 mov     edx, 1
.text$mn:00002628                 imul    eax, edx, 0
.text$mn:0000262B                 mov     ecx, [ebp+var_14]
.text$mn:0000262E                 movsx   edx, byte ptr [ecx+eax]
.text$mn:00002632                 test    edx, edx
.text$mn:00002634                 jz      short loc_2666
.text$mn:00002636                 cmp     [ebp+hWnd], 0
.text$mn:0000263A                 jz      short loc_2666
.text$mn:0000263C                 push    0               ; int *
.text$mn:0000263E                 push    0               ; int *
.text$mn:00002640                 push    0FFFFFFFFh      ; int
.text$mn:00002642                 mov     eax, [ebp+var_8]
.text$mn:00002645                 mov     ecx, [eax+4]
.text$mn:00002648                 push    ecx             ; unsigned int
.text$mn:00002649                 mov     edx, [ebp+var_14]
.text$mn:0000264C                 push    edx             ; char *
.text$mn:0000264D                 mov     ecx, [ebp+var_20] ; this
.text$mn:00002650                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00002655                 mov     [ebp+lpString], eax
.text$mn:00002658                 mov     eax, [ebp+lpString]
.text$mn:0000265B                 push    eax             ; lpString
.text$mn:0000265C                 mov     ecx, [ebp+hWnd]
.text$mn:0000265F                 push    ecx             ; hWnd
.text$mn:00002660                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:00002666
.text$mn:00002666 loc_2666:                               ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+71j
.text$mn:00002666                                         ; NativeLangSpeaker::changeConfigLang(HWND__ *)+84j ...
.text$mn:00002666                 push    offset $SG169588 ; "Item"
.text$mn:0000266B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000266E                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:00002673                 mov     [ebp+var_C], eax
.text$mn:00002676                 jmp     short loc_2688
.text$mn:00002678 ; ---------------------------------------------------------------------------
.text$mn:00002678
.text$mn:00002678 loc_2678:                               ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *):loc_2721j
.text$mn:00002678                 push    offset $SG169592 ; "Item"
.text$mn:0000267D                 mov     ecx, [ebp+var_C] ; this
.text$mn:00002680                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:00002685                 mov     [ebp+var_C], eax
.text$mn:00002688
.text$mn:00002688 loc_2688:                               ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+C6j
.text$mn:00002688                 cmp     [ebp+var_C], 0
.text$mn:0000268C                 jz      loc_2726
.text$mn:00002692                 mov     ecx, [ebp+var_C] ; this
.text$mn:00002695                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:0000269A                 mov     [ebp+var_24], eax
.text$mn:0000269D                 lea     edx, [ebp+nIDDlgItem]
.text$mn:000026A0                 push    edx             ; int *
.text$mn:000026A1                 push    offset $SG169596 ; char *
.text$mn:000026A6                 mov     ecx, [ebp+var_24] ; this
.text$mn:000026A9                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:000026AE                 mov     [ebp+var_38], eax
.text$mn:000026B1                 push    offset $SG169598 ; "name"
.text$mn:000026B6                 mov     ecx, [ebp+var_24] ; this
.text$mn:000026B9                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:000026BE                 mov     [ebp+var_18], eax
.text$mn:000026C1                 cmp     [ebp+var_38], 0
.text$mn:000026C5                 jz      short loc_2721
.text$mn:000026C7                 cmp     [ebp+var_18], 0
.text$mn:000026CB                 jz      short loc_2721
.text$mn:000026CD                 mov     eax, 1
.text$mn:000026D2                 imul    ecx, eax, 0
.text$mn:000026D5                 mov     edx, [ebp+var_18]
.text$mn:000026D8                 movsx   eax, byte ptr [edx+ecx]
.text$mn:000026DC                 test    eax, eax
.text$mn:000026DE                 jz      short loc_2721
.text$mn:000026E0                 mov     ecx, [ebp+nIDDlgItem]
.text$mn:000026E3                 push    ecx             ; nIDDlgItem
.text$mn:000026E4                 mov     edx, [ebp+hWnd]
.text$mn:000026E7                 push    edx             ; hDlg
.text$mn:000026E8                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000026EE                 mov     [ebp+var_28], eax
.text$mn:000026F1                 cmp     [ebp+var_28], 0
.text$mn:000026F5                 jz      short loc_2721
.text$mn:000026F7                 push    0               ; int *
.text$mn:000026F9                 push    0               ; int *
.text$mn:000026FB                 push    0FFFFFFFFh      ; int
.text$mn:000026FD                 mov     eax, [ebp+var_8]
.text$mn:00002700                 mov     ecx, [eax+4]
.text$mn:00002703                 push    ecx             ; unsigned int
.text$mn:00002704                 mov     edx, [ebp+var_18]
.text$mn:00002707                 push    edx             ; char *
.text$mn:00002708                 mov     ecx, [ebp+var_20] ; this
.text$mn:0000270B                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00002710                 mov     [ebp+var_40], eax
.text$mn:00002713                 mov     eax, [ebp+var_40]
.text$mn:00002716                 push    eax             ; lpString
.text$mn:00002717                 mov     ecx, [ebp+var_28]
.text$mn:0000271A                 push    ecx             ; hWnd
.text$mn:0000271B                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:00002721
.text$mn:00002721 loc_2721:                               ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+115j
.text$mn:00002721                                         ; NativeLangSpeaker::changeConfigLang(HWND__ *)+11Bj ...
.text$mn:00002721                 jmp     loc_2678
.text$mn:00002726 ; ---------------------------------------------------------------------------
.text$mn:00002726
.text$mn:00002726 loc_2726:                               ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+DCj
.text$mn:00002726                 push    offset $SG169603 ; "SubDialog"
.text$mn:0000272B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000272E                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00002733                 mov     [ebp+var_4], eax
.text$mn:00002736                 push    offset $SG169605 ; "Item"
.text$mn:0000273B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000273E                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:00002743                 mov     [ebp+var_10], eax
.text$mn:00002746                 jmp     short loc_2758
.text$mn:00002748 ; ---------------------------------------------------------------------------
.text$mn:00002748
.text$mn:00002748 loc_2748:                               ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *):loc_27F1j
.text$mn:00002748                 push    offset $SG169609 ; "Item"
.text$mn:0000274D                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002750                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:00002755                 mov     [ebp+var_10], eax
.text$mn:00002758
.text$mn:00002758 loc_2758:                               ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+196j
.text$mn:00002758                 cmp     [ebp+var_10], 0
.text$mn:0000275C                 jz      loc_27F6
.text$mn:00002762                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002765                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:0000276A                 mov     [ebp+var_2C], eax
.text$mn:0000276D                 lea     edx, [ebp+var_48]
.text$mn:00002770                 push    edx             ; int *
.text$mn:00002771                 push    offset $SG169613 ; char *
.text$mn:00002776                 mov     ecx, [ebp+var_2C] ; this
.text$mn:00002779                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:0000277E                 mov     [ebp+var_44], eax
.text$mn:00002781                 push    offset $SG169615 ; "name"
.text$mn:00002786                 mov     ecx, [ebp+var_2C] ; this
.text$mn:00002789                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:0000278E                 mov     [ebp+var_1C], eax
.text$mn:00002791                 cmp     [ebp+var_44], 0
.text$mn:00002795                 jz      short loc_27F1
.text$mn:00002797                 cmp     [ebp+var_1C], 0
.text$mn:0000279B                 jz      short loc_27F1
.text$mn:0000279D                 mov     eax, 1
.text$mn:000027A2                 imul    ecx, eax, 0
.text$mn:000027A5                 mov     edx, [ebp+var_1C]
.text$mn:000027A8                 movsx   eax, byte ptr [edx+ecx]
.text$mn:000027AC                 test    eax, eax
.text$mn:000027AE                 jz      short loc_27F1
.text$mn:000027B0                 mov     ecx, [ebp+var_48]
.text$mn:000027B3                 push    ecx             ; nIDDlgItem
.text$mn:000027B4                 mov     edx, [ebp+hWnd]
.text$mn:000027B7                 push    edx             ; hDlg
.text$mn:000027B8                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000027BE                 mov     [ebp+var_30], eax
.text$mn:000027C1                 cmp     [ebp+var_30], 0
.text$mn:000027C5                 jz      short loc_27F1
.text$mn:000027C7                 push    0               ; int *
.text$mn:000027C9                 push    0               ; int *
.text$mn:000027CB                 push    0FFFFFFFFh      ; int
.text$mn:000027CD                 mov     eax, [ebp+var_8]
.text$mn:000027D0                 mov     ecx, [eax+4]
.text$mn:000027D3                 push    ecx             ; unsigned int
.text$mn:000027D4                 mov     edx, [ebp+var_1C]
.text$mn:000027D7                 push    edx             ; char *
.text$mn:000027D8                 mov     ecx, [ebp+var_20] ; this
.text$mn:000027DB                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:000027E0                 mov     [ebp+var_4C], eax
.text$mn:000027E3                 mov     eax, [ebp+var_4C]
.text$mn:000027E6                 push    eax             ; lpString
.text$mn:000027E7                 mov     ecx, [ebp+var_30]
.text$mn:000027EA                 push    ecx             ; hWnd
.text$mn:000027EB                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:000027F1
.text$mn:000027F1 loc_27F1:                               ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+1E5j
.text$mn:000027F1                                         ; NativeLangSpeaker::changeConfigLang(HWND__ *)+1EBj ...
.text$mn:000027F1                 jmp     loc_2748
.text$mn:000027F6 ; ---------------------------------------------------------------------------
.text$mn:000027F6
.text$mn:000027F6 loc_27F6:                               ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+11j
.text$mn:000027F6                                         ; NativeLangSpeaker::changeConfigLang(HWND__ *)+2Ej ...
.text$mn:000027F6                 mov     esp, ebp
.text$mn:000027F8                 pop     ebp
.text$mn:000027F9                 retn    4
.text$mn:000027F9 ?changeConfigLang@NativeLangSpeaker@@QAEXPAUHWND__@@@Z endp
.text$mn:000027F9
.text$mn:000027F9 ; ---------------------------------------------------------------------------
.text$mn:000027FC                 align 10h
.text$mn:00002800
.text$mn:00002800 ; =============== S U B R O U T I N E =======================================
.text$mn:00002800
.text$mn:00002800 ; Attributes: bp-based frame
.text$mn:00002800
.text$mn:00002800 ; void __thiscall NativeLangSpeaker::changeLangTabContextMenu(NativeLangSpeaker *this, HMENU)
.text$mn:00002800                 public ?changeLangTabContextMenu@NativeLangSpeaker@@QAEXPAUHMENU__@@@Z
.text$mn:00002800 ?changeLangTabContextMenu@NativeLangSpeaker@@QAEXPAUHMENU__@@@Z proc near
.text$mn:00002800
.text$mn:00002800 uIDNewItem      = dword ptr -30h
.text$mn:00002800 lpNewItem       = dword ptr -2Ch
.text$mn:00002800 var_28          = dword ptr -28h
.text$mn:00002800 var_24          = dword ptr -24h
.text$mn:00002800 var_20          = dword ptr -20h
.text$mn:00002800 nPos            = dword ptr -1Ch
.text$mn:00002800 var_18          = dword ptr -18h
.text$mn:00002800 var_14          = dword ptr -14h
.text$mn:00002800 var_10          = dword ptr -10h
.text$mn:00002800 var_C           = dword ptr -0Ch
.text$mn:00002800 var_8           = dword ptr -8
.text$mn:00002800 var_4           = dword ptr -4
.text$mn:00002800 hMenu           = dword ptr  8
.text$mn:00002800
.text$mn:00002800                 push    ebp
.text$mn:00002801                 mov     ebp, esp
.text$mn:00002803                 sub     esp, 30h
.text$mn:00002806                 mov     [ebp+var_10], ecx
.text$mn:00002809                 mov     eax, [ebp+var_10]
.text$mn:0000280C                 cmp     dword ptr [eax], 0
.text$mn:0000280F                 jz      loc_292E
.text$mn:00002815                 push    offset $SG169511 ; "Menu"
.text$mn:0000281A                 mov     ecx, [ebp+var_10]
.text$mn:0000281D                 mov     ecx, [ecx]      ; this
.text$mn:0000281F                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00002824                 mov     [ebp+var_4], eax
.text$mn:00002827                 cmp     [ebp+var_4], 0
.text$mn:0000282B                 jz      loc_292E
.text$mn:00002831                 push    offset $SG169513 ; "TabBar"
.text$mn:00002836                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002839                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:0000283E                 mov     [ebp+var_4], eax
.text$mn:00002841                 cmp     [ebp+var_4], 0
.text$mn:00002845                 jz      loc_292E
.text$mn:0000284B                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00002850                 mov     [ebp+var_28], eax
.text$mn:00002853                 mov     [ebp+var_24], 16h
.text$mn:0000285A                 push    offset $SG169519 ; "Item"
.text$mn:0000285F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002862                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:00002867                 mov     [ebp+var_8], eax
.text$mn:0000286A                 jmp     short loc_287C
.text$mn:0000286C ; ---------------------------------------------------------------------------
.text$mn:0000286C
.text$mn:0000286C loc_286C:                               ; CODE XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *):loc_28BCj
.text$mn:0000286C                                         ; NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *):loc_2929j
.text$mn:0000286C                 push    offset $SG169523 ; "Item"
.text$mn:00002871                 mov     ecx, [ebp+var_8] ; this
.text$mn:00002874                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:00002879                 mov     [ebp+var_8], eax
.text$mn:0000287C
.text$mn:0000287C loc_287C:                               ; CODE XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+6Aj
.text$mn:0000287C                 cmp     [ebp+var_8], 0
.text$mn:00002880                 jz      loc_292E
.text$mn:00002886                 mov     ecx, [ebp+var_8] ; this
.text$mn:00002889                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:0000288E                 mov     [ebp+var_14], eax
.text$mn:00002891                 lea     edx, [ebp+var_C]
.text$mn:00002894                 push    edx             ; int *
.text$mn:00002895                 push    offset $SG169527 ; "CMID"
.text$mn:0000289A                 mov     ecx, [ebp+var_14] ; this
.text$mn:0000289D                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:000028A2                 mov     [ebp+var_20], eax
.text$mn:000028A5                 cmp     [ebp+var_20], 0
.text$mn:000028A9                 jz      short loc_28BC
.text$mn:000028AB                 cmp     [ebp+var_C], 0
.text$mn:000028AF                 jl      short loc_28BC
.text$mn:000028B1                 mov     eax, [ebp+var_24]
.text$mn:000028B4                 sub     eax, 1
.text$mn:000028B7                 cmp     [ebp+var_C], eax
.text$mn:000028BA                 jl      short loc_28BE
.text$mn:000028BC
.text$mn:000028BC loc_28BC:                               ; CODE XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+A9j
.text$mn:000028BC                                         ; NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+AFj
.text$mn:000028BC                 jmp     short loc_286C
.text$mn:000028BE ; ---------------------------------------------------------------------------
.text$mn:000028BE
.text$mn:000028BE loc_28BE:                               ; CODE XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+BAj
.text$mn:000028BE                 mov     ecx, [ebp+var_C]
.text$mn:000028C1                 mov     edx, ds:?tabContextMenuItemPos@@3PAHA[ecx*4] ; int * tabContextMenuItemPos
.text$mn:000028C8                 mov     [ebp+nPos], edx
.text$mn:000028CB                 push    offset $SG169533 ; "name"
.text$mn:000028D0                 mov     ecx, [ebp+var_14] ; this
.text$mn:000028D3                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:000028D8                 mov     [ebp+var_18], eax
.text$mn:000028DB                 cmp     [ebp+var_18], 0
.text$mn:000028DF                 jz      short loc_2929
.text$mn:000028E1                 push    0               ; int *
.text$mn:000028E3                 push    0               ; int *
.text$mn:000028E5                 push    0FFFFFFFFh      ; int
.text$mn:000028E7                 mov     eax, [ebp+var_10]
.text$mn:000028EA                 mov     ecx, [eax+4]
.text$mn:000028ED                 push    ecx             ; unsigned int
.text$mn:000028EE                 mov     edx, [ebp+var_18]
.text$mn:000028F1                 push    edx             ; char *
.text$mn:000028F2                 mov     ecx, [ebp+var_28] ; this
.text$mn:000028F5                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:000028FA                 mov     [ebp+lpNewItem], eax
.text$mn:000028FD                 mov     eax, [ebp+nPos]
.text$mn:00002900                 push    eax             ; nPos
.text$mn:00002901                 mov     ecx, [ebp+hMenu]
.text$mn:00002904                 push    ecx             ; hMenu
.text$mn:00002905                 call    dword ptr ds:__imp__GetMenuItemID@8 ; GetMenuItemID(x,x)
.text$mn:0000290B                 mov     [ebp+uIDNewItem], eax
.text$mn:0000290E                 mov     edx, [ebp+lpNewItem]
.text$mn:00002911                 push    edx             ; lpNewItem
.text$mn:00002912                 mov     eax, [ebp+uIDNewItem]
.text$mn:00002915                 push    eax             ; uIDNewItem
.text$mn:00002916                 push    400h            ; uFlags
.text$mn:0000291B                 mov     ecx, [ebp+nPos]
.text$mn:0000291E                 push    ecx             ; uPosition
.text$mn:0000291F                 mov     edx, [ebp+hMenu]
.text$mn:00002922                 push    edx             ; hMnu
.text$mn:00002923                 call    dword ptr ds:__imp__ModifyMenuW@20 ; ModifyMenuW(x,x,x,x,x)
.text$mn:00002929
.text$mn:00002929 loc_2929:                               ; CODE XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+DFj
.text$mn:00002929                 jmp     loc_286C
.text$mn:0000292E ; ---------------------------------------------------------------------------
.text$mn:0000292E
.text$mn:0000292E loc_292E:                               ; CODE XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+Fj
.text$mn:0000292E                                         ; NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+2Bj ...
.text$mn:0000292E                 mov     esp, ebp
.text$mn:00002930                 pop     ebp
.text$mn:00002931                 retn    4
.text$mn:00002931 ?changeLangTabContextMenu@NativeLangSpeaker@@QAEXPAUHMENU__@@@Z endp
.text$mn:00002931
.text$mn:00002931 ; ---------------------------------------------------------------------------
.text$mn:00002934                 align 10h
.text$mn:00002940
.text$mn:00002940 ; =============== S U B R O U T I N E =======================================
.text$mn:00002940
.text$mn:00002940 ; Attributes: bp-based frame
.text$mn:00002940
.text$mn:00002940 ; struct TiXmlNodeA *__thiscall NativeLangSpeaker::searchDlgNode(NativeLangSpeaker *this, struct TiXmlNodeA *, const char *)
.text$mn:00002940                 public ?searchDlgNode@NativeLangSpeaker@@QAEPAVTiXmlNodeA@@PAV2@PBD@Z
.text$mn:00002940 ?searchDlgNode@NativeLangSpeaker@@QAEPAVTiXmlNodeA@@PAV2@PBD@Z proc near
.text$mn:00002940                                         ; CODE XREF: NativeLangSpeaker::searchDlgNode(TiXmlNodeA *,char const *)+4Cp
.text$mn:00002940                                         ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+57p ...
.text$mn:00002940
.text$mn:00002940 var_C           = dword ptr -0Ch
.text$mn:00002940 var_8           = dword ptr -8
.text$mn:00002940 var_4           = dword ptr -4
.text$mn:00002940 arg_0           = dword ptr  8
.text$mn:00002940 arg_4           = dword ptr  0Ch
.text$mn:00002940
.text$mn:00002940                 push    ebp
.text$mn:00002941                 mov     ebp, esp
.text$mn:00002943                 sub     esp, 0Ch
.text$mn:00002946                 mov     [ebp+var_C], ecx
.text$mn:00002949                 mov     eax, [ebp+arg_4]
.text$mn:0000294C                 push    eax             ; char *
.text$mn:0000294D                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00002950                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00002955                 mov     [ebp+var_4], eax
.text$mn:00002958                 cmp     [ebp+var_4], 0
.text$mn:0000295C                 jz      short loc_2963
.text$mn:0000295E                 mov     eax, [ebp+var_4]
.text$mn:00002961                 jmp     short loc_29A3
.text$mn:00002963 ; ---------------------------------------------------------------------------
.text$mn:00002963
.text$mn:00002963 loc_2963:                               ; CODE XREF: NativeLangSpeaker::searchDlgNode(TiXmlNodeA *,char const *)+1Cj
.text$mn:00002963                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00002966                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::FirstChildElement(void)
.text$mn:0000296B                 mov     [ebp+var_8], eax
.text$mn:0000296E                 jmp     short loc_297B
.text$mn:00002970 ; ---------------------------------------------------------------------------
.text$mn:00002970
.text$mn:00002970 loc_2970:                               ; CODE XREF: NativeLangSpeaker::searchDlgNode(TiXmlNodeA *,char const *):loc_299Fj
.text$mn:00002970                 mov     ecx, [ebp+var_8] ; this
.text$mn:00002973                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ ; TiXmlNodeA::NextSibling(void)
.text$mn:00002978                 mov     [ebp+var_8], eax
.text$mn:0000297B
.text$mn:0000297B loc_297B:                               ; CODE XREF: NativeLangSpeaker::searchDlgNode(TiXmlNodeA *,char const *)+2Ej
.text$mn:0000297B                 cmp     [ebp+var_8], 0
.text$mn:0000297F                 jz      short loc_29A1
.text$mn:00002981                 mov     ecx, [ebp+arg_4]
.text$mn:00002984                 push    ecx             ; char *
.text$mn:00002985                 mov     edx, [ebp+var_8]
.text$mn:00002988                 push    edx             ; struct TiXmlNodeA *
.text$mn:00002989                 mov     ecx, [ebp+var_C] ; this
.text$mn:0000298C                 call    ?searchDlgNode@NativeLangSpeaker@@QAEPAVTiXmlNodeA@@PAV2@PBD@Z ; NativeLangSpeaker::searchDlgNode(TiXmlNodeA *,char const *)
.text$mn:00002991                 mov     [ebp+var_4], eax
.text$mn:00002994                 cmp     [ebp+var_4], 0
.text$mn:00002998                 jz      short loc_299F
.text$mn:0000299A                 mov     eax, [ebp+var_4]
.text$mn:0000299D                 jmp     short loc_29A3
.text$mn:0000299F ; ---------------------------------------------------------------------------
.text$mn:0000299F
.text$mn:0000299F loc_299F:                               ; CODE XREF: NativeLangSpeaker::searchDlgNode(TiXmlNodeA *,char const *)+58j
.text$mn:0000299F                 jmp     short loc_2970
.text$mn:000029A1 ; ---------------------------------------------------------------------------
.text$mn:000029A1
.text$mn:000029A1 loc_29A1:                               ; CODE XREF: NativeLangSpeaker::searchDlgNode(TiXmlNodeA *,char const *)+3Fj
.text$mn:000029A1                 xor     eax, eax
.text$mn:000029A3
.text$mn:000029A3 loc_29A3:                               ; CODE XREF: NativeLangSpeaker::searchDlgNode(TiXmlNodeA *,char const *)+21j
.text$mn:000029A3                                         ; NativeLangSpeaker::searchDlgNode(TiXmlNodeA *,char const *)+5Dj
.text$mn:000029A3                 mov     esp, ebp
.text$mn:000029A5                 pop     ebp
.text$mn:000029A6                 retn    8
.text$mn:000029A6 ?searchDlgNode@NativeLangSpeaker@@QAEPAVTiXmlNodeA@@PAV2@PBD@Z endp
.text$mn:000029A6
.text$mn:000029A6 ; ---------------------------------------------------------------------------
.text$mn:000029A9                 align 10h
.text$mn:000029B0
.text$mn:000029B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000029B0
.text$mn:000029B0 ; Attributes: bp-based frame
.text$mn:000029B0
.text$mn:000029B0 ; bool __thiscall NativeLangSpeaker::changeDlgLang(NativeLangSpeaker *this, HWND hWnd, const char *, char *)
.text$mn:000029B0                 public ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z
.text$mn:000029B0 ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z proc near
.text$mn:000029B0                                         ; CODE XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+39Dp
.text$mn:000029B0                                         ; NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+3Dp ...
.text$mn:000029B0
.text$mn:000029B0 var_30          = dword ptr -30h
.text$mn:000029B0 nIDDlgItem      = dword ptr -2Ch
.text$mn:000029B0 var_28          = dword ptr -28h
.text$mn:000029B0 lpString        = dword ptr -24h
.text$mn:000029B0 var_20          = dword ptr -20h
.text$mn:000029B0 var_1C          = dword ptr -1Ch
.text$mn:000029B0 var_18          = dword ptr -18h
.text$mn:000029B0 var_14          = dword ptr -14h
.text$mn:000029B0 var_10          = dword ptr -10h
.text$mn:000029B0 Source          = dword ptr -0Ch
.text$mn:000029B0 var_8           = dword ptr -8
.text$mn:000029B0 var_4           = dword ptr -4
.text$mn:000029B0 hWnd            = dword ptr  8
.text$mn:000029B0 arg_4           = dword ptr  0Ch
.text$mn:000029B0 Dest            = dword ptr  10h
.text$mn:000029B0
.text$mn:000029B0                 push    ebp
.text$mn:000029B1                 mov     ebp, esp
.text$mn:000029B3                 sub     esp, 30h
.text$mn:000029B6                 mov     [ebp+var_8], ecx
.text$mn:000029B9                 cmp     [ebp+Dest], 0
.text$mn:000029BD                 jz      short loc_29CE
.text$mn:000029BF                 mov     eax, 1
.text$mn:000029C4                 imul    ecx, eax, 0
.text$mn:000029C7                 mov     edx, [ebp+Dest]
.text$mn:000029CA                 mov     byte ptr [edx+ecx], 0
.text$mn:000029CE
.text$mn:000029CE loc_29CE:                               ; CODE XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+Dj
.text$mn:000029CE                 mov     eax, [ebp+var_8]
.text$mn:000029D1                 cmp     dword ptr [eax], 0
.text$mn:000029D4                 jnz     short loc_29DD
.text$mn:000029D6                 xor     al, al
.text$mn:000029D8                 jmp     loc_2B5C
.text$mn:000029DD ; ---------------------------------------------------------------------------
.text$mn:000029DD
.text$mn:000029DD loc_29DD:                               ; CODE XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+24j
.text$mn:000029DD                 push    offset $SG169992 ; "Dialog"
.text$mn:000029E2                 mov     ecx, [ebp+var_8]
.text$mn:000029E5                 mov     ecx, [ecx]      ; this
.text$mn:000029E7                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:000029EC                 mov     [ebp+var_4], eax
.text$mn:000029EF                 cmp     [ebp+var_4], 0
.text$mn:000029F3                 jnz     short loc_29FC
.text$mn:000029F5                 xor     al, al
.text$mn:000029F7                 jmp     loc_2B5C
.text$mn:000029FC ; ---------------------------------------------------------------------------
.text$mn:000029FC
.text$mn:000029FC loc_29FC:                               ; CODE XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+43j
.text$mn:000029FC                 mov     edx, [ebp+arg_4]
.text$mn:000029FF                 push    edx             ; char *
.text$mn:00002A00                 mov     eax, [ebp+var_4]
.text$mn:00002A03                 push    eax             ; struct TiXmlNodeA *
.text$mn:00002A04                 mov     ecx, [ebp+var_8] ; this
.text$mn:00002A07                 call    ?searchDlgNode@NativeLangSpeaker@@QAEPAVTiXmlNodeA@@PAV2@PBD@Z ; NativeLangSpeaker::searchDlgNode(TiXmlNodeA *,char const *)
.text$mn:00002A0C                 mov     [ebp+var_4], eax
.text$mn:00002A0F                 cmp     [ebp+var_4], 0
.text$mn:00002A13                 jnz     short loc_2A1C
.text$mn:00002A15                 xor     al, al
.text$mn:00002A17                 jmp     loc_2B5C
.text$mn:00002A1C ; ---------------------------------------------------------------------------
.text$mn:00002A1C
.text$mn:00002A1C loc_2A1C:                               ; CODE XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+63j
.text$mn:00002A1C                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00002A21                 mov     [ebp+var_1C], eax
.text$mn:00002A24                 push    offset $SG169997 ; "title"
.text$mn:00002A29                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002A2C                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00002A31                 mov     ecx, eax        ; this
.text$mn:00002A33                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00002A38                 mov     [ebp+Source], eax
.text$mn:00002A3B                 cmp     [ebp+Source], 0
.text$mn:00002A3F                 jz      short loc_2A9A
.text$mn:00002A41                 mov     ecx, 1
.text$mn:00002A46                 imul    edx, ecx, 0
.text$mn:00002A49                 mov     eax, [ebp+Source]
.text$mn:00002A4C                 movsx   ecx, byte ptr [eax+edx]
.text$mn:00002A50                 test    ecx, ecx
.text$mn:00002A52                 jz      short loc_2A9A
.text$mn:00002A54                 cmp     [ebp+hWnd], 0
.text$mn:00002A58                 jz      short loc_2A9A
.text$mn:00002A5A                 push    0               ; int *
.text$mn:00002A5C                 push    0               ; int *
.text$mn:00002A5E                 push    0FFFFFFFFh      ; int
.text$mn:00002A60                 mov     edx, [ebp+var_8]
.text$mn:00002A63                 mov     eax, [edx+4]
.text$mn:00002A66                 push    eax             ; unsigned int
.text$mn:00002A67                 mov     ecx, [ebp+Source]
.text$mn:00002A6A                 push    ecx             ; char *
.text$mn:00002A6B                 mov     ecx, [ebp+var_1C] ; this
.text$mn:00002A6E                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00002A73                 mov     [ebp+lpString], eax
.text$mn:00002A76                 mov     edx, [ebp+lpString]
.text$mn:00002A79                 push    edx             ; lpString
.text$mn:00002A7A                 mov     eax, [ebp+hWnd]
.text$mn:00002A7D                 push    eax             ; hWnd
.text$mn:00002A7E                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:00002A84                 cmp     [ebp+Dest], 0
.text$mn:00002A88                 jz      short loc_2A9A
.text$mn:00002A8A                 mov     ecx, [ebp+Source]
.text$mn:00002A8D                 push    ecx             ; Source
.text$mn:00002A8E                 mov     edx, [ebp+Dest]
.text$mn:00002A91                 push    edx             ; Dest
.text$mn:00002A92                 call    _strcpy
.text$mn:00002A97                 add     esp, 8
.text$mn:00002A9A
.text$mn:00002A9A loc_2A9A:                               ; CODE XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+8Fj
.text$mn:00002A9A                                         ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+A2j ...
.text$mn:00002A9A                 push    offset $SG170002 ; "Item"
.text$mn:00002A9F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002AA2                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:00002AA7                 mov     [ebp+var_10], eax
.text$mn:00002AAA                 jmp     short loc_2ABC
.text$mn:00002AAC ; ---------------------------------------------------------------------------
.text$mn:00002AAC
.text$mn:00002AAC loc_2AAC:                               ; CODE XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *):loc_2B55j
.text$mn:00002AAC                 push    offset $SG170006 ; "Item"
.text$mn:00002AB1                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002AB4                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:00002AB9                 mov     [ebp+var_10], eax
.text$mn:00002ABC
.text$mn:00002ABC loc_2ABC:                               ; CODE XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+FAj
.text$mn:00002ABC                 cmp     [ebp+var_10], 0
.text$mn:00002AC0                 jz      loc_2B5A
.text$mn:00002AC6                 mov     ecx, [ebp+var_10] ; this
.text$mn:00002AC9                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00002ACE                 mov     [ebp+var_18], eax
.text$mn:00002AD1                 lea     eax, [ebp+nIDDlgItem]
.text$mn:00002AD4                 push    eax             ; int *
.text$mn:00002AD5                 push    offset $SG170010 ; char *
.text$mn:00002ADA                 mov     ecx, [ebp+var_18] ; this
.text$mn:00002ADD                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:00002AE2                 mov     [ebp+var_28], eax
.text$mn:00002AE5                 push    offset $SG170012 ; "name"
.text$mn:00002AEA                 mov     ecx, [ebp+var_18] ; this
.text$mn:00002AED                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00002AF2                 mov     [ebp+var_14], eax
.text$mn:00002AF5                 cmp     [ebp+var_28], 0
.text$mn:00002AF9                 jz      short loc_2B55
.text$mn:00002AFB                 cmp     [ebp+var_14], 0
.text$mn:00002AFF                 jz      short loc_2B55
.text$mn:00002B01                 mov     ecx, 1
.text$mn:00002B06                 imul    edx, ecx, 0
.text$mn:00002B09                 mov     eax, [ebp+var_14]
.text$mn:00002B0C                 movsx   ecx, byte ptr [eax+edx]
.text$mn:00002B10                 test    ecx, ecx
.text$mn:00002B12                 jz      short loc_2B55
.text$mn:00002B14                 mov     edx, [ebp+nIDDlgItem]
.text$mn:00002B17                 push    edx             ; nIDDlgItem
.text$mn:00002B18                 mov     eax, [ebp+hWnd]
.text$mn:00002B1B                 push    eax             ; hDlg
.text$mn:00002B1C                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00002B22                 mov     [ebp+var_20], eax
.text$mn:00002B25                 cmp     [ebp+var_20], 0
.text$mn:00002B29                 jz      short loc_2B55
.text$mn:00002B2B                 push    0               ; int *
.text$mn:00002B2D                 push    0               ; int *
.text$mn:00002B2F                 push    0FFFFFFFFh      ; int
.text$mn:00002B31                 mov     ecx, [ebp+var_8]
.text$mn:00002B34                 mov     edx, [ecx+4]
.text$mn:00002B37                 push    edx             ; unsigned int
.text$mn:00002B38                 mov     eax, [ebp+var_14]
.text$mn:00002B3B                 push    eax             ; char *
.text$mn:00002B3C                 mov     ecx, [ebp+var_1C] ; this
.text$mn:00002B3F                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00002B44                 mov     [ebp+var_30], eax
.text$mn:00002B47                 mov     ecx, [ebp+var_30]
.text$mn:00002B4A                 push    ecx             ; lpString
.text$mn:00002B4B                 mov     edx, [ebp+var_20]
.text$mn:00002B4E                 push    edx             ; hWnd
.text$mn:00002B4F                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:00002B55
.text$mn:00002B55 loc_2B55:                               ; CODE XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+149j
.text$mn:00002B55                                         ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+14Fj ...
.text$mn:00002B55                 jmp     loc_2AAC
.text$mn:00002B5A ; ---------------------------------------------------------------------------
.text$mn:00002B5A
.text$mn:00002B5A loc_2B5A:                               ; CODE XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+110j
.text$mn:00002B5A                 mov     al, 1
.text$mn:00002B5C
.text$mn:00002B5C loc_2B5C:                               ; CODE XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+28j
.text$mn:00002B5C                                         ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+47j ...
.text$mn:00002B5C                 mov     esp, ebp
.text$mn:00002B5E                 pop     ebp
.text$mn:00002B5F                 retn    0Ch
.text$mn:00002B5F ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z endp
.text$mn:00002B5F
.text$mn:00002B5F ; ---------------------------------------------------------------------------
.text$mn:00002B62                 align 10h
.text$mn:00002B70
.text$mn:00002B70 ; =============== S U B R O U T I N E =======================================
.text$mn:00002B70
.text$mn:00002B70 ; Attributes: bp-based frame
.text$mn:00002B70
.text$mn:00002B70 ; void __thiscall NativeLangSpeaker::changeLangTabDrapContextMenu(NativeLangSpeaker *this, HMENU)
.text$mn:00002B70                 public ?changeLangTabDrapContextMenu@NativeLangSpeaker@@QAEXPAUHMENU__@@@Z
.text$mn:00002B70 ?changeLangTabDrapContextMenu@NativeLangSpeaker@@QAEXPAUHMENU__@@@Z proc near
.text$mn:00002B70
.text$mn:00002B70 var_38          = dword ptr -38h
.text$mn:00002B70 var_34          = dword ptr -34h
.text$mn:00002B70 var_30          = dword ptr -30h
.text$mn:00002B70 var_2C          = dword ptr -2Ch
.text$mn:00002B70 uIDNewItem      = dword ptr -28h
.text$mn:00002B70 lpNewItem       = dword ptr -24h
.text$mn:00002B70 var_20          = dword ptr -20h
.text$mn:00002B70 var_1C          = dword ptr -1Ch
.text$mn:00002B70 var_18          = dword ptr -18h
.text$mn:00002B70 var_14          = dword ptr -14h
.text$mn:00002B70 var_10          = dword ptr -10h
.text$mn:00002B70 var_C           = dword ptr -0Ch
.text$mn:00002B70 var_8           = dword ptr -8
.text$mn:00002B70 var_4           = dword ptr -4
.text$mn:00002B70 hMenu           = dword ptr  8
.text$mn:00002B70
.text$mn:00002B70                 push    ebp
.text$mn:00002B71                 mov     ebp, esp
.text$mn:00002B73                 sub     esp, 38h
.text$mn:00002B76                 mov     [ebp+var_10], ecx
.text$mn:00002B79                 mov     [ebp+var_34], 0
.text$mn:00002B80                 mov     [ebp+var_38], 1
.text$mn:00002B87                 mov     eax, [ebp+var_10]
.text$mn:00002B8A                 cmp     dword ptr [eax], 0
.text$mn:00002B8D                 jz      loc_2D05
.text$mn:00002B93                 mov     [ebp+var_C], 0
.text$mn:00002B9A                 mov     [ebp+var_14], 0
.text$mn:00002BA1                 push    offset $SG169547 ; "Menu"
.text$mn:00002BA6                 mov     ecx, [ebp+var_10]
.text$mn:00002BA9                 mov     ecx, [ecx]      ; this
.text$mn:00002BAB                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00002BB0                 mov     [ebp+var_4], eax
.text$mn:00002BB3                 cmp     [ebp+var_4], 0
.text$mn:00002BB7                 jz      short loc_2BC9
.text$mn:00002BB9                 push    offset $SG169549 ; "TabBar"
.text$mn:00002BBE                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002BC1                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00002BC6                 mov     [ebp+var_4], eax
.text$mn:00002BC9
.text$mn:00002BC9 loc_2BC9:                               ; CODE XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+47j
.text$mn:00002BC9                 cmp     [ebp+var_4], 0
.text$mn:00002BCD                 jz      short loc_2C43
.text$mn:00002BCF                 push    offset $SG169552 ; "Item"
.text$mn:00002BD4                 mov     ecx, [ebp+var_4] ; this
.text$mn:00002BD7                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:00002BDC                 mov     [ebp+var_8], eax
.text$mn:00002BDF                 jmp     short loc_2BF1
.text$mn:00002BE1 ; ---------------------------------------------------------------------------
.text$mn:00002BE1
.text$mn:00002BE1 loc_2BE1:                               ; CODE XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *):loc_2C41j
.text$mn:00002BE1                 push    offset $SG169556 ; "Item"
.text$mn:00002BE6                 mov     ecx, [ebp+var_8] ; this
.text$mn:00002BE9                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:00002BEE                 mov     [ebp+var_8], eax
.text$mn:00002BF1
.text$mn:00002BF1 loc_2BF1:                               ; CODE XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+6Fj
.text$mn:00002BF1                 cmp     [ebp+var_8], 0
.text$mn:00002BF5                 jz      short loc_2C43
.text$mn:00002BF7                 mov     ecx, [ebp+var_8] ; this
.text$mn:00002BFA                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00002BFF                 mov     [ebp+var_18], eax
.text$mn:00002C02                 lea     edx, [ebp+var_1C]
.text$mn:00002C05                 push    edx             ; int *
.text$mn:00002C06                 push    offset $SG169559 ; "CMID"
.text$mn:00002C0B                 mov     ecx, [ebp+var_18] ; this
.text$mn:00002C0E                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:00002C13                 cmp     [ebp+var_1C], 5
.text$mn:00002C17                 jnz     short loc_2C2B
.text$mn:00002C19                 push    offset $SG169561 ; "name"
.text$mn:00002C1E                 mov     ecx, [ebp+var_18] ; this
.text$mn:00002C21                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00002C26                 mov     [ebp+var_C], eax
.text$mn:00002C29                 jmp     short loc_2C41
.text$mn:00002C2B ; ---------------------------------------------------------------------------
.text$mn:00002C2B
.text$mn:00002C2B loc_2C2B:                               ; CODE XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+A7j
.text$mn:00002C2B                 cmp     [ebp+var_1C], 6
.text$mn:00002C2F                 jnz     short loc_2C41
.text$mn:00002C31                 push    offset $SG169564 ; "name"
.text$mn:00002C36                 mov     ecx, [ebp+var_18] ; this
.text$mn:00002C39                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00002C3E                 mov     [ebp+var_14], eax
.text$mn:00002C41
.text$mn:00002C41 loc_2C41:                               ; CODE XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+B9j
.text$mn:00002C41                                         ; NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+BFj
.text$mn:00002C41                 jmp     short loc_2BE1
.text$mn:00002C43 ; ---------------------------------------------------------------------------
.text$mn:00002C43
.text$mn:00002C43 loc_2C43:                               ; CODE XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+5Dj
.text$mn:00002C43                                         ; NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+85j
.text$mn:00002C43                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00002C48                 mov     [ebp+var_20], eax
.text$mn:00002C4B                 cmp     [ebp+var_C], 0
.text$mn:00002C4F                 jz      short loc_2CA8
.text$mn:00002C51                 mov     eax, 1
.text$mn:00002C56                 imul    ecx, eax, 0
.text$mn:00002C59                 mov     edx, [ebp+var_C]
.text$mn:00002C5C                 movsx   eax, byte ptr [edx+ecx]
.text$mn:00002C60                 test    eax, eax
.text$mn:00002C62                 jz      short loc_2CA8
.text$mn:00002C64                 push    0               ; int *
.text$mn:00002C66                 push    0               ; int *
.text$mn:00002C68                 push    0FFFFFFFFh      ; int
.text$mn:00002C6A                 mov     ecx, [ebp+var_10]
.text$mn:00002C6D                 mov     edx, [ecx+4]
.text$mn:00002C70                 push    edx             ; unsigned int
.text$mn:00002C71                 mov     eax, [ebp+var_C]
.text$mn:00002C74                 push    eax             ; char *
.text$mn:00002C75                 mov     ecx, [ebp+var_20] ; this
.text$mn:00002C78                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00002C7D                 mov     [ebp+lpNewItem], eax
.text$mn:00002C80                 push    0               ; nPos
.text$mn:00002C82                 mov     ecx, [ebp+hMenu]
.text$mn:00002C85                 push    ecx             ; hMenu
.text$mn:00002C86                 call    dword ptr ds:__imp__GetMenuItemID@8 ; GetMenuItemID(x,x)
.text$mn:00002C8C                 mov     [ebp+uIDNewItem], eax
.text$mn:00002C8F                 mov     edx, [ebp+lpNewItem]
.text$mn:00002C92                 push    edx             ; lpNewItem
.text$mn:00002C93                 mov     eax, [ebp+uIDNewItem]
.text$mn:00002C96                 push    eax             ; uIDNewItem
.text$mn:00002C97                 push    400h            ; uFlags
.text$mn:00002C9C                 push    0               ; uPosition
.text$mn:00002C9E                 mov     ecx, [ebp+hMenu]
.text$mn:00002CA1                 push    ecx             ; hMnu
.text$mn:00002CA2                 call    dword ptr ds:__imp__ModifyMenuW@20 ; ModifyMenuW(x,x,x,x,x)
.text$mn:00002CA8
.text$mn:00002CA8 loc_2CA8:                               ; CODE XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+DFj
.text$mn:00002CA8                                         ; NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+F2j
.text$mn:00002CA8                 cmp     [ebp+var_14], 0
.text$mn:00002CAC                 jz      short loc_2D05
.text$mn:00002CAE                 mov     edx, 1
.text$mn:00002CB3                 imul    eax, edx, 0
.text$mn:00002CB6                 mov     ecx, [ebp+var_14]
.text$mn:00002CB9                 movsx   edx, byte ptr [ecx+eax]
.text$mn:00002CBD                 test    edx, edx
.text$mn:00002CBF                 jz      short loc_2D05
.text$mn:00002CC1                 push    0               ; int *
.text$mn:00002CC3                 push    0               ; int *
.text$mn:00002CC5                 push    0FFFFFFFFh      ; int
.text$mn:00002CC7                 mov     eax, [ebp+var_10]
.text$mn:00002CCA                 mov     ecx, [eax+4]
.text$mn:00002CCD                 push    ecx             ; unsigned int
.text$mn:00002CCE                 mov     edx, [ebp+var_14]
.text$mn:00002CD1                 push    edx             ; char *
.text$mn:00002CD2                 mov     ecx, [ebp+var_20] ; this
.text$mn:00002CD5                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00002CDA                 mov     [ebp+var_2C], eax
.text$mn:00002CDD                 push    1               ; nPos
.text$mn:00002CDF                 mov     eax, [ebp+hMenu]
.text$mn:00002CE2                 push    eax             ; hMenu
.text$mn:00002CE3                 call    dword ptr ds:__imp__GetMenuItemID@8 ; GetMenuItemID(x,x)
.text$mn:00002CE9                 mov     [ebp+var_30], eax
.text$mn:00002CEC                 mov     ecx, [ebp+var_2C]
.text$mn:00002CEF                 push    ecx             ; lpNewItem
.text$mn:00002CF0                 mov     edx, [ebp+var_30]
.text$mn:00002CF3                 push    edx             ; uIDNewItem
.text$mn:00002CF4                 push    400h            ; uFlags
.text$mn:00002CF9                 push    1               ; uPosition
.text$mn:00002CFB                 mov     eax, [ebp+hMenu]
.text$mn:00002CFE                 push    eax             ; hMnu
.text$mn:00002CFF                 call    dword ptr ds:__imp__ModifyMenuW@20 ; ModifyMenuW(x,x,x,x,x)
.text$mn:00002D05
.text$mn:00002D05 loc_2D05:                               ; CODE XREF: NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+1Dj
.text$mn:00002D05                                         ; NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+13Cj ...
.text$mn:00002D05                 mov     esp, ebp
.text$mn:00002D07                 pop     ebp
.text$mn:00002D08                 retn    4
.text$mn:00002D08 ?changeLangTabDrapContextMenu@NativeLangSpeaker@@QAEXPAUHMENU__@@@Z endp
.text$mn:00002D08
.text$mn:00002D08 ; ---------------------------------------------------------------------------
.text$mn:00002D0B                 align 10h
.text$mn:00002D10
.text$mn:00002D10 ; =============== S U B R O U T I N E =======================================
.text$mn:00002D10
.text$mn:00002D10 ; Attributes: bp-based frame
.text$mn:00002D10
.text$mn:00002D10 ; int __stdcall NativeLangSpeaker::getSpecialMenuEntryName(int, char *Str2)
.text$mn:00002D10                 public ?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z
.text$mn:00002D10 ?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z proc near
.text$mn:00002D10
.text$mn:00002D10 var_30          = dword ptr -30h
.text$mn:00002D10 var_2C          = dword ptr -2Ch
.text$mn:00002D10 Str1            = dword ptr -28h
.text$mn:00002D10 var_24          = dword ptr -24h
.text$mn:00002D10 var_20          = dword ptr -20h
.text$mn:00002D10 var_1C          = dword ptr -1Ch
.text$mn:00002D10 var_18          = dword ptr -18h
.text$mn:00002D10 var_14          = dword ptr -14h
.text$mn:00002D10 var_10          = dword ptr -10h
.text$mn:00002D10 var_C           = dword ptr -0Ch
.text$mn:00002D10 var_4           = dword ptr -4
.text$mn:00002D10 arg_0           = dword ptr  8
.text$mn:00002D10 Str2            = dword ptr  0Ch
.text$mn:00002D10
.text$mn:00002D10                 push    ebp
.text$mn:00002D11                 mov     ebp, esp
.text$mn:00002D13                 push    0FFFFFFFFh
.text$mn:00002D15                 push    offset __ehhandler$?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z
.text$mn:00002D1A                 mov     eax, large fs:0
.text$mn:00002D20                 push    eax
.text$mn:00002D21                 sub     esp, 24h
.text$mn:00002D24                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002D29                 xor     eax, ebp
.text$mn:00002D2B                 push    eax
.text$mn:00002D2C                 lea     eax, [ebp+var_C]
.text$mn:00002D2F                 mov     large fs:0, eax
.text$mn:00002D35                 mov     [ebp+var_1C], ecx
.text$mn:00002D38                 mov     [ebp+var_10], 0
.text$mn:00002D3F                 mov     eax, [ebp+var_1C]
.text$mn:00002D42                 cmp     dword ptr [eax], 0
.text$mn:00002D45                 jnz     short loc_2D6C
.text$mn:00002D47                 push    offset $SG169348 ; Str
.text$mn:00002D4C                 mov     ecx, [ebp+arg_0]
.text$mn:00002D4F                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002D54                 mov     [ebp+var_4], 0
.text$mn:00002D5B                 mov     ecx, [ebp+var_10]
.text$mn:00002D5E                 or      ecx, 1
.text$mn:00002D61                 mov     [ebp+var_10], ecx
.text$mn:00002D64                 mov     eax, [ebp+arg_0]
.text$mn:00002D67                 jmp     loc_2EF4
.text$mn:00002D6C ; ---------------------------------------------------------------------------
.text$mn:00002D6C
.text$mn:00002D6C loc_2D6C:                               ; CODE XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+35j
.text$mn:00002D6C                 push    offset $SG169350 ; "Menu"
.text$mn:00002D71                 mov     edx, [ebp+var_1C]
.text$mn:00002D74                 mov     ecx, [edx]      ; this
.text$mn:00002D76                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00002D7B                 mov     [ebp+var_14], eax
.text$mn:00002D7E                 cmp     [ebp+var_14], 0
.text$mn:00002D82                 jnz     short loc_2DA9
.text$mn:00002D84                 push    offset $SG169352 ; Str
.text$mn:00002D89                 mov     ecx, [ebp+arg_0]
.text$mn:00002D8C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002D91                 mov     [ebp+var_4], 0
.text$mn:00002D98                 mov     eax, [ebp+var_10]
.text$mn:00002D9B                 or      eax, 1
.text$mn:00002D9E                 mov     [ebp+var_10], eax
.text$mn:00002DA1                 mov     eax, [ebp+arg_0]
.text$mn:00002DA4                 jmp     loc_2EF4
.text$mn:00002DA9 ; ---------------------------------------------------------------------------
.text$mn:00002DA9
.text$mn:00002DA9 loc_2DA9:                               ; CODE XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+72j
.text$mn:00002DA9                 push    offset $SG169353 ; "Main"
.text$mn:00002DAE                 mov     ecx, [ebp+var_14] ; this
.text$mn:00002DB1                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00002DB6                 mov     [ebp+var_14], eax
.text$mn:00002DB9                 cmp     [ebp+var_14], 0
.text$mn:00002DBD                 jnz     short loc_2DE4
.text$mn:00002DBF                 push    offset $SG169355 ; Str
.text$mn:00002DC4                 mov     ecx, [ebp+arg_0]
.text$mn:00002DC7                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002DCC                 mov     [ebp+var_4], 0
.text$mn:00002DD3                 mov     ecx, [ebp+var_10]
.text$mn:00002DD6                 or      ecx, 1
.text$mn:00002DD9                 mov     [ebp+var_10], ecx
.text$mn:00002DDC                 mov     eax, [ebp+arg_0]
.text$mn:00002DDF                 jmp     loc_2EF4
.text$mn:00002DE4 ; ---------------------------------------------------------------------------
.text$mn:00002DE4
.text$mn:00002DE4 loc_2DE4:                               ; CODE XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+ADj
.text$mn:00002DE4                 push    offset $SG169357 ; "Entries"
.text$mn:00002DE9                 mov     ecx, [ebp+var_14] ; this
.text$mn:00002DEC                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00002DF1                 mov     [ebp+var_20], eax
.text$mn:00002DF4                 cmp     [ebp+var_20], 0
.text$mn:00002DF8                 jnz     short loc_2E1F
.text$mn:00002DFA                 push    offset $SG169359 ; Str
.text$mn:00002DFF                 mov     ecx, [ebp+arg_0]
.text$mn:00002E02                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002E07                 mov     [ebp+var_4], 0
.text$mn:00002E0E                 mov     edx, [ebp+var_10]
.text$mn:00002E11                 or      edx, 1
.text$mn:00002E14                 mov     [ebp+var_10], edx
.text$mn:00002E17                 mov     eax, [ebp+arg_0]
.text$mn:00002E1A                 jmp     loc_2EF4
.text$mn:00002E1F ; ---------------------------------------------------------------------------
.text$mn:00002E1F
.text$mn:00002E1F loc_2E1F:                               ; CODE XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+E8j
.text$mn:00002E1F                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00002E24                 mov     [ebp+var_30], eax
.text$mn:00002E27                 push    offset $SG169362 ; "Item"
.text$mn:00002E2C                 mov     ecx, [ebp+var_20] ; this
.text$mn:00002E2F                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:00002E34                 mov     [ebp+var_18], eax
.text$mn:00002E37                 jmp     short loc_2E49
.text$mn:00002E39 ; ---------------------------------------------------------------------------
.text$mn:00002E39
.text$mn:00002E39 loc_2E39:                               ; CODE XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *):loc_2ECFj
.text$mn:00002E39                 push    offset $SG169366 ; "Item"
.text$mn:00002E3E                 mov     ecx, [ebp+var_18] ; this
.text$mn:00002E41                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:00002E46                 mov     [ebp+var_18], eax
.text$mn:00002E49
.text$mn:00002E49 loc_2E49:                               ; CODE XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+127j
.text$mn:00002E49                 cmp     [ebp+var_18], 0
.text$mn:00002E4D                 jz      loc_2ED4
.text$mn:00002E53                 mov     ecx, [ebp+var_18] ; this
.text$mn:00002E56                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00002E5B                 mov     [ebp+var_24], eax
.text$mn:00002E5E                 push    offset $SG169369 ; "idName"
.text$mn:00002E63                 mov     ecx, [ebp+var_24] ; this
.text$mn:00002E66                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00002E6B                 mov     [ebp+Str1], eax
.text$mn:00002E6E                 cmp     [ebp+Str1], 0
.text$mn:00002E72                 jz      short loc_2ECF
.text$mn:00002E74                 push    offset $SG169372 ; "name"
.text$mn:00002E79                 mov     ecx, [ebp+var_24] ; this
.text$mn:00002E7C                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00002E81                 mov     [ebp+var_2C], eax
.text$mn:00002E84                 mov     eax, [ebp+Str2]
.text$mn:00002E87                 push    eax             ; Str2
.text$mn:00002E88                 mov     ecx, [ebp+Str1]
.text$mn:00002E8B                 push    ecx             ; Str1
.text$mn:00002E8C                 call    _strcmp
.text$mn:00002E91                 add     esp, 8
.text$mn:00002E94                 test    eax, eax
.text$mn:00002E96                 jnz     short loc_2ECF
.text$mn:00002E98                 push    0               ; int *
.text$mn:00002E9A                 push    0               ; int *
.text$mn:00002E9C                 push    0FFFFFFFFh      ; int
.text$mn:00002E9E                 mov     edx, [ebp+var_1C]
.text$mn:00002EA1                 mov     eax, [edx+4]
.text$mn:00002EA4                 push    eax             ; unsigned int
.text$mn:00002EA5                 mov     ecx, [ebp+var_2C]
.text$mn:00002EA8                 push    ecx             ; char *
.text$mn:00002EA9                 mov     ecx, [ebp+var_30] ; this
.text$mn:00002EAC                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00002EB1                 push    eax             ; Str
.text$mn:00002EB2                 mov     ecx, [ebp+arg_0]
.text$mn:00002EB5                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002EBA                 mov     [ebp+var_4], 0
.text$mn:00002EC1                 mov     edx, [ebp+var_10]
.text$mn:00002EC4                 or      edx, 1
.text$mn:00002EC7                 mov     [ebp+var_10], edx
.text$mn:00002ECA                 mov     eax, [ebp+arg_0]
.text$mn:00002ECD                 jmp     short loc_2EF4
.text$mn:00002ECF ; ---------------------------------------------------------------------------
.text$mn:00002ECF
.text$mn:00002ECF loc_2ECF:                               ; CODE XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+162j
.text$mn:00002ECF                                         ; NativeLangSpeaker::getSpecialMenuEntryName(char const *)+186j
.text$mn:00002ECF                 jmp     loc_2E39
.text$mn:00002ED4 ; ---------------------------------------------------------------------------
.text$mn:00002ED4
.text$mn:00002ED4 loc_2ED4:                               ; CODE XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+13Dj
.text$mn:00002ED4                 push    offset $SG169374 ; Str
.text$mn:00002ED9                 mov     ecx, [ebp+arg_0]
.text$mn:00002EDC                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002EE1                 mov     [ebp+var_4], 0
.text$mn:00002EE8                 mov     eax, [ebp+var_10]
.text$mn:00002EEB                 or      eax, 1
.text$mn:00002EEE                 mov     [ebp+var_10], eax
.text$mn:00002EF1                 mov     eax, [ebp+arg_0]
.text$mn:00002EF4
.text$mn:00002EF4 loc_2EF4:                               ; CODE XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+57j
.text$mn:00002EF4                                         ; NativeLangSpeaker::getSpecialMenuEntryName(char const *)+94j ...
.text$mn:00002EF4                 mov     ecx, [ebp+var_C]
.text$mn:00002EF7                 mov     large fs:0, ecx
.text$mn:00002EFE                 pop     ecx
.text$mn:00002EFF                 mov     esp, ebp
.text$mn:00002F01                 pop     ebp
.text$mn:00002F02                 retn    8
.text$mn:00002F02 ?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z endp
.text$mn:00002F02
.text$mn:00002F02 ; ---------------------------------------------------------------------------
.text$mn:00002F05                 align 10h
.text$mn:00002F10
.text$mn:00002F10 ; =============== S U B R O U T I N E =======================================
.text$mn:00002F10
.text$mn:00002F10 ; Attributes: bp-based frame
.text$mn:00002F10
.text$mn:00002F10 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __thiscall NativeLangSpeaker::getNativeLangMenuString(int)
.text$mn:00002F10                 public ?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z
.text$mn:00002F10 ?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z proc near
.text$mn:00002F10
.text$mn:00002F10 var_2C          = dword ptr -2Ch
.text$mn:00002F10 var_28          = dword ptr -28h
.text$mn:00002F10 var_24          = dword ptr -24h
.text$mn:00002F10 var_20          = dword ptr -20h
.text$mn:00002F10 var_1C          = dword ptr -1Ch
.text$mn:00002F10 var_18          = dword ptr -18h
.text$mn:00002F10 var_14          = dword ptr -14h
.text$mn:00002F10 var_10          = dword ptr -10h
.text$mn:00002F10 var_C           = dword ptr -0Ch
.text$mn:00002F10 var_4           = dword ptr -4
.text$mn:00002F10 arg_0           = dword ptr  8
.text$mn:00002F10 arg_4           = dword ptr  0Ch
.text$mn:00002F10
.text$mn:00002F10                 push    ebp
.text$mn:00002F11                 mov     ebp, esp
.text$mn:00002F13                 push    0FFFFFFFFh
.text$mn:00002F15                 push    offset __ehhandler$?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z
.text$mn:00002F1A                 mov     eax, large fs:0
.text$mn:00002F20                 push    eax
.text$mn:00002F21                 sub     esp, 20h
.text$mn:00002F24                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00002F29                 xor     eax, ebp
.text$mn:00002F2B                 push    eax
.text$mn:00002F2C                 lea     eax, [ebp+var_C]
.text$mn:00002F2F                 mov     large fs:0, eax
.text$mn:00002F35                 mov     [ebp+var_1C], ecx
.text$mn:00002F38                 mov     [ebp+var_10], 0
.text$mn:00002F3F                 mov     eax, [ebp+var_1C]
.text$mn:00002F42                 cmp     dword ptr [eax], 0
.text$mn:00002F45                 jnz     short loc_2F6C
.text$mn:00002F47                 push    offset $SG169381 ; Str
.text$mn:00002F4C                 mov     ecx, [ebp+arg_0]
.text$mn:00002F4F                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002F54                 mov     [ebp+var_4], 0
.text$mn:00002F5B                 mov     ecx, [ebp+var_10]
.text$mn:00002F5E                 or      ecx, 1
.text$mn:00002F61                 mov     [ebp+var_10], ecx
.text$mn:00002F64                 mov     eax, [ebp+arg_0]
.text$mn:00002F67                 jmp     loc_30E9
.text$mn:00002F6C ; ---------------------------------------------------------------------------
.text$mn:00002F6C
.text$mn:00002F6C loc_2F6C:                               ; CODE XREF: NativeLangSpeaker::getNativeLangMenuString(int)+35j
.text$mn:00002F6C                 push    offset $SG169383 ; "Menu"
.text$mn:00002F71                 mov     edx, [ebp+var_1C]
.text$mn:00002F74                 mov     ecx, [edx]      ; this
.text$mn:00002F76                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00002F7B                 mov     [ebp+var_14], eax
.text$mn:00002F7E                 cmp     [ebp+var_14], 0
.text$mn:00002F82                 jnz     short loc_2FA9
.text$mn:00002F84                 push    offset $SG169385 ; Str
.text$mn:00002F89                 mov     ecx, [ebp+arg_0]
.text$mn:00002F8C                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002F91                 mov     [ebp+var_4], 0
.text$mn:00002F98                 mov     eax, [ebp+var_10]
.text$mn:00002F9B                 or      eax, 1
.text$mn:00002F9E                 mov     [ebp+var_10], eax
.text$mn:00002FA1                 mov     eax, [ebp+arg_0]
.text$mn:00002FA4                 jmp     loc_30E9
.text$mn:00002FA9 ; ---------------------------------------------------------------------------
.text$mn:00002FA9
.text$mn:00002FA9 loc_2FA9:                               ; CODE XREF: NativeLangSpeaker::getNativeLangMenuString(int)+72j
.text$mn:00002FA9                 push    offset $SG169386 ; "Main"
.text$mn:00002FAE                 mov     ecx, [ebp+var_14] ; this
.text$mn:00002FB1                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00002FB6                 mov     [ebp+var_14], eax
.text$mn:00002FB9                 cmp     [ebp+var_14], 0
.text$mn:00002FBD                 jnz     short loc_2FE4
.text$mn:00002FBF                 push    offset $SG169388 ; Str
.text$mn:00002FC4                 mov     ecx, [ebp+arg_0]
.text$mn:00002FC7                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00002FCC                 mov     [ebp+var_4], 0
.text$mn:00002FD3                 mov     ecx, [ebp+var_10]
.text$mn:00002FD6                 or      ecx, 1
.text$mn:00002FD9                 mov     [ebp+var_10], ecx
.text$mn:00002FDC                 mov     eax, [ebp+arg_0]
.text$mn:00002FDF                 jmp     loc_30E9
.text$mn:00002FE4 ; ---------------------------------------------------------------------------
.text$mn:00002FE4
.text$mn:00002FE4 loc_2FE4:                               ; CODE XREF: NativeLangSpeaker::getNativeLangMenuString(int)+ADj
.text$mn:00002FE4                 push    offset $SG169389 ; "Commands"
.text$mn:00002FE9                 mov     ecx, [ebp+var_14] ; this
.text$mn:00002FEC                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00002FF1                 mov     [ebp+var_14], eax
.text$mn:00002FF4                 cmp     [ebp+var_14], 0
.text$mn:00002FF8                 jnz     short loc_301F
.text$mn:00002FFA                 push    offset $SG169391 ; Str
.text$mn:00002FFF                 mov     ecx, [ebp+arg_0]
.text$mn:00003002                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00003007                 mov     [ebp+var_4], 0
.text$mn:0000300E                 mov     edx, [ebp+var_10]
.text$mn:00003011                 or      edx, 1
.text$mn:00003014                 mov     [ebp+var_10], edx
.text$mn:00003017                 mov     eax, [ebp+arg_0]
.text$mn:0000301A                 jmp     loc_30E9
.text$mn:0000301F ; ---------------------------------------------------------------------------
.text$mn:0000301F
.text$mn:0000301F loc_301F:                               ; CODE XREF: NativeLangSpeaker::getNativeLangMenuString(int)+E8j
.text$mn:0000301F                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00003024                 mov     [ebp+var_2C], eax
.text$mn:00003027                 push    offset $SG169394 ; "Item"
.text$mn:0000302C                 mov     ecx, [ebp+var_14] ; this
.text$mn:0000302F                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:00003034                 mov     [ebp+var_18], eax
.text$mn:00003037                 jmp     short loc_3049
.text$mn:00003039 ; ---------------------------------------------------------------------------
.text$mn:00003039
.text$mn:00003039 loc_3039:                               ; CODE XREF: NativeLangSpeaker::getNativeLangMenuString(int):loc_30C4j
.text$mn:00003039                 push    offset $SG169398 ; "Item"
.text$mn:0000303E                 mov     ecx, [ebp+var_18] ; this
.text$mn:00003041                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:00003046                 mov     [ebp+var_18], eax
.text$mn:00003049
.text$mn:00003049 loc_3049:                               ; CODE XREF: NativeLangSpeaker::getNativeLangMenuString(int)+127j
.text$mn:00003049                 cmp     [ebp+var_18], 0
.text$mn:0000304D                 jz      short loc_30C9
.text$mn:0000304F                 mov     ecx, [ebp+var_18] ; this
.text$mn:00003052                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00003057                 mov     [ebp+var_20], eax
.text$mn:0000305A                 lea     eax, [ebp+var_28]
.text$mn:0000305D                 push    eax             ; int *
.text$mn:0000305E                 push    offset $SG169402 ; char *
.text$mn:00003063                 mov     ecx, [ebp+var_20] ; this
.text$mn:00003066                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:0000306B                 test    eax, eax
.text$mn:0000306D                 jz      short loc_30C4
.text$mn:0000306F                 mov     ecx, [ebp+var_28]
.text$mn:00003072                 cmp     ecx, [ebp+arg_4]
.text$mn:00003075                 jnz     short loc_30C4
.text$mn:00003077                 push    offset $SG169404 ; "name"
.text$mn:0000307C                 mov     ecx, [ebp+var_20] ; this
.text$mn:0000307F                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00003084                 mov     [ebp+var_24], eax
.text$mn:00003087                 cmp     [ebp+var_24], 0
.text$mn:0000308B                 jz      short loc_30C4
.text$mn:0000308D                 push    0               ; int *
.text$mn:0000308F                 push    0               ; int *
.text$mn:00003091                 push    0FFFFFFFFh      ; int
.text$mn:00003093                 mov     edx, [ebp+var_1C]
.text$mn:00003096                 mov     eax, [edx+4]
.text$mn:00003099                 push    eax             ; unsigned int
.text$mn:0000309A                 mov     ecx, [ebp+var_24]
.text$mn:0000309D                 push    ecx             ; char *
.text$mn:0000309E                 mov     ecx, [ebp+var_2C] ; this
.text$mn:000030A1                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:000030A6                 push    eax             ; Str
.text$mn:000030A7                 mov     ecx, [ebp+arg_0]
.text$mn:000030AA                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000030AF                 mov     [ebp+var_4], 0
.text$mn:000030B6                 mov     edx, [ebp+var_10]
.text$mn:000030B9                 or      edx, 1
.text$mn:000030BC                 mov     [ebp+var_10], edx
.text$mn:000030BF                 mov     eax, [ebp+arg_0]
.text$mn:000030C2                 jmp     short loc_30E9
.text$mn:000030C4 ; ---------------------------------------------------------------------------
.text$mn:000030C4
.text$mn:000030C4 loc_30C4:                               ; CODE XREF: NativeLangSpeaker::getNativeLangMenuString(int)+15Dj
.text$mn:000030C4                                         ; NativeLangSpeaker::getNativeLangMenuString(int)+165j ...
.text$mn:000030C4                 jmp     loc_3039
.text$mn:000030C9 ; ---------------------------------------------------------------------------
.text$mn:000030C9
.text$mn:000030C9 loc_30C9:                               ; CODE XREF: NativeLangSpeaker::getNativeLangMenuString(int)+13Dj
.text$mn:000030C9                 push    offset $SG169406 ; Str
.text$mn:000030CE                 mov     ecx, [ebp+arg_0]
.text$mn:000030D1                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000030D6                 mov     [ebp+var_4], 0
.text$mn:000030DD                 mov     eax, [ebp+var_10]
.text$mn:000030E0                 or      eax, 1
.text$mn:000030E3                 mov     [ebp+var_10], eax
.text$mn:000030E6                 mov     eax, [ebp+arg_0]
.text$mn:000030E9
.text$mn:000030E9 loc_30E9:                               ; CODE XREF: NativeLangSpeaker::getNativeLangMenuString(int)+57j
.text$mn:000030E9                                         ; NativeLangSpeaker::getNativeLangMenuString(int)+94j ...
.text$mn:000030E9                 mov     ecx, [ebp+var_C]
.text$mn:000030EC                 mov     large fs:0, ecx
.text$mn:000030F3                 pop     ecx
.text$mn:000030F4                 mov     esp, ebp
.text$mn:000030F6                 pop     ebp
.text$mn:000030F7                 retn    8
.text$mn:000030F7 ?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z endp
.text$mn:000030F7
.text$mn:000030F7 ; ---------------------------------------------------------------------------
.text$mn:000030FA                 align 10h
.text$mn:00003100
.text$mn:00003100 ; =============== S U B R O U T I N E =======================================
.text$mn:00003100
.text$mn:00003100 ; Attributes: bp-based frame
.text$mn:00003100
.text$mn:00003100 ; int __stdcall NativeLangSpeaker::changeMenuLang(HMENU hMnu, int, int)
.text$mn:00003100                 public ?changeMenuLang@NativeLangSpeaker@@QAEXPAUHMENU__@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@1@Z
.text$mn:00003100 ?changeMenuLang@NativeLangSpeaker@@QAEXPAUHMENU__@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@1@Z proc near
.text$mn:00003100
.text$mn:00003100 var_8C          = dword ptr -8Ch
.text$mn:00003100 lpNewItem       = dword ptr -88h
.text$mn:00003100 var_84          = dword ptr -84h
.text$mn:00003100 var_80          = dword ptr -80h
.text$mn:00003100 nPos            = dword ptr -7Ch
.text$mn:00003100 var_78          = dword ptr -78h
.text$mn:00003100 var_74          = dword ptr -74h
.text$mn:00003100 Str             = dword ptr -70h
.text$mn:00003100 var_6C          = dword ptr -6Ch
.text$mn:00003100 var_68          = dword ptr -68h
.text$mn:00003100 var_64          = dword ptr -64h
.text$mn:00003100 Str2            = dword ptr -60h
.text$mn:00003100 var_5C          = dword ptr -5Ch
.text$mn:00003100 var_58          = dword ptr -58h
.text$mn:00003100 var_54          = dword ptr -54h
.text$mn:00003100 var_50          = dword ptr -50h
.text$mn:00003100 var_4C          = dword ptr -4Ch
.text$mn:00003100 var_48          = dword ptr -48h
.text$mn:00003100 var_44          = dword ptr -44h
.text$mn:00003100 var_40          = dword ptr -40h
.text$mn:00003100 var_3C          = dword ptr -3Ch
.text$mn:00003100 var_38          = dword ptr -38h
.text$mn:00003100 uPosition       = dword ptr -34h
.text$mn:00003100 var_30          = dword ptr -30h
.text$mn:00003100 hMenu           = dword ptr -2Ch
.text$mn:00003100 var_28          = dword ptr -28h
.text$mn:00003100 var_24          = dword ptr -24h
.text$mn:00003100 var_20          = dword ptr -20h
.text$mn:00003100 var_1C          = dword ptr -1Ch
.text$mn:00003100 var_18          = dword ptr -18h
.text$mn:00003100 var_14          = dword ptr -14h
.text$mn:00003100 Str1            = dword ptr -10h
.text$mn:00003100 var_C           = dword ptr -0Ch
.text$mn:00003100 var_8           = dword ptr -8
.text$mn:00003100 var_4           = dword ptr -4
.text$mn:00003100 hMnu            = dword ptr  8
.text$mn:00003100 arg_4           = dword ptr  0Ch
.text$mn:00003100 arg_8           = dword ptr  10h
.text$mn:00003100
.text$mn:00003100                 push    ebp
.text$mn:00003101                 mov     ebp, esp
.text$mn:00003103                 sub     esp, 8Ch
.text$mn:00003109                 mov     [ebp+var_4], ecx
.text$mn:0000310C                 mov     eax, [ebp+var_4]
.text$mn:0000310F                 cmp     dword ptr [eax], 0
.text$mn:00003112                 jnz     short loc_3119
.text$mn:00003114                 jmp     loc_34CC
.text$mn:00003119 ; ---------------------------------------------------------------------------
.text$mn:00003119
.text$mn:00003119 loc_3119:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+12j
.text$mn:00003119                 push    offset $SG169425 ; "Menu"
.text$mn:0000311E                 mov     ecx, [ebp+var_4]
.text$mn:00003121                 mov     ecx, [ecx]      ; this
.text$mn:00003123                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00003128                 mov     [ebp+var_8], eax
.text$mn:0000312B                 cmp     [ebp+var_8], 0
.text$mn:0000312F                 jnz     short loc_3136
.text$mn:00003131                 jmp     loc_34CC
.text$mn:00003136 ; ---------------------------------------------------------------------------
.text$mn:00003136
.text$mn:00003136 loc_3136:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+2Fj
.text$mn:00003136                 push    offset $SG169427 ; "Main"
.text$mn:0000313B                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000313E                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00003143                 mov     [ebp+var_8], eax
.text$mn:00003146                 cmp     [ebp+var_8], 0
.text$mn:0000314A                 jnz     short loc_3151
.text$mn:0000314C                 jmp     loc_34CC
.text$mn:00003151 ; ---------------------------------------------------------------------------
.text$mn:00003151
.text$mn:00003151 loc_3151:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+4Aj
.text$mn:00003151                 push    offset $SG169430 ; "Entries"
.text$mn:00003156                 mov     ecx, [ebp+var_8] ; this
.text$mn:00003159                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:0000315E                 mov     [ebp+var_4C], eax
.text$mn:00003161                 cmp     [ebp+var_4C], 0
.text$mn:00003165                 jnz     short loc_316C
.text$mn:00003167                 jmp     loc_34CC
.text$mn:0000316C ; ---------------------------------------------------------------------------
.text$mn:0000316C
.text$mn:0000316C loc_316C:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+65j
.text$mn:0000316C                 mov     [ebp+Str1], 0
.text$mn:00003173                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00003178                 mov     [ebp+var_C], eax
.text$mn:0000317B                 push    offset $SG169435 ; "Item"
.text$mn:00003180                 mov     ecx, [ebp+var_4C] ; this
.text$mn:00003183                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:00003188                 mov     [ebp+var_1C], eax
.text$mn:0000318B                 jmp     short loc_319D
.text$mn:0000318D ; ---------------------------------------------------------------------------
.text$mn:0000318D
.text$mn:0000318D loc_318D:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_32D7j
.text$mn:0000318D                 push    offset $SG169439 ; "Item"
.text$mn:00003192                 mov     ecx, [ebp+var_1C] ; this
.text$mn:00003195                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:0000319A                 mov     [ebp+var_1C], eax
.text$mn:0000319D
.text$mn:0000319D loc_319D:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+8Bj
.text$mn:0000319D                 cmp     [ebp+var_1C], 0
.text$mn:000031A1                 jz      loc_32DC
.text$mn:000031A7                 mov     ecx, [ebp+var_1C] ; this
.text$mn:000031AA                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:000031AF                 mov     [ebp+var_20], eax
.text$mn:000031B2                 push    offset $SG169442 ; "menuId"
.text$mn:000031B7                 mov     ecx, [ebp+var_20] ; this
.text$mn:000031BA                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:000031BF                 mov     [ebp+Str2], eax
.text$mn:000031C2                 cmp     [ebp+Str2], 0
.text$mn:000031C6                 jz      short loc_3231
.text$mn:000031C8                 mov     edx, [ebp+Str2]
.text$mn:000031CB                 push    edx             ; Str2
.text$mn:000031CC                 call    ?getMenuPosition@@YAAAVMenuPosition@@PBD@Z ; getMenuPosition(char const *)
.text$mn:000031D1                 add     esp, 4
.text$mn:000031D4                 mov     [ebp+var_5C], eax
.text$mn:000031D7                 mov     eax, [ebp+var_5C]
.text$mn:000031DA                 cmp     dword ptr [eax], 0FFFFFFFFh
.text$mn:000031DD                 jz      short loc_322C
.text$mn:000031DF                 push    offset $SG169447 ; "name"
.text$mn:000031E4                 mov     ecx, [ebp+var_20] ; this
.text$mn:000031E7                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:000031EC                 mov     [ebp+var_64], eax
.text$mn:000031EF                 push    0               ; int *
.text$mn:000031F1                 push    0               ; int *
.text$mn:000031F3                 push    0FFFFFFFFh      ; int
.text$mn:000031F5                 mov     ecx, [ebp+var_4]
.text$mn:000031F8                 mov     edx, [ecx+4]
.text$mn:000031FB                 push    edx             ; unsigned int
.text$mn:000031FC                 mov     eax, [ebp+var_64]
.text$mn:000031FF                 push    eax             ; char *
.text$mn:00003200                 mov     ecx, [ebp+var_C] ; this
.text$mn:00003203                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00003208                 mov     [ebp+lpNewItem], eax
.text$mn:0000320E                 mov     ecx, [ebp+lpNewItem]
.text$mn:00003214                 push    ecx             ; lpNewItem
.text$mn:00003215                 push    0               ; uIDNewItem
.text$mn:00003217                 push    400h            ; uFlags
.text$mn:0000321C                 mov     edx, [ebp+var_5C]
.text$mn:0000321F                 mov     eax, [edx]
.text$mn:00003221                 push    eax             ; uPosition
.text$mn:00003222                 mov     ecx, [ebp+hMnu]
.text$mn:00003225                 push    ecx             ; hMnu
.text$mn:00003226                 call    dword ptr ds:__imp__ModifyMenuW@20 ; ModifyMenuW(x,x,x,x,x)
.text$mn:0000322C
.text$mn:0000322C loc_322C:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+DDj
.text$mn:0000322C                 jmp     loc_32D7
.text$mn:00003231 ; ---------------------------------------------------------------------------
.text$mn:00003231
.text$mn:00003231 loc_3231:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+C6j
.text$mn:00003231                 push    offset $SG169450 ; "idName"
.text$mn:00003236                 mov     ecx, [ebp+var_20] ; this
.text$mn:00003239                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:0000323E                 mov     [ebp+Str1], eax
.text$mn:00003241                 cmp     [ebp+Str1], 0
.text$mn:00003245                 jz      loc_32D7
.text$mn:0000324B                 push    offset $SG169453 ; "name"
.text$mn:00003250                 mov     ecx, [ebp+var_20] ; this
.text$mn:00003253                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00003258                 mov     [ebp+var_44], eax
.text$mn:0000325B                 push    offset $SG169455 ; "Plugins"
.text$mn:00003260                 mov     edx, [ebp+Str1]
.text$mn:00003263                 push    edx             ; Str1
.text$mn:00003264                 call    _strcmp
.text$mn:00003269                 add     esp, 8
.text$mn:0000326C                 test    eax, eax
.text$mn:0000326E                 jnz     short loc_329A
.text$mn:00003270                 push    0               ; int *
.text$mn:00003272                 push    0               ; int *
.text$mn:00003274                 push    0FFFFFFFFh      ; int
.text$mn:00003276                 mov     eax, [ebp+var_4]
.text$mn:00003279                 mov     ecx, [eax+4]
.text$mn:0000327C                 push    ecx             ; unsigned int
.text$mn:0000327D                 mov     edx, [ebp+var_44]
.text$mn:00003280                 push    edx             ; char *
.text$mn:00003281                 mov     ecx, [ebp+var_C] ; this
.text$mn:00003284                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00003289                 mov     [ebp+Str], eax
.text$mn:0000328C                 mov     eax, [ebp+Str]
.text$mn:0000328F                 push    eax             ; Str
.text$mn:00003290                 mov     ecx, [ebp+arg_4]
.text$mn:00003293                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00003298                 jmp     short loc_32D7
.text$mn:0000329A ; ---------------------------------------------------------------------------
.text$mn:0000329A
.text$mn:0000329A loc_329A:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+16Ej
.text$mn:0000329A                 push    offset $SG169459 ; "Window"
.text$mn:0000329F                 mov     ecx, [ebp+Str1]
.text$mn:000032A2                 push    ecx             ; Str1
.text$mn:000032A3                 call    _strcmp
.text$mn:000032A8                 add     esp, 8
.text$mn:000032AB                 test    eax, eax
.text$mn:000032AD                 jnz     short loc_32D7
.text$mn:000032AF                 push    0               ; int *
.text$mn:000032B1                 push    0               ; int *
.text$mn:000032B3                 push    0FFFFFFFFh      ; int
.text$mn:000032B5                 mov     edx, [ebp+var_4]
.text$mn:000032B8                 mov     eax, [edx+4]
.text$mn:000032BB                 push    eax             ; unsigned int
.text$mn:000032BC                 mov     ecx, [ebp+var_44]
.text$mn:000032BF                 push    ecx             ; char *
.text$mn:000032C0                 mov     ecx, [ebp+var_C] ; this
.text$mn:000032C3                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:000032C8                 mov     [ebp+var_80], eax
.text$mn:000032CB                 mov     edx, [ebp+var_80]
.text$mn:000032CE                 push    edx             ; Str
.text$mn:000032CF                 mov     ecx, [ebp+arg_8]
.text$mn:000032D2                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:000032D7
.text$mn:000032D7 loc_32D7:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_322Cj
.text$mn:000032D7                                         ; NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+145j ...
.text$mn:000032D7                 jmp     loc_318D
.text$mn:000032DC ; ---------------------------------------------------------------------------
.text$mn:000032DC
.text$mn:000032DC loc_32DC:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+A1j
.text$mn:000032DC                 push    offset $SG169462 ; "Commands"
.text$mn:000032E1                 mov     ecx, [ebp+var_8] ; this
.text$mn:000032E4                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:000032E9                 mov     [ebp+var_78], eax
.text$mn:000032EC                 push    offset $SG169464 ; "Item"
.text$mn:000032F1                 mov     ecx, [ebp+var_78] ; this
.text$mn:000032F4                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:000032F9                 mov     [ebp+var_18], eax
.text$mn:000032FC                 jmp     short loc_330E
.text$mn:000032FE ; ---------------------------------------------------------------------------
.text$mn:000032FE
.text$mn:000032FE loc_32FE:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+274j
.text$mn:000032FE                 push    offset $SG169468 ; "Item"
.text$mn:00003303                 mov     ecx, [ebp+var_18] ; this
.text$mn:00003306                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:0000330B                 mov     [ebp+var_18], eax
.text$mn:0000330E
.text$mn:0000330E loc_330E:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+1FCj
.text$mn:0000330E                 cmp     [ebp+var_18], 0
.text$mn:00003312                 jz      short loc_3376
.text$mn:00003314                 mov     ecx, [ebp+var_18] ; this
.text$mn:00003317                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:0000331C                 mov     [ebp+var_54], eax
.text$mn:0000331F                 lea     eax, [ebp+uPosition]
.text$mn:00003322                 push    eax             ; int *
.text$mn:00003323                 push    offset $SG169471 ; char *
.text$mn:00003328                 mov     ecx, [ebp+var_54] ; this
.text$mn:0000332B                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:00003330                 push    offset $SG169473 ; "name"
.text$mn:00003335                 mov     ecx, [ebp+var_54] ; this
.text$mn:00003338                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:0000333D                 mov     [ebp+var_68], eax
.text$mn:00003340                 push    0               ; int *
.text$mn:00003342                 push    0               ; int *
.text$mn:00003344                 push    0FFFFFFFFh      ; int
.text$mn:00003346                 mov     ecx, [ebp+var_4]
.text$mn:00003349                 mov     edx, [ecx+4]
.text$mn:0000334C                 push    edx             ; unsigned int
.text$mn:0000334D                 mov     eax, [ebp+var_68]
.text$mn:00003350                 push    eax             ; char *
.text$mn:00003351                 mov     ecx, [ebp+var_C] ; this
.text$mn:00003354                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00003359                 mov     [ebp+var_6C], eax
.text$mn:0000335C                 mov     ecx, [ebp+var_6C]
.text$mn:0000335F                 push    ecx             ; lpNewItem
.text$mn:00003360                 mov     edx, [ebp+uPosition]
.text$mn:00003363                 push    edx             ; uIDNewItem
.text$mn:00003364                 push    0               ; uFlags
.text$mn:00003366                 mov     eax, [ebp+uPosition]
.text$mn:00003369                 push    eax             ; uPosition
.text$mn:0000336A                 mov     ecx, [ebp+hMnu]
.text$mn:0000336D                 push    ecx             ; hMnu
.text$mn:0000336E                 call    dword ptr ds:__imp__ModifyMenuW@20 ; ModifyMenuW(x,x,x,x,x)
.text$mn:00003374                 jmp     short loc_32FE
.text$mn:00003376 ; ---------------------------------------------------------------------------
.text$mn:00003376
.text$mn:00003376 loc_3376:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+212j
.text$mn:00003376                 push    offset $SG169476 ; "SubEntries"
.text$mn:0000337B                 mov     ecx, [ebp+var_8] ; this
.text$mn:0000337E                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00003383                 mov     [ebp+var_74], eax
.text$mn:00003386                 push    offset $SG169478 ; "Item"
.text$mn:0000338B                 mov     ecx, [ebp+var_74] ; this
.text$mn:0000338E                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:00003393                 mov     [ebp+var_14], eax
.text$mn:00003396                 jmp     short loc_33A8
.text$mn:00003398 ; ---------------------------------------------------------------------------
.text$mn:00003398
.text$mn:00003398 loc_3398:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &):loc_33E9j
.text$mn:00003398                                         ; NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+32Bj ...
.text$mn:00003398                 push    offset $SG169482 ; "Item"
.text$mn:0000339D                 mov     ecx, [ebp+var_14] ; this
.text$mn:000033A0                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:000033A5                 mov     [ebp+var_14], eax
.text$mn:000033A8
.text$mn:000033A8 loc_33A8:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+296j
.text$mn:000033A8                 cmp     [ebp+var_14], 0
.text$mn:000033AC                 jz      loc_34CC
.text$mn:000033B2                 mov     ecx, [ebp+var_14] ; this
.text$mn:000033B5                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:000033BA                 mov     [ebp+var_3C], eax
.text$mn:000033BD                 push    offset $SG169488 ; "subMenuId"
.text$mn:000033C2                 mov     ecx, [ebp+var_3C] ; this
.text$mn:000033C5                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:000033CA                 mov     [ebp+var_40], eax
.text$mn:000033CD                 push    offset $SG169490 ; "name"
.text$mn:000033D2                 mov     ecx, [ebp+var_3C] ; this
.text$mn:000033D5                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:000033DA                 mov     [ebp+var_50], eax
.text$mn:000033DD                 cmp     [ebp+var_40], 0
.text$mn:000033E1                 jz      short loc_33E9
.text$mn:000033E3                 cmp     [ebp+var_50], 0
.text$mn:000033E7                 jnz     short loc_33EB
.text$mn:000033E9
.text$mn:000033E9 loc_33E9:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+2E1j
.text$mn:000033E9                 jmp     short loc_3398
.text$mn:000033EB ; ---------------------------------------------------------------------------
.text$mn:000033EB
.text$mn:000033EB loc_33EB:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+2E7j
.text$mn:000033EB                 mov     edx, [ebp+var_40]
.text$mn:000033EE                 push    edx             ; Str2
.text$mn:000033EF                 call    ?getMenuPosition@@YAAAVMenuPosition@@PBD@Z ; getMenuPosition(char const *)
.text$mn:000033F4                 add     esp, 4
.text$mn:000033F7                 mov     [ebp+var_24], eax
.text$mn:000033FA                 mov     eax, [ebp+var_24]
.text$mn:000033FD                 mov     ecx, [eax]
.text$mn:000033FF                 mov     [ebp+nPos], ecx
.text$mn:00003402                 mov     edx, [ebp+var_24]
.text$mn:00003405                 mov     eax, [edx+4]
.text$mn:00003408                 mov     [ebp+var_48], eax
.text$mn:0000340B                 mov     ecx, [ebp+var_24]
.text$mn:0000340E                 mov     edx, [ecx+8]
.text$mn:00003411                 mov     [ebp+var_30], edx
.text$mn:00003414                 mov     eax, [ebp+nPos]
.text$mn:00003417                 push    eax             ; nPos
.text$mn:00003418                 mov     ecx, [ebp+hMnu]
.text$mn:0000341B                 push    ecx             ; hMenu
.text$mn:0000341C                 call    dword ptr ds:__imp__GetSubMenu@8 ; GetSubMenu(x,x)
.text$mn:00003422                 mov     [ebp+hMenu], eax
.text$mn:00003425                 cmp     [ebp+hMenu], 0
.text$mn:00003429                 jnz     short loc_3430
.text$mn:0000342B                 jmp     loc_3398
.text$mn:00003430 ; ---------------------------------------------------------------------------
.text$mn:00003430
.text$mn:00003430 loc_3430:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+329j
.text$mn:00003430                 mov     edx, [ebp+var_48]
.text$mn:00003433                 push    edx             ; nPos
.text$mn:00003434                 mov     eax, [ebp+hMenu]
.text$mn:00003437                 push    eax             ; hMenu
.text$mn:00003438                 call    dword ptr ds:__imp__GetSubMenu@8 ; GetSubMenu(x,x)
.text$mn:0000343E                 mov     [ebp+var_28], eax
.text$mn:00003441                 cmp     [ebp+var_28], 0
.text$mn:00003445                 jnz     short loc_344C
.text$mn:00003447                 jmp     loc_3398
.text$mn:0000344C ; ---------------------------------------------------------------------------
.text$mn:0000344C
.text$mn:0000344C loc_344C:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+345j
.text$mn:0000344C                 mov     ecx, [ebp+hMenu]
.text$mn:0000344F                 mov     [ebp+var_38], ecx
.text$mn:00003452                 mov     edx, [ebp+var_48]
.text$mn:00003455                 mov     [ebp+var_58], edx
.text$mn:00003458                 cmp     [ebp+var_30], 0FFFFFFFFh
.text$mn:0000345C                 jz      short loc_348C
.text$mn:0000345E                 mov     eax, [ebp+var_30]
.text$mn:00003461                 push    eax             ; nPos
.text$mn:00003462                 mov     ecx, [ebp+var_28]
.text$mn:00003465                 push    ecx             ; hMenu
.text$mn:00003466                 call    dword ptr ds:__imp__GetSubMenu@8 ; GetSubMenu(x,x)
.text$mn:0000346C                 mov     [ebp+var_84], eax
.text$mn:00003472                 cmp     [ebp+var_84], 0
.text$mn:00003479                 jnz     short loc_3480
.text$mn:0000347B                 jmp     loc_3398
.text$mn:00003480 ; ---------------------------------------------------------------------------
.text$mn:00003480
.text$mn:00003480 loc_3480:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+379j
.text$mn:00003480                 mov     edx, [ebp+var_28]
.text$mn:00003483                 mov     [ebp+var_38], edx
.text$mn:00003486                 mov     eax, [ebp+var_30]
.text$mn:00003489                 mov     [ebp+var_58], eax
.text$mn:0000348C
.text$mn:0000348C loc_348C:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+35Cj
.text$mn:0000348C                 push    0               ; int *
.text$mn:0000348E                 push    0               ; int *
.text$mn:00003490                 push    0FFFFFFFFh      ; int
.text$mn:00003492                 mov     ecx, [ebp+var_4]
.text$mn:00003495                 mov     edx, [ecx+4]
.text$mn:00003498                 push    edx             ; unsigned int
.text$mn:00003499                 mov     eax, [ebp+var_50]
.text$mn:0000349C                 push    eax             ; char *
.text$mn:0000349D                 mov     ecx, [ebp+var_C] ; this
.text$mn:000034A0                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:000034A5                 mov     [ebp+var_8C], eax
.text$mn:000034AB                 mov     ecx, [ebp+var_8C]
.text$mn:000034B1                 push    ecx             ; lpNewItem
.text$mn:000034B2                 push    0               ; uIDNewItem
.text$mn:000034B4                 push    400h            ; uFlags
.text$mn:000034B9                 mov     edx, [ebp+var_58]
.text$mn:000034BC                 push    edx             ; uPosition
.text$mn:000034BD                 mov     eax, [ebp+var_38]
.text$mn:000034C0                 push    eax             ; hMnu
.text$mn:000034C1                 call    dword ptr ds:__imp__ModifyMenuW@20 ; ModifyMenuW(x,x,x,x,x)
.text$mn:000034C7                 jmp     loc_3398
.text$mn:000034CC ; ---------------------------------------------------------------------------
.text$mn:000034CC
.text$mn:000034CC loc_34CC:                               ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+14j
.text$mn:000034CC                                         ; NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+31j ...
.text$mn:000034CC                 mov     esp, ebp
.text$mn:000034CE                 pop     ebp
.text$mn:000034CF                 retn    0Ch
.text$mn:000034CF ?changeMenuLang@NativeLangSpeaker@@QAEXPAUHMENU__@@AAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@1@Z endp
.text$mn:000034CF
.text$mn:000034CF ; ---------------------------------------------------------------------------
.text$mn:000034D2                 align 10h
.text$mn:000034E0
.text$mn:000034E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000034E0
.text$mn:000034E0 ; Attributes: bp-based frame
.text$mn:000034E0
.text$mn:000034E0 ; void __thiscall NativeLangSpeaker::changeShortcutLang(NativeLangSpeaker *__hidden this)
.text$mn:000034E0                 public ?changeShortcutLang@NativeLangSpeaker@@QAEXXZ
.text$mn:000034E0 ?changeShortcutLang@NativeLangSpeaker@@QAEXXZ proc near
.text$mn:000034E0
.text$mn:000034E0 var_5C          = dword ptr -5Ch
.text$mn:000034E0 var_58          = dword ptr -58h
.text$mn:000034E0 var_54          = dword ptr -54h
.text$mn:000034E0 var_50          = dword ptr -50h
.text$mn:000034E0 var_4C          = dword ptr -4Ch
.text$mn:000034E0 var_48          = dword ptr -48h
.text$mn:000034E0 var_44          = dword ptr -44h
.text$mn:000034E0 var_40          = dword ptr -40h
.text$mn:000034E0 var_3C          = dword ptr -3Ch
.text$mn:000034E0 var_38          = dword ptr -38h
.text$mn:000034E0 var_34          = dword ptr -34h
.text$mn:000034E0 var_30          = dword ptr -30h
.text$mn:000034E0 var_2C          = dword ptr -2Ch
.text$mn:000034E0 var_28          = dword ptr -28h
.text$mn:000034E0 var_24          = dword ptr -24h
.text$mn:000034E0 var_20          = dword ptr -20h
.text$mn:000034E0 var_1C          = dword ptr -1Ch
.text$mn:000034E0 var_18          = dword ptr -18h
.text$mn:000034E0 var_14          = dword ptr -14h
.text$mn:000034E0 var_10          = dword ptr -10h
.text$mn:000034E0 var_C           = dword ptr -0Ch
.text$mn:000034E0 var_8           = dword ptr -8
.text$mn:000034E0 var_4           = dword ptr -4
.text$mn:000034E0
.text$mn:000034E0                 push    ebp
.text$mn:000034E1                 mov     ebp, esp
.text$mn:000034E3                 sub     esp, 5Ch
.text$mn:000034E6                 mov     [ebp+var_C], ecx
.text$mn:000034E9                 mov     eax, [ebp+var_C]
.text$mn:000034EC                 cmp     dword ptr [eax], 0
.text$mn:000034EF                 jnz     short loc_34F6
.text$mn:000034F1                 jmp     loc_374E
.text$mn:000034F6 ; ---------------------------------------------------------------------------
.text$mn:000034F6
.text$mn:000034F6 loc_34F6:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+Fj
.text$mn:000034F6                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:000034FB                 mov     [ebp+var_24], eax
.text$mn:000034FE                 mov     ecx, [ebp+var_24]
.text$mn:00003501                 call    ?getUserShortcuts@NppParameters@@QAEAAV?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@XZ ; NppParameters::getUserShortcuts(void)
.text$mn:00003506                 mov     [ebp+var_28], eax
.text$mn:00003509                 mov     ecx, [ebp+var_24]
.text$mn:0000350C                 call    ?getScintillaKeyList@NppParameters@@QAEAAV?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@XZ ; NppParameters::getScintillaKeyList(void)
.text$mn:00003511                 mov     [ebp+var_34], eax
.text$mn:00003514                 mov     ecx, [ebp+var_28]
.text$mn:00003517                 call    ?size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut>>::size(void)
.text$mn:0000351C                 mov     [ebp+var_38], eax
.text$mn:0000351F                 mov     ecx, [ebp+var_34]
.text$mn:00003522                 call    ?size@?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QBEIXZ ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::size(void)
.text$mn:00003527                 mov     [ebp+var_4C], eax
.text$mn:0000352A                 push    offset $SG169897 ; "Shortcuts"
.text$mn:0000352F                 mov     ecx, [ebp+var_C]
.text$mn:00003532                 mov     ecx, [ecx]      ; this
.text$mn:00003534                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00003539                 mov     [ebp+var_4], eax
.text$mn:0000353C                 cmp     [ebp+var_4], 0
.text$mn:00003540                 jnz     short loc_3547
.text$mn:00003542                 jmp     loc_374E
.text$mn:00003547 ; ---------------------------------------------------------------------------
.text$mn:00003547
.text$mn:00003547 loc_3547:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+60j
.text$mn:00003547                 push    offset $SG169899 ; "Main"
.text$mn:0000354C                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000354F                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00003554                 mov     [ebp+var_4], eax
.text$mn:00003557                 cmp     [ebp+var_4], 0
.text$mn:0000355B                 jnz     short loc_3562
.text$mn:0000355D                 jmp     loc_374E
.text$mn:00003562 ; ---------------------------------------------------------------------------
.text$mn:00003562
.text$mn:00003562 loc_3562:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+7Bj
.text$mn:00003562                 push    offset $SG169902 ; "Entries"
.text$mn:00003567                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000356A                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:0000356F                 mov     [ebp+var_8], eax
.text$mn:00003572                 cmp     [ebp+var_8], 0
.text$mn:00003576                 jnz     short loc_357D
.text$mn:00003578                 jmp     loc_374E
.text$mn:0000357D ; ---------------------------------------------------------------------------
.text$mn:0000357D
.text$mn:0000357D loc_357D:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+96j
.text$mn:0000357D                 push    offset $SG169905 ; "Item"
.text$mn:00003582                 mov     ecx, [ebp+var_8] ; this
.text$mn:00003585                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:0000358A                 mov     [ebp+var_10], eax
.text$mn:0000358D                 jmp     short loc_359F
.text$mn:0000358F ; ---------------------------------------------------------------------------
.text$mn:0000358F
.text$mn:0000358F loc_358F:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void):loc_3648j
.text$mn:0000358F                 push    offset $SG169909 ; "Item"
.text$mn:00003594                 mov     ecx, [ebp+var_10] ; this
.text$mn:00003597                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:0000359C                 mov     [ebp+var_10], eax
.text$mn:0000359F
.text$mn:0000359F loc_359F:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+ADj
.text$mn:0000359F                 cmp     [ebp+var_10], 0
.text$mn:000035A3                 jz      loc_364D
.text$mn:000035A9                 mov     ecx, [ebp+var_10] ; this
.text$mn:000035AC                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:000035B1                 mov     [ebp+var_18], eax
.text$mn:000035B4                 lea     edx, [ebp+var_1C]
.text$mn:000035B7                 push    edx             ; int *
.text$mn:000035B8                 push    offset $SG169914 ; "index"
.text$mn:000035BD                 mov     ecx, [ebp+var_18] ; this
.text$mn:000035C0                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:000035C5                 test    eax, eax
.text$mn:000035C7                 jz      short loc_3648
.text$mn:000035C9                 lea     eax, [ebp+var_3C]
.text$mn:000035CC                 push    eax             ; int *
.text$mn:000035CD                 push    offset $SG169915 ; char *
.text$mn:000035D2                 mov     ecx, [ebp+var_18] ; this
.text$mn:000035D5                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:000035DA                 test    eax, eax
.text$mn:000035DC                 jz      short loc_3648
.text$mn:000035DE                 cmp     [ebp+var_1C], 0FFFFFFFFh
.text$mn:000035E2                 jle     short loc_3648
.text$mn:000035E4                 mov     ecx, [ebp+var_1C]
.text$mn:000035E7                 cmp     ecx, [ebp+var_38]
.text$mn:000035EA                 jge     short loc_3648
.text$mn:000035EC                 push    offset $SG169918 ; "name"
.text$mn:000035F1                 mov     ecx, [ebp+var_18] ; this
.text$mn:000035F4                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:000035F9                 mov     [ebp+var_40], eax
.text$mn:000035FC                 mov     edx, [ebp+var_1C]
.text$mn:000035FF                 push    edx
.text$mn:00003600                 mov     ecx, [ebp+var_28]
.text$mn:00003603                 call    ??A?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAEAAVCommandShortcut@@I@Z ; std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)
.text$mn:00003608                 mov     [ebp+var_2C], eax
.text$mn:0000360B                 mov     ecx, [ebp+var_2C] ; this
.text$mn:0000360E                 call    ?getID@CommandShortcut@@QBEKXZ ; CommandShortcut::getID(void)
.text$mn:00003613                 cmp     eax, [ebp+var_3C]
.text$mn:00003616                 jnz     short loc_3648
.text$mn:00003618                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:0000361D                 mov     [ebp+var_44], eax
.text$mn:00003620                 push    0               ; int *
.text$mn:00003622                 push    0               ; int *
.text$mn:00003624                 push    0FFFFFFFFh      ; int
.text$mn:00003626                 mov     eax, [ebp+var_C]
.text$mn:00003629                 mov     ecx, [eax+4]
.text$mn:0000362C                 push    ecx             ; unsigned int
.text$mn:0000362D                 mov     edx, [ebp+var_40]
.text$mn:00003630                 push    edx             ; char *
.text$mn:00003631                 mov     ecx, [ebp+var_44] ; this
.text$mn:00003634                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00003639                 mov     [ebp+var_48], eax
.text$mn:0000363C                 mov     eax, [ebp+var_48]
.text$mn:0000363F                 push    eax             ; wchar_t *
.text$mn:00003640                 mov     ecx, [ebp+var_2C] ; this
.text$mn:00003643                 call    ?setName@Shortcut@@QAEXPB_W@Z ; Shortcut::setName(wchar_t const *)
.text$mn:00003648
.text$mn:00003648 loc_3648:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+E7j
.text$mn:00003648                                         ; NativeLangSpeaker::changeShortcutLang(void)+FCj ...
.text$mn:00003648                 jmp     loc_358F
.text$mn:0000364D ; ---------------------------------------------------------------------------
.text$mn:0000364D
.text$mn:0000364D loc_364D:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+C3j
.text$mn:0000364D                 push    offset $SG169924 ; "Shortcuts"
.text$mn:00003652                 mov     ecx, [ebp+var_C]
.text$mn:00003655                 mov     ecx, [ecx]      ; this
.text$mn:00003657                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:0000365C                 mov     [ebp+var_4], eax
.text$mn:0000365F                 cmp     [ebp+var_4], 0
.text$mn:00003663                 jnz     short loc_366A
.text$mn:00003665                 jmp     loc_374E
.text$mn:0000366A ; ---------------------------------------------------------------------------
.text$mn:0000366A
.text$mn:0000366A loc_366A:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+183j
.text$mn:0000366A                 push    offset $SG169926 ; "Scintilla"
.text$mn:0000366F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003672                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00003677                 mov     [ebp+var_4], eax
.text$mn:0000367A                 cmp     [ebp+var_4], 0
.text$mn:0000367E                 jnz     short loc_3685
.text$mn:00003680                 jmp     loc_374E
.text$mn:00003685 ; ---------------------------------------------------------------------------
.text$mn:00003685
.text$mn:00003685 loc_3685:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+19Ej
.text$mn:00003685                 push    offset $SG169928 ; "Entries"
.text$mn:0000368A                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000368D                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00003692                 mov     [ebp+var_8], eax
.text$mn:00003695                 cmp     [ebp+var_8], 0
.text$mn:00003699                 jnz     short loc_36A0
.text$mn:0000369B                 jmp     loc_374E
.text$mn:000036A0 ; ---------------------------------------------------------------------------
.text$mn:000036A0
.text$mn:000036A0 loc_36A0:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+1B9j
.text$mn:000036A0                 push    offset $SG169931 ; "Item"
.text$mn:000036A5                 mov     ecx, [ebp+var_8] ; this
.text$mn:000036A8                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:000036AD                 mov     [ebp+var_14], eax
.text$mn:000036B0                 jmp     short loc_36C2
.text$mn:000036B2 ; ---------------------------------------------------------------------------
.text$mn:000036B2
.text$mn:000036B2 loc_36B2:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void):loc_3749j
.text$mn:000036B2                 push    offset $SG169935 ; "Item"
.text$mn:000036B7                 mov     ecx, [ebp+var_14] ; this
.text$mn:000036BA                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:000036BF                 mov     [ebp+var_14], eax
.text$mn:000036C2
.text$mn:000036C2 loc_36C2:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+1D0j
.text$mn:000036C2                 cmp     [ebp+var_14], 0
.text$mn:000036C6                 jz      loc_374E
.text$mn:000036CC                 mov     ecx, [ebp+var_14] ; this
.text$mn:000036CF                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:000036D4                 mov     [ebp+var_30], eax
.text$mn:000036D7                 lea     edx, [ebp+var_20]
.text$mn:000036DA                 push    edx             ; int *
.text$mn:000036DB                 push    offset $SG169939 ; "index"
.text$mn:000036E0                 mov     ecx, [ebp+var_30] ; this
.text$mn:000036E3                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:000036E8                 test    eax, eax
.text$mn:000036EA                 jz      short loc_3749
.text$mn:000036EC                 cmp     [ebp+var_20], 0FFFFFFFFh
.text$mn:000036F0                 jle     short loc_3749
.text$mn:000036F2                 mov     eax, [ebp+var_20]
.text$mn:000036F5                 cmp     eax, [ebp+var_4C]
.text$mn:000036F8                 jge     short loc_3749
.text$mn:000036FA                 push    offset $SG169942 ; "name"
.text$mn:000036FF                 mov     ecx, [ebp+var_30] ; this
.text$mn:00003702                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00003707                 mov     [ebp+var_50], eax
.text$mn:0000370A                 mov     ecx, [ebp+var_20]
.text$mn:0000370D                 push    ecx
.text$mn:0000370E                 mov     ecx, [ebp+var_34]
.text$mn:00003711                 call    ??A?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QAEAAVScintillaKeyMap@@I@Z ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::operator[](uint)
.text$mn:00003716                 mov     [ebp+var_5C], eax
.text$mn:00003719                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:0000371E                 mov     [ebp+var_54], eax
.text$mn:00003721                 push    0               ; int *
.text$mn:00003723                 push    0               ; int *
.text$mn:00003725                 push    0FFFFFFFFh      ; int
.text$mn:00003727                 mov     edx, [ebp+var_C]
.text$mn:0000372A                 mov     eax, [edx+4]
.text$mn:0000372D                 push    eax             ; unsigned int
.text$mn:0000372E                 mov     ecx, [ebp+var_50]
.text$mn:00003731                 push    ecx             ; char *
.text$mn:00003732                 mov     ecx, [ebp+var_54] ; this
.text$mn:00003735                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:0000373A                 mov     [ebp+var_58], eax
.text$mn:0000373D                 mov     edx, [ebp+var_58]
.text$mn:00003740                 push    edx             ; wchar_t *
.text$mn:00003741                 mov     ecx, [ebp+var_5C] ; this
.text$mn:00003744                 call    ?setName@Shortcut@@QAEXPB_W@Z ; Shortcut::setName(wchar_t const *)
.text$mn:00003749
.text$mn:00003749 loc_3749:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+20Aj
.text$mn:00003749                                         ; NativeLangSpeaker::changeShortcutLang(void)+210j ...
.text$mn:00003749                 jmp     loc_36B2
.text$mn:0000374E ; ---------------------------------------------------------------------------
.text$mn:0000374E
.text$mn:0000374E loc_374E:                               ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+11j
.text$mn:0000374E                                         ; NativeLangSpeaker::changeShortcutLang(void)+62j ...
.text$mn:0000374E                 mov     esp, ebp
.text$mn:00003750                 pop     ebp
.text$mn:00003751                 retn
.text$mn:00003751 ?changeShortcutLang@NativeLangSpeaker@@QAEXXZ endp
.text$mn:00003751
.text$mn:00003751 ; ---------------------------------------------------------------------------
.text$mn:00003752                 align 10h
.text$mn:00003760
.text$mn:00003760 ; =============== S U B R O U T I N E =======================================
.text$mn:00003760
.text$mn:00003760 ; Attributes: bp-based frame
.text$mn:00003760
.text$mn:00003760 ; void __thiscall NativeLangSpeaker::changeShortcutmapperLang(NativeLangSpeaker *this, struct ShortcutMapper *)
.text$mn:00003760                 public ?changeShortcutmapperLang@NativeLangSpeaker@@QAEXPAVShortcutMapper@@@Z
.text$mn:00003760 ?changeShortcutmapperLang@NativeLangSpeaker@@QAEXPAVShortcutMapper@@@Z proc near
.text$mn:00003760
.text$mn:00003760 var_20          = dword ptr -20h
.text$mn:00003760 var_1C          = dword ptr -1Ch
.text$mn:00003760 var_18          = dword ptr -18h
.text$mn:00003760 var_14          = dword ptr -14h
.text$mn:00003760 var_10          = dword ptr -10h
.text$mn:00003760 var_C           = dword ptr -0Ch
.text$mn:00003760 var_8           = dword ptr -8
.text$mn:00003760 var_4           = dword ptr -4
.text$mn:00003760 arg_0           = dword ptr  8
.text$mn:00003760
.text$mn:00003760                 push    ebp
.text$mn:00003761                 mov     ebp, esp
.text$mn:00003763                 sub     esp, 20h
.text$mn:00003766                 mov     [ebp+var_C], ecx
.text$mn:00003769                 mov     eax, [ebp+var_C]
.text$mn:0000376C                 cmp     dword ptr [eax], 0
.text$mn:0000376F                 jnz     short loc_3776
.text$mn:00003771                 jmp     loc_384B
.text$mn:00003776 ; ---------------------------------------------------------------------------
.text$mn:00003776
.text$mn:00003776 loc_3776:                               ; CODE XREF: NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *)+Fj
.text$mn:00003776                 push    offset $SG169952 ; "Dialog"
.text$mn:0000377B                 mov     ecx, [ebp+var_C]
.text$mn:0000377E                 mov     ecx, [ecx]      ; this
.text$mn:00003780                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00003785                 mov     [ebp+var_4], eax
.text$mn:00003788                 cmp     [ebp+var_4], 0
.text$mn:0000378C                 jnz     short loc_3793
.text$mn:0000378E                 jmp     loc_384B
.text$mn:00003793 ; ---------------------------------------------------------------------------
.text$mn:00003793
.text$mn:00003793 loc_3793:                               ; CODE XREF: NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *)+2Cj
.text$mn:00003793                 push    offset $SG169954 ; "ShortcutMapper"
.text$mn:00003798                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000379B                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:000037A0                 mov     [ebp+var_4], eax
.text$mn:000037A3                 cmp     [ebp+var_4], 0
.text$mn:000037A7                 jnz     short loc_37AE
.text$mn:000037A9                 jmp     loc_384B
.text$mn:000037AE ; ---------------------------------------------------------------------------
.text$mn:000037AE
.text$mn:000037AE loc_37AE:                               ; CODE XREF: NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *)+47j
.text$mn:000037AE                 push    offset $SG169957 ; "Item"
.text$mn:000037B3                 mov     ecx, [ebp+var_4] ; this
.text$mn:000037B6                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:000037BB                 mov     [ebp+var_8], eax
.text$mn:000037BE                 jmp     short loc_37D0
.text$mn:000037C0 ; ---------------------------------------------------------------------------
.text$mn:000037C0
.text$mn:000037C0 loc_37C0:                               ; CODE XREF: NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *):loc_3846j
.text$mn:000037C0                 push    offset $SG169961 ; "Item"
.text$mn:000037C5                 mov     ecx, [ebp+var_8] ; this
.text$mn:000037C8                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:000037CD                 mov     [ebp+var_8], eax
.text$mn:000037D0
.text$mn:000037D0 loc_37D0:                               ; CODE XREF: NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *)+5Ej
.text$mn:000037D0                 cmp     [ebp+var_8], 0
.text$mn:000037D4                 jz      short loc_384B
.text$mn:000037D6                 mov     ecx, [ebp+var_8] ; this
.text$mn:000037D9                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:000037DE                 mov     [ebp+var_14], eax
.text$mn:000037E1                 lea     edx, [ebp+var_10]
.text$mn:000037E4                 push    edx             ; int *
.text$mn:000037E5                 push    offset $SG169965 ; "index"
.text$mn:000037EA                 mov     ecx, [ebp+var_14] ; this
.text$mn:000037ED                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:000037F2                 test    eax, eax
.text$mn:000037F4                 jz      short loc_3846
.text$mn:000037F6                 cmp     [ebp+var_10], 0FFFFFFFFh
.text$mn:000037FA                 jle     short loc_3846
.text$mn:000037FC                 cmp     [ebp+var_10], 5
.text$mn:00003800                 jge     short loc_3846
.text$mn:00003802                 push    offset $SG169968 ; "name"
.text$mn:00003807                 mov     ecx, [ebp+var_14] ; this
.text$mn:0000380A                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:0000380F                 mov     [ebp+var_18], eax
.text$mn:00003812                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00003817                 mov     [ebp+var_1C], eax
.text$mn:0000381A                 push    0               ; int *
.text$mn:0000381C                 push    0               ; int *
.text$mn:0000381E                 push    0FFFFFFFFh      ; int
.text$mn:00003820                 mov     eax, [ebp+var_C]
.text$mn:00003823                 mov     ecx, [eax+4]
.text$mn:00003826                 push    ecx             ; unsigned int
.text$mn:00003827                 mov     edx, [ebp+var_18]
.text$mn:0000382A                 push    edx             ; char *
.text$mn:0000382B                 mov     ecx, [ebp+var_1C] ; this
.text$mn:0000382E                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00003833                 mov     [ebp+var_20], eax
.text$mn:00003836                 mov     eax, [ebp+var_20]
.text$mn:00003839                 push    eax             ; wchar_t *
.text$mn:0000383A                 mov     ecx, [ebp+var_10]
.text$mn:0000383D                 push    ecx             ; int
.text$mn:0000383E                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003841                 call    ?translateTab@ShortcutMapper@@QAEXHPB_W@Z ; ShortcutMapper::translateTab(int,wchar_t const *)
.text$mn:00003846
.text$mn:00003846 loc_3846:                               ; CODE XREF: NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *)+94j
.text$mn:00003846                                         ; NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *)+9Aj ...
.text$mn:00003846                 jmp     loc_37C0
.text$mn:0000384B ; ---------------------------------------------------------------------------
.text$mn:0000384B
.text$mn:0000384B loc_384B:                               ; CODE XREF: NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *)+11j
.text$mn:0000384B                                         ; NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *)+2Ej ...
.text$mn:0000384B                 mov     esp, ebp
.text$mn:0000384D                 pop     ebp
.text$mn:0000384E                 retn    4
.text$mn:0000384E ?changeShortcutmapperLang@NativeLangSpeaker@@QAEXPAVShortcutMapper@@@Z endp
.text$mn:0000384E
.text$mn:0000384E ; ---------------------------------------------------------------------------
.text$mn:00003851                 align 10h
.text$mn:00003860
.text$mn:00003860 ; =============== S U B R O U T I N E =======================================
.text$mn:00003860
.text$mn:00003860 ; Attributes: bp-based frame
.text$mn:00003860
.text$mn:00003860 ; void __thiscall NativeLangSpeaker::changeStyleCtrlsLang(NativeLangSpeaker *this, HWND hDlg, int *, const char **)
.text$mn:00003860                 public ?changeStyleCtrlsLang@NativeLangSpeaker@@QAEXPAUHWND__@@PAHPAPBD@Z
.text$mn:00003860 ?changeStyleCtrlsLang@NativeLangSpeaker@@QAEXPAUHWND__@@PAHPAPBD@Z proc near
.text$mn:00003860
.text$mn:00003860 var_1C          = dword ptr -1Ch
.text$mn:00003860 var_18          = dword ptr -18h
.text$mn:00003860 lpString        = dword ptr -14h
.text$mn:00003860 var_10          = dword ptr -10h
.text$mn:00003860 var_C           = dword ptr -0Ch
.text$mn:00003860 hWnd            = dword ptr -8
.text$mn:00003860 var_4           = dword ptr -4
.text$mn:00003860 hDlg            = dword ptr  8
.text$mn:00003860 arg_4           = dword ptr  0Ch
.text$mn:00003860 arg_8           = dword ptr  10h
.text$mn:00003860
.text$mn:00003860                 push    ebp
.text$mn:00003861                 mov     ebp, esp
.text$mn:00003863                 sub     esp, 1Ch
.text$mn:00003866                 mov     [ebp+var_C], ecx
.text$mn:00003869                 mov     [ebp+var_18], 0
.text$mn:00003870                 mov     [ebp+var_1C], 8
.text$mn:00003877                 mov     [ebp+var_4], 0
.text$mn:0000387E                 jmp     short loc_3889
.text$mn:00003880 ; ---------------------------------------------------------------------------
.text$mn:00003880
.text$mn:00003880 loc_3880:                               ; CODE XREF: NativeLangSpeaker::changeStyleCtrlsLang(HWND__ *,int *,char const * *):loc_3909j
.text$mn:00003880                 mov     eax, [ebp+var_4]
.text$mn:00003883                 add     eax, 1
.text$mn:00003886                 mov     [ebp+var_4], eax
.text$mn:00003889
.text$mn:00003889 loc_3889:                               ; CODE XREF: NativeLangSpeaker::changeStyleCtrlsLang(HWND__ *,int *,char const * *)+1Ej
.text$mn:00003889                 cmp     [ebp+var_4], 9
.text$mn:0000388D                 jge     short loc_390E
.text$mn:0000388F                 mov     ecx, [ebp+var_4]
.text$mn:00003892                 mov     edx, [ebp+arg_8]
.text$mn:00003895                 cmp     dword ptr [edx+ecx*4], 0
.text$mn:00003899                 jz      short loc_3909
.text$mn:0000389B                 mov     eax, 1
.text$mn:000038A0                 imul    ecx, eax, 0
.text$mn:000038A3                 mov     edx, [ebp+var_4]
.text$mn:000038A6                 mov     eax, [ebp+arg_8]
.text$mn:000038A9                 mov     edx, [eax+edx*4]
.text$mn:000038AC                 movsx   eax, byte ptr [edx+ecx]
.text$mn:000038B0                 test    eax, eax
.text$mn:000038B2                 jz      short loc_3909
.text$mn:000038B4                 mov     ecx, [ebp+var_4]
.text$mn:000038B7                 mov     edx, [ebp+arg_4]
.text$mn:000038BA                 mov     eax, [edx+ecx*4]
.text$mn:000038BD                 push    eax             ; nIDDlgItem
.text$mn:000038BE                 mov     ecx, [ebp+hDlg]
.text$mn:000038C1                 push    ecx             ; hDlg
.text$mn:000038C2                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:000038C8                 mov     [ebp+hWnd], eax
.text$mn:000038CB                 cmp     [ebp+hWnd], 0
.text$mn:000038CF                 jz      short loc_3909
.text$mn:000038D1                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:000038D6                 mov     [ebp+var_10], eax
.text$mn:000038D9                 push    0               ; int *
.text$mn:000038DB                 push    0               ; int *
.text$mn:000038DD                 push    0FFFFFFFFh      ; int
.text$mn:000038DF                 mov     edx, [ebp+var_C]
.text$mn:000038E2                 mov     eax, [edx+4]
.text$mn:000038E5                 push    eax             ; unsigned int
.text$mn:000038E6                 mov     ecx, [ebp+var_4]
.text$mn:000038E9                 mov     edx, [ebp+arg_8]
.text$mn:000038EC                 mov     eax, [edx+ecx*4]
.text$mn:000038EF                 push    eax             ; char *
.text$mn:000038F0                 mov     ecx, [ebp+var_10] ; this
.text$mn:000038F3                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:000038F8                 mov     [ebp+lpString], eax
.text$mn:000038FB                 mov     ecx, [ebp+lpString]
.text$mn:000038FE                 push    ecx             ; lpString
.text$mn:000038FF                 mov     edx, [ebp+hWnd]
.text$mn:00003902                 push    edx             ; hWnd
.text$mn:00003903                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:00003909
.text$mn:00003909 loc_3909:                               ; CODE XREF: NativeLangSpeaker::changeStyleCtrlsLang(HWND__ *,int *,char const * *)+39j
.text$mn:00003909                                         ; NativeLangSpeaker::changeStyleCtrlsLang(HWND__ *,int *,char const * *)+52j ...
.text$mn:00003909                 jmp     loc_3880
.text$mn:0000390E ; ---------------------------------------------------------------------------
.text$mn:0000390E
.text$mn:0000390E loc_390E:                               ; CODE XREF: NativeLangSpeaker::changeStyleCtrlsLang(HWND__ *,int *,char const * *)+2Dj
.text$mn:0000390E                 mov     esp, ebp
.text$mn:00003910                 pop     ebp
.text$mn:00003911                 retn    0Ch
.text$mn:00003911 ?changeStyleCtrlsLang@NativeLangSpeaker@@QAEXPAUHWND__@@PAHPAPBD@Z endp
.text$mn:00003911
.text$mn:00003911 ; ---------------------------------------------------------------------------
.text$mn:00003914                 align 10h
.text$mn:00003920
.text$mn:00003920 ; =============== S U B R O U T I N E =======================================
.text$mn:00003920
.text$mn:00003920 ; Attributes: bp-based frame
.text$mn:00003920
.text$mn:00003920 ; void __thiscall NativeLangSpeaker::changeUserDefineLang(NativeLangSpeaker *this, struct UserDefineDialog *)
.text$mn:00003920                 public ?changeUserDefineLang@NativeLangSpeaker@@QAEXPAVUserDefineDialog@@@Z
.text$mn:00003920 ?changeUserDefineLang@NativeLangSpeaker@@QAEXPAVUserDefineDialog@@@Z proc near
.text$mn:00003920
.text$mn:00003920 var_E4          = dword ptr -0E4h
.text$mn:00003920 var_E0          = dword ptr -0E0h
.text$mn:00003920 var_DC          = dword ptr -0DCh
.text$mn:00003920 var_D8          = dword ptr -0D8h
.text$mn:00003920 var_D4          = dword ptr -0D4h
.text$mn:00003920 var_D0          = dword ptr -0D0h
.text$mn:00003920 lpString        = dword ptr -0CCh
.text$mn:00003920 var_C8          = dword ptr -0C8h
.text$mn:00003920 var_C4          = dword ptr -0C4h
.text$mn:00003920 var_C0          = dword ptr -0C0h
.text$mn:00003920 var_BC          = dword ptr -0BCh
.text$mn:00003920 hWnd            = dword ptr -0B8h
.text$mn:00003920 var_B4          = dword ptr -0B4h
.text$mn:00003920 var_B0          = dword ptr -0B0h
.text$mn:00003920 var_AC          = dword ptr -0ACh
.text$mn:00003920 var_A8          = dword ptr -0A8h
.text$mn:00003920 var_A4          = dword ptr -0A4h
.text$mn:00003920 nIDDlgItem      = dword ptr -0A0h
.text$mn:00003920 var_9C          = dword ptr -9Ch
.text$mn:00003920 var_98          = dword ptr -98h
.text$mn:00003920 var_94          = dword ptr -94h
.text$mn:00003920 var_90          = dword ptr -90h
.text$mn:00003920 var_8C          = dword ptr -8Ch
.text$mn:00003920 var_88          = dword ptr -88h
.text$mn:00003920 var_84          = dword ptr -84h
.text$mn:00003920 var_80          = dword ptr -80h
.text$mn:00003920 var_7C          = dword ptr -7Ch
.text$mn:00003920 var_78          = dword ptr -78h
.text$mn:00003920 hDlg            = dword ptr -54h
.text$mn:00003920 var_44          = byte ptr -44h
.text$mn:00003920 var_40          = word ptr -40h
.text$mn:00003920 var_3E          = byte ptr -3Eh
.text$mn:00003920 var_3D          = dword ptr -3Dh
.text$mn:00003920 var_39          = dword ptr -39h
.text$mn:00003920 var_35          = byte ptr -35h
.text$mn:00003920 var_34          = dword ptr -34h
.text$mn:00003920 var_30          = dword ptr -30h
.text$mn:00003920 var_2C          = byte ptr -2Ch
.text$mn:00003920 var_2B          = dword ptr -2Bh
.text$mn:00003920 var_27          = word ptr -27h
.text$mn:00003920 var_25          = byte ptr -25h
.text$mn:00003920 var_24          = dword ptr -24h
.text$mn:00003920 var_20          = dword ptr -20h
.text$mn:00003920 var_1C          = dword ptr -1Ch
.text$mn:00003920 var_18          = dword ptr -18h
.text$mn:00003920 var_14          = dword ptr -14h
.text$mn:00003920 var_10          = dword ptr -10h
.text$mn:00003920 var_C           = byte ptr -0Ch
.text$mn:00003920 var_B           = dword ptr -0Bh
.text$mn:00003920 var_7           = word ptr -7
.text$mn:00003920 var_5           = byte ptr -5
.text$mn:00003920 var_4           = dword ptr -4
.text$mn:00003920 arg_0           = dword ptr  8
.text$mn:00003920
.text$mn:00003920                 push    ebp
.text$mn:00003921                 mov     ebp, esp
.text$mn:00003923                 sub     esp, 0E4h
.text$mn:00003929                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000392E                 xor     eax, ebp
.text$mn:00003930                 mov     [ebp+var_4], eax
.text$mn:00003933                 mov     [ebp+var_84], ecx
.text$mn:00003939                 mov     eax, [ebp+var_84]
.text$mn:0000393F                 cmp     dword ptr [eax], 0
.text$mn:00003942                 jnz     short loc_3949
.text$mn:00003944                 jmp     loc_3E4F
.text$mn:00003949 ; ---------------------------------------------------------------------------
.text$mn:00003949
.text$mn:00003949 loc_3949:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+22j
.text$mn:00003949                 push    offset $SG169677 ; "Dialog"
.text$mn:0000394E                 mov     ecx, [ebp+var_84]
.text$mn:00003954                 mov     ecx, [ecx]      ; this
.text$mn:00003956                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:0000395B                 mov     [ebp+var_80], eax
.text$mn:0000395E                 cmp     [ebp+var_80], 0
.text$mn:00003962                 jnz     short loc_3969
.text$mn:00003964                 jmp     loc_3E4F
.text$mn:00003969 ; ---------------------------------------------------------------------------
.text$mn:00003969
.text$mn:00003969 loc_3969:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+42j
.text$mn:00003969                 push    offset $SG169679 ; "UserDefine"
.text$mn:0000396E                 mov     ecx, [ebp+var_80] ; this
.text$mn:00003971                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00003976                 mov     [ebp+var_80], eax
.text$mn:00003979                 cmp     [ebp+var_80], 0
.text$mn:0000397D                 jnz     short loc_3984
.text$mn:0000397F                 jmp     loc_3E4F
.text$mn:00003984 ; ---------------------------------------------------------------------------
.text$mn:00003984
.text$mn:00003984 loc_3984:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+5Dj
.text$mn:00003984                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003987                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:0000398C                 mov     [ebp+hWnd], eax
.text$mn:00003992                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00003997                 mov     [ebp+var_9C], eax
.text$mn:0000399D                 push    offset $SG169684 ; "title"
.text$mn:000039A2                 mov     ecx, [ebp+var_80] ; this
.text$mn:000039A5                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:000039AA                 mov     ecx, eax        ; this
.text$mn:000039AC                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:000039B1                 mov     [ebp+var_7C], eax
.text$mn:000039B4                 cmp     [ebp+var_7C], 0
.text$mn:000039B8                 jz      short loc_3A06
.text$mn:000039BA                 mov     edx, 1
.text$mn:000039BF                 imul    eax, edx, 0
.text$mn:000039C2                 mov     ecx, [ebp+var_7C]
.text$mn:000039C5                 movsx   edx, byte ptr [ecx+eax]
.text$mn:000039C9                 test    edx, edx
.text$mn:000039CB                 jz      short loc_3A06
.text$mn:000039CD                 push    0               ; int *
.text$mn:000039CF                 push    0               ; int *
.text$mn:000039D1                 push    0FFFFFFFFh      ; int
.text$mn:000039D3                 mov     eax, [ebp+var_84]
.text$mn:000039D9                 mov     ecx, [eax+4]
.text$mn:000039DC                 push    ecx             ; unsigned int
.text$mn:000039DD                 mov     edx, [ebp+var_7C]
.text$mn:000039E0                 push    edx             ; char *
.text$mn:000039E1                 mov     ecx, [ebp+var_9C] ; this
.text$mn:000039E7                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:000039EC                 mov     [ebp+lpString], eax
.text$mn:000039F2                 mov     eax, [ebp+lpString]
.text$mn:000039F8                 push    eax             ; lpString
.text$mn:000039F9                 mov     ecx, [ebp+hWnd]
.text$mn:000039FF                 push    ecx             ; hWnd
.text$mn:00003A00                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:00003A06
.text$mn:00003A06 loc_3A06:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+98j
.text$mn:00003A06                                         ; NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+ABj
.text$mn:00003A06                 mov     [ebp+var_E0], 9
.text$mn:00003A10                 mov     [ebp+var_94], 0
.text$mn:00003A1A                 jmp     short loc_3A2B
.text$mn:00003A1C ; ---------------------------------------------------------------------------
.text$mn:00003A1C
.text$mn:00003A1C loc_3A1C:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+122j
.text$mn:00003A1C                 mov     edx, [ebp+var_94]
.text$mn:00003A22                 add     edx, 1
.text$mn:00003A25                 mov     [ebp+var_94], edx
.text$mn:00003A2B
.text$mn:00003A2B loc_3A2B:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+FAj
.text$mn:00003A2B                 cmp     [ebp+var_94], 9
.text$mn:00003A32                 jge     short loc_3A44
.text$mn:00003A34                 mov     eax, [ebp+var_94]
.text$mn:00003A3A                 mov     [ebp+eax*4+var_78], 0
.text$mn:00003A42                 jmp     short loc_3A1C
.text$mn:00003A44 ; ---------------------------------------------------------------------------
.text$mn:00003A44
.text$mn:00003A44 loc_3A44:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+112j
.text$mn:00003A44                 push    offset $SG169694 ; "Item"
.text$mn:00003A49                 mov     ecx, [ebp+var_80] ; this
.text$mn:00003A4C                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:00003A51                 mov     [ebp+var_98], eax
.text$mn:00003A57                 jmp     short loc_3A6F
.text$mn:00003A59 ; ---------------------------------------------------------------------------
.text$mn:00003A59
.text$mn:00003A59 loc_3A59:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *):loc_3B8Ej
.text$mn:00003A59                 push    offset $SG169698 ; "Item"
.text$mn:00003A5E                 mov     ecx, [ebp+var_98] ; this
.text$mn:00003A64                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:00003A69                 mov     [ebp+var_98], eax
.text$mn:00003A6F
.text$mn:00003A6F loc_3A6F:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+137j
.text$mn:00003A6F                 cmp     [ebp+var_98], 0
.text$mn:00003A76                 jz      loc_3B93
.text$mn:00003A7C                 mov     ecx, [ebp+var_98] ; this
.text$mn:00003A82                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00003A87                 mov     [ebp+var_C0], eax
.text$mn:00003A8D                 lea     ecx, [ebp+nIDDlgItem]
.text$mn:00003A93                 push    ecx             ; int *
.text$mn:00003A94                 push    offset $SG169702 ; char *
.text$mn:00003A99                 mov     ecx, [ebp+var_C0] ; this
.text$mn:00003A9F                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:00003AA4                 mov     [ebp+var_D4], eax
.text$mn:00003AAA                 push    offset $SG169704 ; "name"
.text$mn:00003AAF                 mov     ecx, [ebp+var_C0] ; this
.text$mn:00003AB5                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00003ABA                 mov     [ebp+var_8C], eax
.text$mn:00003AC0                 cmp     [ebp+var_D4], 0
.text$mn:00003AC7                 jz      loc_3B8E
.text$mn:00003ACD                 cmp     [ebp+var_8C], 0
.text$mn:00003AD4                 jz      loc_3B8E
.text$mn:00003ADA                 mov     edx, 1
.text$mn:00003ADF                 imul    eax, edx, 0
.text$mn:00003AE2                 mov     ecx, [ebp+var_8C]
.text$mn:00003AE8                 movsx   edx, byte ptr [ecx+eax]
.text$mn:00003AEC                 test    edx, edx
.text$mn:00003AEE                 jz      loc_3B8E
.text$mn:00003AF4                 cmp     [ebp+nIDDlgItem], 1Eh
.text$mn:00003AFB                 jle     short loc_3B5E
.text$mn:00003AFD                 mov     eax, [ebp+nIDDlgItem]
.text$mn:00003B03                 push    eax             ; nIDDlgItem
.text$mn:00003B04                 mov     ecx, [ebp+hWnd]
.text$mn:00003B0A                 push    ecx             ; hDlg
.text$mn:00003B0B                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00003B11                 mov     [ebp+var_AC], eax
.text$mn:00003B17                 cmp     [ebp+var_AC], 0
.text$mn:00003B1E                 jz      short loc_3B5C
.text$mn:00003B20                 push    0               ; int *
.text$mn:00003B22                 push    0               ; int *
.text$mn:00003B24                 push    0FFFFFFFFh      ; int
.text$mn:00003B26                 mov     edx, [ebp+var_84]
.text$mn:00003B2C                 mov     eax, [edx+4]
.text$mn:00003B2F                 push    eax             ; unsigned int
.text$mn:00003B30                 mov     ecx, [ebp+var_8C]
.text$mn:00003B36                 push    ecx             ; char *
.text$mn:00003B37                 mov     ecx, [ebp+var_9C] ; this
.text$mn:00003B3D                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00003B42                 mov     [ebp+var_DC], eax
.text$mn:00003B48                 mov     edx, [ebp+var_DC]
.text$mn:00003B4E                 push    edx             ; lpString
.text$mn:00003B4F                 mov     eax, [ebp+var_AC]
.text$mn:00003B55                 push    eax             ; hWnd
.text$mn:00003B56                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:00003B5C
.text$mn:00003B5C loc_3B5C:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+1FEj
.text$mn:00003B5C                 jmp     short loc_3B8E
.text$mn:00003B5E ; ---------------------------------------------------------------------------
.text$mn:00003B5E
.text$mn:00003B5E loc_3B5E:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+1DBj
.text$mn:00003B5E                 mov     ecx, [ebp+nIDDlgItem]
.text$mn:00003B64                 mov     [ebp+var_B4], ecx
.text$mn:00003B6A                 cmp     [ebp+var_B4], 0
.text$mn:00003B71                 jl      short loc_3B8E
.text$mn:00003B73                 cmp     [ebp+var_B4], 8
.text$mn:00003B7A                 jle     short loc_3B7E
.text$mn:00003B7C                 jmp     short loc_3B8E
.text$mn:00003B7E ; ---------------------------------------------------------------------------
.text$mn:00003B7E
.text$mn:00003B7E loc_3B7E:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+25Aj
.text$mn:00003B7E                 mov     edx, [ebp+nIDDlgItem]
.text$mn:00003B84                 mov     eax, [ebp+var_8C]
.text$mn:00003B8A                 mov     [ebp+edx*4+var_78], eax
.text$mn:00003B8E
.text$mn:00003B8E loc_3B8E:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+1A7j
.text$mn:00003B8E                                         ; NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+1B4j ...
.text$mn:00003B8E                 jmp     loc_3A59
.text$mn:00003B93 ; ---------------------------------------------------------------------------
.text$mn:00003B93
.text$mn:00003B93 loc_3B93:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+156j
.text$mn:00003B93                 mov     [ebp+var_E4], 4
.text$mn:00003B9D                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003BA0                 call    ?getFolderHandle@UserDefineDialog@@QBEPAUHWND__@@XZ ; UserDefineDialog::getFolderHandle(void)
.text$mn:00003BA5                 mov     ecx, 4
.text$mn:00003BAA                 imul    edx, ecx, 0
.text$mn:00003BAD                 mov     [ebp+edx+hDlg], eax
.text$mn:00003BB1                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003BB4                 call    ?getKeywordsHandle@UserDefineDialog@@QBEPAUHWND__@@XZ ; UserDefineDialog::getKeywordsHandle(void)
.text$mn:00003BB9                 mov     ecx, 4
.text$mn:00003BBE                 shl     ecx, 0
.text$mn:00003BC1                 mov     [ebp+ecx+hDlg], eax
.text$mn:00003BC5                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003BC8                 call    ?getCommentHandle@UserDefineDialog@@QBEPAUHWND__@@XZ ; UserDefineDialog::getCommentHandle(void)
.text$mn:00003BCD                 mov     edx, 4
.text$mn:00003BD2                 shl     edx, 1
.text$mn:00003BD4                 mov     [ebp+edx+hDlg], eax
.text$mn:00003BD8                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003BDB                 call    ?getSymbolHandle@UserDefineDialog@@QBEPAUHWND__@@XZ ; UserDefineDialog::getSymbolHandle(void)
.text$mn:00003BE0                 mov     ecx, 4
.text$mn:00003BE5                 imul    edx, ecx, 3
.text$mn:00003BE8                 mov     [ebp+edx+hDlg], eax
.text$mn:00003BEC                 mov     eax, $SG169719
.text$mn:00003BF1                 mov     dword ptr [ebp+var_44], eax
.text$mn:00003BF4                 mov     cx, word_E00
.text$mn:00003BFB                 mov     [ebp+var_40], cx
.text$mn:00003BFF                 mov     dl, byte_E02
.text$mn:00003C05                 mov     [ebp+var_3E], dl
.text$mn:00003C08                 xor     eax, eax
.text$mn:00003C0A                 mov     [ebp+var_3D], eax
.text$mn:00003C0D                 mov     [ebp+var_39], eax
.text$mn:00003C10                 mov     [ebp+var_35], al
.text$mn:00003C13                 mov     ecx, $SG169720
.text$mn:00003C19                 mov     [ebp+var_34], ecx
.text$mn:00003C1C                 mov     edx, dword_E08
.text$mn:00003C22                 mov     [ebp+var_30], edx
.text$mn:00003C25                 mov     al, byte_E0C
.text$mn:00003C2A                 mov     [ebp+var_2C], al
.text$mn:00003C2D                 xor     ecx, ecx
.text$mn:00003C2F                 mov     [ebp+var_2B], ecx
.text$mn:00003C32                 mov     [ebp+var_27], cx
.text$mn:00003C36                 mov     [ebp+var_25], cl
.text$mn:00003C39                 mov     edx, $SG169721
.text$mn:00003C3F                 mov     [ebp+var_24], edx
.text$mn:00003C42                 mov     eax, dword_E14
.text$mn:00003C47                 mov     [ebp+var_20], eax
.text$mn:00003C4A                 xor     ecx, ecx
.text$mn:00003C4C                 mov     [ebp+var_1C], ecx
.text$mn:00003C4F                 mov     [ebp+var_18], ecx
.text$mn:00003C52                 mov     edx, $SG169722
.text$mn:00003C58                 mov     [ebp+var_14], edx
.text$mn:00003C5B                 mov     eax, dword_E1C
.text$mn:00003C60                 mov     [ebp+var_10], eax
.text$mn:00003C63                 mov     cl, byte_E20
.text$mn:00003C69                 mov     [ebp+var_C], cl
.text$mn:00003C6C                 xor     edx, edx
.text$mn:00003C6E                 mov     [ebp+var_B], edx
.text$mn:00003C71                 mov     [ebp+var_7], dx
.text$mn:00003C75                 mov     [ebp+var_5], dl
.text$mn:00003C78                 mov     [ebp+var_88], 0
.text$mn:00003C82                 jmp     short loc_3C93
.text$mn:00003C84 ; ---------------------------------------------------------------------------
.text$mn:00003C84
.text$mn:00003C84 loc_3C84:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *):loc_3E4Aj
.text$mn:00003C84                 mov     eax, [ebp+var_88]
.text$mn:00003C8A                 add     eax, 1
.text$mn:00003C8D                 mov     [ebp+var_88], eax
.text$mn:00003C93
.text$mn:00003C93 loc_3C93:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+362j
.text$mn:00003C93                 cmp     [ebp+var_88], 4
.text$mn:00003C9A                 jge     loc_3E4F
.text$mn:00003CA0                 mov     ecx, [ebp+var_88]
.text$mn:00003CA6                 shl     ecx, 4
.text$mn:00003CA9                 lea     edx, [ebp+ecx+var_44]
.text$mn:00003CAD                 push    edx             ; char *
.text$mn:00003CAE                 mov     ecx, [ebp+var_80] ; this
.text$mn:00003CB1                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00003CB6                 mov     [ebp+var_A8], eax
.text$mn:00003CBC                 cmp     [ebp+var_A8], 0
.text$mn:00003CC3                 jz      loc_3E4A
.text$mn:00003CC9                 push    offset $SG169729 ; "title"
.text$mn:00003CCE                 mov     ecx, [ebp+var_A8] ; this
.text$mn:00003CD4                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00003CD9                 mov     ecx, eax        ; this
.text$mn:00003CDB                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00003CE0                 mov     [ebp+var_7C], eax
.text$mn:00003CE3                 cmp     [ebp+var_7C], 0
.text$mn:00003CE7                 jz      short loc_3D37
.text$mn:00003CE9                 mov     eax, 1
.text$mn:00003CEE                 imul    ecx, eax, 0
.text$mn:00003CF1                 mov     edx, [ebp+var_7C]
.text$mn:00003CF4                 movsx   eax, byte ptr [edx+ecx]
.text$mn:00003CF8                 test    eax, eax
.text$mn:00003CFA                 jz      short loc_3D37
.text$mn:00003CFC                 push    0               ; int *
.text$mn:00003CFE                 push    0               ; int *
.text$mn:00003D00                 push    0FFFFFFFFh      ; int
.text$mn:00003D02                 mov     ecx, [ebp+var_84]
.text$mn:00003D08                 mov     edx, [ecx+4]
.text$mn:00003D0B                 push    edx             ; unsigned int
.text$mn:00003D0C                 mov     eax, [ebp+var_7C]
.text$mn:00003D0F                 push    eax             ; char *
.text$mn:00003D10                 mov     ecx, [ebp+var_9C] ; this
.text$mn:00003D16                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00003D1B                 mov     [ebp+var_D8], eax
.text$mn:00003D21                 mov     ecx, [ebp+var_D8]
.text$mn:00003D27                 push    ecx             ; wchar_t *
.text$mn:00003D28                 mov     edx, [ebp+var_88]
.text$mn:00003D2E                 push    edx             ; int
.text$mn:00003D2F                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00003D32                 call    ?setTabName@UserDefineDialog@@QAEXHPB_W@Z ; UserDefineDialog::setTabName(int,wchar_t const *)
.text$mn:00003D37
.text$mn:00003D37 loc_3D37:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+3C7j
.text$mn:00003D37                                         ; NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+3DAj
.text$mn:00003D37                 push    offset $SG169733 ; "Item"
.text$mn:00003D3C                 mov     ecx, [ebp+var_A8] ; this
.text$mn:00003D42                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:00003D47                 mov     [ebp+var_90], eax
.text$mn:00003D4D                 jmp     short loc_3D65
.text$mn:00003D4F ; ---------------------------------------------------------------------------
.text$mn:00003D4F
.text$mn:00003D4F loc_3D4F:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *):loc_3E45j
.text$mn:00003D4F                 push    offset $SG169737 ; "Item"
.text$mn:00003D54                 mov     ecx, [ebp+var_90] ; this
.text$mn:00003D5A                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:00003D5F                 mov     [ebp+var_90], eax
.text$mn:00003D65
.text$mn:00003D65 loc_3D65:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+42Dj
.text$mn:00003D65                 cmp     [ebp+var_90], 0
.text$mn:00003D6C                 jz      loc_3E4A
.text$mn:00003D72                 mov     ecx, [ebp+var_90] ; this
.text$mn:00003D78                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00003D7D                 mov     [ebp+var_B0], eax
.text$mn:00003D83                 lea     eax, [ebp+var_D0]
.text$mn:00003D89                 push    eax             ; int *
.text$mn:00003D8A                 push    offset $SG169741 ; char *
.text$mn:00003D8F                 mov     ecx, [ebp+var_B0] ; this
.text$mn:00003D95                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:00003D9A                 mov     [ebp+var_C4], eax
.text$mn:00003DA0                 push    offset $SG169743 ; "name"
.text$mn:00003DA5                 mov     ecx, [ebp+var_B0] ; this
.text$mn:00003DAB                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00003DB0                 mov     [ebp+var_A4], eax
.text$mn:00003DB6                 cmp     [ebp+var_C4], 0
.text$mn:00003DBD                 jz      loc_3E45
.text$mn:00003DC3                 cmp     [ebp+var_A4], 0
.text$mn:00003DCA                 jz      short loc_3E45
.text$mn:00003DCC                 mov     ecx, 1
.text$mn:00003DD1                 imul    edx, ecx, 0
.text$mn:00003DD4                 mov     eax, [ebp+var_A4]
.text$mn:00003DDA                 movsx   ecx, byte ptr [eax+edx]
.text$mn:00003DDE                 test    ecx, ecx
.text$mn:00003DE0                 jz      short loc_3E45
.text$mn:00003DE2                 mov     edx, [ebp+var_D0]
.text$mn:00003DE8                 push    edx             ; nIDDlgItem
.text$mn:00003DE9                 mov     eax, [ebp+var_88]
.text$mn:00003DEF                 mov     ecx, [ebp+eax*4+hDlg]
.text$mn:00003DF3                 push    ecx             ; hDlg
.text$mn:00003DF4                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00003DFA                 mov     [ebp+var_BC], eax
.text$mn:00003E00                 cmp     [ebp+var_BC], 0
.text$mn:00003E07                 jz      short loc_3E45
.text$mn:00003E09                 push    0               ; int *
.text$mn:00003E0B                 push    0               ; int *
.text$mn:00003E0D                 push    0FFFFFFFFh      ; int
.text$mn:00003E0F                 mov     edx, [ebp+var_84]
.text$mn:00003E15                 mov     eax, [edx+4]
.text$mn:00003E18                 push    eax             ; unsigned int
.text$mn:00003E19                 mov     ecx, [ebp+var_A4]
.text$mn:00003E1F                 push    ecx             ; char *
.text$mn:00003E20                 mov     ecx, [ebp+var_9C] ; this
.text$mn:00003E26                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00003E2B                 mov     [ebp+var_C8], eax
.text$mn:00003E31                 mov     edx, [ebp+var_C8]
.text$mn:00003E37                 push    edx             ; lpString
.text$mn:00003E38                 mov     eax, [ebp+var_BC]
.text$mn:00003E3E                 push    eax             ; hWnd
.text$mn:00003E3F                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:00003E45
.text$mn:00003E45 loc_3E45:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+49Dj
.text$mn:00003E45                                         ; NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+4AAj ...
.text$mn:00003E45                 jmp     loc_3D4F
.text$mn:00003E4A ; ---------------------------------------------------------------------------
.text$mn:00003E4A
.text$mn:00003E4A loc_3E4A:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+3A3j
.text$mn:00003E4A                                         ; NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+44Cj
.text$mn:00003E4A                 jmp     loc_3C84
.text$mn:00003E4F ; ---------------------------------------------------------------------------
.text$mn:00003E4F
.text$mn:00003E4F loc_3E4F:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+24j
.text$mn:00003E4F                                         ; NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+44j ...
.text$mn:00003E4F                 mov     ecx, [ebp+var_4]
.text$mn:00003E52                 xor     ecx, ebp
.text$mn:00003E54                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00003E59                 mov     esp, ebp
.text$mn:00003E5B                 pop     ebp
.text$mn:00003E5C                 retn    4
.text$mn:00003E5C ?changeUserDefineLang@NativeLangSpeaker@@QAEXPAVUserDefineDialog@@@Z endp
.text$mn:00003E5C
.text$mn:00003E5C ; ---------------------------------------------------------------------------
.text$mn:00003E5F                 align 10h
.text$mn:00003E60
.text$mn:00003E60 ; =============== S U B R O U T I N E =======================================
.text$mn:00003E60
.text$mn:00003E60 ; Attributes: bp-based frame
.text$mn:00003E60
.text$mn:00003E60 ; void __thiscall NativeLangSpeaker::changeUserDefineLangPopupDlg(NativeLangSpeaker *this, HWND)
.text$mn:00003E60                 public ?changeUserDefineLangPopupDlg@NativeLangSpeaker@@QAEXPAUHWND__@@@Z
.text$mn:00003E60 ?changeUserDefineLangPopupDlg@NativeLangSpeaker@@QAEXPAUHWND__@@@Z proc near
.text$mn:00003E60
.text$mn:00003E60 var_34          = dword ptr -34h
.text$mn:00003E60 nIDDlgItem      = dword ptr -30h
.text$mn:00003E60 var_2C          = dword ptr -2Ch
.text$mn:00003E60 lpString        = dword ptr -28h
.text$mn:00003E60 var_24          = dword ptr -24h
.text$mn:00003E60 var_20          = dword ptr -20h
.text$mn:00003E60 var_1C          = dword ptr -1Ch
.text$mn:00003E60 var_18          = dword ptr -18h
.text$mn:00003E60 var_14          = dword ptr -14h
.text$mn:00003E60 var_10          = dword ptr -10h
.text$mn:00003E60 var_C           = dword ptr -0Ch
.text$mn:00003E60 var_8           = dword ptr -8
.text$mn:00003E60 var_4           = dword ptr -4
.text$mn:00003E60 hWnd            = dword ptr  8
.text$mn:00003E60
.text$mn:00003E60                 push    ebp
.text$mn:00003E61                 mov     ebp, esp
.text$mn:00003E63                 sub     esp, 34h
.text$mn:00003E66                 mov     [ebp+var_C], ecx
.text$mn:00003E69                 mov     eax, [ebp+var_C]
.text$mn:00003E6C                 cmp     dword ptr [eax], 0
.text$mn:00003E6F                 jnz     short loc_3E76
.text$mn:00003E71                 jmp     loc_3FEB
.text$mn:00003E76 ; ---------------------------------------------------------------------------
.text$mn:00003E76
.text$mn:00003E76 loc_3E76:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *)+Fj
.text$mn:00003E76                 push    offset $SG169643 ; "Dialog"
.text$mn:00003E7B                 mov     ecx, [ebp+var_C]
.text$mn:00003E7E                 mov     ecx, [ecx]      ; this
.text$mn:00003E80                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00003E85                 mov     [ebp+var_4], eax
.text$mn:00003E88                 cmp     [ebp+var_4], 0
.text$mn:00003E8C                 jnz     short loc_3E93
.text$mn:00003E8E                 jmp     loc_3FEB
.text$mn:00003E93 ; ---------------------------------------------------------------------------
.text$mn:00003E93
.text$mn:00003E93 loc_3E93:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *)+2Cj
.text$mn:00003E93                 push    offset $SG169645 ; "UserDefine"
.text$mn:00003E98                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003E9B                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00003EA0                 mov     [ebp+var_4], eax
.text$mn:00003EA3                 cmp     [ebp+var_4], 0
.text$mn:00003EA7                 jnz     short loc_3EAE
.text$mn:00003EA9                 jmp     loc_3FEB
.text$mn:00003EAE ; ---------------------------------------------------------------------------
.text$mn:00003EAE
.text$mn:00003EAE loc_3EAE:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *)+47j
.text$mn:00003EAE                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00003EB3                 mov     [ebp+var_20], eax
.text$mn:00003EB6                 push    offset $SG169649 ; "StylerDialog"
.text$mn:00003EBB                 mov     ecx, [ebp+var_4] ; this
.text$mn:00003EBE                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00003EC3                 mov     [ebp+var_14], eax
.text$mn:00003EC6                 cmp     [ebp+var_14], 0
.text$mn:00003ECA                 jnz     short loc_3ED1
.text$mn:00003ECC                 jmp     loc_3FEB
.text$mn:00003ED1 ; ---------------------------------------------------------------------------
.text$mn:00003ED1
.text$mn:00003ED1 loc_3ED1:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *)+6Aj
.text$mn:00003ED1                 push    offset $SG169652 ; "title"
.text$mn:00003ED6                 mov     ecx, [ebp+var_14] ; this
.text$mn:00003ED9                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00003EDE                 mov     ecx, eax        ; this
.text$mn:00003EE0                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00003EE5                 mov     [ebp+var_10], eax
.text$mn:00003EE8                 cmp     [ebp+var_10], 0
.text$mn:00003EEC                 jz      short loc_3F2B
.text$mn:00003EEE                 mov     edx, 1
.text$mn:00003EF3                 imul    eax, edx, 0
.text$mn:00003EF6                 mov     ecx, [ebp+var_10]
.text$mn:00003EF9                 movsx   edx, byte ptr [ecx+eax]
.text$mn:00003EFD                 test    edx, edx
.text$mn:00003EFF                 jz      short loc_3F2B
.text$mn:00003F01                 push    0               ; int *
.text$mn:00003F03                 push    0               ; int *
.text$mn:00003F05                 push    0FFFFFFFFh      ; int
.text$mn:00003F07                 mov     eax, [ebp+var_C]
.text$mn:00003F0A                 mov     ecx, [eax+4]
.text$mn:00003F0D                 push    ecx             ; unsigned int
.text$mn:00003F0E                 mov     edx, [ebp+var_10]
.text$mn:00003F11                 push    edx             ; char *
.text$mn:00003F12                 mov     ecx, [ebp+var_20] ; this
.text$mn:00003F15                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00003F1A                 mov     [ebp+lpString], eax
.text$mn:00003F1D                 mov     eax, [ebp+lpString]
.text$mn:00003F20                 push    eax             ; lpString
.text$mn:00003F21                 mov     ecx, [ebp+hWnd]
.text$mn:00003F24                 push    ecx             ; hWnd
.text$mn:00003F25                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:00003F2B
.text$mn:00003F2B loc_3F2B:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *)+8Cj
.text$mn:00003F2B                                         ; NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *)+9Fj
.text$mn:00003F2B                 push    offset $SG169656 ; "Item"
.text$mn:00003F30                 mov     ecx, [ebp+var_14] ; this
.text$mn:00003F33                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:00003F38                 mov     [ebp+var_8], eax
.text$mn:00003F3B                 jmp     short loc_3F4D
.text$mn:00003F3D ; ---------------------------------------------------------------------------
.text$mn:00003F3D
.text$mn:00003F3D loc_3F3D:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *):loc_3FE6j
.text$mn:00003F3D                 push    offset $SG169660 ; "Item"
.text$mn:00003F42                 mov     ecx, [ebp+var_8] ; this
.text$mn:00003F45                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:00003F4A                 mov     [ebp+var_8], eax
.text$mn:00003F4D
.text$mn:00003F4D loc_3F4D:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *)+DBj
.text$mn:00003F4D                 cmp     [ebp+var_8], 0
.text$mn:00003F51                 jz      loc_3FEB
.text$mn:00003F57                 mov     ecx, [ebp+var_8] ; this
.text$mn:00003F5A                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00003F5F                 mov     [ebp+var_1C], eax
.text$mn:00003F62                 lea     edx, [ebp+nIDDlgItem]
.text$mn:00003F65                 push    edx             ; int *
.text$mn:00003F66                 push    offset $SG169664 ; char *
.text$mn:00003F6B                 mov     ecx, [ebp+var_1C] ; this
.text$mn:00003F6E                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:00003F73                 mov     [ebp+var_2C], eax
.text$mn:00003F76                 push    offset $SG169666 ; "name"
.text$mn:00003F7B                 mov     ecx, [ebp+var_1C] ; this
.text$mn:00003F7E                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00003F83                 mov     [ebp+var_18], eax
.text$mn:00003F86                 cmp     [ebp+var_2C], 0
.text$mn:00003F8A                 jz      short loc_3FE6
.text$mn:00003F8C                 cmp     [ebp+var_18], 0
.text$mn:00003F90                 jz      short loc_3FE6
.text$mn:00003F92                 mov     eax, 1
.text$mn:00003F97                 imul    ecx, eax, 0
.text$mn:00003F9A                 mov     edx, [ebp+var_18]
.text$mn:00003F9D                 movsx   eax, byte ptr [edx+ecx]
.text$mn:00003FA1                 test    eax, eax
.text$mn:00003FA3                 jz      short loc_3FE6
.text$mn:00003FA5                 mov     ecx, [ebp+nIDDlgItem]
.text$mn:00003FA8                 push    ecx             ; nIDDlgItem
.text$mn:00003FA9                 mov     edx, [ebp+hWnd]
.text$mn:00003FAC                 push    edx             ; hDlg
.text$mn:00003FAD                 call    dword ptr ds:__imp__GetDlgItem@8 ; GetDlgItem(x,x)
.text$mn:00003FB3                 mov     [ebp+var_24], eax
.text$mn:00003FB6                 cmp     [ebp+var_24], 0
.text$mn:00003FBA                 jz      short loc_3FE6
.text$mn:00003FBC                 push    0               ; int *
.text$mn:00003FBE                 push    0               ; int *
.text$mn:00003FC0                 push    0FFFFFFFFh      ; int
.text$mn:00003FC2                 mov     eax, [ebp+var_C]
.text$mn:00003FC5                 mov     ecx, [eax+4]
.text$mn:00003FC8                 push    ecx             ; unsigned int
.text$mn:00003FC9                 mov     edx, [ebp+var_18]
.text$mn:00003FCC                 push    edx             ; char *
.text$mn:00003FCD                 mov     ecx, [ebp+var_20] ; this
.text$mn:00003FD0                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00003FD5                 mov     [ebp+var_34], eax
.text$mn:00003FD8                 mov     eax, [ebp+var_34]
.text$mn:00003FDB                 push    eax             ; lpString
.text$mn:00003FDC                 mov     ecx, [ebp+var_24]
.text$mn:00003FDF                 push    ecx             ; hWnd
.text$mn:00003FE0                 call    dword ptr ds:__imp__SetWindowTextW@8 ; SetWindowTextW(x,x)
.text$mn:00003FE6
.text$mn:00003FE6 loc_3FE6:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *)+12Aj
.text$mn:00003FE6                                         ; NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *)+130j ...
.text$mn:00003FE6                 jmp     loc_3F3D
.text$mn:00003FEB ; ---------------------------------------------------------------------------
.text$mn:00003FEB
.text$mn:00003FEB loc_3FEB:                               ; CODE XREF: NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *)+11j
.text$mn:00003FEB                                         ; NativeLangSpeaker::changeUserDefineLangPopupDlg(HWND__ *)+2Ej ...
.text$mn:00003FEB                 mov     esp, ebp
.text$mn:00003FED                 pop     ebp
.text$mn:00003FEE                 retn    4
.text$mn:00003FEE ?changeUserDefineLangPopupDlg@NativeLangSpeaker@@QAEXPAUHWND__@@@Z endp
.text$mn:00003FEE
.text$mn:00003FEE ; ---------------------------------------------------------------------------
.text$mn:00003FF1                 align 10h
.text$mn:00004000
.text$mn:00004000 ; =============== S U B R O U T I N E =======================================
.text$mn:00004000
.text$mn:00004000 ; Attributes: bp-based frame
.text$mn:00004000
.text$mn:00004000 ; void __thiscall NativeLangSpeaker::changeFindReplaceDlgLang(NativeLangSpeaker *this, struct FindReplaceDlg *)
.text$mn:00004000                 public ?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z
.text$mn:00004000 ?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z proc near
.text$mn:00004000
.text$mn:00004000 var_A0          = dword ptr -0A0h
.text$mn:00004000 var_9C          = dword ptr -9Ch
.text$mn:00004000 var_98          = dword ptr -98h
.text$mn:00004000 var_94          = dword ptr -94h
.text$mn:00004000 var_90          = dword ptr -90h
.text$mn:00004000 var_8C          = dword ptr -8Ch
.text$mn:00004000 var_88          = dword ptr -88h
.text$mn:00004000 var_84          = dword ptr -84h
.text$mn:00004000 var_80          = byte ptr -80h
.text$mn:00004000 var_64          = byte ptr -64h
.text$mn:00004000 var_48          = byte ptr -48h
.text$mn:00004000 var_2C          = byte ptr -2Ch
.text$mn:00004000 var_10          = dword ptr -10h
.text$mn:00004000 var_C           = dword ptr -0Ch
.text$mn:00004000 var_4           = dword ptr -4
.text$mn:00004000 arg_0           = dword ptr  8
.text$mn:00004000
.text$mn:00004000                 push    ebp
.text$mn:00004001                 mov     ebp, esp
.text$mn:00004003                 push    0FFFFFFFFh
.text$mn:00004005                 push    offset __ehhandler$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z
.text$mn:0000400A                 mov     eax, large fs:0
.text$mn:00004010                 push    eax
.text$mn:00004011                 sub     esp, 94h
.text$mn:00004017                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000401C                 xor     eax, ebp
.text$mn:0000401E                 mov     [ebp+var_10], eax
.text$mn:00004021                 push    eax
.text$mn:00004022                 lea     eax, [ebp+var_C]
.text$mn:00004025                 mov     large fs:0, eax
.text$mn:0000402B                 mov     [ebp+var_8C], ecx
.text$mn:00004031                 mov     eax, [ebp+var_8C]
.text$mn:00004037                 cmp     dword ptr [eax], 0
.text$mn:0000403A                 jz      loc_4387
.text$mn:00004040                 push    offset $SG169754 ; "Dialog"
.text$mn:00004045                 mov     ecx, [ebp+var_8C]
.text$mn:0000404B                 mov     ecx, [ecx]      ; this
.text$mn:0000404D                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00004052                 mov     [ebp+var_84], eax
.text$mn:00004058                 cmp     [ebp+var_84], 0
.text$mn:0000405F                 jz      loc_4387
.text$mn:00004065                 call    ?getInstance@NppParameters@@SAPAV1@XZ ; NppParameters::getInstance(void)
.text$mn:0000406A                 mov     [ebp+var_88], eax
.text$mn:00004070                 push    offset $SG169757 ; "Find"
.text$mn:00004075                 mov     edx, [ebp+var_84]
.text$mn:0000407B                 push    edx             ; struct TiXmlNodeA *
.text$mn:0000407C                 mov     ecx, [ebp+var_8C] ; this
.text$mn:00004082                 call    ?searchDlgNode@NativeLangSpeaker@@QAEPAVTiXmlNodeA@@PAV2@PBD@Z ; NativeLangSpeaker::searchDlgNode(TiXmlNodeA *,char const *)
.text$mn:00004087                 mov     [ebp+var_84], eax
.text$mn:0000408D                 cmp     [ebp+var_84], 0
.text$mn:00004094                 jz      loc_4387
.text$mn:0000409A                 push    offset $SG169760 ; "titleFind"
.text$mn:0000409F                 mov     ecx, [ebp+var_84] ; this
.text$mn:000040A5                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:000040AA                 mov     ecx, eax        ; this
.text$mn:000040AC                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:000040B1                 mov     [ebp+var_A0], eax
.text$mn:000040B7                 push    offset $SG169762 ; "titleReplace"
.text$mn:000040BC                 mov     ecx, [ebp+var_84] ; this
.text$mn:000040C2                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:000040C7                 mov     ecx, eax        ; this
.text$mn:000040C9                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:000040CE                 mov     [ebp+var_94], eax
.text$mn:000040D4                 push    offset $SG169764 ; "titleFindInFiles"
.text$mn:000040D9                 mov     ecx, [ebp+var_84] ; this
.text$mn:000040DF                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:000040E4                 mov     ecx, eax        ; this
.text$mn:000040E6                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:000040EB                 mov     [ebp+var_9C], eax
.text$mn:000040F1                 push    offset $SG169766 ; "titleMark"
.text$mn:000040F6                 mov     ecx, [ebp+var_84] ; this
.text$mn:000040FC                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00004101                 mov     ecx, eax        ; this
.text$mn:00004103                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00004108                 mov     [ebp+var_98], eax
.text$mn:0000410E                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00004113                 mov     [ebp+var_90], eax
.text$mn:00004119                 cmp     [ebp+var_A0], 0
.text$mn:00004120                 jz      loc_41B0
.text$mn:00004126                 mov     eax, 1
.text$mn:0000412B                 imul    ecx, eax, 0
.text$mn:0000412E                 mov     edx, [ebp+var_A0]
.text$mn:00004134                 movsx   eax, byte ptr [edx+ecx]
.text$mn:00004138                 test    eax, eax
.text$mn:0000413A                 jz      short loc_41B0
.text$mn:0000413C                 push    0               ; int *
.text$mn:0000413E                 push    0               ; int *
.text$mn:00004140                 push    0FFFFFFFFh      ; int
.text$mn:00004142                 mov     ecx, [ebp+var_8C]
.text$mn:00004148                 mov     edx, [ecx+4]
.text$mn:0000414B                 push    edx             ; unsigned int
.text$mn:0000414C                 mov     eax, [ebp+var_A0]
.text$mn:00004152                 push    eax             ; char *
.text$mn:00004153                 mov     ecx, [ebp+var_90] ; this
.text$mn:00004159                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:0000415E                 push    eax             ; Str
.text$mn:0000415F                 lea     ecx, [ebp+var_80]
.text$mn:00004162                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00004167                 mov     [ebp+var_4], 0
.text$mn:0000416E                 lea     ecx, [ebp+var_80]
.text$mn:00004171                 push    ecx
.text$mn:00004172                 mov     ecx, [ebp+var_88] ; this
.text$mn:00004178                 call    ?getFindDlgTabTitiles@NppParameters@@QAEAAUFindDlgTabTitiles@1@XZ ; NppParameters::getFindDlgTabTitiles(void)
.text$mn:0000417D                 mov     ecx, eax
.text$mn:0000417F                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004184                 mov     ecx, [ebp+var_88] ; this
.text$mn:0000418A                 call    ?getFindDlgTabTitiles@NppParameters@@QAEAAUFindDlgTabTitiles@1@XZ ; NppParameters::getFindDlgTabTitiles(void)
.text$mn:0000418F                 mov     ecx, eax
.text$mn:00004191                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00004196                 push    eax
.text$mn:00004197                 push    0
.text$mn:00004199                 mov     ecx, [ebp+arg_0]
.text$mn:0000419C                 call    ?changeTabName@FindReplaceDlg@@QAEXW4DIALOG_TYPE@@PB_W@Z ; FindReplaceDlg::changeTabName(DIALOG_TYPE,wchar_t const *)
.text$mn:000041A1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000041A8                 lea     ecx, [ebp+var_80]
.text$mn:000041AB                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000041B0
.text$mn:000041B0 loc_41B0:                               ; CODE XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+120j
.text$mn:000041B0                                         ; NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+13Aj
.text$mn:000041B0                 cmp     [ebp+var_94], 0
.text$mn:000041B7                 jz      loc_424D
.text$mn:000041BD                 mov     edx, 1
.text$mn:000041C2                 imul    eax, edx, 0
.text$mn:000041C5                 mov     ecx, [ebp+var_94]
.text$mn:000041CB                 movsx   edx, byte ptr [ecx+eax]
.text$mn:000041CF                 test    edx, edx
.text$mn:000041D1                 jz      short loc_424D
.text$mn:000041D3                 push    0               ; int *
.text$mn:000041D5                 push    0               ; int *
.text$mn:000041D7                 push    0FFFFFFFFh      ; int
.text$mn:000041D9                 mov     eax, [ebp+var_8C]
.text$mn:000041DF                 mov     ecx, [eax+4]
.text$mn:000041E2                 push    ecx             ; unsigned int
.text$mn:000041E3                 mov     edx, [ebp+var_94]
.text$mn:000041E9                 push    edx             ; char *
.text$mn:000041EA                 mov     ecx, [ebp+var_90] ; this
.text$mn:000041F0                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:000041F5                 push    eax             ; Str
.text$mn:000041F6                 lea     ecx, [ebp+var_64]
.text$mn:000041F9                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000041FE                 mov     [ebp+var_4], 1
.text$mn:00004205                 lea     eax, [ebp+var_64]
.text$mn:00004208                 push    eax
.text$mn:00004209                 mov     ecx, [ebp+var_88] ; this
.text$mn:0000420F                 call    ?getFindDlgTabTitiles@NppParameters@@QAEAAUFindDlgTabTitiles@1@XZ ; NppParameters::getFindDlgTabTitiles(void)
.text$mn:00004214                 add     eax, 1Ch
.text$mn:00004217                 mov     ecx, eax
.text$mn:00004219                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000421E                 mov     ecx, [ebp+var_88] ; this
.text$mn:00004224                 call    ?getFindDlgTabTitiles@NppParameters@@QAEAAUFindDlgTabTitiles@1@XZ ; NppParameters::getFindDlgTabTitiles(void)
.text$mn:00004229                 add     eax, 1Ch
.text$mn:0000422C                 mov     ecx, eax
.text$mn:0000422E                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00004233                 push    eax
.text$mn:00004234                 push    1
.text$mn:00004236                 mov     ecx, [ebp+arg_0]
.text$mn:00004239                 call    ?changeTabName@FindReplaceDlg@@QAEXW4DIALOG_TYPE@@PB_W@Z ; FindReplaceDlg::changeTabName(DIALOG_TYPE,wchar_t const *)
.text$mn:0000423E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00004245                 lea     ecx, [ebp+var_64]
.text$mn:00004248                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000424D
.text$mn:0000424D loc_424D:                               ; CODE XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+1B7j
.text$mn:0000424D                                         ; NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+1D1j
.text$mn:0000424D                 cmp     [ebp+var_9C], 0
.text$mn:00004254                 jz      loc_42EA
.text$mn:0000425A                 mov     ecx, 1
.text$mn:0000425F                 imul    edx, ecx, 0
.text$mn:00004262                 mov     eax, [ebp+var_9C]
.text$mn:00004268                 movsx   ecx, byte ptr [eax+edx]
.text$mn:0000426C                 test    ecx, ecx
.text$mn:0000426E                 jz      short loc_42EA
.text$mn:00004270                 push    0               ; int *
.text$mn:00004272                 push    0               ; int *
.text$mn:00004274                 push    0FFFFFFFFh      ; int
.text$mn:00004276                 mov     edx, [ebp+var_8C]
.text$mn:0000427C                 mov     eax, [edx+4]
.text$mn:0000427F                 push    eax             ; unsigned int
.text$mn:00004280                 mov     ecx, [ebp+var_9C]
.text$mn:00004286                 push    ecx             ; char *
.text$mn:00004287                 mov     ecx, [ebp+var_90] ; this
.text$mn:0000428D                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00004292                 push    eax             ; Str
.text$mn:00004293                 lea     ecx, [ebp+var_48]
.text$mn:00004296                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000429B                 mov     [ebp+var_4], 2
.text$mn:000042A2                 lea     edx, [ebp+var_48]
.text$mn:000042A5                 push    edx
.text$mn:000042A6                 mov     ecx, [ebp+var_88] ; this
.text$mn:000042AC                 call    ?getFindDlgTabTitiles@NppParameters@@QAEAAUFindDlgTabTitiles@1@XZ ; NppParameters::getFindDlgTabTitiles(void)
.text$mn:000042B1                 add     eax, 38h ; '8'
.text$mn:000042B4                 mov     ecx, eax
.text$mn:000042B6                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000042BB                 mov     ecx, [ebp+var_88] ; this
.text$mn:000042C1                 call    ?getFindDlgTabTitiles@NppParameters@@QAEAAUFindDlgTabTitiles@1@XZ ; NppParameters::getFindDlgTabTitiles(void)
.text$mn:000042C6                 add     eax, 38h ; '8'
.text$mn:000042C9                 mov     ecx, eax
.text$mn:000042CB                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:000042D0                 push    eax
.text$mn:000042D1                 push    2
.text$mn:000042D3                 mov     ecx, [ebp+arg_0]
.text$mn:000042D6                 call    ?changeTabName@FindReplaceDlg@@QAEXW4DIALOG_TYPE@@PB_W@Z ; FindReplaceDlg::changeTabName(DIALOG_TYPE,wchar_t const *)
.text$mn:000042DB                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000042E2                 lea     ecx, [ebp+var_48]
.text$mn:000042E5                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000042EA
.text$mn:000042EA loc_42EA:                               ; CODE XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+254j
.text$mn:000042EA                                         ; NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+26Ej
.text$mn:000042EA                 cmp     [ebp+var_98], 0
.text$mn:000042F1                 jz      loc_4387
.text$mn:000042F7                 mov     eax, 1
.text$mn:000042FC                 imul    ecx, eax, 0
.text$mn:000042FF                 mov     edx, [ebp+var_98]
.text$mn:00004305                 movsx   eax, byte ptr [edx+ecx]
.text$mn:00004309                 test    eax, eax
.text$mn:0000430B                 jz      short loc_4387
.text$mn:0000430D                 push    0               ; int *
.text$mn:0000430F                 push    0               ; int *
.text$mn:00004311                 push    0FFFFFFFFh      ; int
.text$mn:00004313                 mov     ecx, [ebp+var_8C]
.text$mn:00004319                 mov     edx, [ecx+4]
.text$mn:0000431C                 push    edx             ; unsigned int
.text$mn:0000431D                 mov     eax, [ebp+var_98]
.text$mn:00004323                 push    eax             ; char *
.text$mn:00004324                 mov     ecx, [ebp+var_90] ; this
.text$mn:0000432A                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:0000432F                 push    eax             ; Str
.text$mn:00004330                 lea     ecx, [ebp+var_2C]
.text$mn:00004333                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00004338                 mov     [ebp+var_4], 3
.text$mn:0000433F                 lea     ecx, [ebp+var_2C]
.text$mn:00004342                 push    ecx
.text$mn:00004343                 mov     ecx, [ebp+var_88] ; this
.text$mn:00004349                 call    ?getFindDlgTabTitiles@NppParameters@@QAEAAUFindDlgTabTitiles@1@XZ ; NppParameters::getFindDlgTabTitiles(void)
.text$mn:0000434E                 add     eax, 54h ; 'T'
.text$mn:00004351                 mov     ecx, eax
.text$mn:00004353                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00004358                 mov     ecx, [ebp+var_88] ; this
.text$mn:0000435E                 call    ?getFindDlgTabTitiles@NppParameters@@QAEAAUFindDlgTabTitiles@1@XZ ; NppParameters::getFindDlgTabTitiles(void)
.text$mn:00004363                 add     eax, 54h ; 'T'
.text$mn:00004366                 mov     ecx, eax
.text$mn:00004368                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000436D                 push    eax
.text$mn:0000436E                 push    3
.text$mn:00004370                 mov     ecx, [ebp+arg_0]
.text$mn:00004373                 call    ?changeTabName@FindReplaceDlg@@QAEXW4DIALOG_TYPE@@PB_W@Z ; FindReplaceDlg::changeTabName(DIALOG_TYPE,wchar_t const *)
.text$mn:00004378                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000437F                 lea     ecx, [ebp+var_2C]
.text$mn:00004382                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00004387
.text$mn:00004387 loc_4387:                               ; CODE XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+3Aj
.text$mn:00004387                                         ; NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+5Fj ...
.text$mn:00004387                 push    0               ; char *
.text$mn:00004389                 push    offset $SG169808 ; "Find"
.text$mn:0000438E                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00004391                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00004396                 push    eax             ; hWnd
.text$mn:00004397                 mov     ecx, [ebp+var_8C] ; this
.text$mn:0000439D                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:000043A2                 mov     ecx, [ebp+var_C]
.text$mn:000043A5                 mov     large fs:0, ecx
.text$mn:000043AC                 pop     ecx
.text$mn:000043AD                 mov     ecx, [ebp+var_10]
.text$mn:000043B0                 xor     ecx, ebp
.text$mn:000043B2                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000043B7                 mov     esp, ebp
.text$mn:000043B9                 pop     ebp
.text$mn:000043BA                 retn    4
.text$mn:000043BA ?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z endp
.text$mn:000043BA
.text$mn:000043BA ; ---------------------------------------------------------------------------
.text$mn:000043BD                 align 10h
.text$mn:000043C0
.text$mn:000043C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000043C0
.text$mn:000043C0 ; Attributes: bp-based frame
.text$mn:000043C0
.text$mn:000043C0 ; void __thiscall NativeLangSpeaker::changePrefereceDlgLang(NativeLangSpeaker *this, struct PreferenceDlg *)
.text$mn:000043C0                 public ?changePrefereceDlgLang@NativeLangSpeaker@@QAEXAAVPreferenceDlg@@@Z
.text$mn:000043C0 ?changePrefereceDlgLang@NativeLangSpeaker@@QAEXAAVPreferenceDlg@@@Z proc near
.text$mn:000043C0
.text$mn:000043C0 var_CC          = dword ptr -0CCh
.text$mn:000043C0 var_C8          = dword ptr -0C8h
.text$mn:000043C0 var_C4          = dword ptr -0C4h
.text$mn:000043C0 var_C0          = dword ptr -0C0h
.text$mn:000043C0 var_BC          = dword ptr -0BCh
.text$mn:000043C0 var_B8          = dword ptr -0B8h
.text$mn:000043C0 var_B4          = dword ptr -0B4h
.text$mn:000043C0 var_B0          = dword ptr -0B0h
.text$mn:000043C0 var_AC          = dword ptr -0ACh
.text$mn:000043C0 var_A8          = dword ptr -0A8h
.text$mn:000043C0 var_A4          = dword ptr -0A4h
.text$mn:000043C0 var_A0          = dword ptr -0A0h
.text$mn:000043C0 var_9C          = dword ptr -9Ch
.text$mn:000043C0 var_98          = dword ptr -98h
.text$mn:000043C0 var_94          = dword ptr -94h
.text$mn:000043C0 var_90          = dword ptr -90h
.text$mn:000043C0 var_8C          = dword ptr -8Ch
.text$mn:000043C0 var_88          = dword ptr -88h
.text$mn:000043C0 var_84          = byte ptr -84h
.text$mn:000043C0 var_4           = dword ptr -4
.text$mn:000043C0 arg_0           = dword ptr  8
.text$mn:000043C0
.text$mn:000043C0                 push    ebp
.text$mn:000043C1                 mov     ebp, esp
.text$mn:000043C3                 sub     esp, 0CCh
.text$mn:000043C9                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000043CE                 xor     eax, ebp
.text$mn:000043D0                 mov     [ebp+var_4], eax
.text$mn:000043D3                 mov     [ebp+var_88], ecx
.text$mn:000043D9                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000043DC                 call    ?getListSelectedIndex@PreferenceDlg@@QBEHXZ ; PreferenceDlg::getListSelectedIndex(void)
.text$mn:000043E1                 mov     [ebp+var_C4], eax
.text$mn:000043E7                 push    0               ; char *
.text$mn:000043E9                 push    offset $SG169814 ; "Preference"
.text$mn:000043EE                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000043F1                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000043F6                 push    eax             ; hWnd
.text$mn:000043F7                 mov     ecx, [ebp+var_88] ; this
.text$mn:000043FD                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:00004402                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00004407                 mov     [ebp+var_8C], eax
.text$mn:0000440D                 lea     eax, [ebp+var_84]
.text$mn:00004413                 push    eax             ; char *
.text$mn:00004414                 push    offset $SG169817 ; "Global"
.text$mn:00004419                 mov     ecx, [ebp+arg_0]
.text$mn:0000441C                 add     ecx, 30h ; '0'  ; this
.text$mn:0000441F                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00004424                 push    eax             ; hWnd
.text$mn:00004425                 mov     ecx, [ebp+var_88] ; this
.text$mn:0000442B                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:00004430                 mov     ecx, 1
.text$mn:00004435                 imul    edx, ecx, 0
.text$mn:00004438                 movsx   eax, [ebp+edx+var_84]
.text$mn:00004440                 test    eax, eax
.text$mn:00004442                 jz      short loc_4480
.text$mn:00004444                 push    0               ; int *
.text$mn:00004446                 push    0               ; int *
.text$mn:00004448                 push    0FFFFFFFFh      ; int
.text$mn:0000444A                 mov     ecx, [ebp+var_88]
.text$mn:00004450                 mov     edx, [ecx+4]
.text$mn:00004453                 push    edx             ; unsigned int
.text$mn:00004454                 lea     eax, [ebp+var_84]
.text$mn:0000445A                 push    eax             ; char *
.text$mn:0000445B                 mov     ecx, [ebp+var_8C] ; this
.text$mn:00004461                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00004466                 mov     [ebp+var_C8], eax
.text$mn:0000446C                 mov     ecx, [ebp+var_C8]
.text$mn:00004472                 push    ecx             ; wchar_t *
.text$mn:00004473                 push    offset $SG169820 ; "Global"
.text$mn:00004478                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000447B                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:00004480
.text$mn:00004480 loc_4480:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+82j
.text$mn:00004480                 lea     edx, [ebp+var_84]
.text$mn:00004486                 push    edx             ; char *
.text$mn:00004487                 push    offset $SG169821 ; "Scintillas"
.text$mn:0000448C                 mov     ecx, [ebp+arg_0]
.text$mn:0000448F                 add     ecx, 50h ; 'P'  ; this
.text$mn:00004492                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00004497                 push    eax             ; hWnd
.text$mn:00004498                 mov     ecx, [ebp+var_88] ; this
.text$mn:0000449E                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:000044A3                 mov     eax, 1
.text$mn:000044A8                 imul    ecx, eax, 0
.text$mn:000044AB                 movsx   edx, [ebp+ecx+var_84]
.text$mn:000044B3                 test    edx, edx
.text$mn:000044B5                 jz      short loc_44F3
.text$mn:000044B7                 push    0               ; int *
.text$mn:000044B9                 push    0               ; int *
.text$mn:000044BB                 push    0FFFFFFFFh      ; int
.text$mn:000044BD                 mov     eax, [ebp+var_88]
.text$mn:000044C3                 mov     ecx, [eax+4]
.text$mn:000044C6                 push    ecx             ; unsigned int
.text$mn:000044C7                 lea     edx, [ebp+var_84]
.text$mn:000044CD                 push    edx             ; char *
.text$mn:000044CE                 mov     ecx, [ebp+var_8C] ; this
.text$mn:000044D4                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:000044D9                 mov     [ebp+var_CC], eax
.text$mn:000044DF                 mov     eax, [ebp+var_CC]
.text$mn:000044E5                 push    eax             ; wchar_t *
.text$mn:000044E6                 push    offset $SG169824 ; "Scintillas"
.text$mn:000044EB                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000044EE                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:000044F3
.text$mn:000044F3 loc_44F3:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+F5j
.text$mn:000044F3                 lea     ecx, [ebp+var_84]
.text$mn:000044F9                 push    ecx             ; char *
.text$mn:000044FA                 push    offset $SG169825 ; "NewDoc"
.text$mn:000044FF                 mov     ecx, [ebp+arg_0]
.text$mn:00004502                 add     ecx, 1B9DCh     ; this
.text$mn:00004508                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:0000450D                 push    eax             ; hWnd
.text$mn:0000450E                 mov     ecx, [ebp+var_88] ; this
.text$mn:00004514                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:00004519                 mov     edx, 1
.text$mn:0000451E                 imul    eax, edx, 0
.text$mn:00004521                 movsx   ecx, [ebp+eax+var_84]
.text$mn:00004529                 test    ecx, ecx
.text$mn:0000452B                 jz      short loc_4569
.text$mn:0000452D                 push    0               ; int *
.text$mn:0000452F                 push    0               ; int *
.text$mn:00004531                 push    0FFFFFFFFh      ; int
.text$mn:00004533                 mov     edx, [ebp+var_88]
.text$mn:00004539                 mov     eax, [edx+4]
.text$mn:0000453C                 push    eax             ; unsigned int
.text$mn:0000453D                 lea     ecx, [ebp+var_84]
.text$mn:00004543                 push    ecx             ; char *
.text$mn:00004544                 mov     ecx, [ebp+var_8C] ; this
.text$mn:0000454A                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:0000454F                 mov     [ebp+var_98], eax
.text$mn:00004555                 mov     edx, [ebp+var_98]
.text$mn:0000455B                 push    edx             ; wchar_t *
.text$mn:0000455C                 push    offset $SG169828 ; "NewDoc"
.text$mn:00004561                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00004564                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:00004569
.text$mn:00004569 loc_4569:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+16Bj
.text$mn:00004569                 lea     eax, [ebp+var_84]
.text$mn:0000456F                 push    eax             ; char *
.text$mn:00004570                 push    offset $SG169829 ; "DefaultDir"
.text$mn:00004575                 mov     ecx, [ebp+arg_0]
.text$mn:00004578                 add     ecx, 1BA0Ch     ; this
.text$mn:0000457E                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00004583                 push    eax             ; hWnd
.text$mn:00004584                 mov     ecx, [ebp+var_88] ; this
.text$mn:0000458A                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:0000458F                 mov     ecx, 1
.text$mn:00004594                 imul    edx, ecx, 0
.text$mn:00004597                 movsx   eax, [ebp+edx+var_84]
.text$mn:0000459F                 test    eax, eax
.text$mn:000045A1                 jz      short loc_45DF
.text$mn:000045A3                 push    0               ; int *
.text$mn:000045A5                 push    0               ; int *
.text$mn:000045A7                 push    0FFFFFFFFh      ; int
.text$mn:000045A9                 mov     ecx, [ebp+var_88]
.text$mn:000045AF                 mov     edx, [ecx+4]
.text$mn:000045B2                 push    edx             ; unsigned int
.text$mn:000045B3                 lea     eax, [ebp+var_84]
.text$mn:000045B9                 push    eax             ; char *
.text$mn:000045BA                 mov     ecx, [ebp+var_8C] ; this
.text$mn:000045C0                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:000045C5                 mov     [ebp+var_C0], eax
.text$mn:000045CB                 mov     ecx, [ebp+var_C0]
.text$mn:000045D1                 push    ecx             ; wchar_t *
.text$mn:000045D2                 push    offset $SG169832 ; "DefaultDir"
.text$mn:000045D7                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000045DA                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:000045DF
.text$mn:000045DF loc_45DF:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+1E1j
.text$mn:000045DF                 lea     edx, [ebp+var_84]
.text$mn:000045E5                 push    edx             ; char *
.text$mn:000045E6                 push    offset $SG169833 ; "RecentFilesHistory"
.text$mn:000045EB                 mov     ecx, [ebp+arg_0]
.text$mn:000045EE                 add     ecx, 1BA2Ch     ; this
.text$mn:000045F4                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000045F9                 push    eax             ; hWnd
.text$mn:000045FA                 mov     ecx, [ebp+var_88] ; this
.text$mn:00004600                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:00004605                 mov     eax, 1
.text$mn:0000460A                 imul    ecx, eax, 0
.text$mn:0000460D                 movsx   edx, [ebp+ecx+var_84]
.text$mn:00004615                 test    edx, edx
.text$mn:00004617                 jz      short loc_4655
.text$mn:00004619                 push    0               ; int *
.text$mn:0000461B                 push    0               ; int *
.text$mn:0000461D                 push    0FFFFFFFFh      ; int
.text$mn:0000461F                 mov     eax, [ebp+var_88]
.text$mn:00004625                 mov     ecx, [eax+4]
.text$mn:00004628                 push    ecx             ; unsigned int
.text$mn:00004629                 lea     edx, [ebp+var_84]
.text$mn:0000462F                 push    edx             ; char *
.text$mn:00004630                 mov     ecx, [ebp+var_8C] ; this
.text$mn:00004636                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:0000463B                 mov     [ebp+var_A0], eax
.text$mn:00004641                 mov     eax, [ebp+var_A0]
.text$mn:00004647                 push    eax             ; wchar_t *
.text$mn:00004648                 push    offset $SG169836 ; "RecentFilesHistory"
.text$mn:0000464D                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00004650                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:00004655
.text$mn:00004655 loc_4655:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+257j
.text$mn:00004655                 lea     ecx, [ebp+var_84]
.text$mn:0000465B                 push    ecx             ; char *
.text$mn:0000465C                 push    offset $SG169837 ; "FileAssoc"
.text$mn:00004661                 mov     ecx, [ebp+arg_0]
.text$mn:00004664                 add     ecx, 0DCh ; '_' ; this
.text$mn:0000466A                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:0000466F                 push    eax             ; hWnd
.text$mn:00004670                 mov     ecx, [ebp+var_88] ; this
.text$mn:00004676                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:0000467B                 mov     edx, 1
.text$mn:00004680                 imul    eax, edx, 0
.text$mn:00004683                 movsx   ecx, [ebp+eax+var_84]
.text$mn:0000468B                 test    ecx, ecx
.text$mn:0000468D                 jz      short loc_46CB
.text$mn:0000468F                 push    0               ; int *
.text$mn:00004691                 push    0               ; int *
.text$mn:00004693                 push    0FFFFFFFFh      ; int
.text$mn:00004695                 mov     edx, [ebp+var_88]
.text$mn:0000469B                 mov     eax, [edx+4]
.text$mn:0000469E                 push    eax             ; unsigned int
.text$mn:0000469F                 lea     ecx, [ebp+var_84]
.text$mn:000046A5                 push    ecx             ; char *
.text$mn:000046A6                 mov     ecx, [ebp+var_8C] ; this
.text$mn:000046AC                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:000046B1                 mov     [ebp+var_B8], eax
.text$mn:000046B7                 mov     edx, [ebp+var_B8]
.text$mn:000046BD                 push    edx             ; wchar_t *
.text$mn:000046BE                 push    offset $SG169840 ; "FileAssoc"
.text$mn:000046C3                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000046C6                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:000046CB
.text$mn:000046CB loc_46CB:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+2CDj
.text$mn:000046CB                 lea     eax, [ebp+var_84]
.text$mn:000046D1                 push    eax             ; char *
.text$mn:000046D2                 push    offset $SG169841 ; "LangMenu"
.text$mn:000046D7                 mov     ecx, [ebp+arg_0]
.text$mn:000046DA                 add     ecx, 100h       ; this
.text$mn:000046E0                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000046E5                 push    eax             ; hWnd
.text$mn:000046E6                 mov     ecx, [ebp+var_88] ; this
.text$mn:000046EC                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:000046F1                 mov     ecx, 1
.text$mn:000046F6                 imul    edx, ecx, 0
.text$mn:000046F9                 movsx   eax, [ebp+edx+var_84]
.text$mn:00004701                 test    eax, eax
.text$mn:00004703                 jz      short loc_4741
.text$mn:00004705                 push    0               ; int *
.text$mn:00004707                 push    0               ; int *
.text$mn:00004709                 push    0FFFFFFFFh      ; int
.text$mn:0000470B                 mov     ecx, [ebp+var_88]
.text$mn:00004711                 mov     edx, [ecx+4]
.text$mn:00004714                 push    edx             ; unsigned int
.text$mn:00004715                 lea     eax, [ebp+var_84]
.text$mn:0000471B                 push    eax             ; char *
.text$mn:0000471C                 mov     ecx, [ebp+var_8C] ; this
.text$mn:00004722                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00004727                 mov     [ebp+var_A8], eax
.text$mn:0000472D                 mov     ecx, [ebp+var_A8]
.text$mn:00004733                 push    ecx             ; wchar_t *
.text$mn:00004734                 push    offset $SG169844 ; "LangMenu"
.text$mn:00004739                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000473C                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:00004741
.text$mn:00004741 loc_4741:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+343j
.text$mn:00004741                 lea     edx, [ebp+var_84]
.text$mn:00004747                 push    edx             ; char *
.text$mn:00004748                 push    offset $SG169845 ; "TabSettings"
.text$mn:0000474D                 mov     ecx, [ebp+arg_0]
.text$mn:00004750                 add     ecx, 1B934h     ; this
.text$mn:00004756                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:0000475B                 push    eax             ; hWnd
.text$mn:0000475C                 mov     ecx, [ebp+var_88] ; this
.text$mn:00004762                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:00004767                 mov     eax, 1
.text$mn:0000476C                 imul    ecx, eax, 0
.text$mn:0000476F                 movsx   edx, [ebp+ecx+var_84]
.text$mn:00004777                 test    edx, edx
.text$mn:00004779                 jz      short loc_47B7
.text$mn:0000477B                 push    0               ; int *
.text$mn:0000477D                 push    0               ; int *
.text$mn:0000477F                 push    0FFFFFFFFh      ; int
.text$mn:00004781                 mov     eax, [ebp+var_88]
.text$mn:00004787                 mov     ecx, [eax+4]
.text$mn:0000478A                 push    ecx             ; unsigned int
.text$mn:0000478B                 lea     edx, [ebp+var_84]
.text$mn:00004791                 push    edx             ; char *
.text$mn:00004792                 mov     ecx, [ebp+var_8C] ; this
.text$mn:00004798                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:0000479D                 mov     [ebp+var_90], eax
.text$mn:000047A3                 mov     eax, [ebp+var_90]
.text$mn:000047A9                 push    eax             ; wchar_t *
.text$mn:000047AA                 push    offset $SG169848 ; "TabSettings"
.text$mn:000047AF                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000047B2                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:000047B7
.text$mn:000047B7 loc_47B7:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+3B9j
.text$mn:000047B7                 lea     ecx, [ebp+var_84]
.text$mn:000047BD                 push    ecx             ; char *
.text$mn:000047BE                 push    offset $SG169849 ; "Print"
.text$mn:000047C3                 mov     ecx, [ebp+arg_0]
.text$mn:000047C6                 add     ecx, 1B9A0h     ; this
.text$mn:000047CC                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000047D1                 push    eax             ; hWnd
.text$mn:000047D2                 mov     ecx, [ebp+var_88] ; this
.text$mn:000047D8                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:000047DD                 mov     edx, 1
.text$mn:000047E2                 imul    eax, edx, 0
.text$mn:000047E5                 movsx   ecx, [ebp+eax+var_84]
.text$mn:000047ED                 test    ecx, ecx
.text$mn:000047EF                 jz      short loc_482D
.text$mn:000047F1                 push    0               ; int *
.text$mn:000047F3                 push    0               ; int *
.text$mn:000047F5                 push    0FFFFFFFFh      ; int
.text$mn:000047F7                 mov     edx, [ebp+var_88]
.text$mn:000047FD                 mov     eax, [edx+4]
.text$mn:00004800                 push    eax             ; unsigned int
.text$mn:00004801                 lea     ecx, [ebp+var_84]
.text$mn:00004807                 push    ecx             ; char *
.text$mn:00004808                 mov     ecx, [ebp+var_8C] ; this
.text$mn:0000480E                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00004813                 mov     [ebp+var_B0], eax
.text$mn:00004819                 mov     edx, [ebp+var_B0]
.text$mn:0000481F                 push    edx             ; wchar_t *
.text$mn:00004820                 push    offset $SG169852 ; "Print"
.text$mn:00004825                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00004828                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:0000482D
.text$mn:0000482D loc_482D:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+42Fj
.text$mn:0000482D                 lea     eax, [ebp+var_84]
.text$mn:00004833                 push    eax             ; char *
.text$mn:00004834                 push    offset $SG169853 ; "MISC"
.text$mn:00004839                 mov     ecx, [ebp+arg_0]
.text$mn:0000483C                 add     ecx, 0BCh ; '+' ; this
.text$mn:00004842                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00004847                 push    eax             ; hWnd
.text$mn:00004848                 mov     ecx, [ebp+var_88] ; this
.text$mn:0000484E                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:00004853                 mov     ecx, 1
.text$mn:00004858                 imul    edx, ecx, 0
.text$mn:0000485B                 movsx   eax, [ebp+edx+var_84]
.text$mn:00004863                 test    eax, eax
.text$mn:00004865                 jz      short loc_48A3
.text$mn:00004867                 push    0               ; int *
.text$mn:00004869                 push    0               ; int *
.text$mn:0000486B                 push    0FFFFFFFFh      ; int
.text$mn:0000486D                 mov     ecx, [ebp+var_88]
.text$mn:00004873                 mov     edx, [ecx+4]
.text$mn:00004876                 push    edx             ; unsigned int
.text$mn:00004877                 lea     eax, [ebp+var_84]
.text$mn:0000487D                 push    eax             ; char *
.text$mn:0000487E                 mov     ecx, [ebp+var_8C] ; this
.text$mn:00004884                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00004889                 mov     [ebp+var_94], eax
.text$mn:0000488F                 mov     ecx, [ebp+var_94]
.text$mn:00004895                 push    ecx             ; wchar_t *
.text$mn:00004896                 push    offset $SG169856 ; "MISC"
.text$mn:0000489B                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000489E                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:000048A3
.text$mn:000048A3 loc_48A3:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+4A5j
.text$mn:000048A3                 lea     edx, [ebp+var_84]
.text$mn:000048A9                 push    edx             ; char *
.text$mn:000048AA                 push    offset $SG169857 ; "Backup"
.text$mn:000048AF                 mov     ecx, [ebp+arg_0]
.text$mn:000048B2                 add     ecx, 1BAF4h     ; this
.text$mn:000048B8                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000048BD                 push    eax             ; hWnd
.text$mn:000048BE                 mov     ecx, [ebp+var_88] ; this
.text$mn:000048C4                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:000048C9                 mov     eax, 1
.text$mn:000048CE                 imul    ecx, eax, 0
.text$mn:000048D1                 movsx   edx, [ebp+ecx+var_84]
.text$mn:000048D9                 test    edx, edx
.text$mn:000048DB                 jz      short loc_4919
.text$mn:000048DD                 push    0               ; int *
.text$mn:000048DF                 push    0               ; int *
.text$mn:000048E1                 push    0FFFFFFFFh      ; int
.text$mn:000048E3                 mov     eax, [ebp+var_88]
.text$mn:000048E9                 mov     ecx, [eax+4]
.text$mn:000048EC                 push    ecx             ; unsigned int
.text$mn:000048ED                 lea     edx, [ebp+var_84]
.text$mn:000048F3                 push    edx             ; char *
.text$mn:000048F4                 mov     ecx, [ebp+var_8C] ; this
.text$mn:000048FA                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:000048FF                 mov     [ebp+var_9C], eax
.text$mn:00004905                 mov     eax, [ebp+var_9C]
.text$mn:0000490B                 push    eax             ; wchar_t *
.text$mn:0000490C                 push    offset $SG169860 ; "Backup"
.text$mn:00004911                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00004914                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:00004919
.text$mn:00004919 loc_4919:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+51Bj
.text$mn:00004919                 lea     ecx, [ebp+var_84]
.text$mn:0000491F                 push    ecx             ; char *
.text$mn:00004920                 push    offset $SG169861 ; "AutoCompletion"
.text$mn:00004925                 mov     ecx, [ebp+arg_0]
.text$mn:00004928                 add     ecx, 1BB14h     ; this
.text$mn:0000492E                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00004933                 push    eax             ; hWnd
.text$mn:00004934                 mov     ecx, [ebp+var_88] ; this
.text$mn:0000493A                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:0000493F                 mov     edx, 1
.text$mn:00004944                 imul    eax, edx, 0
.text$mn:00004947                 movsx   ecx, [ebp+eax+var_84]
.text$mn:0000494F                 test    ecx, ecx
.text$mn:00004951                 jz      short loc_498F
.text$mn:00004953                 push    0               ; int *
.text$mn:00004955                 push    0               ; int *
.text$mn:00004957                 push    0FFFFFFFFh      ; int
.text$mn:00004959                 mov     edx, [ebp+var_88]
.text$mn:0000495F                 mov     eax, [edx+4]
.text$mn:00004962                 push    eax             ; unsigned int
.text$mn:00004963                 lea     ecx, [ebp+var_84]
.text$mn:00004969                 push    ecx             ; char *
.text$mn:0000496A                 mov     ecx, [ebp+var_8C] ; this
.text$mn:00004970                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00004975                 mov     [ebp+var_A4], eax
.text$mn:0000497B                 mov     edx, [ebp+var_A4]
.text$mn:00004981                 push    edx             ; wchar_t *
.text$mn:00004982                 push    offset $SG169864 ; "AutoCompletion"
.text$mn:00004987                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000498A                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:0000498F
.text$mn:0000498F loc_498F:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+591j
.text$mn:0000498F                 lea     eax, [ebp+var_84]
.text$mn:00004995                 push    eax             ; char *
.text$mn:00004996                 push    offset $SG169865 ; "MultiInstance"
.text$mn:0000499B                 mov     ecx, [ebp+arg_0]
.text$mn:0000499E                 add     ecx, 1BB80h     ; this
.text$mn:000049A4                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:000049A9                 push    eax             ; hWnd
.text$mn:000049AA                 mov     ecx, [ebp+var_88] ; this
.text$mn:000049B0                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:000049B5                 mov     ecx, 1
.text$mn:000049BA                 imul    edx, ecx, 0
.text$mn:000049BD                 movsx   eax, [ebp+edx+var_84]
.text$mn:000049C5                 test    eax, eax
.text$mn:000049C7                 jz      short loc_4A05
.text$mn:000049C9                 push    0               ; int *
.text$mn:000049CB                 push    0               ; int *
.text$mn:000049CD                 push    0FFFFFFFFh      ; int
.text$mn:000049CF                 mov     ecx, [ebp+var_88]
.text$mn:000049D5                 mov     edx, [ecx+4]
.text$mn:000049D8                 push    edx             ; unsigned int
.text$mn:000049D9                 lea     eax, [ebp+var_84]
.text$mn:000049DF                 push    eax             ; char *
.text$mn:000049E0                 mov     ecx, [ebp+var_8C] ; this
.text$mn:000049E6                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:000049EB                 mov     [ebp+var_AC], eax
.text$mn:000049F1                 mov     ecx, [ebp+var_AC]
.text$mn:000049F7                 push    ecx             ; wchar_t *
.text$mn:000049F8                 push    offset $SG169868 ; "MultiInstance"
.text$mn:000049FD                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00004A00                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:00004A05
.text$mn:00004A05 loc_4A05:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+607j
.text$mn:00004A05                 lea     edx, [ebp+var_84]
.text$mn:00004A0B                 push    edx             ; char *
.text$mn:00004A0C                 push    offset $SG169869 ; "Delimiter"
.text$mn:00004A11                 mov     ecx, [ebp+arg_0]
.text$mn:00004A14                 add     ecx, 1BBA0h     ; this
.text$mn:00004A1A                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00004A1F                 push    eax             ; hWnd
.text$mn:00004A20                 mov     ecx, [ebp+var_88] ; this
.text$mn:00004A26                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:00004A2B                 mov     eax, 1
.text$mn:00004A30                 imul    ecx, eax, 0
.text$mn:00004A33                 movsx   edx, [ebp+ecx+var_84]
.text$mn:00004A3B                 test    edx, edx
.text$mn:00004A3D                 jz      short loc_4A7B
.text$mn:00004A3F                 push    0               ; int *
.text$mn:00004A41                 push    0               ; int *
.text$mn:00004A43                 push    0FFFFFFFFh      ; int
.text$mn:00004A45                 mov     eax, [ebp+var_88]
.text$mn:00004A4B                 mov     ecx, [eax+4]
.text$mn:00004A4E                 push    ecx             ; unsigned int
.text$mn:00004A4F                 lea     edx, [ebp+var_84]
.text$mn:00004A55                 push    edx             ; char *
.text$mn:00004A56                 mov     ecx, [ebp+var_8C] ; this
.text$mn:00004A5C                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00004A61                 mov     [ebp+var_B4], eax
.text$mn:00004A67                 mov     eax, [ebp+var_B4]
.text$mn:00004A6D                 push    eax             ; wchar_t *
.text$mn:00004A6E                 push    offset $SG169872 ; "Delimiter"
.text$mn:00004A73                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00004A76                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:00004A7B
.text$mn:00004A7B loc_4A7B:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+67Dj
.text$mn:00004A7B                 lea     ecx, [ebp+var_84]
.text$mn:00004A81                 push    ecx             ; char *
.text$mn:00004A82                 push    offset $SG169873 ; "Cloud"
.text$mn:00004A87                 mov     ecx, [ebp+arg_0]
.text$mn:00004A8A                 add     ecx, 1BBF0h     ; this
.text$mn:00004A90                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00004A95                 push    eax             ; hWnd
.text$mn:00004A96                 mov     ecx, [ebp+var_88] ; this
.text$mn:00004A9C                 call    ?changeDlgLang@NativeLangSpeaker@@QAE_NPAUHWND__@@PBDPAD@Z ; NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)
.text$mn:00004AA1                 mov     edx, 1
.text$mn:00004AA6                 imul    eax, edx, 0
.text$mn:00004AA9                 movsx   ecx, [ebp+eax+var_84]
.text$mn:00004AB1                 test    ecx, ecx
.text$mn:00004AB3                 jz      short loc_4AF1
.text$mn:00004AB5                 push    0               ; int *
.text$mn:00004AB7                 push    0               ; int *
.text$mn:00004AB9                 push    0FFFFFFFFh      ; int
.text$mn:00004ABB                 mov     edx, [ebp+var_88]
.text$mn:00004AC1                 mov     eax, [edx+4]
.text$mn:00004AC4                 push    eax             ; unsigned int
.text$mn:00004AC5                 lea     ecx, [ebp+var_84]
.text$mn:00004ACB                 push    ecx             ; char *
.text$mn:00004ACC                 mov     ecx, [ebp+var_8C] ; this
.text$mn:00004AD2                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00004AD7                 mov     [ebp+var_BC], eax
.text$mn:00004ADD                 mov     edx, [ebp+var_BC]
.text$mn:00004AE3                 push    edx             ; wchar_t *
.text$mn:00004AE4                 push    offset $SG169876 ; "Cloud"
.text$mn:00004AE9                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00004AEC                 call    ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z ; PreferenceDlg::renameDialogTitle(wchar_t const *,wchar_t const *)
.text$mn:00004AF1
.text$mn:00004AF1 loc_4AF1:                               ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+6F3j
.text$mn:00004AF1                 mov     eax, [ebp+var_C4]
.text$mn:00004AF7                 push    eax             ; unsigned int
.text$mn:00004AF8                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00004AFB                 call    ?setListSelection@PreferenceDlg@@QBEXI@Z ; PreferenceDlg::setListSelection(uint)
.text$mn:00004B00                 mov     ecx, [ebp+var_4]
.text$mn:00004B03                 xor     ecx, ebp
.text$mn:00004B05                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00004B0A                 mov     esp, ebp
.text$mn:00004B0C                 pop     ebp
.text$mn:00004B0D                 retn    4
.text$mn:00004B0D ?changePrefereceDlgLang@NativeLangSpeaker@@QAEXAAVPreferenceDlg@@@Z endp
.text$mn:00004B0D
.text$mn:00004B10
.text$mn:00004B10 ; =============== S U B R O U T I N E =======================================
.text$mn:00004B10
.text$mn:00004B10 ; Attributes: bp-based frame
.text$mn:00004B10
.text$mn:00004B10 ; int __stdcall NativeLangSpeaker::getMsgBoxLang(char *, int, int)
.text$mn:00004B10                 public ?getMsgBoxLang@NativeLangSpeaker@@QAE_NPBDAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@1@Z
.text$mn:00004B10 ?getMsgBoxLang@NativeLangSpeaker@@QAE_NPBDAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@1@Z proc near
.text$mn:00004B10                                         ; CODE XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+5Ep
.text$mn:00004B10
.text$mn:00004B10 var_14          = dword ptr -14h
.text$mn:00004B10 var_10          = dword ptr -10h
.text$mn:00004B10 var_C           = dword ptr -0Ch
.text$mn:00004B10 var_8           = dword ptr -8
.text$mn:00004B10 var_4           = dword ptr -4
.text$mn:00004B10 arg_0           = dword ptr  8
.text$mn:00004B10 arg_4           = dword ptr  0Ch
.text$mn:00004B10 arg_8           = dword ptr  10h
.text$mn:00004B10
.text$mn:00004B10                 push    ebp
.text$mn:00004B11                 mov     ebp, esp
.text$mn:00004B13                 sub     esp, 14h
.text$mn:00004B16                 mov     [ebp+var_8], ecx
.text$mn:00004B19                 push    offset $SG170023 ; Str
.text$mn:00004B1E                 mov     ecx, [ebp+arg_4]
.text$mn:00004B21                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00004B26                 push    offset $SG170024 ; Str
.text$mn:00004B2B                 mov     ecx, [ebp+arg_8]
.text$mn:00004B2E                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00004B33                 mov     eax, [ebp+var_8]
.text$mn:00004B36                 cmp     dword ptr [eax], 0
.text$mn:00004B39                 jnz     short loc_4B42
.text$mn:00004B3B                 xor     al, al
.text$mn:00004B3D                 jmp     loc_4C33
.text$mn:00004B42 ; ---------------------------------------------------------------------------
.text$mn:00004B42
.text$mn:00004B42 loc_4B42:                               ; CODE XREF: NativeLangSpeaker::getMsgBoxLang(char const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+29j
.text$mn:00004B42                 push    offset $SG170027 ; "MessageBox"
.text$mn:00004B47                 mov     ecx, [ebp+var_8]
.text$mn:00004B4A                 mov     ecx, [ecx]      ; this
.text$mn:00004B4C                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00004B51                 mov     [ebp+var_4], eax
.text$mn:00004B54                 cmp     [ebp+var_4], 0
.text$mn:00004B58                 jnz     short loc_4B61
.text$mn:00004B5A                 xor     al, al
.text$mn:00004B5C                 jmp     loc_4C33
.text$mn:00004B61 ; ---------------------------------------------------------------------------
.text$mn:00004B61
.text$mn:00004B61 loc_4B61:                               ; CODE XREF: NativeLangSpeaker::getMsgBoxLang(char const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+48j
.text$mn:00004B61                 mov     edx, [ebp+arg_0]
.text$mn:00004B64                 push    edx             ; char *
.text$mn:00004B65                 mov     eax, [ebp+var_4]
.text$mn:00004B68                 push    eax             ; struct TiXmlNodeA *
.text$mn:00004B69                 mov     ecx, [ebp+var_8] ; this
.text$mn:00004B6C                 call    ?searchDlgNode@NativeLangSpeaker@@QAEPAVTiXmlNodeA@@PAV2@PBD@Z ; NativeLangSpeaker::searchDlgNode(TiXmlNodeA *,char const *)
.text$mn:00004B71                 mov     [ebp+var_4], eax
.text$mn:00004B74                 cmp     [ebp+var_4], 0
.text$mn:00004B78                 jnz     short loc_4B81
.text$mn:00004B7A                 xor     al, al
.text$mn:00004B7C                 jmp     loc_4C33
.text$mn:00004B81 ; ---------------------------------------------------------------------------
.text$mn:00004B81
.text$mn:00004B81 loc_4B81:                               ; CODE XREF: NativeLangSpeaker::getMsgBoxLang(char const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+68j
.text$mn:00004B81                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00004B86                 mov     [ebp+var_14], eax
.text$mn:00004B89                 push    offset $SG170032 ; "title"
.text$mn:00004B8E                 mov     ecx, [ebp+var_4] ; this
.text$mn:00004B91                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00004B96                 mov     ecx, eax        ; this
.text$mn:00004B98                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00004B9D                 mov     [ebp+var_C], eax
.text$mn:00004BA0                 push    offset $SG170034 ; "message"
.text$mn:00004BA5                 mov     ecx, [ebp+var_4] ; this
.text$mn:00004BA8                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00004BAD                 mov     ecx, eax        ; this
.text$mn:00004BAF                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00004BB4                 mov     [ebp+var_10], eax
.text$mn:00004BB7                 cmp     [ebp+var_C], 0
.text$mn:00004BBB                 jz      short loc_4C31
.text$mn:00004BBD                 mov     ecx, 1
.text$mn:00004BC2                 imul    edx, ecx, 0
.text$mn:00004BC5                 mov     eax, [ebp+var_C]
.text$mn:00004BC8                 movsx   ecx, byte ptr [eax+edx]
.text$mn:00004BCC                 test    ecx, ecx
.text$mn:00004BCE                 jz      short loc_4C31
.text$mn:00004BD0                 cmp     [ebp+var_10], 0
.text$mn:00004BD4                 jz      short loc_4C31
.text$mn:00004BD6                 mov     edx, 1
.text$mn:00004BDB                 imul    eax, edx, 0
.text$mn:00004BDE                 mov     ecx, [ebp+var_10]
.text$mn:00004BE1                 movsx   edx, byte ptr [ecx+eax]
.text$mn:00004BE5                 test    edx, edx
.text$mn:00004BE7                 jz      short loc_4C31
.text$mn:00004BE9                 push    0               ; int *
.text$mn:00004BEB                 push    0               ; int *
.text$mn:00004BED                 push    0FFFFFFFFh      ; int
.text$mn:00004BEF                 mov     eax, [ebp+var_8]
.text$mn:00004BF2                 mov     ecx, [eax+4]
.text$mn:00004BF5                 push    ecx             ; unsigned int
.text$mn:00004BF6                 mov     edx, [ebp+var_C]
.text$mn:00004BF9                 push    edx             ; char *
.text$mn:00004BFA                 mov     ecx, [ebp+var_14] ; this
.text$mn:00004BFD                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00004C02                 push    eax             ; Str
.text$mn:00004C03                 mov     ecx, [ebp+arg_4]
.text$mn:00004C06                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00004C0B                 push    0               ; int *
.text$mn:00004C0D                 push    0               ; int *
.text$mn:00004C0F                 push    0FFFFFFFFh      ; int
.text$mn:00004C11                 mov     eax, [ebp+var_8]
.text$mn:00004C14                 mov     ecx, [eax+4]
.text$mn:00004C17                 push    ecx             ; unsigned int
.text$mn:00004C18                 mov     edx, [ebp+var_10]
.text$mn:00004C1B                 push    edx             ; char *
.text$mn:00004C1C                 mov     ecx, [ebp+var_14] ; this
.text$mn:00004C1F                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00004C24                 push    eax             ; Str
.text$mn:00004C25                 mov     ecx, [ebp+arg_8]
.text$mn:00004C28                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00004C2D                 mov     al, 1
.text$mn:00004C2F                 jmp     short loc_4C33
.text$mn:00004C31 ; ---------------------------------------------------------------------------
.text$mn:00004C31
.text$mn:00004C31 loc_4C31:                               ; CODE XREF: NativeLangSpeaker::getMsgBoxLang(char const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+ABj
.text$mn:00004C31                                         ; NativeLangSpeaker::getMsgBoxLang(char const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+BEj ...
.text$mn:00004C31                 xor     al, al
.text$mn:00004C33
.text$mn:00004C33 loc_4C33:                               ; CODE XREF: NativeLangSpeaker::getMsgBoxLang(char const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+2Dj
.text$mn:00004C33                                         ; NativeLangSpeaker::getMsgBoxLang(char const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+4Cj ...
.text$mn:00004C33                 mov     esp, ebp
.text$mn:00004C35                 pop     ebp
.text$mn:00004C36                 retn    0Ch
.text$mn:00004C36 ?getMsgBoxLang@NativeLangSpeaker@@QAE_NPBDAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@1@Z endp
.text$mn:00004C36
.text$mn:00004C36 ; ---------------------------------------------------------------------------
.text$mn:00004C39                 align 10h
.text$mn:00004C40
.text$mn:00004C40 ; =============== S U B R O U T I N E =======================================
.text$mn:00004C40
.text$mn:00004C40 ; Attributes: bp-based frame
.text$mn:00004C40
.text$mn:00004C40 ; int __stdcall NativeLangSpeaker::getProjectPanelLangMenuStr(int, char *, int, wchar_t *Str)
.text$mn:00004C40                 public ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z
.text$mn:00004C40 ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z proc near
.text$mn:00004C40
.text$mn:00004C40 var_30          = dword ptr -30h
.text$mn:00004C40 var_2C          = dword ptr -2Ch
.text$mn:00004C40 var_28          = dword ptr -28h
.text$mn:00004C40 var_24          = dword ptr -24h
.text$mn:00004C40 var_20          = dword ptr -20h
.text$mn:00004C40 var_1C          = dword ptr -1Ch
.text$mn:00004C40 var_18          = dword ptr -18h
.text$mn:00004C40 var_14          = dword ptr -14h
.text$mn:00004C40 var_10          = dword ptr -10h
.text$mn:00004C40 var_C           = dword ptr -0Ch
.text$mn:00004C40 var_4           = dword ptr -4
.text$mn:00004C40 arg_0           = dword ptr  8
.text$mn:00004C40 arg_4           = dword ptr  0Ch
.text$mn:00004C40 arg_8           = dword ptr  10h
.text$mn:00004C40 Str             = dword ptr  14h
.text$mn:00004C40
.text$mn:00004C40                 push    ebp
.text$mn:00004C41                 mov     ebp, esp
.text$mn:00004C43                 push    0FFFFFFFFh
.text$mn:00004C45                 push    offset __ehhandler$?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z
.text$mn:00004C4A                 mov     eax, large fs:0
.text$mn:00004C50                 push    eax
.text$mn:00004C51                 sub     esp, 24h
.text$mn:00004C54                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004C59                 xor     eax, ebp
.text$mn:00004C5B                 push    eax
.text$mn:00004C5C                 lea     eax, [ebp+var_C]
.text$mn:00004C5F                 mov     large fs:0, eax
.text$mn:00004C65                 mov     [ebp+var_20], ecx
.text$mn:00004C68                 mov     [ebp+var_10], 0
.text$mn:00004C6F                 mov     eax, [ebp+var_20]
.text$mn:00004C72                 cmp     dword ptr [eax], 0
.text$mn:00004C75                 jnz     short loc_4C9B
.text$mn:00004C77                 mov     ecx, [ebp+Str]
.text$mn:00004C7A                 push    ecx             ; Str
.text$mn:00004C7B                 mov     ecx, [ebp+arg_0]
.text$mn:00004C7E                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00004C83                 mov     [ebp+var_4], 0
.text$mn:00004C8A                 mov     edx, [ebp+var_10]
.text$mn:00004C8D                 or      edx, 1
.text$mn:00004C90                 mov     [ebp+var_10], edx
.text$mn:00004C93                 mov     eax, [ebp+arg_0]
.text$mn:00004C96                 jmp     loc_4E31
.text$mn:00004C9B ; ---------------------------------------------------------------------------
.text$mn:00004C9B
.text$mn:00004C9B loc_4C9B:                               ; CODE XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+35j
.text$mn:00004C9B                 push    offset $SG170045 ; "ProjectManager"
.text$mn:00004CA0                 mov     eax, [ebp+var_20]
.text$mn:00004CA3                 mov     ecx, [eax]      ; this
.text$mn:00004CA5                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00004CAA                 mov     [ebp+var_14], eax
.text$mn:00004CAD                 cmp     [ebp+var_14], 0
.text$mn:00004CB1                 jnz     short loc_4CD7
.text$mn:00004CB3                 mov     ecx, [ebp+Str]
.text$mn:00004CB6                 push    ecx             ; Str
.text$mn:00004CB7                 mov     ecx, [ebp+arg_0]
.text$mn:00004CBA                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00004CBF                 mov     [ebp+var_4], 0
.text$mn:00004CC6                 mov     edx, [ebp+var_10]
.text$mn:00004CC9                 or      edx, 1
.text$mn:00004CCC                 mov     [ebp+var_10], edx
.text$mn:00004CCF                 mov     eax, [ebp+arg_0]
.text$mn:00004CD2                 jmp     loc_4E31
.text$mn:00004CD7 ; ---------------------------------------------------------------------------
.text$mn:00004CD7
.text$mn:00004CD7 loc_4CD7:                               ; CODE XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+71j
.text$mn:00004CD7                 push    offset $SG170047 ; "Menus"
.text$mn:00004CDC                 mov     ecx, [ebp+var_14] ; this
.text$mn:00004CDF                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00004CE4                 mov     [ebp+var_14], eax
.text$mn:00004CE7                 cmp     [ebp+var_14], 0
.text$mn:00004CEB                 jnz     short loc_4D11
.text$mn:00004CED                 mov     eax, [ebp+Str]
.text$mn:00004CF0                 push    eax             ; Str
.text$mn:00004CF1                 mov     ecx, [ebp+arg_0]
.text$mn:00004CF4                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00004CF9                 mov     [ebp+var_4], 0
.text$mn:00004D00                 mov     ecx, [ebp+var_10]
.text$mn:00004D03                 or      ecx, 1
.text$mn:00004D06                 mov     [ebp+var_10], ecx
.text$mn:00004D09                 mov     eax, [ebp+arg_0]
.text$mn:00004D0C                 jmp     loc_4E31
.text$mn:00004D11 ; ---------------------------------------------------------------------------
.text$mn:00004D11
.text$mn:00004D11 loc_4D11:                               ; CODE XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+ABj
.text$mn:00004D11                 mov     edx, [ebp+arg_4]
.text$mn:00004D14                 push    edx             ; char *
.text$mn:00004D15                 mov     ecx, [ebp+var_14] ; this
.text$mn:00004D18                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00004D1D                 mov     [ebp+var_14], eax
.text$mn:00004D20                 cmp     [ebp+var_14], 0
.text$mn:00004D24                 jnz     short loc_4D4A
.text$mn:00004D26                 mov     eax, [ebp+Str]
.text$mn:00004D29                 push    eax             ; Str
.text$mn:00004D2A                 mov     ecx, [ebp+arg_0]
.text$mn:00004D2D                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00004D32                 mov     [ebp+var_4], 0
.text$mn:00004D39                 mov     ecx, [ebp+var_10]
.text$mn:00004D3C                 or      ecx, 1
.text$mn:00004D3F                 mov     [ebp+var_10], ecx
.text$mn:00004D42                 mov     eax, [ebp+arg_0]
.text$mn:00004D45                 jmp     loc_4E31
.text$mn:00004D4A ; ---------------------------------------------------------------------------
.text$mn:00004D4A
.text$mn:00004D4A loc_4D4A:                               ; CODE XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+E4j
.text$mn:00004D4A                 mov     [ebp+var_1C], 0
.text$mn:00004D51                 push    offset $SG170052 ; "Item"
.text$mn:00004D56                 mov     ecx, [ebp+var_14] ; this
.text$mn:00004D59                 call    ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z ; TiXmlNodeA::FirstChildElement(char const *)
.text$mn:00004D5E                 mov     [ebp+var_18], eax
.text$mn:00004D61                 jmp     short loc_4D73
.text$mn:00004D63 ; ---------------------------------------------------------------------------
.text$mn:00004D63
.text$mn:00004D63 loc_4D63:                               ; CODE XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *):loc_4DB8j
.text$mn:00004D63                 push    offset $SG170056 ; "Item"
.text$mn:00004D68                 mov     ecx, [ebp+var_18] ; this
.text$mn:00004D6B                 call    ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::NextSibling(char const *)
.text$mn:00004D70                 mov     [ebp+var_18], eax
.text$mn:00004D73
.text$mn:00004D73 loc_4D73:                               ; CODE XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+121j
.text$mn:00004D73                 cmp     [ebp+var_18], 0
.text$mn:00004D77                 jz      short loc_4DBA
.text$mn:00004D79                 mov     ecx, [ebp+var_18] ; this
.text$mn:00004D7C                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00004D81                 mov     [ebp+var_24], eax
.text$mn:00004D84                 lea     edx, [ebp+var_2C]
.text$mn:00004D87                 push    edx             ; int *
.text$mn:00004D88                 push    offset $SG170060 ; char *
.text$mn:00004D8D                 mov     ecx, [ebp+var_24] ; this
.text$mn:00004D90                 call    ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z ; TiXmlElementA::Attribute(char const *,int *)
.text$mn:00004D95                 mov     [ebp+var_28], eax
.text$mn:00004D98                 cmp     [ebp+var_28], 0
.text$mn:00004D9C                 jz      short loc_4DB8
.text$mn:00004D9E                 mov     eax, [ebp+var_2C]
.text$mn:00004DA1                 cmp     eax, [ebp+arg_8]
.text$mn:00004DA4                 jnz     short loc_4DB8
.text$mn:00004DA6                 push    offset $SG170062 ; "name"
.text$mn:00004DAB                 mov     ecx, [ebp+var_24] ; this
.text$mn:00004DAE                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00004DB3                 mov     [ebp+var_1C], eax
.text$mn:00004DB6                 jmp     short loc_4DBA
.text$mn:00004DB8 ; ---------------------------------------------------------------------------
.text$mn:00004DB8
.text$mn:00004DB8 loc_4DB8:                               ; CODE XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+15Cj
.text$mn:00004DB8                                         ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+164j
.text$mn:00004DB8                 jmp     short loc_4D63
.text$mn:00004DBA ; ---------------------------------------------------------------------------
.text$mn:00004DBA
.text$mn:00004DBA loc_4DBA:                               ; CODE XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+137j
.text$mn:00004DBA                                         ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+176j
.text$mn:00004DBA                 cmp     [ebp+var_1C], 0
.text$mn:00004DBE                 jz      short loc_4E12
.text$mn:00004DC0                 mov     ecx, 1
.text$mn:00004DC5                 imul    edx, ecx, 0
.text$mn:00004DC8                 mov     eax, [ebp+var_1C]
.text$mn:00004DCB                 movsx   ecx, byte ptr [eax+edx]
.text$mn:00004DCF                 test    ecx, ecx
.text$mn:00004DD1                 jz      short loc_4E12
.text$mn:00004DD3                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00004DD8                 mov     [ebp+var_30], eax
.text$mn:00004DDB                 push    0               ; int *
.text$mn:00004DDD                 push    0               ; int *
.text$mn:00004DDF                 push    0FFFFFFFFh      ; int
.text$mn:00004DE1                 mov     edx, [ebp+var_20]
.text$mn:00004DE4                 mov     eax, [edx+4]
.text$mn:00004DE7                 push    eax             ; unsigned int
.text$mn:00004DE8                 mov     ecx, [ebp+var_1C]
.text$mn:00004DEB                 push    ecx             ; char *
.text$mn:00004DEC                 mov     ecx, [ebp+var_30] ; this
.text$mn:00004DEF                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00004DF4                 push    eax             ; Str
.text$mn:00004DF5                 mov     ecx, [ebp+arg_0]
.text$mn:00004DF8                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00004DFD                 mov     [ebp+var_4], 0
.text$mn:00004E04                 mov     edx, [ebp+var_10]
.text$mn:00004E07                 or      edx, 1
.text$mn:00004E0A                 mov     [ebp+var_10], edx
.text$mn:00004E0D                 mov     eax, [ebp+arg_0]
.text$mn:00004E10                 jmp     short loc_4E31
.text$mn:00004E12 ; ---------------------------------------------------------------------------
.text$mn:00004E12
.text$mn:00004E12 loc_4E12:                               ; CODE XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+17Ej
.text$mn:00004E12                                         ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+191j
.text$mn:00004E12                 mov     eax, [ebp+Str]
.text$mn:00004E15                 push    eax             ; Str
.text$mn:00004E16                 mov     ecx, [ebp+arg_0]
.text$mn:00004E19                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00004E1E                 mov     [ebp+var_4], 0
.text$mn:00004E25                 mov     ecx, [ebp+var_10]
.text$mn:00004E28                 or      ecx, 1
.text$mn:00004E2B                 mov     [ebp+var_10], ecx
.text$mn:00004E2E                 mov     eax, [ebp+arg_0]
.text$mn:00004E31
.text$mn:00004E31 loc_4E31:                               ; CODE XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+56j
.text$mn:00004E31                                         ; NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+92j ...
.text$mn:00004E31                 mov     ecx, [ebp+var_C]
.text$mn:00004E34                 mov     large fs:0, ecx
.text$mn:00004E3B                 pop     ecx
.text$mn:00004E3C                 mov     esp, ebp
.text$mn:00004E3E                 pop     ebp
.text$mn:00004E3F                 retn    10h
.text$mn:00004E3F ?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z endp
.text$mn:00004E3F
.text$mn:00004E3F ; ---------------------------------------------------------------------------
.text$mn:00004E42                 align 10h
.text$mn:00004E50
.text$mn:00004E50 ; =============== S U B R O U T I N E =======================================
.text$mn:00004E50
.text$mn:00004E50 ; Attributes: bp-based frame
.text$mn:00004E50
.text$mn:00004E50 ; int __stdcall NativeLangSpeaker::getAttrNameStr(int, wchar_t *Str, char *, char *)
.text$mn:00004E50                 public ?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z
.text$mn:00004E50 ?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z proc near
.text$mn:00004E50
.text$mn:00004E50 var_20          = dword ptr -20h
.text$mn:00004E50 var_1C          = dword ptr -1Ch
.text$mn:00004E50 var_18          = dword ptr -18h
.text$mn:00004E50 var_14          = dword ptr -14h
.text$mn:00004E50 var_10          = dword ptr -10h
.text$mn:00004E50 var_C           = dword ptr -0Ch
.text$mn:00004E50 var_4           = dword ptr -4
.text$mn:00004E50 arg_0           = dword ptr  8
.text$mn:00004E50 Str             = dword ptr  0Ch
.text$mn:00004E50 arg_8           = dword ptr  10h
.text$mn:00004E50 arg_C           = dword ptr  14h
.text$mn:00004E50
.text$mn:00004E50                 push    ebp
.text$mn:00004E51                 mov     ebp, esp
.text$mn:00004E53                 push    0FFFFFFFFh
.text$mn:00004E55                 push    offset __ehhandler$?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z
.text$mn:00004E5A                 mov     eax, large fs:0
.text$mn:00004E60                 push    eax
.text$mn:00004E61                 sub     esp, 14h
.text$mn:00004E64                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004E69                 xor     eax, ebp
.text$mn:00004E6B                 push    eax
.text$mn:00004E6C                 lea     eax, [ebp+var_C]
.text$mn:00004E6F                 mov     large fs:0, eax
.text$mn:00004E75                 mov     [ebp+var_18], ecx
.text$mn:00004E78                 mov     [ebp+var_10], 0
.text$mn:00004E7F                 mov     eax, [ebp+var_18]
.text$mn:00004E82                 cmp     dword ptr [eax], 0
.text$mn:00004E85                 jnz     short loc_4EAB
.text$mn:00004E87                 mov     ecx, [ebp+Str]
.text$mn:00004E8A                 push    ecx             ; Str
.text$mn:00004E8B                 mov     ecx, [ebp+arg_0]
.text$mn:00004E8E                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00004E93                 mov     [ebp+var_4], 0
.text$mn:00004E9A                 mov     edx, [ebp+var_10]
.text$mn:00004E9D                 or      edx, 1
.text$mn:00004EA0                 mov     [ebp+var_10], edx
.text$mn:00004EA3                 mov     eax, [ebp+arg_0]
.text$mn:00004EA6                 jmp     loc_4FB3
.text$mn:00004EAB ; ---------------------------------------------------------------------------
.text$mn:00004EAB
.text$mn:00004EAB loc_4EAB:                               ; CODE XREF: NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)+35j
.text$mn:00004EAB                 mov     eax, [ebp+arg_8]
.text$mn:00004EAE                 push    eax             ; char *
.text$mn:00004EAF                 mov     ecx, [ebp+var_18]
.text$mn:00004EB2                 mov     ecx, [ecx]      ; this
.text$mn:00004EB4                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00004EB9                 mov     [ebp+var_14], eax
.text$mn:00004EBC                 cmp     [ebp+var_14], 0
.text$mn:00004EC0                 jnz     short loc_4EE6
.text$mn:00004EC2                 mov     edx, [ebp+Str]
.text$mn:00004EC5                 push    edx             ; Str
.text$mn:00004EC6                 mov     ecx, [ebp+arg_0]
.text$mn:00004EC9                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00004ECE                 mov     [ebp+var_4], 0
.text$mn:00004ED5                 mov     eax, [ebp+var_10]
.text$mn:00004ED8                 or      eax, 1
.text$mn:00004EDB                 mov     [ebp+var_10], eax
.text$mn:00004EDE                 mov     eax, [ebp+arg_0]
.text$mn:00004EE1                 jmp     loc_4FB3
.text$mn:00004EE6 ; ---------------------------------------------------------------------------
.text$mn:00004EE6
.text$mn:00004EE6 loc_4EE6:                               ; CODE XREF: NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)+70j
.text$mn:00004EE6                 cmp     [ebp+arg_C], 0
.text$mn:00004EEA                 jz      short loc_4EFB
.text$mn:00004EEC                 mov     ecx, [ebp+arg_C]
.text$mn:00004EEF                 push    ecx             ; char *
.text$mn:00004EF0                 mov     ecx, [ebp+var_14] ; this
.text$mn:00004EF3                 call    ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z ; TiXmlNodeA::FirstChild(char const *)
.text$mn:00004EF8                 mov     [ebp+var_14], eax
.text$mn:00004EFB
.text$mn:00004EFB loc_4EFB:                               ; CODE XREF: NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)+9Aj
.text$mn:00004EFB                 cmp     [ebp+var_14], 0
.text$mn:00004EFF                 jnz     short loc_4F25
.text$mn:00004F01                 mov     edx, [ebp+Str]
.text$mn:00004F04                 push    edx             ; Str
.text$mn:00004F05                 mov     ecx, [ebp+arg_0]
.text$mn:00004F08                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00004F0D                 mov     [ebp+var_4], 0
.text$mn:00004F14                 mov     eax, [ebp+var_10]
.text$mn:00004F17                 or      eax, 1
.text$mn:00004F1A                 mov     [ebp+var_10], eax
.text$mn:00004F1D                 mov     eax, [ebp+arg_0]
.text$mn:00004F20                 jmp     loc_4FB3
.text$mn:00004F25 ; ---------------------------------------------------------------------------
.text$mn:00004F25
.text$mn:00004F25 loc_4F25:                               ; CODE XREF: NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)+AFj
.text$mn:00004F25                 push    offset $SG170078 ; "name"
.text$mn:00004F2A                 mov     ecx, [ebp+var_14] ; this
.text$mn:00004F2D                 call    ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ ; TiXmlNodeA::ToElement(void)
.text$mn:00004F32                 mov     ecx, eax        ; this
.text$mn:00004F34                 call    ?Attribute@TiXmlElementA@@QBEPBDPBD@Z ; TiXmlElementA::Attribute(char const *)
.text$mn:00004F39                 mov     [ebp+var_1C], eax
.text$mn:00004F3C                 cmp     [ebp+var_1C], 0
.text$mn:00004F40                 jz      short loc_4F94
.text$mn:00004F42                 mov     ecx, 1
.text$mn:00004F47                 imul    edx, ecx, 0
.text$mn:00004F4A                 mov     eax, [ebp+var_1C]
.text$mn:00004F4D                 movsx   ecx, byte ptr [eax+edx]
.text$mn:00004F51                 test    ecx, ecx
.text$mn:00004F53                 jz      short loc_4F94
.text$mn:00004F55                 call    ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ ; WcharMbcsConvertor::getInstance(void)
.text$mn:00004F5A                 mov     [ebp+var_20], eax
.text$mn:00004F5D                 push    0               ; int *
.text$mn:00004F5F                 push    0               ; int *
.text$mn:00004F61                 push    0FFFFFFFFh      ; int
.text$mn:00004F63                 mov     edx, [ebp+var_18]
.text$mn:00004F66                 mov     eax, [edx+4]
.text$mn:00004F69                 push    eax             ; unsigned int
.text$mn:00004F6A                 mov     ecx, [ebp+var_1C]
.text$mn:00004F6D                 push    ecx             ; char *
.text$mn:00004F6E                 mov     ecx, [ebp+var_20] ; this
.text$mn:00004F71                 call    ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z ; WcharMbcsConvertor::char2wchar(char const *,uint,int,int *,int *)
.text$mn:00004F76                 push    eax             ; Str
.text$mn:00004F77                 mov     ecx, [ebp+arg_0]
.text$mn:00004F7A                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00004F7F                 mov     [ebp+var_4], 0
.text$mn:00004F86                 mov     edx, [ebp+var_10]
.text$mn:00004F89                 or      edx, 1
.text$mn:00004F8C                 mov     [ebp+var_10], edx
.text$mn:00004F8F                 mov     eax, [ebp+arg_0]
.text$mn:00004F92                 jmp     short loc_4FB3
.text$mn:00004F94 ; ---------------------------------------------------------------------------
.text$mn:00004F94
.text$mn:00004F94 loc_4F94:                               ; CODE XREF: NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)+F0j
.text$mn:00004F94                                         ; NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)+103j
.text$mn:00004F94                 mov     eax, [ebp+Str]
.text$mn:00004F97                 push    eax             ; Str
.text$mn:00004F98                 mov     ecx, [ebp+arg_0]
.text$mn:00004F9B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00004FA0                 mov     [ebp+var_4], 0
.text$mn:00004FA7                 mov     ecx, [ebp+var_10]
.text$mn:00004FAA                 or      ecx, 1
.text$mn:00004FAD                 mov     [ebp+var_10], ecx
.text$mn:00004FB0                 mov     eax, [ebp+arg_0]
.text$mn:00004FB3
.text$mn:00004FB3 loc_4FB3:                               ; CODE XREF: NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)+56j
.text$mn:00004FB3                                         ; NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)+91j ...
.text$mn:00004FB3                 mov     ecx, [ebp+var_C]
.text$mn:00004FB6                 mov     large fs:0, ecx
.text$mn:00004FBD                 pop     ecx
.text$mn:00004FBE                 mov     esp, ebp
.text$mn:00004FC0                 pop     ebp
.text$mn:00004FC1                 retn    10h
.text$mn:00004FC1 ?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z endp
.text$mn:00004FC1
.text$mn:00004FC1 ; ---------------------------------------------------------------------------
.text$mn:00004FC4                 align 10h
.text$mn:00004FD0
.text$mn:00004FD0 ; =============== S U B R O U T I N E =======================================
.text$mn:00004FD0
.text$mn:00004FD0 ; Attributes: bp-based frame
.text$mn:00004FD0
.text$mn:00004FD0 ; int __thiscall NativeLangSpeaker::messageBox(NativeLangSpeaker *this, const char *, HWND hWnd, const wchar_t *, const wchar_t *, UINT uType, int, const wchar_t *)
.text$mn:00004FD0                 public ?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z
.text$mn:00004FD0 ?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z proc near
.text$mn:00004FD0
.text$mn:00004FD0 var_200         = dword ptr -200h
.text$mn:00004FD0 var_1FC         = dword ptr -1FCh
.text$mn:00004FD0 var_1F8         = dword ptr -1F8h
.text$mn:00004FD0 var_1F4         = dword ptr -1F4h
.text$mn:00004FD0 var_1F0         = dword ptr -1F0h
.text$mn:00004FD0 var_1EC         = dword ptr -1ECh
.text$mn:00004FD0 var_1E8         = dword ptr -1E8h
.text$mn:00004FD0 var_1E4         = dword ptr -1E4h
.text$mn:00004FD0 var_1E0         = dword ptr -1E0h
.text$mn:00004FD0 var_1DC         = dword ptr -1DCh
.text$mn:00004FD0 var_1D8         = dword ptr -1D8h
.text$mn:00004FD0 var_1D4         = dword ptr -1D4h
.text$mn:00004FD0 var_1D0         = dword ptr -1D0h
.text$mn:00004FD0 var_1CC         = dword ptr -1CCh
.text$mn:00004FD0 var_1C8         = dword ptr -1C8h
.text$mn:00004FD0 var_1C4         = dword ptr -1C4h
.text$mn:00004FD0 var_1C0         = dword ptr -1C0h
.text$mn:00004FD0 var_1BC         = dword ptr -1BCh
.text$mn:00004FD0 var_1B8         = dword ptr -1B8h
.text$mn:00004FD0 var_1B4         = dword ptr -1B4h
.text$mn:00004FD0 var_1B0         = dword ptr -1B0h
.text$mn:00004FD0 var_1AC         = dword ptr -1ACh
.text$mn:00004FD0 var_1A8         = dword ptr -1A8h
.text$mn:00004FD0 var_1A4         = dword ptr -1A4h
.text$mn:00004FD0 var_1A0         = dword ptr -1A0h
.text$mn:00004FD0 var_19C         = dword ptr -19Ch
.text$mn:00004FD0 var_198         = byte ptr -198h
.text$mn:00004FD0 var_17C         = byte ptr -17Ch
.text$mn:00004FD0 var_160         = byte ptr -160h
.text$mn:00004FD0 var_144         = byte ptr -144h
.text$mn:00004FD0 var_128         = byte ptr -128h
.text$mn:00004FD0 var_10C         = byte ptr -10Ch
.text$mn:00004FD0 var_F0          = byte ptr -0F0h
.text$mn:00004FD0 var_D4          = byte ptr -0D4h
.text$mn:00004FD0 var_B8          = byte ptr -0B8h
.text$mn:00004FD0 var_9C          = byte ptr -9Ch
.text$mn:00004FD0 var_80          = byte ptr -80h
.text$mn:00004FD0 var_64          = byte ptr -64h
.text$mn:00004FD0 var_48          = dword ptr -48h
.text$mn:00004FD0 var_2C          = dword ptr -2Ch
.text$mn:00004FD0 var_10          = dword ptr -10h
.text$mn:00004FD0 var_C           = dword ptr -0Ch
.text$mn:00004FD0 var_4           = dword ptr -4
.text$mn:00004FD0 arg_0           = dword ptr  8
.text$mn:00004FD0 hWnd            = dword ptr  0Ch
.text$mn:00004FD0 arg_8           = dword ptr  10h
.text$mn:00004FD0 arg_C           = dword ptr  14h
.text$mn:00004FD0 uType           = dword ptr  18h
.text$mn:00004FD0 arg_14          = dword ptr  1Ch
.text$mn:00004FD0 Str             = dword ptr  20h
.text$mn:00004FD0
.text$mn:00004FD0                 push    ebp
.text$mn:00004FD1                 mov     ebp, esp
.text$mn:00004FD3                 push    0FFFFFFFFh
.text$mn:00004FD5                 push    offset __ehhandler$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z
.text$mn:00004FDA                 mov     eax, large fs:0
.text$mn:00004FE0                 push    eax
.text$mn:00004FE1                 sub     esp, 1F4h
.text$mn:00004FE7                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00004FEC                 xor     eax, ebp
.text$mn:00004FEE                 mov     [ebp+var_10], eax
.text$mn:00004FF1                 push    eax
.text$mn:00004FF2                 lea     eax, [ebp+var_C]
.text$mn:00004FF5                 mov     large fs:0, eax
.text$mn:00004FFB                 mov     [ebp+var_1D4], ecx
.text$mn:00005001                 lea     ecx, [ebp+var_2C]
.text$mn:00005004                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00005009                 mov     [ebp+var_4], 0
.text$mn:00005010                 lea     ecx, [ebp+var_48]
.text$mn:00005013                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00005018                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000501C                 lea     eax, [ebp+var_2C]
.text$mn:0000501F                 push    eax             ; int
.text$mn:00005020                 lea     ecx, [ebp+var_48]
.text$mn:00005023                 push    ecx             ; int
.text$mn:00005024                 mov     edx, [ebp+arg_0]
.text$mn:00005027                 push    edx             ; char *
.text$mn:00005028                 mov     ecx, [ebp+var_1D4]
.text$mn:0000502E                 call    ?getMsgBoxLang@NativeLangSpeaker@@QAE_NPBDAAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@1@Z ; NativeLangSpeaker::getMsgBoxLang(char const *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00005033                 movzx   eax, al
.text$mn:00005036                 test    eax, eax
.text$mn:00005038                 jnz     short loc_5052
.text$mn:0000503A                 mov     ecx, [ebp+arg_C]
.text$mn:0000503D                 push    ecx             ; Str
.text$mn:0000503E                 lea     ecx, [ebp+var_48]
.text$mn:00005041                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00005046                 mov     edx, [ebp+arg_8]
.text$mn:00005049                 push    edx             ; Str
.text$mn:0000504A                 lea     ecx, [ebp+var_2C]
.text$mn:0000504D                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)
.text$mn:00005052
.text$mn:00005052 loc_5052:                               ; CODE XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+68j
.text$mn:00005052                 push    offset $SG170098 ; "$INT_REPLACE$"
.text$mn:00005057                 lea     ecx, [ebp+var_F0]
.text$mn:0000505D                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00005062                 mov     byte ptr [ebp+var_4], 2
.text$mn:00005066                 mov     eax, [ebp+arg_14]
.text$mn:00005069                 push    eax
.text$mn:0000506A                 lea     ecx, [ebp+var_128]
.text$mn:00005070                 push    ecx
.text$mn:00005071                 call    ?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z ; std::to_wstring(int)
.text$mn:00005076                 add     esp, 8
.text$mn:00005079                 mov     [ebp+var_1A4], eax
.text$mn:0000507F                 mov     edx, [ebp+var_1A4]
.text$mn:00005085                 mov     [ebp+var_1B4], edx
.text$mn:0000508B                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000508F                 mov     eax, [ebp+var_1B4]
.text$mn:00005095                 push    eax
.text$mn:00005096                 lea     ecx, [ebp+var_F0]
.text$mn:0000509C                 push    ecx
.text$mn:0000509D                 sub     esp, 1Ch
.text$mn:000050A0                 mov     ecx, esp
.text$mn:000050A2                 mov     [ebp+var_1EC], esp
.text$mn:000050A8                 lea     edx, [ebp+var_48]
.text$mn:000050AB                 push    edx
.text$mn:000050AC                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000050B1                 mov     [ebp+var_1CC], eax
.text$mn:000050B7                 mov     eax, [ebp+var_1CC]
.text$mn:000050BD                 mov     [ebp+var_1E4], eax
.text$mn:000050C3                 mov     byte ptr [ebp+var_4], 4
.text$mn:000050C7                 lea     ecx, [ebp+var_17C]
.text$mn:000050CD                 push    ecx
.text$mn:000050CE                 mov     byte ptr [ebp+var_4], 3
.text$mn:000050D2                 call    ?stringReplace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z ; stringReplace(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000050D7                 add     esp, 28h
.text$mn:000050DA                 mov     [ebp+var_1BC], eax
.text$mn:000050E0                 mov     edx, [ebp+var_1BC]
.text$mn:000050E6                 mov     [ebp+var_1DC], edx
.text$mn:000050EC                 mov     byte ptr [ebp+var_4], 5
.text$mn:000050F0                 mov     eax, [ebp+var_1DC]
.text$mn:000050F6                 push    eax
.text$mn:000050F7                 lea     ecx, [ebp+var_48]
.text$mn:000050FA                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000050FF                 mov     byte ptr [ebp+var_4], 3
.text$mn:00005103                 lea     ecx, [ebp+var_17C]
.text$mn:00005109                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000510E                 mov     byte ptr [ebp+var_4], 2
.text$mn:00005112                 lea     ecx, [ebp+var_128]
.text$mn:00005118                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000511D                 mov     byte ptr [ebp+var_4], 1
.text$mn:00005121                 lea     ecx, [ebp+var_F0]
.text$mn:00005127                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000512C                 push    offset $SG170103 ; "$INT_REPLACE$"
.text$mn:00005131                 lea     ecx, [ebp+var_9C]
.text$mn:00005137                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000513C                 mov     byte ptr [ebp+var_4], 6
.text$mn:00005140                 mov     ecx, [ebp+arg_14]
.text$mn:00005143                 push    ecx
.text$mn:00005144                 lea     edx, [ebp+var_198]
.text$mn:0000514A                 push    edx
.text$mn:0000514B                 call    ?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z ; std::to_wstring(int)
.text$mn:00005150                 add     esp, 8
.text$mn:00005153                 mov     [ebp+var_1A0], eax
.text$mn:00005159                 mov     eax, [ebp+var_1A0]
.text$mn:0000515F                 mov     [ebp+var_1A8], eax
.text$mn:00005165                 mov     byte ptr [ebp+var_4], 7
.text$mn:00005169                 mov     ecx, [ebp+var_1A8]
.text$mn:0000516F                 push    ecx
.text$mn:00005170                 lea     edx, [ebp+var_9C]
.text$mn:00005176                 push    edx
.text$mn:00005177                 sub     esp, 1Ch
.text$mn:0000517A                 mov     ecx, esp
.text$mn:0000517C                 mov     [ebp+var_1FC], esp
.text$mn:00005182                 lea     eax, [ebp+var_2C]
.text$mn:00005185                 push    eax
.text$mn:00005186                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000518B                 mov     [ebp+var_1B0], eax
.text$mn:00005191                 mov     ecx, [ebp+var_1B0]
.text$mn:00005197                 mov     [ebp+var_1F4], ecx
.text$mn:0000519D                 mov     byte ptr [ebp+var_4], 8
.text$mn:000051A1                 lea     edx, [ebp+var_160]
.text$mn:000051A7                 push    edx
.text$mn:000051A8                 mov     byte ptr [ebp+var_4], 7
.text$mn:000051AC                 call    ?stringReplace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z ; stringReplace(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:000051B1                 add     esp, 28h
.text$mn:000051B4                 mov     [ebp+var_1B8], eax
.text$mn:000051BA                 mov     eax, [ebp+var_1B8]
.text$mn:000051C0                 mov     [ebp+var_1C0], eax
.text$mn:000051C6                 mov     byte ptr [ebp+var_4], 9
.text$mn:000051CA                 mov     ecx, [ebp+var_1C0]
.text$mn:000051D0                 push    ecx
.text$mn:000051D1                 lea     ecx, [ebp+var_2C]
.text$mn:000051D4                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000051D9                 mov     byte ptr [ebp+var_4], 7
.text$mn:000051DD                 lea     ecx, [ebp+var_160]
.text$mn:000051E3                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000051E8                 mov     byte ptr [ebp+var_4], 6
.text$mn:000051EC                 lea     ecx, [ebp+var_198]
.text$mn:000051F2                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000051F7                 mov     byte ptr [ebp+var_4], 1
.text$mn:000051FB                 lea     ecx, [ebp+var_9C]
.text$mn:00005201                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00005206                 cmp     [ebp+Str], 0
.text$mn:0000520A                 jz      loc_5386
.text$mn:00005210                 mov     edx, [ebp+Str]
.text$mn:00005213                 push    edx             ; Str
.text$mn:00005214                 lea     ecx, [ebp+var_B8]
.text$mn:0000521A                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:0000521F                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:00005223                 push    offset $SG170109 ; "$STR_REPLACE$"
.text$mn:00005228                 lea     ecx, [ebp+var_64]
.text$mn:0000522B                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00005230                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:00005234                 lea     eax, [ebp+var_B8]
.text$mn:0000523A                 push    eax
.text$mn:0000523B                 lea     ecx, [ebp+var_64]
.text$mn:0000523E                 push    ecx
.text$mn:0000523F                 sub     esp, 1Ch
.text$mn:00005242                 mov     ecx, esp
.text$mn:00005244                 mov     [ebp+var_1E8], esp
.text$mn:0000524A                 lea     edx, [ebp+var_48]
.text$mn:0000524D                 push    edx
.text$mn:0000524E                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00005253                 mov     [ebp+var_1C8], eax
.text$mn:00005259                 mov     eax, [ebp+var_1C8]
.text$mn:0000525F                 mov     [ebp+var_1F0], eax
.text$mn:00005265                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:00005269                 lea     ecx, [ebp+var_144]
.text$mn:0000526F                 push    ecx
.text$mn:00005270                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:00005274                 call    ?stringReplace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z ; stringReplace(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00005279                 add     esp, 28h
.text$mn:0000527C                 mov     [ebp+var_1D0], eax
.text$mn:00005282                 mov     edx, [ebp+var_1D0]
.text$mn:00005288                 mov     [ebp+var_1D8], edx
.text$mn:0000528E                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00005292                 mov     eax, [ebp+var_1D8]
.text$mn:00005298                 push    eax
.text$mn:00005299                 lea     ecx, [ebp+var_48]
.text$mn:0000529C                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:000052A1                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:000052A5                 lea     ecx, [ebp+var_144]
.text$mn:000052AB                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000052B0                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:000052B4                 lea     ecx, [ebp+var_64]
.text$mn:000052B7                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000052BC                 mov     byte ptr [ebp+var_4], 1
.text$mn:000052C0                 lea     ecx, [ebp+var_B8]
.text$mn:000052C6                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000052CB                 mov     ecx, [ebp+Str]
.text$mn:000052CE                 push    ecx             ; Str
.text$mn:000052CF                 lea     ecx, [ebp+var_D4]
.text$mn:000052D5                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000052DA                 mov     byte ptr [ebp+var_4], 0Eh
.text$mn:000052DE                 push    offset $SG170114 ; "$STR_REPLACE$"
.text$mn:000052E3                 lea     ecx, [ebp+var_80]
.text$mn:000052E6                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:000052EB                 mov     byte ptr [ebp+var_4], 0Fh
.text$mn:000052EF                 lea     edx, [ebp+var_D4]
.text$mn:000052F5                 push    edx
.text$mn:000052F6                 lea     eax, [ebp+var_80]
.text$mn:000052F9                 push    eax
.text$mn:000052FA                 sub     esp, 1Ch
.text$mn:000052FD                 mov     ecx, esp
.text$mn:000052FF                 mov     [ebp+var_1F8], esp
.text$mn:00005305                 lea     edx, [ebp+var_2C]
.text$mn:00005308                 push    edx
.text$mn:00005309                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:0000530E                 mov     [ebp+var_1E0], eax
.text$mn:00005314                 mov     eax, [ebp+var_1E0]
.text$mn:0000531A                 mov     [ebp+var_200], eax
.text$mn:00005320                 mov     byte ptr [ebp+var_4], 10h
.text$mn:00005324                 lea     ecx, [ebp+var_10C]
.text$mn:0000532A                 push    ecx
.text$mn:0000532B                 mov     byte ptr [ebp+var_4], 0Fh
.text$mn:0000532F                 call    ?stringReplace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z ; stringReplace(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00005334                 add     esp, 28h
.text$mn:00005337                 mov     [ebp+var_19C], eax
.text$mn:0000533D                 mov     edx, [ebp+var_19C]
.text$mn:00005343                 mov     [ebp+var_1C4], edx
.text$mn:00005349                 mov     byte ptr [ebp+var_4], 11h
.text$mn:0000534D                 mov     eax, [ebp+var_1C4]
.text$mn:00005353                 push    eax
.text$mn:00005354                 lea     ecx, [ebp+var_2C]
.text$mn:00005357                 call    ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:0000535C                 mov     byte ptr [ebp+var_4], 0Fh
.text$mn:00005360                 lea     ecx, [ebp+var_10C]
.text$mn:00005366                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:0000536B                 mov     byte ptr [ebp+var_4], 0Eh
.text$mn:0000536F                 lea     ecx, [ebp+var_80]
.text$mn:00005372                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00005377                 mov     byte ptr [ebp+var_4], 1
.text$mn:0000537B                 lea     ecx, [ebp+var_D4]
.text$mn:00005381                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:00005386
.text$mn:00005386 loc_5386:                               ; CODE XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+23Aj
.text$mn:00005386                 mov     ecx, [ebp+uType]
.text$mn:00005389                 push    ecx             ; uType
.text$mn:0000538A                 lea     ecx, [ebp+var_48]
.text$mn:0000538D                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:00005392                 push    eax             ; lpCaption
.text$mn:00005393                 lea     ecx, [ebp+var_2C]
.text$mn:00005396                 call    ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)
.text$mn:0000539B                 push    eax             ; lpText
.text$mn:0000539C                 mov     edx, [ebp+hWnd]
.text$mn:0000539F                 push    edx             ; hWnd
.text$mn:000053A0                 call    dword ptr ds:__imp__MessageBoxW@16 ; MessageBoxW(x,x,x,x)
.text$mn:000053A6                 mov     [ebp+var_1AC], eax
.text$mn:000053AC                 mov     byte ptr [ebp+var_4], 0
.text$mn:000053B0                 lea     ecx, [ebp+var_48]
.text$mn:000053B3                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000053B8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000053BF                 lea     ecx, [ebp+var_2C]
.text$mn:000053C2                 call    ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$mn:000053C7                 mov     eax, [ebp+var_1AC]
.text$mn:000053CD                 mov     ecx, [ebp+var_C]
.text$mn:000053D0                 mov     large fs:0, ecx
.text$mn:000053D7                 pop     ecx
.text$mn:000053D8                 mov     ecx, [ebp+var_10]
.text$mn:000053DB                 xor     ecx, ebp
.text$mn:000053DD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:000053E2                 mov     esp, ebp
.text$mn:000053E4                 pop     ebp
.text$mn:000053E5                 retn    1Ch
.text$mn:000053E5 ?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z endp
.text$mn:000053E5
.text$mn:000053E5 ; ---------------------------------------------------------------------------
.text$mn:000053E8                 align 10h
.text$mn:000053F0
.text$mn:000053F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000053F0
.text$mn:000053F0 ; Attributes: bp-based frame
.text$mn:000053F0
.text$mn:000053F0 ; struct MenuPosition *__cdecl getMenuPosition(const char *Str2)
.text$mn:000053F0                 public ?getMenuPosition@@YAAAVMenuPosition@@PBD@Z
.text$mn:000053F0 ?getMenuPosition@@YAAAVMenuPosition@@PBD@Z proc near
.text$mn:000053F0                                         ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+CCp
.text$mn:000053F0                                         ; NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+2EFp
.text$mn:000053F0
.text$mn:000053F0 var_8           = dword ptr -8
.text$mn:000053F0 var_4           = dword ptr -4
.text$mn:000053F0 Str2            = dword ptr  8
.text$mn:000053F0
.text$mn:000053F0                 push    ebp
.text$mn:000053F1                 mov     ebp, esp
.text$mn:000053F3                 sub     esp, 8
.text$mn:000053F6                 mov     [ebp+var_8], 34h ; '4'
.text$mn:000053FD                 mov     [ebp+var_4], 0
.text$mn:00005404                 jmp     short loc_540F
.text$mn:00005406 ; ---------------------------------------------------------------------------
.text$mn:00005406
.text$mn:00005406 loc_5406:                               ; CODE XREF: getMenuPosition(char const *):loc_543Cj
.text$mn:00005406                 mov     eax, [ebp+var_4]
.text$mn:00005409                 add     eax, 1
.text$mn:0000540C                 mov     [ebp+var_4], eax
.text$mn:0000540F
.text$mn:0000540F loc_540F:                               ; CODE XREF: getMenuPosition(char const *)+14j
.text$mn:0000540F                 mov     ecx, [ebp+var_4]
.text$mn:00005412                 cmp     ecx, [ebp+var_8]
.text$mn:00005415                 jge     short loc_543E
.text$mn:00005417                 mov     edx, [ebp+Str2]
.text$mn:0000541A                 push    edx             ; Str2
.text$mn:0000541B                 imul    eax, [ebp+var_4], 4Ch
.text$mn:0000541F                 add     eax, offset aFile ; "file"
.text$mn:00005424                 push    eax             ; Str1
.text$mn:00005425                 call    _strcmp
.text$mn:0000542A                 add     esp, 8
.text$mn:0000542D                 test    eax, eax
.text$mn:0000542F                 jnz     short loc_543C
.text$mn:00005431                 imul    eax, [ebp+var_4], 4Ch
.text$mn:00005435                 add     eax, offset ?menuPos@@3PAVMenuPosition@@A ; MenuPosition * menuPos
.text$mn:0000543A                 jmp     short loc_544C
.text$mn:0000543C ; ---------------------------------------------------------------------------
.text$mn:0000543C
.text$mn:0000543C loc_543C:                               ; CODE XREF: getMenuPosition(char const *)+3Fj
.text$mn:0000543C                 jmp     short loc_5406
.text$mn:0000543E ; ---------------------------------------------------------------------------
.text$mn:0000543E
.text$mn:0000543E loc_543E:                               ; CODE XREF: getMenuPosition(char const *)+25j
.text$mn:0000543E                 mov     ecx, [ebp+var_8]
.text$mn:00005441                 sub     ecx, 1
.text$mn:00005444                 imul    eax, ecx, 4Ch
.text$mn:00005447                 add     eax, offset ?menuPos@@3PAVMenuPosition@@A ; MenuPosition * menuPos
.text$mn:0000544C
.text$mn:0000544C loc_544C:                               ; CODE XREF: getMenuPosition(char const *)+4Aj
.text$mn:0000544C                 mov     esp, ebp
.text$mn:0000544E                 pop     ebp
.text$mn:0000544F                 retn
.text$mn:0000544F ?getMenuPosition@@YAAAVMenuPosition@@PBD@Z endp
.text$mn:0000544F
.text$mn:0000544F _text$mn        ends
.text$mn:0000544F
.text$x:00005450 ; ===========================================================================
.text$x:00005450
.text$x:00005450 ; Segment type: Pure code
.text$x:00005450 ; Segment permissions: Read/Execute
.text$x:00005450 _text$x         segment para public 'CODE' use32
.text$x:00005450                 assume cs:_text$x
.text$x:00005450                 ;org 5450h
.text$x:00005450                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005450
.text$x:00005450 ; =============== S U B R O U T I N E =======================================
.text$x:00005450
.text$x:00005450
.text$x:00005450 __unwindfunclet$?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z$0 proc near
.text$x:00005450                                         ; DATA XREF: .xdata$x:0000A2F4o
.text$x:00005450                 mov     eax, [ebp-10h]
.text$x:00005453                 and     eax, 1
.text$x:00005456                 jz      locret_5468
.text$x:0000545C                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00005460                 mov     ecx, [ebp+8]
.text$x:00005463                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005468 ; ---------------------------------------------------------------------------
.text$x:00005468
.text$x:00005468 locret_5468:                            ; CODE XREF: __unwindfunclet$?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z$0+6j
.text$x:00005468                 retn
.text$x:00005468 __unwindfunclet$?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z$0 endp
.text$x:00005468
.text$x:00005469
.text$x:00005469 ; =============== S U B R O U T I N E =======================================
.text$x:00005469
.text$x:00005469
.text$x:00005469 __ehhandler$?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z proc near
.text$x:00005469                                         ; DATA XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+5o
.text$x:00005469
.text$x:00005469 arg_4           = dword ptr  8
.text$x:00005469
.text$x:00005469                 mov     edx, [esp+arg_4]
.text$x:0000546D                 lea     eax, [edx+0Ch]
.text$x:00005470                 mov     ecx, [edx-28h]
.text$x:00005473                 xor     ecx, eax
.text$x:00005475                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000547A                 mov     eax, offset __ehfuncinfo$?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z
.text$x:0000547F                 jmp     ___CxxFrameHandler3
.text$x:0000547F __ehhandler$?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z endp
.text$x:0000547F
.text$x:00005484
.text$x:00005484 ; =============== S U B R O U T I N E =======================================
.text$x:00005484
.text$x:00005484
.text$x:00005484 __unwindfunclet$?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z$0 proc near
.text$x:00005484                                         ; DATA XREF: .xdata$x:0000A2ECo
.text$x:00005484                 mov     eax, [ebp-10h]
.text$x:00005487                 and     eax, 1
.text$x:0000548A                 jz      locret_549C
.text$x:00005490                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00005494                 mov     ecx, [ebp+8]
.text$x:00005497                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000549C ; ---------------------------------------------------------------------------
.text$x:0000549C
.text$x:0000549C locret_549C:                            ; CODE XREF: __unwindfunclet$?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z$0+6j
.text$x:0000549C                 retn
.text$x:0000549C __unwindfunclet$?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z$0 endp
.text$x:0000549C
.text$x:0000549D
.text$x:0000549D ; =============== S U B R O U T I N E =======================================
.text$x:0000549D
.text$x:0000549D
.text$x:0000549D __ehhandler$?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z proc near
.text$x:0000549D                                         ; DATA XREF: NativeLangSpeaker::getNativeLangMenuString(int)+5o
.text$x:0000549D
.text$x:0000549D arg_4           = dword ptr  8
.text$x:0000549D
.text$x:0000549D                 mov     edx, [esp+arg_4]
.text$x:000054A1                 lea     eax, [edx+0Ch]
.text$x:000054A4                 mov     ecx, [edx-24h]
.text$x:000054A7                 xor     ecx, eax
.text$x:000054A9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000054AE                 mov     eax, offset __ehfuncinfo$?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z
.text$x:000054B3                 jmp     ___CxxFrameHandler3
.text$x:000054B3 __ehhandler$?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z endp
.text$x:000054B3
.text$x:000054B8
.text$x:000054B8 ; =============== S U B R O U T I N E =======================================
.text$x:000054B8
.text$x:000054B8
.text$x:000054B8 __unwindfunclet$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z$0 proc near
.text$x:000054B8                                         ; DATA XREF: .xdata$x:0000A2FCo
.text$x:000054B8                 lea     ecx, [ebp-80h]
.text$x:000054BB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000054BB __unwindfunclet$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z$0 endp
.text$x:000054BB
.text$x:000054C0
.text$x:000054C0 ; =============== S U B R O U T I N E =======================================
.text$x:000054C0
.text$x:000054C0
.text$x:000054C0 __unwindfunclet$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z$1 proc near
.text$x:000054C0                                         ; DATA XREF: .xdata$x:0000A304o
.text$x:000054C0                 lea     ecx, [ebp-64h]
.text$x:000054C3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000054C3 __unwindfunclet$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z$1 endp
.text$x:000054C3
.text$x:000054C8
.text$x:000054C8 ; =============== S U B R O U T I N E =======================================
.text$x:000054C8
.text$x:000054C8
.text$x:000054C8 __unwindfunclet$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z$2 proc near
.text$x:000054C8                                         ; DATA XREF: .xdata$x:0000A30Co
.text$x:000054C8                 lea     ecx, [ebp-48h]
.text$x:000054CB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000054CB __unwindfunclet$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z$2 endp
.text$x:000054CB
.text$x:000054D0
.text$x:000054D0 ; =============== S U B R O U T I N E =======================================
.text$x:000054D0
.text$x:000054D0
.text$x:000054D0 __unwindfunclet$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z$3 proc near
.text$x:000054D0                                         ; DATA XREF: .xdata$x:0000A314o
.text$x:000054D0                 lea     ecx, [ebp-2Ch]
.text$x:000054D3                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000054D3 __unwindfunclet$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z$3 endp
.text$x:000054D3
.text$x:000054D8
.text$x:000054D8 ; =============== S U B R O U T I N E =======================================
.text$x:000054D8
.text$x:000054D8
.text$x:000054D8 __ehhandler$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z proc near
.text$x:000054D8                                         ; DATA XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+5o
.text$x:000054D8
.text$x:000054D8 arg_4           = dword ptr  8
.text$x:000054D8
.text$x:000054D8                 mov     edx, [esp+arg_4]
.text$x:000054DC                 lea     eax, [edx+0Ch]
.text$x:000054DF                 mov     ecx, [edx-98h]
.text$x:000054E5                 xor     ecx, eax
.text$x:000054E7                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000054EC                 mov     ecx, [edx-4]
.text$x:000054EF                 xor     ecx, eax
.text$x:000054F1                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000054F6                 mov     eax, offset __ehfuncinfo$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z
.text$x:000054FB                 jmp     ___CxxFrameHandler3
.text$x:000054FB __ehhandler$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z endp
.text$x:000054FB
.text$x:00005500
.text$x:00005500 ; =============== S U B R O U T I N E =======================================
.text$x:00005500
.text$x:00005500
.text$x:00005500 __unwindfunclet$?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z$0 proc near
.text$x:00005500                                         ; DATA XREF: .xdata$x:0000A2E4o
.text$x:00005500                 mov     eax, [ebp-10h]
.text$x:00005503                 and     eax, 1
.text$x:00005506                 jz      locret_5518
.text$x:0000550C                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00005510                 mov     ecx, [ebp+8]
.text$x:00005513                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005518 ; ---------------------------------------------------------------------------
.text$x:00005518
.text$x:00005518 locret_5518:                            ; CODE XREF: __unwindfunclet$?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z$0+6j
.text$x:00005518                 retn
.text$x:00005518 __unwindfunclet$?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z$0 endp
.text$x:00005518
.text$x:00005519
.text$x:00005519 ; =============== S U B R O U T I N E =======================================
.text$x:00005519
.text$x:00005519
.text$x:00005519 __ehhandler$?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z proc near
.text$x:00005519                                         ; DATA XREF: NativeLangSpeaker::getProjectPanelLangMenuStr(char const *,int,wchar_t const *)+5o
.text$x:00005519
.text$x:00005519 arg_4           = dword ptr  8
.text$x:00005519
.text$x:00005519                 mov     edx, [esp+arg_4]
.text$x:0000551D                 lea     eax, [edx+0Ch]
.text$x:00005520                 mov     ecx, [edx-28h]
.text$x:00005523                 xor     ecx, eax
.text$x:00005525                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000552A                 mov     eax, offset __ehfuncinfo$?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z
.text$x:0000552F                 jmp     ___CxxFrameHandler3
.text$x:0000552F __ehhandler$?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z endp
.text$x:0000552F
.text$x:00005534
.text$x:00005534 ; =============== S U B R O U T I N E =======================================
.text$x:00005534
.text$x:00005534
.text$x:00005534 __unwindfunclet$?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z$0 proc near
.text$x:00005534                                         ; DATA XREF: .xdata$x:0000A2DCo
.text$x:00005534                 mov     eax, [ebp-10h]
.text$x:00005537                 and     eax, 1
.text$x:0000553A                 jz      locret_554C
.text$x:00005540                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00005544                 mov     ecx, [ebp+8]
.text$x:00005547                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000554C ; ---------------------------------------------------------------------------
.text$x:0000554C
.text$x:0000554C locret_554C:                            ; CODE XREF: __unwindfunclet$?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z$0+6j
.text$x:0000554C                 retn
.text$x:0000554C __unwindfunclet$?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z$0 endp
.text$x:0000554C
.text$x:0000554D
.text$x:0000554D ; =============== S U B R O U T I N E =======================================
.text$x:0000554D
.text$x:0000554D
.text$x:0000554D __ehhandler$?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z proc near
.text$x:0000554D                                         ; DATA XREF: NativeLangSpeaker::getAttrNameStr(wchar_t const *,char const *,char const *)+5o
.text$x:0000554D
.text$x:0000554D arg_4           = dword ptr  8
.text$x:0000554D
.text$x:0000554D                 mov     edx, [esp+arg_4]
.text$x:00005551                 lea     eax, [edx+0Ch]
.text$x:00005554                 mov     ecx, [edx-18h]
.text$x:00005557                 xor     ecx, eax
.text$x:00005559                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000555E                 mov     eax, offset __ehfuncinfo$?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z
.text$x:00005563                 jmp     ___CxxFrameHandler3
.text$x:00005563 __ehhandler$?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z endp
.text$x:00005563
.text$x:00005568
.text$x:00005568 ; =============== S U B R O U T I N E =======================================
.text$x:00005568
.text$x:00005568
.text$x:00005568 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$0 proc near
.text$x:00005568                                         ; DATA XREF: .xdata$x:0000A3F4o
.text$x:00005568                 lea     ecx, [ebp-2Ch]
.text$x:0000556B                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000556B __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$0 endp
.text$x:0000556B
.text$x:00005570
.text$x:00005570 ; =============== S U B R O U T I N E =======================================
.text$x:00005570
.text$x:00005570
.text$x:00005570 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$1 proc near
.text$x:00005570                                         ; DATA XREF: .xdata$x:0000A3FCo
.text$x:00005570                 lea     ecx, [ebp-48h]
.text$x:00005573                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005573 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$1 endp
.text$x:00005573
.text$x:00005578
.text$x:00005578 ; =============== S U B R O U T I N E =======================================
.text$x:00005578
.text$x:00005578
.text$x:00005578 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$2 proc near
.text$x:00005578                                         ; DATA XREF: .xdata$x:0000A404o
.text$x:00005578                 lea     ecx, [ebp-0F0h]
.text$x:0000557E                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000557E __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$2 endp
.text$x:0000557E
.text$x:00005583
.text$x:00005583 ; =============== S U B R O U T I N E =======================================
.text$x:00005583
.text$x:00005583
.text$x:00005583 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$3 proc near
.text$x:00005583                                         ; DATA XREF: .xdata$x:0000A40Co
.text$x:00005583                 lea     ecx, [ebp-128h]
.text$x:00005589                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005589 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$3 endp
.text$x:00005589
.text$x:0000558E
.text$x:0000558E ; =============== S U B R O U T I N E =======================================
.text$x:0000558E
.text$x:0000558E
.text$x:0000558E __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$4 proc near
.text$x:0000558E                                         ; DATA XREF: .xdata$x:0000A414o
.text$x:0000558E                 mov     ecx, [ebp-1ECh]
.text$x:00005594                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005594 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$4 endp
.text$x:00005594
.text$x:00005599
.text$x:00005599 ; =============== S U B R O U T I N E =======================================
.text$x:00005599
.text$x:00005599
.text$x:00005599 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$5 proc near
.text$x:00005599                                         ; DATA XREF: .xdata$x:0000A41Co
.text$x:00005599                 lea     ecx, [ebp-17Ch]
.text$x:0000559F                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000559F __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$5 endp
.text$x:0000559F
.text$x:000055A4
.text$x:000055A4 ; =============== S U B R O U T I N E =======================================
.text$x:000055A4
.text$x:000055A4
.text$x:000055A4 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$6 proc near
.text$x:000055A4                                         ; DATA XREF: .xdata$x:0000A424o
.text$x:000055A4                 lea     ecx, [ebp-9Ch]
.text$x:000055AA                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000055AA __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$6 endp
.text$x:000055AA
.text$x:000055AF
.text$x:000055AF ; =============== S U B R O U T I N E =======================================
.text$x:000055AF
.text$x:000055AF
.text$x:000055AF __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$7 proc near
.text$x:000055AF                                         ; DATA XREF: .xdata$x:0000A42Co
.text$x:000055AF                 lea     ecx, [ebp-198h]
.text$x:000055B5                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000055B5 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$7 endp
.text$x:000055B5
.text$x:000055BA
.text$x:000055BA ; =============== S U B R O U T I N E =======================================
.text$x:000055BA
.text$x:000055BA
.text$x:000055BA __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$8 proc near
.text$x:000055BA                                         ; DATA XREF: .xdata$x:0000A434o
.text$x:000055BA                 mov     ecx, [ebp-1FCh]
.text$x:000055C0                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000055C0 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$8 endp
.text$x:000055C0
.text$x:000055C5
.text$x:000055C5 ; =============== S U B R O U T I N E =======================================
.text$x:000055C5
.text$x:000055C5
.text$x:000055C5 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$9 proc near
.text$x:000055C5                                         ; DATA XREF: .xdata$x:0000A43Co
.text$x:000055C5                 lea     ecx, [ebp-160h]
.text$x:000055CB                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000055CB __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$9 endp
.text$x:000055CB
.text$x:000055D0
.text$x:000055D0 ; =============== S U B R O U T I N E =======================================
.text$x:000055D0
.text$x:000055D0
.text$x:000055D0 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$10 proc near
.text$x:000055D0                                         ; DATA XREF: .xdata$x:0000A444o
.text$x:000055D0                 lea     ecx, [ebp-0B8h]
.text$x:000055D6                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000055D6 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$10 endp
.text$x:000055D6
.text$x:000055DB
.text$x:000055DB ; =============== S U B R O U T I N E =======================================
.text$x:000055DB
.text$x:000055DB
.text$x:000055DB __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$11 proc near
.text$x:000055DB                                         ; DATA XREF: .xdata$x:0000A44Co
.text$x:000055DB                 lea     ecx, [ebp-64h]
.text$x:000055DE                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000055DE __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$11 endp
.text$x:000055DE
.text$x:000055E3
.text$x:000055E3 ; =============== S U B R O U T I N E =======================================
.text$x:000055E3
.text$x:000055E3
.text$x:000055E3 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$12 proc near
.text$x:000055E3                                         ; DATA XREF: .xdata$x:0000A454o
.text$x:000055E3                 mov     ecx, [ebp-1E8h]
.text$x:000055E9                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000055E9 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$12 endp
.text$x:000055E9
.text$x:000055EE
.text$x:000055EE ; =============== S U B R O U T I N E =======================================
.text$x:000055EE
.text$x:000055EE
.text$x:000055EE __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$13 proc near
.text$x:000055EE                                         ; DATA XREF: .xdata$x:0000A45Co
.text$x:000055EE                 lea     ecx, [ebp-144h]
.text$x:000055F4                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000055F4 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$13 endp
.text$x:000055F4
.text$x:000055F9
.text$x:000055F9 ; =============== S U B R O U T I N E =======================================
.text$x:000055F9
.text$x:000055F9
.text$x:000055F9 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$14 proc near
.text$x:000055F9                                         ; DATA XREF: .xdata$x:0000A464o
.text$x:000055F9                 lea     ecx, [ebp-0D4h]
.text$x:000055FF                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:000055FF __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$14 endp
.text$x:000055FF
.text$x:00005604
.text$x:00005604 ; =============== S U B R O U T I N E =======================================
.text$x:00005604
.text$x:00005604
.text$x:00005604 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$15 proc near
.text$x:00005604                                         ; DATA XREF: .xdata$x:0000A46Co
.text$x:00005604                 lea     ecx, [ebp-80h]
.text$x:00005607                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005607 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$15 endp
.text$x:00005607
.text$x:0000560C
.text$x:0000560C ; =============== S U B R O U T I N E =======================================
.text$x:0000560C
.text$x:0000560C
.text$x:0000560C __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$16 proc near
.text$x:0000560C                                         ; DATA XREF: .xdata$x:0000A474o
.text$x:0000560C                 mov     ecx, [ebp-1F8h]
.text$x:00005612                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00005612 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$16 endp
.text$x:00005612
.text$x:00005617
.text$x:00005617 ; =============== S U B R O U T I N E =======================================
.text$x:00005617
.text$x:00005617
.text$x:00005617 __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$17 proc near
.text$x:00005617                                         ; DATA XREF: .xdata$x:0000A47Co
.text$x:00005617                 lea     ecx, [ebp-10Ch]
.text$x:0000561D                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:0000561D __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$17 endp
.text$x:0000561D
.text$x:00005622
.text$x:00005622 ; =============== S U B R O U T I N E =======================================
.text$x:00005622
.text$x:00005622
.text$x:00005622 __ehhandler$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z proc near
.text$x:00005622                                         ; DATA XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+5o
.text$x:00005622
.text$x:00005622 arg_4           = dword ptr  8
.text$x:00005622
.text$x:00005622                 mov     edx, [esp+arg_4]
.text$x:00005626                 lea     eax, [edx+0Ch]
.text$x:00005629                 mov     ecx, [edx-1F8h]
.text$x:0000562F                 xor     ecx, eax
.text$x:00005631                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005636                 mov     ecx, [edx-4]
.text$x:00005639                 xor     ecx, eax
.text$x:0000563B                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005640                 mov     eax, offset __ehfuncinfo$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z
.text$x:00005645                 jmp     ___CxxFrameHandler3
.text$x:00005645 __ehhandler$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z endp
.text$x:00005645
.text$x:00005645 ; ---------------------------------------------------------------------------
.text$x:0000564A                 align 4
.text$x:0000564A _text$x         ends
.text$x:0000564A
.text$mn:0000564C ; ===========================================================================
.text$mn:0000564C
.text$mn:0000564C ; Segment type: Pure code
.text$mn:0000564C ; Segment permissions: Read/Execute
.text$mn:0000564C _text$mn        segment para public 'CODE' use32
.text$mn:0000564C                 assume cs:_text$mn
.text$mn:0000564C                 ;org 564Ch
.text$mn:0000564C ; COMDAT (pick any)
.text$mn:0000564C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000564C
.text$mn:0000564C ; =============== S U B R O U T I N E =======================================
.text$mn:0000564C
.text$mn:0000564C ; Attributes: bp-based frame
.text$mn:0000564C
.text$mn:0000564C ; bool __cdecl std::operator==<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:0000564C                 public ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:0000564C ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:0000564C                                         ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Cp
.text$mn:0000564C
.text$mn:0000564C var_2           = byte ptr -2
.text$mn:0000564C var_1           = byte ptr -1
.text$mn:0000564C arg_0           = dword ptr  8
.text$mn:0000564C arg_4           = dword ptr  0Ch
.text$mn:0000564C
.text$mn:0000564C                 push    ebp
.text$mn:0000564D                 mov     ebp, esp
.text$mn:0000564F                 push    ecx
.text$mn:00005650                 mov     eax, [ebp+arg_4]
.text$mn:00005653                 push    eax
.text$mn:00005654                 lea     ecx, [ebp+var_1]
.text$mn:00005657                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:0000565C                 push    eax
.text$mn:0000565D                 mov     ecx, [ebp+arg_0]
.text$mn:00005660                 push    ecx
.text$mn:00005661                 lea     ecx, [ebp+var_2]
.text$mn:00005664                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:00005669                 push    eax
.text$mn:0000566A                 call    ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z ; std::operator==<wchar_t,wchar_t>(std::allocator<wchar_t> const &,std::allocator<wchar_t> const &)
.text$mn:0000566F                 add     esp, 8
.text$mn:00005672                 mov     esp, ebp
.text$mn:00005674                 pop     ebp
.text$mn:00005675                 retn
.text$mn:00005675 ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:00005675
.text$mn:00005675 ; ---------------------------------------------------------------------------
.text$mn:00005676                 align 4
.text$mn:00005676 _text$mn        ends
.text$mn:00005676
.text$mn:00005678 ; ===========================================================================
.text$mn:00005678
.text$mn:00005678 ; Segment type: Pure code
.text$mn:00005678 ; Segment permissions: Read/Execute
.text$mn:00005678 _text$mn        segment para public 'CODE' use32
.text$mn:00005678                 assume cs:_text$mn
.text$mn:00005678                 ;org 5678h
.text$mn:00005678 ; COMDAT (pick any)
.text$mn:00005678                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005678
.text$mn:00005678 ; =============== S U B R O U T I N E =======================================
.text$mn:00005678
.text$mn:00005678 ; Attributes: bp-based frame
.text$mn:00005678
.text$mn:00005678 ; bool __cdecl std::operator==<wchar_t, wchar_t>(class std::allocator<wchar_t> const &, class std::allocator<wchar_t> const &)
.text$mn:00005678                 public ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z
.text$mn:00005678 ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z proc near
.text$mn:00005678                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+1Ep
.text$mn:00005678                 push    ebp
.text$mn:00005679                 mov     ebp, esp
.text$mn:0000567B                 mov     al, 1
.text$mn:0000567D                 pop     ebp
.text$mn:0000567E                 retn
.text$mn:0000567E ??$?8_W_W@std@@YA_NABV?$allocator@_W@0@0@Z endp
.text$mn:0000567E
.text$mn:0000567E ; ---------------------------------------------------------------------------
.text$mn:0000567F                 align 10h
.text$mn:0000567F _text$mn        ends
.text$mn:0000567F
.text$mn:00005680 ; ===========================================================================
.text$mn:00005680
.text$mn:00005680 ; Segment type: Pure code
.text$mn:00005680 ; Segment permissions: Read/Execute
.text$mn:00005680 _text$mn        segment para public 'CODE' use32
.text$mn:00005680                 assume cs:_text$mn
.text$mn:00005680                 ;org 5680h
.text$mn:00005680 ; COMDAT (pick any)
.text$mn:00005680                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005680
.text$mn:00005680 ; =============== S U B R O U T I N E =======================================
.text$mn:00005680
.text$mn:00005680 ; Attributes: bp-based frame
.text$mn:00005680
.text$mn:00005680 ; bool __cdecl std::operator!=<class std::allocator<wchar_t>, class std::allocator<wchar_t>>(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &, struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00005680                 public ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z
.text$mn:00005680 ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z proc near
.text$mn:00005680                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+73p
.text$mn:00005680                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+2Bp
.text$mn:00005680
.text$mn:00005680 var_4           = dword ptr -4
.text$mn:00005680 arg_0           = dword ptr  8
.text$mn:00005680 arg_4           = dword ptr  0Ch
.text$mn:00005680
.text$mn:00005680                 push    ebp
.text$mn:00005681                 mov     ebp, esp
.text$mn:00005683                 push    ecx
.text$mn:00005684                 mov     eax, [ebp+arg_4]
.text$mn:00005687                 push    eax
.text$mn:00005688                 mov     ecx, [ebp+arg_0]
.text$mn:0000568B                 push    ecx
.text$mn:0000568C                 call    ??$?8V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00005691                 add     esp, 8
.text$mn:00005694                 movzx   edx, al
.text$mn:00005697                 test    edx, edx
.text$mn:00005699                 jnz     short loc_56A4
.text$mn:0000569B                 mov     [ebp+var_4], 1
.text$mn:000056A2                 jmp     short loc_56AB
.text$mn:000056A4 ; ---------------------------------------------------------------------------
.text$mn:000056A4
.text$mn:000056A4 loc_56A4:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+19j
.text$mn:000056A4                 mov     [ebp+var_4], 0
.text$mn:000056AB
.text$mn:000056AB loc_56AB:                               ; CODE XREF: std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+22j
.text$mn:000056AB                 mov     al, byte ptr [ebp+var_4]
.text$mn:000056AE                 mov     esp, ebp
.text$mn:000056B0                 pop     ebp
.text$mn:000056B1                 retn
.text$mn:000056B1 ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z endp
.text$mn:000056B1
.text$mn:000056B1 ; ---------------------------------------------------------------------------
.text$mn:000056B2                 align 4
.text$mn:000056B2 _text$mn        ends
.text$mn:000056B2
.text$mn:000056B4 ; ===========================================================================
.text$mn:000056B4
.text$mn:000056B4 ; Segment type: Pure code
.text$mn:000056B4 ; Segment permissions: Read/Execute
.text$mn:000056B4 _text$mn        segment para public 'CODE' use32
.text$mn:000056B4                 assume cs:_text$mn
.text$mn:000056B4                 ;org 56B4h
.text$mn:000056B4 ; COMDAT (pick any)
.text$mn:000056B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000056B4
.text$mn:000056B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000056B4
.text$mn:000056B4 ; Attributes: bp-based frame
.text$mn:000056B4
.text$mn:000056B4 ; char * __cdecl std::_Allocate<char>(unsigned int, char *)
.text$mn:000056B4                 public ??$_Allocate@D@std@@YAPADIPAD@Z
.text$mn:000056B4 ??$_Allocate@D@std@@YAPADIPAD@Z proc near
.text$mn:000056B4                                         ; CODE XREF: std::allocator<char>::allocate(uint)+Dp
.text$mn:000056B4
.text$mn:000056B4 var_4           = dword ptr -4
.text$mn:000056B4 arg_0           = dword ptr  8
.text$mn:000056B4
.text$mn:000056B4                 push    ebp
.text$mn:000056B5                 mov     ebp, esp
.text$mn:000056B7                 push    ecx
.text$mn:000056B8                 mov     [ebp+var_4], 0
.text$mn:000056BF                 cmp     [ebp+arg_0], 0
.text$mn:000056C3                 jnz     short loc_56C7
.text$mn:000056C5                 jmp     short loc_56E7
.text$mn:000056C7 ; ---------------------------------------------------------------------------
.text$mn:000056C7
.text$mn:000056C7 loc_56C7:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+Fj
.text$mn:000056C7                 cmp     [ebp+arg_0], 0FFFFFFFFh
.text$mn:000056CB                 ja      short loc_56E2
.text$mn:000056CD                 mov     eax, [ebp+arg_0]
.text$mn:000056D0                 push    eax             ; unsigned int
.text$mn:000056D1                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:000056D6                 add     esp, 4
.text$mn:000056D9                 mov     [ebp+var_4], eax
.text$mn:000056DC                 cmp     [ebp+var_4], 0
.text$mn:000056E0                 jnz     short loc_56E7
.text$mn:000056E2
.text$mn:000056E2 loc_56E2:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+17j
.text$mn:000056E2                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:000056E7
.text$mn:000056E7 loc_56E7:                               ; CODE XREF: std::_Allocate<char>(uint,char *)+11j
.text$mn:000056E7                                         ; std::_Allocate<char>(uint,char *)+2Cj
.text$mn:000056E7                 mov     eax, [ebp+var_4]
.text$mn:000056EA                 mov     esp, ebp
.text$mn:000056EC                 pop     ebp
.text$mn:000056ED                 retn
.text$mn:000056ED ??$_Allocate@D@std@@YAPADIPAD@Z endp
.text$mn:000056ED
.text$mn:000056ED ; ---------------------------------------------------------------------------
.text$mn:000056EE                 align 10h
.text$mn:000056EE _text$mn        ends
.text$mn:000056EE
.text$mn:000056F0 ; ===========================================================================
.text$mn:000056F0
.text$mn:000056F0 ; Segment type: Pure code
.text$mn:000056F0 ; Segment permissions: Read/Execute
.text$mn:000056F0 _text$mn        segment para public 'CODE' use32
.text$mn:000056F0                 assume cs:_text$mn
.text$mn:000056F0                 ;org 56F0h
.text$mn:000056F0 ; COMDAT (pick any)
.text$mn:000056F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000056F0
.text$mn:000056F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000056F0
.text$mn:000056F0 ; Attributes: bp-based frame
.text$mn:000056F0
.text$mn:000056F0 ; struct std::_Container_proxy * __cdecl std::_Allocate<struct std::_Container_proxy>(unsigned int, struct std::_Container_proxy *)
.text$mn:000056F0                 public ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z
.text$mn:000056F0 ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z proc near
.text$mn:000056F0                                         ; CODE XREF: std::allocator<std::_Container_proxy>::allocate(uint)+Dp
.text$mn:000056F0
.text$mn:000056F0 var_4           = dword ptr -4
.text$mn:000056F0 arg_0           = dword ptr  8
.text$mn:000056F0
.text$mn:000056F0                 push    ebp
.text$mn:000056F1                 mov     ebp, esp
.text$mn:000056F3                 push    ecx
.text$mn:000056F4                 mov     [ebp+var_4], 0
.text$mn:000056FB                 cmp     [ebp+arg_0], 0
.text$mn:000056FF                 jnz     short loc_5703
.text$mn:00005701                 jmp     short loc_5729
.text$mn:00005703 ; ---------------------------------------------------------------------------
.text$mn:00005703
.text$mn:00005703 loc_5703:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+Fj
.text$mn:00005703                 cmp     [ebp+arg_0], 1FFFFFFFh
.text$mn:0000570A                 ja      short loc_5724
.text$mn:0000570C                 mov     eax, [ebp+arg_0]
.text$mn:0000570F                 shl     eax, 3
.text$mn:00005712                 push    eax             ; unsigned int
.text$mn:00005713                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00005718                 add     esp, 4
.text$mn:0000571B                 mov     [ebp+var_4], eax
.text$mn:0000571E                 cmp     [ebp+var_4], 0
.text$mn:00005722                 jnz     short loc_5729
.text$mn:00005724
.text$mn:00005724 loc_5724:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+1Aj
.text$mn:00005724                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00005729
.text$mn:00005729 loc_5729:                               ; CODE XREF: std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+11j
.text$mn:00005729                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+32j
.text$mn:00005729                 mov     eax, [ebp+var_4]
.text$mn:0000572C                 mov     esp, ebp
.text$mn:0000572E                 pop     ebp
.text$mn:0000572F                 retn
.text$mn:0000572F ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z endp
.text$mn:0000572F
.text$mn:0000572F _text$mn        ends
.text$mn:0000572F
.text$mn:00005730 ; ===========================================================================
.text$mn:00005730
.text$mn:00005730 ; Segment type: Pure code
.text$mn:00005730 ; Segment permissions: Read/Execute
.text$mn:00005730 _text$mn        segment para public 'CODE' use32
.text$mn:00005730                 assume cs:_text$mn
.text$mn:00005730                 ;org 5730h
.text$mn:00005730 ; COMDAT (pick any)
.text$mn:00005730                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005730
.text$mn:00005730 ; =============== S U B R O U T I N E =======================================
.text$mn:00005730
.text$mn:00005730 ; Attributes: bp-based frame
.text$mn:00005730
.text$mn:00005730 ; wchar_t * __cdecl std::_Allocate<wchar_t>(unsigned int, wchar_t *)
.text$mn:00005730                 public ??$_Allocate@_W@std@@YAPA_WIPA_W@Z
.text$mn:00005730 ??$_Allocate@_W@std@@YAPA_WIPA_W@Z proc near
.text$mn:00005730                                         ; CODE XREF: std::allocator<wchar_t>::allocate(uint)+Dp
.text$mn:00005730
.text$mn:00005730 var_4           = dword ptr -4
.text$mn:00005730 arg_0           = dword ptr  8
.text$mn:00005730
.text$mn:00005730                 push    ebp
.text$mn:00005731                 mov     ebp, esp
.text$mn:00005733                 push    ecx
.text$mn:00005734                 mov     [ebp+var_4], 0
.text$mn:0000573B                 cmp     [ebp+arg_0], 0
.text$mn:0000573F                 jnz     short loc_5743
.text$mn:00005741                 jmp     short loc_5768
.text$mn:00005743 ; ---------------------------------------------------------------------------
.text$mn:00005743
.text$mn:00005743 loc_5743:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+Fj
.text$mn:00005743                 cmp     [ebp+arg_0], 7FFFFFFFh
.text$mn:0000574A                 ja      short loc_5763
.text$mn:0000574C                 mov     eax, [ebp+arg_0]
.text$mn:0000574F                 shl     eax, 1
.text$mn:00005751                 push    eax             ; unsigned int
.text$mn:00005752                 call    ??2@YAPAXI@Z    ; operator new(uint)
.text$mn:00005757                 add     esp, 4
.text$mn:0000575A                 mov     [ebp+var_4], eax
.text$mn:0000575D                 cmp     [ebp+var_4], 0
.text$mn:00005761                 jnz     short loc_5768
.text$mn:00005763
.text$mn:00005763 loc_5763:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+1Aj
.text$mn:00005763                 call    ?_Xbad_alloc@std@@YAXXZ ; std::_Xbad_alloc(void)
.text$mn:00005768
.text$mn:00005768 loc_5768:                               ; CODE XREF: std::_Allocate<wchar_t>(uint,wchar_t *)+11j
.text$mn:00005768                                         ; std::_Allocate<wchar_t>(uint,wchar_t *)+31j
.text$mn:00005768                 mov     eax, [ebp+var_4]
.text$mn:0000576B                 mov     esp, ebp
.text$mn:0000576D                 pop     ebp
.text$mn:0000576E                 retn
.text$mn:0000576E ??$_Allocate@_W@std@@YAPA_WIPA_W@Z endp
.text$mn:0000576E
.text$mn:0000576E ; ---------------------------------------------------------------------------
.text$mn:0000576F                 align 10h
.text$mn:0000576F _text$mn        ends
.text$mn:0000576F
.text$mn:00005770 ; ===========================================================================
.text$mn:00005770
.text$mn:00005770 ; Segment type: Pure code
.text$mn:00005770 ; Segment permissions: Read/Execute
.text$mn:00005770 _text$mn        segment para public 'CODE' use32
.text$mn:00005770                 assume cs:_text$mn
.text$mn:00005770                 ;org 5770h
.text$mn:00005770 ; COMDAT (pick any)
.text$mn:00005770                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005770
.text$mn:00005770 ; =============== S U B R O U T I N E =======================================
.text$mn:00005770
.text$mn:00005770 ; Attributes: bp-based frame
.text$mn:00005770
.text$mn:00005770 ; int __cdecl std::_Debug_pointer<char>(int, wchar_t *, unsigned int)
.text$mn:00005770                 public ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z
.text$mn:00005770 ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z proc near
.text$mn:00005770                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+15p
.text$mn:00005770                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+1Bp
.text$mn:00005770
.text$mn:00005770 arg_0           = dword ptr  8
.text$mn:00005770 arg_4           = dword ptr  0Ch
.text$mn:00005770 arg_8           = dword ptr  10h
.text$mn:00005770
.text$mn:00005770                 push    ebp
.text$mn:00005771                 mov     ebp, esp
.text$mn:00005773                 cmp     [ebp+arg_0], 0
.text$mn:00005777                 jnz     short loc_578E
.text$mn:00005779                 mov     eax, [ebp+arg_8]
.text$mn:0000577C                 push    eax             ; unsigned int
.text$mn:0000577D                 mov     ecx, [ebp+arg_4]
.text$mn:00005780                 push    ecx             ; wchar_t *
.text$mn:00005781                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:00005786                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:0000578B                 add     esp, 0Ch
.text$mn:0000578E
.text$mn:0000578E loc_578E:                               ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+7j
.text$mn:0000578E                 pop     ebp
.text$mn:0000578F                 retn
.text$mn:0000578F ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z endp
.text$mn:0000578F
.text$mn:0000578F _text$mn        ends
.text$mn:0000578F
.text$mn:00005790 ; ===========================================================================
.text$mn:00005790
.text$mn:00005790 ; Segment type: Pure code
.text$mn:00005790 ; Segment permissions: Read/Execute
.text$mn:00005790 _text$mn        segment para public 'CODE' use32
.text$mn:00005790                 assume cs:_text$mn
.text$mn:00005790                 ;org 5790h
.text$mn:00005790 ; COMDAT (pick any)
.text$mn:00005790                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005790
.text$mn:00005790 ; =============== S U B R O U T I N E =======================================
.text$mn:00005790
.text$mn:00005790 ; Attributes: bp-based frame
.text$mn:00005790
.text$mn:00005790 ; int __cdecl std::_Debug_pointer<wchar_t>(int, wchar_t *, unsigned int)
.text$mn:00005790                 public ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z
.text$mn:00005790 ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z proc near
.text$mn:00005790                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+15p
.text$mn:00005790                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+1Bp ...
.text$mn:00005790
.text$mn:00005790 arg_0           = dword ptr  8
.text$mn:00005790 arg_4           = dword ptr  0Ch
.text$mn:00005790 arg_8           = dword ptr  10h
.text$mn:00005790
.text$mn:00005790                 push    ebp
.text$mn:00005791                 mov     ebp, esp
.text$mn:00005793                 cmp     [ebp+arg_0], 0
.text$mn:00005797                 jnz     short loc_57AE
.text$mn:00005799                 mov     eax, [ebp+arg_8]
.text$mn:0000579C                 push    eax             ; unsigned int
.text$mn:0000579D                 mov     ecx, [ebp+arg_4]
.text$mn:000057A0                 push    ecx             ; wchar_t *
.text$mn:000057A1                 push    offset ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@ ; "invalid null pointer"
.text$mn:000057A6                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000057AB                 add     esp, 0Ch
.text$mn:000057AE
.text$mn:000057AE loc_57AE:                               ; CODE XREF: std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+7j
.text$mn:000057AE                 pop     ebp
.text$mn:000057AF                 retn
.text$mn:000057AF ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z endp
.text$mn:000057AF
.text$mn:000057AF _text$mn        ends
.text$mn:000057AF
.text$mn:000057B0 ; ===========================================================================
.text$mn:000057B0
.text$mn:000057B0 ; Segment type: Pure code
.text$mn:000057B0 ; Segment permissions: Read/Execute
.text$mn:000057B0 _text$mn        segment para public 'CODE' use32
.text$mn:000057B0                 assume cs:_text$mn
.text$mn:000057B0                 ;org 57B0h
.text$mn:000057B0 ; COMDAT (pick any)
.text$mn:000057B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057B0
.text$mn:000057B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000057B0
.text$mn:000057B0 ; Attributes: bp-based frame
.text$mn:000057B0
.text$mn:000057B0 ; char * __cdecl std::addressof<char>(char &)
.text$mn:000057B0                 public ??$addressof@D@std@@YAPADAAD@Z
.text$mn:000057B0 ??$addressof@D@std@@YAPADAAD@Z proc near
.text$mn:000057B0                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p
.text$mn:000057B0                                         ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)+19p ...
.text$mn:000057B0
.text$mn:000057B0 arg_0           = dword ptr  8
.text$mn:000057B0
.text$mn:000057B0                 push    ebp
.text$mn:000057B1                 mov     ebp, esp
.text$mn:000057B3                 mov     eax, [ebp+arg_0]
.text$mn:000057B6                 pop     ebp
.text$mn:000057B7                 retn
.text$mn:000057B7 ??$addressof@D@std@@YAPADAAD@Z endp
.text$mn:000057B7
.text$mn:000057B7 _text$mn        ends
.text$mn:000057B7
.text$mn:000057B8 ; ===========================================================================
.text$mn:000057B8
.text$mn:000057B8 ; Segment type: Pure code
.text$mn:000057B8 ; Segment permissions: Read/Execute
.text$mn:000057B8 _text$mn        segment para public 'CODE' use32
.text$mn:000057B8                 assume cs:_text$mn
.text$mn:000057B8                 ;org 57B8h
.text$mn:000057B8 ; COMDAT (pick any)
.text$mn:000057B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057B8
.text$mn:000057B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000057B8
.text$mn:000057B8 ; Attributes: bp-based frame
.text$mn:000057B8
.text$mn:000057B8 ; wchar_t * __cdecl std::addressof<wchar_t>(wchar_t &)
.text$mn:000057B8                 public ??$addressof@_W@std@@YAPA_WAA_W@Z
.text$mn:000057B8 ??$addressof@_W@std@@YAPA_WAA_W@Z proc near
.text$mn:000057B8                                         ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p
.text$mn:000057B8                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+19p ...
.text$mn:000057B8
.text$mn:000057B8 arg_0           = dword ptr  8
.text$mn:000057B8
.text$mn:000057B8                 push    ebp
.text$mn:000057B9                 mov     ebp, esp
.text$mn:000057BB                 mov     eax, [ebp+arg_0]
.text$mn:000057BE                 pop     ebp
.text$mn:000057BF                 retn
.text$mn:000057BF ??$addressof@_W@std@@YAPA_WAA_W@Z endp
.text$mn:000057BF
.text$mn:000057BF _text$mn        ends
.text$mn:000057BF
.text$mn:000057C0 ; ===========================================================================
.text$mn:000057C0
.text$mn:000057C0 ; Segment type: Pure code
.text$mn:000057C0 ; Segment permissions: Read/Execute
.text$mn:000057C0 _text$mn        segment para public 'CODE' use32
.text$mn:000057C0                 assume cs:_text$mn
.text$mn:000057C0                 ;org 57C0h
.text$mn:000057C0 ; COMDAT (pick any)
.text$mn:000057C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000057C0
.text$mn:000057C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000057C0
.text$mn:000057C0 ; Attributes: bp-based frame
.text$mn:000057C0
.text$mn:000057C0 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign<class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>>(class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:000057C0                 public ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$mn:000057C0 ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
.text$mn:000057C0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+CBp
.text$mn:000057C0
.text$mn:000057C0 var_70          = byte ptr -70h
.text$mn:000057C0 var_64          = byte ptr -64h
.text$mn:000057C0 var_58          = dword ptr -58h
.text$mn:000057C0 var_54          = dword ptr -54h
.text$mn:000057C0 var_50          = dword ptr -50h
.text$mn:000057C0 var_4C          = dword ptr -4Ch
.text$mn:000057C0 var_48          = dword ptr -48h
.text$mn:000057C0 var_44          = dword ptr -44h
.text$mn:000057C0 var_40          = dword ptr -40h
.text$mn:000057C0 var_3C          = dword ptr -3Ch
.text$mn:000057C0 var_38          = dword ptr -38h
.text$mn:000057C0 var_34          = dword ptr -34h
.text$mn:000057C0 var_30          = dword ptr -30h
.text$mn:000057C0 var_2C          = dword ptr -2Ch
.text$mn:000057C0 var_28          = dword ptr -28h
.text$mn:000057C0 var_24          = dword ptr -24h
.text$mn:000057C0 var_20          = dword ptr -20h
.text$mn:000057C0 var_1C          = dword ptr -1Ch
.text$mn:000057C0 var_18          = dword ptr -18h
.text$mn:000057C0 var_14          = dword ptr -14h
.text$mn:000057C0 var_10          = dword ptr -10h
.text$mn:000057C0 var_C           = dword ptr -0Ch
.text$mn:000057C0 var_4           = dword ptr -4
.text$mn:000057C0 arg_0           = byte ptr  8
.text$mn:000057C0 arg_C           = byte ptr  14h
.text$mn:000057C0
.text$mn:000057C0                 push    ebp
.text$mn:000057C1                 mov     ebp, esp
.text$mn:000057C3                 push    0FFFFFFFFh
.text$mn:000057C5                 push    offset __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$mn:000057CA                 mov     eax, large fs:0
.text$mn:000057D0                 push    eax
.text$mn:000057D1                 sub     esp, 64h
.text$mn:000057D4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000057D9                 xor     eax, ebp
.text$mn:000057DB                 push    eax
.text$mn:000057DC                 lea     eax, [ebp+var_C]
.text$mn:000057DF                 mov     large fs:0, eax
.text$mn:000057E5                 mov     [ebp+var_10], ecx
.text$mn:000057E8                 mov     [ebp+var_4], 1
.text$mn:000057EF                 sub     esp, 0Ch
.text$mn:000057F2                 mov     ecx, esp
.text$mn:000057F4                 mov     [ebp+var_3C], esp
.text$mn:000057F7                 lea     eax, [ebp+arg_C]
.text$mn:000057FA                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:000057FB                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00005800                 mov     [ebp+var_14], eax
.text$mn:00005803                 mov     ecx, [ebp+var_14]
.text$mn:00005806                 mov     [ebp+var_40], ecx
.text$mn:00005809                 mov     byte ptr [ebp+var_4], 2
.text$mn:0000580D                 sub     esp, 0Ch
.text$mn:00005810                 mov     ecx, esp
.text$mn:00005812                 mov     [ebp+var_44], esp
.text$mn:00005815                 lea     edx, [ebp+arg_0]
.text$mn:00005818                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00005819                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000581E                 mov     [ebp+var_18], eax
.text$mn:00005821                 mov     eax, [ebp+var_18]
.text$mn:00005824                 mov     [ebp+var_48], eax
.text$mn:00005827                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000582B                 lea     ecx, [ebp+var_70]
.text$mn:0000582E                 push    ecx
.text$mn:0000582F                 mov     ecx, [ebp+var_10]
.text$mn:00005832                 call    ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)
.text$mn:00005837                 mov     [ebp+var_1C], eax
.text$mn:0000583A                 mov     edx, [ebp+var_1C]
.text$mn:0000583D                 mov     [ebp+var_20], edx
.text$mn:00005840                 mov     byte ptr [ebp+var_4], 4
.text$mn:00005844                 sub     esp, 0Ch
.text$mn:00005847                 mov     ecx, esp
.text$mn:00005849                 mov     [ebp+var_4C], esp
.text$mn:0000584C                 mov     eax, [ebp+var_20]
.text$mn:0000584F                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00005850                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00005855                 mov     [ebp+var_24], eax
.text$mn:00005858                 mov     ecx, [ebp+var_24]
.text$mn:0000585B                 mov     [ebp+var_50], ecx
.text$mn:0000585E                 mov     byte ptr [ebp+var_4], 5
.text$mn:00005862                 lea     edx, [ebp+var_64]
.text$mn:00005865                 push    edx
.text$mn:00005866                 mov     ecx, [ebp+var_10]
.text$mn:00005869                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:0000586E                 mov     [ebp+var_28], eax
.text$mn:00005871                 mov     eax, [ebp+var_28]
.text$mn:00005874                 mov     [ebp+var_2C], eax
.text$mn:00005877                 mov     byte ptr [ebp+var_4], 6
.text$mn:0000587B                 sub     esp, 0Ch
.text$mn:0000587E                 mov     ecx, esp
.text$mn:00005880                 mov     [ebp+var_54], esp
.text$mn:00005883                 mov     edx, [ebp+var_2C]
.text$mn:00005886                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:00005887                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000588C                 mov     [ebp+var_30], eax
.text$mn:0000588F                 mov     eax, [ebp+var_30]
.text$mn:00005892                 mov     [ebp+var_58], eax
.text$mn:00005895                 mov     byte ptr [ebp+var_4], 7
.text$mn:00005899                 mov     byte ptr [ebp+var_4], 9
.text$mn:0000589D                 mov     ecx, [ebp+var_10]
.text$mn:000058A0                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:000058A5                 mov     [ebp+var_34], eax
.text$mn:000058A8                 mov     ecx, [ebp+var_34]
.text$mn:000058AB                 mov     [ebp+var_38], ecx
.text$mn:000058AE                 mov     byte ptr [ebp+var_4], 8
.text$mn:000058B2                 lea     ecx, [ebp+var_64]
.text$mn:000058B5                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000058BA                 mov     byte ptr [ebp+var_4], 1
.text$mn:000058BE                 lea     ecx, [ebp+var_70]
.text$mn:000058C1                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000058C6                 mov     byte ptr [ebp+var_4], 0
.text$mn:000058CA                 lea     ecx, [ebp+arg_0]
.text$mn:000058CD                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000058D2                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000058D9                 lea     ecx, [ebp+arg_C]
.text$mn:000058DC                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000058E1                 mov     eax, [ebp+var_38]
.text$mn:000058E4                 mov     ecx, [ebp+var_C]
.text$mn:000058E7                 mov     large fs:0, ecx
.text$mn:000058EE                 pop     ecx
.text$mn:000058EF                 mov     esp, ebp
.text$mn:000058F1                 pop     ebp
.text$mn:000058F2                 retn    18h
.text$mn:000058F2 ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z endp
.text$mn:000058F2
.text$mn:000058F2 ; ---------------------------------------------------------------------------
.text$mn:000058F5                 align 4
.text$mn:000058F5 _text$mn        ends
.text$mn:000058F5
.text$x:000058F8 ; ===========================================================================
.text$x:000058F8
.text$x:000058F8 ; Segment type: Pure code
.text$x:000058F8 ; Segment permissions: Read/Execute
.text$x:000058F8 _text$x         segment para public 'CODE' use32
.text$x:000058F8                 assume cs:_text$x
.text$x:000058F8                 ;org 58F8h
.text$x:000058F8 ; COMDAT (pick associative to section at 57C0)
.text$x:000058F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000058F8
.text$x:000058F8 ; =============== S U B R O U T I N E =======================================
.text$x:000058F8
.text$x:000058F8
.text$x:000058F8 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 proc near
.text$x:000058F8                                         ; DATA XREF: .xdata$x:0000A660o
.text$x:000058F8                 lea     ecx, [ebp+14h]
.text$x:000058FB                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000058FB __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0 endp
.text$x:000058FB
.text$x:00005900
.text$x:00005900 ; =============== S U B R O U T I N E =======================================
.text$x:00005900
.text$x:00005900
.text$x:00005900 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 proc near
.text$x:00005900                                         ; DATA XREF: .xdata$x:0000A668o
.text$x:00005900                 lea     ecx, [ebp+8]
.text$x:00005903                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005903 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1 endp
.text$x:00005903
.text$x:00005908
.text$x:00005908 ; =============== S U B R O U T I N E =======================================
.text$x:00005908
.text$x:00005908
.text$x:00005908 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 proc near
.text$x:00005908                                         ; DATA XREF: .xdata$x:0000A670o
.text$x:00005908                 mov     ecx, [ebp-3Ch]
.text$x:0000590B                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000590B __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2 endp
.text$x:0000590B
.text$x:00005910
.text$x:00005910 ; =============== S U B R O U T I N E =======================================
.text$x:00005910
.text$x:00005910
.text$x:00005910 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 proc near
.text$x:00005910                                         ; DATA XREF: .xdata$x:0000A678o
.text$x:00005910                 mov     ecx, [ebp-44h]
.text$x:00005913                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005913 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3 endp
.text$x:00005913
.text$x:00005918
.text$x:00005918 ; =============== S U B R O U T I N E =======================================
.text$x:00005918
.text$x:00005918
.text$x:00005918 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 proc near
.text$x:00005918                                         ; DATA XREF: .xdata$x:0000A680o
.text$x:00005918                                         ; .xdata$x:0000A6A0o
.text$x:00005918                 lea     ecx, [ebp-70h]
.text$x:0000591B                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000591B __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4 endp
.text$x:0000591B
.text$x:00005920
.text$x:00005920 ; =============== S U B R O U T I N E =======================================
.text$x:00005920
.text$x:00005920
.text$x:00005920 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 proc near
.text$x:00005920                                         ; DATA XREF: .xdata$x:0000A688o
.text$x:00005920                 mov     ecx, [ebp-4Ch]
.text$x:00005923                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005923 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5 endp
.text$x:00005923
.text$x:00005928
.text$x:00005928 ; =============== S U B R O U T I N E =======================================
.text$x:00005928
.text$x:00005928
.text$x:00005928 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 proc near
.text$x:00005928                                         ; DATA XREF: .xdata$x:0000A690o
.text$x:00005928                                         ; .xdata$x:0000A6A8o
.text$x:00005928                 lea     ecx, [ebp-64h]
.text$x:0000592B                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000592B __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6 endp
.text$x:0000592B
.text$x:00005930
.text$x:00005930 ; =============== S U B R O U T I N E =======================================
.text$x:00005930
.text$x:00005930
.text$x:00005930 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 proc near
.text$x:00005930                                         ; DATA XREF: .xdata$x:0000A698o
.text$x:00005930                 mov     ecx, [ebp-54h]
.text$x:00005933                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00005933 __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7 endp
.text$x:00005933
.text$x:00005938
.text$x:00005938 ; =============== S U B R O U T I N E =======================================
.text$x:00005938
.text$x:00005938
.text$x:00005938 __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z proc near
.text$x:00005938                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:00005938
.text$x:00005938 arg_4           = dword ptr  8
.text$x:00005938
.text$x:00005938                 mov     edx, [esp+arg_4]
.text$x:0000593C                 lea     eax, [edx+0Ch]
.text$x:0000593F                 mov     ecx, [edx-68h]
.text$x:00005942                 xor     ecx, eax
.text$x:00005944                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005949                 mov     eax, offset __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.text$x:0000594E                 jmp     ___CxxFrameHandler3
.text$x:0000594E __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z endp
.text$x:0000594E
.text$x:0000594E ; ---------------------------------------------------------------------------
.text$x:00005953                 align 4
.text$x:00005953 _text$x         ends
.text$x:00005953
.text$mn:00005954 ; ===========================================================================
.text$mn:00005954
.text$mn:00005954 ; Segment type: Pure code
.text$mn:00005954 ; Segment permissions: Read/Execute
.text$mn:00005954 _text$mn        segment para public 'CODE' use32
.text$mn:00005954                 assume cs:_text$mn
.text$mn:00005954                 ;org 5954h
.text$mn:00005954 ; COMDAT (pick any)
.text$mn:00005954                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005954
.text$mn:00005954 ; =============== S U B R O U T I N E =======================================
.text$mn:00005954
.text$mn:00005954 ; Attributes: bp-based frame
.text$mn:00005954
.text$mn:00005954 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(void *, int)
.text$mn:00005954                 public ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z
.text$mn:00005954 ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00005954                                         ; CODE XREF: $LN19+4Bp
.text$mn:00005954
.text$mn:00005954 var_4           = dword ptr -4
.text$mn:00005954 arg_0           = dword ptr  8
.text$mn:00005954 arg_4           = dword ptr  0Ch
.text$mn:00005954
.text$mn:00005954                 push    ebp
.text$mn:00005955                 mov     ebp, esp
.text$mn:00005957                 push    ecx
.text$mn:00005958                 mov     [ebp+var_4], ecx
.text$mn:0000595B                 mov     eax, [ebp+arg_4]
.text$mn:0000595E                 push    eax
.text$mn:0000595F                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00005964                 add     esp, 4
.text$mn:00005967                 push    eax             ; int
.text$mn:00005968                 mov     ecx, [ebp+arg_0]
.text$mn:0000596B                 push    ecx             ; void *
.text$mn:0000596C                 mov     edx, [ebp+var_4]
.text$mn:0000596F                 push    edx             ; int
.text$mn:00005970                 call    ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z ; std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)
.text$mn:00005975                 add     esp, 0Ch
.text$mn:00005978                 mov     esp, ebp
.text$mn:0000597A                 pop     ebp
.text$mn:0000597B                 retn    8
.text$mn:0000597B ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z endp
.text$mn:0000597B
.text$mn:0000597B ; ---------------------------------------------------------------------------
.text$mn:0000597E                 align 10h
.text$mn:0000597E _text$mn        ends
.text$mn:0000597E
.text$mn:00005980 ; ===========================================================================
.text$mn:00005980
.text$mn:00005980 ; Segment type: Pure code
.text$mn:00005980 ; Segment permissions: Read/Execute
.text$mn:00005980 _text$mn        segment para public 'CODE' use32
.text$mn:00005980                 assume cs:_text$mn
.text$mn:00005980                 ;org 5980h
.text$mn:00005980 ; COMDAT (pick any)
.text$mn:00005980                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005980
.text$mn:00005980 ; =============== S U B R O U T I N E =======================================
.text$mn:00005980
.text$mn:00005980 ; Attributes: bp-based frame
.text$mn:00005980
.text$mn:00005980 ; int __stdcall std::allocator<char>::construct<char *,char * &>(void *, int)
.text$mn:00005980                 public ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:00005980 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$mn:00005980                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(std::allocator<char> &,char * *,char * &)+17p
.text$mn:00005980
.text$mn:00005980 var_1C          = dword ptr -1Ch
.text$mn:00005980 var_18          = dword ptr -18h
.text$mn:00005980 var_14          = dword ptr -14h
.text$mn:00005980 var_10          = dword ptr -10h
.text$mn:00005980 var_C           = dword ptr -0Ch
.text$mn:00005980 var_4           = dword ptr -4
.text$mn:00005980 arg_0           = dword ptr  8
.text$mn:00005980 arg_4           = dword ptr  0Ch
.text$mn:00005980
.text$mn:00005980                 push    ebp
.text$mn:00005981                 mov     ebp, esp
.text$mn:00005983                 push    0FFFFFFFFh
.text$mn:00005985                 push    offset __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$mn:0000598A                 mov     eax, large fs:0
.text$mn:00005990                 push    eax
.text$mn:00005991                 sub     esp, 10h
.text$mn:00005994                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005999                 xor     eax, ebp
.text$mn:0000599B                 push    eax
.text$mn:0000599C                 lea     eax, [ebp+var_C]
.text$mn:0000599F                 mov     large fs:0, eax
.text$mn:000059A5                 mov     [ebp+var_18], ecx
.text$mn:000059A8                 mov     eax, [ebp+arg_0]
.text$mn:000059AB                 push    eax             ; void *
.text$mn:000059AC                 push    4               ; unsigned int
.text$mn:000059AE                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:000059B3                 add     esp, 8
.text$mn:000059B6                 mov     [ebp+var_10], eax
.text$mn:000059B9                 mov     [ebp+var_4], 0
.text$mn:000059C0                 cmp     [ebp+var_10], 0
.text$mn:000059C4                 jz      short loc_59E1
.text$mn:000059C6                 mov     ecx, [ebp+arg_4]
.text$mn:000059C9                 push    ecx
.text$mn:000059CA                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:000059CF                 add     esp, 4
.text$mn:000059D2                 mov     edx, [ebp+var_10]
.text$mn:000059D5                 mov     eax, [eax]
.text$mn:000059D7                 mov     [edx], eax
.text$mn:000059D9                 mov     ecx, [ebp+var_10]
.text$mn:000059DC                 mov     [ebp+var_14], ecx
.text$mn:000059DF                 jmp     short loc_59E8
.text$mn:000059E1 ; ---------------------------------------------------------------------------
.text$mn:000059E1
.text$mn:000059E1 loc_59E1:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+44j
.text$mn:000059E1                 mov     [ebp+var_14], 0
.text$mn:000059E8
.text$mn:000059E8 loc_59E8:                               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5Fj
.text$mn:000059E8                 mov     edx, [ebp+var_14]
.text$mn:000059EB                 mov     [ebp+var_1C], edx
.text$mn:000059EE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000059F5                 mov     ecx, [ebp+var_C]
.text$mn:000059F8                 mov     large fs:0, ecx
.text$mn:000059FF                 pop     ecx
.text$mn:00005A00                 mov     esp, ebp
.text$mn:00005A02                 pop     ebp
.text$mn:00005A03                 retn    8
.text$mn:00005A03 ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$mn:00005A03
.text$mn:00005A03 ; ---------------------------------------------------------------------------
.text$mn:00005A06                 align 4
.text$mn:00005A06 _text$mn        ends
.text$mn:00005A06
.text$x:00005A08 ; ===========================================================================
.text$x:00005A08
.text$x:00005A08 ; Segment type: Pure code
.text$x:00005A08 ; Segment permissions: Read/Execute
.text$x:00005A08 _text$x         segment para public 'CODE' use32
.text$x:00005A08                 assume cs:_text$x
.text$x:00005A08                 ;org 5A08h
.text$x:00005A08 ; COMDAT (pick associative to section at 5980)
.text$x:00005A08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005A08
.text$x:00005A08 ; =============== S U B R O U T I N E =======================================
.text$x:00005A08
.text$x:00005A08
.text$x:00005A08 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 proc near
.text$x:00005A08                                         ; DATA XREF: .xdata$x:0000A6DCo
.text$x:00005A08                 mov     eax, [ebp+8]
.text$x:00005A0B                 push    eax
.text$x:00005A0C                 mov     eax, [ebp-10h]
.text$x:00005A0F                 push    eax             ; void *
.text$x:00005A10                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00005A15                 add     esp, 8
.text$x:00005A18                 retn
.text$x:00005A18 __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0 endp
.text$x:00005A18
.text$x:00005A19
.text$x:00005A19 ; =============== S U B R O U T I N E =======================================
.text$x:00005A19
.text$x:00005A19
.text$x:00005A19 __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z proc near
.text$x:00005A19                                         ; DATA XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+5o
.text$x:00005A19
.text$x:00005A19 arg_4           = dword ptr  8
.text$x:00005A19
.text$x:00005A19                 mov     edx, [esp+arg_4]
.text$x:00005A1D                 lea     eax, [edx+0Ch]
.text$x:00005A20                 mov     ecx, [edx-14h]
.text$x:00005A23                 xor     ecx, eax
.text$x:00005A25                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005A2A                 mov     eax, offset __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.text$x:00005A2F                 jmp     ___CxxFrameHandler3
.text$x:00005A2F __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z endp
.text$x:00005A2F
.text$x:00005A2F _text$x         ends
.text$x:00005A2F
.text$mn:00005A34 ; ===========================================================================
.text$mn:00005A34
.text$mn:00005A34 ; Segment type: Pure code
.text$mn:00005A34 ; Segment permissions: Read/Execute
.text$mn:00005A34 _text$mn        segment para public 'CODE' use32
.text$mn:00005A34                 assume cs:_text$mn
.text$mn:00005A34                 ;org 5A34h
.text$mn:00005A34 ; COMDAT (pick any)
.text$mn:00005A34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A34
.text$mn:00005A34 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A34
.text$mn:00005A34 ; Attributes: bp-based frame
.text$mn:00005A34
.text$mn:00005A34 ; int __cdecl std::allocator_traits<std::allocator<char>>::construct<char *,char * &>(int, void *, int)
.text$mn:00005A34                 public ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z
.text$mn:00005A34 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z proc near
.text$mn:00005A34                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+1Cp
.text$mn:00005A34
.text$mn:00005A34 arg_0           = dword ptr  8
.text$mn:00005A34 arg_4           = dword ptr  0Ch
.text$mn:00005A34 arg_8           = dword ptr  10h
.text$mn:00005A34
.text$mn:00005A34                 push    ebp
.text$mn:00005A35                 mov     ebp, esp
.text$mn:00005A37                 mov     eax, [ebp+arg_8]
.text$mn:00005A3A                 push    eax
.text$mn:00005A3B                 call    ??$forward@AAPAD@std@@YAAAPADAAPAD@Z ; std::forward<char * &>(char * &)
.text$mn:00005A40                 add     esp, 4
.text$mn:00005A43                 push    eax             ; int
.text$mn:00005A44                 mov     ecx, [ebp+arg_4]
.text$mn:00005A47                 push    ecx             ; void *
.text$mn:00005A48                 mov     ecx, [ebp+arg_0]
.text$mn:00005A4B                 call    ??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)
.text$mn:00005A50                 pop     ebp
.text$mn:00005A51                 retn
.text$mn:00005A51 ??$construct@PADAAPAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPADAAPAD@Z endp
.text$mn:00005A51
.text$mn:00005A51 ; ---------------------------------------------------------------------------
.text$mn:00005A52                 align 4
.text$mn:00005A52 _text$mn        ends
.text$mn:00005A52
.text$mn:00005A54 ; ===========================================================================
.text$mn:00005A54
.text$mn:00005A54 ; Segment type: Pure code
.text$mn:00005A54 ; Segment permissions: Read/Execute
.text$mn:00005A54 _text$mn        segment para public 'CODE' use32
.text$mn:00005A54                 assume cs:_text$mn
.text$mn:00005A54                 ;org 5A54h
.text$mn:00005A54 ; COMDAT (pick any)
.text$mn:00005A54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A54
.text$mn:00005A54 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A54
.text$mn:00005A54 ; Attributes: bp-based frame
.text$mn:00005A54
.text$mn:00005A54 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00005A54                 public ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00005A54 ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00005A54                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+50p
.text$mn:00005A54                                         ; $LN19_0+4Bp
.text$mn:00005A54
.text$mn:00005A54 var_4           = dword ptr -4
.text$mn:00005A54 arg_0           = dword ptr  8
.text$mn:00005A54 arg_4           = dword ptr  0Ch
.text$mn:00005A54
.text$mn:00005A54                 push    ebp
.text$mn:00005A55                 mov     ebp, esp
.text$mn:00005A57                 push    ecx
.text$mn:00005A58                 mov     [ebp+var_4], ecx
.text$mn:00005A5B                 mov     eax, [ebp+arg_4]
.text$mn:00005A5E                 push    eax
.text$mn:00005A5F                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00005A64                 add     esp, 4
.text$mn:00005A67                 push    eax             ; int
.text$mn:00005A68                 mov     ecx, [ebp+arg_0]
.text$mn:00005A6B                 push    ecx             ; void *
.text$mn:00005A6C                 mov     edx, [ebp+var_4]
.text$mn:00005A6F                 push    edx             ; int
.text$mn:00005A70                 call    ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)
.text$mn:00005A75                 add     esp, 0Ch
.text$mn:00005A78                 mov     esp, ebp
.text$mn:00005A7A                 pop     ebp
.text$mn:00005A7B                 retn    8
.text$mn:00005A7B ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00005A7B
.text$mn:00005A7B ; ---------------------------------------------------------------------------
.text$mn:00005A7E                 align 10h
.text$mn:00005A7E _text$mn        ends
.text$mn:00005A7E
.text$mn:00005A80 ; ===========================================================================
.text$mn:00005A80
.text$mn:00005A80 ; Segment type: Pure code
.text$mn:00005A80 ; Segment permissions: Read/Execute
.text$mn:00005A80 _text$mn        segment para public 'CODE' use32
.text$mn:00005A80                 assume cs:_text$mn
.text$mn:00005A80                 ;org 5A80h
.text$mn:00005A80 ; COMDAT (pick any)
.text$mn:00005A80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005A80
.text$mn:00005A80 ; =============== S U B R O U T I N E =======================================
.text$mn:00005A80
.text$mn:00005A80 ; Attributes: bp-based frame
.text$mn:00005A80
.text$mn:00005A80 ; int __stdcall std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(void *, int)
.text$mn:00005A80                 public ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00005A80 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$mn:00005A80                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(std::allocator<wchar_t> &,wchar_t * *,wchar_t * &)+17p
.text$mn:00005A80
.text$mn:00005A80 var_1C          = dword ptr -1Ch
.text$mn:00005A80 var_18          = dword ptr -18h
.text$mn:00005A80 var_14          = dword ptr -14h
.text$mn:00005A80 var_10          = dword ptr -10h
.text$mn:00005A80 var_C           = dword ptr -0Ch
.text$mn:00005A80 var_4           = dword ptr -4
.text$mn:00005A80 arg_0           = dword ptr  8
.text$mn:00005A80 arg_4           = dword ptr  0Ch
.text$mn:00005A80
.text$mn:00005A80                 push    ebp
.text$mn:00005A81                 mov     ebp, esp
.text$mn:00005A83                 push    0FFFFFFFFh
.text$mn:00005A85                 push    offset __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$mn:00005A8A                 mov     eax, large fs:0
.text$mn:00005A90                 push    eax
.text$mn:00005A91                 sub     esp, 10h
.text$mn:00005A94                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005A99                 xor     eax, ebp
.text$mn:00005A9B                 push    eax
.text$mn:00005A9C                 lea     eax, [ebp+var_C]
.text$mn:00005A9F                 mov     large fs:0, eax
.text$mn:00005AA5                 mov     [ebp+var_18], ecx
.text$mn:00005AA8                 mov     eax, [ebp+arg_0]
.text$mn:00005AAB                 push    eax             ; void *
.text$mn:00005AAC                 push    4               ; unsigned int
.text$mn:00005AAE                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00005AB3                 add     esp, 8
.text$mn:00005AB6                 mov     [ebp+var_10], eax
.text$mn:00005AB9                 mov     [ebp+var_4], 0
.text$mn:00005AC0                 cmp     [ebp+var_10], 0
.text$mn:00005AC4                 jz      short loc_5AE1
.text$mn:00005AC6                 mov     ecx, [ebp+arg_4]
.text$mn:00005AC9                 push    ecx
.text$mn:00005ACA                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00005ACF                 add     esp, 4
.text$mn:00005AD2                 mov     edx, [ebp+var_10]
.text$mn:00005AD5                 mov     eax, [eax]
.text$mn:00005AD7                 mov     [edx], eax
.text$mn:00005AD9                 mov     ecx, [ebp+var_10]
.text$mn:00005ADC                 mov     [ebp+var_14], ecx
.text$mn:00005ADF                 jmp     short loc_5AE8
.text$mn:00005AE1 ; ---------------------------------------------------------------------------
.text$mn:00005AE1
.text$mn:00005AE1 loc_5AE1:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+44j
.text$mn:00005AE1                 mov     [ebp+var_14], 0
.text$mn:00005AE8
.text$mn:00005AE8 loc_5AE8:                               ; CODE XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5Fj
.text$mn:00005AE8                 mov     edx, [ebp+var_14]
.text$mn:00005AEB                 mov     [ebp+var_1C], edx
.text$mn:00005AEE                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005AF5                 mov     ecx, [ebp+var_C]
.text$mn:00005AF8                 mov     large fs:0, ecx
.text$mn:00005AFF                 pop     ecx
.text$mn:00005B00                 mov     esp, ebp
.text$mn:00005B02                 pop     ebp
.text$mn:00005B03                 retn    8
.text$mn:00005B03 ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$mn:00005B03
.text$mn:00005B03 ; ---------------------------------------------------------------------------
.text$mn:00005B06                 align 4
.text$mn:00005B06 _text$mn        ends
.text$mn:00005B06
.text$x:00005B08 ; ===========================================================================
.text$x:00005B08
.text$x:00005B08 ; Segment type: Pure code
.text$x:00005B08 ; Segment permissions: Read/Execute
.text$x:00005B08 _text$x         segment para public 'CODE' use32
.text$x:00005B08                 assume cs:_text$x
.text$x:00005B08                 ;org 5B08h
.text$x:00005B08 ; COMDAT (pick associative to section at 5A80)
.text$x:00005B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005B08
.text$x:00005B08 ; =============== S U B R O U T I N E =======================================
.text$x:00005B08
.text$x:00005B08
.text$x:00005B08 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 proc near
.text$x:00005B08                                         ; DATA XREF: .xdata$x:0000A708o
.text$x:00005B08                 mov     eax, [ebp+8]
.text$x:00005B0B                 push    eax
.text$x:00005B0C                 mov     eax, [ebp-10h]
.text$x:00005B0F                 push    eax             ; void *
.text$x:00005B10                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00005B15                 add     esp, 8
.text$x:00005B18                 retn
.text$x:00005B18 __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0 endp
.text$x:00005B18
.text$x:00005B19
.text$x:00005B19 ; =============== S U B R O U T I N E =======================================
.text$x:00005B19
.text$x:00005B19
.text$x:00005B19 __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z proc near
.text$x:00005B19                                         ; DATA XREF: std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+5o
.text$x:00005B19
.text$x:00005B19 arg_4           = dword ptr  8
.text$x:00005B19
.text$x:00005B19                 mov     edx, [esp+arg_4]
.text$x:00005B1D                 lea     eax, [edx+0Ch]
.text$x:00005B20                 mov     ecx, [edx-14h]
.text$x:00005B23                 xor     ecx, eax
.text$x:00005B25                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005B2A                 mov     eax, offset __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.text$x:00005B2F                 jmp     ___CxxFrameHandler3
.text$x:00005B2F __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z endp
.text$x:00005B2F
.text$x:00005B2F _text$x         ends
.text$x:00005B2F
.text$mn:00005B34 ; ===========================================================================
.text$mn:00005B34
.text$mn:00005B34 ; Segment type: Pure code
.text$mn:00005B34 ; Segment permissions: Read/Execute
.text$mn:00005B34 _text$mn        segment para public 'CODE' use32
.text$mn:00005B34                 assume cs:_text$mn
.text$mn:00005B34                 ;org 5B34h
.text$mn:00005B34 ; COMDAT (pick any)
.text$mn:00005B34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B34
.text$mn:00005B34 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B34
.text$mn:00005B34 ; Attributes: bp-based frame
.text$mn:00005B34
.text$mn:00005B34 ; int __cdecl std::allocator_traits<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(int, void *, int)
.text$mn:00005B34                 public ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z
.text$mn:00005B34 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z proc near
.text$mn:00005B34                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+1Cp
.text$mn:00005B34
.text$mn:00005B34 arg_0           = dword ptr  8
.text$mn:00005B34 arg_4           = dword ptr  0Ch
.text$mn:00005B34 arg_8           = dword ptr  10h
.text$mn:00005B34
.text$mn:00005B34                 push    ebp
.text$mn:00005B35                 mov     ebp, esp
.text$mn:00005B37                 mov     eax, [ebp+arg_8]
.text$mn:00005B3A                 push    eax
.text$mn:00005B3B                 call    ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z ; std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00005B40                 add     esp, 4
.text$mn:00005B43                 push    eax             ; int
.text$mn:00005B44                 mov     ecx, [ebp+arg_4]
.text$mn:00005B47                 push    ecx             ; void *
.text$mn:00005B48                 mov     ecx, [ebp+arg_0]
.text$mn:00005B4B                 call    ??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00005B50                 pop     ebp
.text$mn:00005B51                 retn
.text$mn:00005B51 ??$construct@PA_WAAPA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_WAAPA_W@Z endp
.text$mn:00005B51
.text$mn:00005B51 ; ---------------------------------------------------------------------------
.text$mn:00005B52                 align 4
.text$mn:00005B52 _text$mn        ends
.text$mn:00005B52
.text$mn:00005B54 ; ===========================================================================
.text$mn:00005B54
.text$mn:00005B54 ; Segment type: Pure code
.text$mn:00005B54 ; Segment permissions: Read/Execute
.text$mn:00005B54 _text$mn        segment para public 'CODE' use32
.text$mn:00005B54                 assume cs:_text$mn
.text$mn:00005B54                 ;org 5B54h
.text$mn:00005B54 ; COMDAT (pick any)
.text$mn:00005B54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005B54
.text$mn:00005B54 ; =============== S U B R O U T I N E =======================================
.text$mn:00005B54
.text$mn:00005B54 ; Attributes: bp-based frame
.text$mn:00005B54
.text$mn:00005B54 ; int __stdcall std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(void *, int)
.text$mn:00005B54                 public ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00005B54 ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$mn:00005B54                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+32p
.text$mn:00005B54                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+32p
.text$mn:00005B54
.text$mn:00005B54 var_1C          = dword ptr -1Ch
.text$mn:00005B54 var_18          = dword ptr -18h
.text$mn:00005B54 var_14          = dword ptr -14h
.text$mn:00005B54 var_10          = dword ptr -10h
.text$mn:00005B54 var_C           = dword ptr -0Ch
.text$mn:00005B54 var_4           = dword ptr -4
.text$mn:00005B54 arg_0           = dword ptr  8
.text$mn:00005B54 arg_4           = dword ptr  0Ch
.text$mn:00005B54
.text$mn:00005B54                 push    ebp
.text$mn:00005B55                 mov     ebp, esp
.text$mn:00005B57                 push    0FFFFFFFFh
.text$mn:00005B59                 push    offset __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$mn:00005B5E                 mov     eax, large fs:0
.text$mn:00005B64                 push    eax
.text$mn:00005B65                 sub     esp, 10h
.text$mn:00005B68                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005B6D                 xor     eax, ebp
.text$mn:00005B6F                 push    eax
.text$mn:00005B70                 lea     eax, [ebp+var_C]
.text$mn:00005B73                 mov     large fs:0, eax
.text$mn:00005B79                 mov     [ebp+var_18], ecx
.text$mn:00005B7C                 mov     eax, [ebp+arg_0]
.text$mn:00005B7F                 push    eax             ; void *
.text$mn:00005B80                 push    8               ; unsigned int
.text$mn:00005B82                 call    ??2@YAPAXIPAX@Z ; operator new(uint,void *)
.text$mn:00005B87                 add     esp, 8
.text$mn:00005B8A                 mov     [ebp+var_10], eax
.text$mn:00005B8D                 mov     [ebp+var_4], 0
.text$mn:00005B94                 cmp     [ebp+var_10], 0
.text$mn:00005B98                 jz      short loc_5BBB
.text$mn:00005B9A                 mov     ecx, [ebp+arg_4]
.text$mn:00005B9D                 push    ecx
.text$mn:00005B9E                 call    ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z ; std::forward<std::_Container_proxy>(std::_Container_proxy &)
.text$mn:00005BA3                 add     esp, 4
.text$mn:00005BA6                 mov     edx, [eax]
.text$mn:00005BA8                 mov     eax, [eax+4]
.text$mn:00005BAB                 mov     ecx, [ebp+var_10]
.text$mn:00005BAE                 mov     [ecx], edx
.text$mn:00005BB0                 mov     [ecx+4], eax
.text$mn:00005BB3                 mov     edx, [ebp+var_10]
.text$mn:00005BB6                 mov     [ebp+var_14], edx
.text$mn:00005BB9                 jmp     short loc_5BC2
.text$mn:00005BBB ; ---------------------------------------------------------------------------
.text$mn:00005BBB
.text$mn:00005BBB loc_5BBB:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+44j
.text$mn:00005BBB                 mov     [ebp+var_14], 0
.text$mn:00005BC2
.text$mn:00005BC2 loc_5BC2:                               ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+65j
.text$mn:00005BC2                 mov     eax, [ebp+var_14]
.text$mn:00005BC5                 mov     [ebp+var_1C], eax
.text$mn:00005BC8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005BCF                 mov     ecx, [ebp+var_C]
.text$mn:00005BD2                 mov     large fs:0, ecx
.text$mn:00005BD9                 pop     ecx
.text$mn:00005BDA                 mov     esp, ebp
.text$mn:00005BDC                 pop     ebp
.text$mn:00005BDD                 retn    8
.text$mn:00005BDD ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$mn:00005BDD
.text$mn:00005BDD _text$mn        ends
.text$mn:00005BDD
.text$x:00005BE0 ; ===========================================================================
.text$x:00005BE0
.text$x:00005BE0 ; Segment type: Pure code
.text$x:00005BE0 ; Segment permissions: Read/Execute
.text$x:00005BE0 _text$x         segment para public 'CODE' use32
.text$x:00005BE0                 assume cs:_text$x
.text$x:00005BE0                 ;org 5BE0h
.text$x:00005BE0 ; COMDAT (pick associative to section at 5B54)
.text$x:00005BE0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005BE0
.text$x:00005BE0 ; =============== S U B R O U T I N E =======================================
.text$x:00005BE0
.text$x:00005BE0
.text$x:00005BE0 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 proc near
.text$x:00005BE0                                         ; DATA XREF: .xdata$x:0000A6B0o
.text$x:00005BE0                 mov     eax, [ebp+8]
.text$x:00005BE3                 push    eax
.text$x:00005BE4                 mov     eax, [ebp-10h]
.text$x:00005BE7                 push    eax             ; void *
.text$x:00005BE8                 call    ??3@YAXPAX0@Z   ; operator delete(void *,void *)
.text$x:00005BED                 add     esp, 8
.text$x:00005BF0                 retn
.text$x:00005BF0 __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0 endp
.text$x:00005BF0
.text$x:00005BF1
.text$x:00005BF1 ; =============== S U B R O U T I N E =======================================
.text$x:00005BF1
.text$x:00005BF1
.text$x:00005BF1 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z proc near
.text$x:00005BF1                                         ; DATA XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+5o
.text$x:00005BF1
.text$x:00005BF1 arg_4           = dword ptr  8
.text$x:00005BF1
.text$x:00005BF1                 mov     edx, [esp+arg_4]
.text$x:00005BF5                 lea     eax, [edx+0Ch]
.text$x:00005BF8                 mov     ecx, [edx-14h]
.text$x:00005BFB                 xor     ecx, eax
.text$x:00005BFD                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005C02                 mov     eax, offset __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.text$x:00005C07                 jmp     ___CxxFrameHandler3
.text$x:00005C07 __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z endp
.text$x:00005C07
.text$x:00005C07 _text$x         ends
.text$x:00005C07
.text$mn:00005C0C ; ===========================================================================
.text$mn:00005C0C
.text$mn:00005C0C ; Segment type: Pure code
.text$mn:00005C0C ; Segment permissions: Read/Execute
.text$mn:00005C0C _text$mn        segment para public 'CODE' use32
.text$mn:00005C0C                 assume cs:_text$mn
.text$mn:00005C0C                 ;org 5C0Ch
.text$mn:00005C0C ; COMDAT (pick any)
.text$mn:00005C0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C0C
.text$mn:00005C0C ; =============== S U B R O U T I N E =======================================
.text$mn:00005C0C
.text$mn:00005C0C ; Attributes: bp-based frame
.text$mn:00005C0C
.text$mn:00005C0C ; public: void __thiscall std::_Wrap_alloc<class std::allocator<char>>::destroy<char *>(char * *)
.text$mn:00005C0C                 public ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z
.text$mn:00005C0C ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z proc near
.text$mn:00005C0C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+3Ap
.text$mn:00005C0C
.text$mn:00005C0C var_4           = dword ptr -4
.text$mn:00005C0C arg_0           = dword ptr  8
.text$mn:00005C0C
.text$mn:00005C0C                 push    ebp
.text$mn:00005C0D                 mov     ebp, esp
.text$mn:00005C0F                 push    ecx
.text$mn:00005C10                 mov     [ebp+var_4], ecx
.text$mn:00005C13                 mov     eax, [ebp+arg_0]
.text$mn:00005C16                 push    eax
.text$mn:00005C17                 mov     ecx, [ebp+var_4]
.text$mn:00005C1A                 push    ecx
.text$mn:00005C1B                 call    ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z ; std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)
.text$mn:00005C20                 add     esp, 8
.text$mn:00005C23                 mov     esp, ebp
.text$mn:00005C25                 pop     ebp
.text$mn:00005C26                 retn    4
.text$mn:00005C26 ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z endp
.text$mn:00005C26
.text$mn:00005C26 ; ---------------------------------------------------------------------------
.text$mn:00005C29                 align 4
.text$mn:00005C29 _text$mn        ends
.text$mn:00005C29
.text$mn:00005C2C ; ===========================================================================
.text$mn:00005C2C
.text$mn:00005C2C ; Segment type: Pure code
.text$mn:00005C2C ; Segment permissions: Read/Execute
.text$mn:00005C2C _text$mn        segment para public 'CODE' use32
.text$mn:00005C2C                 assume cs:_text$mn
.text$mn:00005C2C                 ;org 5C2Ch
.text$mn:00005C2C ; COMDAT (pick any)
.text$mn:00005C2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C2C
.text$mn:00005C2C ; =============== S U B R O U T I N E =======================================
.text$mn:00005C2C
.text$mn:00005C2C ; Attributes: bp-based frame
.text$mn:00005C2C
.text$mn:00005C2C ; public: void __thiscall std::allocator<char>::destroy<char *>(char * *)
.text$mn:00005C2C                 public ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z
.text$mn:00005C2C ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z proc near
.text$mn:00005C2C                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::destroy<char *>(std::allocator<char> &,char * *)+Ap
.text$mn:00005C2C
.text$mn:00005C2C var_4           = dword ptr -4
.text$mn:00005C2C
.text$mn:00005C2C                 push    ebp
.text$mn:00005C2D                 mov     ebp, esp
.text$mn:00005C2F                 push    ecx
.text$mn:00005C30                 mov     [ebp+var_4], ecx
.text$mn:00005C33                 mov     esp, ebp
.text$mn:00005C35                 pop     ebp
.text$mn:00005C36                 retn    4
.text$mn:00005C36 ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z endp
.text$mn:00005C36
.text$mn:00005C36 ; ---------------------------------------------------------------------------
.text$mn:00005C39                 align 4
.text$mn:00005C39 _text$mn        ends
.text$mn:00005C39
.text$mn:00005C3C ; ===========================================================================
.text$mn:00005C3C
.text$mn:00005C3C ; Segment type: Pure code
.text$mn:00005C3C ; Segment permissions: Read/Execute
.text$mn:00005C3C _text$mn        segment para public 'CODE' use32
.text$mn:00005C3C                 assume cs:_text$mn
.text$mn:00005C3C                 ;org 5C3Ch
.text$mn:00005C3C ; COMDAT (pick any)
.text$mn:00005C3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C3C
.text$mn:00005C3C ; =============== S U B R O U T I N E =======================================
.text$mn:00005C3C
.text$mn:00005C3C ; Attributes: bp-based frame
.text$mn:00005C3C
.text$mn:00005C3C ; public: static void __cdecl std::allocator_traits<class std::allocator<char>>::destroy<char *>(class std::allocator<char> &, char * *)
.text$mn:00005C3C                 public ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z
.text$mn:00005C3C ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z proc near
.text$mn:00005C3C                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)+Fp
.text$mn:00005C3C
.text$mn:00005C3C arg_0           = dword ptr  8
.text$mn:00005C3C arg_4           = dword ptr  0Ch
.text$mn:00005C3C
.text$mn:00005C3C                 push    ebp
.text$mn:00005C3D                 mov     ebp, esp
.text$mn:00005C3F                 mov     eax, [ebp+arg_4]
.text$mn:00005C42                 push    eax
.text$mn:00005C43                 mov     ecx, [ebp+arg_0]
.text$mn:00005C46                 call    ??$destroy@PAD@?$allocator@D@std@@QAEXPAPAD@Z ; std::allocator<char>::destroy<char *>(char * *)
.text$mn:00005C4B                 pop     ebp
.text$mn:00005C4C                 retn
.text$mn:00005C4C ??$destroy@PAD@?$allocator_traits@V?$allocator@D@std@@@std@@SAXAAV?$allocator@D@1@PAPAD@Z endp
.text$mn:00005C4C
.text$mn:00005C4C ; ---------------------------------------------------------------------------
.text$mn:00005C4D                 align 10h
.text$mn:00005C4D _text$mn        ends
.text$mn:00005C4D
.text$mn:00005C50 ; ===========================================================================
.text$mn:00005C50
.text$mn:00005C50 ; Segment type: Pure code
.text$mn:00005C50 ; Segment permissions: Read/Execute
.text$mn:00005C50 _text$mn        segment para public 'CODE' use32
.text$mn:00005C50                 assume cs:_text$mn
.text$mn:00005C50                 ;org 5C50h
.text$mn:00005C50 ; COMDAT (pick any)
.text$mn:00005C50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C50
.text$mn:00005C50 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C50
.text$mn:00005C50 ; Attributes: bp-based frame
.text$mn:00005C50
.text$mn:00005C50 ; public: void __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00005C50                 public ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z
.text$mn:00005C50 ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z proc near
.text$mn:00005C50                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+3Ap
.text$mn:00005C50
.text$mn:00005C50 var_4           = dword ptr -4
.text$mn:00005C50 arg_0           = dword ptr  8
.text$mn:00005C50
.text$mn:00005C50                 push    ebp
.text$mn:00005C51                 mov     ebp, esp
.text$mn:00005C53                 push    ecx
.text$mn:00005C54                 mov     [ebp+var_4], ecx
.text$mn:00005C57                 mov     eax, [ebp+arg_0]
.text$mn:00005C5A                 push    eax
.text$mn:00005C5B                 mov     ecx, [ebp+var_4]
.text$mn:00005C5E                 push    ecx
.text$mn:00005C5F                 call    ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z ; std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)
.text$mn:00005C64                 add     esp, 8
.text$mn:00005C67                 mov     esp, ebp
.text$mn:00005C69                 pop     ebp
.text$mn:00005C6A                 retn    4
.text$mn:00005C6A ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z endp
.text$mn:00005C6A
.text$mn:00005C6A ; ---------------------------------------------------------------------------
.text$mn:00005C6D                 align 10h
.text$mn:00005C6D _text$mn        ends
.text$mn:00005C6D
.text$mn:00005C70 ; ===========================================================================
.text$mn:00005C70
.text$mn:00005C70 ; Segment type: Pure code
.text$mn:00005C70 ; Segment permissions: Read/Execute
.text$mn:00005C70 _text$mn        segment para public 'CODE' use32
.text$mn:00005C70                 assume cs:_text$mn
.text$mn:00005C70                 ;org 5C70h
.text$mn:00005C70 ; COMDAT (pick any)
.text$mn:00005C70                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C70
.text$mn:00005C70 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C70
.text$mn:00005C70 ; Attributes: bp-based frame
.text$mn:00005C70
.text$mn:00005C70 ; public: void __thiscall std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00005C70                 public ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z
.text$mn:00005C70 ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z proc near
.text$mn:00005C70                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::destroy<wchar_t *>(std::allocator<wchar_t> &,wchar_t * *)+Ap
.text$mn:00005C70
.text$mn:00005C70 var_4           = dword ptr -4
.text$mn:00005C70
.text$mn:00005C70                 push    ebp
.text$mn:00005C71                 mov     ebp, esp
.text$mn:00005C73                 push    ecx
.text$mn:00005C74                 mov     [ebp+var_4], ecx
.text$mn:00005C77                 mov     esp, ebp
.text$mn:00005C79                 pop     ebp
.text$mn:00005C7A                 retn    4
.text$mn:00005C7A ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z endp
.text$mn:00005C7A
.text$mn:00005C7A ; ---------------------------------------------------------------------------
.text$mn:00005C7D                 align 10h
.text$mn:00005C7D _text$mn        ends
.text$mn:00005C7D
.text$mn:00005C80 ; ===========================================================================
.text$mn:00005C80
.text$mn:00005C80 ; Segment type: Pure code
.text$mn:00005C80 ; Segment permissions: Read/Execute
.text$mn:00005C80 _text$mn        segment para public 'CODE' use32
.text$mn:00005C80                 assume cs:_text$mn
.text$mn:00005C80                 ;org 5C80h
.text$mn:00005C80 ; COMDAT (pick any)
.text$mn:00005C80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C80
.text$mn:00005C80 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C80
.text$mn:00005C80 ; Attributes: bp-based frame
.text$mn:00005C80
.text$mn:00005C80 ; public: static void __cdecl std::allocator_traits<class std::allocator<wchar_t>>::destroy<wchar_t *>(class std::allocator<wchar_t> &, wchar_t * *)
.text$mn:00005C80                 public ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z
.text$mn:00005C80 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z proc near
.text$mn:00005C80                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)+Fp
.text$mn:00005C80
.text$mn:00005C80 arg_0           = dword ptr  8
.text$mn:00005C80 arg_4           = dword ptr  0Ch
.text$mn:00005C80
.text$mn:00005C80                 push    ebp
.text$mn:00005C81                 mov     ebp, esp
.text$mn:00005C83                 mov     eax, [ebp+arg_4]
.text$mn:00005C86                 push    eax
.text$mn:00005C87                 mov     ecx, [ebp+arg_0]
.text$mn:00005C8A                 call    ??$destroy@PA_W@?$allocator@_W@std@@QAEXPAPA_W@Z ; std::allocator<wchar_t>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00005C8F                 pop     ebp
.text$mn:00005C90                 retn
.text$mn:00005C90 ??$destroy@PA_W@?$allocator_traits@V?$allocator@_W@std@@@std@@SAXAAV?$allocator@_W@1@PAPA_W@Z endp
.text$mn:00005C90
.text$mn:00005C90 ; ---------------------------------------------------------------------------
.text$mn:00005C91                 align 4
.text$mn:00005C91 _text$mn        ends
.text$mn:00005C91
.text$mn:00005C94 ; ===========================================================================
.text$mn:00005C94
.text$mn:00005C94 ; Segment type: Pure code
.text$mn:00005C94 ; Segment permissions: Read/Execute
.text$mn:00005C94 _text$mn        segment para public 'CODE' use32
.text$mn:00005C94                 assume cs:_text$mn
.text$mn:00005C94                 ;org 5C94h
.text$mn:00005C94 ; COMDAT (pick any)
.text$mn:00005C94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005C94
.text$mn:00005C94 ; =============== S U B R O U T I N E =======================================
.text$mn:00005C94
.text$mn:00005C94 ; Attributes: bp-based frame
.text$mn:00005C94
.text$mn:00005C94 ; public: void __thiscall std::allocator<struct std::_Container_proxy>::destroy<struct std::_Container_proxy>(struct std::_Container_proxy *)
.text$mn:00005C94                 public ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z
.text$mn:00005C94 ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z proc near
.text$mn:00005C94                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+22p
.text$mn:00005C94                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+22p
.text$mn:00005C94
.text$mn:00005C94 var_4           = dword ptr -4
.text$mn:00005C94
.text$mn:00005C94                 push    ebp
.text$mn:00005C95                 mov     ebp, esp
.text$mn:00005C97                 push    ecx
.text$mn:00005C98                 mov     [ebp+var_4], ecx
.text$mn:00005C9B                 mov     esp, ebp
.text$mn:00005C9D                 pop     ebp
.text$mn:00005C9E                 retn    4
.text$mn:00005C9E ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z endp
.text$mn:00005C9E
.text$mn:00005C9E ; ---------------------------------------------------------------------------
.text$mn:00005CA1                 align 4
.text$mn:00005CA1 _text$mn        ends
.text$mn:00005CA1
.text$mn:00005CA4 ; ===========================================================================
.text$mn:00005CA4
.text$mn:00005CA4 ; Segment type: Pure code
.text$mn:00005CA4 ; Segment permissions: Read/Execute
.text$mn:00005CA4 _text$mn        segment para public 'CODE' use32
.text$mn:00005CA4                 assume cs:_text$mn
.text$mn:00005CA4                 ;org 5CA4h
.text$mn:00005CA4 ; COMDAT (pick any)
.text$mn:00005CA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CA4
.text$mn:00005CA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CA4
.text$mn:00005CA4 ; Attributes: bp-based frame
.text$mn:00005CA4
.text$mn:00005CA4 ; char * & __cdecl std::forward<char * &>(char * &)
.text$mn:00005CA4                 public ??$forward@AAPAD@std@@YAAAPADAAPAD@Z
.text$mn:00005CA4 ??$forward@AAPAD@std@@YAAAPADAAPAD@Z proc near
.text$mn:00005CA4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)+Bp
.text$mn:00005CA4                                         ; std::allocator<char>::construct<char *,char * &>(char * *,char * &)+4Ap ...
.text$mn:00005CA4
.text$mn:00005CA4 arg_0           = dword ptr  8
.text$mn:00005CA4
.text$mn:00005CA4                 push    ebp
.text$mn:00005CA5                 mov     ebp, esp
.text$mn:00005CA7                 mov     eax, [ebp+arg_0]
.text$mn:00005CAA                 pop     ebp
.text$mn:00005CAB                 retn
.text$mn:00005CAB ??$forward@AAPAD@std@@YAAAPADAAPAD@Z endp
.text$mn:00005CAB
.text$mn:00005CAB _text$mn        ends
.text$mn:00005CAB
.text$mn:00005CAC ; ===========================================================================
.text$mn:00005CAC
.text$mn:00005CAC ; Segment type: Pure code
.text$mn:00005CAC ; Segment permissions: Read/Execute
.text$mn:00005CAC _text$mn        segment para public 'CODE' use32
.text$mn:00005CAC                 assume cs:_text$mn
.text$mn:00005CAC                 ;org 5CACh
.text$mn:00005CAC ; COMDAT (pick any)
.text$mn:00005CAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CAC
.text$mn:00005CAC ; =============== S U B R O U T I N E =======================================
.text$mn:00005CAC
.text$mn:00005CAC ; Attributes: bp-based frame
.text$mn:00005CAC
.text$mn:00005CAC ; wchar_t * & __cdecl std::forward<wchar_t * &>(wchar_t * &)
.text$mn:00005CAC                 public ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z
.text$mn:00005CAC ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z proc near
.text$mn:00005CAC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+Bp
.text$mn:00005CAC                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+4Ap ...
.text$mn:00005CAC
.text$mn:00005CAC arg_0           = dword ptr  8
.text$mn:00005CAC
.text$mn:00005CAC                 push    ebp
.text$mn:00005CAD                 mov     ebp, esp
.text$mn:00005CAF                 mov     eax, [ebp+arg_0]
.text$mn:00005CB2                 pop     ebp
.text$mn:00005CB3                 retn
.text$mn:00005CB3 ??$forward@AAPA_W@std@@YAAAPA_WAAPA_W@Z endp
.text$mn:00005CB3
.text$mn:00005CB3 _text$mn        ends
.text$mn:00005CB3
.text$mn:00005CB4 ; ===========================================================================
.text$mn:00005CB4
.text$mn:00005CB4 ; Segment type: Pure code
.text$mn:00005CB4 ; Segment permissions: Read/Execute
.text$mn:00005CB4 _text$mn        segment para public 'CODE' use32
.text$mn:00005CB4                 assume cs:_text$mn
.text$mn:00005CB4                 ;org 5CB4h
.text$mn:00005CB4 ; COMDAT (pick any)
.text$mn:00005CB4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CB4
.text$mn:00005CB4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CB4
.text$mn:00005CB4 ; Attributes: bp-based frame
.text$mn:00005CB4
.text$mn:00005CB4 ; struct std::_Container_proxy && __cdecl std::forward<struct std::_Container_proxy>(struct std::_Container_proxy &)
.text$mn:00005CB4                 public ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z
.text$mn:00005CB4 ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z proc near
.text$mn:00005CB4                                         ; CODE XREF: std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)+4Ap
.text$mn:00005CB4
.text$mn:00005CB4 arg_0           = dword ptr  8
.text$mn:00005CB4
.text$mn:00005CB4                 push    ebp
.text$mn:00005CB5                 mov     ebp, esp
.text$mn:00005CB7                 mov     eax, [ebp+arg_0]
.text$mn:00005CBA                 pop     ebp
.text$mn:00005CBB                 retn
.text$mn:00005CBB ??$forward@U_Container_proxy@std@@@std@@YA$$QAU_Container_proxy@0@AAU10@@Z endp
.text$mn:00005CBB
.text$mn:00005CBB _text$mn        ends
.text$mn:00005CBB
.text$mn:00005CBC ; ===========================================================================
.text$mn:00005CBC
.text$mn:00005CBC ; Segment type: Pure code
.text$mn:00005CBC ; Segment permissions: Read/Execute
.text$mn:00005CBC _text$mn        segment para public 'CODE' use32
.text$mn:00005CBC                 assume cs:_text$mn
.text$mn:00005CBC                 ;org 5CBCh
.text$mn:00005CBC ; COMDAT (pick any)
.text$mn:00005CBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CBC
.text$mn:00005CBC ; =============== S U B R O U T I N E =======================================
.text$mn:00005CBC
.text$mn:00005CBC ; Attributes: bp-based frame
.text$mn:00005CBC
.text$mn:00005CBC ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> && __cdecl std::forward<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &)
.text$mn:00005CBC                 public ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z
.text$mn:00005CBC ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z proc near
.text$mn:00005CBC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+D6p
.text$mn:00005CBC
.text$mn:00005CBC arg_0           = dword ptr  8
.text$mn:00005CBC
.text$mn:00005CBC                 push    ebp
.text$mn:00005CBD                 mov     ebp, esp
.text$mn:00005CBF                 mov     eax, [ebp+arg_0]
.text$mn:00005CC2                 pop     ebp
.text$mn:00005CC3                 retn
.text$mn:00005CC3 ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z endp
.text$mn:00005CC3
.text$mn:00005CC3 _text$mn        ends
.text$mn:00005CC3
.text$mn:00005CC4 ; ===========================================================================
.text$mn:00005CC4
.text$mn:00005CC4 ; Segment type: Pure code
.text$mn:00005CC4 ; Segment permissions: Read/Execute
.text$mn:00005CC4 _text$mn        segment para public 'CODE' use32
.text$mn:00005CC4                 assume cs:_text$mn
.text$mn:00005CC4                 ;org 5CC4h
.text$mn:00005CC4 ; COMDAT (pick any)
.text$mn:00005CC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005CC4
.text$mn:00005CC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00005CC4
.text$mn:00005CC4 ; Attributes: bp-based frame
.text$mn:00005CC4
.text$mn:00005CC4 ; int __stdcall std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(struct std::_Iterator_base12 *)
.text$mn:00005CC4                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00005CC4 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$mn:00005CC4                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+2Dp
.text$mn:00005CC4
.text$mn:00005CC4 var_10          = dword ptr -10h
.text$mn:00005CC4 var_C           = dword ptr -0Ch
.text$mn:00005CC4 var_4           = dword ptr -4
.text$mn:00005CC4 arg_0           = dword ptr  8
.text$mn:00005CC4
.text$mn:00005CC4                 push    ebp
.text$mn:00005CC5                 mov     ebp, esp
.text$mn:00005CC7                 push    0FFFFFFFFh
.text$mn:00005CC9                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$mn:00005CCE                 mov     eax, large fs:0
.text$mn:00005CD4                 push    eax
.text$mn:00005CD5                 push    ecx
.text$mn:00005CD6                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005CDB                 xor     eax, ebp
.text$mn:00005CDD                 push    eax
.text$mn:00005CDE                 lea     eax, [ebp+var_C]
.text$mn:00005CE1                 mov     large fs:0, eax
.text$mn:00005CE7                 mov     [ebp+var_10], ecx
.text$mn:00005CEA                 mov     eax, [ebp+arg_0]
.text$mn:00005CED                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00005CEE                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005CF1                 call    ??0_Iterator_base12@std@@QAE@ABU01@@Z ; std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)
.text$mn:00005CF6                 mov     [ebp+var_4], 0
.text$mn:00005CFD                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005D04                 mov     eax, [ebp+var_10]
.text$mn:00005D07                 mov     ecx, [ebp+var_C]
.text$mn:00005D0A                 mov     large fs:0, ecx
.text$mn:00005D11                 pop     ecx
.text$mn:00005D12                 mov     esp, ebp
.text$mn:00005D14                 pop     ebp
.text$mn:00005D15                 retn    4
.text$mn:00005D15 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$mn:00005D15
.text$mn:00005D15 _text$mn        ends
.text$mn:00005D15
.text$x:00005D18 ; ===========================================================================
.text$x:00005D18
.text$x:00005D18 ; Segment type: Pure code
.text$x:00005D18 ; Segment permissions: Read/Execute
.text$x:00005D18 _text$x         segment para public 'CODE' use32
.text$x:00005D18                 assume cs:_text$x
.text$x:00005D18                 ;org 5D18h
.text$x:00005D18 ; COMDAT (pick associative to section at 5CC4)
.text$x:00005D18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005D18
.text$x:00005D18 ; =============== S U B R O U T I N E =======================================
.text$x:00005D18
.text$x:00005D18
.text$x:00005D18 __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 proc near
.text$x:00005D18                                         ; DATA XREF: .xdata$x:0000A4DCo
.text$x:00005D18                 mov     ecx, [ebp-10h]  ; this
.text$x:00005D1B                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00005D1B __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0 endp
.text$x:00005D1B
.text$x:00005D20
.text$x:00005D20 ; =============== S U B R O U T I N E =======================================
.text$x:00005D20
.text$x:00005D20
.text$x:00005D20 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z proc near
.text$x:00005D20                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)+5o
.text$x:00005D20
.text$x:00005D20 arg_4           = dword ptr  8
.text$x:00005D20
.text$x:00005D20                 mov     edx, [esp+arg_4]
.text$x:00005D24                 lea     eax, [edx+0Ch]
.text$x:00005D27                 mov     ecx, [edx-8]
.text$x:00005D2A                 xor     ecx, eax
.text$x:00005D2C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005D31                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.text$x:00005D36                 jmp     ___CxxFrameHandler3
.text$x:00005D36 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z endp
.text$x:00005D36
.text$x:00005D36 ; ---------------------------------------------------------------------------
.text$x:00005D3B                 align 4
.text$x:00005D3B _text$x         ends
.text$x:00005D3B
.text$mn:00005D3C ; ===========================================================================
.text$mn:00005D3C
.text$mn:00005D3C ; Segment type: Pure code
.text$mn:00005D3C ; Segment permissions: Read/Execute
.text$mn:00005D3C _text$mn        segment para public 'CODE' use32
.text$mn:00005D3C                 assume cs:_text$mn
.text$mn:00005D3C                 ;org 5D3Ch
.text$mn:00005D3C ; COMDAT (pick any)
.text$mn:00005D3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005D3C
.text$mn:00005D3C ; =============== S U B R O U T I N E =======================================
.text$mn:00005D3C
.text$mn:00005D3C ; Attributes: bp-based frame
.text$mn:00005D3C
.text$mn:00005D3C ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>(void)
.text$mn:00005D3C                 public ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00005D3C ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:00005D3C                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+29p
.text$mn:00005D3C
.text$mn:00005D3C var_10          = dword ptr -10h
.text$mn:00005D3C var_C           = dword ptr -0Ch
.text$mn:00005D3C var_4           = dword ptr -4
.text$mn:00005D3C
.text$mn:00005D3C                 push    ebp
.text$mn:00005D3D                 mov     ebp, esp
.text$mn:00005D3F                 push    0FFFFFFFFh
.text$mn:00005D41                 push    offset __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00005D46                 mov     eax, large fs:0
.text$mn:00005D4C                 push    eax
.text$mn:00005D4D                 push    ecx
.text$mn:00005D4E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005D53                 xor     eax, ebp
.text$mn:00005D55                 push    eax
.text$mn:00005D56                 lea     eax, [ebp+var_C]
.text$mn:00005D59                 mov     large fs:0, eax
.text$mn:00005D5F                 mov     [ebp+var_10], ecx
.text$mn:00005D62                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005D65                 call    ??0_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::_Iterator_base12(void)
.text$mn:00005D6A                 mov     [ebp+var_4], 0
.text$mn:00005D71                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005D78                 mov     eax, [ebp+var_10]
.text$mn:00005D7B                 mov     ecx, [ebp+var_C]
.text$mn:00005D7E                 mov     large fs:0, ecx
.text$mn:00005D85                 pop     ecx
.text$mn:00005D86                 mov     esp, ebp
.text$mn:00005D88                 pop     ebp
.text$mn:00005D89                 retn
.text$mn:00005D89 ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00005D89
.text$mn:00005D89 ; ---------------------------------------------------------------------------
.text$mn:00005D8A                 align 4
.text$mn:00005D8A _text$mn        ends
.text$mn:00005D8A
.text$x:00005D8C ; ===========================================================================
.text$x:00005D8C
.text$x:00005D8C ; Segment type: Pure code
.text$x:00005D8C ; Segment permissions: Read/Execute
.text$x:00005D8C _text$x         segment para public 'CODE' use32
.text$x:00005D8C                 assume cs:_text$x
.text$x:00005D8C                 ;org 5D8Ch
.text$x:00005D8C ; COMDAT (pick associative to section at 5D3C)
.text$x:00005D8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005D8C
.text$x:00005D8C ; =============== S U B R O U T I N E =======================================
.text$x:00005D8C
.text$x:00005D8C
.text$x:00005D8C __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00005D8C                                         ; DATA XREF: .xdata$x:0000A484o
.text$x:00005D8C                 mov     ecx, [ebp-10h]  ; this
.text$x:00005D8F                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:00005D8F __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:00005D8F
.text$x:00005D94
.text$x:00005D94 ; =============== S U B R O U T I N E =======================================
.text$x:00005D94
.text$x:00005D94
.text$x:00005D94 __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00005D94                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+5o
.text$x:00005D94
.text$x:00005D94 arg_4           = dword ptr  8
.text$x:00005D94
.text$x:00005D94                 mov     edx, [esp+arg_4]
.text$x:00005D98                 lea     eax, [edx+0Ch]
.text$x:00005D9B                 mov     ecx, [edx-8]
.text$x:00005D9E                 xor     ecx, eax
.text$x:00005DA0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005DA5                 mov     eax, offset __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:00005DAA                 jmp     ___CxxFrameHandler3
.text$x:00005DAA __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00005DAA
.text$x:00005DAA ; ---------------------------------------------------------------------------
.text$x:00005DAF                 align 10h
.text$x:00005DAF _text$x         ends
.text$x:00005DAF
.text$mn:00005DB0 ; ===========================================================================
.text$mn:00005DB0
.text$mn:00005DB0 ; Segment type: Pure code
.text$mn:00005DB0 ; Segment permissions: Read/Execute
.text$mn:00005DB0 _text$mn        segment para public 'CODE' use32
.text$mn:00005DB0                 assume cs:_text$mn
.text$mn:00005DB0                 ;org 5DB0h
.text$mn:00005DB0 ; COMDAT (pick any)
.text$mn:00005DB0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005DB0
.text$mn:00005DB0 ; =============== S U B R O U T I N E =======================================
.text$mn:00005DB0
.text$mn:00005DB0 ; Attributes: bp-based frame
.text$mn:00005DB0
.text$mn:00005DB0 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(class std::allocator<char> const &)
.text$mn:00005DB0                 public ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00005DB0 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$mn:00005DB0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+34p
.text$mn:00005DB0
.text$mn:00005DB0 var_10          = dword ptr -10h
.text$mn:00005DB0 var_C           = dword ptr -0Ch
.text$mn:00005DB0 var_4           = dword ptr -4
.text$mn:00005DB0
.text$mn:00005DB0                 push    ebp
.text$mn:00005DB1                 mov     ebp, esp
.text$mn:00005DB3                 push    0FFFFFFFFh
.text$mn:00005DB5                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$mn:00005DBA                 mov     eax, large fs:0
.text$mn:00005DC0                 push    eax
.text$mn:00005DC1                 push    ecx
.text$mn:00005DC2                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005DC7                 xor     eax, ebp
.text$mn:00005DC9                 push    eax
.text$mn:00005DCA                 lea     eax, [ebp+var_C]
.text$mn:00005DCD                 mov     large fs:0, eax
.text$mn:00005DD3                 mov     [ebp+var_10], ecx
.text$mn:00005DD6                 mov     ecx, [ebp+var_10]
.text$mn:00005DD9                 call    ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)
.text$mn:00005DDE                 mov     [ebp+var_4], 0
.text$mn:00005DE5                 mov     ecx, [ebp+var_10]
.text$mn:00005DE8                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:00005DED                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005DF4                 mov     eax, [ebp+var_10]
.text$mn:00005DF7                 mov     ecx, [ebp+var_C]
.text$mn:00005DFA                 mov     large fs:0, ecx
.text$mn:00005E01                 pop     ecx
.text$mn:00005E02                 mov     esp, ebp
.text$mn:00005E04                 pop     ebp
.text$mn:00005E05                 retn    4
.text$mn:00005E05 ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$mn:00005E05
.text$mn:00005E05 _text$mn        ends
.text$mn:00005E05
.text$x:00005E08 ; ===========================================================================
.text$x:00005E08
.text$x:00005E08 ; Segment type: Pure code
.text$x:00005E08 ; Segment permissions: Read/Execute
.text$x:00005E08 _text$x         segment para public 'CODE' use32
.text$x:00005E08                 assume cs:_text$x
.text$x:00005E08                 ;org 5E08h
.text$x:00005E08 ; COMDAT (pick associative to section at 5DB0)
.text$x:00005E08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005E08
.text$x:00005E08 ; =============== S U B R O U T I N E =======================================
.text$x:00005E08
.text$x:00005E08
.text$x:00005E08 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 proc near
.text$x:00005E08                                         ; DATA XREF: .xdata$x:00009CA8o
.text$x:00005E08                 mov     ecx, [ebp-10h]
.text$x:00005E0B                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:00005E0B __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0 endp
.text$x:00005E0B
.text$x:00005E10
.text$x:00005E10 ; =============== S U B R O U T I N E =======================================
.text$x:00005E10
.text$x:00005E10
.text$x:00005E10 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z proc near
.text$x:00005E10                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+5o
.text$x:00005E10
.text$x:00005E10 arg_4           = dword ptr  8
.text$x:00005E10
.text$x:00005E10                 mov     edx, [esp+arg_4]
.text$x:00005E14                 lea     eax, [edx+0Ch]
.text$x:00005E17                 mov     ecx, [edx-8]
.text$x:00005E1A                 xor     ecx, eax
.text$x:00005E1C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005E21                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.text$x:00005E26                 jmp     ___CxxFrameHandler3
.text$x:00005E26 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z endp
.text$x:00005E26
.text$x:00005E26 ; ---------------------------------------------------------------------------
.text$x:00005E2B                 align 4
.text$x:00005E2B _text$x         ends
.text$x:00005E2B
.text$mn:00005E2C ; ===========================================================================
.text$mn:00005E2C
.text$mn:00005E2C ; Segment type: Pure code
.text$mn:00005E2C ; Segment permissions: Read/Execute
.text$mn:00005E2C _text$mn        segment para public 'CODE' use32
.text$mn:00005E2C                 assume cs:_text$mn
.text$mn:00005E2C                 ;org 5E2Ch
.text$mn:00005E2C ; COMDAT (pick any)
.text$mn:00005E2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005E2C
.text$mn:00005E2C ; =============== S U B R O U T I N E =======================================
.text$mn:00005E2C
.text$mn:00005E2C ; Attributes: bp-based frame
.text$mn:00005E2C
.text$mn:00005E2C ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(class std::allocator<wchar_t> const &)
.text$mn:00005E2C                 public ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00005E2C ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:00005E2C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+43p
.text$mn:00005E2C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+34p ...
.text$mn:00005E2C
.text$mn:00005E2C var_10          = dword ptr -10h
.text$mn:00005E2C var_C           = dword ptr -0Ch
.text$mn:00005E2C var_4           = dword ptr -4
.text$mn:00005E2C
.text$mn:00005E2C                 push    ebp
.text$mn:00005E2D                 mov     ebp, esp
.text$mn:00005E2F                 push    0FFFFFFFFh
.text$mn:00005E31                 push    offset __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:00005E36                 mov     eax, large fs:0
.text$mn:00005E3C                 push    eax
.text$mn:00005E3D                 push    ecx
.text$mn:00005E3E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005E43                 xor     eax, ebp
.text$mn:00005E45                 push    eax
.text$mn:00005E46                 lea     eax, [ebp+var_C]
.text$mn:00005E49                 mov     large fs:0, eax
.text$mn:00005E4F                 mov     [ebp+var_10], ecx
.text$mn:00005E52                 mov     ecx, [ebp+var_10]
.text$mn:00005E55                 call    ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00005E5A                 mov     [ebp+var_4], 0
.text$mn:00005E61                 mov     ecx, [ebp+var_10]
.text$mn:00005E64                 call    ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:00005E69                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005E70                 mov     eax, [ebp+var_10]
.text$mn:00005E73                 mov     ecx, [ebp+var_C]
.text$mn:00005E76                 mov     large fs:0, ecx
.text$mn:00005E7D                 pop     ecx
.text$mn:00005E7E                 mov     esp, ebp
.text$mn:00005E80                 pop     ebp
.text$mn:00005E81                 retn    4
.text$mn:00005E81 ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:00005E81
.text$mn:00005E81 _text$mn        ends
.text$mn:00005E81
.text$x:00005E84 ; ===========================================================================
.text$x:00005E84
.text$x:00005E84 ; Segment type: Pure code
.text$x:00005E84 ; Segment permissions: Read/Execute
.text$x:00005E84 _text$x         segment para public 'CODE' use32
.text$x:00005E84                 assume cs:_text$x
.text$x:00005E84                 ;org 5E84h
.text$x:00005E84 ; COMDAT (pick associative to section at 5E2C)
.text$x:00005E84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005E84
.text$x:00005E84 ; =============== S U B R O U T I N E =======================================
.text$x:00005E84
.text$x:00005E84
.text$x:00005E84 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 proc near
.text$x:00005E84                                         ; DATA XREF: .xdata$x:00009FC8o
.text$x:00005E84                 mov     ecx, [ebp-10h]
.text$x:00005E87                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:00005E87 __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0 endp
.text$x:00005E87
.text$x:00005E8C
.text$x:00005E8C ; =============== S U B R O U T I N E =======================================
.text$x:00005E8C
.text$x:00005E8C
.text$x:00005E8C __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$x:00005E8C                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+5o
.text$x:00005E8C
.text$x:00005E8C arg_4           = dword ptr  8
.text$x:00005E8C
.text$x:00005E8C                 mov     edx, [esp+arg_4]
.text$x:00005E90                 lea     eax, [edx+0Ch]
.text$x:00005E93                 mov     ecx, [edx-8]
.text$x:00005E96                 xor     ecx, eax
.text$x:00005E98                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005E9D                 mov     eax, offset __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$x:00005EA2                 jmp     ___CxxFrameHandler3
.text$x:00005EA2 __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$x:00005EA2
.text$x:00005EA2 ; ---------------------------------------------------------------------------
.text$x:00005EA7                 align 4
.text$x:00005EA7 _text$x         ends
.text$x:00005EA7
.text$mn:00005EA8 ; ===========================================================================
.text$mn:00005EA8
.text$mn:00005EA8 ; Segment type: Pure code
.text$mn:00005EA8 ; Segment permissions: Read/Execute
.text$mn:00005EA8 _text$mn        segment para public 'CODE' use32
.text$mn:00005EA8                 assume cs:_text$mn
.text$mn:00005EA8                 ;org 5EA8h
.text$mn:00005EA8 ; COMDAT (pick any)
.text$mn:00005EA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005EA8
.text$mn:00005EA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005EA8
.text$mn:00005EA8 ; Attributes: bp-based frame
.text$mn:00005EA8
.text$mn:00005EA8 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(struct std::_Iterator_base12 *)
.text$mn:00005EA8                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00005EA8 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00005EA8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+90p
.text$mn:00005EA8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+C7p ...
.text$mn:00005EA8
.text$mn:00005EA8 var_10          = dword ptr -10h
.text$mn:00005EA8 var_C           = dword ptr -0Ch
.text$mn:00005EA8 var_4           = dword ptr -4
.text$mn:00005EA8 arg_0           = dword ptr  8
.text$mn:00005EA8
.text$mn:00005EA8                 push    ebp
.text$mn:00005EA9                 mov     ebp, esp
.text$mn:00005EAB                 push    0FFFFFFFFh
.text$mn:00005EAD                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00005EB2                 mov     eax, large fs:0
.text$mn:00005EB8                 push    eax
.text$mn:00005EB9                 push    ecx
.text$mn:00005EBA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005EBF                 xor     eax, ebp
.text$mn:00005EC1                 push    eax
.text$mn:00005EC2                 lea     eax, [ebp+var_C]
.text$mn:00005EC5                 mov     large fs:0, eax
.text$mn:00005ECB                 mov     [ebp+var_10], ecx
.text$mn:00005ECE                 mov     eax, [ebp+arg_0]
.text$mn:00005ED1                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00005ED2                 mov     ecx, [ebp+var_10]
.text$mn:00005ED5                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)
.text$mn:00005EDA                 mov     [ebp+var_4], 0
.text$mn:00005EE1                 mov     ecx, [ebp+var_10]
.text$mn:00005EE4                 mov     edx, [ebp+arg_0]
.text$mn:00005EE7                 mov     eax, [edx+8]
.text$mn:00005EEA                 mov     [ecx+8], eax
.text$mn:00005EED                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005EF4                 mov     eax, [ebp+var_10]
.text$mn:00005EF7                 mov     ecx, [ebp+var_C]
.text$mn:00005EFA                 mov     large fs:0, ecx
.text$mn:00005F01                 pop     ecx
.text$mn:00005F02                 mov     esp, ebp
.text$mn:00005F04                 pop     ebp
.text$mn:00005F05                 retn    4
.text$mn:00005F05 ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00005F05
.text$mn:00005F05 _text$mn        ends
.text$mn:00005F05
.text$x:00005F08 ; ===========================================================================
.text$x:00005F08
.text$x:00005F08 ; Segment type: Pure code
.text$x:00005F08 ; Segment permissions: Read/Execute
.text$x:00005F08 _text$x         segment para public 'CODE' use32
.text$x:00005F08                 assume cs:_text$x
.text$x:00005F08                 ;org 5F08h
.text$x:00005F08 ; COMDAT (pick associative to section at 5EA8)
.text$x:00005F08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005F08
.text$x:00005F08 ; =============== S U B R O U T I N E =======================================
.text$x:00005F08
.text$x:00005F08
.text$x:00005F08 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:00005F08                                         ; DATA XREF: .xdata$x:0000A560o
.text$x:00005F08                 mov     ecx, [ebp-10h]
.text$x:00005F0B                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:00005F0B __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:00005F0B
.text$x:00005F10
.text$x:00005F10 ; =============== S U B R O U T I N E =======================================
.text$x:00005F10
.text$x:00005F10
.text$x:00005F10 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00005F10                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00005F10
.text$x:00005F10 arg_4           = dword ptr  8
.text$x:00005F10
.text$x:00005F10                 mov     edx, [esp+arg_4]
.text$x:00005F14                 lea     eax, [edx+0Ch]
.text$x:00005F17                 mov     ecx, [edx-8]
.text$x:00005F1A                 xor     ecx, eax
.text$x:00005F1C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005F21                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:00005F26                 jmp     ___CxxFrameHandler3
.text$x:00005F26 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:00005F26
.text$x:00005F26 ; ---------------------------------------------------------------------------
.text$x:00005F2B                 align 4
.text$x:00005F2B _text$x         ends
.text$x:00005F2B
.text$mn:00005F2C ; ===========================================================================
.text$mn:00005F2C
.text$mn:00005F2C ; Segment type: Pure code
.text$mn:00005F2C ; Segment permissions: Read/Execute
.text$mn:00005F2C _text$mn        segment para public 'CODE' use32
.text$mn:00005F2C                 assume cs:_text$mn
.text$mn:00005F2C                 ;org 5F2Ch
.text$mn:00005F2C ; COMDAT (pick any)
.text$mn:00005F2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005F2C
.text$mn:00005F2C ; =============== S U B R O U T I N E =======================================
.text$mn:00005F2C
.text$mn:00005F2C ; Attributes: bp-based frame
.text$mn:00005F2C
.text$mn:00005F2C ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(int, struct std::_Container_base12 *)
.text$mn:00005F2C                 public ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$mn:00005F2C ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
.text$mn:00005F2C                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)+31p
.text$mn:00005F2C
.text$mn:00005F2C var_10          = dword ptr -10h
.text$mn:00005F2C var_C           = dword ptr -0Ch
.text$mn:00005F2C var_4           = dword ptr -4
.text$mn:00005F2C arg_0           = dword ptr  8
.text$mn:00005F2C arg_4           = dword ptr  0Ch
.text$mn:00005F2C
.text$mn:00005F2C                 push    ebp
.text$mn:00005F2D                 mov     ebp, esp
.text$mn:00005F2F                 push    0FFFFFFFFh
.text$mn:00005F31                 push    offset __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$mn:00005F36                 mov     eax, large fs:0
.text$mn:00005F3C                 push    eax
.text$mn:00005F3D                 push    ecx
.text$mn:00005F3E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005F43                 xor     eax, ebp
.text$mn:00005F45                 push    eax
.text$mn:00005F46                 lea     eax, [ebp+var_C]
.text$mn:00005F49                 mov     large fs:0, eax
.text$mn:00005F4F                 mov     [ebp+var_10], ecx
.text$mn:00005F52                 mov     ecx, [ebp+var_10]
.text$mn:00005F55                 call    ??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$mn:00005F5A                 mov     [ebp+var_4], 0
.text$mn:00005F61                 mov     eax, [ebp+arg_4]
.text$mn:00005F64                 push    eax             ; struct std::_Container_base12 *
.text$mn:00005F65                 mov     ecx, [ebp+var_10] ; this
.text$mn:00005F68                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00005F6D                 mov     ecx, [ebp+var_10]
.text$mn:00005F70                 mov     edx, [ebp+arg_0]
.text$mn:00005F73                 mov     [ecx+8], edx
.text$mn:00005F76                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005F7D                 mov     eax, [ebp+var_10]
.text$mn:00005F80                 mov     ecx, [ebp+var_C]
.text$mn:00005F83                 mov     large fs:0, ecx
.text$mn:00005F8A                 pop     ecx
.text$mn:00005F8B                 mov     esp, ebp
.text$mn:00005F8D                 pop     ebp
.text$mn:00005F8E                 retn    8
.text$mn:00005F8E ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z endp
.text$mn:00005F8E
.text$mn:00005F8E ; ---------------------------------------------------------------------------
.text$mn:00005F91                 align 4
.text$mn:00005F91 _text$mn        ends
.text$mn:00005F91
.text$x:00005F94 ; ===========================================================================
.text$x:00005F94
.text$x:00005F94 ; Segment type: Pure code
.text$x:00005F94 ; Segment permissions: Read/Execute
.text$x:00005F94 _text$x         segment para public 'CODE' use32
.text$x:00005F94                 assume cs:_text$x
.text$x:00005F94                 ;org 5F94h
.text$x:00005F94 ; COMDAT (pick associative to section at 5F2C)
.text$x:00005F94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00005F94
.text$x:00005F94 ; =============== S U B R O U T I N E =======================================
.text$x:00005F94
.text$x:00005F94
.text$x:00005F94 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 proc near
.text$x:00005F94                                         ; DATA XREF: .xdata$x:0000A508o
.text$x:00005F94                 mov     ecx, [ebp-10h]
.text$x:00005F97                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:00005F97 __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0 endp
.text$x:00005F97
.text$x:00005F9C
.text$x:00005F9C ; =============== S U B R O U T I N E =======================================
.text$x:00005F9C
.text$x:00005F9C
.text$x:00005F9C __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z proc near
.text$x:00005F9C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+5o
.text$x:00005F9C
.text$x:00005F9C arg_4           = dword ptr  8
.text$x:00005F9C
.text$x:00005F9C                 mov     edx, [esp+arg_4]
.text$x:00005FA0                 lea     eax, [edx+0Ch]
.text$x:00005FA3                 mov     ecx, [edx-8]
.text$x:00005FA6                 xor     ecx, eax
.text$x:00005FA8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00005FAD                 mov     eax, offset __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.text$x:00005FB2                 jmp     ___CxxFrameHandler3
.text$x:00005FB2 __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z endp
.text$x:00005FB2
.text$x:00005FB2 ; ---------------------------------------------------------------------------
.text$x:00005FB7                 align 4
.text$x:00005FB7 _text$x         ends
.text$x:00005FB7
.text$mn:00005FB8 ; ===========================================================================
.text$mn:00005FB8
.text$mn:00005FB8 ; Segment type: Pure code
.text$mn:00005FB8 ; Segment permissions: Read/Execute
.text$mn:00005FB8 _text$mn        segment para public 'CODE' use32
.text$mn:00005FB8                 assume cs:_text$mn
.text$mn:00005FB8                 ;org 5FB8h
.text$mn:00005FB8 ; COMDAT (pick any)
.text$mn:00005FB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00005FB8
.text$mn:00005FB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00005FB8
.text$mn:00005FB8 ; Attributes: bp-based frame
.text$mn:00005FB8
.text$mn:00005FB8 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(struct std::_Iterator_base12 *)
.text$mn:00005FB8                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00005FB8 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$mn:00005FB8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+3Bp
.text$mn:00005FB8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+59p
.text$mn:00005FB8
.text$mn:00005FB8 var_10          = dword ptr -10h
.text$mn:00005FB8 var_C           = dword ptr -0Ch
.text$mn:00005FB8 var_4           = dword ptr -4
.text$mn:00005FB8 arg_0           = dword ptr  8
.text$mn:00005FB8
.text$mn:00005FB8                 push    ebp
.text$mn:00005FB9                 mov     ebp, esp
.text$mn:00005FBB                 push    0FFFFFFFFh
.text$mn:00005FBD                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$mn:00005FC2                 mov     eax, large fs:0
.text$mn:00005FC8                 push    eax
.text$mn:00005FC9                 push    ecx
.text$mn:00005FCA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00005FCF                 xor     eax, ebp
.text$mn:00005FD1                 push    eax
.text$mn:00005FD2                 lea     eax, [ebp+var_C]
.text$mn:00005FD5                 mov     large fs:0, eax
.text$mn:00005FDB                 mov     [ebp+var_10], ecx
.text$mn:00005FDE                 mov     eax, [ebp+arg_0]
.text$mn:00005FE1                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00005FE2                 mov     ecx, [ebp+var_10]
.text$mn:00005FE5                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00005FEA                 mov     [ebp+var_4], 0
.text$mn:00005FF1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00005FF8                 mov     eax, [ebp+var_10]
.text$mn:00005FFB                 mov     ecx, [ebp+var_C]
.text$mn:00005FFE                 mov     large fs:0, ecx
.text$mn:00006005                 pop     ecx
.text$mn:00006006                 mov     esp, ebp
.text$mn:00006008                 pop     ebp
.text$mn:00006009                 retn    4
.text$mn:00006009 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$mn:00006009
.text$mn:00006009 _text$mn        ends
.text$mn:00006009
.text$x:0000600C ; ===========================================================================
.text$x:0000600C
.text$x:0000600C ; Segment type: Pure code
.text$x:0000600C ; Segment permissions: Read/Execute
.text$x:0000600C _text$x         segment para public 'CODE' use32
.text$x:0000600C                 assume cs:_text$x
.text$x:0000600C                 ;org 600Ch
.text$x:0000600C ; COMDAT (pick associative to section at 5FB8)
.text$x:0000600C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000600C
.text$x:0000600C ; =============== S U B R O U T I N E =======================================
.text$x:0000600C
.text$x:0000600C
.text$x:0000600C __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 proc near
.text$x:0000600C                                         ; DATA XREF: .xdata$x:0000A610o
.text$x:0000600C                 mov     ecx, [ebp-10h]
.text$x:0000600F                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000600F __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0 endp
.text$x:0000600F
.text$x:00006014
.text$x:00006014 ; =============== S U B R O U T I N E =======================================
.text$x:00006014
.text$x:00006014
.text$x:00006014 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z proc near
.text$x:00006014                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00006014
.text$x:00006014 arg_4           = dword ptr  8
.text$x:00006014
.text$x:00006014                 mov     edx, [esp+arg_4]
.text$x:00006018                 lea     eax, [edx+0Ch]
.text$x:0000601B                 mov     ecx, [edx-8]
.text$x:0000601E                 xor     ecx, eax
.text$x:00006020                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006025                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.text$x:0000602A                 jmp     ___CxxFrameHandler3
.text$x:0000602A __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z endp
.text$x:0000602A
.text$x:0000602A ; ---------------------------------------------------------------------------
.text$x:0000602F                 align 10h
.text$x:0000602F _text$x         ends
.text$x:0000602F
.text$mn:00006030 ; ===========================================================================
.text$mn:00006030
.text$mn:00006030 ; Segment type: Pure code
.text$mn:00006030 ; Segment permissions: Read/Execute
.text$mn:00006030 _text$mn        segment para public 'CODE' use32
.text$mn:00006030                 assume cs:_text$mn
.text$mn:00006030                 ;org 6030h
.text$mn:00006030 ; COMDAT (pick any)
.text$mn:00006030                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006030
.text$mn:00006030 ; =============== S U B R O U T I N E =======================================
.text$mn:00006030
.text$mn:00006030 ; Attributes: bp-based frame
.text$mn:00006030
.text$mn:00006030 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(int, struct std::_Container_base12 *)
.text$mn:00006030                 public ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$mn:00006030 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
.text$mn:00006030                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)+3Fp
.text$mn:00006030                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)+48p
.text$mn:00006030
.text$mn:00006030 var_10          = dword ptr -10h
.text$mn:00006030 var_C           = dword ptr -0Ch
.text$mn:00006030 var_4           = dword ptr -4
.text$mn:00006030 arg_0           = dword ptr  8
.text$mn:00006030 arg_4           = dword ptr  0Ch
.text$mn:00006030
.text$mn:00006030                 push    ebp
.text$mn:00006031                 mov     ebp, esp
.text$mn:00006033                 push    0FFFFFFFFh
.text$mn:00006035                 push    offset __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$mn:0000603A                 mov     eax, large fs:0
.text$mn:00006040                 push    eax
.text$mn:00006041                 push    ecx
.text$mn:00006042                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006047                 xor     eax, ebp
.text$mn:00006049                 push    eax
.text$mn:0000604A                 lea     eax, [ebp+var_C]
.text$mn:0000604D                 mov     large fs:0, eax
.text$mn:00006053                 mov     [ebp+var_10], ecx
.text$mn:00006056                 mov     eax, [ebp+arg_4]
.text$mn:00006059                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000605A                 mov     ecx, [ebp+arg_0]
.text$mn:0000605D                 push    ecx             ; int
.text$mn:0000605E                 mov     ecx, [ebp+var_10]
.text$mn:00006061                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)
.text$mn:00006066                 mov     [ebp+var_4], 0
.text$mn:0000606D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006074                 mov     eax, [ebp+var_10]
.text$mn:00006077                 mov     ecx, [ebp+var_C]
.text$mn:0000607A                 mov     large fs:0, ecx
.text$mn:00006081                 pop     ecx
.text$mn:00006082                 mov     esp, ebp
.text$mn:00006084                 pop     ebp
.text$mn:00006085                 retn    8
.text$mn:00006085 ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z endp
.text$mn:00006085
.text$mn:00006085 _text$mn        ends
.text$mn:00006085
.text$x:00006088 ; ===========================================================================
.text$x:00006088
.text$x:00006088 ; Segment type: Pure code
.text$x:00006088 ; Segment permissions: Read/Execute
.text$x:00006088 _text$x         segment para public 'CODE' use32
.text$x:00006088                 assume cs:_text$x
.text$x:00006088                 ;org 6088h
.text$x:00006088 ; COMDAT (pick associative to section at 6030)
.text$x:00006088                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006088
.text$x:00006088 ; =============== S U B R O U T I N E =======================================
.text$x:00006088
.text$x:00006088
.text$x:00006088 __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 proc near
.text$x:00006088                                         ; DATA XREF: .xdata$x:0000A58Co
.text$x:00006088                 mov     ecx, [ebp-10h]
.text$x:0000608B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000608B __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0 endp
.text$x:0000608B
.text$x:00006090
.text$x:00006090 ; =============== S U B R O U T I N E =======================================
.text$x:00006090
.text$x:00006090
.text$x:00006090 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z proc near
.text$x:00006090                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)+5o
.text$x:00006090
.text$x:00006090 arg_4           = dword ptr  8
.text$x:00006090
.text$x:00006090                 mov     edx, [esp+arg_4]
.text$x:00006094                 lea     eax, [edx+0Ch]
.text$x:00006097                 mov     ecx, [edx-8]
.text$x:0000609A                 xor     ecx, eax
.text$x:0000609C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000060A1                 mov     eax, offset __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.text$x:000060A6                 jmp     ___CxxFrameHandler3
.text$x:000060A6 __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z endp
.text$x:000060A6
.text$x:000060A6 ; ---------------------------------------------------------------------------
.text$x:000060AB                 align 4
.text$x:000060AB _text$x         ends
.text$x:000060AB
.text$mn:000060AC ; ===========================================================================
.text$mn:000060AC
.text$mn:000060AC ; Segment type: Pure code
.text$mn:000060AC ; Segment permissions: Read/Execute
.text$mn:000060AC _text$mn        segment para public 'CODE' use32
.text$mn:000060AC                 assume cs:_text$mn
.text$mn:000060AC                 ;org 60ACh
.text$mn:000060AC ; COMDAT (pick any)
.text$mn:000060AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000060AC
.text$mn:000060AC ; =============== S U B R O U T I N E =======================================
.text$mn:000060AC
.text$mn:000060AC ; Attributes: bp-based frame
.text$mn:000060AC
.text$mn:000060AC ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::_String_val<struct std::_Simple_types<char>>(void)
.text$mn:000060AC                 public ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000060AC ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:000060AC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+29p
.text$mn:000060AC
.text$mn:000060AC var_10          = dword ptr -10h
.text$mn:000060AC var_C           = dword ptr -0Ch
.text$mn:000060AC var_4           = dword ptr -4
.text$mn:000060AC
.text$mn:000060AC                 push    ebp
.text$mn:000060AD                 mov     ebp, esp
.text$mn:000060AF                 push    0FFFFFFFFh
.text$mn:000060B1                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:000060B6                 mov     eax, large fs:0
.text$mn:000060BC                 push    eax
.text$mn:000060BD                 push    ecx
.text$mn:000060BE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000060C3                 xor     eax, ebp
.text$mn:000060C5                 push    eax
.text$mn:000060C6                 lea     eax, [ebp+var_C]
.text$mn:000060C9                 mov     large fs:0, eax
.text$mn:000060CF                 mov     [ebp+var_10], ecx
.text$mn:000060D2                 mov     ecx, [ebp+var_10] ; this
.text$mn:000060D5                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:000060DA                 mov     [ebp+var_4], 0
.text$mn:000060E1                 mov     eax, [ebp+var_10]
.text$mn:000060E4                 mov     dword ptr [eax+14h], 0
.text$mn:000060EB                 mov     ecx, [ebp+var_10]
.text$mn:000060EE                 mov     dword ptr [ecx+18h], 0
.text$mn:000060F5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000060FC                 mov     eax, [ebp+var_10]
.text$mn:000060FF                 mov     ecx, [ebp+var_C]
.text$mn:00006102                 mov     large fs:0, ecx
.text$mn:00006109                 pop     ecx
.text$mn:0000610A                 mov     esp, ebp
.text$mn:0000610C                 pop     ebp
.text$mn:0000610D                 retn
.text$mn:0000610D ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:0000610D
.text$mn:0000610D ; ---------------------------------------------------------------------------
.text$mn:0000610E                 align 10h
.text$mn:0000610E _text$mn        ends
.text$mn:0000610E
.text$x:00006110 ; ===========================================================================
.text$x:00006110
.text$x:00006110 ; Segment type: Pure code
.text$x:00006110 ; Segment permissions: Read/Execute
.text$x:00006110 _text$x         segment para public 'CODE' use32
.text$x:00006110                 assume cs:_text$x
.text$x:00006110                 ;org 6110h
.text$x:00006110 ; COMDAT (pick associative to section at 60AC)
.text$x:00006110                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006110
.text$x:00006110 ; =============== S U B R O U T I N E =======================================
.text$x:00006110
.text$x:00006110
.text$x:00006110 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:00006110                                         ; DATA XREF: .xdata$x:00009C50o
.text$x:00006110                 mov     ecx, [ebp-10h]  ; this
.text$x:00006113                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00006113 __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:00006113
.text$x:00006118
.text$x:00006118 ; =============== S U B R O U T I N E =======================================
.text$x:00006118
.text$x:00006118
.text$x:00006118 __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:00006118                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+5o
.text$x:00006118
.text$x:00006118 arg_4           = dword ptr  8
.text$x:00006118
.text$x:00006118                 mov     edx, [esp+arg_4]
.text$x:0000611C                 lea     eax, [edx+0Ch]
.text$x:0000611F                 mov     ecx, [edx-8]
.text$x:00006122                 xor     ecx, eax
.text$x:00006124                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006129                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:0000612E                 jmp     ___CxxFrameHandler3
.text$x:0000612E __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:0000612E
.text$x:0000612E ; ---------------------------------------------------------------------------
.text$x:00006133                 align 4
.text$x:00006133 _text$x         ends
.text$x:00006133
.text$mn:00006134 ; ===========================================================================
.text$mn:00006134
.text$mn:00006134 ; Segment type: Pure code
.text$mn:00006134 ; Segment permissions: Read/Execute
.text$mn:00006134 _text$mn        segment para public 'CODE' use32
.text$mn:00006134                 assume cs:_text$mn
.text$mn:00006134                 ;org 6134h
.text$mn:00006134 ; COMDAT (pick any)
.text$mn:00006134                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006134
.text$mn:00006134 ; =============== S U B R O U T I N E =======================================
.text$mn:00006134
.text$mn:00006134 ; Attributes: bp-based frame
.text$mn:00006134
.text$mn:00006134 ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:00006134                 public ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:00006134 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:00006134                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+29p
.text$mn:00006134
.text$mn:00006134 var_10          = dword ptr -10h
.text$mn:00006134 var_C           = dword ptr -0Ch
.text$mn:00006134 var_4           = dword ptr -4
.text$mn:00006134
.text$mn:00006134                 push    ebp
.text$mn:00006135                 mov     ebp, esp
.text$mn:00006137                 push    0FFFFFFFFh
.text$mn:00006139                 push    offset __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:0000613E                 mov     eax, large fs:0
.text$mn:00006144                 push    eax
.text$mn:00006145                 push    ecx
.text$mn:00006146                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000614B                 xor     eax, ebp
.text$mn:0000614D                 push    eax
.text$mn:0000614E                 lea     eax, [ebp+var_C]
.text$mn:00006151                 mov     large fs:0, eax
.text$mn:00006157                 mov     [ebp+var_10], ecx
.text$mn:0000615A                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000615D                 call    ??0_Container_base12@std@@QAE@XZ ; std::_Container_base12::_Container_base12(void)
.text$mn:00006162                 mov     [ebp+var_4], 0
.text$mn:00006169                 mov     eax, [ebp+var_10]
.text$mn:0000616C                 mov     dword ptr [eax+14h], 0
.text$mn:00006173                 mov     ecx, [ebp+var_10]
.text$mn:00006176                 mov     dword ptr [ecx+18h], 0
.text$mn:0000617D                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006184                 mov     eax, [ebp+var_10]
.text$mn:00006187                 mov     ecx, [ebp+var_C]
.text$mn:0000618A                 mov     large fs:0, ecx
.text$mn:00006191                 pop     ecx
.text$mn:00006192                 mov     esp, ebp
.text$mn:00006194                 pop     ebp
.text$mn:00006195                 retn
.text$mn:00006195 ??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00006195
.text$mn:00006195 ; ---------------------------------------------------------------------------
.text$mn:00006196                 align 4
.text$mn:00006196 _text$mn        ends
.text$mn:00006196
.text$x:00006198 ; ===========================================================================
.text$x:00006198
.text$x:00006198 ; Segment type: Pure code
.text$x:00006198 ; Segment permissions: Read/Execute
.text$x:00006198 _text$x         segment para public 'CODE' use32
.text$x:00006198                 assume cs:_text$x
.text$x:00006198                 ;org 6198h
.text$x:00006198 ; COMDAT (pick associative to section at 6134)
.text$x:00006198                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006198
.text$x:00006198 ; =============== S U B R O U T I N E =======================================
.text$x:00006198
.text$x:00006198
.text$x:00006198 __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00006198                                         ; DATA XREF: .xdata$x:00009F70o
.text$x:00006198                 mov     ecx, [ebp-10h]  ; this
.text$x:0000619B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:0000619B __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:0000619B
.text$x:000061A0
.text$x:000061A0 ; =============== S U B R O U T I N E =======================================
.text$x:000061A0
.text$x:000061A0
.text$x:000061A0 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:000061A0                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:000061A0
.text$x:000061A0 arg_4           = dword ptr  8
.text$x:000061A0
.text$x:000061A0                 mov     edx, [esp+arg_4]
.text$x:000061A4                 lea     eax, [edx+0Ch]
.text$x:000061A7                 mov     ecx, [edx-8]
.text$x:000061AA                 xor     ecx, eax
.text$x:000061AC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000061B1                 mov     eax, offset __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:000061B6                 jmp     ___CxxFrameHandler3
.text$x:000061B6 __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:000061B6
.text$x:000061B6 ; ---------------------------------------------------------------------------
.text$x:000061BB                 align 4
.text$x:000061BB _text$x         ends
.text$x:000061BB
.text$mn:000061BC ; ===========================================================================
.text$mn:000061BC
.text$mn:000061BC ; Segment type: Pure code
.text$mn:000061BC ; Segment permissions: Read/Execute
.text$mn:000061BC _text$mn        segment para public 'CODE' use32
.text$mn:000061BC                 assume cs:_text$mn
.text$mn:000061BC                 ;org 61BCh
.text$mn:000061BC ; COMDAT (pick any)
.text$mn:000061BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061BC
.text$mn:000061BC ; =============== S U B R O U T I N E =======================================
.text$mn:000061BC
.text$mn:000061BC ; Attributes: bp-based frame
.text$mn:000061BC
.text$mn:000061BC ; public: __thiscall std::_Wrap_alloc<class std::allocator<char>>::_Wrap_alloc<class std::allocator<char>>(void)
.text$mn:000061BC                 public ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ
.text$mn:000061BC ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ proc near
.text$mn:000061BC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)+Ap
.text$mn:000061BC
.text$mn:000061BC var_4           = dword ptr -4
.text$mn:000061BC
.text$mn:000061BC                 push    ebp
.text$mn:000061BD                 mov     ebp, esp
.text$mn:000061BF                 push    ecx
.text$mn:000061C0                 mov     [ebp+var_4], ecx
.text$mn:000061C3                 mov     ecx, [ebp+var_4]
.text$mn:000061C6                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:000061CB                 mov     eax, [ebp+var_4]
.text$mn:000061CE                 mov     esp, ebp
.text$mn:000061D0                 pop     ebp
.text$mn:000061D1                 retn
.text$mn:000061D1 ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ endp
.text$mn:000061D1
.text$mn:000061D1 ; ---------------------------------------------------------------------------
.text$mn:000061D2                 align 4
.text$mn:000061D2 _text$mn        ends
.text$mn:000061D2
.text$mn:000061D4 ; ===========================================================================
.text$mn:000061D4
.text$mn:000061D4 ; Segment type: Pure code
.text$mn:000061D4 ; Segment permissions: Read/Execute
.text$mn:000061D4 _text$mn        segment para public 'CODE' use32
.text$mn:000061D4                 assume cs:_text$mn
.text$mn:000061D4                 ;org 61D4h
.text$mn:000061D4 ; COMDAT (pick any)
.text$mn:000061D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061D4
.text$mn:000061D4 ; =============== S U B R O U T I N E =======================================
.text$mn:000061D4
.text$mn:000061D4 ; Attributes: bp-based frame
.text$mn:000061D4
.text$mn:000061D4 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(class std::allocator<wchar_t> const &)
.text$mn:000061D4                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.text$mn:000061D4 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z proc near
.text$mn:000061D4                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+1Dp
.text$mn:000061D4
.text$mn:000061D4 var_4           = dword ptr -4
.text$mn:000061D4 arg_0           = dword ptr  8
.text$mn:000061D4
.text$mn:000061D4                 push    ebp
.text$mn:000061D5                 mov     ebp, esp
.text$mn:000061D7                 push    ecx
.text$mn:000061D8                 mov     [ebp+var_4], ecx
.text$mn:000061DB                 mov     eax, [ebp+arg_0]
.text$mn:000061DE                 push    eax
.text$mn:000061DF                 mov     ecx, [ebp+var_4]
.text$mn:000061E2                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:000061E7                 mov     eax, [ebp+var_4]
.text$mn:000061EA                 mov     esp, ebp
.text$mn:000061EC                 pop     ebp
.text$mn:000061ED                 retn    4
.text$mn:000061ED ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z endp
.text$mn:000061ED
.text$mn:000061ED _text$mn        ends
.text$mn:000061ED
.text$mn:000061F0 ; ===========================================================================
.text$mn:000061F0
.text$mn:000061F0 ; Segment type: Pure code
.text$mn:000061F0 ; Segment permissions: Read/Execute
.text$mn:000061F0 _text$mn        segment para public 'CODE' use32
.text$mn:000061F0                 assume cs:_text$mn
.text$mn:000061F0                 ;org 61F0h
.text$mn:000061F0 ; COMDAT (pick any)
.text$mn:000061F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000061F0
.text$mn:000061F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000061F0
.text$mn:000061F0 ; Attributes: bp-based frame
.text$mn:000061F0
.text$mn:000061F0 ; public: __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::_Wrap_alloc<class std::allocator<wchar_t>>(void)
.text$mn:000061F0                 public ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ
.text$mn:000061F0 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ proc near
.text$mn:000061F0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)+Ap
.text$mn:000061F0
.text$mn:000061F0 var_4           = dword ptr -4
.text$mn:000061F0
.text$mn:000061F0                 push    ebp
.text$mn:000061F1                 mov     ebp, esp
.text$mn:000061F3                 push    ecx
.text$mn:000061F4                 mov     [ebp+var_4], ecx
.text$mn:000061F7                 mov     ecx, [ebp+var_4]
.text$mn:000061FA                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000061FF                 mov     eax, [ebp+var_4]
.text$mn:00006202                 mov     esp, ebp
.text$mn:00006204                 pop     ebp
.text$mn:00006205                 retn
.text$mn:00006205 ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ endp
.text$mn:00006205
.text$mn:00006205 ; ---------------------------------------------------------------------------
.text$mn:00006206                 align 4
.text$mn:00006206 _text$mn        ends
.text$mn:00006206
.text$mn:00006208 ; ===========================================================================
.text$mn:00006208
.text$mn:00006208 ; Segment type: Pure code
.text$mn:00006208 ; Segment permissions: Read/Execute
.text$mn:00006208 _text$mn        segment para public 'CODE' use32
.text$mn:00006208                 assume cs:_text$mn
.text$mn:00006208                 ;org 6208h
.text$mn:00006208 ; COMDAT (pick any)
.text$mn:00006208                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006208
.text$mn:00006208 ; =============== S U B R O U T I N E =======================================
.text$mn:00006208
.text$mn:00006208 ; Attributes: bp-based frame
.text$mn:00006208
.text$mn:00006208 ; public: __thiscall std::allocator<char>::allocator<char>(void)
.text$mn:00006208                 public ??0?$allocator@D@std@@QAE@XZ
.text$mn:00006208 ??0?$allocator@D@std@@QAE@XZ proc near  ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)+Ap
.text$mn:00006208                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+2Bp
.text$mn:00006208
.text$mn:00006208 var_4           = dword ptr -4
.text$mn:00006208
.text$mn:00006208                 push    ebp
.text$mn:00006209                 mov     ebp, esp
.text$mn:0000620B                 push    ecx
.text$mn:0000620C                 mov     [ebp+var_4], ecx
.text$mn:0000620F                 mov     eax, [ebp+var_4]
.text$mn:00006212                 mov     esp, ebp
.text$mn:00006214                 pop     ebp
.text$mn:00006215                 retn
.text$mn:00006215 ??0?$allocator@D@std@@QAE@XZ endp
.text$mn:00006215
.text$mn:00006215 ; ---------------------------------------------------------------------------
.text$mn:00006216                 align 4
.text$mn:00006216 _text$mn        ends
.text$mn:00006216
.text$mn:00006218 ; ===========================================================================
.text$mn:00006218
.text$mn:00006218 ; Segment type: Pure code
.text$mn:00006218 ; Segment permissions: Read/Execute
.text$mn:00006218 _text$mn        segment para public 'CODE' use32
.text$mn:00006218                 assume cs:_text$mn
.text$mn:00006218                 ;org 6218h
.text$mn:00006218 ; COMDAT (pick any)
.text$mn:00006218                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006218
.text$mn:00006218 ; =============== S U B R O U T I N E =======================================
.text$mn:00006218
.text$mn:00006218 ; Attributes: bp-based frame
.text$mn:00006218
.text$mn:00006218 ; public: __thiscall std::allocator<struct std::_Container_proxy>::allocator<struct std::_Container_proxy>(void)
.text$mn:00006218                 public ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ
.text$mn:00006218 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ proc near
.text$mn:00006218                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+Cp
.text$mn:00006218                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+Cp ...
.text$mn:00006218
.text$mn:00006218 var_4           = dword ptr -4
.text$mn:00006218
.text$mn:00006218                 push    ebp
.text$mn:00006219                 mov     ebp, esp
.text$mn:0000621B                 push    ecx
.text$mn:0000621C                 mov     [ebp+var_4], ecx
.text$mn:0000621F                 mov     eax, [ebp+var_4]
.text$mn:00006222                 mov     esp, ebp
.text$mn:00006224                 pop     ebp
.text$mn:00006225                 retn
.text$mn:00006225 ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ endp
.text$mn:00006225
.text$mn:00006225 ; ---------------------------------------------------------------------------
.text$mn:00006226                 align 4
.text$mn:00006226 _text$mn        ends
.text$mn:00006226
.text$mn:00006228 ; ===========================================================================
.text$mn:00006228
.text$mn:00006228 ; Segment type: Pure code
.text$mn:00006228 ; Segment permissions: Read/Execute
.text$mn:00006228 _text$mn        segment para public 'CODE' use32
.text$mn:00006228                 assume cs:_text$mn
.text$mn:00006228                 ;org 6228h
.text$mn:00006228 ; COMDAT (pick any)
.text$mn:00006228                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006228
.text$mn:00006228 ; =============== S U B R O U T I N E =======================================
.text$mn:00006228
.text$mn:00006228 ; Attributes: bp-based frame
.text$mn:00006228
.text$mn:00006228 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(class std::allocator<wchar_t> const &)
.text$mn:00006228                 public ??0?$allocator@_W@std@@QAE@ABV01@@Z
.text$mn:00006228 ??0?$allocator@_W@std@@QAE@ABV01@@Z proc near
.text$mn:00006228                                         ; CODE XREF: std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+Bp
.text$mn:00006228                                         ; std::operator==<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)+18p ...
.text$mn:00006228
.text$mn:00006228 var_4           = dword ptr -4
.text$mn:00006228
.text$mn:00006228                 push    ebp
.text$mn:00006229                 mov     ebp, esp
.text$mn:0000622B                 push    ecx
.text$mn:0000622C                 mov     [ebp+var_4], ecx
.text$mn:0000622F                 mov     eax, [ebp+var_4]
.text$mn:00006232                 mov     esp, ebp
.text$mn:00006234                 pop     ebp
.text$mn:00006235                 retn    4
.text$mn:00006235 ??0?$allocator@_W@std@@QAE@ABV01@@Z endp
.text$mn:00006235
.text$mn:00006235 _text$mn        ends
.text$mn:00006235
.text$mn:00006238 ; ===========================================================================
.text$mn:00006238
.text$mn:00006238 ; Segment type: Pure code
.text$mn:00006238 ; Segment permissions: Read/Execute
.text$mn:00006238 _text$mn        segment para public 'CODE' use32
.text$mn:00006238                 assume cs:_text$mn
.text$mn:00006238                 ;org 6238h
.text$mn:00006238 ; COMDAT (pick any)
.text$mn:00006238                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006238
.text$mn:00006238 ; =============== S U B R O U T I N E =======================================
.text$mn:00006238
.text$mn:00006238 ; Attributes: bp-based frame
.text$mn:00006238
.text$mn:00006238 ; public: __thiscall std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00006238                 public ??0?$allocator@_W@std@@QAE@XZ
.text$mn:00006238 ??0?$allocator@_W@std@@QAE@XZ proc near ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)+Ap
.text$mn:00006238                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+2Bp ...
.text$mn:00006238
.text$mn:00006238 var_4           = dword ptr -4
.text$mn:00006238
.text$mn:00006238                 push    ebp
.text$mn:00006239                 mov     ebp, esp
.text$mn:0000623B                 push    ecx
.text$mn:0000623C                 mov     [ebp+var_4], ecx
.text$mn:0000623F                 mov     eax, [ebp+var_4]
.text$mn:00006242                 mov     esp, ebp
.text$mn:00006244                 pop     ebp
.text$mn:00006245                 retn
.text$mn:00006245 ??0?$allocator@_W@std@@QAE@XZ endp
.text$mn:00006245
.text$mn:00006245 ; ---------------------------------------------------------------------------
.text$mn:00006246                 align 4
.text$mn:00006246 _text$mn        ends
.text$mn:00006246
.text$mn:00006248 ; ===========================================================================
.text$mn:00006248
.text$mn:00006248 ; Segment type: Pure code
.text$mn:00006248 ; Segment permissions: Read/Execute
.text$mn:00006248 _text$mn        segment para public 'CODE' use32
.text$mn:00006248                 assume cs:_text$mn
.text$mn:00006248                 ;org 6248h
.text$mn:00006248 ; COMDAT (pick any)
.text$mn:00006248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006248
.text$mn:00006248 ; =============== S U B R O U T I N E =======================================
.text$mn:00006248
.text$mn:00006248 ; Attributes: bp-based frame
.text$mn:00006248
.text$mn:00006248 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char *Str)
.text$mn:00006248                 public ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00006248 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$mn:00006248                                         ; CODE XREF: std::_Generic_error_category::message(int)+5Ap
.text$mn:00006248                                         ; std::_Iostream_error_category::message(int)+3Dp ...
.text$mn:00006248
.text$mn:00006248 var_14          = dword ptr -14h
.text$mn:00006248 var_D           = byte ptr -0Dh
.text$mn:00006248 var_C           = dword ptr -0Ch
.text$mn:00006248 var_4           = dword ptr -4
.text$mn:00006248 Str             = dword ptr  8
.text$mn:00006248
.text$mn:00006248                 push    ebp
.text$mn:00006249                 mov     ebp, esp
.text$mn:0000624B                 push    0FFFFFFFFh
.text$mn:0000624D                 push    offset __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$mn:00006252                 mov     eax, large fs:0
.text$mn:00006258                 push    eax
.text$mn:00006259                 sub     esp, 8
.text$mn:0000625C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006261                 xor     eax, ebp
.text$mn:00006263                 push    eax
.text$mn:00006264                 lea     eax, [ebp+var_C]
.text$mn:00006267                 mov     large fs:0, eax
.text$mn:0000626D                 mov     [ebp+var_14], ecx
.text$mn:00006270                 lea     ecx, [ebp+var_D]
.text$mn:00006273                 call    ??0?$allocator@D@std@@QAE@XZ ; std::allocator<char>::allocator<char>(void)
.text$mn:00006278                 push    eax
.text$mn:00006279                 mov     ecx, [ebp+var_14]
.text$mn:0000627C                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)
.text$mn:00006281                 mov     [ebp+var_4], 0
.text$mn:00006288                 push    0               ; Size
.text$mn:0000628A                 push    0               ; char
.text$mn:0000628C                 mov     ecx, [ebp+var_14]
.text$mn:0000628F                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00006294                 mov     eax, [ebp+Str]
.text$mn:00006297                 push    eax             ; Str
.text$mn:00006298                 mov     ecx, [ebp+var_14]
.text$mn:0000629B                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)
.text$mn:000062A0                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000062A7                 mov     eax, [ebp+var_14]
.text$mn:000062AA                 mov     ecx, [ebp+var_C]
.text$mn:000062AD                 mov     large fs:0, ecx
.text$mn:000062B4                 pop     ecx
.text$mn:000062B5                 mov     esp, ebp
.text$mn:000062B7                 pop     ebp
.text$mn:000062B8                 retn    4
.text$mn:000062B8 ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$mn:000062B8
.text$mn:000062B8 ; ---------------------------------------------------------------------------
.text$mn:000062BB                 align 4
.text$mn:000062BB _text$mn        ends
.text$mn:000062BB
.text$x:000062BC ; ===========================================================================
.text$x:000062BC
.text$x:000062BC ; Segment type: Pure code
.text$x:000062BC ; Segment permissions: Read/Execute
.text$x:000062BC _text$x         segment para public 'CODE' use32
.text$x:000062BC                 assume cs:_text$x
.text$x:000062BC                 ;org 62BCh
.text$x:000062BC ; COMDAT (pick associative to section at 6248)
.text$x:000062BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000062BC
.text$x:000062BC ; =============== S U B R O U T I N E =======================================
.text$x:000062BC
.text$x:000062BC
.text$x:000062BC __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 proc near
.text$x:000062BC                                         ; DATA XREF: .xdata$x:00009D00o
.text$x:000062BC                 mov     ecx, [ebp-14h]
.text$x:000062BF                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:000062BF __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0 endp
.text$x:000062BF
.text$x:000062C4
.text$x:000062C4 ; =============== S U B R O U T I N E =======================================
.text$x:000062C4
.text$x:000062C4
.text$x:000062C4 __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z proc near
.text$x:000062C4                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+5o
.text$x:000062C4
.text$x:000062C4 arg_4           = dword ptr  8
.text$x:000062C4
.text$x:000062C4                 mov     edx, [esp+arg_4]
.text$x:000062C8                 lea     eax, [edx+0Ch]
.text$x:000062CB                 mov     ecx, [edx-0Ch]
.text$x:000062CE                 xor     ecx, eax
.text$x:000062D0                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000062D5                 mov     eax, offset __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.text$x:000062DA                 jmp     ___CxxFrameHandler3
.text$x:000062DA __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z endp
.text$x:000062DA
.text$x:000062DA ; ---------------------------------------------------------------------------
.text$x:000062DF                 align 10h
.text$x:000062DF _text$x         ends
.text$x:000062DF
.text$mn:000062E0 ; ===========================================================================
.text$mn:000062E0
.text$mn:000062E0 ; Segment type: Pure code
.text$mn:000062E0 ; Segment permissions: Read/Execute
.text$mn:000062E0 _text$mn        segment para public 'CODE' use32
.text$mn:000062E0                 assume cs:_text$mn
.text$mn:000062E0                 ;org 62E0h
.text$mn:000062E0 ; COMDAT (pick any)
.text$mn:000062E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000062E0
.text$mn:000062E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000062E0
.text$mn:000062E0 ; Attributes: bp-based frame
.text$mn:000062E0
.text$mn:000062E0 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:000062E0                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:000062E0 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$mn:000062E0                                         ; CODE XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+DCp
.text$mn:000062E0                                         ; NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+1B6p ...
.text$mn:000062E0
.text$mn:000062E0 var_14          = dword ptr -14h
.text$mn:000062E0 var_E           = byte ptr -0Eh
.text$mn:000062E0 var_D           = byte ptr -0Dh
.text$mn:000062E0 var_C           = dword ptr -0Ch
.text$mn:000062E0 var_4           = dword ptr -4
.text$mn:000062E0 arg_0           = dword ptr  8
.text$mn:000062E0
.text$mn:000062E0                 push    ebp
.text$mn:000062E1                 mov     ebp, esp
.text$mn:000062E3                 push    0FFFFFFFFh
.text$mn:000062E5                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$mn:000062EA                 mov     eax, large fs:0
.text$mn:000062F0                 push    eax
.text$mn:000062F1                 sub     esp, 8
.text$mn:000062F4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000062F9                 xor     eax, ebp
.text$mn:000062FB                 push    eax
.text$mn:000062FC                 lea     eax, [ebp+var_C]
.text$mn:000062FF                 mov     large fs:0, eax
.text$mn:00006305                 mov     [ebp+var_14], ecx
.text$mn:00006308                 lea     eax, [ebp+var_D]
.text$mn:0000630B                 push    eax
.text$mn:0000630C                 lea     ecx, [ebp+var_E]
.text$mn:0000630F                 push    ecx
.text$mn:00006310                 mov     ecx, [ebp+arg_0]
.text$mn:00006313                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006318                 mov     ecx, eax
.text$mn:0000631A                 call    ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)
.text$mn:0000631F                 push    eax
.text$mn:00006320                 mov     ecx, [ebp+var_14]
.text$mn:00006323                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00006328                 mov     [ebp+var_4], 0
.text$mn:0000632F                 push    0
.text$mn:00006331                 push    0
.text$mn:00006333                 mov     ecx, [ebp+var_14]
.text$mn:00006336                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000633B                 mov     edx, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00006341                 push    edx
.text$mn:00006342                 push    0
.text$mn:00006344                 mov     eax, [ebp+arg_0]
.text$mn:00006347                 push    eax
.text$mn:00006348                 mov     ecx, [ebp+var_14]
.text$mn:0000634B                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00006350                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006357                 mov     eax, [ebp+var_14]
.text$mn:0000635A                 mov     ecx, [ebp+var_C]
.text$mn:0000635D                 mov     large fs:0, ecx
.text$mn:00006364                 pop     ecx
.text$mn:00006365                 mov     esp, ebp
.text$mn:00006367                 pop     ebp
.text$mn:00006368                 retn    4
.text$mn:00006368 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$mn:00006368
.text$mn:00006368 ; ---------------------------------------------------------------------------
.text$mn:0000636B                 align 4
.text$mn:0000636B _text$mn        ends
.text$mn:0000636B
.text$x:0000636C ; ===========================================================================
.text$x:0000636C
.text$x:0000636C ; Segment type: Pure code
.text$x:0000636C ; Segment permissions: Read/Execute
.text$x:0000636C _text$x         segment para public 'CODE' use32
.text$x:0000636C                 assume cs:_text$x
.text$x:0000636C                 ;org 636Ch
.text$x:0000636C ; COMDAT (pick associative to section at 62E0)
.text$x:0000636C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:0000636C
.text$x:0000636C ; =============== S U B R O U T I N E =======================================
.text$x:0000636C
.text$x:0000636C
.text$x:0000636C __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 proc near
.text$x:0000636C                                         ; DATA XREF: .xdata$x:0000A020o
.text$x:0000636C                 mov     ecx, [ebp-14h]
.text$x:0000636F                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:0000636F __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0 endp
.text$x:0000636F
.text$x:00006374
.text$x:00006374 ; =============== S U B R O U T I N E =======================================
.text$x:00006374
.text$x:00006374
.text$x:00006374 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z proc near
.text$x:00006374                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5o
.text$x:00006374
.text$x:00006374 arg_4           = dword ptr  8
.text$x:00006374
.text$x:00006374                 mov     edx, [esp+arg_4]
.text$x:00006378                 lea     eax, [edx+0Ch]
.text$x:0000637B                 mov     ecx, [edx-0Ch]
.text$x:0000637E                 xor     ecx, eax
.text$x:00006380                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006385                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.text$x:0000638A                 jmp     ___CxxFrameHandler3
.text$x:0000638A __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z endp
.text$x:0000638A
.text$x:0000638A ; ---------------------------------------------------------------------------
.text$x:0000638F                 align 10h
.text$x:0000638F _text$x         ends
.text$x:0000638F
.text$mn:00006390 ; ===========================================================================
.text$mn:00006390
.text$mn:00006390 ; Segment type: Pure code
.text$mn:00006390 ; Segment permissions: Read/Execute
.text$mn:00006390 _text$mn        segment para public 'CODE' use32
.text$mn:00006390                 assume cs:_text$mn
.text$mn:00006390                 ;org 6390h
.text$mn:00006390 ; COMDAT (pick any)
.text$mn:00006390                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006390
.text$mn:00006390 ; =============== S U B R O U T I N E =======================================
.text$mn:00006390
.text$mn:00006390 ; Attributes: bp-based frame
.text$mn:00006390
.text$mn:00006390 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t *Str)
.text$mn:00006390                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:00006390 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$mn:00006390                                         ; CODE XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+3Fp
.text$mn:00006390                                         ; NativeLangSpeaker::getSpecialMenuEntryName(char const *)+7Cp ...
.text$mn:00006390
.text$mn:00006390 var_14          = dword ptr -14h
.text$mn:00006390 var_D           = byte ptr -0Dh
.text$mn:00006390 var_C           = dword ptr -0Ch
.text$mn:00006390 var_4           = dword ptr -4
.text$mn:00006390 Str             = dword ptr  8
.text$mn:00006390
.text$mn:00006390                 push    ebp
.text$mn:00006391                 mov     ebp, esp
.text$mn:00006393                 push    0FFFFFFFFh
.text$mn:00006395                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$mn:0000639A                 mov     eax, large fs:0
.text$mn:000063A0                 push    eax
.text$mn:000063A1                 sub     esp, 8
.text$mn:000063A4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000063A9                 xor     eax, ebp
.text$mn:000063AB                 push    eax
.text$mn:000063AC                 lea     eax, [ebp+var_C]
.text$mn:000063AF                 mov     large fs:0, eax
.text$mn:000063B5                 mov     [ebp+var_14], ecx
.text$mn:000063B8                 lea     ecx, [ebp+var_D]
.text$mn:000063BB                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:000063C0                 push    eax
.text$mn:000063C1                 mov     ecx, [ebp+var_14]
.text$mn:000063C4                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:000063C9                 mov     [ebp+var_4], 0
.text$mn:000063D0                 push    0
.text$mn:000063D2                 push    0
.text$mn:000063D4                 mov     ecx, [ebp+var_14]
.text$mn:000063D7                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:000063DC                 mov     eax, [ebp+Str]
.text$mn:000063DF                 push    eax             ; Str
.text$mn:000063E0                 mov     ecx, [ebp+var_14]
.text$mn:000063E3                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:000063E8                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000063EF                 mov     eax, [ebp+var_14]
.text$mn:000063F2                 mov     ecx, [ebp+var_C]
.text$mn:000063F5                 mov     large fs:0, ecx
.text$mn:000063FC                 pop     ecx
.text$mn:000063FD                 mov     esp, ebp
.text$mn:000063FF                 pop     ebp
.text$mn:00006400                 retn    4
.text$mn:00006400 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$mn:00006400
.text$mn:00006400 ; ---------------------------------------------------------------------------
.text$mn:00006403                 align 4
.text$mn:00006403 _text$mn        ends
.text$mn:00006403
.text$x:00006404 ; ===========================================================================
.text$x:00006404
.text$x:00006404 ; Segment type: Pure code
.text$x:00006404 ; Segment permissions: Read/Execute
.text$x:00006404 _text$x         segment para public 'CODE' use32
.text$x:00006404                 assume cs:_text$x
.text$x:00006404                 ;org 6404h
.text$x:00006404 ; COMDAT (pick associative to section at 6390)
.text$x:00006404                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006404
.text$x:00006404 ; =============== S U B R O U T I N E =======================================
.text$x:00006404
.text$x:00006404
.text$x:00006404 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 proc near
.text$x:00006404                                         ; DATA XREF: .xdata$x:0000A078o
.text$x:00006404                 mov     ecx, [ebp-14h]
.text$x:00006407                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00006407 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0 endp
.text$x:00006407
.text$x:0000640C
.text$x:0000640C ; =============== S U B R O U T I N E =======================================
.text$x:0000640C
.text$x:0000640C
.text$x:0000640C __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z proc near
.text$x:0000640C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+5o
.text$x:0000640C
.text$x:0000640C arg_4           = dword ptr  8
.text$x:0000640C
.text$x:0000640C                 mov     edx, [esp+arg_4]
.text$x:00006410                 lea     eax, [edx+0Ch]
.text$x:00006413                 mov     ecx, [edx-0Ch]
.text$x:00006416                 xor     ecx, eax
.text$x:00006418                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000641D                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.text$x:00006422                 jmp     ___CxxFrameHandler3
.text$x:00006422 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z endp
.text$x:00006422
.text$x:00006422 ; ---------------------------------------------------------------------------
.text$x:00006427                 align 4
.text$x:00006427 _text$x         ends
.text$x:00006427
.text$mn:00006428 ; ===========================================================================
.text$mn:00006428
.text$mn:00006428 ; Segment type: Pure code
.text$mn:00006428 ; Segment permissions: Read/Execute
.text$mn:00006428 _text$mn        segment para public 'CODE' use32
.text$mn:00006428                 assume cs:_text$mn
.text$mn:00006428                 ;org 6428h
.text$mn:00006428 ; COMDAT (pick any)
.text$mn:00006428                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006428
.text$mn:00006428 ; =============== S U B R O U T I N E =======================================
.text$mn:00006428
.text$mn:00006428 ; Attributes: bp-based frame
.text$mn:00006428
.text$mn:00006428 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00006428                 public ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00006428 ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00006428                                         ; CODE XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+34p
.text$mn:00006428                                         ; NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+43p
.text$mn:00006428
.text$mn:00006428 var_14          = dword ptr -14h
.text$mn:00006428 var_D           = byte ptr -0Dh
.text$mn:00006428 var_C           = dword ptr -0Ch
.text$mn:00006428 var_4           = dword ptr -4
.text$mn:00006428
.text$mn:00006428                 push    ebp
.text$mn:00006429                 mov     ebp, esp
.text$mn:0000642B                 push    0FFFFFFFFh
.text$mn:0000642D                 push    offset __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00006432                 mov     eax, large fs:0
.text$mn:00006438                 push    eax
.text$mn:00006439                 sub     esp, 8
.text$mn:0000643C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006441                 xor     eax, ebp
.text$mn:00006443                 push    eax
.text$mn:00006444                 lea     eax, [ebp+var_C]
.text$mn:00006447                 mov     large fs:0, eax
.text$mn:0000644D                 mov     [ebp+var_14], ecx
.text$mn:00006450                 lea     ecx, [ebp+var_D]
.text$mn:00006453                 call    ??0?$allocator@_W@std@@QAE@XZ ; std::allocator<wchar_t>::allocator<wchar_t>(void)
.text$mn:00006458                 push    eax
.text$mn:00006459                 mov     ecx, [ebp+var_14]
.text$mn:0000645C                 call    ??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)
.text$mn:00006461                 mov     [ebp+var_4], 0
.text$mn:00006468
.text$mn:00006468 loc_6468:                               ; DATA XREF: .rdata:$SG170010o
.text$mn:00006468                                         ; .rdata:$SG170060o ...
.text$mn:00006468                 push    0
.text$mn:0000646A                 push    0
.text$mn:0000646C                 mov     ecx, [ebp+var_14]
.text$mn:0000646F                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00006474                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000647B                 mov     eax, [ebp+var_14]
.text$mn:0000647E                 mov     ecx, [ebp+var_C]
.text$mn:00006481                 mov     large fs:0, ecx
.text$mn:00006488                 pop     ecx
.text$mn:00006489                 mov     esp, ebp
.text$mn:0000648B                 pop     ebp
.text$mn:0000648C                 retn
.text$mn:0000648C ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:0000648C
.text$mn:0000648C ; ---------------------------------------------------------------------------
.text$mn:0000648D                 align 10h
.text$mn:0000648D _text$mn        ends
.text$mn:0000648D
.text$x:00006490 ; ===========================================================================
.text$x:00006490
.text$x:00006490 ; Segment type: Pure code
.text$x:00006490 ; Segment permissions: Read/Execute
.text$x:00006490 _text$x         segment para public 'CODE' use32
.text$x:00006490                 assume cs:_text$x
.text$x:00006490                 ;org 6490h
.text$x:00006490 ; COMDAT (pick associative to section at 6428)
.text$x:00006490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006490
.text$x:00006490 ; =============== S U B R O U T I N E =======================================
.text$x:00006490
.text$x:00006490
.text$x:00006490 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00006490                                         ; DATA XREF: .xdata$x:0000A04Co
.text$x:00006490                 mov     ecx, [ebp-14h]
.text$x:00006493                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00006493 __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00006493
.text$x:00006498
.text$x:00006498 ; =============== S U B R O U T I N E =======================================
.text$x:00006498
.text$x:00006498
.text$x:00006498 __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:00006498                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00006498
.text$x:00006498 arg_4           = dword ptr  8
.text$x:00006498
.text$x:00006498                 mov     edx, [esp+arg_4]
.text$x:0000649C                 lea     eax, [edx+0Ch]
.text$x:0000649F                 mov     ecx, [edx-0Ch]
.text$x:000064A2                 xor     ecx, eax
.text$x:000064A4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000064A9                 mov     eax, offset __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:000064AE                 jmp     ___CxxFrameHandler3
.text$x:000064AE __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:000064AE
.text$x:000064AE ; ---------------------------------------------------------------------------
.text$x:000064B3                 align 4
.text$x:000064B3 _text$x         ends
.text$x:000064B3
.text$mn:000064B4 ; ===========================================================================
.text$mn:000064B4
.text$mn:000064B4 ; Segment type: Pure code
.text$mn:000064B4 ; Segment permissions: Read/Execute
.text$mn:000064B4 _text$mn        segment para public 'CODE' use32
.text$mn:000064B4                 assume cs:_text$mn
.text$mn:000064B4                 ;org 64B4h
.text$mn:000064B4 ; COMDAT (pick any)
.text$mn:000064B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064B4
.text$mn:000064B4 ; =============== S U B R O U T I N E =======================================
.text$mn:000064B4
.text$mn:000064B4 ; Attributes: bp-based frame
.text$mn:000064B4
.text$mn:000064B4 ; _DWORD __thiscall std::_Container_base12::_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:000064B4                 public ??0_Container_base12@std@@QAE@XZ
.text$mn:000064B4 ??0_Container_base12@std@@QAE@XZ proc near
.text$mn:000064B4                                         ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_String_val<std::_Simple_types<char>>(void)+29p
.text$mn:000064B4                                         ; std::_String_val<std::_Simple_types<wchar_t>>::_String_val<std::_Simple_types<wchar_t>>(void)+29p
.text$mn:000064B4
.text$mn:000064B4 var_4           = dword ptr -4
.text$mn:000064B4
.text$mn:000064B4                 push    ebp
.text$mn:000064B5                 mov     ebp, esp
.text$mn:000064B7                 push    ecx
.text$mn:000064B8                 mov     [ebp+var_4], ecx
.text$mn:000064BB                 mov     eax, [ebp+var_4]
.text$mn:000064BE                 mov     dword ptr [eax], 0
.text$mn:000064C4                 mov     eax, [ebp+var_4]
.text$mn:000064C7                 mov     esp, ebp
.text$mn:000064C9                 pop     ebp
.text$mn:000064CA                 retn
.text$mn:000064CA ??0_Container_base12@std@@QAE@XZ endp
.text$mn:000064CA
.text$mn:000064CA ; ---------------------------------------------------------------------------
.text$mn:000064CB                 align 4
.text$mn:000064CB _text$mn        ends
.text$mn:000064CB
.text$mn:000064CC ; ===========================================================================
.text$mn:000064CC
.text$mn:000064CC ; Segment type: Pure code
.text$mn:000064CC ; Segment permissions: Read/Execute
.text$mn:000064CC _text$mn        segment para public 'CODE' use32
.text$mn:000064CC                 assume cs:_text$mn
.text$mn:000064CC                 ;org 64CCh
.text$mn:000064CC ; COMDAT (pick any)
.text$mn:000064CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064CC
.text$mn:000064CC ; =============== S U B R O U T I N E =======================================
.text$mn:000064CC
.text$mn:000064CC ; Attributes: bp-based frame
.text$mn:000064CC
.text$mn:000064CC ; _DWORD __thiscall std::_Container_proxy::_Container_proxy(std::_Container_proxy *__hidden this)
.text$mn:000064CC                 public ??0_Container_proxy@std@@QAE@XZ
.text$mn:000064CC ??0_Container_proxy@std@@QAE@XZ proc near
.text$mn:000064CC                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+23p
.text$mn:000064CC                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+23p
.text$mn:000064CC
.text$mn:000064CC var_4           = dword ptr -4
.text$mn:000064CC
.text$mn:000064CC                 push    ebp
.text$mn:000064CD                 mov     ebp, esp
.text$mn:000064CF                 push    ecx
.text$mn:000064D0                 mov     [ebp+var_4], ecx
.text$mn:000064D3                 mov     eax, [ebp+var_4]
.text$mn:000064D6                 mov     dword ptr [eax], 0
.text$mn:000064DC                 mov     ecx, [ebp+var_4]
.text$mn:000064DF                 mov     dword ptr [ecx+4], 0
.text$mn:000064E6                 mov     eax, [ebp+var_4]
.text$mn:000064E9                 mov     esp, ebp
.text$mn:000064EB                 pop     ebp
.text$mn:000064EC                 retn
.text$mn:000064EC ??0_Container_proxy@std@@QAE@XZ endp
.text$mn:000064EC
.text$mn:000064EC ; ---------------------------------------------------------------------------
.text$mn:000064ED                 align 10h
.text$mn:000064ED _text$mn        ends
.text$mn:000064ED
.text$mn:000064F0 ; ===========================================================================
.text$mn:000064F0
.text$mn:000064F0 ; Segment type: Pure code
.text$mn:000064F0 ; Segment permissions: Read/Execute
.text$mn:000064F0 _text$mn        segment para public 'CODE' use32
.text$mn:000064F0                 assume cs:_text$mn
.text$mn:000064F0                 ;org 64F0h
.text$mn:000064F0 ; COMDAT (pick any)
.text$mn:000064F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000064F0
.text$mn:000064F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000064F0
.text$mn:000064F0 ; Attributes: bp-based frame
.text$mn:000064F0
.text$mn:000064F0 ; _DWORD __thiscall std::_Generic_error_category::_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:000064F0                 public ??0_Generic_error_category@std@@QAE@XZ
.text$mn:000064F0 ??0_Generic_error_category@std@@QAE@XZ proc near
.text$mn:000064F0                                         ; CODE XREF: std::_Iostream_error_category::_Iostream_error_category(void)+29p
.text$mn:000064F0                                         ; std::_System_error_category::_System_error_category(void)+29p ...
.text$mn:000064F0
.text$mn:000064F0 var_10          = dword ptr -10h
.text$mn:000064F0 var_C           = dword ptr -0Ch
.text$mn:000064F0 var_4           = dword ptr -4
.text$mn:000064F0
.text$mn:000064F0                 push    ebp
.text$mn:000064F1                 mov     ebp, esp
.text$mn:000064F3                 push    0FFFFFFFFh
.text$mn:000064F5                 push    offset __ehhandler$??0_Generic_error_category@std@@QAE@XZ
.text$mn:000064FA                 mov     eax, large fs:0
.text$mn:00006500                 push    eax
.text$mn:00006501                 push    ecx
.text$mn:00006502                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006507                 xor     eax, ebp
.text$mn:00006509                 push    eax
.text$mn:0000650A                 lea     eax, [ebp+var_C]
.text$mn:0000650D                 mov     large fs:0, eax
.text$mn:00006513                 mov     [ebp+var_10], ecx
.text$mn:00006516                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006519                 call    ??0error_category@std@@QAE@XZ ; std::error_category::error_category(void)
.text$mn:0000651E                 mov     [ebp+var_4], 0
.text$mn:00006525                 mov     eax, [ebp+var_10]
.text$mn:00006528                 mov     dword ptr [eax], offset ??_7_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`vftable'
.text$mn:0000652E                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006535                 mov     eax, [ebp+var_10]
.text$mn:00006538                 mov     ecx, [ebp+var_C]
.text$mn:0000653B                 mov     large fs:0, ecx
.text$mn:00006542                 pop     ecx
.text$mn:00006543                 mov     esp, ebp
.text$mn:00006545                 pop     ebp
.text$mn:00006546                 retn
.text$mn:00006546 ??0_Generic_error_category@std@@QAE@XZ endp
.text$mn:00006546
.text$mn:00006546 ; ---------------------------------------------------------------------------
.text$mn:00006547                 align 4
.text$mn:00006547 _text$mn        ends
.text$mn:00006547
.text$x:00006548 ; ===========================================================================
.text$x:00006548
.text$x:00006548 ; Segment type: Pure code
.text$x:00006548 ; Segment permissions: Read/Execute
.text$x:00006548 _text$x         segment para public 'CODE' use32
.text$x:00006548                 assume cs:_text$x
.text$x:00006548                 ;org 6548h
.text$x:00006548 ; COMDAT (pick associative to section at 64F0)
.text$x:00006548                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006548
.text$x:00006548 ; =============== S U B R O U T I N E =======================================
.text$x:00006548
.text$x:00006548
.text$x:00006548 __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 proc near
.text$x:00006548                                         ; DATA XREF: .xdata$x:00009DE4o
.text$x:00006548                 mov     ecx, [ebp-10h]  ; this
.text$x:0000654B                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:0000654B __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0 endp
.text$x:0000654B
.text$x:00006550
.text$x:00006550 ; =============== S U B R O U T I N E =======================================
.text$x:00006550
.text$x:00006550
.text$x:00006550 __ehhandler$??0_Generic_error_category@std@@QAE@XZ proc near
.text$x:00006550                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+5o
.text$x:00006550
.text$x:00006550 arg_4           = dword ptr  8
.text$x:00006550
.text$x:00006550                 mov     edx, [esp+arg_4]
.text$x:00006554                 lea     eax, [edx+0Ch]
.text$x:00006557                 mov     ecx, [edx-8]
.text$x:0000655A                 xor     ecx, eax
.text$x:0000655C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006561                 mov     eax, offset __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ
.text$x:00006566                 jmp     ___CxxFrameHandler3
.text$x:00006566 __ehhandler$??0_Generic_error_category@std@@QAE@XZ endp
.text$x:00006566
.text$x:00006566 ; ---------------------------------------------------------------------------
.text$x:0000656B                 align 4
.text$x:0000656B _text$x         ends
.text$x:0000656B
.text$mn:0000656C ; ===========================================================================
.text$mn:0000656C
.text$mn:0000656C ; Segment type: Pure code
.text$mn:0000656C ; Segment permissions: Read/Execute
.text$mn:0000656C _text$mn        segment para public 'CODE' use32
.text$mn:0000656C                 assume cs:_text$mn
.text$mn:0000656C                 ;org 656Ch
.text$mn:0000656C ; COMDAT (pick any)
.text$mn:0000656C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000656C
.text$mn:0000656C ; =============== S U B R O U T I N E =======================================
.text$mn:0000656C
.text$mn:0000656C ; Attributes: bp-based frame
.text$mn:0000656C
.text$mn:0000656C ; _DWORD __thiscall std::_Ignore::_Ignore(std::_Ignore *__hidden this)
.text$mn:0000656C                 public ??0_Ignore@std@@QAE@XZ
.text$mn:0000656C ??0_Ignore@std@@QAE@XZ proc near        ; CODE XREF: std::`dynamic initializer for 'ignore''(void)+8p
.text$mn:0000656C
.text$mn:0000656C var_4           = dword ptr -4
.text$mn:0000656C
.text$mn:0000656C                 push    ebp
.text$mn:0000656D                 mov     ebp, esp
.text$mn:0000656F                 push    ecx
.text$mn:00006570                 mov     [ebp+var_4], ecx
.text$mn:00006573                 mov     eax, [ebp+var_4]
.text$mn:00006576                 mov     esp, ebp
.text$mn:00006578                 pop     ebp
.text$mn:00006579                 retn
.text$mn:00006579 ??0_Ignore@std@@QAE@XZ endp
.text$mn:00006579
.text$mn:00006579 ; ---------------------------------------------------------------------------
.text$mn:0000657A                 align 4
.text$mn:0000657A _text$mn        ends
.text$mn:0000657A
.text$mn:0000657C ; ===========================================================================
.text$mn:0000657C
.text$mn:0000657C ; Segment type: Pure code
.text$mn:0000657C ; Segment permissions: Read/Execute
.text$mn:0000657C _text$mn        segment para public 'CODE' use32
.text$mn:0000657C                 assume cs:_text$mn
.text$mn:0000657C                 ;org 657Ch
.text$mn:0000657C ; COMDAT (pick any)
.text$mn:0000657C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000657C
.text$mn:0000657C ; =============== S U B R O U T I N E =======================================
.text$mn:0000657C
.text$mn:0000657C ; Attributes: bp-based frame
.text$mn:0000657C
.text$mn:0000657C ; _DWORD __thiscall std::_Iostream_error_category::_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:0000657C                 public ??0_Iostream_error_category@std@@QAE@XZ
.text$mn:0000657C ??0_Iostream_error_category@std@@QAE@XZ proc near
.text$mn:0000657C                                         ; CODE XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:0000657C
.text$mn:0000657C var_10          = dword ptr -10h
.text$mn:0000657C var_C           = dword ptr -0Ch
.text$mn:0000657C var_4           = dword ptr -4
.text$mn:0000657C
.text$mn:0000657C                 push    ebp
.text$mn:0000657D                 mov     ebp, esp
.text$mn:0000657F                 push    0FFFFFFFFh
.text$mn:00006581                 push    offset __ehhandler$??0_Iostream_error_category@std@@QAE@XZ
.text$mn:00006586                 mov     eax, large fs:0
.text$mn:0000658C                 push    eax
.text$mn:0000658D                 push    ecx
.text$mn:0000658E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006593                 xor     eax, ebp
.text$mn:00006595                 push    eax
.text$mn:00006596                 lea     eax, [ebp+var_C]
.text$mn:00006599                 mov     large fs:0, eax
.text$mn:0000659F                 mov     [ebp+var_10], ecx
.text$mn:000065A2                 mov     ecx, [ebp+var_10] ; this
.text$mn:000065A5                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:000065AA                 mov     [ebp+var_4], 0
.text$mn:000065B1                 mov     eax, [ebp+var_10]
.text$mn:000065B4                 mov     dword ptr [eax], offset ??_7_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`vftable'
.text$mn:000065BA                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000065C1                 mov     eax, [ebp+var_10]
.text$mn:000065C4                 mov     ecx, [ebp+var_C]
.text$mn:000065C7                 mov     large fs:0, ecx
.text$mn:000065CE                 pop     ecx
.text$mn:000065CF                 mov     esp, ebp
.text$mn:000065D1                 pop     ebp
.text$mn:000065D2                 retn
.text$mn:000065D2 ??0_Iostream_error_category@std@@QAE@XZ endp
.text$mn:000065D2
.text$mn:000065D2 ; ---------------------------------------------------------------------------
.text$mn:000065D3                 align 4
.text$mn:000065D3 _text$mn        ends
.text$mn:000065D3
.text$x:000065D4 ; ===========================================================================
.text$x:000065D4
.text$x:000065D4 ; Segment type: Pure code
.text$x:000065D4 ; Segment permissions: Read/Execute
.text$x:000065D4 _text$x         segment para public 'CODE' use32
.text$x:000065D4                 assume cs:_text$x
.text$x:000065D4                 ;org 65D4h
.text$x:000065D4 ; COMDAT (pick associative to section at 657C)
.text$x:000065D4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000065D4
.text$x:000065D4 ; =============== S U B R O U T I N E =======================================
.text$x:000065D4
.text$x:000065D4
.text$x:000065D4 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 proc near
.text$x:000065D4                                         ; DATA XREF: .xdata$x:00009E68o
.text$x:000065D4                 mov     ecx, [ebp-10h]  ; this
.text$x:000065D7                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:000065D7 __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0 endp
.text$x:000065D7
.text$x:000065DC
.text$x:000065DC ; =============== S U B R O U T I N E =======================================
.text$x:000065DC
.text$x:000065DC
.text$x:000065DC __ehhandler$??0_Iostream_error_category@std@@QAE@XZ proc near
.text$x:000065DC                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+5o
.text$x:000065DC
.text$x:000065DC arg_4           = dword ptr  8
.text$x:000065DC
.text$x:000065DC                 mov     edx, [esp+arg_4]
.text$x:000065E0                 lea     eax, [edx+0Ch]
.text$x:000065E3                 mov     ecx, [edx-8]
.text$x:000065E6                 xor     ecx, eax
.text$x:000065E8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000065ED                 mov     eax, offset __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ
.text$x:000065F2                 jmp     ___CxxFrameHandler3
.text$x:000065F2 __ehhandler$??0_Iostream_error_category@std@@QAE@XZ endp
.text$x:000065F2
.text$x:000065F2 ; ---------------------------------------------------------------------------
.text$x:000065F7                 align 4
.text$x:000065F7 _text$x         ends
.text$x:000065F7
.text$mn:000065F8 ; ===========================================================================
.text$mn:000065F8
.text$mn:000065F8 ; Segment type: Pure code
.text$mn:000065F8 ; Segment permissions: Read/Execute
.text$mn:000065F8 _text$mn        segment para public 'CODE' use32
.text$mn:000065F8                 assume cs:_text$mn
.text$mn:000065F8                 ;org 65F8h
.text$mn:000065F8 ; COMDAT (pick any)
.text$mn:000065F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000065F8
.text$mn:000065F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000065F8
.text$mn:000065F8 ; Attributes: bp-based frame
.text$mn:000065F8
.text$mn:000065F8 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *this, const struct std::_Iterator_base12 *)
.text$mn:000065F8                 public ??0_Iterator_base12@std@@QAE@ABU01@@Z
.text$mn:000065F8 ??0_Iterator_base12@std@@QAE@ABU01@@Z proc near
.text$mn:000065F8                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12> const &)+2Dp
.text$mn:000065F8
.text$mn:000065F8 var_4           = dword ptr -4
.text$mn:000065F8 arg_0           = dword ptr  8
.text$mn:000065F8
.text$mn:000065F8                 push    ebp
.text$mn:000065F9                 mov     ebp, esp
.text$mn:000065FB                 push    ecx
.text$mn:000065FC                 mov     [ebp+var_4], ecx
.text$mn:000065FF                 mov     eax, [ebp+var_4]
.text$mn:00006602                 mov     dword ptr [eax], 0
.text$mn:00006608                 mov     ecx, [ebp+var_4]
.text$mn:0000660B                 mov     dword ptr [ecx+4], 0
.text$mn:00006612                 mov     edx, [ebp+arg_0]
.text$mn:00006615                 push    edx
.text$mn:00006616                 mov     ecx, [ebp+var_4]
.text$mn:00006619                 call    ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)
.text$mn:0000661E                 mov     eax, [ebp+var_4]
.text$mn:00006621                 mov     esp, ebp
.text$mn:00006623                 pop     ebp
.text$mn:00006624                 retn    4
.text$mn:00006624 ??0_Iterator_base12@std@@QAE@ABU01@@Z endp
.text$mn:00006624
.text$mn:00006624 ; ---------------------------------------------------------------------------
.text$mn:00006627                 align 4
.text$mn:00006627 _text$mn        ends
.text$mn:00006627
.text$mn:00006628 ; ===========================================================================
.text$mn:00006628
.text$mn:00006628 ; Segment type: Pure code
.text$mn:00006628 ; Segment permissions: Read/Execute
.text$mn:00006628 _text$mn        segment para public 'CODE' use32
.text$mn:00006628                 assume cs:_text$mn
.text$mn:00006628                 ;org 6628h
.text$mn:00006628 ; COMDAT (pick any)
.text$mn:00006628                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006628
.text$mn:00006628 ; =============== S U B R O U T I N E =======================================
.text$mn:00006628
.text$mn:00006628 ; Attributes: bp-based frame
.text$mn:00006628
.text$mn:00006628 ; _DWORD __thiscall std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:00006628                 public ??0_Iterator_base12@std@@QAE@XZ
.text$mn:00006628 ??0_Iterator_base12@std@@QAE@XZ proc near
.text$mn:00006628                                         ; CODE XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+29p
.text$mn:00006628
.text$mn:00006628 var_4           = dword ptr -4
.text$mn:00006628
.text$mn:00006628                 push    ebp
.text$mn:00006629                 mov     ebp, esp
.text$mn:0000662B                 push    ecx
.text$mn:0000662C                 mov     [ebp+var_4], ecx
.text$mn:0000662F                 mov     eax, [ebp+var_4]
.text$mn:00006632                 mov     dword ptr [eax], 0
.text$mn:00006638                 mov     ecx, [ebp+var_4]
.text$mn:0000663B                 mov     dword ptr [ecx+4], 0
.text$mn:00006642                 mov     eax, [ebp+var_4]
.text$mn:00006645                 mov     esp, ebp
.text$mn:00006647                 pop     ebp
.text$mn:00006648                 retn
.text$mn:00006648 ??0_Iterator_base12@std@@QAE@XZ endp
.text$mn:00006648
.text$mn:00006648 ; ---------------------------------------------------------------------------
.text$mn:00006649                 align 4
.text$mn:00006649 _text$mn        ends
.text$mn:00006649
.text$mn:0000664C ; ===========================================================================
.text$mn:0000664C
.text$mn:0000664C ; Segment type: Pure code
.text$mn:0000664C ; Segment permissions: Read/Execute
.text$mn:0000664C _text$mn        segment para public 'CODE' use32
.text$mn:0000664C                 assume cs:_text$mn
.text$mn:0000664C                 ;org 664Ch
.text$mn:0000664C ; COMDAT (pick any)
.text$mn:0000664C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000664C
.text$mn:0000664C ; =============== S U B R O U T I N E =======================================
.text$mn:0000664C
.text$mn:0000664C ; Attributes: bp-based frame
.text$mn:0000664C
.text$mn:0000664C ; _DWORD __thiscall std::_System_error_category::_System_error_category(std::_System_error_category *__hidden this)
.text$mn:0000664C                 public ??0_System_error_category@std@@QAE@XZ
.text$mn:0000664C ??0_System_error_category@std@@QAE@XZ proc near
.text$mn:0000664C                                         ; CODE XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:0000664C
.text$mn:0000664C var_10          = dword ptr -10h
.text$mn:0000664C var_C           = dword ptr -0Ch
.text$mn:0000664C var_4           = dword ptr -4
.text$mn:0000664C
.text$mn:0000664C                 push    ebp
.text$mn:0000664D                 mov     ebp, esp
.text$mn:0000664F                 push    0FFFFFFFFh
.text$mn:00006651                 push    offset __ehhandler$??0_System_error_category@std@@QAE@XZ
.text$mn:00006656                 mov     eax, large fs:0
.text$mn:0000665C                 push    eax
.text$mn:0000665D                 push    ecx
.text$mn:0000665E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006663                 xor     eax, ebp
.text$mn:00006665                 push    eax
.text$mn:00006666                 lea     eax, [ebp+var_C]
.text$mn:00006669                 mov     large fs:0, eax
.text$mn:0000666F                 mov     [ebp+var_10], ecx
.text$mn:00006672                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006675                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$mn:0000667A                 mov     [ebp+var_4], 0
.text$mn:00006681                 mov     eax, [ebp+var_10]
.text$mn:00006684                 mov     dword ptr [eax], offset ??_7_System_error_category@std@@6B@ ; const std::_System_error_category::`vftable'
.text$mn:0000668A                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006691                 mov     eax, [ebp+var_10]
.text$mn:00006694                 mov     ecx, [ebp+var_C]
.text$mn:00006697                 mov     large fs:0, ecx
.text$mn:0000669E                 pop     ecx
.text$mn:0000669F                 mov     esp, ebp
.text$mn:000066A1                 pop     ebp
.text$mn:000066A2                 retn
.text$mn:000066A2 ??0_System_error_category@std@@QAE@XZ endp
.text$mn:000066A2
.text$mn:000066A2 ; ---------------------------------------------------------------------------
.text$mn:000066A3                 align 4
.text$mn:000066A3 _text$mn        ends
.text$mn:000066A3
.text$x:000066A4 ; ===========================================================================
.text$x:000066A4
.text$x:000066A4 ; Segment type: Pure code
.text$x:000066A4 ; Segment permissions: Read/Execute
.text$x:000066A4 _text$x         segment para public 'CODE' use32
.text$x:000066A4                 assume cs:_text$x
.text$x:000066A4                 ;org 66A4h
.text$x:000066A4 ; COMDAT (pick associative to section at 664C)
.text$x:000066A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000066A4
.text$x:000066A4 ; =============== S U B R O U T I N E =======================================
.text$x:000066A4
.text$x:000066A4
.text$x:000066A4 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 proc near
.text$x:000066A4                                         ; DATA XREF: .xdata$x:00009EECo
.text$x:000066A4                 mov     ecx, [ebp-10h]  ; this
.text$x:000066A7                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:000066A7 __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0 endp
.text$x:000066A7
.text$x:000066AC
.text$x:000066AC ; =============== S U B R O U T I N E =======================================
.text$x:000066AC
.text$x:000066AC
.text$x:000066AC __ehhandler$??0_System_error_category@std@@QAE@XZ proc near
.text$x:000066AC                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+5o
.text$x:000066AC
.text$x:000066AC arg_4           = dword ptr  8
.text$x:000066AC
.text$x:000066AC                 mov     edx, [esp+arg_4]
.text$x:000066B0                 lea     eax, [edx+0Ch]
.text$x:000066B3                 mov     ecx, [edx-8]
.text$x:000066B6                 xor     ecx, eax
.text$x:000066B8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000066BD                 mov     eax, offset __ehfuncinfo$??0_System_error_category@std@@QAE@XZ
.text$x:000066C2                 jmp     ___CxxFrameHandler3
.text$x:000066C2 __ehhandler$??0_System_error_category@std@@QAE@XZ endp
.text$x:000066C2
.text$x:000066C2 ; ---------------------------------------------------------------------------
.text$x:000066C7                 align 4
.text$x:000066C7 _text$x         ends
.text$x:000066C7
.text$mn:000066C8 ; ===========================================================================
.text$mn:000066C8
.text$mn:000066C8 ; Segment type: Pure code
.text$mn:000066C8 ; Segment permissions: Read/Execute
.text$mn:000066C8 _text$mn        segment para public 'CODE' use32
.text$mn:000066C8                 assume cs:_text$mn
.text$mn:000066C8                 ;org 66C8h
.text$mn:000066C8 ; COMDAT (pick any)
.text$mn:000066C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066C8
.text$mn:000066C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000066C8
.text$mn:000066C8 ; Attributes: bp-based frame
.text$mn:000066C8
.text$mn:000066C8 ; _DWORD __thiscall std::error_category::error_category(std::error_category *__hidden this)
.text$mn:000066C8                 public ??0error_category@std@@QAE@XZ
.text$mn:000066C8 ??0error_category@std@@QAE@XZ proc near ; CODE XREF: std::_Generic_error_category::_Generic_error_category(void)+29p
.text$mn:000066C8
.text$mn:000066C8 var_4           = dword ptr -4
.text$mn:000066C8
.text$mn:000066C8                 push    ebp
.text$mn:000066C9                 mov     ebp, esp
.text$mn:000066CB                 push    ecx
.text$mn:000066CC                 mov     [ebp+var_4], ecx
.text$mn:000066CF                 mov     eax, [ebp+var_4]
.text$mn:000066D2                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:000066D8                 mov     eax, [ebp+var_4]
.text$mn:000066DB                 mov     esp, ebp
.text$mn:000066DD                 pop     ebp
.text$mn:000066DE                 retn
.text$mn:000066DE ??0error_category@std@@QAE@XZ endp
.text$mn:000066DE
.text$mn:000066DE ; ---------------------------------------------------------------------------
.text$mn:000066DF                 align 10h
.text$mn:000066DF _text$mn        ends
.text$mn:000066DF
.text$mn:000066E0 ; ===========================================================================
.text$mn:000066E0
.text$mn:000066E0 ; Segment type: Pure code
.text$mn:000066E0 ; Segment permissions: Read/Execute
.text$mn:000066E0 _text$mn        segment para public 'CODE' use32
.text$mn:000066E0                 assume cs:_text$mn
.text$mn:000066E0                 ;org 66E0h
.text$mn:000066E0 ; COMDAT (pick any)
.text$mn:000066E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000066E0
.text$mn:000066E0 ; =============== S U B R O U T I N E =======================================
.text$mn:000066E0
.text$mn:000066E0 ; Attributes: bp-based frame
.text$mn:000066E0
.text$mn:000066E0 ; _DWORD __thiscall std::error_condition::error_condition(std::error_condition *this, int, const struct std::error_category *)
.text$mn:000066E0                 public ??0error_condition@std@@QAE@HABVerror_category@1@@Z
.text$mn:000066E0 ??0error_condition@std@@QAE@HABVerror_category@1@@Z proc near
.text$mn:000066E0                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+24p
.text$mn:000066E0                                         ; std::_System_error_category::default_error_condition(int)+3Dp ...
.text$mn:000066E0
.text$mn:000066E0 var_4           = dword ptr -4
.text$mn:000066E0 arg_0           = dword ptr  8
.text$mn:000066E0 arg_4           = dword ptr  0Ch
.text$mn:000066E0
.text$mn:000066E0                 push    ebp
.text$mn:000066E1                 mov     ebp, esp
.text$mn:000066E3                 push    ecx
.text$mn:000066E4                 mov     [ebp+var_4], ecx
.text$mn:000066E7                 mov     eax, [ebp+var_4]
.text$mn:000066EA                 mov     ecx, [ebp+arg_0]
.text$mn:000066ED                 mov     [eax], ecx
.text$mn:000066EF                 mov     edx, [ebp+var_4]
.text$mn:000066F2                 mov     eax, [ebp+arg_4]
.text$mn:000066F5                 mov     [edx+4], eax
.text$mn:000066F8                 mov     eax, [ebp+var_4]
.text$mn:000066FB                 mov     esp, ebp
.text$mn:000066FD                 pop     ebp
.text$mn:000066FE                 retn    8
.text$mn:000066FE ??0error_condition@std@@QAE@HABVerror_category@1@@Z endp
.text$mn:000066FE
.text$mn:000066FE ; ---------------------------------------------------------------------------
.text$mn:00006701                 align 4
.text$mn:00006701 _text$mn        ends
.text$mn:00006701
.text$mn:00006704 ; ===========================================================================
.text$mn:00006704
.text$mn:00006704 ; Segment type: Pure code
.text$mn:00006704 ; Segment permissions: Read/Execute
.text$mn:00006704 _text$mn        segment para public 'CODE' use32
.text$mn:00006704                 assume cs:_text$mn
.text$mn:00006704                 ;org 6704h
.text$mn:00006704 ; COMDAT (pick any)
.text$mn:00006704                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006704
.text$mn:00006704 ; =============== S U B R O U T I N E =======================================
.text$mn:00006704
.text$mn:00006704 ; Attributes: bp-based frame
.text$mn:00006704
.text$mn:00006704 ; _DWORD __thiscall std::locale::id::id(std::locale::id *this, unsigned int)
.text$mn:00006704                 public ??0id@locale@std@@QAE@I@Z
.text$mn:00006704 ??0id@locale@std@@QAE@I@Z proc near     ; CODE XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+Ap
.text$mn:00006704                                         ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+Ap ...
.text$mn:00006704
.text$mn:00006704 var_4           = dword ptr -4
.text$mn:00006704 arg_0           = dword ptr  8
.text$mn:00006704
.text$mn:00006704                 push    ebp
.text$mn:00006705                 mov     ebp, esp
.text$mn:00006707                 push    ecx
.text$mn:00006708                 mov     [ebp+var_4], ecx
.text$mn:0000670B                 mov     eax, [ebp+var_4]
.text$mn:0000670E                 mov     ecx, [ebp+arg_0]
.text$mn:00006711                 mov     [eax], ecx
.text$mn:00006713                 mov     eax, [ebp+var_4]
.text$mn:00006716                 mov     esp, ebp
.text$mn:00006718                 pop     ebp
.text$mn:00006719                 retn    4
.text$mn:00006719 ??0id@locale@std@@QAE@I@Z endp
.text$mn:00006719
.text$mn:00006719 _text$mn        ends
.text$mn:00006719
.text$mn:0000671C ; ===========================================================================
.text$mn:0000671C
.text$mn:0000671C ; Segment type: Pure code
.text$mn:0000671C ; Segment permissions: Read/Execute
.text$mn:0000671C _text$mn        segment para public 'CODE' use32
.text$mn:0000671C                 assume cs:_text$mn
.text$mn:0000671C                 ;org 671Ch
.text$mn:0000671C ; COMDAT (pick any)
.text$mn:0000671C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000671C
.text$mn:0000671C ; =============== S U B R O U T I N E =======================================
.text$mn:0000671C
.text$mn:0000671C ; Attributes: bp-based frame
.text$mn:0000671C
.text$mn:0000671C ; public: __thiscall std::_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>::~_Iterator012<struct std::random_access_iterator_tag, wchar_t, int, wchar_t const *, wchar_t const &, struct std::_Iterator_base12>(void)
.text$mn:0000671C                 public ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:0000671C ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$mn:0000671C                                         ; CODE XREF: __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0+3j
.text$mn:0000671C                                         ; __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0+3j ...
.text$mn:0000671C
.text$mn:0000671C var_10          = dword ptr -10h
.text$mn:0000671C var_C           = dword ptr -0Ch
.text$mn:0000671C var_4           = dword ptr -4
.text$mn:0000671C
.text$mn:0000671C                 push    ebp
.text$mn:0000671D                 mov     ebp, esp
.text$mn:0000671F                 push    0FFFFFFFFh
.text$mn:00006721                 push    offset __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$mn:00006726                 mov     eax, large fs:0
.text$mn:0000672C                 push    eax
.text$mn:0000672D                 push    ecx
.text$mn:0000672E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006733                 xor     eax, ebp
.text$mn:00006735                 push    eax
.text$mn:00006736                 lea     eax, [ebp+var_C]
.text$mn:00006739                 mov     large fs:0, eax
.text$mn:0000673F                 mov     [ebp+var_10], ecx
.text$mn:00006742                 mov     [ebp+var_4], 0
.text$mn:00006749                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006750                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006753                 call    ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$mn:00006758                 mov     ecx, [ebp+var_C]
.text$mn:0000675B                 mov     large fs:0, ecx
.text$mn:00006762                 pop     ecx
.text$mn:00006763                 mov     esp, ebp
.text$mn:00006765                 pop     ebp
.text$mn:00006766                 retn
.text$mn:00006766 ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$mn:00006766
.text$mn:00006766 ; ---------------------------------------------------------------------------
.text$mn:00006767                 align 4
.text$mn:00006767 _text$mn        ends
.text$mn:00006767
.text$x:00006768 ; ===========================================================================
.text$x:00006768
.text$x:00006768 ; Segment type: Pure code
.text$x:00006768 ; Segment permissions: Read/Execute
.text$x:00006768 _text$x         segment para public 'CODE' use32
.text$x:00006768                 assume cs:_text$x
.text$x:00006768                 ;org 6768h
.text$x:00006768 ; COMDAT (pick associative to section at 671C)
.text$x:00006768                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006768
.text$x:00006768 ; =============== S U B R O U T I N E =======================================
.text$x:00006768
.text$x:00006768
.text$x:00006768 __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 proc near
.text$x:00006768                                         ; DATA XREF: .xdata$x:0000A4B0o
.text$x:00006768                 mov     ecx, [ebp-10h]  ; this
.text$x:0000676B                 jmp     ??1_Iterator_base12@std@@QAE@XZ ; std::_Iterator_base12::~_Iterator_base12(void)
.text$x:0000676B __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0 endp
.text$x:0000676B
.text$x:00006770
.text$x:00006770 ; =============== S U B R O U T I N E =======================================
.text$x:00006770
.text$x:00006770
.text$x:00006770 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ proc near
.text$x:00006770                                         ; DATA XREF: std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)+5o
.text$x:00006770
.text$x:00006770 arg_4           = dword ptr  8
.text$x:00006770
.text$x:00006770                 mov     edx, [esp+arg_4]
.text$x:00006774                 lea     eax, [edx+0Ch]
.text$x:00006777                 mov     ecx, [edx-8]
.text$x:0000677A                 xor     ecx, eax
.text$x:0000677C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006781                 mov     eax, offset __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.text$x:00006786                 jmp     ___CxxFrameHandler3
.text$x:00006786 __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ endp
.text$x:00006786
.text$x:00006786 ; ---------------------------------------------------------------------------
.text$x:0000678B                 align 4
.text$x:0000678B _text$x         ends
.text$x:0000678B
.text$mn:0000678C ; ===========================================================================
.text$mn:0000678C
.text$mn:0000678C ; Segment type: Pure code
.text$mn:0000678C ; Segment permissions: Read/Execute
.text$mn:0000678C _text$mn        segment para public 'CODE' use32
.text$mn:0000678C                 assume cs:_text$mn
.text$mn:0000678C                 ;org 678Ch
.text$mn:0000678C ; COMDAT (pick any)
.text$mn:0000678C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000678C
.text$mn:0000678C ; =============== S U B R O U T I N E =======================================
.text$mn:0000678C
.text$mn:0000678C ; Attributes: bp-based frame
.text$mn:0000678C
.text$mn:0000678C ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::~_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>(void)
.text$mn:0000678C                 public ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:0000678C ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000678C                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0+3j
.text$mn:0000678C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+43p ...
.text$mn:0000678C
.text$mn:0000678C var_10          = dword ptr -10h
.text$mn:0000678C var_C           = dword ptr -0Ch
.text$mn:0000678C var_4           = dword ptr -4
.text$mn:0000678C
.text$mn:0000678C                 push    ebp
.text$mn:0000678D                 mov     ebp, esp
.text$mn:0000678F                 push    0FFFFFFFFh
.text$mn:00006791                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$mn:00006796                 mov     eax, large fs:0
.text$mn:0000679C                 push    eax
.text$mn:0000679D                 push    ecx
.text$mn:0000679E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000067A3                 xor     eax, ebp
.text$mn:000067A5                 push    eax
.text$mn:000067A6                 lea     eax, [ebp+var_C]
.text$mn:000067A9                 mov     large fs:0, eax
.text$mn:000067AF                 mov     [ebp+var_10], ecx
.text$mn:000067B2                 mov     [ebp+var_4], 0
.text$mn:000067B9                 mov     ecx, [ebp+var_10]
.text$mn:000067BC                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)
.text$mn:000067C1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000067C8                 mov     ecx, [ebp+var_10]
.text$mn:000067CB                 call    ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$mn:000067D0                 mov     ecx, [ebp+var_C]
.text$mn:000067D3                 mov     large fs:0, ecx
.text$mn:000067DA                 pop     ecx
.text$mn:000067DB                 mov     esp, ebp
.text$mn:000067DD                 pop     ebp
.text$mn:000067DE                 retn
.text$mn:000067DE ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$mn:000067DE
.text$mn:000067DE ; ---------------------------------------------------------------------------
.text$mn:000067DF                 align 10h
.text$mn:000067DF _text$mn        ends
.text$mn:000067DF
.text$x:000067E0 ; ===========================================================================
.text$x:000067E0
.text$x:000067E0 ; Segment type: Pure code
.text$x:000067E0 ; Segment permissions: Read/Execute
.text$x:000067E0 _text$x         segment para public 'CODE' use32
.text$x:000067E0                 assume cs:_text$x
.text$x:000067E0                 ;org 67E0h
.text$x:000067E0 ; COMDAT (pick associative to section at 678C)
.text$x:000067E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000067E0
.text$x:000067E0 ; =============== S U B R O U T I N E =======================================
.text$x:000067E0
.text$x:000067E0
.text$x:000067E0 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000067E0                                         ; DATA XREF: .xdata$x:00009CD4o
.text$x:000067E0                 mov     ecx, [ebp-10h]
.text$x:000067E3                 jmp     ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)
.text$x:000067E3 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000067E3
.text$x:000067E8
.text$x:000067E8 ; =============== S U B R O U T I N E =======================================
.text$x:000067E8
.text$x:000067E8
.text$x:000067E8 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ proc near
.text$x:000067E8                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+5o
.text$x:000067E8
.text$x:000067E8 arg_4           = dword ptr  8
.text$x:000067E8
.text$x:000067E8                 mov     edx, [esp+arg_4]
.text$x:000067EC                 lea     eax, [edx+0Ch]
.text$x:000067EF                 mov     ecx, [edx-8]
.text$x:000067F2                 xor     ecx, eax
.text$x:000067F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000067F9                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.text$x:000067FE                 jmp     ___CxxFrameHandler3
.text$x:000067FE __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ endp
.text$x:000067FE
.text$x:000067FE ; ---------------------------------------------------------------------------
.text$x:00006803                 align 4
.text$x:00006803 _text$x         ends
.text$x:00006803
.text$mn:00006804 ; ===========================================================================
.text$mn:00006804
.text$mn:00006804 ; Segment type: Pure code
.text$mn:00006804 ; Segment permissions: Read/Execute
.text$mn:00006804 _text$mn        segment para public 'CODE' use32
.text$mn:00006804                 assume cs:_text$mn
.text$mn:00006804                 ;org 6804h
.text$mn:00006804 ; COMDAT (pick any)
.text$mn:00006804                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006804
.text$mn:00006804 ; =============== S U B R O U T I N E =======================================
.text$mn:00006804
.text$mn:00006804 ; Attributes: bp-based frame
.text$mn:00006804
.text$mn:00006804 ; public: __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::~_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>(void)
.text$mn:00006804                 public ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00006804 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:00006804                                         ; CODE XREF: __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0+3j
.text$mn:00006804                                         ; __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0+3j ...
.text$mn:00006804
.text$mn:00006804 var_10          = dword ptr -10h
.text$mn:00006804 var_C           = dword ptr -0Ch
.text$mn:00006804 var_4           = dword ptr -4
.text$mn:00006804
.text$mn:00006804                 push    ebp
.text$mn:00006805                 mov     ebp, esp
.text$mn:00006807                 push    0FFFFFFFFh
.text$mn:00006809                 push    offset __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$mn:0000680E                 mov     eax, large fs:0
.text$mn:00006814                 push    eax
.text$mn:00006815                 push    ecx
.text$mn:00006816                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000681B                 xor     eax, ebp
.text$mn:0000681D                 push    eax
.text$mn:0000681E                 lea     eax, [ebp+var_C]
.text$mn:00006821                 mov     large fs:0, eax
.text$mn:00006827                 mov     [ebp+var_10], ecx
.text$mn:0000682A                 mov     [ebp+var_4], 0
.text$mn:00006831                 mov     ecx, [ebp+var_10]
.text$mn:00006834                 call    ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00006839                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006840                 mov     ecx, [ebp+var_10]
.text$mn:00006843                 call    ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$mn:00006848                 mov     ecx, [ebp+var_C]
.text$mn:0000684B                 mov     large fs:0, ecx
.text$mn:00006852                 pop     ecx
.text$mn:00006853                 mov     esp, ebp
.text$mn:00006855                 pop     ebp
.text$mn:00006856                 retn
.text$mn:00006856 ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00006856
.text$mn:00006856 ; ---------------------------------------------------------------------------
.text$mn:00006857                 align 4
.text$mn:00006857 _text$mn        ends
.text$mn:00006857
.text$x:00006858 ; ===========================================================================
.text$x:00006858
.text$x:00006858 ; Segment type: Pure code
.text$x:00006858 ; Segment permissions: Read/Execute
.text$x:00006858 _text$x         segment para public 'CODE' use32
.text$x:00006858                 assume cs:_text$x
.text$x:00006858                 ;org 6858h
.text$x:00006858 ; COMDAT (pick associative to section at 6804)
.text$x:00006858                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006858
.text$x:00006858 ; =============== S U B R O U T I N E =======================================
.text$x:00006858
.text$x:00006858
.text$x:00006858 __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00006858                                         ; DATA XREF: .xdata$x:00009FF4o
.text$x:00006858                 mov     ecx, [ebp-10h]
.text$x:0000685B                 jmp     ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ ; std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)
.text$x:0000685B __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000685B
.text$x:00006860
.text$x:00006860 ; =============== S U B R O U T I N E =======================================
.text$x:00006860
.text$x:00006860
.text$x:00006860 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00006860                                         ; DATA XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+5o
.text$x:00006860
.text$x:00006860 arg_4           = dword ptr  8
.text$x:00006860
.text$x:00006860                 mov     edx, [esp+arg_4]
.text$x:00006864                 lea     eax, [edx+0Ch]
.text$x:00006867                 mov     ecx, [edx-8]
.text$x:0000686A                 xor     ecx, eax
.text$x:0000686C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006871                 mov     eax, offset __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.text$x:00006876                 jmp     ___CxxFrameHandler3
.text$x:00006876 __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00006876
.text$x:00006876 ; ---------------------------------------------------------------------------
.text$x:0000687B                 align 4
.text$x:0000687B _text$x         ends
.text$x:0000687B
.text$mn:0000687C ; ===========================================================================
.text$mn:0000687C
.text$mn:0000687C ; Segment type: Pure code
.text$mn:0000687C ; Segment permissions: Read/Execute
.text$mn:0000687C _text$mn        segment para public 'CODE' use32
.text$mn:0000687C                 assume cs:_text$mn
.text$mn:0000687C                 ;org 687Ch
.text$mn:0000687C ; COMDAT (pick any)
.text$mn:0000687C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000687C
.text$mn:0000687C ; =============== S U B R O U T I N E =======================================
.text$mn:0000687C
.text$mn:0000687C ; Attributes: bp-based frame
.text$mn:0000687C
.text$mn:0000687C ; public: __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::~_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>(void)
.text$mn:0000687C                 public ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:0000687C ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:0000687C                                         ; CODE XREF: __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5+3j
.text$mn:0000687C                                         ; __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7+3j ...
.text$mn:0000687C
.text$mn:0000687C var_10          = dword ptr -10h
.text$mn:0000687C var_C           = dword ptr -0Ch
.text$mn:0000687C var_4           = dword ptr -4
.text$mn:0000687C
.text$mn:0000687C                 push    ebp
.text$mn:0000687D                 mov     ebp, esp
.text$mn:0000687F                 push    0FFFFFFFFh
.text$mn:00006881                 push    offset __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:00006886                 mov     eax, large fs:0
.text$mn:0000688C                 push    eax
.text$mn:0000688D                 push    ecx
.text$mn:0000688E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006893                 xor     eax, ebp
.text$mn:00006895                 push    eax
.text$mn:00006896                 lea     eax, [ebp+var_C]
.text$mn:00006899                 mov     large fs:0, eax
.text$mn:0000689F                 mov     [ebp+var_10], ecx
.text$mn:000068A2                 mov     [ebp+var_4], 0
.text$mn:000068A9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000068B0                 mov     ecx, [ebp+var_10]
.text$mn:000068B3                 call    ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$mn:000068B8                 mov     ecx, [ebp+var_C]
.text$mn:000068BB                 mov     large fs:0, ecx
.text$mn:000068C2                 pop     ecx
.text$mn:000068C3                 mov     esp, ebp
.text$mn:000068C5                 pop     ebp
.text$mn:000068C6                 retn
.text$mn:000068C6 ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:000068C6
.text$mn:000068C6 ; ---------------------------------------------------------------------------
.text$mn:000068C7                 align 4
.text$mn:000068C7 _text$mn        ends
.text$mn:000068C7
.text$x:000068C8 ; ===========================================================================
.text$x:000068C8
.text$x:000068C8 ; Segment type: Pure code
.text$x:000068C8 ; Segment permissions: Read/Execute
.text$x:000068C8 _text$x         segment para public 'CODE' use32
.text$x:000068C8                 assume cs:_text$x
.text$x:000068C8                 ;org 68C8h
.text$x:000068C8 ; COMDAT (pick associative to section at 687C)
.text$x:000068C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000068C8
.text$x:000068C8 ; =============== S U B R O U T I N E =======================================
.text$x:000068C8
.text$x:000068C8
.text$x:000068C8 __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:000068C8                                         ; DATA XREF: .xdata$x:0000A534o
.text$x:000068C8                 mov     ecx, [ebp-10h]
.text$x:000068CB                 jmp     ??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ ; std::_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>::~_Iterator012<std::random_access_iterator_tag,wchar_t,int,wchar_t const *,wchar_t const &,std::_Iterator_base12>(void)
.text$x:000068CB __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:000068CB
.text$x:000068D0
.text$x:000068D0 ; =============== S U B R O U T I N E =======================================
.text$x:000068D0
.text$x:000068D0
.text$x:000068D0 __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:000068D0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)+5o
.text$x:000068D0
.text$x:000068D0 arg_4           = dword ptr  8
.text$x:000068D0
.text$x:000068D0                 mov     edx, [esp+arg_4]
.text$x:000068D4                 lea     eax, [edx+0Ch]
.text$x:000068D7                 mov     ecx, [edx-8]
.text$x:000068DA                 xor     ecx, eax
.text$x:000068DC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000068E1                 mov     eax, offset __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$x:000068E6                 jmp     ___CxxFrameHandler3
.text$x:000068E6 __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:000068E6
.text$x:000068E6 ; ---------------------------------------------------------------------------
.text$x:000068EB                 align 4
.text$x:000068EB _text$x         ends
.text$x:000068EB
.text$mn:000068EC ; ===========================================================================
.text$mn:000068EC
.text$mn:000068EC ; Segment type: Pure code
.text$mn:000068EC ; Segment permissions: Read/Execute
.text$mn:000068EC _text$mn        segment para public 'CODE' use32
.text$mn:000068EC                 assume cs:_text$mn
.text$mn:000068EC                 ;org 68ECh
.text$mn:000068EC ; COMDAT (pick any)
.text$mn:000068EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000068EC
.text$mn:000068EC ; =============== S U B R O U T I N E =======================================
.text$mn:000068EC
.text$mn:000068EC ; Attributes: bp-based frame
.text$mn:000068EC
.text$mn:000068EC ; public: __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::~_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>(void)
.text$mn:000068EC                 public ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:000068EC ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$mn:000068EC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+F5p
.text$mn:000068EC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+101p ...
.text$mn:000068EC
.text$mn:000068EC var_10          = dword ptr -10h
.text$mn:000068EC var_C           = dword ptr -0Ch
.text$mn:000068EC var_4           = dword ptr -4
.text$mn:000068EC
.text$mn:000068EC                 push    ebp
.text$mn:000068ED                 mov     ebp, esp
.text$mn:000068EF                 push    0FFFFFFFFh
.text$mn:000068F1                 push    offset __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$mn:000068F6                 mov     eax, large fs:0
.text$mn:000068FC                 push    eax
.text$mn:000068FD                 push    ecx
.text$mn:000068FE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006903                 xor     eax, ebp
.text$mn:00006905                 push    eax
.text$mn:00006906                 lea     eax, [ebp+var_C]
.text$mn:00006909                 mov     large fs:0, eax
.text$mn:0000690F                 mov     [ebp+var_10], ecx
.text$mn:00006912                 mov     [ebp+var_4], 0
.text$mn:00006919                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006920                 mov     ecx, [ebp+var_10]
.text$mn:00006923                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00006928                 mov     ecx, [ebp+var_C]
.text$mn:0000692B                 mov     large fs:0, ecx
.text$mn:00006932                 pop     ecx
.text$mn:00006933                 mov     esp, ebp
.text$mn:00006935                 pop     ebp
.text$mn:00006936                 retn
.text$mn:00006936 ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$mn:00006936
.text$mn:00006936 ; ---------------------------------------------------------------------------
.text$mn:00006937                 align 4
.text$mn:00006937 _text$mn        ends
.text$mn:00006937
.text$x:00006938 ; ===========================================================================
.text$x:00006938
.text$x:00006938 ; Segment type: Pure code
.text$x:00006938 ; Segment permissions: Read/Execute
.text$x:00006938 _text$x         segment para public 'CODE' use32
.text$x:00006938                 assume cs:_text$x
.text$x:00006938                 ;org 6938h
.text$x:00006938 ; COMDAT (pick associative to section at 68EC)
.text$x:00006938                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006938
.text$x:00006938 ; =============== S U B R O U T I N E =======================================
.text$x:00006938
.text$x:00006938
.text$x:00006938 __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 proc near
.text$x:00006938                                         ; DATA XREF: .xdata$x:0000A5E4o
.text$x:00006938                 mov     ecx, [ebp-10h]
.text$x:0000693B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000693B __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0 endp
.text$x:0000693B
.text$x:00006940
.text$x:00006940 ; =============== S U B R O U T I N E =======================================
.text$x:00006940
.text$x:00006940
.text$x:00006940 __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ proc near
.text$x:00006940                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)+5o
.text$x:00006940
.text$x:00006940 arg_4           = dword ptr  8
.text$x:00006940
.text$x:00006940                 mov     edx, [esp+arg_4]
.text$x:00006944                 lea     eax, [edx+0Ch]
.text$x:00006947                 mov     ecx, [edx-8]
.text$x:0000694A                 xor     ecx, eax
.text$x:0000694C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006951                 mov     eax, offset __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.text$x:00006956                 jmp     ___CxxFrameHandler3
.text$x:00006956 __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ endp
.text$x:00006956
.text$x:00006956 ; ---------------------------------------------------------------------------
.text$x:0000695B                 align 4
.text$x:0000695B _text$x         ends
.text$x:0000695B
.text$mn:0000695C ; ===========================================================================
.text$mn:0000695C
.text$mn:0000695C ; Segment type: Pure code
.text$mn:0000695C ; Segment permissions: Read/Execute
.text$mn:0000695C _text$mn        segment para public 'CODE' use32
.text$mn:0000695C                 assume cs:_text$mn
.text$mn:0000695C                 ;org 695Ch
.text$mn:0000695C ; COMDAT (pick any)
.text$mn:0000695C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000695C
.text$mn:0000695C ; =============== S U B R O U T I N E =======================================
.text$mn:0000695C
.text$mn:0000695C ; Attributes: bp-based frame
.text$mn:0000695C
.text$mn:0000695C ; public: __thiscall std::_String_val<struct std::_Simple_types<char>>::~_String_val<struct std::_Simple_types<char>>(void)
.text$mn:0000695C                 public ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:0000695C ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$mn:0000695C                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0+3j
.text$mn:0000695C                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+3Fp ...
.text$mn:0000695C
.text$mn:0000695C var_10          = dword ptr -10h
.text$mn:0000695C var_C           = dword ptr -0Ch
.text$mn:0000695C var_4           = dword ptr -4
.text$mn:0000695C
.text$mn:0000695C                 push    ebp
.text$mn:0000695D                 mov     ebp, esp
.text$mn:0000695F                 push    0FFFFFFFFh
.text$mn:00006961                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$mn:00006966                 mov     eax, large fs:0
.text$mn:0000696C                 push    eax
.text$mn:0000696D                 push    ecx
.text$mn:0000696E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006973                 xor     eax, ebp
.text$mn:00006975                 push    eax
.text$mn:00006976                 lea     eax, [ebp+var_C]
.text$mn:00006979                 mov     large fs:0, eax
.text$mn:0000697F                 mov     [ebp+var_10], ecx
.text$mn:00006982                 mov     [ebp+var_4], 0
.text$mn:00006989                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006990                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006993                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00006998                 mov     ecx, [ebp+var_C]
.text$mn:0000699B                 mov     large fs:0, ecx
.text$mn:000069A2                 pop     ecx
.text$mn:000069A3                 mov     esp, ebp
.text$mn:000069A5                 pop     ebp
.text$mn:000069A6                 retn
.text$mn:000069A6 ??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$mn:000069A6
.text$mn:000069A6 ; ---------------------------------------------------------------------------
.text$mn:000069A7                 align 4
.text$mn:000069A7 _text$mn        ends
.text$mn:000069A7
.text$x:000069A8 ; ===========================================================================
.text$x:000069A8
.text$x:000069A8 ; Segment type: Pure code
.text$x:000069A8 ; Segment permissions: Read/Execute
.text$x:000069A8 _text$x         segment para public 'CODE' use32
.text$x:000069A8                 assume cs:_text$x
.text$x:000069A8                 ;org 69A8h
.text$x:000069A8 ; COMDAT (pick associative to section at 695C)
.text$x:000069A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000069A8
.text$x:000069A8 ; =============== S U B R O U T I N E =======================================
.text$x:000069A8
.text$x:000069A8
.text$x:000069A8 __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 proc near
.text$x:000069A8                                         ; DATA XREF: .xdata$x:00009C7Co
.text$x:000069A8                 mov     ecx, [ebp-10h]  ; this
.text$x:000069AB                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:000069AB __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0 endp
.text$x:000069AB
.text$x:000069B0
.text$x:000069B0 ; =============== S U B R O U T I N E =======================================
.text$x:000069B0
.text$x:000069B0
.text$x:000069B0 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ proc near
.text$x:000069B0                                         ; DATA XREF: std::_String_val<std::_Simple_types<char>>::~_String_val<std::_Simple_types<char>>(void)+5o
.text$x:000069B0
.text$x:000069B0 arg_4           = dword ptr  8
.text$x:000069B0
.text$x:000069B0                 mov     edx, [esp+arg_4]
.text$x:000069B4                 lea     eax, [edx+0Ch]
.text$x:000069B7                 mov     ecx, [edx-8]
.text$x:000069BA                 xor     ecx, eax
.text$x:000069BC                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000069C1                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.text$x:000069C6                 jmp     ___CxxFrameHandler3
.text$x:000069C6 __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ endp
.text$x:000069C6
.text$x:000069C6 ; ---------------------------------------------------------------------------
.text$x:000069CB                 align 4
.text$x:000069CB _text$x         ends
.text$x:000069CB
.text$mn:000069CC ; ===========================================================================
.text$mn:000069CC
.text$mn:000069CC ; Segment type: Pure code
.text$mn:000069CC ; Segment permissions: Read/Execute
.text$mn:000069CC _text$mn        segment para public 'CODE' use32
.text$mn:000069CC                 assume cs:_text$mn
.text$mn:000069CC                 ;org 69CCh
.text$mn:000069CC ; COMDAT (pick any)
.text$mn:000069CC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000069CC
.text$mn:000069CC ; =============== S U B R O U T I N E =======================================
.text$mn:000069CC
.text$mn:000069CC ; Attributes: bp-based frame
.text$mn:000069CC
.text$mn:000069CC ; public: __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::~_String_val<struct std::_Simple_types<wchar_t>>(void)
.text$mn:000069CC                 public ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000069CC ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$mn:000069CC                                         ; CODE XREF: __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0+3j
.text$mn:000069CC                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+3Fp ...
.text$mn:000069CC
.text$mn:000069CC var_10          = dword ptr -10h
.text$mn:000069CC var_C           = dword ptr -0Ch
.text$mn:000069CC var_4           = dword ptr -4
.text$mn:000069CC
.text$mn:000069CC                 push    ebp
.text$mn:000069CD                 mov     ebp, esp
.text$mn:000069CF                 push    0FFFFFFFFh
.text$mn:000069D1                 push    offset __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$mn:000069D6                 mov     eax, large fs:0
.text$mn:000069DC                 push    eax
.text$mn:000069DD                 push    ecx
.text$mn:000069DE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000069E3                 xor     eax, ebp
.text$mn:000069E5                 push    eax
.text$mn:000069E6                 lea     eax, [ebp+var_C]
.text$mn:000069E9                 mov     large fs:0, eax
.text$mn:000069EF                 mov     [ebp+var_10], ecx
.text$mn:000069F2                 mov     [ebp+var_4], 0
.text$mn:000069F9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006A00                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006A03                 call    ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$mn:00006A08                 mov     ecx, [ebp+var_C]
.text$mn:00006A0B                 mov     large fs:0, ecx
.text$mn:00006A12                 pop     ecx
.text$mn:00006A13                 mov     esp, ebp
.text$mn:00006A15                 pop     ebp
.text$mn:00006A16                 retn
.text$mn:00006A16 ??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$mn:00006A16
.text$mn:00006A16 ; ---------------------------------------------------------------------------
.text$mn:00006A17                 align 4
.text$mn:00006A17 _text$mn        ends
.text$mn:00006A17
.text$x:00006A18 ; ===========================================================================
.text$x:00006A18
.text$x:00006A18 ; Segment type: Pure code
.text$x:00006A18 ; Segment permissions: Read/Execute
.text$x:00006A18 _text$x         segment para public 'CODE' use32
.text$x:00006A18                 assume cs:_text$x
.text$x:00006A18                 ;org 6A18h
.text$x:00006A18 ; COMDAT (pick associative to section at 69CC)
.text$x:00006A18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006A18
.text$x:00006A18 ; =============== S U B R O U T I N E =======================================
.text$x:00006A18
.text$x:00006A18
.text$x:00006A18 __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 proc near
.text$x:00006A18                                         ; DATA XREF: .xdata$x:00009F9Co
.text$x:00006A18                 mov     ecx, [ebp-10h]  ; this
.text$x:00006A1B                 jmp     ??1_Container_base12@std@@QAE@XZ ; std::_Container_base12::~_Container_base12(void)
.text$x:00006A1B __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0 endp
.text$x:00006A1B
.text$x:00006A20
.text$x:00006A20 ; =============== S U B R O U T I N E =======================================
.text$x:00006A20
.text$x:00006A20
.text$x:00006A20 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ proc near
.text$x:00006A20                                         ; DATA XREF: std::_String_val<std::_Simple_types<wchar_t>>::~_String_val<std::_Simple_types<wchar_t>>(void)+5o
.text$x:00006A20
.text$x:00006A20 arg_4           = dword ptr  8
.text$x:00006A20
.text$x:00006A20                 mov     edx, [esp+arg_4]
.text$x:00006A24                 lea     eax, [edx+0Ch]
.text$x:00006A27                 mov     ecx, [edx-8]
.text$x:00006A2A                 xor     ecx, eax
.text$x:00006A2C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006A31                 mov     eax, offset __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.text$x:00006A36                 jmp     ___CxxFrameHandler3
.text$x:00006A36 __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ endp
.text$x:00006A36
.text$x:00006A36 ; ---------------------------------------------------------------------------
.text$x:00006A3B                 align 4
.text$x:00006A3B _text$x         ends
.text$x:00006A3B
.text$mn:00006A3C ; ===========================================================================
.text$mn:00006A3C
.text$mn:00006A3C ; Segment type: Pure code
.text$mn:00006A3C ; Segment permissions: Read/Execute
.text$mn:00006A3C _text$mn        segment para public 'CODE' use32
.text$mn:00006A3C                 assume cs:_text$mn
.text$mn:00006A3C                 ;org 6A3Ch
.text$mn:00006A3C ; COMDAT (pick any)
.text$mn:00006A3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006A3C
.text$mn:00006A3C ; =============== S U B R O U T I N E =======================================
.text$mn:00006A3C
.text$mn:00006A3C ; Attributes: bp-based frame
.text$mn:00006A3C
.text$mn:00006A3C ; public: __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::~basic_string<char, struct std::char_traits<char>, class std::allocator<char>>(void)
.text$mn:00006A3C                 public ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:00006A3C ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$mn:00006A3C                                         ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j
.text$mn:00006A3C                                         ; __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+13j ...
.text$mn:00006A3C
.text$mn:00006A3C var_10          = dword ptr -10h
.text$mn:00006A3C var_C           = dword ptr -0Ch
.text$mn:00006A3C var_4           = dword ptr -4
.text$mn:00006A3C
.text$mn:00006A3C                 push    ebp
.text$mn:00006A3D                 mov     ebp, esp
.text$mn:00006A3F                 push    0FFFFFFFFh
.text$mn:00006A41                 push    offset __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$mn:00006A46                 mov     eax, large fs:0
.text$mn:00006A4C                 push    eax
.text$mn:00006A4D                 push    ecx
.text$mn:00006A4E                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006A53                 xor     eax, ebp
.text$mn:00006A55                 push    eax
.text$mn:00006A56                 lea     eax, [ebp+var_C]
.text$mn:00006A59                 mov     large fs:0, eax
.text$mn:00006A5F                 mov     [ebp+var_10], ecx
.text$mn:00006A62                 mov     [ebp+var_4], 0
.text$mn:00006A69                 push    0               ; Size
.text$mn:00006A6B                 push    1               ; char
.text$mn:00006A6D                 mov     ecx, [ebp+var_10]
.text$mn:00006A70                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00006A75                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006A7C                 mov     ecx, [ebp+var_10]
.text$mn:00006A7F                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$mn:00006A84                 mov     ecx, [ebp+var_C]
.text$mn:00006A87                 mov     large fs:0, ecx
.text$mn:00006A8E                 pop     ecx
.text$mn:00006A8F                 mov     esp, ebp
.text$mn:00006A91                 pop     ebp
.text$mn:00006A92                 retn
.text$mn:00006A92 ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$mn:00006A92
.text$mn:00006A92 ; ---------------------------------------------------------------------------
.text$mn:00006A93                 align 4
.text$mn:00006A93 _text$mn        ends
.text$mn:00006A93
.text$x:00006A94 ; ===========================================================================
.text$x:00006A94
.text$x:00006A94 ; Segment type: Pure code
.text$x:00006A94 ; Segment permissions: Read/Execute
.text$x:00006A94 _text$x         segment para public 'CODE' use32
.text$x:00006A94                 assume cs:_text$x
.text$x:00006A94                 ;org 6A94h
.text$x:00006A94 ; COMDAT (pick associative to section at 6A3C)
.text$x:00006A94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006A94
.text$x:00006A94 ; =============== S U B R O U T I N E =======================================
.text$x:00006A94
.text$x:00006A94
.text$x:00006A94 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 proc near
.text$x:00006A94                                         ; DATA XREF: .xdata$x:00009D2Co
.text$x:00006A94                 mov     ecx, [ebp-10h]
.text$x:00006A97                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)
.text$x:00006A97 __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0 endp
.text$x:00006A97
.text$x:00006A9C
.text$x:00006A9C ; =============== S U B R O U T I N E =======================================
.text$x:00006A9C
.text$x:00006A9C
.text$x:00006A9C __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ proc near
.text$x:00006A9C                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+5o
.text$x:00006A9C
.text$x:00006A9C arg_4           = dword ptr  8
.text$x:00006A9C
.text$x:00006A9C                 mov     edx, [esp+arg_4]
.text$x:00006AA0                 lea     eax, [edx+0Ch]
.text$x:00006AA3                 mov     ecx, [edx-8]
.text$x:00006AA6                 xor     ecx, eax
.text$x:00006AA8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006AAD                 mov     eax, offset __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.text$x:00006AB2                 jmp     ___CxxFrameHandler3
.text$x:00006AB2 __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ endp
.text$x:00006AB2
.text$x:00006AB2 ; ---------------------------------------------------------------------------
.text$x:00006AB7                 align 4
.text$x:00006AB7 _text$x         ends
.text$x:00006AB7
.text$mn:00006AB8 ; ===========================================================================
.text$mn:00006AB8
.text$mn:00006AB8 ; Segment type: Pure code
.text$mn:00006AB8 ; Segment permissions: Read/Execute
.text$mn:00006AB8 _text$mn        segment para public 'CODE' use32
.text$mn:00006AB8                 assume cs:_text$mn
.text$mn:00006AB8                 ;org 6AB8h
.text$mn:00006AB8 ; COMDAT (pick any)
.text$mn:00006AB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006AB8
.text$mn:00006AB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006AB8
.text$mn:00006AB8 ; Attributes: bp-based frame
.text$mn:00006AB8
.text$mn:00006AB8 ; public: __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::~basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>(void)
.text$mn:00006AB8                 public ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00006AB8 ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$mn:00006AB8                                         ; CODE XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+1ABp
.text$mn:00006AB8                                         ; NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+248p ...
.text$mn:00006AB8
.text$mn:00006AB8 var_10          = dword ptr -10h
.text$mn:00006AB8 var_C           = dword ptr -0Ch
.text$mn:00006AB8 var_4           = dword ptr -4
.text$mn:00006AB8
.text$mn:00006AB8                 push    ebp
.text$mn:00006AB9                 mov     ebp, esp
.text$mn:00006ABB                 push    0FFFFFFFFh
.text$mn:00006ABD                 push    offset __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$mn:00006AC2                 mov     eax, large fs:0
.text$mn:00006AC8                 push    eax
.text$mn:00006AC9                 push    ecx
.text$mn:00006ACA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006ACF                 xor     eax, ebp
.text$mn:00006AD1                 push    eax
.text$mn:00006AD2                 lea     eax, [ebp+var_C]
.text$mn:00006AD5                 mov     large fs:0, eax
.text$mn:00006ADB                 mov     [ebp+var_10], ecx
.text$mn:00006ADE                 mov     [ebp+var_4], 0
.text$mn:00006AE5                 push    0
.text$mn:00006AE7                 push    1
.text$mn:00006AE9                 mov     ecx, [ebp+var_10]
.text$mn:00006AEC                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00006AF1                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006AF8                 mov     ecx, [ebp+var_10]
.text$mn:00006AFB                 call    ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$mn:00006B00                 mov     ecx, [ebp+var_C]
.text$mn:00006B03                 mov     large fs:0, ecx
.text$mn:00006B0A                 pop     ecx
.text$mn:00006B0B                 mov     esp, ebp
.text$mn:00006B0D                 pop     ebp
.text$mn:00006B0E                 retn
.text$mn:00006B0E ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$mn:00006B0E
.text$mn:00006B0E ; ---------------------------------------------------------------------------
.text$mn:00006B0F                 align 10h
.text$mn:00006B0F _text$mn        ends
.text$mn:00006B0F
.text$x:00006B10 ; ===========================================================================
.text$x:00006B10
.text$x:00006B10 ; Segment type: Pure code
.text$x:00006B10 ; Segment permissions: Read/Execute
.text$x:00006B10 _text$x         segment para public 'CODE' use32
.text$x:00006B10                 assume cs:_text$x
.text$x:00006B10                 ;org 6B10h
.text$x:00006B10 ; COMDAT (pick associative to section at 6AB8)
.text$x:00006B10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006B10
.text$x:00006B10 ; =============== S U B R O U T I N E =======================================
.text$x:00006B10
.text$x:00006B10
.text$x:00006B10 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 proc near
.text$x:00006B10                                         ; DATA XREF: .xdata$x:0000A0D8o
.text$x:00006B10                 mov     ecx, [ebp-10h]
.text$x:00006B13                 jmp     ??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)
.text$x:00006B13 __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0 endp
.text$x:00006B13
.text$x:00006B18
.text$x:00006B18 ; =============== S U B R O U T I N E =======================================
.text$x:00006B18
.text$x:00006B18
.text$x:00006B18 __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ proc near
.text$x:00006B18                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)+5o
.text$x:00006B18
.text$x:00006B18 arg_4           = dword ptr  8
.text$x:00006B18
.text$x:00006B18                 mov     edx, [esp+arg_4]
.text$x:00006B1C                 lea     eax, [edx+0Ch]
.text$x:00006B1F                 mov     ecx, [edx-8]
.text$x:00006B22                 xor     ecx, eax
.text$x:00006B24                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006B29                 mov     eax, offset __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.text$x:00006B2E                 jmp     ___CxxFrameHandler3
.text$x:00006B2E __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ endp
.text$x:00006B2E
.text$x:00006B2E ; ---------------------------------------------------------------------------
.text$x:00006B33                 align 4
.text$x:00006B33 _text$x         ends
.text$x:00006B33
.text$mn:00006B34 ; ===========================================================================
.text$mn:00006B34
.text$mn:00006B34 ; Segment type: Pure code
.text$mn:00006B34 ; Segment permissions: Read/Execute
.text$mn:00006B34 _text$mn        segment para public 'CODE' use32
.text$mn:00006B34                 assume cs:_text$mn
.text$mn:00006B34                 ;org 6B34h
.text$mn:00006B34 ; COMDAT (pick any)
.text$mn:00006B34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B34
.text$mn:00006B34 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B34
.text$mn:00006B34 ; Attributes: bp-based frame
.text$mn:00006B34
.text$mn:00006B34 ; _DWORD __thiscall std::_Container_base12::~_Container_base12(std::_Container_base12 *__hidden this)
.text$mn:00006B34                 public ??1_Container_base12@std@@QAE@XZ
.text$mn:00006B34 ??1_Container_base12@std@@QAE@XZ proc near
.text$mn:00006B34                                         ; CODE XREF: __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0+3j
.text$mn:00006B34                                         ; __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0+3j ...
.text$mn:00006B34
.text$mn:00006B34 var_4           = dword ptr -4
.text$mn:00006B34
.text$mn:00006B34                 push    ebp
.text$mn:00006B35                 mov     ebp, esp
.text$mn:00006B37                 push    ecx
.text$mn:00006B38                 mov     [ebp+var_4], ecx
.text$mn:00006B3B                 mov     ecx, [ebp+var_4] ; this
.text$mn:00006B3E                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00006B43                 mov     esp, ebp
.text$mn:00006B45                 pop     ebp
.text$mn:00006B46                 retn
.text$mn:00006B46 ??1_Container_base12@std@@QAE@XZ endp
.text$mn:00006B46
.text$mn:00006B46 ; ---------------------------------------------------------------------------
.text$mn:00006B47                 align 4
.text$mn:00006B47 _text$mn        ends
.text$mn:00006B47
.text$mn:00006B48 ; ===========================================================================
.text$mn:00006B48
.text$mn:00006B48 ; Segment type: Pure code
.text$mn:00006B48 ; Segment permissions: Read/Execute
.text$mn:00006B48 _text$mn        segment para public 'CODE' use32
.text$mn:00006B48                 assume cs:_text$mn
.text$mn:00006B48                 ;org 6B48h
.text$mn:00006B48 ; COMDAT (pick any)
.text$mn:00006B48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006B48
.text$mn:00006B48 ; =============== S U B R O U T I N E =======================================
.text$mn:00006B48
.text$mn:00006B48 ; Attributes: bp-based frame
.text$mn:00006B48
.text$mn:00006B48 ; _DWORD __thiscall std::_Generic_error_category::~_Generic_error_category(std::_Generic_error_category *__hidden this)
.text$mn:00006B48                 public ??1_Generic_error_category@std@@UAE@XZ
.text$mn:00006B48 ??1_Generic_error_category@std@@UAE@XZ proc near
.text$mn:00006B48                                         ; CODE XREF: __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0+3j
.text$mn:00006B48                                         ; __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0+3j ...
.text$mn:00006B48
.text$mn:00006B48 var_10          = dword ptr -10h
.text$mn:00006B48 var_C           = dword ptr -0Ch
.text$mn:00006B48 var_4           = dword ptr -4
.text$mn:00006B48
.text$mn:00006B48                 push    ebp
.text$mn:00006B49                 mov     ebp, esp
.text$mn:00006B4B                 push    0FFFFFFFFh
.text$mn:00006B4D                 push    offset __ehhandler$??1_Generic_error_category@std@@UAE@XZ
.text$mn:00006B52                 mov     eax, large fs:0
.text$mn:00006B58                 push    eax
.text$mn:00006B59                 push    ecx
.text$mn:00006B5A                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006B5F                 xor     eax, ebp
.text$mn:00006B61                 push    eax
.text$mn:00006B62                 lea     eax, [ebp+var_C]
.text$mn:00006B65                 mov     large fs:0, eax
.text$mn:00006B6B                 mov     [ebp+var_10], ecx
.text$mn:00006B6E                 mov     [ebp+var_4], 0
.text$mn:00006B75                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006B7C                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006B7F                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:00006B84                 mov     ecx, [ebp+var_C]
.text$mn:00006B87                 mov     large fs:0, ecx
.text$mn:00006B8E                 pop     ecx
.text$mn:00006B8F                 mov     esp, ebp
.text$mn:00006B91                 pop     ebp
.text$mn:00006B92                 retn
.text$mn:00006B92 ??1_Generic_error_category@std@@UAE@XZ endp
.text$mn:00006B92
.text$mn:00006B92 ; ---------------------------------------------------------------------------
.text$mn:00006B93                 align 4
.text$mn:00006B93 _text$mn        ends
.text$mn:00006B93
.text$x:00006B94 ; ===========================================================================
.text$x:00006B94
.text$x:00006B94 ; Segment type: Pure code
.text$x:00006B94 ; Segment permissions: Read/Execute
.text$x:00006B94 _text$x         segment para public 'CODE' use32
.text$x:00006B94                 assume cs:_text$x
.text$x:00006B94                 ;org 6B94h
.text$x:00006B94 ; COMDAT (pick associative to section at 6B48)
.text$x:00006B94                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006B94
.text$x:00006B94 ; =============== S U B R O U T I N E =======================================
.text$x:00006B94
.text$x:00006B94
.text$x:00006B94 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 proc near
.text$x:00006B94                                         ; DATA XREF: .xdata$x:00009E3Co
.text$x:00006B94                 mov     ecx, [ebp-10h]  ; this
.text$x:00006B97                 jmp     ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$x:00006B97 __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0 endp
.text$x:00006B97
.text$x:00006B9C
.text$x:00006B9C ; =============== S U B R O U T I N E =======================================
.text$x:00006B9C
.text$x:00006B9C
.text$x:00006B9C __ehhandler$??1_Generic_error_category@std@@UAE@XZ proc near
.text$x:00006B9C                                         ; DATA XREF: std::_Generic_error_category::~_Generic_error_category(void)+5o
.text$x:00006B9C
.text$x:00006B9C arg_4           = dword ptr  8
.text$x:00006B9C
.text$x:00006B9C                 mov     edx, [esp+arg_4]
.text$x:00006BA0                 lea     eax, [edx+0Ch]
.text$x:00006BA3                 mov     ecx, [edx-8]
.text$x:00006BA6                 xor     ecx, eax
.text$x:00006BA8                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006BAD                 mov     eax, offset __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ
.text$x:00006BB2                 jmp     ___CxxFrameHandler3
.text$x:00006BB2 __ehhandler$??1_Generic_error_category@std@@UAE@XZ endp
.text$x:00006BB2
.text$x:00006BB2 ; ---------------------------------------------------------------------------
.text$x:00006BB7                 align 4
.text$x:00006BB7 _text$x         ends
.text$x:00006BB7
.text$mn:00006BB8 ; ===========================================================================
.text$mn:00006BB8
.text$mn:00006BB8 ; Segment type: Pure code
.text$mn:00006BB8 ; Segment permissions: Read/Execute
.text$mn:00006BB8 _text$mn        segment para public 'CODE' use32
.text$mn:00006BB8                 assume cs:_text$mn
.text$mn:00006BB8                 ;org 6BB8h
.text$mn:00006BB8 ; COMDAT (pick any)
.text$mn:00006BB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006BB8
.text$mn:00006BB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006BB8
.text$mn:00006BB8 ; Attributes: bp-based frame
.text$mn:00006BB8
.text$mn:00006BB8 ; _DWORD __thiscall std::_Iostream_error_category::~_Iostream_error_category(std::_Iostream_error_category *__hidden this)
.text$mn:00006BB8                 public ??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00006BB8 ??1_Iostream_error_category@std@@UAE@XZ proc near
.text$mn:00006BB8                                         ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00006BB8                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+8p
.text$mn:00006BB8
.text$mn:00006BB8 var_10          = dword ptr -10h
.text$mn:00006BB8 var_C           = dword ptr -0Ch
.text$mn:00006BB8 var_4           = dword ptr -4
.text$mn:00006BB8
.text$mn:00006BB8                 push    ebp
.text$mn:00006BB9                 mov     ebp, esp
.text$mn:00006BBB                 push    0FFFFFFFFh
.text$mn:00006BBD                 push    offset __ehhandler$??1_Iostream_error_category@std@@UAE@XZ
.text$mn:00006BC2                 mov     eax, large fs:0
.text$mn:00006BC8                 push    eax
.text$mn:00006BC9                 push    ecx
.text$mn:00006BCA                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006BCF                 xor     eax, ebp
.text$mn:00006BD1                 push    eax
.text$mn:00006BD2                 lea     eax, [ebp+var_C]
.text$mn:00006BD5                 mov     large fs:0, eax
.text$mn:00006BDB                 mov     [ebp+var_10], ecx
.text$mn:00006BDE                 mov     [ebp+var_4], 0
.text$mn:00006BE5                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006BEC                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006BEF                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00006BF4                 mov     ecx, [ebp+var_C]
.text$mn:00006BF7                 mov     large fs:0, ecx
.text$mn:00006BFE                 pop     ecx
.text$mn:00006BFF                 mov     esp, ebp
.text$mn:00006C01                 pop     ebp
.text$mn:00006C02                 retn
.text$mn:00006C02 ??1_Iostream_error_category@std@@UAE@XZ endp
.text$mn:00006C02
.text$mn:00006C02 ; ---------------------------------------------------------------------------
.text$mn:00006C03                 align 4
.text$mn:00006C03 _text$mn        ends
.text$mn:00006C03
.text$x:00006C04 ; ===========================================================================
.text$x:00006C04
.text$x:00006C04 ; Segment type: Pure code
.text$x:00006C04 ; Segment permissions: Read/Execute
.text$x:00006C04 _text$x         segment para public 'CODE' use32
.text$x:00006C04                 assume cs:_text$x
.text$x:00006C04                 ;org 6C04h
.text$x:00006C04 ; COMDAT (pick associative to section at 6BB8)
.text$x:00006C04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006C04
.text$x:00006C04 ; =============== S U B R O U T I N E =======================================
.text$x:00006C04
.text$x:00006C04
.text$x:00006C04 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 proc near
.text$x:00006C04                                         ; DATA XREF: .xdata$x:00009EC0o
.text$x:00006C04                 mov     ecx, [ebp-10h]  ; this
.text$x:00006C07                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00006C07 __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0 endp
.text$x:00006C07
.text$x:00006C0C
.text$x:00006C0C ; =============== S U B R O U T I N E =======================================
.text$x:00006C0C
.text$x:00006C0C
.text$x:00006C0C __ehhandler$??1_Iostream_error_category@std@@UAE@XZ proc near
.text$x:00006C0C                                         ; DATA XREF: std::_Iostream_error_category::~_Iostream_error_category(void)+5o
.text$x:00006C0C
.text$x:00006C0C arg_4           = dword ptr  8
.text$x:00006C0C
.text$x:00006C0C                 mov     edx, [esp+arg_4]
.text$x:00006C10                 lea     eax, [edx+0Ch]
.text$x:00006C13                 mov     ecx, [edx-8]
.text$x:00006C16                 xor     ecx, eax
.text$x:00006C18                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006C1D                 mov     eax, offset __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ
.text$x:00006C22                 jmp     ___CxxFrameHandler3
.text$x:00006C22 __ehhandler$??1_Iostream_error_category@std@@UAE@XZ endp
.text$x:00006C22
.text$x:00006C22 ; ---------------------------------------------------------------------------
.text$x:00006C27                 align 4
.text$x:00006C27 _text$x         ends
.text$x:00006C27
.text$mn:00006C28 ; ===========================================================================
.text$mn:00006C28
.text$mn:00006C28 ; Segment type: Pure code
.text$mn:00006C28 ; Segment permissions: Read/Execute
.text$mn:00006C28 _text$mn        segment para public 'CODE' use32
.text$mn:00006C28                 assume cs:_text$mn
.text$mn:00006C28                 ;org 6C28h
.text$mn:00006C28 ; COMDAT (pick any)
.text$mn:00006C28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006C28
.text$mn:00006C28 ; =============== S U B R O U T I N E =======================================
.text$mn:00006C28
.text$mn:00006C28 ; Attributes: bp-based frame
.text$mn:00006C28
.text$mn:00006C28 ; _DWORD __thiscall std::_Iterator_base12::~_Iterator_base12(std::_Iterator_base12 *__hidden this)
.text$mn:00006C28                 public ??1_Iterator_base12@std@@QAE@XZ
.text$mn:00006C28 ??1_Iterator_base12@std@@QAE@XZ proc near
.text$mn:00006C28                                         ; CODE XREF: __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0+3j
.text$mn:00006C28                                         ; __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0+3j ...
.text$mn:00006C28
.text$mn:00006C28 var_14          = byte ptr -14h
.text$mn:00006C28 var_10          = dword ptr -10h
.text$mn:00006C28 var_C           = dword ptr -0Ch
.text$mn:00006C28 var_4           = dword ptr -4
.text$mn:00006C28
.text$mn:00006C28                 push    ebp
.text$mn:00006C29                 mov     ebp, esp
.text$mn:00006C2B                 push    0FFFFFFFFh
.text$mn:00006C2D                 push    offset __ehhandler$??1_Iterator_base12@std@@QAE@XZ
.text$mn:00006C32                 mov     eax, large fs:0
.text$mn:00006C38                 push    eax
.text$mn:00006C39                 sub     esp, 8
.text$mn:00006C3C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006C41                 xor     eax, ebp
.text$mn:00006C43                 push    eax
.text$mn:00006C44                 lea     eax, [ebp+var_C]
.text$mn:00006C47                 mov     large fs:0, eax
.text$mn:00006C4D                 mov     [ebp+var_10], ecx
.text$mn:00006C50                 push    3               ; int
.text$mn:00006C52                 lea     ecx, [ebp+var_14] ; this
.text$mn:00006C55                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00006C5A                 mov     [ebp+var_4], 0
.text$mn:00006C61                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006C64                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00006C69                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006C70                 lea     ecx, [ebp+var_14] ; this
.text$mn:00006C73                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00006C78                 mov     ecx, [ebp+var_C]
.text$mn:00006C7B                 mov     large fs:0, ecx
.text$mn:00006C82                 pop     ecx
.text$mn:00006C83                 mov     esp, ebp
.text$mn:00006C85                 pop     ebp
.text$mn:00006C86                 retn
.text$mn:00006C86 ??1_Iterator_base12@std@@QAE@XZ endp
.text$mn:00006C86
.text$mn:00006C86 ; ---------------------------------------------------------------------------
.text$mn:00006C87                 align 4
.text$mn:00006C87 _text$mn        ends
.text$mn:00006C87
.text$x:00006C88 ; ===========================================================================
.text$x:00006C88
.text$x:00006C88 ; Segment type: Pure code
.text$x:00006C88 ; Segment permissions: Read/Execute
.text$x:00006C88 _text$x         segment para public 'CODE' use32
.text$x:00006C88                 assume cs:_text$x
.text$x:00006C88                 ;org 6C88h
.text$x:00006C88 ; COMDAT (pick associative to section at 6C28)
.text$x:00006C88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006C88
.text$x:00006C88 ; =============== S U B R O U T I N E =======================================
.text$x:00006C88
.text$x:00006C88
.text$x:00006C88 __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 proc near
.text$x:00006C88                                         ; DATA XREF: .xdata$x:00009BF0o
.text$x:00006C88                 lea     ecx, [ebp-14h]  ; this
.text$x:00006C8B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00006C8B __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0 endp
.text$x:00006C8B
.text$x:00006C90
.text$x:00006C90 ; =============== S U B R O U T I N E =======================================
.text$x:00006C90
.text$x:00006C90
.text$x:00006C90 __ehhandler$??1_Iterator_base12@std@@QAE@XZ proc near
.text$x:00006C90                                         ; DATA XREF: std::_Iterator_base12::~_Iterator_base12(void)+5o
.text$x:00006C90
.text$x:00006C90 arg_4           = dword ptr  8
.text$x:00006C90
.text$x:00006C90                 mov     edx, [esp+arg_4]
.text$x:00006C94                 lea     eax, [edx+0Ch]
.text$x:00006C97                 mov     ecx, [edx-0Ch]
.text$x:00006C9A                 xor     ecx, eax
.text$x:00006C9C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006CA1                 mov     eax, offset __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ
.text$x:00006CA6                 jmp     ___CxxFrameHandler3
.text$x:00006CA6 __ehhandler$??1_Iterator_base12@std@@QAE@XZ endp
.text$x:00006CA6
.text$x:00006CA6 ; ---------------------------------------------------------------------------
.text$x:00006CAB                 align 4
.text$x:00006CAB _text$x         ends
.text$x:00006CAB
.text$mn:00006CAC ; ===========================================================================
.text$mn:00006CAC
.text$mn:00006CAC ; Segment type: Pure code
.text$mn:00006CAC ; Segment permissions: Read/Execute
.text$mn:00006CAC _text$mn        segment para public 'CODE' use32
.text$mn:00006CAC                 assume cs:_text$mn
.text$mn:00006CAC                 ;org 6CACh
.text$mn:00006CAC ; COMDAT (pick any)
.text$mn:00006CAC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006CAC
.text$mn:00006CAC ; =============== S U B R O U T I N E =======================================
.text$mn:00006CAC
.text$mn:00006CAC ; Attributes: bp-based frame
.text$mn:00006CAC
.text$mn:00006CAC ; _DWORD __thiscall std::_System_error_category::~_System_error_category(std::_System_error_category *__hidden this)
.text$mn:00006CAC                 public ??1_System_error_category@std@@UAE@XZ
.text$mn:00006CAC ??1_System_error_category@std@@UAE@XZ proc near
.text$mn:00006CAC                                         ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+Ap
.text$mn:00006CAC                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+8p
.text$mn:00006CAC
.text$mn:00006CAC var_10          = dword ptr -10h
.text$mn:00006CAC var_C           = dword ptr -0Ch
.text$mn:00006CAC var_4           = dword ptr -4
.text$mn:00006CAC
.text$mn:00006CAC                 push    ebp
.text$mn:00006CAD                 mov     ebp, esp
.text$mn:00006CAF                 push    0FFFFFFFFh
.text$mn:00006CB1                 push    offset __ehhandler$??1_System_error_category@std@@UAE@XZ
.text$mn:00006CB6                 mov     eax, large fs:0
.text$mn:00006CBC                 push    eax
.text$mn:00006CBD                 push    ecx
.text$mn:00006CBE                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006CC3                 xor     eax, ebp
.text$mn:00006CC5                 push    eax
.text$mn:00006CC6                 lea     eax, [ebp+var_C]
.text$mn:00006CC9                 mov     large fs:0, eax
.text$mn:00006CCF                 mov     [ebp+var_10], ecx
.text$mn:00006CD2                 mov     [ebp+var_4], 0
.text$mn:00006CD9                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006CE0                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006CE3                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:00006CE8                 mov     ecx, [ebp+var_C]
.text$mn:00006CEB                 mov     large fs:0, ecx
.text$mn:00006CF2                 pop     ecx
.text$mn:00006CF3                 mov     esp, ebp
.text$mn:00006CF5                 pop     ebp
.text$mn:00006CF6                 retn
.text$mn:00006CF6 ??1_System_error_category@std@@UAE@XZ endp
.text$mn:00006CF6
.text$mn:00006CF6 ; ---------------------------------------------------------------------------
.text$mn:00006CF7                 align 4
.text$mn:00006CF7 _text$mn        ends
.text$mn:00006CF7
.text$x:00006CF8 ; ===========================================================================
.text$x:00006CF8
.text$x:00006CF8 ; Segment type: Pure code
.text$x:00006CF8 ; Segment permissions: Read/Execute
.text$x:00006CF8 _text$x         segment para public 'CODE' use32
.text$x:00006CF8                 assume cs:_text$x
.text$x:00006CF8                 ;org 6CF8h
.text$x:00006CF8 ; COMDAT (pick associative to section at 6CAC)
.text$x:00006CF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006CF8
.text$x:00006CF8 ; =============== S U B R O U T I N E =======================================
.text$x:00006CF8
.text$x:00006CF8
.text$x:00006CF8 __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 proc near
.text$x:00006CF8                                         ; DATA XREF: .xdata$x:00009F44o
.text$x:00006CF8                 mov     ecx, [ebp-10h]  ; this
.text$x:00006CFB                 jmp     ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$x:00006CFB __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0 endp
.text$x:00006CFB
.text$x:00006D00
.text$x:00006D00 ; =============== S U B R O U T I N E =======================================
.text$x:00006D00
.text$x:00006D00
.text$x:00006D00 __ehhandler$??1_System_error_category@std@@UAE@XZ proc near
.text$x:00006D00                                         ; DATA XREF: std::_System_error_category::~_System_error_category(void)+5o
.text$x:00006D00
.text$x:00006D00 arg_4           = dword ptr  8
.text$x:00006D00
.text$x:00006D00                 mov     edx, [esp+arg_4]
.text$x:00006D04                 lea     eax, [edx+0Ch]
.text$x:00006D07                 mov     ecx, [edx-8]
.text$x:00006D0A                 xor     ecx, eax
.text$x:00006D0C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006D11                 mov     eax, offset __ehfuncinfo$??1_System_error_category@std@@UAE@XZ
.text$x:00006D16                 jmp     ___CxxFrameHandler3
.text$x:00006D16 __ehhandler$??1_System_error_category@std@@UAE@XZ endp
.text$x:00006D16
.text$x:00006D16 ; ---------------------------------------------------------------------------
.text$x:00006D1B                 align 4
.text$x:00006D1B _text$x         ends
.text$x:00006D1B
.text$mn:00006D1C ; ===========================================================================
.text$mn:00006D1C
.text$mn:00006D1C ; Segment type: Pure code
.text$mn:00006D1C ; Segment permissions: Read/Execute
.text$mn:00006D1C _text$mn        segment para public 'CODE' use32
.text$mn:00006D1C                 assume cs:_text$mn
.text$mn:00006D1C                 ;org 6D1Ch
.text$mn:00006D1C ; COMDAT (pick any)
.text$mn:00006D1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D1C
.text$mn:00006D1C ; =============== S U B R O U T I N E =======================================
.text$mn:00006D1C
.text$mn:00006D1C ; Attributes: bp-based frame
.text$mn:00006D1C
.text$mn:00006D1C ; _DWORD __thiscall std::error_category::~error_category(std::error_category *__hidden this)
.text$mn:00006D1C                 public ??1error_category@std@@UAE@XZ
.text$mn:00006D1C ??1error_category@std@@UAE@XZ proc near ; CODE XREF: __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0+3j
.text$mn:00006D1C                                         ; std::_Generic_error_category::~_Generic_error_category(void)+37p ...
.text$mn:00006D1C
.text$mn:00006D1C var_4           = dword ptr -4
.text$mn:00006D1C
.text$mn:00006D1C                 push    ebp
.text$mn:00006D1D                 mov     ebp, esp
.text$mn:00006D1F                 push    ecx
.text$mn:00006D20                 mov     [ebp+var_4], ecx
.text$mn:00006D23                 mov     eax, [ebp+var_4]
.text$mn:00006D26                 mov     dword ptr [eax], offset ??_7error_category@std@@6B@ ; const std::error_category::`vftable'
.text$mn:00006D2C                 mov     esp, ebp
.text$mn:00006D2E                 pop     ebp
.text$mn:00006D2F                 retn
.text$mn:00006D2F ??1error_category@std@@UAE@XZ endp
.text$mn:00006D2F
.text$mn:00006D2F _text$mn        ends
.text$mn:00006D2F
.text$mn:00006D30 ; ===========================================================================
.text$mn:00006D30
.text$mn:00006D30 ; Segment type: Pure code
.text$mn:00006D30 ; Segment permissions: Read/Execute
.text$mn:00006D30 _text$mn        segment para public 'CODE' use32
.text$mn:00006D30                 assume cs:_text$mn
.text$mn:00006D30                 ;org 6D30h
.text$mn:00006D30 ; COMDAT (pick any)
.text$mn:00006D30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D30
.text$mn:00006D30 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D30
.text$mn:00006D30 ; Attributes: bp-based frame
.text$mn:00006D30
.text$mn:00006D30 ; void *__cdecl operator new(unsigned int, void *)
.text$mn:00006D30                 public ??2@YAPAXIPAX@Z
.text$mn:00006D30 ??2@YAPAXIPAX@Z proc near               ; CODE XREF: std::allocator<char>::construct<char *,char * &>(char * *,char * &)+2Ep
.text$mn:00006D30                                         ; std::allocator<wchar_t>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)+2Ep ...
.text$mn:00006D30
.text$mn:00006D30 arg_4           = dword ptr  0Ch
.text$mn:00006D30
.text$mn:00006D30                 push    ebp
.text$mn:00006D31                 mov     ebp, esp
.text$mn:00006D33                 mov     eax, [ebp+arg_4]
.text$mn:00006D36                 pop     ebp
.text$mn:00006D37                 retn
.text$mn:00006D37 ??2@YAPAXIPAX@Z endp
.text$mn:00006D37
.text$mn:00006D37 _text$mn        ends
.text$mn:00006D37
.text$mn:00006D38 ; ===========================================================================
.text$mn:00006D38
.text$mn:00006D38 ; Segment type: Pure code
.text$mn:00006D38 ; Segment permissions: Read/Execute
.text$mn:00006D38 _text$mn        segment para public 'CODE' use32
.text$mn:00006D38                 assume cs:_text$mn
.text$mn:00006D38                 ;org 6D38h
.text$mn:00006D38 ; COMDAT (pick any)
.text$mn:00006D38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D38
.text$mn:00006D38 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D38
.text$mn:00006D38 ; Attributes: bp-based frame
.text$mn:00006D38
.text$mn:00006D38 ; void __cdecl operator delete(void *)
.text$mn:00006D38                 public ??3@YAXPAX0@Z
.text$mn:00006D38 ??3@YAXPAX0@Z   proc near               ; CODE XREF: __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0+8p
.text$mn:00006D38                                         ; __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0+8p ...
.text$mn:00006D38                 push    ebp
.text$mn:00006D39                 mov     ebp, esp
.text$mn:00006D3B                 pop     ebp
.text$mn:00006D3C                 retn
.text$mn:00006D3C ??3@YAXPAX0@Z   endp
.text$mn:00006D3C
.text$mn:00006D3C ; ---------------------------------------------------------------------------
.text$mn:00006D3D                 align 10h
.text$mn:00006D3D _text$mn        ends
.text$mn:00006D3D
.text$mn:00006D40 ; ===========================================================================
.text$mn:00006D40
.text$mn:00006D40 ; Segment type: Pure code
.text$mn:00006D40 ; Segment permissions: Read/Execute
.text$mn:00006D40 _text$mn        segment para public 'CODE' use32
.text$mn:00006D40                 assume cs:_text$mn
.text$mn:00006D40                 ;org 6D40h
.text$mn:00006D40 ; COMDAT (pick any)
.text$mn:00006D40                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006D40
.text$mn:00006D40 ; =============== S U B R O U T I N E =======================================
.text$mn:00006D40
.text$mn:00006D40 ; Attributes: bp-based frame
.text$mn:00006D40
.text$mn:00006D40 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:00006D40                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:00006D40 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$mn:00006D40                                         ; CODE XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+12Ap
.text$mn:00006D40                                         ; NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+204p ...
.text$mn:00006D40
.text$mn:00006D40 var_2C          = dword ptr -2Ch
.text$mn:00006D40 var_28          = dword ptr -28h
.text$mn:00006D40 var_24          = dword ptr -24h
.text$mn:00006D40 var_20          = dword ptr -20h
.text$mn:00006D40 var_1C          = dword ptr -1Ch
.text$mn:00006D40 var_18          = dword ptr -18h
.text$mn:00006D40 var_14          = dword ptr -14h
.text$mn:00006D40 var_F           = byte ptr -0Fh
.text$mn:00006D40 var_E           = byte ptr -0Eh
.text$mn:00006D40 var_D           = byte ptr -0Dh
.text$mn:00006D40 var_C           = dword ptr -0Ch
.text$mn:00006D40 var_4           = dword ptr -4
.text$mn:00006D40 arg_0           = dword ptr  8
.text$mn:00006D40
.text$mn:00006D40                 push    ebp
.text$mn:00006D41                 mov     ebp, esp
.text$mn:00006D43                 push    0FFFFFFFFh
.text$mn:00006D45                 push    offset __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$mn:00006D4A                 mov     eax, large fs:0
.text$mn:00006D50                 push    eax
.text$mn:00006D51                 sub     esp, 20h
.text$mn:00006D54                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006D59                 xor     eax, ebp
.text$mn:00006D5B                 push    eax
.text$mn:00006D5C                 lea     eax, [ebp+var_C]
.text$mn:00006D5F                 mov     large fs:0, eax
.text$mn:00006D65                 mov     [ebp+var_14], ecx
.text$mn:00006D68                 mov     eax, [ebp+var_14]
.text$mn:00006D6B                 cmp     eax, [ebp+arg_0]
.text$mn:00006D6E                 jz      loc_6E27
.text$mn:00006D74                 push    0
.text$mn:00006D76                 push    1
.text$mn:00006D78                 mov     ecx, [ebp+var_14]
.text$mn:00006D7B                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00006D80                 xor     ecx, ecx
.text$mn:00006D82                 jz      short loc_6D99
.text$mn:00006D84                 lea     edx, [ebp+var_D]
.text$mn:00006D87                 push    edx
.text$mn:00006D88                 mov     ecx, [ebp+arg_0]
.text$mn:00006D8B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006D90                 push    eax
.text$mn:00006D91                 mov     ecx, [ebp+var_14]
.text$mn:00006D94                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00006D99
.text$mn:00006D99 loc_6D99:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+42j
.text$mn:00006D99                 lea     eax, [ebp+var_E]
.text$mn:00006D9C                 push    eax
.text$mn:00006D9D                 mov     ecx, [ebp+arg_0]
.text$mn:00006DA0                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006DA5                 push    eax
.text$mn:00006DA6                 lea     ecx, [ebp+var_F]
.text$mn:00006DA9                 push    ecx
.text$mn:00006DAA                 mov     ecx, [ebp+var_14]
.text$mn:00006DAD                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006DB2                 push    eax
.text$mn:00006DB3                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00006DB8                 add     esp, 8
.text$mn:00006DBB                 movzx   edx, al
.text$mn:00006DBE                 test    edx, edx
.text$mn:00006DC0                 jz      short loc_6E12
.text$mn:00006DC2                 sub     esp, 0Ch
.text$mn:00006DC5                 mov     eax, esp
.text$mn:00006DC7                 mov     [ebp+var_20], esp
.text$mn:00006DCA                 push    eax
.text$mn:00006DCB                 mov     ecx, [ebp+arg_0]
.text$mn:00006DCE                 call    ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)
.text$mn:00006DD3                 mov     [ebp+var_18], eax
.text$mn:00006DD6                 mov     ecx, [ebp+var_18]
.text$mn:00006DD9                 mov     [ebp+var_24], ecx
.text$mn:00006DDC                 mov     [ebp+var_4], 0
.text$mn:00006DE3                 sub     esp, 0Ch
.text$mn:00006DE6                 mov     edx, esp
.text$mn:00006DE8                 mov     [ebp+var_28], esp
.text$mn:00006DEB                 push    edx
.text$mn:00006DEC                 mov     ecx, [ebp+arg_0]
.text$mn:00006DEF                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:00006DF4                 mov     [ebp+var_1C], eax
.text$mn:00006DF7                 mov     eax, [ebp+var_1C]
.text$mn:00006DFA                 mov     [ebp+var_2C], eax
.text$mn:00006DFD                 mov     byte ptr [ebp+var_4], 1
.text$mn:00006E01                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006E08                 mov     ecx, [ebp+var_14]
.text$mn:00006E0B                 call    ??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00006E10                 jmp     short loc_6E27
.text$mn:00006E12 ; ---------------------------------------------------------------------------
.text$mn:00006E12
.text$mn:00006E12 loc_6E12:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+80j
.text$mn:00006E12                 mov     ecx, [ebp+arg_0]
.text$mn:00006E15                 push    ecx
.text$mn:00006E16                 call    ??$forward@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@YA$$QAV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@0@AAV10@@Z ; std::forward<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)
.text$mn:00006E1B                 add     esp, 4
.text$mn:00006E1E                 push    eax
.text$mn:00006E1F                 mov     ecx, [ebp+var_14]
.text$mn:00006E22                 call    ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)
.text$mn:00006E27
.text$mn:00006E27 loc_6E27:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ej
.text$mn:00006E27                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+D0j
.text$mn:00006E27                 mov     eax, [ebp+var_14]
.text$mn:00006E2A                 mov     ecx, [ebp+var_C]
.text$mn:00006E2D                 mov     large fs:0, ecx
.text$mn:00006E34                 pop     ecx
.text$mn:00006E35                 mov     esp, ebp
.text$mn:00006E37                 pop     ebp
.text$mn:00006E38                 retn    4
.text$mn:00006E38 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$mn:00006E38
.text$mn:00006E38 ; ---------------------------------------------------------------------------
.text$mn:00006E3B                 align 4
.text$mn:00006E3B _text$mn        ends
.text$mn:00006E3B
.text$x:00006E3C ; ===========================================================================
.text$x:00006E3C
.text$x:00006E3C ; Segment type: Pure code
.text$x:00006E3C ; Segment permissions: Read/Execute
.text$x:00006E3C _text$x         segment para public 'CODE' use32
.text$x:00006E3C                 assume cs:_text$x
.text$x:00006E3C                 ;org 6E3Ch
.text$x:00006E3C ; COMDAT (pick associative to section at 6D40)
.text$x:00006E3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006E3C
.text$x:00006E3C ; =============== S U B R O U T I N E =======================================
.text$x:00006E3C
.text$x:00006E3C
.text$x:00006E3C __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 proc near
.text$x:00006E3C                                         ; DATA XREF: .xdata$x:0000A0A4o
.text$x:00006E3C                 mov     ecx, [ebp-20h]
.text$x:00006E3F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006E3F __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0 endp
.text$x:00006E3F
.text$x:00006E44
.text$x:00006E44 ; =============== S U B R O U T I N E =======================================
.text$x:00006E44
.text$x:00006E44
.text$x:00006E44 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 proc near
.text$x:00006E44                                         ; DATA XREF: .xdata$x:0000A0ACo
.text$x:00006E44                 mov     ecx, [ebp-28h]
.text$x:00006E47                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00006E47 __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1 endp
.text$x:00006E47
.text$x:00006E4C
.text$x:00006E4C ; =============== S U B R O U T I N E =======================================
.text$x:00006E4C
.text$x:00006E4C
.text$x:00006E4C __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z proc near
.text$x:00006E4C                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+5o
.text$x:00006E4C
.text$x:00006E4C arg_4           = dword ptr  8
.text$x:00006E4C
.text$x:00006E4C                 mov     edx, [esp+arg_4]
.text$x:00006E50                 lea     eax, [edx+0Ch]
.text$x:00006E53                 mov     ecx, [edx-24h]
.text$x:00006E56                 xor     ecx, eax
.text$x:00006E58                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006E5D                 mov     eax, offset __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.text$x:00006E62                 jmp     ___CxxFrameHandler3
.text$x:00006E62 __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z endp
.text$x:00006E62
.text$x:00006E62 ; ---------------------------------------------------------------------------
.text$x:00006E67                 align 4
.text$x:00006E67 _text$x         ends
.text$x:00006E67
.text$mn:00006E68 ; ===========================================================================
.text$mn:00006E68
.text$mn:00006E68 ; Segment type: Pure code
.text$mn:00006E68 ; Segment permissions: Read/Execute
.text$mn:00006E68 _text$mn        segment para public 'CODE' use32
.text$mn:00006E68                 assume cs:_text$mn
.text$mn:00006E68                 ;org 6E68h
.text$mn:00006E68 ; COMDAT (pick any)
.text$mn:00006E68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006E68
.text$mn:00006E68 ; =============== S U B R O U T I N E =======================================
.text$mn:00006E68
.text$mn:00006E68 ; Attributes: bp-based frame
.text$mn:00006E68
.text$mn:00006E68 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::operator=(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:00006E68                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z
.text$mn:00006E68 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z proc near
.text$mn:00006E68                                         ; CODE XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+17Fp
.text$mn:00006E68                                         ; NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+219p ...
.text$mn:00006E68
.text$mn:00006E68 var_8           = dword ptr -8
.text$mn:00006E68 var_3           = byte ptr -3
.text$mn:00006E68 var_2           = byte ptr -2
.text$mn:00006E68 var_1           = byte ptr -1
.text$mn:00006E68 arg_0           = dword ptr  8
.text$mn:00006E68
.text$mn:00006E68                 push    ebp
.text$mn:00006E69                 mov     ebp, esp
.text$mn:00006E6B                 sub     esp, 8
.text$mn:00006E6E                 mov     [ebp+var_8], ecx
.text$mn:00006E71                 mov     eax, [ebp+var_8]
.text$mn:00006E74                 cmp     eax, [ebp+arg_0]
.text$mn:00006E77                 jz      short loc_6ED3
.text$mn:00006E79                 lea     ecx, [ebp+var_1]
.text$mn:00006E7C                 push    ecx
.text$mn:00006E7D                 mov     ecx, [ebp+arg_0]
.text$mn:00006E80                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006E85                 push    eax
.text$mn:00006E86                 lea     edx, [ebp+var_2]
.text$mn:00006E89                 push    edx
.text$mn:00006E8A                 mov     ecx, [ebp+var_8]
.text$mn:00006E8D                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006E92                 push    eax
.text$mn:00006E93                 call    ??$?9V?$allocator@_W@std@@V01@@std@@YA_NABU?$_Wrap_alloc@V?$allocator@_W@std@@@0@0@Z ; std::operator!=<std::allocator<wchar_t>,std::allocator<wchar_t>>(std::_Wrap_alloc<std::allocator<wchar_t>> const &,std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00006E98                 add     esp, 8
.text$mn:00006E9B                 movzx   eax, al
.text$mn:00006E9E                 test    eax, eax
.text$mn:00006EA0                 jz      short loc_6EC7
.text$mn:00006EA2                 xor     ecx, ecx
.text$mn:00006EA4                 jz      short loc_6EC7
.text$mn:00006EA6                 push    0
.text$mn:00006EA8                 push    1
.text$mn:00006EAA                 mov     ecx, [ebp+var_8]
.text$mn:00006EAD                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00006EB2                 lea     edx, [ebp+var_3]
.text$mn:00006EB5                 push    edx
.text$mn:00006EB6                 mov     ecx, [ebp+arg_0]
.text$mn:00006EB9                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00006EBE                 push    eax
.text$mn:00006EBF                 mov     ecx, [ebp+var_8]
.text$mn:00006EC2                 call    ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Change_alloc(std::_Wrap_alloc<std::allocator<wchar_t>> const &)
.text$mn:00006EC7
.text$mn:00006EC7 loc_6EC7:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+38j
.text$mn:00006EC7                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Cj
.text$mn:00006EC7                 mov     eax, [ebp+arg_0]
.text$mn:00006ECA                 push    eax
.text$mn:00006ECB                 mov     ecx, [ebp+var_8]
.text$mn:00006ECE                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)
.text$mn:00006ED3
.text$mn:00006ED3 loc_6ED3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+Fj
.text$mn:00006ED3                 mov     eax, [ebp+var_8]
.text$mn:00006ED6                 mov     esp, ebp
.text$mn:00006ED8                 pop     ebp
.text$mn:00006ED9                 retn    4
.text$mn:00006ED9 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@ABV01@@Z endp
.text$mn:00006ED9
.text$mn:00006ED9 _text$mn        ends
.text$mn:00006ED9
.text$mn:00006EDC ; ===========================================================================
.text$mn:00006EDC
.text$mn:00006EDC ; Segment type: Pure code
.text$mn:00006EDC ; Segment permissions: Read/Execute
.text$mn:00006EDC _text$mn        segment para public 'CODE' use32
.text$mn:00006EDC                 assume cs:_text$mn
.text$mn:00006EDC                 ;org 6EDCh
.text$mn:00006EDC ; COMDAT (pick any)
.text$mn:00006EDC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006EDC
.text$mn:00006EDC ; =============== S U B R O U T I N E =======================================
.text$mn:00006EDC
.text$mn:00006EDC ; Attributes: bp-based frame
.text$mn:00006EDC
.text$mn:00006EDC ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t *Str)
.text$mn:00006EDC                 public ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z
.text$mn:00006EDC ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z proc near
.text$mn:00006EDC                                         ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+193p
.text$mn:00006EDC                                         ; NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+1D2p ...
.text$mn:00006EDC
.text$mn:00006EDC var_4           = dword ptr -4
.text$mn:00006EDC Str             = dword ptr  8
.text$mn:00006EDC
.text$mn:00006EDC                 push    ebp
.text$mn:00006EDD                 mov     ebp, esp
.text$mn:00006EDF                 push    ecx
.text$mn:00006EE0                 mov     [ebp+var_4], ecx
.text$mn:00006EE3                 mov     eax, [ebp+Str]
.text$mn:00006EE6                 push    eax             ; Str
.text$mn:00006EE7                 mov     ecx, [ebp+var_4]
.text$mn:00006EEA                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)
.text$mn:00006EEF                 mov     esp, ebp
.text$mn:00006EF1                 pop     ebp
.text$mn:00006EF2                 retn    4
.text$mn:00006EF2 ??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@PB_W@Z endp
.text$mn:00006EF2
.text$mn:00006EF2 ; ---------------------------------------------------------------------------
.text$mn:00006EF5                 align 4
.text$mn:00006EF5 _text$mn        ends
.text$mn:00006EF5
.text$mn:00006EF8 ; ===========================================================================
.text$mn:00006EF8
.text$mn:00006EF8 ; Segment type: Pure code
.text$mn:00006EF8 ; Segment permissions: Read/Execute
.text$mn:00006EF8 _text$mn        segment para public 'CODE' use32
.text$mn:00006EF8                 assume cs:_text$mn
.text$mn:00006EF8                 ;org 6EF8h
.text$mn:00006EF8 ; COMDAT (pick any)
.text$mn:00006EF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006EF8
.text$mn:00006EF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006EF8
.text$mn:00006EF8 ; Attributes: bp-based frame
.text$mn:00006EF8
.text$mn:00006EF8 ; public: struct std::_Iterator_base12 & __thiscall std::_Iterator_base12::operator=(struct std::_Iterator_base12 const &)
.text$mn:00006EF8                 public ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:00006EF8 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$mn:00006EF8                                         ; CODE XREF: std::_Iterator_base12::_Iterator_base12(std::_Iterator_base12 const &)+21p
.text$mn:00006EF8
.text$mn:00006EF8 var_14          = byte ptr -14h
.text$mn:00006EF8 var_10          = dword ptr -10h
.text$mn:00006EF8 var_C           = dword ptr -0Ch
.text$mn:00006EF8 var_4           = dword ptr -4
.text$mn:00006EF8 arg_0           = dword ptr  8
.text$mn:00006EF8
.text$mn:00006EF8                 push    ebp
.text$mn:00006EF9                 mov     ebp, esp
.text$mn:00006EFB                 push    0FFFFFFFFh
.text$mn:00006EFD                 push    offset __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$mn:00006F02                 mov     eax, large fs:0
.text$mn:00006F08                 push    eax
.text$mn:00006F09                 sub     esp, 8
.text$mn:00006F0C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00006F11                 xor     eax, ebp
.text$mn:00006F13                 push    eax
.text$mn:00006F14                 lea     eax, [ebp+var_C]
.text$mn:00006F17                 mov     large fs:0, eax
.text$mn:00006F1D                 mov     [ebp+var_10], ecx
.text$mn:00006F20                 mov     eax, [ebp+var_10]
.text$mn:00006F23                 mov     ecx, [ebp+arg_0]
.text$mn:00006F26                 mov     edx, [eax]
.text$mn:00006F28                 cmp     edx, [ecx]
.text$mn:00006F2A                 jnz     short loc_6F2E
.text$mn:00006F2C                 jmp     short loc_6F70
.text$mn:00006F2E ; ---------------------------------------------------------------------------
.text$mn:00006F2E
.text$mn:00006F2E loc_6F2E:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+32j
.text$mn:00006F2E                 mov     eax, [ebp+arg_0]
.text$mn:00006F31                 cmp     dword ptr [eax], 0
.text$mn:00006F34                 jz      short loc_6F48
.text$mn:00006F36                 mov     ecx, [ebp+arg_0]
.text$mn:00006F39                 mov     edx, [ecx]
.text$mn:00006F3B                 mov     eax, [edx]
.text$mn:00006F3D                 push    eax             ; struct std::_Container_base12 *
.text$mn:00006F3E                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006F41                 call    ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)
.text$mn:00006F46                 jmp     short loc_6F70
.text$mn:00006F48 ; ---------------------------------------------------------------------------
.text$mn:00006F48
.text$mn:00006F48 loc_6F48:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+3Cj
.text$mn:00006F48                 push    3               ; int
.text$mn:00006F4A                 lea     ecx, [ebp+var_14] ; this
.text$mn:00006F4D                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00006F52                 mov     [ebp+var_4], 0
.text$mn:00006F59                 mov     ecx, [ebp+var_10] ; this
.text$mn:00006F5C                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00006F61                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00006F68                 lea     ecx, [ebp+var_14] ; this
.text$mn:00006F6B                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:00006F70
.text$mn:00006F70 loc_6F70:                               ; CODE XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+34j
.text$mn:00006F70                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+4Ej
.text$mn:00006F70                 mov     eax, [ebp+var_10]
.text$mn:00006F73                 mov     ecx, [ebp+var_C]
.text$mn:00006F76                 mov     large fs:0, ecx
.text$mn:00006F7D                 pop     ecx
.text$mn:00006F7E                 mov     esp, ebp
.text$mn:00006F80                 pop     ebp
.text$mn:00006F81                 retn    4
.text$mn:00006F81 ??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$mn:00006F81
.text$mn:00006F81 _text$mn        ends
.text$mn:00006F81
.text$x:00006F84 ; ===========================================================================
.text$x:00006F84
.text$x:00006F84 ; Segment type: Pure code
.text$x:00006F84 ; Segment permissions: Read/Execute
.text$x:00006F84 _text$x         segment para public 'CODE' use32
.text$x:00006F84                 assume cs:_text$x
.text$x:00006F84                 ;org 6F84h
.text$x:00006F84 ; COMDAT (pick associative to section at 6EF8)
.text$x:00006F84                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00006F84
.text$x:00006F84 ; =============== S U B R O U T I N E =======================================
.text$x:00006F84
.text$x:00006F84
.text$x:00006F84 __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 proc near
.text$x:00006F84                                         ; DATA XREF: .xdata$x:00009BC4o
.text$x:00006F84                 lea     ecx, [ebp-14h]  ; this
.text$x:00006F87                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00006F87 __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0 endp
.text$x:00006F87
.text$x:00006F8C
.text$x:00006F8C ; =============== S U B R O U T I N E =======================================
.text$x:00006F8C
.text$x:00006F8C
.text$x:00006F8C __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z proc near
.text$x:00006F8C                                         ; DATA XREF: std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+5o
.text$x:00006F8C
.text$x:00006F8C arg_4           = dword ptr  8
.text$x:00006F8C
.text$x:00006F8C                 mov     edx, [esp+arg_4]
.text$x:00006F90                 lea     eax, [edx+0Ch]
.text$x:00006F93                 mov     ecx, [edx-0Ch]
.text$x:00006F96                 xor     ecx, eax
.text$x:00006F98                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00006F9D                 mov     eax, offset __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.text$x:00006FA2                 jmp     ___CxxFrameHandler3
.text$x:00006FA2 __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z endp
.text$x:00006FA2
.text$x:00006FA2 ; ---------------------------------------------------------------------------
.text$x:00006FA7                 align 4
.text$x:00006FA7 _text$x         ends
.text$x:00006FA7
.text$mn:00006FA8 ; ===========================================================================
.text$mn:00006FA8
.text$mn:00006FA8 ; Segment type: Pure code
.text$mn:00006FA8 ; Segment permissions: Read/Execute
.text$mn:00006FA8 _text$mn        segment para public 'CODE' use32
.text$mn:00006FA8                 assume cs:_text$mn
.text$mn:00006FA8                 ;org 6FA8h
.text$mn:00006FA8 ; COMDAT (pick any)
.text$mn:00006FA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006FA8
.text$mn:00006FA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00006FA8
.text$mn:00006FA8 ; Attributes: bp-based frame
.text$mn:00006FA8
.text$mn:00006FA8 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_Iterator_base12 *)
.text$mn:00006FA8                 public ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z
.text$mn:00006FA8 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z proc near
.text$mn:00006FA8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+39p
.text$mn:00006FA8
.text$mn:00006FA8 var_8           = dword ptr -8
.text$mn:00006FA8 var_4           = dword ptr -4
.text$mn:00006FA8 arg_0           = dword ptr  8
.text$mn:00006FA8
.text$mn:00006FA8                 push    ebp
.text$mn:00006FA9                 mov     ebp, esp
.text$mn:00006FAB                 sub     esp, 8
.text$mn:00006FAE                 mov     [ebp+var_4], ecx
.text$mn:00006FB1                 mov     eax, [ebp+arg_0]
.text$mn:00006FB4                 push    eax             ; std::_Iterator_base12 *
.text$mn:00006FB5                 mov     ecx, [ebp+var_4]
.text$mn:00006FB8                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00006FBD                 mov     ecx, [ebp+var_4]
.text$mn:00006FC0                 mov     edx, [ebp+arg_0]
.text$mn:00006FC3                 mov     eax, [ecx+8]
.text$mn:00006FC6                 cmp     eax, [edx+8]
.text$mn:00006FC9                 jnz     short loc_6FD4
.text$mn:00006FCB                 mov     [ebp+var_8], 1
.text$mn:00006FD2                 jmp     short loc_6FDB
.text$mn:00006FD4 ; ---------------------------------------------------------------------------
.text$mn:00006FD4
.text$mn:00006FD4 loc_6FD4:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+21j
.text$mn:00006FD4                 mov     [ebp+var_8], 0
.text$mn:00006FDB
.text$mn:00006FDB loc_6FDB:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+2Aj
.text$mn:00006FDB                 mov     al, byte ptr [ebp+var_8]
.text$mn:00006FDE                 mov     esp, ebp
.text$mn:00006FE0                 pop     ebp
.text$mn:00006FE1                 retn    4
.text$mn:00006FE1 ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z endp
.text$mn:00006FE1
.text$mn:00006FE1 _text$mn        ends
.text$mn:00006FE1
.text$mn:00006FE4 ; ===========================================================================
.text$mn:00006FE4
.text$mn:00006FE4 ; Segment type: Pure code
.text$mn:00006FE4 ; Segment permissions: Read/Execute
.text$mn:00006FE4 _text$mn        segment para public 'CODE' use32
.text$mn:00006FE4                 assume cs:_text$mn
.text$mn:00006FE4                 ;org 6FE4h
.text$mn:00006FE4 ; COMDAT (pick any)
.text$mn:00006FE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00006FE4
.text$mn:00006FE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00006FE4
.text$mn:00006FE4 ; Attributes: bp-based frame
.text$mn:00006FE4
.text$mn:00006FE4 ; public: bool __thiscall std::error_category::operator==(class std::error_category const &)const
.text$mn:00006FE4                 public ??8error_category@std@@QBE_NABV01@@Z
.text$mn:00006FE4 ??8error_category@std@@QBE_NABV01@@Z proc near
.text$mn:00006FE4                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+1Dp
.text$mn:00006FE4                                         ; std::error_category::equivalent(std::error_code const &,int)+15p
.text$mn:00006FE4
.text$mn:00006FE4 var_8           = dword ptr -8
.text$mn:00006FE4 var_4           = dword ptr -4
.text$mn:00006FE4 arg_0           = dword ptr  8
.text$mn:00006FE4
.text$mn:00006FE4                 push    ebp
.text$mn:00006FE5                 mov     ebp, esp
.text$mn:00006FE7                 sub     esp, 8
.text$mn:00006FEA                 mov     [ebp+var_8], ecx
.text$mn:00006FED                 mov     eax, [ebp+var_8]
.text$mn:00006FF0                 cmp     eax, [ebp+arg_0]
.text$mn:00006FF3                 jnz     short loc_6FFE
.text$mn:00006FF5                 mov     [ebp+var_4], 1
.text$mn:00006FFC                 jmp     short loc_7005
.text$mn:00006FFE ; ---------------------------------------------------------------------------
.text$mn:00006FFE
.text$mn:00006FFE loc_6FFE:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+Fj
.text$mn:00006FFE                 mov     [ebp+var_4], 0
.text$mn:00007005
.text$mn:00007005 loc_7005:                               ; CODE XREF: std::error_category::operator==(std::error_category const &)+18j
.text$mn:00007005                 mov     al, byte ptr [ebp+var_4]
.text$mn:00007008                 mov     esp, ebp
.text$mn:0000700A                 pop     ebp
.text$mn:0000700B                 retn    4
.text$mn:0000700B ??8error_category@std@@QBE_NABV01@@Z endp
.text$mn:0000700B
.text$mn:0000700B ; ---------------------------------------------------------------------------
.text$mn:0000700E                 align 10h
.text$mn:0000700E _text$mn        ends
.text$mn:0000700E
.text$mn:00007010 ; ===========================================================================
.text$mn:00007010
.text$mn:00007010 ; Segment type: Pure code
.text$mn:00007010 ; Segment permissions: Read/Execute
.text$mn:00007010 _text$mn        segment para public 'CODE' use32
.text$mn:00007010                 assume cs:_text$mn
.text$mn:00007010                 ;org 7010h
.text$mn:00007010 ; COMDAT (pick any)
.text$mn:00007010                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007010
.text$mn:00007010 ; =============== S U B R O U T I N E =======================================
.text$mn:00007010
.text$mn:00007010 ; Attributes: bp-based frame
.text$mn:00007010
.text$mn:00007010 ; int __stdcall std::error_condition::operator==(std::error_condition *)
.text$mn:00007010                 public ??8error_condition@std@@QBE_NABV01@@Z
.text$mn:00007010 ??8error_condition@std@@QBE_NABV01@@Z proc near
.text$mn:00007010                                         ; CODE XREF: std::error_category::equivalent(int,std::error_condition const &)+24p
.text$mn:00007010
.text$mn:00007010 var_8           = dword ptr -8
.text$mn:00007010 var_4           = dword ptr -4
.text$mn:00007010 arg_0           = dword ptr  8
.text$mn:00007010
.text$mn:00007010                 push    ebp
.text$mn:00007011                 mov     ebp, esp
.text$mn:00007013                 sub     esp, 8
.text$mn:00007016                 push    esi
.text$mn:00007017                 mov     [ebp+var_4], ecx
.text$mn:0000701A                 mov     ecx, [ebp+arg_0] ; this
.text$mn:0000701D                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:00007022                 push    eax
.text$mn:00007023                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007026                 call    ?category@error_condition@std@@QBEABVerror_category@2@XZ ; std::error_condition::category(void)
.text$mn:0000702B                 mov     ecx, eax
.text$mn:0000702D                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00007032                 movzx   eax, al
.text$mn:00007035                 test    eax, eax
.text$mn:00007037                 jz      short loc_7058
.text$mn:00007039                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000703C                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:00007041                 mov     esi, eax
.text$mn:00007043                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00007046                 call    ?value@error_condition@std@@QBEHXZ ; std::error_condition::value(void)
.text$mn:0000704B                 cmp     esi, eax
.text$mn:0000704D                 jnz     short loc_7058
.text$mn:0000704F                 mov     [ebp+var_8], 1
.text$mn:00007056                 jmp     short loc_705F
.text$mn:00007058 ; ---------------------------------------------------------------------------
.text$mn:00007058
.text$mn:00007058 loc_7058:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+27j
.text$mn:00007058                                         ; std::error_condition::operator==(std::error_condition const &)+3Dj
.text$mn:00007058                 mov     [ebp+var_8], 0
.text$mn:0000705F
.text$mn:0000705F loc_705F:                               ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+46j
.text$mn:0000705F                 mov     al, byte ptr [ebp+var_8]
.text$mn:00007062                 pop     esi
.text$mn:00007063                 mov     esp, ebp
.text$mn:00007065                 pop     ebp
.text$mn:00007066                 retn    4
.text$mn:00007066 ??8error_condition@std@@QBE_NABV01@@Z endp
.text$mn:00007066
.text$mn:00007066 ; ---------------------------------------------------------------------------
.text$mn:00007069                 align 4
.text$mn:00007069 _text$mn        ends
.text$mn:00007069
.text$mn:0000706C ; ===========================================================================
.text$mn:0000706C
.text$mn:0000706C ; Segment type: Pure code
.text$mn:0000706C ; Segment permissions: Read/Execute
.text$mn:0000706C _text$mn        segment para public 'CODE' use32
.text$mn:0000706C                 assume cs:_text$mn
.text$mn:0000706C                 ;org 706Ch
.text$mn:0000706C ; COMDAT (pick any)
.text$mn:0000706C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000706C
.text$mn:0000706C ; =============== S U B R O U T I N E =======================================
.text$mn:0000706C
.text$mn:0000706C ; Attributes: bp-based frame
.text$mn:0000706C
.text$mn:0000706C ; public: class CommandShortcut & __thiscall std::vector<class CommandShortcut, class std::allocator<class CommandShortcut>>::operator[](unsigned int)
.text$mn:0000706C                 public ??A?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAEAAVCommandShortcut@@I@Z
.text$mn:0000706C ??A?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAEAAVCommandShortcut@@I@Z proc near
.text$mn:0000706C                                         ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+123p
.text$mn:0000706C
.text$mn:0000706C var_4           = dword ptr -4
.text$mn:0000706C arg_0           = dword ptr  8
.text$mn:0000706C
.text$mn:0000706C                 push    ebp
.text$mn:0000706D                 mov     ebp, esp
.text$mn:0000706F                 push    ecx
.text$mn:00007070                 mov     [ebp+var_4], ecx
.text$mn:00007073                 mov     ecx, [ebp+var_4]
.text$mn:00007076                 call    ?size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ ; std::vector<CommandShortcut,std::allocator<CommandShortcut>>::size(void)
.text$mn:0000707B                 cmp     eax, [ebp+arg_0]
.text$mn:0000707E                 ja      short loc_70E8
.text$mn:00007080                 push    4B1h            ; unsigned int
.text$mn:00007085                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000708A                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:0000708F                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00007094                 add     esp, 0Ch
.text$mn:00007097                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:0000709C                 test    eax, eax
.text$mn:0000709E                 jz      short loc_70A4
.text$mn:000070A0                 xor     ecx, ecx
.text$mn:000070A2                 jnz     short loc_70CA
.text$mn:000070A4
.text$mn:000070A4 loc_70A4:                               ; CODE XREF: std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)+32j
.text$mn:000070A4                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:000070A9                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:000070AE                 push    0
.text$mn:000070B0                 push    4B2h
.text$mn:000070B5                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000070BA                 push    2
.text$mn:000070BC                 call    __CrtDbgReportW
.text$mn:000070C1                 add     esp, 18h
.text$mn:000070C4                 cmp     eax, 1
.text$mn:000070C7                 jnz     short loc_70CA
.text$mn:000070C9                 int     3               ; Trap to Debugger
.text$mn:000070CA
.text$mn:000070CA loc_70CA:                               ; CODE XREF: std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)+36j
.text$mn:000070CA                                         ; std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)+5Bj
.text$mn:000070CA                 push    0
.text$mn:000070CC                 push    4B2h
.text$mn:000070D1                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000070D6                 push    offset ??_C@_1LK@BFNMKIGH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAS?$AAh?$AAo?$AAr?$AAt?$AAc?$AAu@ ; "std::vector<class CommandShortcut,class"...
.text$mn:000070DB                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:000070E0                 call    __invalid_parameter
.text$mn:000070E5                 add     esp, 14h
.text$mn:000070E8
.text$mn:000070E8 loc_70E8:                               ; CODE XREF: std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)+12j
.text$mn:000070E8                 imul    eax, [ebp+arg_0], 12Ch
.text$mn:000070EF                 mov     ecx, [ebp+var_4]
.text$mn:000070F2                 add     eax, [ecx+4]
.text$mn:000070F5                 mov     esp, ebp
.text$mn:000070F7                 pop     ebp
.text$mn:000070F8                 retn    4
.text$mn:000070F8 ??A?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QAEAAVCommandShortcut@@I@Z endp
.text$mn:000070F8
.text$mn:000070F8 ; ---------------------------------------------------------------------------
.text$mn:000070FB                 align 4
.text$mn:000070FB _text$mn        ends
.text$mn:000070FB
.text$mn:000070FC ; ===========================================================================
.text$mn:000070FC
.text$mn:000070FC ; Segment type: Pure code
.text$mn:000070FC ; Segment permissions: Read/Execute
.text$mn:000070FC _text$mn        segment para public 'CODE' use32
.text$mn:000070FC                 assume cs:_text$mn
.text$mn:000070FC                 ;org 70FCh
.text$mn:000070FC ; COMDAT (pick any)
.text$mn:000070FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000070FC
.text$mn:000070FC ; =============== S U B R O U T I N E =======================================
.text$mn:000070FC
.text$mn:000070FC ; Attributes: bp-based frame
.text$mn:000070FC
.text$mn:000070FC ; public: class ScintillaKeyMap & __thiscall std::vector<class ScintillaKeyMap, class std::allocator<class ScintillaKeyMap>>::operator[](unsigned int)
.text$mn:000070FC                 public ??A?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QAEAAVScintillaKeyMap@@I@Z
.text$mn:000070FC ??A?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QAEAAVScintillaKeyMap@@I@Z proc near
.text$mn:000070FC                                         ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+231p
.text$mn:000070FC
.text$mn:000070FC var_4           = dword ptr -4
.text$mn:000070FC arg_0           = dword ptr  8
.text$mn:000070FC
.text$mn:000070FC                 push    ebp
.text$mn:000070FD                 mov     ebp, esp
.text$mn:000070FF                 push    ecx
.text$mn:00007100                 mov     [ebp+var_4], ecx
.text$mn:00007103                 mov     ecx, [ebp+var_4]
.text$mn:00007106                 call    ?size@?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QBEIXZ ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::size(void)
.text$mn:0000710B                 cmp     eax, [ebp+arg_0]
.text$mn:0000710E                 ja      short loc_7178
.text$mn:00007110                 push    4B1h            ; unsigned int
.text$mn:00007115                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000711A                 push    offset ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@ ; "vector subscript out of range"
.text$mn:0000711F                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:00007124                 add     esp, 0Ch
.text$mn:00007127                 mov     eax, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:0000712C                 test    eax, eax
.text$mn:0000712E                 jz      short loc_7134
.text$mn:00007130                 xor     ecx, ecx
.text$mn:00007132                 jnz     short loc_715A
.text$mn:00007134
.text$mn:00007134 loc_7134:                               ; CODE XREF: std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::operator[](uint)+32j
.text$mn:00007134                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:00007139                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:0000713E                 push    0
.text$mn:00007140                 push    4B2h
.text$mn:00007145                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000714A                 push    2
.text$mn:0000714C                 call    __CrtDbgReportW
.text$mn:00007151                 add     esp, 18h
.text$mn:00007154                 cmp     eax, 1
.text$mn:00007157                 jnz     short loc_715A
.text$mn:00007159                 int     3               ; Trap to Debugger
.text$mn:0000715A
.text$mn:0000715A loc_715A:                               ; CODE XREF: std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::operator[](uint)+36j
.text$mn:0000715A                                         ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::operator[](uint)+5Bj
.text$mn:0000715A                 push    0
.text$mn:0000715C                 push    4B2h
.text$mn:00007161                 push    offset ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007166                 push    offset ??_C@_1LK@EFECNNFA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAS?$AAc?$AAi?$AAn?$AAt?$AAi?$AAl?$AAl?$AAa?$AAK?$AAe?$AAy?$AAM?$AAa@ ; "std::vector<class ScintillaKeyMap,class"...
.text$mn:0000716B                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:00007170                 call    __invalid_parameter
.text$mn:00007175                 add     esp, 14h
.text$mn:00007178
.text$mn:00007178 loc_7178:                               ; CODE XREF: std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::operator[](uint)+12j
.text$mn:00007178                 imul    eax, [ebp+arg_0], 144h
.text$mn:0000717F                 mov     ecx, [ebp+var_4]
.text$mn:00007182                 add     eax, [ecx+4]
.text$mn:00007185                 mov     esp, ebp
.text$mn:00007187                 pop     ebp
.text$mn:00007188                 retn    4
.text$mn:00007188 ??A?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QAEAAVScintillaKeyMap@@I@Z endp
.text$mn:00007188
.text$mn:00007188 ; ---------------------------------------------------------------------------
.text$mn:0000718B                 align 4
.text$mn:0000718B _text$mn        ends
.text$mn:0000718B
.text$mn:0000718C ; ===========================================================================
.text$mn:0000718C
.text$mn:0000718C ; Segment type: Pure code
.text$mn:0000718C ; Segment permissions: Read/Execute
.text$mn:0000718C _text$mn        segment para public 'CODE' use32
.text$mn:0000718C                 assume cs:_text$mn
.text$mn:0000718C                 ;org 718Ch
.text$mn:0000718C ; COMDAT (pick any)
.text$mn:0000718C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000718C
.text$mn:0000718C ; =============== S U B R O U T I N E =======================================
.text$mn:0000718C
.text$mn:0000718C ; Attributes: bp-based frame
.text$mn:0000718C
.text$mn:0000718C ; public: wchar_t const & __thiscall std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::operator*(void)const
.text$mn:0000718C                 public ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ
.text$mn:0000718C ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ proc near
.text$mn:0000718C                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+Ap
.text$mn:0000718C
.text$mn:0000718C var_4           = dword ptr -4
.text$mn:0000718C
.text$mn:0000718C                 push    ebp
.text$mn:0000718D                 mov     ebp, esp
.text$mn:0000718F                 push    ecx
.text$mn:00007190                 push    esi
.text$mn:00007191                 mov     [ebp+var_4], ecx
.text$mn:00007194                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007197                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:0000719C                 test    eax, eax
.text$mn:0000719E                 jz      short loc_71E7
.text$mn:000071A0                 mov     eax, [ebp+var_4]
.text$mn:000071A3                 cmp     dword ptr [eax+8], 0
.text$mn:000071A7                 jz      short loc_71E7
.text$mn:000071A9                 mov     ecx, [ebp+var_4] ; this
.text$mn:000071AC                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:000071B1                 mov     ecx, eax
.text$mn:000071B3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000071B8                 mov     ecx, [ebp+var_4]
.text$mn:000071BB                 cmp     [ecx+8], eax
.text$mn:000071BE                 jb      short loc_71E7
.text$mn:000071C0                 mov     ecx, [ebp+var_4] ; this
.text$mn:000071C3                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:000071C8                 mov     ecx, eax
.text$mn:000071CA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000071CF                 mov     esi, eax
.text$mn:000071D1                 mov     ecx, [ebp+var_4] ; this
.text$mn:000071D4                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:000071D9                 mov     edx, [eax+14h]
.text$mn:000071DC                 lea     eax, [esi+edx*2]
.text$mn:000071DF                 mov     ecx, [ebp+var_4]
.text$mn:000071E2                 cmp     eax, [ecx+8]
.text$mn:000071E5                 ja      short loc_7246
.text$mn:000071E7
.text$mn:000071E7 loc_71E7:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+12j
.text$mn:000071E7                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+1Bj ...
.text$mn:000071E7                 push    4Fh ; 'O'       ; unsigned int
.text$mn:000071E9                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000071EE                 push    offset ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@ ; "string iterator not dereferencable"
.text$mn:000071F3                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000071F8                 add     esp, 0Ch
.text$mn:000071FB                 mov     edx, offset ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ ; "Standard C++ Libraries Out of Range"
.text$mn:00007200                 test    edx, edx
.text$mn:00007202                 jz      short loc_7208
.text$mn:00007204                 xor     eax, eax
.text$mn:00007206                 jnz     short loc_722B
.text$mn:00007208
.text$mn:00007208 loc_7208:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+76j
.text$mn:00007208                 push    offset ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@ ; "\"Standard C++ Libraries Out of Range\""...
.text$mn:0000720D                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00007212                 push    0
.text$mn:00007214                 push    50h ; 'P'
.text$mn:00007216                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000721B                 push    2
.text$mn:0000721D                 call    __CrtDbgReportW
.text$mn:00007222                 add     esp, 18h
.text$mn:00007225                 cmp     eax, 1
.text$mn:00007228                 jnz     short loc_722B
.text$mn:0000722A                 int     3               ; Trap to Debugger
.text$mn:0000722B
.text$mn:0000722B loc_722B:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+7Aj
.text$mn:0000722B                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+9Cj
.text$mn:0000722B                 push    0
.text$mn:0000722D                 push    50h ; 'P'
.text$mn:0000722F                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007234                 push    offset ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:00007239                 push    offset ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@ ; "\"out of range\""
.text$mn:0000723E                 call    __invalid_parameter
.text$mn:00007243                 add     esp, 14h
.text$mn:00007246
.text$mn:00007246 loc_7246:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+59j
.text$mn:00007246                 mov     edx, [ebp+var_4]
.text$mn:00007249                 mov     eax, [edx+8]
.text$mn:0000724C                 pop     esi
.text$mn:0000724D                 mov     esp, ebp
.text$mn:0000724F                 pop     ebp
.text$mn:00007250                 retn
.text$mn:00007250 ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ endp
.text$mn:00007250
.text$mn:00007250 ; ---------------------------------------------------------------------------
.text$mn:00007251                 align 4
.text$mn:00007251 _text$mn        ends
.text$mn:00007251
.text$mn:00007254 ; ===========================================================================
.text$mn:00007254
.text$mn:00007254 ; Segment type: Pure code
.text$mn:00007254 ; Segment permissions: Read/Execute
.text$mn:00007254 _text$mn        segment para public 'CODE' use32
.text$mn:00007254                 assume cs:_text$mn
.text$mn:00007254                 ;org 7254h
.text$mn:00007254 ; COMDAT (pick any)
.text$mn:00007254                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007254
.text$mn:00007254 ; =============== S U B R O U T I N E =======================================
.text$mn:00007254
.text$mn:00007254 ; Attributes: bp-based frame
.text$mn:00007254
.text$mn:00007254 ; public: wchar_t & __thiscall std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>::operator*(void)const
.text$mn:00007254                 public ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ
.text$mn:00007254 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ proc near
.text$mn:00007254                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+135p
.text$mn:00007254
.text$mn:00007254 var_4           = dword ptr -4
.text$mn:00007254
.text$mn:00007254                 push    ebp
.text$mn:00007255                 mov     ebp, esp
.text$mn:00007257                 push    ecx
.text$mn:00007258                 mov     [ebp+var_4], ecx
.text$mn:0000725B                 mov     ecx, [ebp+var_4]
.text$mn:0000725E                 call    ??D?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAB_WXZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)
.text$mn:00007263                 mov     esp, ebp
.text$mn:00007265                 pop     ebp
.text$mn:00007266                 retn
.text$mn:00007266 ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ endp
.text$mn:00007266
.text$mn:00007266 ; ---------------------------------------------------------------------------
.text$mn:00007267                 align 4
.text$mn:00007267 _text$mn        ends
.text$mn:00007267
.text$mn:00007268 ; ===========================================================================
.text$mn:00007268
.text$mn:00007268 ; Segment type: Pure code
.text$mn:00007268 ; Segment permissions: Read/Execute
.text$mn:00007268 _text$mn        segment para public 'CODE' use32
.text$mn:00007268                 assume cs:_text$mn
.text$mn:00007268                 ;org 7268h
.text$mn:00007268 ; COMDAT (pick any)
.text$mn:00007268                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007268
.text$mn:00007268 ; =============== S U B R O U T I N E =======================================
.text$mn:00007268
.text$mn:00007268 ; Attributes: bp-based frame
.text$mn:00007268
.text$mn:00007268 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_Iterator_base12 *)
.text$mn:00007268                 public ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z
.text$mn:00007268 ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z proc near
.text$mn:00007268                                         ; CODE XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+4Bp
.text$mn:00007268                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+42p
.text$mn:00007268
.text$mn:00007268 var_4           = dword ptr -4
.text$mn:00007268 arg_0           = dword ptr  8
.text$mn:00007268
.text$mn:00007268                 push    ebp
.text$mn:00007269                 mov     ebp, esp
.text$mn:0000726B                 push    ecx
.text$mn:0000726C                 mov     [ebp+var_4], ecx
.text$mn:0000726F                 mov     eax, [ebp+arg_0]
.text$mn:00007272                 push    eax             ; std::_Iterator_base12 *
.text$mn:00007273                 mov     ecx, [ebp+var_4]
.text$mn:00007276                 call    ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000727B                 mov     ecx, [ebp+var_4]
.text$mn:0000727E                 mov     edx, [ebp+arg_0]
.text$mn:00007281                 mov     eax, [ecx+8]
.text$mn:00007284                 sub     eax, [edx+8]
.text$mn:00007287                 sar     eax, 1
.text$mn:00007289                 mov     esp, ebp
.text$mn:0000728B                 pop     ebp
.text$mn:0000728C                 retn    4
.text$mn:0000728C ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z endp
.text$mn:0000728C
.text$mn:0000728C ; ---------------------------------------------------------------------------
.text$mn:0000728F                 align 10h
.text$mn:0000728F _text$mn        ends
.text$mn:0000728F
.text$mn:00007290 ; ===========================================================================
.text$mn:00007290
.text$mn:00007290 ; Segment type: Pure code
.text$mn:00007290 ; Segment permissions: Read/Execute
.text$mn:00007290 _text$mn        segment para public 'CODE' use32
.text$mn:00007290                 assume cs:_text$mn
.text$mn:00007290                 ;org 7290h
.text$mn:00007290 ; COMDAT (pick any)
.text$mn:00007290                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007290
.text$mn:00007290 ; =============== S U B R O U T I N E =======================================
.text$mn:00007290
.text$mn:00007290 ; Attributes: bp-based frame
.text$mn:00007290
.text$mn:00007290 ; int __stdcall std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_Iterator_base12 *)
.text$mn:00007290                 public ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$mn:00007290 ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
.text$mn:00007290                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+12Cp
.text$mn:00007290
.text$mn:00007290 var_28          = byte ptr -28h
.text$mn:00007290 var_1C          = dword ptr -1Ch
.text$mn:00007290 var_18          = dword ptr -18h
.text$mn:00007290 var_14          = dword ptr -14h
.text$mn:00007290 var_10          = dword ptr -10h
.text$mn:00007290 var_C           = dword ptr -0Ch
.text$mn:00007290 var_4           = dword ptr -4
.text$mn:00007290 arg_0           = dword ptr  8
.text$mn:00007290
.text$mn:00007290                 push    ebp
.text$mn:00007291                 mov     ebp, esp
.text$mn:00007293                 push    0FFFFFFFFh
.text$mn:00007295                 push    offset __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$mn:0000729A                 mov     eax, large fs:0
.text$mn:000072A0                 push    eax
.text$mn:000072A1                 sub     esp, 1Ch
.text$mn:000072A4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000072A9                 xor     eax, ebp
.text$mn:000072AB                 push    eax
.text$mn:000072AC                 lea     eax, [ebp+var_C]
.text$mn:000072AF                 mov     large fs:0, eax
.text$mn:000072B5                 mov     [ebp+var_10], ecx
.text$mn:000072B8                 mov     eax, [ebp+arg_0]
.text$mn:000072BB                 push    eax             ; std::_Iterator_base12 *
.text$mn:000072BC                 mov     ecx, [ebp+var_10]
.text$mn:000072BF                 push    ecx             ; struct std::_Iterator_base12 *
.text$mn:000072C0                 lea     ecx, [ebp+var_28]
.text$mn:000072C3                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000072C8                 mov     [ebp+var_14], eax
.text$mn:000072CB                 mov     edx, [ebp+var_14]
.text$mn:000072CE                 mov     [ebp+var_18], edx
.text$mn:000072D1                 mov     [ebp+var_4], 0
.text$mn:000072D8                 mov     ecx, [ebp+var_18]
.text$mn:000072DB                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000072E0                 mov     [ebp+var_1C], eax
.text$mn:000072E3                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000072EA                 lea     ecx, [ebp+var_28]
.text$mn:000072ED                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:000072F2                 mov     eax, [ebp+var_1C]
.text$mn:000072F5                 mov     ecx, [ebp+var_C]
.text$mn:000072F8                 mov     large fs:0, ecx
.text$mn:000072FF                 pop     ecx
.text$mn:00007300                 mov     esp, ebp
.text$mn:00007302                 pop     ebp
.text$mn:00007303                 retn    4
.text$mn:00007303 ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z endp
.text$mn:00007303
.text$mn:00007303 ; ---------------------------------------------------------------------------
.text$mn:00007306                 align 4
.text$mn:00007306 _text$mn        ends
.text$mn:00007306
.text$x:00007308 ; ===========================================================================
.text$x:00007308
.text$x:00007308 ; Segment type: Pure code
.text$x:00007308 ; Segment permissions: Read/Execute
.text$x:00007308 _text$x         segment para public 'CODE' use32
.text$x:00007308                 assume cs:_text$x
.text$x:00007308                 ;org 7308h
.text$x:00007308 ; COMDAT (pick associative to section at 7290)
.text$x:00007308                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007308
.text$x:00007308 ; =============== S U B R O U T I N E =======================================
.text$x:00007308
.text$x:00007308
.text$x:00007308 __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 proc near
.text$x:00007308                                         ; DATA XREF: .xdata$x:0000A5B8o
.text$x:00007308                 lea     ecx, [ebp-28h]
.text$x:0000730B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000730B __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0 endp
.text$x:0000730B
.text$x:00007310
.text$x:00007310 ; =============== S U B R O U T I N E =======================================
.text$x:00007310
.text$x:00007310
.text$x:00007310 __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z proc near
.text$x:00007310                                         ; DATA XREF: std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+5o
.text$x:00007310
.text$x:00007310 arg_4           = dword ptr  8
.text$x:00007310
.text$x:00007310                 mov     edx, [esp+arg_4]
.text$x:00007314                 lea     eax, [edx+0Ch]
.text$x:00007317                 mov     ecx, [edx-20h]
.text$x:0000731A                 xor     ecx, eax
.text$x:0000731C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007321                 mov     eax, offset __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.text$x:00007326                 jmp     ___CxxFrameHandler3
.text$x:00007326 __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z endp
.text$x:00007326
.text$x:00007326 ; ---------------------------------------------------------------------------
.text$x:0000732B                 align 4
.text$x:0000732B _text$x         ends
.text$x:0000732B
.text$mn:0000732C ; ===========================================================================
.text$mn:0000732C
.text$mn:0000732C ; Segment type: Pure code
.text$mn:0000732C ; Segment permissions: Read/Execute
.text$mn:0000732C _text$mn        segment para public 'CODE' use32
.text$mn:0000732C                 assume cs:_text$mn
.text$mn:0000732C                 ;org 732Ch
.text$mn:0000732C ; COMDAT (pick any)
.text$mn:0000732C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000732C
.text$mn:0000732C ; =============== S U B R O U T I N E =======================================
.text$mn:0000732C
.text$mn:0000732C ; Attributes: bp-based frame
.text$mn:0000732C
.text$mn:0000732C ; public: virtual void * __thiscall std::_Generic_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:0000732C                 public ??_G_Generic_error_category@std@@UAEPAXI@Z
.text$mn:0000732C ??_G_Generic_error_category@std@@UAEPAXI@Z proc near
.text$mn:0000732C
.text$mn:0000732C var_4           = dword ptr -4
.text$mn:0000732C arg_0           = dword ptr  8
.text$mn:0000732C
.text$mn:0000732C                 push    ebp
.text$mn:0000732D                 mov     ebp, esp
.text$mn:0000732F                 push    ecx
.text$mn:00007330                 mov     [ebp+var_4], ecx
.text$mn:00007333                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007336                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$mn:0000733B                 mov     eax, [ebp+arg_0]
.text$mn:0000733E                 and     eax, 1
.text$mn:00007341                 jz      short loc_734F
.text$mn:00007343                 mov     ecx, [ebp+var_4]
.text$mn:00007346                 push    ecx             ; void *
.text$mn:00007347                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:0000734C                 add     esp, 4
.text$mn:0000734F
.text$mn:0000734F loc_734F:                               ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000734F                 mov     eax, [ebp+var_4]
.text$mn:00007352                 mov     esp, ebp
.text$mn:00007354                 pop     ebp
.text$mn:00007355                 retn    4
.text$mn:00007355 ??_G_Generic_error_category@std@@UAEPAXI@Z endp
.text$mn:00007355
.text$mn:00007355 _text$mn        ends
.text$mn:00007355
.text$mn:00007358 ; ===========================================================================
.text$mn:00007358
.text$mn:00007358 ; Segment type: Pure code
.text$mn:00007358 ; Segment permissions: Read/Execute
.text$mn:00007358 _text$mn        segment para public 'CODE' use32
.text$mn:00007358                 assume cs:_text$mn
.text$mn:00007358                 ;org 7358h
.text$mn:00007358 ; COMDAT (pick any)
.text$mn:00007358                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007358
.text$mn:00007358 ; =============== S U B R O U T I N E =======================================
.text$mn:00007358
.text$mn:00007358 ; Attributes: bp-based frame
.text$mn:00007358
.text$mn:00007358 ; public: virtual void * __thiscall std::_Iostream_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007358                 public ??_G_Iostream_error_category@std@@UAEPAXI@Z
.text$mn:00007358 ??_G_Iostream_error_category@std@@UAEPAXI@Z proc near
.text$mn:00007358
.text$mn:00007358 var_4           = dword ptr -4
.text$mn:00007358 arg_0           = dword ptr  8
.text$mn:00007358
.text$mn:00007358                 push    ebp
.text$mn:00007359                 mov     ebp, esp
.text$mn:0000735B                 push    ecx
.text$mn:0000735C                 mov     [ebp+var_4], ecx
.text$mn:0000735F                 mov     ecx, [ebp+var_4] ; this
.text$mn:00007362                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$mn:00007367                 mov     eax, [ebp+arg_0]
.text$mn:0000736A                 and     eax, 1
.text$mn:0000736D                 jz      short loc_737B
.text$mn:0000736F                 mov     ecx, [ebp+var_4]
.text$mn:00007372                 push    ecx             ; void *
.text$mn:00007373                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00007378                 add     esp, 4
.text$mn:0000737B
.text$mn:0000737B loc_737B:                               ; CODE XREF: std::_Iostream_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:0000737B                 mov     eax, [ebp+var_4]
.text$mn:0000737E                 mov     esp, ebp
.text$mn:00007380                 pop     ebp
.text$mn:00007381                 retn    4
.text$mn:00007381 ??_G_Iostream_error_category@std@@UAEPAXI@Z endp
.text$mn:00007381
.text$mn:00007381 _text$mn        ends
.text$mn:00007381
.text$mn:00007384 ; ===========================================================================
.text$mn:00007384
.text$mn:00007384 ; Segment type: Pure code
.text$mn:00007384 ; Segment permissions: Read/Execute
.text$mn:00007384 _text$mn        segment para public 'CODE' use32
.text$mn:00007384                 assume cs:_text$mn
.text$mn:00007384                 ;org 7384h
.text$mn:00007384 ; COMDAT (pick any)
.text$mn:00007384                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007384
.text$mn:00007384 ; =============== S U B R O U T I N E =======================================
.text$mn:00007384
.text$mn:00007384 ; Attributes: bp-based frame
.text$mn:00007384
.text$mn:00007384 ; public: virtual void * __thiscall std::_System_error_category::`scalar deleting destructor'(unsigned int)
.text$mn:00007384                 public ??_G_System_error_category@std@@UAEPAXI@Z
.text$mn:00007384 ??_G_System_error_category@std@@UAEPAXI@Z proc near
.text$mn:00007384
.text$mn:00007384 var_4           = dword ptr -4
.text$mn:00007384 arg_0           = dword ptr  8
.text$mn:00007384
.text$mn:00007384                 push    ebp
.text$mn:00007385                 mov     ebp, esp
.text$mn:00007387                 push    ecx
.text$mn:00007388                 mov     [ebp+var_4], ecx
.text$mn:0000738B                 mov     ecx, [ebp+var_4] ; this
.text$mn:0000738E                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$mn:00007393                 mov     eax, [ebp+arg_0]
.text$mn:00007396                 and     eax, 1
.text$mn:00007399                 jz      short loc_73A7
.text$mn:0000739B                 mov     ecx, [ebp+var_4]
.text$mn:0000739E                 push    ecx             ; void *
.text$mn:0000739F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000073A4                 add     esp, 4
.text$mn:000073A7
.text$mn:000073A7 loc_73A7:                               ; CODE XREF: std::_System_error_category::`scalar deleting destructor'(uint)+15j
.text$mn:000073A7                 mov     eax, [ebp+var_4]
.text$mn:000073AA                 mov     esp, ebp
.text$mn:000073AC                 pop     ebp
.text$mn:000073AD                 retn    4
.text$mn:000073AD ??_G_System_error_category@std@@UAEPAXI@Z endp
.text$mn:000073AD
.text$mn:000073AD _text$mn        ends
.text$mn:000073AD
.text$mn:000073B0 ; ===========================================================================
.text$mn:000073B0
.text$mn:000073B0 ; Segment type: Pure code
.text$mn:000073B0 ; Segment permissions: Read/Execute
.text$mn:000073B0 _text$mn        segment para public 'CODE' use32
.text$mn:000073B0                 assume cs:_text$mn
.text$mn:000073B0                 ;org 73B0h
.text$mn:000073B0 ; COMDAT (pick any)
.text$mn:000073B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000073B0
.text$mn:000073B0 ; =============== S U B R O U T I N E =======================================
.text$mn:000073B0
.text$mn:000073B0 ; Attributes: bp-based frame
.text$mn:000073B0
.text$mn:000073B0 ; public: virtual void * __thiscall std::error_category::`scalar deleting destructor'(unsigned int)
.text$mn:000073B0                 public ??_Gerror_category@std@@UAEPAXI@Z
.text$mn:000073B0 ??_Gerror_category@std@@UAEPAXI@Z proc near
.text$mn:000073B0
.text$mn:000073B0 var_4           = dword ptr -4
.text$mn:000073B0 arg_0           = dword ptr  8
.text$mn:000073B0
.text$mn:000073B0                 push    ebp
.text$mn:000073B1                 mov     ebp, esp
.text$mn:000073B3                 push    ecx
.text$mn:000073B4                 mov     [ebp+var_4], ecx
.text$mn:000073B7                 mov     ecx, [ebp+var_4] ; this
.text$mn:000073BA                 call    ??1error_category@std@@UAE@XZ ; std::error_category::~error_category(void)
.text$mn:000073BF                 mov     eax, [ebp+arg_0]
.text$mn:000073C2                 and     eax, 1
.text$mn:000073C5                 jz      short loc_73D3
.text$mn:000073C7                 mov     ecx, [ebp+var_4]
.text$mn:000073CA                 push    ecx             ; void *
.text$mn:000073CB                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:000073D0                 add     esp, 4
.text$mn:000073D3
.text$mn:000073D3 loc_73D3:                               ; CODE XREF: std::error_category::`scalar deleting destructor'(uint)+15j
.text$mn:000073D3                 mov     eax, [ebp+var_4]
.text$mn:000073D6                 mov     esp, ebp
.text$mn:000073D8                 pop     ebp
.text$mn:000073D9                 retn    4
.text$mn:000073D9 ??_Gerror_category@std@@UAEPAXI@Z endp
.text$mn:000073D9
.text$mn:000073D9 _text$mn        ends
.text$mn:000073D9
.text$di:000073DC ; ===========================================================================
.text$di:000073DC
.text$di:000073DC ; Segment type: Pure code
.text$di:000073DC ; Segment permissions: Read/Execute
.text$di:000073DC _text$di        segment para public 'CODE' use32
.text$di:000073DC                 assume cs:_text$di
.text$di:000073DC                 ;org 73DCh
.text$di:000073DC ; COMDAT (pick any)
.text$di:000073DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000073DC
.text$di:000073DC ; =============== S U B R O U T I N E =======================================
.text$di:000073DC
.text$di:000073DC ; Attributes: bp-based frame
.text$di:000073DC
.text$di:000073DC ; void __cdecl `dynamic initializer for 'public: static class std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.text$di:000073DC ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$di:000073DC                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Generic_object$initializer$)(void)o
.text$di:000073DC                 push    ebp
.text$di:000073DD                 mov     ebp, esp
.text$di:000073DF                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$di:000073E4                 call    ??0_Generic_error_category@std@@QAE@XZ ; std::_Generic_error_category::_Generic_error_category(void)
.text$di:000073E9                 push    offset ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:000073EE                 call    _atexit
.text$di:000073F3                 add     esp, 4
.text$di:000073F6                 pop     ebp
.text$di:000073F7                 retn
.text$di:000073F7 ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$di:000073F7
.text$di:000073F7 _text$di        ends
.text$di:000073F7
.text$di:000073F8 ; ===========================================================================
.text$di:000073F8
.text$di:000073F8 ; Segment type: Pure code
.text$di:000073F8 ; Segment permissions: Read/Execute
.text$di:000073F8 _text$di        segment para public 'CODE' use32
.text$di:000073F8                 assume cs:_text$di
.text$di:000073F8                 ;org 73F8h
.text$di:000073F8 ; COMDAT (pick any)
.text$di:000073F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000073F8
.text$di:000073F8 ; =============== S U B R O U T I N E =======================================
.text$di:000073F8
.text$di:000073F8 ; Attributes: bp-based frame
.text$di:000073F8
.text$di:000073F8 ; void __cdecl `dynamic initializer for 'public: static class std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.text$di:000073F8 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$di:000073F8                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_Iostream_object$initializer$)(void)o
.text$di:000073F8                 push    ebp
.text$di:000073F9                 mov     ebp, esp
.text$di:000073FB                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$di:00007400                 call    ??0_Iostream_error_category@std@@QAE@XZ ; std::_Iostream_error_category::_Iostream_error_category(void)
.text$di:00007405                 push    offset ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:0000740A                 call    _atexit
.text$di:0000740F                 add     esp, 4
.text$di:00007412                 pop     ebp
.text$di:00007413                 retn
.text$di:00007413 ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$di:00007413
.text$di:00007413 _text$di        ends
.text$di:00007413
.text$di:00007414 ; ===========================================================================
.text$di:00007414
.text$di:00007414 ; Segment type: Pure code
.text$di:00007414 ; Segment permissions: Read/Execute
.text$di:00007414 _text$di        segment para public 'CODE' use32
.text$di:00007414                 assume cs:_text$di
.text$di:00007414                 ;org 7414h
.text$di:00007414 ; COMDAT (pick any)
.text$di:00007414                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007414
.text$di:00007414 ; =============== S U B R O U T I N E =======================================
.text$di:00007414
.text$di:00007414 ; Attributes: bp-based frame
.text$di:00007414
.text$di:00007414 ; void __cdecl `dynamic initializer for 'public: static class std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.text$di:00007414 ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$di:00007414                                         ; DATA XREF: .CRT$XCU:void (*std::_Error_objects<int>::_System_object$initializer$)(void)o
.text$di:00007414                 push    ebp
.text$di:00007415                 mov     ebp, esp
.text$di:00007417                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$di:0000741C                 call    ??0_System_error_category@std@@QAE@XZ ; std::_System_error_category::_System_error_category(void)
.text$di:00007421                 push    offset ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; void (__cdecl *)()
.text$di:00007426                 call    _atexit
.text$di:0000742B                 add     esp, 4
.text$di:0000742E                 pop     ebp
.text$di:0000742F                 retn
.text$di:0000742F ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$di:0000742F
.text$di:0000742F _text$di        ends
.text$di:0000742F
.text$di:00007430 ; ===========================================================================
.text$di:00007430
.text$di:00007430 ; Segment type: Pure code
.text$di:00007430 ; Segment permissions: Read/Execute
.text$di:00007430 _text$di        segment para public 'CODE' use32
.text$di:00007430                 assume cs:_text$di
.text$di:00007430                 ;org 7430h
.text$di:00007430 ; COMDAT (pick any)
.text$di:00007430                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007430
.text$di:00007430 ; =============== S U B R O U T I N E =======================================
.text$di:00007430
.text$di:00007430 ; Attributes: bp-based frame
.text$di:00007430
.text$di:00007430 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id''(void)
.text$di:00007430 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007430                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id$initializer$)(void)o
.text$di:00007430                 push    ebp
.text$di:00007431                 mov     ebp, esp
.text$di:00007433                 push    0               ; unsigned int
.text$di:00007435                 mov     ecx, offset ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:0000743A                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:0000743F                 pop     ebp
.text$di:00007440                 retn
.text$di:00007440 ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00007440
.text$di:00007440 ; ---------------------------------------------------------------------------
.text$di:00007441                 align 4
.text$di:00007441 _text$di        ends
.text$di:00007441
.text$di:00007444 ; ===========================================================================
.text$di:00007444
.text$di:00007444 ; Segment type: Pure code
.text$di:00007444 ; Segment permissions: Read/Execute
.text$di:00007444 _text$di        segment para public 'CODE' use32
.text$di:00007444                 assume cs:_text$di
.text$di:00007444                 ;org 7444h
.text$di:00007444 ; COMDAT (pick any)
.text$di:00007444                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007444
.text$di:00007444 ; =============== S U B R O U T I N E =======================================
.text$di:00007444
.text$di:00007444 ; Attributes: bp-based frame
.text$di:00007444
.text$di:00007444 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id''(void)
.text$di:00007444 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007444                                         ; DATA XREF: .CRT$XCU:void (*std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id$initializer$)(void)o
.text$di:00007444                 push    ebp
.text$di:00007445                 mov     ebp, esp
.text$di:00007447                 push    0               ; unsigned int
.text$di:00007449                 mov     ecx, offset ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A ; this
.text$di:0000744E                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00007453                 pop     ebp
.text$di:00007454                 retn
.text$di:00007454 ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00007454
.text$di:00007454 ; ---------------------------------------------------------------------------
.text$di:00007455                 align 4
.text$di:00007455 _text$di        ends
.text$di:00007455
.text$di:00007458 ; ===========================================================================
.text$di:00007458
.text$di:00007458 ; Segment type: Pure code
.text$di:00007458 ; Segment permissions: Read/Execute
.text$di:00007458 _text$di        segment para public 'CODE' use32
.text$di:00007458                 assume cs:_text$di
.text$di:00007458                 ;org 7458h
.text$di:00007458 ; COMDAT (pick any)
.text$di:00007458                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007458
.text$di:00007458 ; =============== S U B R O U T I N E =======================================
.text$di:00007458
.text$di:00007458 ; Attributes: bp-based frame
.text$di:00007458
.text$di:00007458 ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<char>::id''(void)
.text$di:00007458 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:00007458                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<char>::id$initializer$)(void)o
.text$di:00007458                 push    ebp
.text$di:00007459                 mov     ebp, esp
.text$di:0000745B                 push    0               ; unsigned int
.text$di:0000745D                 mov     ecx, offset ?id@?$numpunct@D@std@@2V0locale@2@A ; this
.text$di:00007462                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:00007467                 pop     ebp
.text$di:00007468                 retn
.text$di:00007468 ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ endp
.text$di:00007468
.text$di:00007468 ; ---------------------------------------------------------------------------
.text$di:00007469                 align 4
.text$di:00007469 _text$di        ends
.text$di:00007469
.text$di:0000746C ; ===========================================================================
.text$di:0000746C
.text$di:0000746C ; Segment type: Pure code
.text$di:0000746C ; Segment permissions: Read/Execute
.text$di:0000746C _text$di        segment para public 'CODE' use32
.text$di:0000746C                 assume cs:_text$di
.text$di:0000746C                 ;org 746Ch
.text$di:0000746C ; COMDAT (pick any)
.text$di:0000746C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:0000746C
.text$di:0000746C ; =============== S U B R O U T I N E =======================================
.text$di:0000746C
.text$di:0000746C ; Attributes: bp-based frame
.text$di:0000746C
.text$di:0000746C ; void __cdecl `dynamic initializer for 'public: static class std::locale::id std::numpunct<wchar_t>::id''(void)
.text$di:0000746C ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ proc near
.text$di:0000746C                                         ; DATA XREF: .CRT$XCU:void (*std::numpunct<wchar_t>::id$initializer$)(void)o
.text$di:0000746C                 push    ebp
.text$di:0000746D                 mov     ebp, esp
.text$di:0000746F                 push    0               ; unsigned int
.text$di:00007471                 mov     ecx, offset ?id@?$numpunct@_W@std@@2V0locale@2@A ; this
.text$di:00007476                 call    ??0id@locale@std@@QAE@I@Z ; std::locale::id::id(uint)
.text$di:0000747B                 pop     ebp
.text$di:0000747C                 retn
.text$di:0000747C ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ endp
.text$di:0000747C
.text$di:0000747C ; ---------------------------------------------------------------------------
.text$di:0000747D                 align 10h
.text$di:0000747D _text$di        ends
.text$di:0000747D
.text$di:00007480 ; ===========================================================================
.text$di:00007480
.text$di:00007480 ; Segment type: Pure code
.text$di:00007480 ; Segment permissions: Read/Execute
.text$di:00007480 _text$di        segment para public 'CODE' use32
.text$di:00007480                 assume cs:_text$di
.text$di:00007480                 ;org 7480h
.text$di:00007480 ; COMDAT (pick any)
.text$di:00007480                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007480
.text$di:00007480 ; =============== S U B R O U T I N E =======================================
.text$di:00007480
.text$di:00007480 ; Attributes: bp-based frame
.text$di:00007480
.text$di:00007480 ; void __cdecl std::`dynamic initializer for '_Tuple_alloc''(void)
.text$di:00007480 ??__E_Tuple_alloc@std@@YAXXZ proc near  ; DATA XREF: .CRT$XCU:__Tuple_alloc$initializer$o
.text$di:00007480
.text$di:00007480 var_1           = byte ptr -1
.text$di:00007480
.text$di:00007480                 push    ebp
.text$di:00007481                 mov     ebp, esp
.text$di:00007483                 push    ecx
.text$di:00007484                 xor     eax, eax
.text$di:00007486                 mov     [ebp+var_1], al
.text$di:00007489                 mov     esp, ebp
.text$di:0000748B                 pop     ebp
.text$di:0000748C                 retn
.text$di:0000748C ??__E_Tuple_alloc@std@@YAXXZ endp
.text$di:0000748C
.text$di:0000748C ; ---------------------------------------------------------------------------
.text$di:0000748D                 align 10h
.text$di:0000748D _text$di        ends
.text$di:0000748D
.text$di:00007490 ; ===========================================================================
.text$di:00007490
.text$di:00007490 ; Segment type: Pure code
.text$di:00007490 ; Segment permissions: Read/Execute
.text$di:00007490 _text$di        segment para public 'CODE' use32
.text$di:00007490                 assume cs:_text$di
.text$di:00007490                 ;org 7490h
.text$di:00007490 ; COMDAT (pick any)
.text$di:00007490                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:00007490
.text$di:00007490 ; =============== S U B R O U T I N E =======================================
.text$di:00007490
.text$di:00007490 ; Attributes: bp-based frame
.text$di:00007490
.text$di:00007490 ; void __cdecl std::`dynamic initializer for 'allocator_arg''(void)
.text$di:00007490 ??__Eallocator_arg@std@@YAXXZ proc near ; DATA XREF: .CRT$XCU:_allocator_arg$initializer$o
.text$di:00007490
.text$di:00007490 var_1           = byte ptr -1
.text$di:00007490
.text$di:00007490                 push    ebp
.text$di:00007491                 mov     ebp, esp
.text$di:00007493                 push    ecx
.text$di:00007494                 xor     eax, eax
.text$di:00007496                 mov     [ebp+var_1], al
.text$di:00007499                 mov     esp, ebp
.text$di:0000749B                 pop     ebp
.text$di:0000749C                 retn
.text$di:0000749C ??__Eallocator_arg@std@@YAXXZ endp
.text$di:0000749C
.text$di:0000749C ; ---------------------------------------------------------------------------
.text$di:0000749D                 align 10h
.text$di:0000749D _text$di        ends
.text$di:0000749D
.text$di:000074A0 ; ===========================================================================
.text$di:000074A0
.text$di:000074A0 ; Segment type: Pure code
.text$di:000074A0 ; Segment permissions: Read/Execute
.text$di:000074A0 _text$di        segment para public 'CODE' use32
.text$di:000074A0                 assume cs:_text$di
.text$di:000074A0                 ;org 74A0h
.text$di:000074A0 ; COMDAT (pick any)
.text$di:000074A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000074A0
.text$di:000074A0 ; =============== S U B R O U T I N E =======================================
.text$di:000074A0
.text$di:000074A0 ; Attributes: bp-based frame
.text$di:000074A0
.text$di:000074A0 ; void __cdecl std::`dynamic initializer for 'ignore''(void)
.text$di:000074A0 ??__Eignore@std@@YAXXZ proc near        ; DATA XREF: .CRT$XCU:_ignore$initializer$o
.text$di:000074A0                 push    ebp
.text$di:000074A1                 mov     ebp, esp
.text$di:000074A3                 mov     ecx, offset _ignore ; this
.text$di:000074A8                 call    ??0_Ignore@std@@QAE@XZ ; std::_Ignore::_Ignore(void)
.text$di:000074AD                 pop     ebp
.text$di:000074AE                 retn
.text$di:000074AE ??__Eignore@std@@YAXXZ endp
.text$di:000074AE
.text$di:000074AE ; ---------------------------------------------------------------------------
.text$di:000074AF                 align 10h
.text$di:000074AF _text$di        ends
.text$di:000074AF
.text$di:000074B0 ; ===========================================================================
.text$di:000074B0
.text$di:000074B0 ; Segment type: Pure code
.text$di:000074B0 ; Segment permissions: Read/Execute
.text$di:000074B0 _text$di        segment para public 'CODE' use32
.text$di:000074B0                 assume cs:_text$di
.text$di:000074B0                 ;org 74B0h
.text$di:000074B0 ; COMDAT (pick any)
.text$di:000074B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$di:000074B0
.text$di:000074B0 ; =============== S U B R O U T I N E =======================================
.text$di:000074B0
.text$di:000074B0 ; Attributes: bp-based frame
.text$di:000074B0
.text$di:000074B0 ; void __cdecl std::`dynamic initializer for 'piecewise_construct''(void)
.text$di:000074B0 ??__Epiecewise_construct@std@@YAXXZ proc near
.text$di:000074B0                                         ; DATA XREF: .CRT$XCU:_piecewise_construct$initializer$o
.text$di:000074B0
.text$di:000074B0 var_1           = byte ptr -1
.text$di:000074B0
.text$di:000074B0                 push    ebp
.text$di:000074B1                 mov     ebp, esp
.text$di:000074B3                 push    ecx
.text$di:000074B4                 xor     eax, eax
.text$di:000074B6                 mov     [ebp+var_1], al
.text$di:000074B9                 mov     esp, ebp
.text$di:000074BB                 pop     ebp
.text$di:000074BC                 retn
.text$di:000074BC ??__Epiecewise_construct@std@@YAXXZ endp
.text$di:000074BC
.text$di:000074BC ; ---------------------------------------------------------------------------
.text$di:000074BD                 align 10h
.text$di:000074BD _text$di        ends
.text$di:000074BD
.text$yd:000074C0 ; ===========================================================================
.text$yd:000074C0
.text$yd:000074C0 ; Segment type: Pure code
.text$yd:000074C0 ; Segment permissions: Read/Execute
.text$yd:000074C0 _text$yd        segment para public 'CODE' use32
.text$yd:000074C0                 assume cs:_text$yd
.text$yd:000074C0                 ;org 74C0h
.text$yd:000074C0 ; COMDAT (pick any)
.text$yd:000074C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:000074C0
.text$yd:000074C0 ; =============== S U B R O U T I N E =======================================
.text$yd:000074C0
.text$yd:000074C0 ; Attributes: bp-based frame
.text$yd:000074C0
.text$yd:000074C0 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Generic_error_category std::_Error_objects<int>::_Generic_object''()
.text$yd:000074C0 ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ proc near
.text$yd:000074C0                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+Do
.text$yd:000074C0                 push    ebp
.text$yd:000074C1                 mov     ebp, esp
.text$yd:000074C3                 mov     ecx, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; this
.text$yd:000074C8                 call    ??1_Generic_error_category@std@@UAE@XZ ; std::_Generic_error_category::~_Generic_error_category(void)
.text$yd:000074CD                 pop     ebp
.text$yd:000074CE                 retn
.text$yd:000074CE ??__F?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ endp
.text$yd:000074CE
.text$yd:000074CE ; ---------------------------------------------------------------------------
.text$yd:000074CF                 align 10h
.text$yd:000074CF _text$yd        ends
.text$yd:000074CF
.text$yd:000074D0 ; ===========================================================================
.text$yd:000074D0
.text$yd:000074D0 ; Segment type: Pure code
.text$yd:000074D0 ; Segment permissions: Read/Execute
.text$yd:000074D0 _text$yd        segment para public 'CODE' use32
.text$yd:000074D0                 assume cs:_text$yd
.text$yd:000074D0                 ;org 74D0h
.text$yd:000074D0 ; COMDAT (pick any)
.text$yd:000074D0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:000074D0
.text$yd:000074D0 ; =============== S U B R O U T I N E =======================================
.text$yd:000074D0
.text$yd:000074D0 ; Attributes: bp-based frame
.text$yd:000074D0
.text$yd:000074D0 ; void __cdecl `dynamic atexit destructor for 'public: static std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''()
.text$yd:000074D0 ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ proc near
.text$yd:000074D0                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+Do
.text$yd:000074D0                 push    ebp
.text$yd:000074D1                 mov     ebp, esp
.text$yd:000074D3                 mov     ecx, offset ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A ; this
.text$yd:000074D8                 call    ??1_Iostream_error_category@std@@UAE@XZ ; std::_Iostream_error_category::~_Iostream_error_category(void)
.text$yd:000074DD                 pop     ebp
.text$yd:000074DE                 retn
.text$yd:000074DE ??__F?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ endp
.text$yd:000074DE
.text$yd:000074DE ; ---------------------------------------------------------------------------
.text$yd:000074DF                 align 10h
.text$yd:000074DF _text$yd        ends
.text$yd:000074DF
.text$yd:000074E0 ; ===========================================================================
.text$yd:000074E0
.text$yd:000074E0 ; Segment type: Pure code
.text$yd:000074E0 ; Segment permissions: Read/Execute
.text$yd:000074E0 _text$yd        segment para public 'CODE' use32
.text$yd:000074E0                 assume cs:_text$yd
.text$yd:000074E0                 ;org 74E0h
.text$yd:000074E0 ; COMDAT (pick any)
.text$yd:000074E0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$yd:000074E0
.text$yd:000074E0 ; =============== S U B R O U T I N E =======================================
.text$yd:000074E0
.text$yd:000074E0 ; Attributes: bp-based frame
.text$yd:000074E0
.text$yd:000074E0 ; void __cdecl `dynamic atexit destructor for 'public: static std::_System_error_category std::_Error_objects<int>::_System_object''()
.text$yd:000074E0 ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ proc near
.text$yd:000074E0                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+Do
.text$yd:000074E0                 push    ebp
.text$yd:000074E1                 mov     ebp, esp
.text$yd:000074E3                 mov     ecx, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; this
.text$yd:000074E8                 call    ??1_System_error_category@std@@UAE@XZ ; std::_System_error_category::~_System_error_category(void)
.text$yd:000074ED                 pop     ebp
.text$yd:000074EE                 retn
.text$yd:000074EE ??__F?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ endp
.text$yd:000074EE
.text$yd:000074EE ; ---------------------------------------------------------------------------
.text$yd:000074EF                 align 10h
.text$yd:000074EF _text$yd        ends
.text$yd:000074EF
.text$mn:000074F0 ; ===========================================================================
.text$mn:000074F0
.text$mn:000074F0 ; Segment type: Pure code
.text$mn:000074F0 ; Segment permissions: Read/Execute
.text$mn:000074F0 _text$mn        segment para public 'CODE' use32
.text$mn:000074F0                 assume cs:_text$mn
.text$mn:000074F0                 ;org 74F0h
.text$mn:000074F0 ; COMDAT (pick any)
.text$mn:000074F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000074F0
.text$mn:000074F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000074F0
.text$mn:000074F0 ; Attributes: bp-based frame
.text$mn:000074F0
.text$mn:000074F0 ; const char *__thiscall TiXmlDeclarationA::Encoding(TiXmlDeclarationA *__hidden this)
.text$mn:000074F0                 public ?Encoding@TiXmlDeclarationA@@QBEPBDXZ
.text$mn:000074F0 ?Encoding@TiXmlDeclarationA@@QBEPBDXZ proc near
.text$mn:000074F0                                         ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+116p
.text$mn:000074F0
.text$mn:000074F0 var_4           = dword ptr -4
.text$mn:000074F0
.text$mn:000074F0                 push    ebp
.text$mn:000074F1                 mov     ebp, esp
.text$mn:000074F3                 push    ecx
.text$mn:000074F4                 mov     [ebp+var_4], ecx
.text$mn:000074F7                 mov     ecx, [ebp+var_4]
.text$mn:000074FA                 add     ecx, 60h ; '`'
.text$mn:000074FD                 call    ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)
.text$mn:00007502                 mov     esp, ebp
.text$mn:00007504                 pop     ebp
.text$mn:00007505                 retn
.text$mn:00007505 ?Encoding@TiXmlDeclarationA@@QBEPBDXZ endp
.text$mn:00007505
.text$mn:00007505 ; ---------------------------------------------------------------------------
.text$mn:00007506                 align 4
.text$mn:00007506 _text$mn        ends
.text$mn:00007506
.text$mn:00007508 ; ===========================================================================
.text$mn:00007508
.text$mn:00007508 ; Segment type: Pure code
.text$mn:00007508 ; Segment permissions: Read/Execute
.text$mn:00007508 _text$mn        segment para public 'CODE' use32
.text$mn:00007508                 assume cs:_text$mn
.text$mn:00007508                 ;org 7508h
.text$mn:00007508 ; COMDAT (pick any)
.text$mn:00007508                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007508
.text$mn:00007508 ; =============== S U B R O U T I N E =======================================
.text$mn:00007508
.text$mn:00007508 ; Attributes: bp-based frame
.text$mn:00007508
.text$mn:00007508 ; struct TiXmlNodeA *__thiscall TiXmlNodeA::FirstChild(TiXmlNodeA *__hidden this)
.text$mn:00007508                 public ?FirstChild@TiXmlNodeA@@QBEPAV1@XZ
.text$mn:00007508 ?FirstChild@TiXmlNodeA@@QBEPAV1@XZ proc near
.text$mn:00007508                                         ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+FEp
.text$mn:00007508
.text$mn:00007508 var_4           = dword ptr -4
.text$mn:00007508
.text$mn:00007508                 push    ebp
.text$mn:00007509                 mov     ebp, esp
.text$mn:0000750B                 push    ecx
.text$mn:0000750C                 mov     [ebp+var_4], ecx
.text$mn:0000750F                 mov     eax, [ebp+var_4]
.text$mn:00007512                 mov     eax, [eax+14h]
.text$mn:00007515                 mov     esp, ebp
.text$mn:00007517                 pop     ebp
.text$mn:00007518                 retn
.text$mn:00007518 ?FirstChild@TiXmlNodeA@@QBEPAV1@XZ endp
.text$mn:00007518
.text$mn:00007518 ; ---------------------------------------------------------------------------
.text$mn:00007519                 align 4
.text$mn:00007519 _text$mn        ends
.text$mn:00007519
.text$mn:0000751C ; ===========================================================================
.text$mn:0000751C
.text$mn:0000751C ; Segment type: Pure code
.text$mn:0000751C ; Segment permissions: Read/Execute
.text$mn:0000751C _text$mn        segment para public 'CODE' use32
.text$mn:0000751C                 assume cs:_text$mn
.text$mn:0000751C                 ;org 751Ch
.text$mn:0000751C ; COMDAT (pick any)
.text$mn:0000751C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000751C
.text$mn:0000751C ; =============== S U B R O U T I N E =======================================
.text$mn:0000751C
.text$mn:0000751C ; Attributes: bp-based frame
.text$mn:0000751C
.text$mn:0000751C ; struct TiXmlNodeA *__thiscall TiXmlNodeA::NextSibling(TiXmlNodeA *__hidden this)
.text$mn:0000751C                 public ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ
.text$mn:0000751C ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ proc near
.text$mn:0000751C                                         ; CODE XREF: NativeLangSpeaker::searchDlgNode(TiXmlNodeA *,char const *)+33p
.text$mn:0000751C
.text$mn:0000751C var_4           = dword ptr -4
.text$mn:0000751C
.text$mn:0000751C                 push    ebp
.text$mn:0000751D                 mov     ebp, esp
.text$mn:0000751F                 push    ecx
.text$mn:00007520                 mov     [ebp+var_4], ecx
.text$mn:00007523                 mov     eax, [ebp+var_4]
.text$mn:00007526                 mov     eax, [eax+3Ch]
.text$mn:00007529                 mov     esp, ebp
.text$mn:0000752B                 pop     ebp
.text$mn:0000752C                 retn
.text$mn:0000752C ?NextSibling@TiXmlNodeA@@QBEPAV1@XZ endp
.text$mn:0000752C
.text$mn:0000752C ; ---------------------------------------------------------------------------
.text$mn:0000752D                 align 10h
.text$mn:0000752D _text$mn        ends
.text$mn:0000752D
.text$mn:00007530 ; ===========================================================================
.text$mn:00007530
.text$mn:00007530 ; Segment type: Pure code
.text$mn:00007530 ; Segment permissions: Read/Execute
.text$mn:00007530 _text$mn        segment para public 'CODE' use32
.text$mn:00007530                 assume cs:_text$mn
.text$mn:00007530                 ;org 7530h
.text$mn:00007530 ; COMDAT (pick any)
.text$mn:00007530                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007530
.text$mn:00007530 ; =============== S U B R O U T I N E =======================================
.text$mn:00007530
.text$mn:00007530 ; Attributes: bp-based frame
.text$mn:00007530
.text$mn:00007530 ; struct TiXmlDeclarationA *__thiscall TiXmlNodeA::ToDeclaration(TiXmlNodeA *__hidden this)
.text$mn:00007530                 public ?ToDeclaration@TiXmlNodeA@@QBEPAVTiXmlDeclarationA@@XZ
.text$mn:00007530 ?ToDeclaration@TiXmlNodeA@@QBEPAVTiXmlDeclarationA@@XZ proc near
.text$mn:00007530                                         ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+105p
.text$mn:00007530
.text$mn:00007530 var_8           = dword ptr -8
.text$mn:00007530 var_4           = dword ptr -4
.text$mn:00007530
.text$mn:00007530                 push    ebp
.text$mn:00007531                 mov     ebp, esp
.text$mn:00007533                 sub     esp, 8
.text$mn:00007536                 mov     [ebp+var_4], ecx
.text$mn:00007539                 cmp     [ebp+var_4], 0
.text$mn:0000753D                 jz      short loc_7550
.text$mn:0000753F                 mov     eax, [ebp+var_4]
.text$mn:00007542                 cmp     dword ptr [eax+10h], 5
.text$mn:00007546                 jnz     short loc_7550
.text$mn:00007548                 mov     ecx, [ebp+var_4]
.text$mn:0000754B                 mov     [ebp+var_8], ecx
.text$mn:0000754E                 jmp     short loc_7557
.text$mn:00007550 ; ---------------------------------------------------------------------------
.text$mn:00007550
.text$mn:00007550 loc_7550:                               ; CODE XREF: TiXmlNodeA::ToDeclaration(void)+Dj
.text$mn:00007550                                         ; TiXmlNodeA::ToDeclaration(void)+16j
.text$mn:00007550                 mov     [ebp+var_8], 0
.text$mn:00007557
.text$mn:00007557 loc_7557:                               ; CODE XREF: TiXmlNodeA::ToDeclaration(void)+1Ej
.text$mn:00007557                 mov     eax, [ebp+var_8]
.text$mn:0000755A                 mov     esp, ebp
.text$mn:0000755C                 pop     ebp
.text$mn:0000755D                 retn
.text$mn:0000755D ?ToDeclaration@TiXmlNodeA@@QBEPAVTiXmlDeclarationA@@XZ endp
.text$mn:0000755D
.text$mn:0000755D ; ---------------------------------------------------------------------------
.text$mn:0000755E                 align 10h
.text$mn:0000755E _text$mn        ends
.text$mn:0000755E
.text$mn:00007560 ; ===========================================================================
.text$mn:00007560
.text$mn:00007560 ; Segment type: Pure code
.text$mn:00007560 ; Segment permissions: Read/Execute
.text$mn:00007560 _text$mn        segment para public 'CODE' use32
.text$mn:00007560                 assume cs:_text$mn
.text$mn:00007560                 ;org 7560h
.text$mn:00007560 ; COMDAT (pick any)
.text$mn:00007560                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007560
.text$mn:00007560 ; =============== S U B R O U T I N E =======================================
.text$mn:00007560
.text$mn:00007560 ; Attributes: bp-based frame
.text$mn:00007560
.text$mn:00007560 ; struct TiXmlElementA *__thiscall TiXmlNodeA::ToElement(TiXmlNodeA *__hidden this)
.text$mn:00007560                 public ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ
.text$mn:00007560 ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ proc near
.text$mn:00007560                                         ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+56p
.text$mn:00007560                                         ; NativeLangSpeaker::changeConfigLang(HWND__ *)+5Ep ...
.text$mn:00007560
.text$mn:00007560 var_8           = dword ptr -8
.text$mn:00007560 var_4           = dword ptr -4
.text$mn:00007560
.text$mn:00007560                 push    ebp
.text$mn:00007561                 mov     ebp, esp
.text$mn:00007563                 sub     esp, 8
.text$mn:00007566                 mov     [ebp+var_4], ecx
.text$mn:00007569                 cmp     [ebp+var_4], 0
.text$mn:0000756D                 jz      short loc_7580
.text$mn:0000756F                 mov     eax, [ebp+var_4]
.text$mn:00007572                 cmp     dword ptr [eax+10h], 1
.text$mn:00007576                 jnz     short loc_7580
.text$mn:00007578                 mov     ecx, [ebp+var_4]
.text$mn:0000757B                 mov     [ebp+var_8], ecx
.text$mn:0000757E                 jmp     short loc_7587
.text$mn:00007580 ; ---------------------------------------------------------------------------
.text$mn:00007580
.text$mn:00007580 loc_7580:                               ; CODE XREF: TiXmlNodeA::ToElement(void)+Dj
.text$mn:00007580                                         ; TiXmlNodeA::ToElement(void)+16j
.text$mn:00007580                 mov     [ebp+var_8], 0
.text$mn:00007587
.text$mn:00007587 loc_7587:                               ; CODE XREF: TiXmlNodeA::ToElement(void)+1Ej
.text$mn:00007587                 mov     eax, [ebp+var_8]
.text$mn:0000758A                 mov     esp, ebp
.text$mn:0000758C                 pop     ebp
.text$mn:0000758D                 retn
.text$mn:0000758D ?ToElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ endp
.text$mn:0000758D
.text$mn:0000758D ; ---------------------------------------------------------------------------
.text$mn:0000758E                 align 10h
.text$mn:0000758E _text$mn        ends
.text$mn:0000758E
.text$mn:00007590 ; ===========================================================================
.text$mn:00007590
.text$mn:00007590 ; Segment type: Pure code
.text$mn:00007590 ; Segment permissions: Read/Execute
.text$mn:00007590 _text$mn        segment para public 'CODE' use32
.text$mn:00007590                 assume cs:_text$mn
.text$mn:00007590                 ;org 7590h
.text$mn:00007590 ; COMDAT (pick any)
.text$mn:00007590                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007590
.text$mn:00007590 ; =============== S U B R O U T I N E =======================================
.text$mn:00007590
.text$mn:00007590 ; Attributes: bp-based frame
.text$mn:00007590
.text$mn:00007590 ; void __thiscall std::_Iterator_base12::_Adopt(std::_Iterator_base12 *this, const struct std::_Container_base12 *)
.text$mn:00007590                 public ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:00007590 ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$mn:00007590                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t const *,std::_Container_base12 const *)+3Cp
.text$mn:00007590                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+49p
.text$mn:00007590
.text$mn:00007590 var_1C          = byte ptr -1Ch
.text$mn:00007590 var_18          = byte ptr -18h
.text$mn:00007590 var_14          = dword ptr -14h
.text$mn:00007590 var_10          = dword ptr -10h
.text$mn:00007590 var_C           = dword ptr -0Ch
.text$mn:00007590 var_4           = dword ptr -4
.text$mn:00007590 arg_0           = dword ptr  8
.text$mn:00007590
.text$mn:00007590                 push    ebp
.text$mn:00007591                 mov     ebp, esp
.text$mn:00007593                 push    0FFFFFFFFh
.text$mn:00007595                 push    offset __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$mn:0000759A                 mov     eax, large fs:0
.text$mn:000075A0                 push    eax
.text$mn:000075A1                 sub     esp, 10h
.text$mn:000075A4                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000075A9                 xor     eax, ebp
.text$mn:000075AB                 push    eax
.text$mn:000075AC                 lea     eax, [ebp+var_C]
.text$mn:000075AF                 mov     large fs:0, eax
.text$mn:000075B5                 mov     [ebp+var_10], ecx
.text$mn:000075B8                 cmp     [ebp+arg_0], 0
.text$mn:000075BC                 jnz     short loc_75E8
.text$mn:000075BE                 push    3               ; int
.text$mn:000075C0                 lea     ecx, [ebp+var_18] ; this
.text$mn:000075C3                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:000075C8                 mov     [ebp+var_4], 0
.text$mn:000075CF                 mov     ecx, [ebp+var_10] ; this
.text$mn:000075D2                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:000075D7                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:000075DE                 lea     ecx, [ebp+var_18] ; this
.text$mn:000075E1                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:000075E6                 jmp     short loc_763F
.text$mn:000075E8 ; ---------------------------------------------------------------------------
.text$mn:000075E8
.text$mn:000075E8 loc_75E8:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+2Cj
.text$mn:000075E8                 mov     eax, [ebp+arg_0]
.text$mn:000075EB                 mov     ecx, [eax]
.text$mn:000075ED                 mov     [ebp+var_14], ecx
.text$mn:000075F0                 mov     edx, [ebp+var_10]
.text$mn:000075F3                 mov     eax, [edx]
.text$mn:000075F5                 cmp     eax, [ebp+var_14]
.text$mn:000075F8                 jz      short loc_763F
.text$mn:000075FA                 push    3               ; int
.text$mn:000075FC                 lea     ecx, [ebp+var_1C] ; this
.text$mn:000075FF                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00007604                 mov     [ebp+var_4], 1
.text$mn:0000760B                 mov     ecx, [ebp+var_10] ; this
.text$mn:0000760E                 call    ?_Orphan_me@_Iterator_base12@std@@QAEXXZ ; std::_Iterator_base12::_Orphan_me(void)
.text$mn:00007613                 mov     ecx, [ebp+var_10]
.text$mn:00007616                 mov     edx, [ebp+var_14]
.text$mn:00007619                 mov     eax, [edx+4]
.text$mn:0000761C                 mov     [ecx+4], eax
.text$mn:0000761F                 mov     ecx, [ebp+var_14]
.text$mn:00007622                 mov     edx, [ebp+var_10]
.text$mn:00007625                 mov     [ecx+4], edx
.text$mn:00007628                 mov     eax, [ebp+var_10]
.text$mn:0000762B                 mov     ecx, [ebp+var_14]
.text$mn:0000762E                 mov     [eax], ecx
.text$mn:00007630                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007637                 lea     ecx, [ebp+var_1C] ; this
.text$mn:0000763A                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000763F
.text$mn:0000763F loc_763F:                               ; CODE XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+56j
.text$mn:0000763F                                         ; std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+68j
.text$mn:0000763F                 mov     ecx, [ebp+var_C]
.text$mn:00007642                 mov     large fs:0, ecx
.text$mn:00007649                 pop     ecx
.text$mn:0000764A                 mov     esp, ebp
.text$mn:0000764C                 pop     ebp
.text$mn:0000764D                 retn    4
.text$mn:0000764D ?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$mn:0000764D
.text$mn:0000764D _text$mn        ends
.text$mn:0000764D
.text$x:00007650 ; ===========================================================================
.text$x:00007650
.text$x:00007650 ; Segment type: Pure code
.text$x:00007650 ; Segment permissions: Read/Execute
.text$x:00007650 _text$x         segment para public 'CODE' use32
.text$x:00007650                 assume cs:_text$x
.text$x:00007650                 ;org 7650h
.text$x:00007650 ; COMDAT (pick associative to section at 7590)
.text$x:00007650                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007650
.text$x:00007650 ; =============== S U B R O U T I N E =======================================
.text$x:00007650
.text$x:00007650
.text$x:00007650 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 proc near
.text$x:00007650                                         ; DATA XREF: .xdata$x:00009C1Co
.text$x:00007650                 lea     ecx, [ebp-18h]  ; this
.text$x:00007653                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00007653 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0 endp
.text$x:00007653
.text$x:00007658
.text$x:00007658 ; =============== S U B R O U T I N E =======================================
.text$x:00007658
.text$x:00007658
.text$x:00007658 __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 proc near
.text$x:00007658                                         ; DATA XREF: .xdata$x:00009C24o
.text$x:00007658                 lea     ecx, [ebp-1Ch]  ; this
.text$x:0000765B                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:0000765B __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1 endp
.text$x:0000765B
.text$x:00007660
.text$x:00007660 ; =============== S U B R O U T I N E =======================================
.text$x:00007660
.text$x:00007660
.text$x:00007660 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z proc near
.text$x:00007660                                         ; DATA XREF: std::_Iterator_base12::_Adopt(std::_Container_base12 const *)+5o
.text$x:00007660
.text$x:00007660 arg_4           = dword ptr  8
.text$x:00007660
.text$x:00007660                 mov     edx, [esp+arg_4]
.text$x:00007664                 lea     eax, [edx+0Ch]
.text$x:00007667                 mov     ecx, [edx-14h]
.text$x:0000766A                 xor     ecx, eax
.text$x:0000766C                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007671                 mov     eax, offset __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.text$x:00007676                 jmp     ___CxxFrameHandler3
.text$x:00007676 __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z endp
.text$x:00007676
.text$x:00007676 ; ---------------------------------------------------------------------------
.text$x:0000767B                 align 4
.text$x:0000767B _text$x         ends
.text$x:0000767B
.text$mn:0000767C ; ===========================================================================
.text$mn:0000767C
.text$mn:0000767C ; Segment type: Pure code
.text$mn:0000767C ; Segment permissions: Read/Execute
.text$mn:0000767C _text$mn        segment para public 'CODE' use32
.text$mn:0000767C                 assume cs:_text$mn
.text$mn:0000767C                 ;org 767Ch
.text$mn:0000767C ; COMDAT (pick any)
.text$mn:0000767C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000767C
.text$mn:0000767C ; =============== S U B R O U T I N E =======================================
.text$mn:0000767C
.text$mn:0000767C ; Attributes: bp-based frame
.text$mn:0000767C
.text$mn:0000767C ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Alloc_proxy(void)
.text$mn:0000767C                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:0000767C ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:0000767C                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(std::allocator<char> const &)+38p
.text$mn:0000767C
.text$mn:0000767C var_10          = byte ptr -10h
.text$mn:0000767C var_8           = dword ptr -8
.text$mn:0000767C var_1           = byte ptr -1
.text$mn:0000767C
.text$mn:0000767C                 push    ebp
.text$mn:0000767D                 mov     ebp, esp
.text$mn:0000767F                 sub     esp, 10h
.text$mn:00007682                 mov     [ebp+var_8], ecx
.text$mn:00007685                 lea     ecx, [ebp+var_1]
.text$mn:00007688                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:0000768D                 push    1
.text$mn:0000768F                 lea     ecx, [ebp+var_1]
.text$mn:00007692                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:00007697                 mov     ecx, [ebp+var_8]
.text$mn:0000769A                 mov     [ecx], eax
.text$mn:0000769C                 lea     ecx, [ebp+var_10] ; this
.text$mn:0000769F                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:000076A4                 push    eax             ; int
.text$mn:000076A5                 mov     edx, [ebp+var_8]
.text$mn:000076A8                 mov     eax, [edx]
.text$mn:000076AA                 push    eax             ; void *
.text$mn:000076AB                 lea     ecx, [ebp+var_1]
.text$mn:000076AE                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:000076B3                 mov     ecx, [ebp+var_8]
.text$mn:000076B6                 mov     edx, [ecx]
.text$mn:000076B8                 mov     eax, [ebp+var_8]
.text$mn:000076BB                 mov     [edx], eax
.text$mn:000076BD                 mov     esp, ebp
.text$mn:000076BF                 pop     ebp
.text$mn:000076C0                 retn
.text$mn:000076C0 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:000076C0
.text$mn:000076C0 ; ---------------------------------------------------------------------------
.text$mn:000076C1                 align 4
.text$mn:000076C1 _text$mn        ends
.text$mn:000076C1
.text$mn:000076C4 ; ===========================================================================
.text$mn:000076C4
.text$mn:000076C4 ; Segment type: Pure code
.text$mn:000076C4 ; Segment permissions: Read/Execute
.text$mn:000076C4 _text$mn        segment para public 'CODE' use32
.text$mn:000076C4                 assume cs:_text$mn
.text$mn:000076C4                 ;org 76C4h
.text$mn:000076C4 ; COMDAT (pick any)
.text$mn:000076C4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000076C4
.text$mn:000076C4 ; =============== S U B R O U T I N E =======================================
.text$mn:000076C4
.text$mn:000076C4 ; Attributes: bp-based frame
.text$mn:000076C4
.text$mn:000076C4 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Alloc_proxy(void)
.text$mn:000076C4                 public ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:000076C4 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:000076C4                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(std::allocator<wchar_t> const &)+38p
.text$mn:000076C4
.text$mn:000076C4 var_10          = byte ptr -10h
.text$mn:000076C4 var_8           = dword ptr -8
.text$mn:000076C4 var_1           = byte ptr -1
.text$mn:000076C4
.text$mn:000076C4                 push    ebp
.text$mn:000076C5                 mov     ebp, esp
.text$mn:000076C7                 sub     esp, 10h
.text$mn:000076CA                 mov     [ebp+var_8], ecx
.text$mn:000076CD                 lea     ecx, [ebp+var_1]
.text$mn:000076D0                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:000076D5                 push    1
.text$mn:000076D7                 lea     ecx, [ebp+var_1]
.text$mn:000076DA                 call    ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::allocate(uint)
.text$mn:000076DF                 mov     ecx, [ebp+var_8]
.text$mn:000076E2                 mov     [ecx], eax
.text$mn:000076E4                 lea     ecx, [ebp+var_10] ; this
.text$mn:000076E7                 call    ??0_Container_proxy@std@@QAE@XZ ; std::_Container_proxy::_Container_proxy(void)
.text$mn:000076EC                 push    eax             ; int
.text$mn:000076ED                 mov     edx, [ebp+var_8]
.text$mn:000076F0                 mov     eax, [edx]
.text$mn:000076F2                 push    eax             ; void *
.text$mn:000076F3                 lea     ecx, [ebp+var_1]
.text$mn:000076F6                 call    ??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z ; std::allocator<std::_Container_proxy>::construct<std::_Container_proxy,std::_Container_proxy>(std::_Container_proxy *,std::_Container_proxy &&)
.text$mn:000076FB                 mov     ecx, [ebp+var_8]
.text$mn:000076FE                 mov     edx, [ecx]
.text$mn:00007700                 mov     eax, [ebp+var_8]
.text$mn:00007703                 mov     [edx], eax
.text$mn:00007705                 mov     esp, ebp
.text$mn:00007707                 pop     ebp
.text$mn:00007708                 retn
.text$mn:00007708 ?_Alloc_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00007708
.text$mn:00007708 ; ---------------------------------------------------------------------------
.text$mn:00007709                 align 4
.text$mn:00007709 _text$mn        ends
.text$mn:00007709
.text$mn:0000770C ; ===========================================================================
.text$mn:0000770C
.text$mn:0000770C ; Segment type: Pure code
.text$mn:0000770C ; Segment permissions: Read/Execute
.text$mn:0000770C _text$mn        segment para public 'CODE' use32
.text$mn:0000770C                 assume cs:_text$mn
.text$mn:0000770C                 ;org 770Ch
.text$mn:0000770C ; COMDAT (pick any)
.text$mn:0000770C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000770C
.text$mn:0000770C ; =============== S U B R O U T I N E =======================================
.text$mn:0000770C
.text$mn:0000770C ; Attributes: bp-based frame
.text$mn:0000770C
.text$mn:0000770C ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Assign_rv(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> &&)
.text$mn:0000770C                 public ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z
.text$mn:0000770C ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z proc near
.text$mn:0000770C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+E2p
.text$mn:0000770C
.text$mn:0000770C var_8           = dword ptr -8
.text$mn:0000770C var_1           = byte ptr -1
.text$mn:0000770C arg_0           = dword ptr  8
.text$mn:0000770C
.text$mn:0000770C                 push    ebp
.text$mn:0000770D                 mov     ebp, esp
.text$mn:0000770F                 sub     esp, 8
.text$mn:00007712                 mov     [ebp+var_8], ecx
.text$mn:00007715                 mov     eax, [ebp+arg_0]
.text$mn:00007718                 cmp     dword ptr [eax+18h], 8
.text$mn:0000771C                 jnb     short loc_7740
.text$mn:0000771E                 mov     ecx, [ebp+arg_0]
.text$mn:00007721                 mov     edx, [ecx+14h]
.text$mn:00007724                 add     edx, 1
.text$mn:00007727                 push    edx             ; int
.text$mn:00007728                 mov     eax, [ebp+arg_0]
.text$mn:0000772B                 add     eax, 4
.text$mn:0000772E                 push    eax             ; Src
.text$mn:0000772F                 mov     ecx, [ebp+var_8]
.text$mn:00007732                 add     ecx, 4
.text$mn:00007735                 push    ecx             ; Dst
.text$mn:00007736                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000773B                 add     esp, 0Ch
.text$mn:0000773E                 jmp     short loc_776B
.text$mn:00007740 ; ---------------------------------------------------------------------------
.text$mn:00007740
.text$mn:00007740 loc_7740:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+10j
.text$mn:00007740                 mov     edx, [ebp+arg_0]
.text$mn:00007743                 add     edx, 4
.text$mn:00007746                 push    edx             ; int
.text$mn:00007747                 mov     eax, [ebp+var_8]
.text$mn:0000774A                 add     eax, 4
.text$mn:0000774D                 push    eax             ; void *
.text$mn:0000774E                 lea     ecx, [ebp+var_1]
.text$mn:00007751                 push    ecx
.text$mn:00007752                 mov     ecx, [ebp+var_8]
.text$mn:00007755                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:0000775A                 mov     ecx, eax
.text$mn:0000775C                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00007761                 mov     edx, [ebp+arg_0]
.text$mn:00007764                 mov     dword ptr [edx+4], 0
.text$mn:0000776B
.text$mn:0000776B loc_776B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+32j
.text$mn:0000776B                 mov     eax, [ebp+var_8]
.text$mn:0000776E                 mov     ecx, [ebp+arg_0]
.text$mn:00007771                 mov     edx, [ecx+14h]
.text$mn:00007774                 mov     [eax+14h], edx
.text$mn:00007777                 mov     eax, [ebp+var_8]
.text$mn:0000777A                 mov     ecx, [ebp+arg_0]
.text$mn:0000777D                 mov     edx, [ecx+18h]
.text$mn:00007780                 mov     [eax+18h], edx
.text$mn:00007783                 push    0
.text$mn:00007785                 push    0
.text$mn:00007787                 mov     ecx, [ebp+arg_0]
.text$mn:0000778A                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:0000778F                 mov     esp, ebp
.text$mn:00007791                 pop     ebp
.text$mn:00007792                 retn    4
.text$mn:00007792 ?_Assign_rv@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX$$QAV12@@Z endp
.text$mn:00007792
.text$mn:00007792 ; ---------------------------------------------------------------------------
.text$mn:00007795                 align 4
.text$mn:00007795 _text$mn        ends
.text$mn:00007795
.text$mn:00007798 ; ===========================================================================
.text$mn:00007798
.text$mn:00007798 ; Segment type: Pure code
.text$mn:00007798 ; Segment permissions: Read/Execute
.text$mn:00007798 _text$mn        segment para public 'CODE' use32
.text$mn:00007798                 assume cs:_text$mn
.text$mn:00007798                 ;org 7798h
.text$mn:00007798 ; COMDAT (pick any)
.text$mn:00007798                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007798
.text$mn:00007798 ; =============== S U B R O U T I N E =======================================
.text$mn:00007798
.text$mn:00007798 ; Attributes: bp-based frame
.text$mn:00007798
.text$mn:00007798 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Change_alloc(struct std::_Wrap_alloc<class std::allocator<wchar_t>> const &)
.text$mn:00007798                 public ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z
.text$mn:00007798 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z proc near
.text$mn:00007798                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+54p
.text$mn:00007798                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Ap
.text$mn:00007798
.text$mn:00007798 var_4           = dword ptr -4
.text$mn:00007798
.text$mn:00007798                 push    ebp
.text$mn:00007799                 mov     ebp, esp
.text$mn:0000779B                 push    ecx
.text$mn:0000779C                 mov     [ebp+var_4], ecx
.text$mn:0000779F                 mov     esp, ebp
.text$mn:000077A1                 pop     ebp
.text$mn:000077A2                 retn    4
.text$mn:000077A2 ?_Change_alloc@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXABU?$_Wrap_alloc@V?$allocator@_W@std@@@2@@Z endp
.text$mn:000077A2
.text$mn:000077A2 ; ---------------------------------------------------------------------------
.text$mn:000077A5                 align 4
.text$mn:000077A5 _text$mn        ends
.text$mn:000077A5
.text$mn:000077A8 ; ===========================================================================
.text$mn:000077A8
.text$mn:000077A8 ; Segment type: Pure code
.text$mn:000077A8 ; Segment permissions: Read/Execute
.text$mn:000077A8 _text$mn        segment para public 'CODE' use32
.text$mn:000077A8                 assume cs:_text$mn
.text$mn:000077A8                 ;org 77A8h
.text$mn:000077A8 ; COMDAT (pick any)
.text$mn:000077A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000077A8
.text$mn:000077A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000077A8
.text$mn:000077A8 ; Attributes: bp-based frame
.text$mn:000077A8
.text$mn:000077A8 ; int __stdcall std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_Iterator_base12 *)
.text$mn:000077A8                 public ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z
.text$mn:000077A8 ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z proc near
.text$mn:000077A8                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+10p
.text$mn:000077A8                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+Ep
.text$mn:000077A8
.text$mn:000077A8 var_4           = dword ptr -4
.text$mn:000077A8 arg_0           = dword ptr  8
.text$mn:000077A8
.text$mn:000077A8                 push    ebp
.text$mn:000077A9                 mov     ebp, esp
.text$mn:000077AB                 push    ecx
.text$mn:000077AC                 push    esi
.text$mn:000077AD                 mov     [ebp+var_4], ecx
.text$mn:000077B0                 mov     ecx, [ebp+var_4] ; this
.text$mn:000077B3                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:000077B8                 test    eax, eax
.text$mn:000077BA                 jz      short loc_77D2
.text$mn:000077BC                 mov     ecx, [ebp+var_4] ; this
.text$mn:000077BF                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:000077C4                 mov     esi, eax
.text$mn:000077C6                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000077C9                 call    ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ ; std::_Iterator_base12::_Getcont(void)
.text$mn:000077CE                 cmp     esi, eax
.text$mn:000077D0                 jz      short loc_783A
.text$mn:000077D2
.text$mn:000077D2 loc_77D2:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+12j
.text$mn:000077D2                 push    0FAh ; '·'      ; unsigned int
.text$mn:000077D7                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000077DC                 push    offset ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@ ; "string iterators incompatible"
.text$mn:000077E1                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000077E6                 add     esp, 0Ch
.text$mn:000077E9                 mov     eax, offset ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ ; "Standard C++ Libraries Invalid Argument"
.text$mn:000077EE                 test    eax, eax
.text$mn:000077F0                 jz      short loc_77F6
.text$mn:000077F2                 xor     ecx, ecx
.text$mn:000077F4                 jnz     short loc_781C
.text$mn:000077F6
.text$mn:000077F6 loc_77F6:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+48j
.text$mn:000077F6                 push    offset ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@ ; "\"Standard C++ Libraries Invalid Argume"...
.text$mn:000077FB                 push    offset ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@ ; "%s"
.text$mn:00007800                 push    0
.text$mn:00007802                 push    0FBh ; 'v'
.text$mn:00007807                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:0000780C                 push    2
.text$mn:0000780E                 call    __CrtDbgReportW
.text$mn:00007813                 add     esp, 18h
.text$mn:00007816                 cmp     eax, 1
.text$mn:00007819                 jnz     short loc_781C
.text$mn:0000781B                 int     3               ; Trap to Debugger
.text$mn:0000781C
.text$mn:0000781C loc_781C:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+4Cj
.text$mn:0000781C                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+71j
.text$mn:0000781C                 push    0
.text$mn:0000781E                 push    0FBh ; 'v'
.text$mn:00007823                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00007828                 push    offset ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@ ; "std::_String_const_iterator<class std::"...
.text$mn:0000782D                 push    offset ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@ ; "\"invalid argument\""
.text$mn:00007832                 call    __invalid_parameter
.text$mn:00007837                 add     esp, 14h
.text$mn:0000783A
.text$mn:0000783A loc_783A:                               ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+28j
.text$mn:0000783A                 pop     esi
.text$mn:0000783B                 mov     esp, ebp
.text$mn:0000783D                 pop     ebp
.text$mn:0000783E                 retn    4
.text$mn:0000783E ?_Compat@?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEXABV12@@Z endp
.text$mn:0000783E
.text$mn:0000783E ; ---------------------------------------------------------------------------
.text$mn:00007841                 align 4
.text$mn:00007841 _text$mn        ends
.text$mn:00007841
.text$mn:00007844 ; ===========================================================================
.text$mn:00007844
.text$mn:00007844 ; Segment type: Pure code
.text$mn:00007844 ; Segment permissions: Read/Execute
.text$mn:00007844 _text$mn        segment para public 'CODE' use32
.text$mn:00007844                 assume cs:_text$mn
.text$mn:00007844                 ;org 7844h
.text$mn:00007844 ; COMDAT (pick any)
.text$mn:00007844                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007844
.text$mn:00007844 ; =============== S U B R O U T I N E =======================================
.text$mn:00007844
.text$mn:00007844 ; Attributes: bp-based frame
.text$mn:00007844
.text$mn:00007844 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Copy(unsigned int, unsigned int)
.text$mn:00007844                 public ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00007844 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$mn:00007844                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+37p
.text$mn:00007844
.text$mn:00007844 var_20          = dword ptr -20h
.text$mn:00007844 var_1C          = dword ptr -1Ch
.text$mn:00007844 var_18          = dword ptr -18h
.text$mn:00007844 var_11          = byte ptr -11h
.text$mn:00007844 var_10          = dword ptr -10h
.text$mn:00007844 var_C           = byte ptr -0Ch
.text$mn:00007844 var_4           = dword ptr -4
.text$mn:00007844 arg_0           = dword ptr  8
.text$mn:00007844
.text$mn:00007844 ; FUNCTION CHUNK AT .text$mn:00007966 SIZE 00000009 BYTES
.text$mn:00007844
.text$mn:00007844                 push    ebp
.text$mn:00007845                 mov     ebp, esp
.text$mn:00007847                 push    0FFFFFFFFh
.text$mn:00007849                 push    offset __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000784E                 mov     eax, large fs:0
.text$mn:00007854                 push    eax
.text$mn:00007855                 push    ecx
.text$mn:00007856                 sub     esp, 10h
.text$mn:00007859                 push    ebx
.text$mn:0000785A                 push    esi
.text$mn:0000785B                 push    edi
.text$mn:0000785C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007861                 xor     eax, ebp
.text$mn:00007863                 push    eax
.text$mn:00007864                 lea     eax, [ebp+var_C]
.text$mn:00007867                 mov     large fs:0, eax
.text$mn:0000786D                 mov     [ebp+var_10], esp
.text$mn:00007870                 mov     [ebp+var_18], ecx
.text$mn:00007873                 mov     eax, [ebp+arg_0]
.text$mn:00007876                 or      eax, 0Fh
.text$mn:00007879                 mov     [ebp+var_1C], eax
.text$mn:0000787C                 mov     ecx, [ebp+var_18]
.text$mn:0000787F                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00007884                 cmp     eax, [ebp+var_1C]
.text$mn:00007887                 jnb     short loc_7891
.text$mn:00007889                 mov     ecx, [ebp+arg_0]
.text$mn:0000788C                 mov     [ebp+var_1C], ecx
.text$mn:0000788F                 jmp     short loc_78E3
.text$mn:00007891 ; ---------------------------------------------------------------------------
.text$mn:00007891
.text$mn:00007891 loc_7891:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+43j
.text$mn:00007891                 mov     edx, [ebp+var_18]
.text$mn:00007894                 mov     ecx, [edx+18h]
.text$mn:00007897                 shr     ecx, 1
.text$mn:00007899                 mov     eax, [ebp+var_1C]
.text$mn:0000789C                 xor     edx, edx
.text$mn:0000789E                 mov     esi, 3
.text$mn:000078A3                 div     esi
.text$mn:000078A5                 cmp     ecx, eax
.text$mn:000078A7                 ja      short loc_78AB
.text$mn:000078A9                 jmp     short loc_78E3
.text$mn:000078AB ; ---------------------------------------------------------------------------
.text$mn:000078AB
.text$mn:000078AB loc_78AB:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+63j
.text$mn:000078AB                 mov     ecx, [ebp+var_18]
.text$mn:000078AE                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:000078B3                 mov     edx, [ebp+var_18]
.text$mn:000078B6                 mov     ecx, [edx+18h]
.text$mn:000078B9                 shr     ecx, 1
.text$mn:000078BB                 sub     eax, ecx
.text$mn:000078BD                 mov     edx, [ebp+var_18]
.text$mn:000078C0                 cmp     [edx+18h], eax
.text$mn:000078C3                 ja      short loc_78D8
.text$mn:000078C5                 mov     eax, [ebp+var_18]
.text$mn:000078C8                 mov     ecx, [eax+18h]
.text$mn:000078CB                 shr     ecx, 1
.text$mn:000078CD                 mov     edx, [ebp+var_18]
.text$mn:000078D0                 add     ecx, [edx+18h]
.text$mn:000078D3                 mov     [ebp+var_1C], ecx
.text$mn:000078D6                 jmp     short loc_78E3
.text$mn:000078D8 ; ---------------------------------------------------------------------------
.text$mn:000078D8
.text$mn:000078D8 loc_78D8:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+7Fj
.text$mn:000078D8                 mov     ecx, [ebp+var_18]
.text$mn:000078DB                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:000078E0                 mov     [ebp+var_1C], eax
.text$mn:000078E3
.text$mn:000078E3 loc_78E3:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+4Bj
.text$mn:000078E3                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+65j ...
.text$mn:000078E3                 mov     [ebp+var_4], 0
.text$mn:000078EA                 mov     eax, [ebp+var_1C]
.text$mn:000078ED                 add     eax, 1
.text$mn:000078F0                 push    eax
.text$mn:000078F1                 lea     ecx, [ebp+var_11]
.text$mn:000078F4                 push    ecx
.text$mn:000078F5                 mov     ecx, [ebp+var_18]
.text$mn:000078F8                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000078FD                 mov     ecx, eax
.text$mn:000078FF                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00007904                 mov     [ebp+var_20], eax
.text$mn:00007907                 jmp     short loc_7966
.text$mn:00007907 ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$mn:00007907
.text$mn:00007909
.text$mn:00007909 ; =============== S U B R O U T I N E =======================================
.text$mn:00007909
.text$mn:00007909
.text$mn:00007909 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 proc near
.text$mn:00007909                                         ; DATA XREF: .xdata$x:00009D60o
.text$mn:00007909
.text$mn:00007909 ; FUNCTION CHUNK AT .text$mn:00007950 SIZE 00000009 BYTES
.text$mn:00007909 ; FUNCTION CHUNK AT .text$mn:00007960 SIZE 00000006 BYTES
.text$mn:00007909
.text$mn:00007909                 mov     [ebp-10h], esp
.text$mn:0000790C                 mov     edx, [ebp+8]
.text$mn:0000790F                 mov     [ebp-1Ch], edx
.text$mn:00007912                 mov     byte ptr [ebp-4], 2
.text$mn:00007916                 mov     eax, [ebp-1Ch]
.text$mn:00007919                 add     eax, 1
.text$mn:0000791C                 push    eax
.text$mn:0000791D                 lea     ecx, [ebp-12h]
.text$mn:00007920                 push    ecx
.text$mn:00007921                 mov     ecx, [ebp-18h]
.text$mn:00007924                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00007929                 mov     ecx, eax
.text$mn:0000792B                 call    ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::allocate(uint)
.text$mn:00007930                 mov     [ebp-20h], eax
.text$mn:00007933                 jmp     short loc_7950
.text$mn:00007933 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0 endp
.text$mn:00007933
.text$mn:00007935
.text$mn:00007935 ; =============== S U B R O U T I N E =======================================
.text$mn:00007935
.text$mn:00007935 ; Attributes: noreturn
.text$mn:00007935
.text$mn:00007935 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 proc near
.text$mn:00007935                                         ; DATA XREF: .xdata$x:00009D70o
.text$mn:00007935                 push    0               ; Size
.text$mn:00007937                 push    1               ; char
.text$mn:00007939                 mov     ecx, [ebp-18h]
.text$mn:0000793C                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00007941                 push    0
.text$mn:00007943                 push    0
.text$mn:00007945                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00007945 __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1 endp
.text$mn:00007945
.text$mn:0000794A ; ---------------------------------------------------------------------------
.text$mn:0000794A                 mov     eax, offset $LN17
.text$mn:0000794F                 retn
.text$mn:00007950 ; ---------------------------------------------------------------------------
.text$mn:00007950 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00007950
.text$mn:00007950 loc_7950:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00007950                 mov     dword ptr [ebp-4], 1
.text$mn:00007957                 jmp     short loc_7960
.text$mn:00007957 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00007959
.text$mn:00007959 ; =============== S U B R O U T I N E =======================================
.text$mn:00007959
.text$mn:00007959
.text$mn:00007959 $LN17           proc near               ; DATA XREF: .text$mn:0000794Ao
.text$mn:00007959                 mov     dword ptr [ebp-4], 1
.text$mn:00007959 $LN17           endp ; sp-analysis failed
.text$mn:00007959
.text$mn:00007960 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00007960
.text$mn:00007960 loc_7960:                               ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00007960                 mov     eax, offset $LN19
.text$mn:00007965                 retn
.text$mn:00007965 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.text$mn:00007966 ; ---------------------------------------------------------------------------
.text$mn:00007966 ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:00007966
.text$mn:00007966 loc_7966:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+C3j
.text$mn:00007966                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000796D                 jmp     short loc_7976
.text$mn:0000796D ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$mn:0000796F
.text$mn:0000796F ; =============== S U B R O U T I N E =======================================
.text$mn:0000796F
.text$mn:0000796F
.text$mn:0000796F $LN19           proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0:loc_7960o
.text$mn:0000796F                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00007976
.text$mn:00007976 loc_7976:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+129j
.text$mn:00007976                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:0000797A                 jbe     short loc_7995
.text$mn:0000797C                 mov     edx, [ebp+0Ch]
.text$mn:0000797F                 push    edx             ; Size
.text$mn:00007980                 mov     ecx, [ebp-18h]
.text$mn:00007983                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007988                 push    eax             ; Src
.text$mn:00007989                 mov     eax, [ebp-20h]
.text$mn:0000798C                 push    eax             ; Dst
.text$mn:0000798D                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00007992                 add     esp, 0Ch
.text$mn:00007995
.text$mn:00007995 loc_7995:                               ; CODE XREF: $LN19+Bj
.text$mn:00007995                 push    0               ; Size
.text$mn:00007997                 push    1               ; char
.text$mn:00007999                 mov     ecx, [ebp-18h]
.text$mn:0000799C                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:000079A1                 lea     ecx, [ebp-20h]
.text$mn:000079A4                 push    ecx             ; int
.text$mn:000079A5                 mov     edx, [ebp-18h]
.text$mn:000079A8                 add     edx, 4
.text$mn:000079AB                 push    edx             ; void *
.text$mn:000079AC                 lea     eax, [ebp-13h]
.text$mn:000079AF                 push    eax
.text$mn:000079B0                 mov     ecx, [ebp-18h]
.text$mn:000079B3                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000079B8                 mov     ecx, eax
.text$mn:000079BA                 call    ??$construct@PADAAPAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPADAAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::construct<char *,char * &>(char * *,char * &)
.text$mn:000079BF                 mov     ecx, [ebp-18h]
.text$mn:000079C2                 mov     edx, [ebp-1Ch]
.text$mn:000079C5                 mov     [ecx+18h], edx
.text$mn:000079C8                 mov     eax, [ebp+0Ch]
.text$mn:000079CB                 push    eax
.text$mn:000079CC                 mov     ecx, [ebp-18h]
.text$mn:000079CF                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:000079D4                 mov     ecx, [ebp-0Ch]
.text$mn:000079D7                 mov     large fs:0, ecx
.text$mn:000079DE                 pop     ecx
.text$mn:000079DF                 pop     edi
.text$mn:000079E0                 pop     esi
.text$mn:000079E1                 pop     ebx
.text$mn:000079E2                 mov     esp, ebp
.text$mn:000079E4                 pop     ebp
.text$mn:000079E5                 retn    8
.text$mn:000079E5 $LN19           endp ; sp-analysis failed
.text$mn:000079E5
.text$mn:000079E5 _text$mn        ends
.text$mn:000079E5
.text$x:000079E8 ; ===========================================================================
.text$x:000079E8
.text$x:000079E8 ; Segment type: Pure code
.text$x:000079E8 ; Segment permissions: Read/Execute
.text$x:000079E8 _text$x         segment para public 'CODE' use32
.text$x:000079E8                 assume cs:_text$x
.text$x:000079E8                 ;org 79E8h
.text$x:000079E8 ; COMDAT (pick associative to section at 7844)
.text$x:000079E8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000079E8
.text$x:000079E8 ; =============== S U B R O U T I N E =======================================
.text$x:000079E8
.text$x:000079E8
.text$x:000079E8 __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z proc near
.text$x:000079E8                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+5o
.text$x:000079E8
.text$x:000079E8 arg_4           = dword ptr  8
.text$x:000079E8
.text$x:000079E8                 mov     edx, [esp+arg_4]
.text$x:000079EC                 lea     eax, [edx+0Ch]
.text$x:000079EF                 mov     ecx, [edx-24h]
.text$x:000079F2                 xor     ecx, eax
.text$x:000079F4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000079F9                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.text$x:000079FE                 jmp     ___CxxFrameHandler3
.text$x:000079FE __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z endp
.text$x:000079FE
.text$x:000079FE ; ---------------------------------------------------------------------------
.text$x:00007A03                 align 4
.text$x:00007A03 _text$x         ends
.text$x:00007A03
.text$mn:00007A04 ; ===========================================================================
.text$mn:00007A04
.text$mn:00007A04 ; Segment type: Pure code
.text$mn:00007A04 ; Segment permissions: Read/Execute
.text$mn:00007A04 _text$mn        segment para public 'CODE' use32
.text$mn:00007A04                 assume cs:_text$mn
.text$mn:00007A04                 ;org 7A04h
.text$mn:00007A04 ; COMDAT (pick any)
.text$mn:00007A04                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007A04
.text$mn:00007A04 ; =============== S U B R O U T I N E =======================================
.text$mn:00007A04
.text$mn:00007A04 ; Attributes: bp-based frame
.text$mn:00007A04
.text$mn:00007A04 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Copy(unsigned int, unsigned int)
.text$mn:00007A04                 public ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00007A04 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$mn:00007A04                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+37p
.text$mn:00007A04
.text$mn:00007A04 var_20          = dword ptr -20h
.text$mn:00007A04 var_1C          = dword ptr -1Ch
.text$mn:00007A04 var_18          = dword ptr -18h
.text$mn:00007A04 var_11          = byte ptr -11h
.text$mn:00007A04 var_10          = dword ptr -10h
.text$mn:00007A04 var_C           = byte ptr -0Ch
.text$mn:00007A04 var_4           = dword ptr -4
.text$mn:00007A04 arg_0           = dword ptr  8
.text$mn:00007A04
.text$mn:00007A04 ; FUNCTION CHUNK AT .text$mn:00007B26 SIZE 00000009 BYTES
.text$mn:00007A04
.text$mn:00007A04                 push    ebp
.text$mn:00007A05                 mov     ebp, esp
.text$mn:00007A07                 push    0FFFFFFFFh
.text$mn:00007A09                 push    offset __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00007A0E                 mov     eax, large fs:0
.text$mn:00007A14                 push    eax
.text$mn:00007A15                 push    ecx
.text$mn:00007A16                 sub     esp, 10h
.text$mn:00007A19                 push    ebx
.text$mn:00007A1A                 push    esi
.text$mn:00007A1B                 push    edi
.text$mn:00007A1C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007A21                 xor     eax, ebp
.text$mn:00007A23                 push    eax
.text$mn:00007A24                 lea     eax, [ebp+var_C]
.text$mn:00007A27                 mov     large fs:0, eax
.text$mn:00007A2D                 mov     [ebp+var_10], esp
.text$mn:00007A30                 mov     [ebp+var_18], ecx
.text$mn:00007A33                 mov     eax, [ebp+arg_0]
.text$mn:00007A36                 or      eax, 7
.text$mn:00007A39                 mov     [ebp+var_1C], eax
.text$mn:00007A3C                 mov     ecx, [ebp+var_18]
.text$mn:00007A3F                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00007A44                 cmp     eax, [ebp+var_1C]
.text$mn:00007A47                 jnb     short loc_7A51
.text$mn:00007A49                 mov     ecx, [ebp+arg_0]
.text$mn:00007A4C                 mov     [ebp+var_1C], ecx
.text$mn:00007A4F                 jmp     short loc_7AA3
.text$mn:00007A51 ; ---------------------------------------------------------------------------
.text$mn:00007A51
.text$mn:00007A51 loc_7A51:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+43j
.text$mn:00007A51                 mov     edx, [ebp+var_18]
.text$mn:00007A54                 mov     ecx, [edx+18h]
.text$mn:00007A57                 shr     ecx, 1
.text$mn:00007A59                 mov     eax, [ebp+var_1C]
.text$mn:00007A5C                 xor     edx, edx
.text$mn:00007A5E                 mov     esi, 3
.text$mn:00007A63                 div     esi
.text$mn:00007A65                 cmp     ecx, eax
.text$mn:00007A67                 ja      short loc_7A6B
.text$mn:00007A69                 jmp     short loc_7AA3
.text$mn:00007A6B ; ---------------------------------------------------------------------------
.text$mn:00007A6B
.text$mn:00007A6B loc_7A6B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+63j
.text$mn:00007A6B                 mov     ecx, [ebp+var_18]
.text$mn:00007A6E                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00007A73                 mov     edx, [ebp+var_18]
.text$mn:00007A76                 mov     ecx, [edx+18h]
.text$mn:00007A79                 shr     ecx, 1
.text$mn:00007A7B                 sub     eax, ecx
.text$mn:00007A7D                 mov     edx, [ebp+var_18]
.text$mn:00007A80                 cmp     [edx+18h], eax
.text$mn:00007A83                 ja      short loc_7A98
.text$mn:00007A85                 mov     eax, [ebp+var_18]
.text$mn:00007A88                 mov     ecx, [eax+18h]
.text$mn:00007A8B                 shr     ecx, 1
.text$mn:00007A8D                 mov     edx, [ebp+var_18]
.text$mn:00007A90                 add     ecx, [edx+18h]
.text$mn:00007A93                 mov     [ebp+var_1C], ecx
.text$mn:00007A96                 jmp     short loc_7AA3
.text$mn:00007A98 ; ---------------------------------------------------------------------------
.text$mn:00007A98
.text$mn:00007A98 loc_7A98:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+7Fj
.text$mn:00007A98                 mov     ecx, [ebp+var_18]
.text$mn:00007A9B                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00007AA0                 mov     [ebp+var_1C], eax
.text$mn:00007AA3
.text$mn:00007AA3 loc_7AA3:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+4Bj
.text$mn:00007AA3                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+65j ...
.text$mn:00007AA3                 mov     [ebp+var_4], 0
.text$mn:00007AAA                 mov     eax, [ebp+var_1C]
.text$mn:00007AAD                 add     eax, 1
.text$mn:00007AB0                 push    eax
.text$mn:00007AB1                 lea     ecx, [ebp+var_11]
.text$mn:00007AB4                 push    ecx
.text$mn:00007AB5                 mov     ecx, [ebp+var_18]
.text$mn:00007AB8                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007ABD                 mov     ecx, eax
.text$mn:00007ABF                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00007AC4                 mov     [ebp+var_20], eax
.text$mn:00007AC7                 jmp     short loc_7B26
.text$mn:00007AC7 ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$mn:00007AC7
.text$mn:00007AC9
.text$mn:00007AC9 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AC9
.text$mn:00007AC9
.text$mn:00007AC9 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 proc near
.text$mn:00007AC9                                         ; DATA XREF: .xdata$x:0000A1F8o
.text$mn:00007AC9
.text$mn:00007AC9 ; FUNCTION CHUNK AT .text$mn:00007B10 SIZE 00000009 BYTES
.text$mn:00007AC9 ; FUNCTION CHUNK AT .text$mn:00007B20 SIZE 00000006 BYTES
.text$mn:00007AC9
.text$mn:00007AC9                 mov     [ebp-10h], esp
.text$mn:00007ACC                 mov     edx, [ebp+8]
.text$mn:00007ACF                 mov     [ebp-1Ch], edx
.text$mn:00007AD2                 mov     byte ptr [ebp-4], 2
.text$mn:00007AD6                 mov     eax, [ebp-1Ch]
.text$mn:00007AD9                 add     eax, 1
.text$mn:00007ADC                 push    eax
.text$mn:00007ADD                 lea     ecx, [ebp-12h]
.text$mn:00007AE0                 push    ecx
.text$mn:00007AE1                 mov     ecx, [ebp-18h]
.text$mn:00007AE4                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007AE9                 mov     ecx, eax
.text$mn:00007AEB                 call    ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)
.text$mn:00007AF0                 mov     [ebp-20h], eax
.text$mn:00007AF3                 jmp     short loc_7B10
.text$mn:00007AF3 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0 endp
.text$mn:00007AF3
.text$mn:00007AF5
.text$mn:00007AF5 ; =============== S U B R O U T I N E =======================================
.text$mn:00007AF5
.text$mn:00007AF5 ; Attributes: noreturn
.text$mn:00007AF5
.text$mn:00007AF5 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 proc near
.text$mn:00007AF5                                         ; DATA XREF: .xdata$x:0000A208o
.text$mn:00007AF5                 push    0
.text$mn:00007AF7                 push    1
.text$mn:00007AF9                 mov     ecx, [ebp-18h]
.text$mn:00007AFC                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00007B01                 push    0
.text$mn:00007B03                 push    0
.text$mn:00007B05                 call    __CxxThrowException@8 ; _CxxThrowException(x,x)
.text$mn:00007B05 __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1 endp
.text$mn:00007B05
.text$mn:00007B0A ; ---------------------------------------------------------------------------
.text$mn:00007B0A                 mov     eax, offset $LN17_0
.text$mn:00007B0F                 retn
.text$mn:00007B10 ; ---------------------------------------------------------------------------
.text$mn:00007B10 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00007B10
.text$mn:00007B10 loc_7B10:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+2Aj
.text$mn:00007B10                 mov     dword ptr [ebp-4], 1
.text$mn:00007B17                 jmp     short loc_7B20
.text$mn:00007B17 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00007B19
.text$mn:00007B19 ; =============== S U B R O U T I N E =======================================
.text$mn:00007B19
.text$mn:00007B19
.text$mn:00007B19 $LN17_0         proc near               ; DATA XREF: .text$mn:00007B0Ao
.text$mn:00007B19                 mov     dword ptr [ebp-4], 1
.text$mn:00007B19 $LN17_0         endp ; sp-analysis failed
.text$mn:00007B19
.text$mn:00007B20 ; START OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00007B20
.text$mn:00007B20 loc_7B20:                               ; CODE XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+4Ej
.text$mn:00007B20                 mov     eax, offset $LN19_0
.text$mn:00007B25                 retn
.text$mn:00007B25 ; END OF FUNCTION CHUNK FOR __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.text$mn:00007B26 ; ---------------------------------------------------------------------------
.text$mn:00007B26 ; START OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00007B26
.text$mn:00007B26 loc_7B26:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+C3j
.text$mn:00007B26                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00007B2D                 jmp     short loc_7B36
.text$mn:00007B2D ; END OF FUNCTION CHUNK FOR ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$mn:00007B2F
.text$mn:00007B2F ; =============== S U B R O U T I N E =======================================
.text$mn:00007B2F
.text$mn:00007B2F
.text$mn:00007B2F $LN19_0         proc near               ; DATA XREF: __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0:loc_7B20o
.text$mn:00007B2F                 mov     dword ptr [ebp-4], 0FFFFFFFFh
.text$mn:00007B36
.text$mn:00007B36 loc_7B36:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+129j
.text$mn:00007B36                 cmp     dword ptr [ebp+0Ch], 0
.text$mn:00007B3A                 jbe     short loc_7B55
.text$mn:00007B3C                 mov     edx, [ebp+0Ch]
.text$mn:00007B3F                 push    edx             ; int
.text$mn:00007B40                 mov     ecx, [ebp-18h]
.text$mn:00007B43                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007B48                 push    eax             ; Src
.text$mn:00007B49                 mov     eax, [ebp-20h]
.text$mn:00007B4C                 push    eax             ; Dst
.text$mn:00007B4D                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00007B52                 add     esp, 0Ch
.text$mn:00007B55
.text$mn:00007B55 loc_7B55:                               ; CODE XREF: $LN19_0+Bj
.text$mn:00007B55                 push    0
.text$mn:00007B57                 push    1
.text$mn:00007B59                 mov     ecx, [ebp-18h]
.text$mn:00007B5C                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00007B61                 lea     ecx, [ebp-20h]
.text$mn:00007B64                 push    ecx             ; int
.text$mn:00007B65                 mov     edx, [ebp-18h]
.text$mn:00007B68                 add     edx, 4
.text$mn:00007B6B                 push    edx             ; void *
.text$mn:00007B6C                 lea     eax, [ebp-13h]
.text$mn:00007B6F                 push    eax
.text$mn:00007B70                 mov     ecx, [ebp-18h]
.text$mn:00007B73                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00007B78                 mov     ecx, eax
.text$mn:00007B7A                 call    ??$construct@PA_WAAPA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_WAAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::construct<wchar_t *,wchar_t * &>(wchar_t * *,wchar_t * &)
.text$mn:00007B7F                 mov     ecx, [ebp-18h]
.text$mn:00007B82                 mov     edx, [ebp-1Ch]
.text$mn:00007B85                 mov     [ecx+18h], edx
.text$mn:00007B88                 mov     eax, [ebp+0Ch]
.text$mn:00007B8B                 push    eax
.text$mn:00007B8C                 mov     ecx, [ebp-18h]
.text$mn:00007B8F                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00007B94                 mov     ecx, [ebp-0Ch]
.text$mn:00007B97                 mov     large fs:0, ecx
.text$mn:00007B9E                 pop     ecx
.text$mn:00007B9F                 pop     edi
.text$mn:00007BA0                 pop     esi
.text$mn:00007BA1                 pop     ebx
.text$mn:00007BA2                 mov     esp, ebp
.text$mn:00007BA4                 pop     ebp
.text$mn:00007BA5                 retn    8
.text$mn:00007BA5 $LN19_0         endp ; sp-analysis failed
.text$mn:00007BA5
.text$mn:00007BA5 _text$mn        ends
.text$mn:00007BA5
.text$x:00007BA8 ; ===========================================================================
.text$x:00007BA8
.text$x:00007BA8 ; Segment type: Pure code
.text$x:00007BA8 ; Segment permissions: Read/Execute
.text$x:00007BA8 _text$x         segment para public 'CODE' use32
.text$x:00007BA8                 assume cs:_text$x
.text$x:00007BA8                 ;org 7BA8h
.text$x:00007BA8 ; COMDAT (pick associative to section at 7A04)
.text$x:00007BA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00007BA8
.text$x:00007BA8 ; =============== S U B R O U T I N E =======================================
.text$x:00007BA8
.text$x:00007BA8
.text$x:00007BA8 __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z proc near
.text$x:00007BA8                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+5o
.text$x:00007BA8
.text$x:00007BA8 arg_4           = dword ptr  8
.text$x:00007BA8
.text$x:00007BA8                 mov     edx, [esp+arg_4]
.text$x:00007BAC                 lea     eax, [edx+0Ch]
.text$x:00007BAF                 mov     ecx, [edx-24h]
.text$x:00007BB2                 xor     ecx, eax
.text$x:00007BB4                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00007BB9                 mov     eax, offset __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.text$x:00007BBE                 jmp     ___CxxFrameHandler3
.text$x:00007BBE __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z endp
.text$x:00007BBE
.text$x:00007BBE ; ---------------------------------------------------------------------------
.text$x:00007BC3                 align 4
.text$x:00007BC3 _text$x         ends
.text$x:00007BC3
.text$mn:00007BC4 ; ===========================================================================
.text$mn:00007BC4
.text$mn:00007BC4 ; Segment type: Pure code
.text$mn:00007BC4 ; Segment permissions: Read/Execute
.text$mn:00007BC4 _text$mn        segment para public 'CODE' use32
.text$mn:00007BC4                 assume cs:_text$mn
.text$mn:00007BC4                 ;org 7BC4h
.text$mn:00007BC4 ; COMDAT (pick any)
.text$mn:00007BC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BC4
.text$mn:00007BC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007BC4
.text$mn:00007BC4 ; Attributes: bp-based frame
.text$mn:00007BC4
.text$mn:00007BC4 ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Eos(unsigned int)
.text$mn:00007BC4                 public ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z
.text$mn:00007BC4 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z proc near
.text$mn:00007BC4                                         ; CODE XREF: $LN19+60p
.text$mn:00007BC4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+83p ...
.text$mn:00007BC4
.text$mn:00007BC4 var_8           = dword ptr -8
.text$mn:00007BC4 var_1           = byte ptr -1
.text$mn:00007BC4 arg_0           = dword ptr  8
.text$mn:00007BC4
.text$mn:00007BC4                 push    ebp
.text$mn:00007BC5                 mov     ebp, esp
.text$mn:00007BC7                 sub     esp, 8
.text$mn:00007BCA                 mov     [ebp+var_8], ecx
.text$mn:00007BCD                 mov     [ebp+var_1], 0
.text$mn:00007BD1                 mov     eax, [ebp+var_8]
.text$mn:00007BD4                 mov     ecx, [ebp+arg_0]
.text$mn:00007BD7                 mov     [eax+14h], ecx
.text$mn:00007BDA                 lea     edx, [ebp+var_1]
.text$mn:00007BDD                 push    edx
.text$mn:00007BDE                 mov     ecx, [ebp+var_8]
.text$mn:00007BE1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007BE6                 add     eax, [ebp+arg_0]
.text$mn:00007BE9                 push    eax
.text$mn:00007BEA                 call    ?assign@?$char_traits@D@std@@SAXAADABD@Z ; std::char_traits<char>::assign(char &,char const &)
.text$mn:00007BEF                 add     esp, 8
.text$mn:00007BF2                 mov     esp, ebp
.text$mn:00007BF4                 pop     ebp
.text$mn:00007BF5                 retn    4
.text$mn:00007BF5 ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z endp
.text$mn:00007BF5
.text$mn:00007BF5 _text$mn        ends
.text$mn:00007BF5
.text$mn:00007BF8 ; ===========================================================================
.text$mn:00007BF8
.text$mn:00007BF8 ; Segment type: Pure code
.text$mn:00007BF8 ; Segment permissions: Read/Execute
.text$mn:00007BF8 _text$mn        segment para public 'CODE' use32
.text$mn:00007BF8                 assume cs:_text$mn
.text$mn:00007BF8                 ;org 7BF8h
.text$mn:00007BF8 ; COMDAT (pick any)
.text$mn:00007BF8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007BF8
.text$mn:00007BF8 ; =============== S U B R O U T I N E =======================================
.text$mn:00007BF8
.text$mn:00007BF8 ; Attributes: bp-based frame
.text$mn:00007BF8
.text$mn:00007BF8 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Eos(unsigned int)
.text$mn:00007BF8                 public ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z
.text$mn:00007BF8 ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z proc near
.text$mn:00007BF8                                         ; CODE XREF: $LN19_0+60p
.text$mn:00007BF8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+83p ...
.text$mn:00007BF8
.text$mn:00007BF8 var_8           = dword ptr -8
.text$mn:00007BF8 var_2           = word ptr -2
.text$mn:00007BF8 arg_0           = dword ptr  8
.text$mn:00007BF8
.text$mn:00007BF8                 push    ebp
.text$mn:00007BF9                 mov     ebp, esp
.text$mn:00007BFB                 sub     esp, 8
.text$mn:00007BFE                 mov     [ebp+var_8], ecx
.text$mn:00007C01                 xor     eax, eax
.text$mn:00007C03                 mov     [ebp+var_2], ax
.text$mn:00007C07                 mov     ecx, [ebp+var_8]
.text$mn:00007C0A                 mov     edx, [ebp+arg_0]
.text$mn:00007C0D                 mov     [ecx+14h], edx
.text$mn:00007C10                 lea     eax, [ebp+var_2]
.text$mn:00007C13                 push    eax
.text$mn:00007C14                 mov     ecx, [ebp+var_8]
.text$mn:00007C17                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007C1C                 mov     ecx, [ebp+arg_0]
.text$mn:00007C1F                 lea     edx, [eax+ecx*2]
.text$mn:00007C22                 push    edx
.text$mn:00007C23                 call    ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z ; std::char_traits<wchar_t>::assign(wchar_t &,wchar_t const &)
.text$mn:00007C28                 add     esp, 8
.text$mn:00007C2B                 mov     esp, ebp
.text$mn:00007C2D                 pop     ebp
.text$mn:00007C2E                 retn    4
.text$mn:00007C2E ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z endp
.text$mn:00007C2E
.text$mn:00007C2E ; ---------------------------------------------------------------------------
.text$mn:00007C31                 align 4
.text$mn:00007C31 _text$mn        ends
.text$mn:00007C31
.text$mn:00007C34 ; ===========================================================================
.text$mn:00007C34
.text$mn:00007C34 ; Segment type: Pure code
.text$mn:00007C34 ; Segment permissions: Read/Execute
.text$mn:00007C34 _text$mn        segment para public 'CODE' use32
.text$mn:00007C34                 assume cs:_text$mn
.text$mn:00007C34                 ;org 7C34h
.text$mn:00007C34 ; COMDAT (pick any)
.text$mn:00007C34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C34
.text$mn:00007C34 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C34
.text$mn:00007C34 ; Attributes: bp-based frame
.text$mn:00007C34
.text$mn:00007C34 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Free_proxy(void)
.text$mn:00007C34                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ
.text$mn:00007C34 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00007C34                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::~_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>(void)+30p
.text$mn:00007C34
.text$mn:00007C34 var_8           = dword ptr -8
.text$mn:00007C34 var_1           = byte ptr -1
.text$mn:00007C34
.text$mn:00007C34                 push    ebp
.text$mn:00007C35                 mov     ebp, esp
.text$mn:00007C37                 sub     esp, 8
.text$mn:00007C3A                 mov     [ebp+var_8], ecx
.text$mn:00007C3D                 lea     ecx, [ebp+var_1]
.text$mn:00007C40                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00007C45                 mov     ecx, [ebp+var_8] ; this
.text$mn:00007C48                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00007C4D                 mov     eax, [ebp+var_8]
.text$mn:00007C50                 mov     ecx, [eax]
.text$mn:00007C52                 push    ecx
.text$mn:00007C53                 lea     ecx, [ebp+var_1]
.text$mn:00007C56                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00007C5B                 push    1               ; int
.text$mn:00007C5D                 mov     edx, [ebp+var_8]
.text$mn:00007C60                 mov     eax, [edx]
.text$mn:00007C62                 push    eax             ; void *
.text$mn:00007C63                 lea     ecx, [ebp+var_1]
.text$mn:00007C66                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:00007C6B                 mov     ecx, [ebp+var_8]
.text$mn:00007C6E                 mov     dword ptr [ecx], 0
.text$mn:00007C74                 mov     esp, ebp
.text$mn:00007C76                 pop     ebp
.text$mn:00007C77                 retn
.text$mn:00007C77 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAEXXZ endp
.text$mn:00007C77
.text$mn:00007C77 _text$mn        ends
.text$mn:00007C77
.text$mn:00007C78 ; ===========================================================================
.text$mn:00007C78
.text$mn:00007C78 ; Segment type: Pure code
.text$mn:00007C78 ; Segment permissions: Read/Execute
.text$mn:00007C78 _text$mn        segment para public 'CODE' use32
.text$mn:00007C78                 assume cs:_text$mn
.text$mn:00007C78                 ;org 7C78h
.text$mn:00007C78 ; COMDAT (pick any)
.text$mn:00007C78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007C78
.text$mn:00007C78 ; =============== S U B R O U T I N E =======================================
.text$mn:00007C78
.text$mn:00007C78 ; Attributes: bp-based frame
.text$mn:00007C78
.text$mn:00007C78 ; public: void __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Free_proxy(void)
.text$mn:00007C78                 public ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ
.text$mn:00007C78 ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ proc near
.text$mn:00007C78                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::~_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>(void)+30p
.text$mn:00007C78
.text$mn:00007C78 var_8           = dword ptr -8
.text$mn:00007C78 var_1           = byte ptr -1
.text$mn:00007C78
.text$mn:00007C78                 push    ebp
.text$mn:00007C79                 mov     ebp, esp
.text$mn:00007C7B                 sub     esp, 8
.text$mn:00007C7E                 mov     [ebp+var_8], ecx
.text$mn:00007C81                 lea     ecx, [ebp+var_1]
.text$mn:00007C84                 call    ??0?$allocator@U_Container_proxy@std@@@std@@QAE@XZ ; std::allocator<std::_Container_proxy>::allocator<std::_Container_proxy>(void)
.text$mn:00007C89                 mov     ecx, [ebp+var_8] ; this
.text$mn:00007C8C                 call    ?_Orphan_all@_Container_base12@std@@QAEXXZ ; std::_Container_base12::_Orphan_all(void)
.text$mn:00007C91                 mov     eax, [ebp+var_8]
.text$mn:00007C94                 mov     ecx, [eax]
.text$mn:00007C96                 push    ecx
.text$mn:00007C97                 lea     ecx, [ebp+var_1]
.text$mn:00007C9A                 call    ??$destroy@U_Container_proxy@std@@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@@Z ; std::allocator<std::_Container_proxy>::destroy<std::_Container_proxy>(std::_Container_proxy *)
.text$mn:00007C9F                 push    1               ; int
.text$mn:00007CA1                 mov     edx, [ebp+var_8]
.text$mn:00007CA4                 mov     eax, [edx]
.text$mn:00007CA6                 push    eax             ; void *
.text$mn:00007CA7                 lea     ecx, [ebp+var_1]
.text$mn:00007CAA                 call    ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z ; std::allocator<std::_Container_proxy>::deallocate(std::_Container_proxy *,uint)
.text$mn:00007CAF                 mov     ecx, [ebp+var_8]
.text$mn:00007CB2                 mov     dword ptr [ecx], 0
.text$mn:00007CB8                 mov     esp, ebp
.text$mn:00007CBA                 pop     ebp
.text$mn:00007CBB                 retn
.text$mn:00007CBB ?_Free_proxy@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAEXXZ endp
.text$mn:00007CBB
.text$mn:00007CBB _text$mn        ends
.text$mn:00007CBB
.text$mn:00007CBC ; ===========================================================================
.text$mn:00007CBC
.text$mn:00007CBC ; Segment type: Pure code
.text$mn:00007CBC ; Segment permissions: Read/Execute
.text$mn:00007CBC _text$mn        segment para public 'CODE' use32
.text$mn:00007CBC                 assume cs:_text$mn
.text$mn:00007CBC                 ;org 7CBCh
.text$mn:00007CBC ; COMDAT (pick any)
.text$mn:00007CBC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CBC
.text$mn:00007CBC ; =============== S U B R O U T I N E =======================================
.text$mn:00007CBC
.text$mn:00007CBC ; Attributes: bp-based frame
.text$mn:00007CBC
.text$mn:00007CBC ; public: struct std::_Wrap_alloc<class std::allocator<char>> __thiscall std::_String_alloc<0, struct std::_String_base_types<char, class std::allocator<char>>>::_Getal(void)const
.text$mn:00007CBC                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ
.text$mn:00007CBC ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ proc near
.text$mn:00007CBC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+B4p
.text$mn:00007CBC                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+1Bp ...
.text$mn:00007CBC
.text$mn:00007CBC var_4           = dword ptr -4
.text$mn:00007CBC arg_0           = dword ptr  8
.text$mn:00007CBC
.text$mn:00007CBC                 push    ebp
.text$mn:00007CBD                 mov     ebp, esp
.text$mn:00007CBF                 push    ecx
.text$mn:00007CC0                 mov     [ebp+var_4], ecx
.text$mn:00007CC3                 mov     ecx, [ebp+arg_0]
.text$mn:00007CC6                 call    ??0?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<char>>::_Wrap_alloc<std::allocator<char>>(void)
.text$mn:00007CCB                 mov     eax, [ebp+arg_0]
.text$mn:00007CCE                 mov     esp, ebp
.text$mn:00007CD0                 pop     ebp
.text$mn:00007CD1                 retn    4
.text$mn:00007CD1 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ endp
.text$mn:00007CD1
.text$mn:00007CD1 _text$mn        ends
.text$mn:00007CD1
.text$mn:00007CD4 ; ===========================================================================
.text$mn:00007CD4
.text$mn:00007CD4 ; Segment type: Pure code
.text$mn:00007CD4 ; Segment permissions: Read/Execute
.text$mn:00007CD4 _text$mn        segment para public 'CODE' use32
.text$mn:00007CD4                 assume cs:_text$mn
.text$mn:00007CD4                 ;org 7CD4h
.text$mn:00007CD4 ; COMDAT (pick any)
.text$mn:00007CD4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CD4
.text$mn:00007CD4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007CD4
.text$mn:00007CD4 ; Attributes: bp-based frame
.text$mn:00007CD4
.text$mn:00007CD4 ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_String_alloc<0, struct std::_String_base_types<wchar_t, class std::allocator<wchar_t>>>::_Getal(void)const
.text$mn:00007CD4                 public ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ
.text$mn:00007CD4 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ proc near
.text$mn:00007CD4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+33p
.text$mn:00007CD4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+4Bp ...
.text$mn:00007CD4
.text$mn:00007CD4 var_4           = dword ptr -4
.text$mn:00007CD4 arg_0           = dword ptr  8
.text$mn:00007CD4
.text$mn:00007CD4                 push    ebp
.text$mn:00007CD5                 mov     ebp, esp
.text$mn:00007CD7                 push    ecx
.text$mn:00007CD8                 mov     [ebp+var_4], ecx
.text$mn:00007CDB                 mov     ecx, [ebp+arg_0]
.text$mn:00007CDE                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@XZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(void)
.text$mn:00007CE3                 mov     eax, [ebp+arg_0]
.text$mn:00007CE6                 mov     esp, ebp
.text$mn:00007CE8                 pop     ebp
.text$mn:00007CE9                 retn    4
.text$mn:00007CE9 ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ endp
.text$mn:00007CE9
.text$mn:00007CE9 _text$mn        ends
.text$mn:00007CE9
.text$mn:00007CEC ; ===========================================================================
.text$mn:00007CEC
.text$mn:00007CEC ; Segment type: Pure code
.text$mn:00007CEC ; Segment permissions: Read/Execute
.text$mn:00007CEC _text$mn        segment para public 'CODE' use32
.text$mn:00007CEC                 assume cs:_text$mn
.text$mn:00007CEC                 ;org 7CECh
.text$mn:00007CEC ; COMDAT (pick any)
.text$mn:00007CEC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007CEC
.text$mn:00007CEC ; =============== S U B R O U T I N E =======================================
.text$mn:00007CEC
.text$mn:00007CEC ; Attributes: bp-based frame
.text$mn:00007CEC
.text$mn:00007CEC ; const struct std::_Container_base12 *__thiscall std::_Iterator_base12::_Getcont(std::_Iterator_base12 *__hidden this)
.text$mn:00007CEC                 public ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ
.text$mn:00007CEC ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ proc near
.text$mn:00007CEC                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+Bp
.text$mn:00007CEC                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+20p ...
.text$mn:00007CEC
.text$mn:00007CEC var_8           = dword ptr -8
.text$mn:00007CEC var_4           = dword ptr -4
.text$mn:00007CEC
.text$mn:00007CEC                 push    ebp
.text$mn:00007CED                 mov     ebp, esp
.text$mn:00007CEF                 sub     esp, 8
.text$mn:00007CF2                 mov     [ebp+var_4], ecx
.text$mn:00007CF5                 mov     eax, [ebp+var_4]
.text$mn:00007CF8                 cmp     dword ptr [eax], 0
.text$mn:00007CFB                 jnz     short loc_7D06
.text$mn:00007CFD                 mov     [ebp+var_8], 0
.text$mn:00007D04                 jmp     short loc_7D10
.text$mn:00007D06 ; ---------------------------------------------------------------------------
.text$mn:00007D06
.text$mn:00007D06 loc_7D06:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+Fj
.text$mn:00007D06                 mov     ecx, [ebp+var_4]
.text$mn:00007D09                 mov     edx, [ecx]
.text$mn:00007D0B                 mov     eax, [edx]
.text$mn:00007D0D                 mov     [ebp+var_8], eax
.text$mn:00007D10
.text$mn:00007D10 loc_7D10:                               ; CODE XREF: std::_Iterator_base12::_Getcont(void)+18j
.text$mn:00007D10                 mov     eax, [ebp+var_8]
.text$mn:00007D13                 mov     esp, ebp
.text$mn:00007D15                 pop     ebp
.text$mn:00007D16                 retn
.text$mn:00007D16 ?_Getcont@_Iterator_base12@std@@QBEPBU_Container_base12@2@XZ endp
.text$mn:00007D16
.text$mn:00007D16 ; ---------------------------------------------------------------------------
.text$mn:00007D17                 align 4
.text$mn:00007D17 _text$mn        ends
.text$mn:00007D17
.text$mn:00007D18 ; ===========================================================================
.text$mn:00007D18
.text$mn:00007D18 ; Segment type: Pure code
.text$mn:00007D18 ; Segment permissions: Read/Execute
.text$mn:00007D18 _text$mn        segment para public 'CODE' use32
.text$mn:00007D18                 assume cs:_text$mn
.text$mn:00007D18                 ;org 7D18h
.text$mn:00007D18 ; COMDAT (pick any)
.text$mn:00007D18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007D18
.text$mn:00007D18 ; =============== S U B R O U T I N E =======================================
.text$mn:00007D18
.text$mn:00007D18 ; Attributes: bp-based frame
.text$mn:00007D18
.text$mn:00007D18 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Grow(unsigned int, bool)
.text$mn:00007D18                 public ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z
.text$mn:00007D18 ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z proc near
.text$mn:00007D18                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+6Ap
.text$mn:00007D18                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+5Fp
.text$mn:00007D18
.text$mn:00007D18 var_C           = dword ptr -0Ch
.text$mn:00007D18 Size            = dword ptr -8
.text$mn:00007D18 var_4           = dword ptr -4
.text$mn:00007D18 arg_0           = dword ptr  8
.text$mn:00007D18 arg_4           = byte ptr  0Ch
.text$mn:00007D18
.text$mn:00007D18                 push    ebp
.text$mn:00007D19                 mov     ebp, esp
.text$mn:00007D1B                 sub     esp, 0Ch
.text$mn:00007D1E                 mov     [ebp+var_4], ecx
.text$mn:00007D21                 mov     ecx, [ebp+var_4]
.text$mn:00007D24                 call    ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)
.text$mn:00007D29                 cmp     eax, [ebp+arg_0]
.text$mn:00007D2C                 jnb     short loc_7D36
.text$mn:00007D2E                 mov     ecx, [ebp+var_4]
.text$mn:00007D31                 call    ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)
.text$mn:00007D36
.text$mn:00007D36 loc_7D36:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+14j
.text$mn:00007D36                 mov     eax, [ebp+var_4]
.text$mn:00007D39                 mov     ecx, [eax+18h]
.text$mn:00007D3C                 cmp     ecx, [ebp+arg_0]
.text$mn:00007D3F                 jnb     short loc_7D56
.text$mn:00007D41                 mov     edx, [ebp+var_4]
.text$mn:00007D44                 mov     eax, [edx+14h]
.text$mn:00007D47                 push    eax
.text$mn:00007D48                 mov     ecx, [ebp+arg_0]
.text$mn:00007D4B                 push    ecx
.text$mn:00007D4C                 mov     ecx, [ebp+var_4]
.text$mn:00007D4F                 call    ?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)
.text$mn:00007D54                 jmp     short loc_7DA0
.text$mn:00007D56 ; ---------------------------------------------------------------------------
.text$mn:00007D56
.text$mn:00007D56 loc_7D56:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+27j
.text$mn:00007D56                 movzx   edx, [ebp+arg_4]
.text$mn:00007D5A                 test    edx, edx
.text$mn:00007D5C                 jz      short loc_7D90
.text$mn:00007D5E                 cmp     [ebp+arg_0], 10h
.text$mn:00007D62                 jnb     short loc_7D90
.text$mn:00007D64                 mov     eax, [ebp+var_4]
.text$mn:00007D67                 mov     ecx, [ebp+arg_0]
.text$mn:00007D6A                 cmp     ecx, [eax+14h]
.text$mn:00007D6D                 jnb     short loc_7D77
.text$mn:00007D6F                 mov     edx, [ebp+arg_0]
.text$mn:00007D72                 mov     [ebp+Size], edx
.text$mn:00007D75                 jmp     short loc_7D80
.text$mn:00007D77 ; ---------------------------------------------------------------------------
.text$mn:00007D77
.text$mn:00007D77 loc_7D77:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+55j
.text$mn:00007D77                 mov     eax, [ebp+var_4]
.text$mn:00007D7A                 mov     ecx, [eax+14h]
.text$mn:00007D7D                 mov     [ebp+Size], ecx
.text$mn:00007D80
.text$mn:00007D80 loc_7D80:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+5Dj
.text$mn:00007D80                 mov     edx, [ebp+Size]
.text$mn:00007D83                 push    edx             ; Size
.text$mn:00007D84                 push    1               ; char
.text$mn:00007D86                 mov     ecx, [ebp+var_4]
.text$mn:00007D89                 call    ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)
.text$mn:00007D8E                 jmp     short loc_7DA0
.text$mn:00007D90 ; ---------------------------------------------------------------------------
.text$mn:00007D90
.text$mn:00007D90 loc_7D90:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+44j
.text$mn:00007D90                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+4Aj
.text$mn:00007D90                 cmp     [ebp+arg_0], 0
.text$mn:00007D94                 jnz     short loc_7DA0
.text$mn:00007D96                 push    0
.text$mn:00007D98                 mov     ecx, [ebp+var_4]
.text$mn:00007D9B                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00007DA0
.text$mn:00007DA0 loc_7DA0:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+3Cj
.text$mn:00007DA0                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+76j ...
.text$mn:00007DA0                 cmp     [ebp+arg_0], 0
.text$mn:00007DA4                 jbe     short loc_7DAF
.text$mn:00007DA6                 mov     [ebp+var_C], 1
.text$mn:00007DAD                 jmp     short loc_7DB6
.text$mn:00007DAF ; ---------------------------------------------------------------------------
.text$mn:00007DAF
.text$mn:00007DAF loc_7DAF:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+8Cj
.text$mn:00007DAF                 mov     [ebp+var_C], 0
.text$mn:00007DB6
.text$mn:00007DB6 loc_7DB6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+95j
.text$mn:00007DB6                 mov     al, byte ptr [ebp+var_C]
.text$mn:00007DB9                 mov     esp, ebp
.text$mn:00007DBB                 pop     ebp
.text$mn:00007DBC                 retn    8
.text$mn:00007DBC ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z endp
.text$mn:00007DBC
.text$mn:00007DBC ; ---------------------------------------------------------------------------
.text$mn:00007DBF                 align 10h
.text$mn:00007DBF _text$mn        ends
.text$mn:00007DBF
.text$mn:00007DC0 ; ===========================================================================
.text$mn:00007DC0
.text$mn:00007DC0 ; Segment type: Pure code
.text$mn:00007DC0 ; Segment permissions: Read/Execute
.text$mn:00007DC0 _text$mn        segment para public 'CODE' use32
.text$mn:00007DC0                 assume cs:_text$mn
.text$mn:00007DC0                 ;org 7DC0h
.text$mn:00007DC0 ; COMDAT (pick any)
.text$mn:00007DC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007DC0
.text$mn:00007DC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00007DC0
.text$mn:00007DC0 ; Attributes: bp-based frame
.text$mn:00007DC0
.text$mn:00007DC0 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Grow(unsigned int, bool)
.text$mn:00007DC0                 public ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z
.text$mn:00007DC0 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z proc near
.text$mn:00007DC0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+6Ap
.text$mn:00007DC0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+61p ...
.text$mn:00007DC0
.text$mn:00007DC0 var_C           = dword ptr -0Ch
.text$mn:00007DC0 var_8           = dword ptr -8
.text$mn:00007DC0 var_4           = dword ptr -4
.text$mn:00007DC0 arg_0           = dword ptr  8
.text$mn:00007DC0 arg_4           = byte ptr  0Ch
.text$mn:00007DC0
.text$mn:00007DC0                 push    ebp
.text$mn:00007DC1                 mov     ebp, esp
.text$mn:00007DC3                 sub     esp, 0Ch
.text$mn:00007DC6                 mov     [ebp+var_4], ecx
.text$mn:00007DC9                 mov     ecx, [ebp+var_4]
.text$mn:00007DCC                 call    ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)
.text$mn:00007DD1                 cmp     eax, [ebp+arg_0]
.text$mn:00007DD4                 jnb     short loc_7DDE
.text$mn:00007DD6                 mov     ecx, [ebp+var_4]
.text$mn:00007DD9                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00007DDE
.text$mn:00007DDE loc_7DDE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+14j
.text$mn:00007DDE                 mov     eax, [ebp+var_4]
.text$mn:00007DE1                 mov     ecx, [eax+18h]
.text$mn:00007DE4                 cmp     ecx, [ebp+arg_0]
.text$mn:00007DE7                 jnb     short loc_7DFE
.text$mn:00007DE9                 mov     edx, [ebp+var_4]
.text$mn:00007DEC                 mov     eax, [edx+14h]
.text$mn:00007DEF                 push    eax
.text$mn:00007DF0                 mov     ecx, [ebp+arg_0]
.text$mn:00007DF3                 push    ecx
.text$mn:00007DF4                 mov     ecx, [ebp+var_4]
.text$mn:00007DF7                 call    ?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)
.text$mn:00007DFC                 jmp     short loc_7E48
.text$mn:00007DFE ; ---------------------------------------------------------------------------
.text$mn:00007DFE
.text$mn:00007DFE loc_7DFE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+27j
.text$mn:00007DFE                 movzx   edx, [ebp+arg_4]
.text$mn:00007E02                 test    edx, edx
.text$mn:00007E04                 jz      short loc_7E38
.text$mn:00007E06                 cmp     [ebp+arg_0], 8
.text$mn:00007E0A                 jnb     short loc_7E38
.text$mn:00007E0C                 mov     eax, [ebp+var_4]
.text$mn:00007E0F                 mov     ecx, [ebp+arg_0]
.text$mn:00007E12                 cmp     ecx, [eax+14h]
.text$mn:00007E15                 jnb     short loc_7E1F
.text$mn:00007E17                 mov     edx, [ebp+arg_0]
.text$mn:00007E1A                 mov     [ebp+var_8], edx
.text$mn:00007E1D                 jmp     short loc_7E28
.text$mn:00007E1F ; ---------------------------------------------------------------------------
.text$mn:00007E1F
.text$mn:00007E1F loc_7E1F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+55j
.text$mn:00007E1F                 mov     eax, [ebp+var_4]
.text$mn:00007E22                 mov     ecx, [eax+14h]
.text$mn:00007E25                 mov     [ebp+var_8], ecx
.text$mn:00007E28
.text$mn:00007E28 loc_7E28:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+5Dj
.text$mn:00007E28                 mov     edx, [ebp+var_8]
.text$mn:00007E2B                 push    edx
.text$mn:00007E2C                 push    1
.text$mn:00007E2E                 mov     ecx, [ebp+var_4]
.text$mn:00007E31                 call    ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)
.text$mn:00007E36                 jmp     short loc_7E48
.text$mn:00007E38 ; ---------------------------------------------------------------------------
.text$mn:00007E38
.text$mn:00007E38 loc_7E38:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+44j
.text$mn:00007E38                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+4Aj
.text$mn:00007E38                 cmp     [ebp+arg_0], 0
.text$mn:00007E3C                 jnz     short loc_7E48
.text$mn:00007E3E                 push    0
.text$mn:00007E40                 mov     ecx, [ebp+var_4]
.text$mn:00007E43                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00007E48
.text$mn:00007E48 loc_7E48:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+3Cj
.text$mn:00007E48                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+76j ...
.text$mn:00007E48                 cmp     [ebp+arg_0], 0
.text$mn:00007E4C                 jbe     short loc_7E57
.text$mn:00007E4E                 mov     [ebp+var_C], 1
.text$mn:00007E55                 jmp     short loc_7E5E
.text$mn:00007E57 ; ---------------------------------------------------------------------------
.text$mn:00007E57
.text$mn:00007E57 loc_7E57:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+8Cj
.text$mn:00007E57                 mov     [ebp+var_C], 0
.text$mn:00007E5E
.text$mn:00007E5E loc_7E5E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+95j
.text$mn:00007E5E                 mov     al, byte ptr [ebp+var_C]
.text$mn:00007E61                 mov     esp, ebp
.text$mn:00007E63                 pop     ebp
.text$mn:00007E64                 retn    8
.text$mn:00007E64 ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z endp
.text$mn:00007E64
.text$mn:00007E64 ; ---------------------------------------------------------------------------
.text$mn:00007E67                 align 4
.text$mn:00007E67 _text$mn        ends
.text$mn:00007E67
.text$mn:00007E68 ; ===========================================================================
.text$mn:00007E68
.text$mn:00007E68 ; Segment type: Pure code
.text$mn:00007E68 ; Segment permissions: Read/Execute
.text$mn:00007E68 _text$mn        segment para public 'CODE' use32
.text$mn:00007E68                 assume cs:_text$mn
.text$mn:00007E68                 ;org 7E68h
.text$mn:00007E68 ; COMDAT (pick any)
.text$mn:00007E68                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007E68
.text$mn:00007E68 ; =============== S U B R O U T I N E =======================================
.text$mn:00007E68
.text$mn:00007E68 ; Attributes: bp-based frame
.text$mn:00007E68
.text$mn:00007E68 ; public: bool __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Inside(char const *)
.text$mn:00007E68                 public ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z
.text$mn:00007E68 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z proc near
.text$mn:00007E68                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+2Ap
.text$mn:00007E68
.text$mn:00007E68 var_4           = dword ptr -4
.text$mn:00007E68 arg_0           = dword ptr  8
.text$mn:00007E68
.text$mn:00007E68                 push    ebp
.text$mn:00007E69                 mov     ebp, esp
.text$mn:00007E6B                 push    ecx
.text$mn:00007E6C                 mov     [ebp+var_4], ecx
.text$mn:00007E6F                 cmp     [ebp+arg_0], 0
.text$mn:00007E73                 jz      short loc_7E95
.text$mn:00007E75                 mov     ecx, [ebp+var_4]
.text$mn:00007E78                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007E7D                 cmp     [ebp+arg_0], eax
.text$mn:00007E80                 jb      short loc_7E95
.text$mn:00007E82                 mov     ecx, [ebp+var_4]
.text$mn:00007E85                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007E8A                 mov     ecx, [ebp+var_4]
.text$mn:00007E8D                 add     eax, [ecx+14h]
.text$mn:00007E90                 cmp     eax, [ebp+arg_0]
.text$mn:00007E93                 ja      short loc_7E9B
.text$mn:00007E95
.text$mn:00007E95 loc_7E95:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+Bj
.text$mn:00007E95                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+18j
.text$mn:00007E95                 xor     al, al
.text$mn:00007E97                 jmp     short loc_7E9D
.text$mn:00007E99 ; ---------------------------------------------------------------------------
.text$mn:00007E99                 jmp     short loc_7E9D
.text$mn:00007E9B ; ---------------------------------------------------------------------------
.text$mn:00007E9B
.text$mn:00007E9B loc_7E9B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Bj
.text$mn:00007E9B                 mov     al, 1
.text$mn:00007E9D
.text$mn:00007E9D loc_7E9D:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+2Fj
.text$mn:00007E9D                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)+31j
.text$mn:00007E9D                 mov     esp, ebp
.text$mn:00007E9F                 pop     ebp
.text$mn:00007EA0                 retn    4
.text$mn:00007EA0 ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z endp
.text$mn:00007EA0
.text$mn:00007EA0 ; ---------------------------------------------------------------------------
.text$mn:00007EA3                 align 4
.text$mn:00007EA3 _text$mn        ends
.text$mn:00007EA3
.text$mn:00007EA4 ; ===========================================================================
.text$mn:00007EA4
.text$mn:00007EA4 ; Segment type: Pure code
.text$mn:00007EA4 ; Segment permissions: Read/Execute
.text$mn:00007EA4 _text$mn        segment para public 'CODE' use32
.text$mn:00007EA4                 assume cs:_text$mn
.text$mn:00007EA4                 ;org 7EA4h
.text$mn:00007EA4 ; COMDAT (pick any)
.text$mn:00007EA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007EA4
.text$mn:00007EA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007EA4
.text$mn:00007EA4 ; Attributes: bp-based frame
.text$mn:00007EA4
.text$mn:00007EA4 ; public: bool __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:00007EA4                 public ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z
.text$mn:00007EA4 ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z proc near
.text$mn:00007EA4                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+2Ap
.text$mn:00007EA4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+2Cp
.text$mn:00007EA4
.text$mn:00007EA4 var_4           = dword ptr -4
.text$mn:00007EA4 arg_0           = dword ptr  8
.text$mn:00007EA4
.text$mn:00007EA4                 push    ebp
.text$mn:00007EA5                 mov     ebp, esp
.text$mn:00007EA7                 push    ecx
.text$mn:00007EA8                 mov     [ebp+var_4], ecx
.text$mn:00007EAB                 cmp     [ebp+arg_0], 0
.text$mn:00007EAF                 jz      short loc_7ED4
.text$mn:00007EB1                 mov     ecx, [ebp+var_4]
.text$mn:00007EB4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007EB9                 cmp     [ebp+arg_0], eax
.text$mn:00007EBC                 jb      short loc_7ED4
.text$mn:00007EBE                 mov     ecx, [ebp+var_4]
.text$mn:00007EC1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007EC6                 mov     ecx, [ebp+var_4]
.text$mn:00007EC9                 mov     edx, [ecx+14h]
.text$mn:00007ECC                 lea     eax, [eax+edx*2]
.text$mn:00007ECF                 cmp     eax, [ebp+arg_0]
.text$mn:00007ED2                 ja      short loc_7EDA
.text$mn:00007ED4
.text$mn:00007ED4 loc_7ED4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+Bj
.text$mn:00007ED4                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+18j
.text$mn:00007ED4                 xor     al, al
.text$mn:00007ED6                 jmp     short loc_7EDC
.text$mn:00007ED8 ; ---------------------------------------------------------------------------
.text$mn:00007ED8                 jmp     short loc_7EDC
.text$mn:00007EDA ; ---------------------------------------------------------------------------
.text$mn:00007EDA
.text$mn:00007EDA loc_7EDA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+2Ej
.text$mn:00007EDA                 mov     al, 1
.text$mn:00007EDC
.text$mn:00007EDC loc_7EDC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+32j
.text$mn:00007EDC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)+34j
.text$mn:00007EDC                 mov     esp, ebp
.text$mn:00007EDE                 pop     ebp
.text$mn:00007EDF                 retn    4
.text$mn:00007EDF ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z endp
.text$mn:00007EDF
.text$mn:00007EDF ; ---------------------------------------------------------------------------
.text$mn:00007EE2                 align 4
.text$mn:00007EE2 _text$mn        ends
.text$mn:00007EE2
.text$mn:00007EE4 ; ===========================================================================
.text$mn:00007EE4
.text$mn:00007EE4 ; Segment type: Pure code
.text$mn:00007EE4 ; Segment permissions: Read/Execute
.text$mn:00007EE4 _text$mn        segment para public 'CODE' use32
.text$mn:00007EE4                 assume cs:_text$mn
.text$mn:00007EE4                 ;org 7EE4h
.text$mn:00007EE4 ; COMDAT (pick any)
.text$mn:00007EE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007EE4
.text$mn:00007EE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007EE4
.text$mn:00007EE4 ; Attributes: bp-based frame
.text$mn:00007EE4
.text$mn:00007EE4 ; public: char * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)
.text$mn:00007EE4                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ
.text$mn:00007EE4 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ proc near
.text$mn:00007EE4                                         ; CODE XREF: $LN19+14p
.text$mn:00007EE4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+1Dp ...
.text$mn:00007EE4
.text$mn:00007EE4 var_8           = dword ptr -8
.text$mn:00007EE4 var_4           = dword ptr -4
.text$mn:00007EE4
.text$mn:00007EE4                 push    ebp
.text$mn:00007EE5                 mov     ebp, esp
.text$mn:00007EE7                 sub     esp, 8
.text$mn:00007EEA                 mov     [ebp+var_4], ecx
.text$mn:00007EED                 mov     eax, [ebp+var_4]
.text$mn:00007EF0                 cmp     dword ptr [eax+18h], 10h
.text$mn:00007EF4                 jb      short loc_7F0A
.text$mn:00007EF6                 mov     ecx, [ebp+var_4]
.text$mn:00007EF9                 mov     edx, [ecx+4]
.text$mn:00007EFC                 push    edx
.text$mn:00007EFD                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00007F02                 add     esp, 4
.text$mn:00007F05                 mov     [ebp+var_8], eax
.text$mn:00007F08                 jmp     short loc_7F13
.text$mn:00007F0A ; ---------------------------------------------------------------------------
.text$mn:00007F0A
.text$mn:00007F0A loc_7F0A:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00007F0A                 mov     eax, [ebp+var_4]
.text$mn:00007F0D                 add     eax, 4
.text$mn:00007F10                 mov     [ebp+var_8], eax
.text$mn:00007F13
.text$mn:00007F13 loc_7F13:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00007F13                 mov     eax, [ebp+var_8]
.text$mn:00007F16                 mov     esp, ebp
.text$mn:00007F18                 pop     ebp
.text$mn:00007F19                 retn
.text$mn:00007F19 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ endp
.text$mn:00007F19
.text$mn:00007F19 ; ---------------------------------------------------------------------------
.text$mn:00007F1A                 align 4
.text$mn:00007F1A _text$mn        ends
.text$mn:00007F1A
.text$mn:00007F1C ; ===========================================================================
.text$mn:00007F1C
.text$mn:00007F1C ; Segment type: Pure code
.text$mn:00007F1C ; Segment permissions: Read/Execute
.text$mn:00007F1C _text$mn        segment para public 'CODE' use32
.text$mn:00007F1C                 assume cs:_text$mn
.text$mn:00007F1C                 ;org 7F1Ch
.text$mn:00007F1C ; COMDAT (pick any)
.text$mn:00007F1C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F1C
.text$mn:00007F1C ; =============== S U B R O U T I N E =======================================
.text$mn:00007F1C
.text$mn:00007F1C ; Attributes: bp-based frame
.text$mn:00007F1C
.text$mn:00007F1C ; public: char const * __thiscall std::_String_val<struct std::_Simple_types<char>>::_Myptr(void)const
.text$mn:00007F1C                 public ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ
.text$mn:00007F1C ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ proc near
.text$mn:00007F1C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+7Dp
.text$mn:00007F1C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::c_str(void)+Ap
.text$mn:00007F1C
.text$mn:00007F1C var_8           = dword ptr -8
.text$mn:00007F1C var_4           = dword ptr -4
.text$mn:00007F1C
.text$mn:00007F1C                 push    ebp
.text$mn:00007F1D                 mov     ebp, esp
.text$mn:00007F1F                 sub     esp, 8
.text$mn:00007F22                 mov     [ebp+var_4], ecx
.text$mn:00007F25                 mov     eax, [ebp+var_4]
.text$mn:00007F28                 cmp     dword ptr [eax+18h], 10h
.text$mn:00007F2C                 jb      short loc_7F42
.text$mn:00007F2E                 mov     ecx, [ebp+var_4]
.text$mn:00007F31                 mov     edx, [ecx+4]
.text$mn:00007F34                 push    edx
.text$mn:00007F35                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:00007F3A                 add     esp, 4
.text$mn:00007F3D                 mov     [ebp+var_8], eax
.text$mn:00007F40                 jmp     short loc_7F4B
.text$mn:00007F42 ; ---------------------------------------------------------------------------
.text$mn:00007F42
.text$mn:00007F42 loc_7F42:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+10j
.text$mn:00007F42                 mov     eax, [ebp+var_4]
.text$mn:00007F45                 add     eax, 4
.text$mn:00007F48                 mov     [ebp+var_8], eax
.text$mn:00007F4B
.text$mn:00007F4B loc_7F4B:                               ; CODE XREF: std::_String_val<std::_Simple_types<char>>::_Myptr(void)+24j
.text$mn:00007F4B                 mov     eax, [ebp+var_8]
.text$mn:00007F4E                 mov     esp, ebp
.text$mn:00007F50                 pop     ebp
.text$mn:00007F51                 retn
.text$mn:00007F51 ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ endp
.text$mn:00007F51
.text$mn:00007F51 ; ---------------------------------------------------------------------------
.text$mn:00007F52                 align 4
.text$mn:00007F52 _text$mn        ends
.text$mn:00007F52
.text$mn:00007F54 ; ===========================================================================
.text$mn:00007F54
.text$mn:00007F54 ; Segment type: Pure code
.text$mn:00007F54 ; Segment permissions: Read/Execute
.text$mn:00007F54 _text$mn        segment para public 'CODE' use32
.text$mn:00007F54                 assume cs:_text$mn
.text$mn:00007F54                 ;org 7F54h
.text$mn:00007F54 ; COMDAT (pick any)
.text$mn:00007F54                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F54
.text$mn:00007F54 ; =============== S U B R O U T I N E =======================================
.text$mn:00007F54
.text$mn:00007F54 ; Attributes: bp-based frame
.text$mn:00007F54
.text$mn:00007F54 ; public: wchar_t * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00007F54                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ
.text$mn:00007F54 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ proc near
.text$mn:00007F54                                         ; CODE XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+27p
.text$mn:00007F54                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+3Ep ...
.text$mn:00007F54
.text$mn:00007F54 var_8           = dword ptr -8
.text$mn:00007F54 var_4           = dword ptr -4
.text$mn:00007F54
.text$mn:00007F54                 push    ebp
.text$mn:00007F55                 mov     ebp, esp
.text$mn:00007F57                 sub     esp, 8
.text$mn:00007F5A                 mov     [ebp+var_4], ecx
.text$mn:00007F5D                 mov     eax, [ebp+var_4]
.text$mn:00007F60                 cmp     dword ptr [eax+18h], 8
.text$mn:00007F64                 jb      short loc_7F7A
.text$mn:00007F66                 mov     ecx, [ebp+var_4]
.text$mn:00007F69                 mov     edx, [ecx+4]
.text$mn:00007F6C                 push    edx
.text$mn:00007F6D                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00007F72                 add     esp, 4
.text$mn:00007F75                 mov     [ebp+var_8], eax
.text$mn:00007F78                 jmp     short loc_7F83
.text$mn:00007F7A ; ---------------------------------------------------------------------------
.text$mn:00007F7A
.text$mn:00007F7A loc_7F7A:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00007F7A                 mov     eax, [ebp+var_4]
.text$mn:00007F7D                 add     eax, 4
.text$mn:00007F80                 mov     [ebp+var_8], eax
.text$mn:00007F83
.text$mn:00007F83 loc_7F83:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00007F83                 mov     eax, [ebp+var_8]
.text$mn:00007F86                 mov     esp, ebp
.text$mn:00007F88                 pop     ebp
.text$mn:00007F89                 retn
.text$mn:00007F89 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ endp
.text$mn:00007F89
.text$mn:00007F89 ; ---------------------------------------------------------------------------
.text$mn:00007F8A                 align 4
.text$mn:00007F8A _text$mn        ends
.text$mn:00007F8A
.text$mn:00007F8C ; ===========================================================================
.text$mn:00007F8C
.text$mn:00007F8C ; Segment type: Pure code
.text$mn:00007F8C ; Segment permissions: Read/Execute
.text$mn:00007F8C _text$mn        segment para public 'CODE' use32
.text$mn:00007F8C                 assume cs:_text$mn
.text$mn:00007F8C                 ;org 7F8Ch
.text$mn:00007F8C ; COMDAT (pick any)
.text$mn:00007F8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007F8C
.text$mn:00007F8C ; =============== S U B R O U T I N E =======================================
.text$mn:00007F8C
.text$mn:00007F8C ; Attributes: bp-based frame
.text$mn:00007F8C
.text$mn:00007F8C ; public: wchar_t const * __thiscall std::_String_val<struct std::_Simple_types<wchar_t>>::_Myptr(void)const
.text$mn:00007F8C                 public ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ
.text$mn:00007F8C ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ proc near
.text$mn:00007F8C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+7Dp
.text$mn:00007F8C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::c_str(void)+Ap ...
.text$mn:00007F8C
.text$mn:00007F8C var_8           = dword ptr -8
.text$mn:00007F8C var_4           = dword ptr -4
.text$mn:00007F8C
.text$mn:00007F8C                 push    ebp
.text$mn:00007F8D                 mov     ebp, esp
.text$mn:00007F8F                 sub     esp, 8
.text$mn:00007F92                 mov     [ebp+var_4], ecx
.text$mn:00007F95                 mov     eax, [ebp+var_4]
.text$mn:00007F98                 cmp     dword ptr [eax+18h], 8
.text$mn:00007F9C                 jb      short loc_7FB2
.text$mn:00007F9E                 mov     ecx, [ebp+var_4]
.text$mn:00007FA1                 mov     edx, [ecx+4]
.text$mn:00007FA4                 push    edx
.text$mn:00007FA5                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:00007FAA                 add     esp, 4
.text$mn:00007FAD                 mov     [ebp+var_8], eax
.text$mn:00007FB0                 jmp     short loc_7FBB
.text$mn:00007FB2 ; ---------------------------------------------------------------------------
.text$mn:00007FB2
.text$mn:00007FB2 loc_7FB2:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+10j
.text$mn:00007FB2                 mov     eax, [ebp+var_4]
.text$mn:00007FB5                 add     eax, 4
.text$mn:00007FB8                 mov     [ebp+var_8], eax
.text$mn:00007FBB
.text$mn:00007FBB loc_7FBB:                               ; CODE XREF: std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)+24j
.text$mn:00007FBB                 mov     eax, [ebp+var_8]
.text$mn:00007FBE                 mov     esp, ebp
.text$mn:00007FC0                 pop     ebp
.text$mn:00007FC1                 retn
.text$mn:00007FC1 ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ endp
.text$mn:00007FC1
.text$mn:00007FC1 ; ---------------------------------------------------------------------------
.text$mn:00007FC2                 align 4
.text$mn:00007FC2 _text$mn        ends
.text$mn:00007FC2
.text$mn:00007FC4 ; ===========================================================================
.text$mn:00007FC4
.text$mn:00007FC4 ; Segment type: Pure code
.text$mn:00007FC4 ; Segment permissions: Read/Execute
.text$mn:00007FC4 _text$mn        segment para public 'CODE' use32
.text$mn:00007FC4                 assume cs:_text$mn
.text$mn:00007FC4                 ;org 7FC4h
.text$mn:00007FC4 ; COMDAT (pick any)
.text$mn:00007FC4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00007FC4
.text$mn:00007FC4 ; =============== S U B R O U T I N E =======================================
.text$mn:00007FC4
.text$mn:00007FC4 ; Attributes: bp-based frame
.text$mn:00007FC4
.text$mn:00007FC4 ; void __thiscall std::_Container_base12::_Orphan_all(std::_Container_base12 *__hidden this)
.text$mn:00007FC4                 public ?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00007FC4 ?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$mn:00007FC4                                         ; CODE XREF: std::_Container_base12::~_Container_base12(void)+Ap
.text$mn:00007FC4                                         ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+14p ...
.text$mn:00007FC4
.text$mn:00007FC4 var_18          = byte ptr -18h
.text$mn:00007FC4 var_14          = dword ptr -14h
.text$mn:00007FC4 var_10          = dword ptr -10h
.text$mn:00007FC4 var_C           = dword ptr -0Ch
.text$mn:00007FC4 var_4           = dword ptr -4
.text$mn:00007FC4
.text$mn:00007FC4                 push    ebp
.text$mn:00007FC5                 mov     ebp, esp
.text$mn:00007FC7                 push    0FFFFFFFFh
.text$mn:00007FC9                 push    offset __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$mn:00007FCE                 mov     eax, large fs:0
.text$mn:00007FD4                 push    eax
.text$mn:00007FD5                 sub     esp, 0Ch
.text$mn:00007FD8                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00007FDD                 xor     eax, ebp
.text$mn:00007FDF                 push    eax
.text$mn:00007FE0                 lea     eax, [ebp+var_C]
.text$mn:00007FE3                 mov     large fs:0, eax
.text$mn:00007FE9                 mov     [ebp+var_14], ecx
.text$mn:00007FEC                 mov     eax, [ebp+var_14]
.text$mn:00007FEF                 cmp     dword ptr [eax], 0
.text$mn:00007FF2                 jz      short loc_804F
.text$mn:00007FF4                 push    3               ; int
.text$mn:00007FF6                 lea     ecx, [ebp+var_18] ; this
.text$mn:00007FF9                 call    ??0_Lockit@std@@QAE@H@Z ; std::_Lockit::_Lockit(int)
.text$mn:00007FFE                 mov     [ebp+var_4], 0
.text$mn:00008005                 mov     ecx, [ebp+var_14]
.text$mn:00008008                 mov     edx, [ecx]
.text$mn:0000800A                 add     edx, 4
.text$mn:0000800D                 mov     [ebp+var_10], edx
.text$mn:00008010                 jmp     short loc_801F
.text$mn:00008012 ; ---------------------------------------------------------------------------
.text$mn:00008012
.text$mn:00008012 loc_8012:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+6Ej
.text$mn:00008012                 mov     eax, [ebp+var_10]
.text$mn:00008015                 mov     ecx, [eax]
.text$mn:00008017                 mov     edx, [ebp+var_10]
.text$mn:0000801A                 mov     eax, [ecx+4]
.text$mn:0000801D                 mov     [edx], eax
.text$mn:0000801F
.text$mn:0000801F loc_801F:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+4Cj
.text$mn:0000801F                 mov     ecx, [ebp+var_10]
.text$mn:00008022                 cmp     dword ptr [ecx], 0
.text$mn:00008025                 jz      short loc_8034
.text$mn:00008027                 mov     edx, [ebp+var_10]
.text$mn:0000802A                 mov     eax, [edx]
.text$mn:0000802C                 mov     dword ptr [eax], 0
.text$mn:00008032                 jmp     short loc_8012
.text$mn:00008034 ; ---------------------------------------------------------------------------
.text$mn:00008034
.text$mn:00008034 loc_8034:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+61j
.text$mn:00008034                 mov     ecx, [ebp+var_14]
.text$mn:00008037                 mov     edx, [ecx]
.text$mn:00008039                 mov     dword ptr [edx+4], 0
.text$mn:00008040                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:00008047                 lea     ecx, [ebp+var_18] ; this
.text$mn:0000804A                 call    ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$mn:0000804F
.text$mn:0000804F loc_804F:                               ; CODE XREF: std::_Container_base12::_Orphan_all(void)+2Ej
.text$mn:0000804F                 mov     ecx, [ebp+var_C]
.text$mn:00008052                 mov     large fs:0, ecx
.text$mn:00008059                 pop     ecx
.text$mn:0000805A                 mov     esp, ebp
.text$mn:0000805C                 pop     ebp
.text$mn:0000805D                 retn
.text$mn:0000805D ?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$mn:0000805D
.text$mn:0000805D ; ---------------------------------------------------------------------------
.text$mn:0000805E                 align 10h
.text$mn:0000805E _text$mn        ends
.text$mn:0000805E
.text$x:00008060 ; ===========================================================================
.text$x:00008060
.text$x:00008060 ; Segment type: Pure code
.text$x:00008060 ; Segment permissions: Read/Execute
.text$x:00008060 _text$x         segment para public 'CODE' use32
.text$x:00008060                 assume cs:_text$x
.text$x:00008060                 ;org 8060h
.text$x:00008060 ; COMDAT (pick associative to section at 7FC4)
.text$x:00008060                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008060
.text$x:00008060 ; =============== S U B R O U T I N E =======================================
.text$x:00008060
.text$x:00008060
.text$x:00008060 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 proc near
.text$x:00008060                                         ; DATA XREF: .xdata$x:00009B98o
.text$x:00008060                 lea     ecx, [ebp-18h]  ; this
.text$x:00008063                 jmp     ??1_Lockit@std@@QAE@XZ ; std::_Lockit::~_Lockit(void)
.text$x:00008063 __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0 endp
.text$x:00008063
.text$x:00008068
.text$x:00008068 ; =============== S U B R O U T I N E =======================================
.text$x:00008068
.text$x:00008068
.text$x:00008068 __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ proc near
.text$x:00008068                                         ; DATA XREF: std::_Container_base12::_Orphan_all(void)+5o
.text$x:00008068
.text$x:00008068 arg_4           = dword ptr  8
.text$x:00008068
.text$x:00008068                 mov     edx, [esp+arg_4]
.text$x:0000806C                 lea     eax, [edx+0Ch]
.text$x:0000806F                 mov     ecx, [edx-10h]
.text$x:00008072                 xor     ecx, eax
.text$x:00008074                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008079                 mov     eax, offset __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ
.text$x:0000807E                 jmp     ___CxxFrameHandler3
.text$x:0000807E __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ endp
.text$x:0000807E
.text$x:0000807E ; ---------------------------------------------------------------------------
.text$x:00008083                 align 4
.text$x:00008083 _text$x         ends
.text$x:00008083
.text$mn:00008084 ; ===========================================================================
.text$mn:00008084
.text$mn:00008084 ; Segment type: Pure code
.text$mn:00008084 ; Segment permissions: Read/Execute
.text$mn:00008084 _text$mn        segment para public 'CODE' use32
.text$mn:00008084                 assume cs:_text$mn
.text$mn:00008084                 ;org 8084h
.text$mn:00008084 ; COMDAT (pick any)
.text$mn:00008084                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008084
.text$mn:00008084 ; =============== S U B R O U T I N E =======================================
.text$mn:00008084
.text$mn:00008084 ; Attributes: bp-based frame
.text$mn:00008084
.text$mn:00008084 ; void __thiscall std::_Iterator_base12::_Orphan_me(std::_Iterator_base12 *__hidden this)
.text$mn:00008084                 public ?_Orphan_me@_Iterator_base12@std@@QAEXXZ
.text$mn:00008084 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ proc near
.text$mn:00008084                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+3Cp
.text$mn:00008084                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+64p ...
.text$mn:00008084
.text$mn:00008084 var_8           = dword ptr -8
.text$mn:00008084 var_4           = dword ptr -4
.text$mn:00008084
.text$mn:00008084                 push    ebp
.text$mn:00008085                 mov     ebp, esp
.text$mn:00008087                 sub     esp, 8
.text$mn:0000808A                 mov     [ebp+var_8], ecx
.text$mn:0000808D                 mov     eax, [ebp+var_8]
.text$mn:00008090                 cmp     dword ptr [eax], 0
.text$mn:00008093                 jz      short loc_80F2
.text$mn:00008095                 mov     ecx, [ebp+var_8]
.text$mn:00008098                 mov     edx, [ecx]
.text$mn:0000809A                 add     edx, 4
.text$mn:0000809D                 mov     [ebp+var_4], edx
.text$mn:000080A0
.text$mn:000080A0 loc_80A0:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+39j
.text$mn:000080A0                 mov     eax, [ebp+var_4]
.text$mn:000080A3                 cmp     dword ptr [eax], 0
.text$mn:000080A6                 jz      short loc_80BF
.text$mn:000080A8                 mov     ecx, [ebp+var_4]
.text$mn:000080AB                 mov     edx, [ecx]
.text$mn:000080AD                 cmp     edx, [ebp+var_8]
.text$mn:000080B0                 jz      short loc_80BF
.text$mn:000080B2                 mov     eax, [ebp+var_4]
.text$mn:000080B5                 mov     ecx, [eax]
.text$mn:000080B7                 add     ecx, 4
.text$mn:000080BA                 mov     [ebp+var_4], ecx
.text$mn:000080BD                 jmp     short loc_80A0
.text$mn:000080BF ; ---------------------------------------------------------------------------
.text$mn:000080BF
.text$mn:000080BF loc_80BF:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+22j
.text$mn:000080BF                                         ; std::_Iterator_base12::_Orphan_me(void)+2Cj
.text$mn:000080BF                 mov     edx, [ebp+var_4]
.text$mn:000080C2                 cmp     dword ptr [edx], 0
.text$mn:000080C5                 jnz     short loc_80DE
.text$mn:000080C7                 push    0C9h ; '+'      ; unsigned int
.text$mn:000080CC                 push    offset ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000080D1                 push    offset ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@ ; "ITERATOR LIST CORRUPTED!"
.text$mn:000080D6                 call    ?_Debug_message@std@@YAXPB_W0I@Z ; std::_Debug_message(wchar_t const *,wchar_t const *,uint)
.text$mn:000080DB                 add     esp, 0Ch
.text$mn:000080DE
.text$mn:000080DE loc_80DE:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+41j
.text$mn:000080DE                 mov     eax, [ebp+var_4]
.text$mn:000080E1                 mov     ecx, [ebp+var_8]
.text$mn:000080E4                 mov     edx, [ecx+4]
.text$mn:000080E7                 mov     [eax], edx
.text$mn:000080E9                 mov     eax, [ebp+var_8]
.text$mn:000080EC                 mov     dword ptr [eax], 0
.text$mn:000080F2
.text$mn:000080F2 loc_80F2:                               ; CODE XREF: std::_Iterator_base12::_Orphan_me(void)+Fj
.text$mn:000080F2                 mov     esp, ebp
.text$mn:000080F4                 pop     ebp
.text$mn:000080F5                 retn
.text$mn:000080F5 ?_Orphan_me@_Iterator_base12@std@@QAEXXZ endp
.text$mn:000080F5
.text$mn:000080F5 ; ---------------------------------------------------------------------------
.text$mn:000080F6                 align 4
.text$mn:000080F6 _text$mn        ends
.text$mn:000080F6
.text$mn:000080F8 ; ===========================================================================
.text$mn:000080F8
.text$mn:000080F8 ; Segment type: Pure code
.text$mn:000080F8 ; Segment permissions: Read/Execute
.text$mn:000080F8 _text$mn        segment para public 'CODE' use32
.text$mn:000080F8                 assume cs:_text$mn
.text$mn:000080F8                 ;org 80F8h
.text$mn:000080F8 ; COMDAT (pick any)
.text$mn:000080F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000080F8
.text$mn:000080F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000080F8
.text$mn:000080F8 ; Attributes: bp-based frame
.text$mn:000080F8
.text$mn:000080F8 ; public: static unsigned int __cdecl std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Pdif(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:000080F8                 public ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$mn:000080F8 ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z proc near
.text$mn:000080F8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+89p
.text$mn:000080F8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+FAp ...
.text$mn:000080F8
.text$mn:000080F8 var_14          = dword ptr -14h
.text$mn:000080F8 var_10          = dword ptr -10h
.text$mn:000080F8 var_C           = dword ptr -0Ch
.text$mn:000080F8 var_4           = dword ptr -4
.text$mn:000080F8 arg_0           = byte ptr  8
.text$mn:000080F8 arg_8           = dword ptr  10h
.text$mn:000080F8 arg_C           = byte ptr  14h
.text$mn:000080F8
.text$mn:000080F8                 push    ebp
.text$mn:000080F9                 mov     ebp, esp
.text$mn:000080FB                 push    0FFFFFFFFh
.text$mn:000080FD                 push    offset __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$mn:00008102                 mov     eax, large fs:0
.text$mn:00008108                 push    eax
.text$mn:00008109                 sub     esp, 8
.text$mn:0000810C                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008111                 xor     eax, ebp
.text$mn:00008113                 push    eax
.text$mn:00008114                 lea     eax, [ebp+var_C]
.text$mn:00008117                 mov     large fs:0, eax
.text$mn:0000811D                 mov     [ebp+var_4], 1
.text$mn:00008124                 cmp     [ebp+arg_8], 0
.text$mn:00008128                 jnz     short loc_8133
.text$mn:0000812A                 mov     [ebp+var_10], 0
.text$mn:00008131                 jmp     short loc_8142
.text$mn:00008133 ; ---------------------------------------------------------------------------
.text$mn:00008133
.text$mn:00008133 loc_8133:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+30j
.text$mn:00008133                 lea     eax, [ebp+arg_C]
.text$mn:00008136                 push    eax             ; std::_Iterator_base12 *
.text$mn:00008137                 lea     ecx, [ebp+arg_0]
.text$mn:0000813A                 call    ??G?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:0000813F                 mov     [ebp+var_10], eax
.text$mn:00008142
.text$mn:00008142 loc_8142:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+39j
.text$mn:00008142                 mov     ecx, [ebp+var_10]
.text$mn:00008145                 mov     [ebp+var_14], ecx
.text$mn:00008148                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000814C                 lea     ecx, [ebp+arg_0]
.text$mn:0000814F                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00008154                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000815B                 lea     ecx, [ebp+arg_C]
.text$mn:0000815E                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00008163                 mov     eax, [ebp+var_14]
.text$mn:00008166                 mov     ecx, [ebp+var_C]
.text$mn:00008169                 mov     large fs:0, ecx
.text$mn:00008170                 pop     ecx
.text$mn:00008171                 mov     esp, ebp
.text$mn:00008173                 pop     ebp
.text$mn:00008174                 retn
.text$mn:00008174 ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z endp
.text$mn:00008174
.text$mn:00008174 ; ---------------------------------------------------------------------------
.text$mn:00008175                 align 4
.text$mn:00008175 _text$mn        ends
.text$mn:00008175
.text$x:00008178 ; ===========================================================================
.text$x:00008178
.text$x:00008178 ; Segment type: Pure code
.text$x:00008178 ; Segment permissions: Read/Execute
.text$x:00008178 _text$x         segment para public 'CODE' use32
.text$x:00008178                 assume cs:_text$x
.text$x:00008178                 ;org 8178h
.text$x:00008178 ; COMDAT (pick associative to section at 80F8)
.text$x:00008178                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008178
.text$x:00008178 ; =============== S U B R O U T I N E =======================================
.text$x:00008178
.text$x:00008178
.text$x:00008178 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 proc near
.text$x:00008178                                         ; DATA XREF: .xdata$x:0000A27Co
.text$x:00008178                 lea     ecx, [ebp+14h]
.text$x:0000817B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000817B __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0 endp
.text$x:0000817B
.text$x:00008180
.text$x:00008180 ; =============== S U B R O U T I N E =======================================
.text$x:00008180
.text$x:00008180
.text$x:00008180 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 proc near
.text$x:00008180                                         ; DATA XREF: .xdata$x:0000A284o
.text$x:00008180                 lea     ecx, [ebp+8]
.text$x:00008183                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00008183 __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1 endp
.text$x:00008183
.text$x:00008188
.text$x:00008188 ; =============== S U B R O U T I N E =======================================
.text$x:00008188
.text$x:00008188
.text$x:00008188 __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z proc near
.text$x:00008188                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:00008188
.text$x:00008188 arg_4           = dword ptr  8
.text$x:00008188
.text$x:00008188                 mov     edx, [esp+arg_4]
.text$x:0000818C                 lea     eax, [edx+0Ch]
.text$x:0000818F                 mov     ecx, [edx-0Ch]
.text$x:00008192                 xor     ecx, eax
.text$x:00008194                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008199                 mov     eax, offset __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.text$x:0000819E                 jmp     ___CxxFrameHandler3
.text$x:0000819E __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z endp
.text$x:0000819E
.text$x:0000819E ; ---------------------------------------------------------------------------
.text$x:000081A3                 align 4
.text$x:000081A3 _text$x         ends
.text$x:000081A3
.text$mn:000081A4 ; ===========================================================================
.text$mn:000081A4
.text$mn:000081A4 ; Segment type: Pure code
.text$mn:000081A4 ; Segment permissions: Read/Execute
.text$mn:000081A4 _text$mn        segment para public 'CODE' use32
.text$mn:000081A4                 assume cs:_text$mn
.text$mn:000081A4                 ;org 81A4h
.text$mn:000081A4 ; COMDAT (pick any)
.text$mn:000081A4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000081A4
.text$mn:000081A4 ; =============== S U B R O U T I N E =======================================
.text$mn:000081A4
.text$mn:000081A4 ; Attributes: bp-based frame
.text$mn:000081A4
.text$mn:000081A4 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(char, size_t Size)
.text$mn:000081A4                 public ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z
.text$mn:000081A4 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z proc near
.text$mn:000081A4                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+47p
.text$mn:000081A4                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)+34p ...
.text$mn:000081A4
.text$mn:000081A4 var_C           = dword ptr -0Ch
.text$mn:000081A4 var_8           = dword ptr -8
.text$mn:000081A4 var_2           = byte ptr -2
.text$mn:000081A4 var_1           = byte ptr -1
.text$mn:000081A4 arg_0           = byte ptr  8
.text$mn:000081A4 Size            = dword ptr  0Ch
.text$mn:000081A4
.text$mn:000081A4                 push    ebp
.text$mn:000081A5                 mov     ebp, esp
.text$mn:000081A7                 sub     esp, 0Ch
.text$mn:000081AA                 mov     [ebp+var_8], ecx
.text$mn:000081AD                 movzx   eax, [ebp+arg_0]
.text$mn:000081B1                 test    eax, eax
.text$mn:000081B3                 jnz     short loc_81B7
.text$mn:000081B5                 jmp     short loc_822A
.text$mn:000081B7 ; ---------------------------------------------------------------------------
.text$mn:000081B7
.text$mn:000081B7 loc_81B7:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+Fj
.text$mn:000081B7                 mov     ecx, [ebp+var_8]
.text$mn:000081BA                 cmp     dword ptr [ecx+18h], 10h
.text$mn:000081BE                 jb      short loc_822A
.text$mn:000081C0                 mov     edx, [ebp+var_8]
.text$mn:000081C3                 mov     eax, [edx+4]
.text$mn:000081C6                 mov     [ebp+var_C], eax
.text$mn:000081C9                 mov     ecx, [ebp+var_8]
.text$mn:000081CC                 add     ecx, 4
.text$mn:000081CF                 push    ecx
.text$mn:000081D0                 lea     edx, [ebp+var_1]
.text$mn:000081D3                 push    edx
.text$mn:000081D4                 mov     ecx, [ebp+var_8]
.text$mn:000081D7                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:000081DC                 mov     ecx, eax
.text$mn:000081DE                 call    ??$destroy@PAD@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPAPAD@Z ; std::_Wrap_alloc<std::allocator<char>>::destroy<char *>(char * *)
.text$mn:000081E3                 cmp     [ebp+Size], 0
.text$mn:000081E7                 jbe     short loc_8209
.text$mn:000081E9                 mov     eax, [ebp+Size]
.text$mn:000081EC                 push    eax             ; Size
.text$mn:000081ED                 mov     ecx, [ebp+var_C]
.text$mn:000081F0                 push    ecx
.text$mn:000081F1                 call    ??$addressof@D@std@@YAPADAAD@Z ; std::addressof<char>(char &)
.text$mn:000081F6                 add     esp, 4
.text$mn:000081F9                 push    eax             ; Src
.text$mn:000081FA                 mov     edx, [ebp+var_8]
.text$mn:000081FD                 add     edx, 4
.text$mn:00008200                 push    edx             ; Dst
.text$mn:00008201                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00008206                 add     esp, 0Ch
.text$mn:00008209
.text$mn:00008209 loc_8209:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+43j
.text$mn:00008209                 mov     eax, [ebp+var_8]
.text$mn:0000820C                 mov     ecx, [eax+18h]
.text$mn:0000820F                 add     ecx, 1
.text$mn:00008212                 push    ecx             ; int
.text$mn:00008213                 mov     edx, [ebp+var_C]
.text$mn:00008216                 push    edx             ; void *
.text$mn:00008217                 lea     eax, [ebp+var_2]
.text$mn:0000821A                 push    eax
.text$mn:0000821B                 mov     ecx, [ebp+var_8]
.text$mn:0000821E                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00008223                 mov     ecx, eax
.text$mn:00008225                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z ; std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)
.text$mn:0000822A
.text$mn:0000822A loc_822A:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+11j
.text$mn:0000822A                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+1Aj
.text$mn:0000822A                 mov     ecx, [ebp+var_8]
.text$mn:0000822D                 mov     dword ptr [ecx+18h], 0Fh
.text$mn:00008234                 mov     edx, [ebp+Size]
.text$mn:00008237                 push    edx
.text$mn:00008238                 mov     ecx, [ebp+var_8]
.text$mn:0000823B                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008240                 mov     esp, ebp
.text$mn:00008242                 pop     ebp
.text$mn:00008243                 retn    8
.text$mn:00008243 ?_Tidy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEX_NI@Z endp
.text$mn:00008243
.text$mn:00008243 ; ---------------------------------------------------------------------------
.text$mn:00008246                 align 4
.text$mn:00008246 _text$mn        ends
.text$mn:00008246
.text$mn:00008248 ; ===========================================================================
.text$mn:00008248
.text$mn:00008248 ; Segment type: Pure code
.text$mn:00008248 ; Segment permissions: Read/Execute
.text$mn:00008248 _text$mn        segment para public 'CODE' use32
.text$mn:00008248                 assume cs:_text$mn
.text$mn:00008248                 ;org 8248h
.text$mn:00008248 ; COMDAT (pick any)
.text$mn:00008248                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008248
.text$mn:00008248 ; =============== S U B R O U T I N E =======================================
.text$mn:00008248
.text$mn:00008248 ; Attributes: bp-based frame
.text$mn:00008248
.text$mn:00008248 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Tidy(bool, unsigned int)
.text$mn:00008248                 public ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z
.text$mn:00008248 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z proc near
.text$mn:00008248                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+56p
.text$mn:00008248                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+47p ...
.text$mn:00008248
.text$mn:00008248 var_C           = dword ptr -0Ch
.text$mn:00008248 var_8           = dword ptr -8
.text$mn:00008248 var_2           = byte ptr -2
.text$mn:00008248 var_1           = byte ptr -1
.text$mn:00008248 arg_0           = byte ptr  8
.text$mn:00008248 arg_4           = dword ptr  0Ch
.text$mn:00008248
.text$mn:00008248                 push    ebp
.text$mn:00008249                 mov     ebp, esp
.text$mn:0000824B                 sub     esp, 0Ch
.text$mn:0000824E                 mov     [ebp+var_8], ecx
.text$mn:00008251                 movzx   eax, [ebp+arg_0]
.text$mn:00008255                 test    eax, eax
.text$mn:00008257                 jnz     short loc_825B
.text$mn:00008259                 jmp     short loc_82CE
.text$mn:0000825B ; ---------------------------------------------------------------------------
.text$mn:0000825B
.text$mn:0000825B loc_825B:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+Fj
.text$mn:0000825B                 mov     ecx, [ebp+var_8]
.text$mn:0000825E                 cmp     dword ptr [ecx+18h], 8
.text$mn:00008262                 jb      short loc_82CE
.text$mn:00008264                 mov     edx, [ebp+var_8]
.text$mn:00008267                 mov     eax, [edx+4]
.text$mn:0000826A                 mov     [ebp+var_C], eax
.text$mn:0000826D                 mov     ecx, [ebp+var_8]
.text$mn:00008270                 add     ecx, 4
.text$mn:00008273                 push    ecx
.text$mn:00008274                 lea     edx, [ebp+var_1]
.text$mn:00008277                 push    edx
.text$mn:00008278                 mov     ecx, [ebp+var_8]
.text$mn:0000827B                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00008280                 mov     ecx, eax
.text$mn:00008282                 call    ??$destroy@PA_W@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPAPA_W@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::destroy<wchar_t *>(wchar_t * *)
.text$mn:00008287                 cmp     [ebp+arg_4], 0
.text$mn:0000828B                 jbe     short loc_82AD
.text$mn:0000828D                 mov     eax, [ebp+arg_4]
.text$mn:00008290                 push    eax             ; int
.text$mn:00008291                 mov     ecx, [ebp+var_C]
.text$mn:00008294                 push    ecx
.text$mn:00008295                 call    ??$addressof@_W@std@@YAPA_WAA_W@Z ; std::addressof<wchar_t>(wchar_t &)
.text$mn:0000829A                 add     esp, 4
.text$mn:0000829D                 push    eax             ; Src
.text$mn:0000829E                 mov     edx, [ebp+var_8]
.text$mn:000082A1                 add     edx, 4
.text$mn:000082A4                 push    edx             ; Dst
.text$mn:000082A5                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000082AA                 add     esp, 0Ch
.text$mn:000082AD
.text$mn:000082AD loc_82AD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+43j
.text$mn:000082AD                 mov     eax, [ebp+var_8]
.text$mn:000082B0                 mov     ecx, [eax+18h]
.text$mn:000082B3                 add     ecx, 1
.text$mn:000082B6                 push    ecx             ; int
.text$mn:000082B7                 mov     edx, [ebp+var_C]
.text$mn:000082BA                 push    edx             ; void *
.text$mn:000082BB                 lea     eax, [ebp+var_2]
.text$mn:000082BE                 push    eax
.text$mn:000082BF                 mov     ecx, [ebp+var_8]
.text$mn:000082C2                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:000082C7                 mov     ecx, eax
.text$mn:000082C9                 call    ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)
.text$mn:000082CE
.text$mn:000082CE loc_82CE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+11j
.text$mn:000082CE                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+1Aj
.text$mn:000082CE                 mov     ecx, [ebp+var_8]
.text$mn:000082D1                 mov     dword ptr [ecx+18h], 7
.text$mn:000082D8                 mov     edx, [ebp+arg_4]
.text$mn:000082DB                 push    edx
.text$mn:000082DC                 mov     ecx, [ebp+var_8]
.text$mn:000082DF                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000082E4                 mov     esp, ebp
.text$mn:000082E6                 pop     ebp
.text$mn:000082E7                 retn    8
.text$mn:000082E7 ?_Tidy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEX_NI@Z endp
.text$mn:000082E7
.text$mn:000082E7 ; ---------------------------------------------------------------------------
.text$mn:000082EA                 align 4
.text$mn:000082EA _text$mn        ends
.text$mn:000082EA
.text$mn:000082EC ; ===========================================================================
.text$mn:000082EC
.text$mn:000082EC ; Segment type: Pure code
.text$mn:000082EC ; Segment permissions: Read/Execute
.text$mn:000082EC _text$mn        segment para public 'CODE' use32
.text$mn:000082EC                 assume cs:_text$mn
.text$mn:000082EC                 ;org 82ECh
.text$mn:000082EC ; COMDAT (pick any)
.text$mn:000082EC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000082EC
.text$mn:000082EC ; =============== S U B R O U T I N E =======================================
.text$mn:000082EC
.text$mn:000082EC ; Attributes: bp-based frame
.text$mn:000082EC
.text$mn:000082EC ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xlen(void)const
.text$mn:000082EC                 public ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:000082EC ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:000082EC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)+19p
.text$mn:000082EC
.text$mn:000082EC var_4           = dword ptr -4
.text$mn:000082EC
.text$mn:000082EC                 push    ebp
.text$mn:000082ED                 mov     ebp, esp
.text$mn:000082EF                 push    ecx
.text$mn:000082F0                 mov     [ebp+var_4], ecx
.text$mn:000082F3                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:000082F8                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:000082FD                 mov     esp, ebp
.text$mn:000082FF                 pop     ebp
.text$mn:00008300                 retn
.text$mn:00008300 ?_Xlen@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00008300
.text$mn:00008300 ; ---------------------------------------------------------------------------
.text$mn:00008301                 align 4
.text$mn:00008301 _text$mn        ends
.text$mn:00008301
.text$mn:00008304 ; ===========================================================================
.text$mn:00008304
.text$mn:00008304 ; Segment type: Pure code
.text$mn:00008304 ; Segment permissions: Read/Execute
.text$mn:00008304 _text$mn        segment para public 'CODE' use32
.text$mn:00008304                 assume cs:_text$mn
.text$mn:00008304                 ;org 8304h
.text$mn:00008304 ; COMDAT (pick any)
.text$mn:00008304                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008304
.text$mn:00008304 ; =============== S U B R O U T I N E =======================================
.text$mn:00008304
.text$mn:00008304 ; Attributes: bp-based frame
.text$mn:00008304
.text$mn:00008304 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xlen(void)const
.text$mn:00008304                 public ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00008304 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00008304                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)+19p
.text$mn:00008304                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+75p ...
.text$mn:00008304
.text$mn:00008304 var_4           = dword ptr -4
.text$mn:00008304
.text$mn:00008304                 push    ebp
.text$mn:00008305                 mov     ebp, esp
.text$mn:00008307                 push    ecx
.text$mn:00008308                 mov     [ebp+var_4], ecx
.text$mn:0000830B                 push    offset ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ ; "string too long"
.text$mn:00008310                 call    ?_Xlength_error@std@@YAXPBD@Z ; std::_Xlength_error(char const *)
.text$mn:00008315                 mov     esp, ebp
.text$mn:00008317                 pop     ebp
.text$mn:00008318                 retn
.text$mn:00008318 ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:00008318
.text$mn:00008318 ; ---------------------------------------------------------------------------
.text$mn:00008319                 align 4
.text$mn:00008319 _text$mn        ends
.text$mn:00008319
.text$mn:0000831C ; ===========================================================================
.text$mn:0000831C
.text$mn:0000831C ; Segment type: Pure code
.text$mn:0000831C ; Segment permissions: Read/Execute
.text$mn:0000831C _text$mn        segment para public 'CODE' use32
.text$mn:0000831C                 assume cs:_text$mn
.text$mn:0000831C                 ;org 831Ch
.text$mn:0000831C ; COMDAT (pick any)
.text$mn:0000831C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000831C
.text$mn:0000831C ; =============== S U B R O U T I N E =======================================
.text$mn:0000831C
.text$mn:0000831C ; Attributes: bp-based frame
.text$mn:0000831C
.text$mn:0000831C ; public: void __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::_Xran(void)const
.text$mn:0000831C                 public ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ
.text$mn:0000831C ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ proc near
.text$mn:0000831C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+19p
.text$mn:0000831C                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+15p ...
.text$mn:0000831C
.text$mn:0000831C var_4           = dword ptr -4
.text$mn:0000831C
.text$mn:0000831C                 push    ebp
.text$mn:0000831D                 mov     ebp, esp
.text$mn:0000831F                 push    ecx
.text$mn:00008320                 mov     [ebp+var_4], ecx
.text$mn:00008323                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00008328                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:0000832D                 mov     esp, ebp
.text$mn:0000832F                 pop     ebp
.text$mn:00008330                 retn
.text$mn:00008330 ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ endp
.text$mn:00008330
.text$mn:00008330 ; ---------------------------------------------------------------------------
.text$mn:00008331                 align 4
.text$mn:00008331 _text$mn        ends
.text$mn:00008331
.text$mn:00008334 ; ===========================================================================
.text$mn:00008334
.text$mn:00008334 ; Segment type: Pure code
.text$mn:00008334 ; Segment permissions: Read/Execute
.text$mn:00008334 _text$mn        segment para public 'CODE' use32
.text$mn:00008334                 assume cs:_text$mn
.text$mn:00008334                 ;org 8334h
.text$mn:00008334 ; COMDAT (pick any)
.text$mn:00008334                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008334
.text$mn:00008334 ; =============== S U B R O U T I N E =======================================
.text$mn:00008334
.text$mn:00008334 ; Attributes: bp-based frame
.text$mn:00008334
.text$mn:00008334 ; public: void __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::_Xran(void)const
.text$mn:00008334                 public ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ
.text$mn:00008334 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ proc near
.text$mn:00008334                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+19p
.text$mn:00008334                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+15p ...
.text$mn:00008334
.text$mn:00008334 var_4           = dword ptr -4
.text$mn:00008334
.text$mn:00008334                 push    ebp
.text$mn:00008335                 mov     ebp, esp
.text$mn:00008337                 push    ecx
.text$mn:00008338                 mov     [ebp+var_4], ecx
.text$mn:0000833B                 push    offset ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ ; "invalid string position"
.text$mn:00008340                 call    ?_Xout_of_range@std@@YAXPBD@Z ; std::_Xout_of_range(char const *)
.text$mn:00008345                 mov     esp, ebp
.text$mn:00008347                 pop     ebp
.text$mn:00008348                 retn
.text$mn:00008348 ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ endp
.text$mn:00008348
.text$mn:00008348 ; ---------------------------------------------------------------------------
.text$mn:00008349                 align 4
.text$mn:00008349 _text$mn        ends
.text$mn:00008349
.text$mn:0000834C ; ===========================================================================
.text$mn:0000834C
.text$mn:0000834C ; Segment type: Pure code
.text$mn:0000834C ; Segment permissions: Read/Execute
.text$mn:0000834C _text$mn        segment para public 'CODE' use32
.text$mn:0000834C                 assume cs:_text$mn
.text$mn:0000834C                 ;org 834Ch
.text$mn:0000834C ; COMDAT (pick any)
.text$mn:0000834C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000834C
.text$mn:0000834C ; =============== S U B R O U T I N E =======================================
.text$mn:0000834C
.text$mn:0000834C ; Attributes: bp-based frame
.text$mn:0000834C
.text$mn:0000834C ; public: char * __thiscall std::_Wrap_alloc<class std::allocator<char>>::allocate(unsigned int)
.text$mn:0000834C                 public ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z
.text$mn:0000834C ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z proc near
.text$mn:0000834C                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+BBp
.text$mn:0000834C                                         ; __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0+22p
.text$mn:0000834C
.text$mn:0000834C var_4           = dword ptr -4
.text$mn:0000834C arg_0           = dword ptr  8
.text$mn:0000834C
.text$mn:0000834C                 push    ebp
.text$mn:0000834D                 mov     ebp, esp
.text$mn:0000834F                 push    ecx
.text$mn:00008350                 mov     [ebp+var_4], ecx
.text$mn:00008353                 mov     eax, [ebp+arg_0]
.text$mn:00008356                 push    eax
.text$mn:00008357                 mov     ecx, [ebp+var_4]
.text$mn:0000835A                 call    ?allocate@?$allocator@D@std@@QAEPADI@Z ; std::allocator<char>::allocate(uint)
.text$mn:0000835F                 mov     esp, ebp
.text$mn:00008361                 pop     ebp
.text$mn:00008362                 retn    4
.text$mn:00008362 ?allocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEPADI@Z endp
.text$mn:00008362
.text$mn:00008362 ; ---------------------------------------------------------------------------
.text$mn:00008365                 align 4
.text$mn:00008365 _text$mn        ends
.text$mn:00008365
.text$mn:00008368 ; ===========================================================================
.text$mn:00008368
.text$mn:00008368 ; Segment type: Pure code
.text$mn:00008368 ; Segment permissions: Read/Execute
.text$mn:00008368 _text$mn        segment para public 'CODE' use32
.text$mn:00008368                 assume cs:_text$mn
.text$mn:00008368                 ;org 8368h
.text$mn:00008368 ; COMDAT (pick any)
.text$mn:00008368                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008368
.text$mn:00008368 ; =============== S U B R O U T I N E =======================================
.text$mn:00008368
.text$mn:00008368 ; Attributes: bp-based frame
.text$mn:00008368
.text$mn:00008368 ; public: wchar_t * __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::allocate(unsigned int)
.text$mn:00008368                 public ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z
.text$mn:00008368 ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z proc near
.text$mn:00008368                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+BBp
.text$mn:00008368                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0+22p
.text$mn:00008368
.text$mn:00008368 var_4           = dword ptr -4
.text$mn:00008368 arg_0           = dword ptr  8
.text$mn:00008368
.text$mn:00008368                 push    ebp
.text$mn:00008369                 mov     ebp, esp
.text$mn:0000836B                 push    ecx
.text$mn:0000836C                 mov     [ebp+var_4], ecx
.text$mn:0000836F                 mov     eax, [ebp+arg_0]
.text$mn:00008372                 push    eax
.text$mn:00008373                 mov     ecx, [ebp+var_4]
.text$mn:00008376                 call    ?allocate@?$allocator@_W@std@@QAEPA_WI@Z ; std::allocator<wchar_t>::allocate(uint)
.text$mn:0000837B                 mov     esp, ebp
.text$mn:0000837D                 pop     ebp
.text$mn:0000837E                 retn    4
.text$mn:0000837E ?allocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEPA_WI@Z endp
.text$mn:0000837E
.text$mn:0000837E ; ---------------------------------------------------------------------------
.text$mn:00008381                 align 4
.text$mn:00008381 _text$mn        ends
.text$mn:00008381
.text$mn:00008384 ; ===========================================================================
.text$mn:00008384
.text$mn:00008384 ; Segment type: Pure code
.text$mn:00008384 ; Segment permissions: Read/Execute
.text$mn:00008384 _text$mn        segment para public 'CODE' use32
.text$mn:00008384                 assume cs:_text$mn
.text$mn:00008384                 ;org 8384h
.text$mn:00008384 ; COMDAT (pick any)
.text$mn:00008384                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008384
.text$mn:00008384 ; =============== S U B R O U T I N E =======================================
.text$mn:00008384
.text$mn:00008384 ; Attributes: bp-based frame
.text$mn:00008384
.text$mn:00008384 ; public: char * __thiscall std::allocator<char>::allocate(unsigned int)
.text$mn:00008384                 public ?allocate@?$allocator@D@std@@QAEPADI@Z
.text$mn:00008384 ?allocate@?$allocator@D@std@@QAEPADI@Z proc near
.text$mn:00008384                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::allocate(uint)+Ep
.text$mn:00008384
.text$mn:00008384 var_4           = dword ptr -4
.text$mn:00008384 arg_0           = dword ptr  8
.text$mn:00008384
.text$mn:00008384                 push    ebp
.text$mn:00008385                 mov     ebp, esp
.text$mn:00008387                 push    ecx
.text$mn:00008388                 mov     [ebp+var_4], ecx
.text$mn:0000838B                 push    0
.text$mn:0000838D                 mov     eax, [ebp+arg_0]
.text$mn:00008390                 push    eax
.text$mn:00008391                 call    ??$_Allocate@D@std@@YAPADIPAD@Z ; std::_Allocate<char>(uint,char *)
.text$mn:00008396                 add     esp, 8
.text$mn:00008399                 mov     esp, ebp
.text$mn:0000839B                 pop     ebp
.text$mn:0000839C                 retn    4
.text$mn:0000839C ?allocate@?$allocator@D@std@@QAEPADI@Z endp
.text$mn:0000839C
.text$mn:0000839C ; ---------------------------------------------------------------------------
.text$mn:0000839F                 align 10h
.text$mn:0000839F _text$mn        ends
.text$mn:0000839F
.text$mn:000083A0 ; ===========================================================================
.text$mn:000083A0
.text$mn:000083A0 ; Segment type: Pure code
.text$mn:000083A0 ; Segment permissions: Read/Execute
.text$mn:000083A0 _text$mn        segment para public 'CODE' use32
.text$mn:000083A0                 assume cs:_text$mn
.text$mn:000083A0                 ;org 83A0h
.text$mn:000083A0 ; COMDAT (pick any)
.text$mn:000083A0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000083A0
.text$mn:000083A0 ; =============== S U B R O U T I N E =======================================
.text$mn:000083A0
.text$mn:000083A0 ; Attributes: bp-based frame
.text$mn:000083A0
.text$mn:000083A0 ; public: struct std::_Container_proxy * __thiscall std::allocator<struct std::_Container_proxy>::allocate(unsigned int)
.text$mn:000083A0                 public ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z
.text$mn:000083A0 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z proc near
.text$mn:000083A0                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Alloc_proxy(void)+16p
.text$mn:000083A0                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Alloc_proxy(void)+16p
.text$mn:000083A0
.text$mn:000083A0 var_4           = dword ptr -4
.text$mn:000083A0 arg_0           = dword ptr  8
.text$mn:000083A0
.text$mn:000083A0                 push    ebp
.text$mn:000083A1                 mov     ebp, esp
.text$mn:000083A3                 push    ecx
.text$mn:000083A4                 mov     [ebp+var_4], ecx
.text$mn:000083A7                 push    0
.text$mn:000083A9                 mov     eax, [ebp+arg_0]
.text$mn:000083AC                 push    eax
.text$mn:000083AD                 call    ??$_Allocate@U_Container_proxy@std@@@std@@YAPAU_Container_proxy@0@IPAU10@@Z ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)
.text$mn:000083B2                 add     esp, 8
.text$mn:000083B5                 mov     esp, ebp
.text$mn:000083B7                 pop     ebp
.text$mn:000083B8                 retn    4
.text$mn:000083B8 ?allocate@?$allocator@U_Container_proxy@std@@@std@@QAEPAU_Container_proxy@2@I@Z endp
.text$mn:000083B8
.text$mn:000083B8 ; ---------------------------------------------------------------------------
.text$mn:000083BB                 align 4
.text$mn:000083BB _text$mn        ends
.text$mn:000083BB
.text$mn:000083BC ; ===========================================================================
.text$mn:000083BC
.text$mn:000083BC ; Segment type: Pure code
.text$mn:000083BC ; Segment permissions: Read/Execute
.text$mn:000083BC _text$mn        segment para public 'CODE' use32
.text$mn:000083BC                 assume cs:_text$mn
.text$mn:000083BC                 ;org 83BCh
.text$mn:000083BC ; COMDAT (pick any)
.text$mn:000083BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000083BC
.text$mn:000083BC ; =============== S U B R O U T I N E =======================================
.text$mn:000083BC
.text$mn:000083BC ; Attributes: bp-based frame
.text$mn:000083BC
.text$mn:000083BC ; public: wchar_t * __thiscall std::allocator<wchar_t>::allocate(unsigned int)
.text$mn:000083BC                 public ?allocate@?$allocator@_W@std@@QAEPA_WI@Z
.text$mn:000083BC ?allocate@?$allocator@_W@std@@QAEPA_WI@Z proc near
.text$mn:000083BC                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::allocate(uint)+Ep
.text$mn:000083BC
.text$mn:000083BC var_4           = dword ptr -4
.text$mn:000083BC arg_0           = dword ptr  8
.text$mn:000083BC
.text$mn:000083BC                 push    ebp
.text$mn:000083BD                 mov     ebp, esp
.text$mn:000083BF                 push    ecx
.text$mn:000083C0                 mov     [ebp+var_4], ecx
.text$mn:000083C3                 push    0
.text$mn:000083C5                 mov     eax, [ebp+arg_0]
.text$mn:000083C8                 push    eax
.text$mn:000083C9                 call    ??$_Allocate@_W@std@@YAPA_WIPA_W@Z ; std::_Allocate<wchar_t>(uint,wchar_t *)
.text$mn:000083CE                 add     esp, 8
.text$mn:000083D1                 mov     esp, ebp
.text$mn:000083D3                 pop     ebp
.text$mn:000083D4                 retn    4
.text$mn:000083D4 ?allocate@?$allocator@_W@std@@QAEPA_WI@Z endp
.text$mn:000083D4
.text$mn:000083D4 ; ---------------------------------------------------------------------------
.text$mn:000083D7                 align 4
.text$mn:000083D7 _text$mn        ends
.text$mn:000083D7
.text$mn:000083D8 ; ===========================================================================
.text$mn:000083D8
.text$mn:000083D8 ; Segment type: Pure code
.text$mn:000083D8 ; Segment permissions: Read/Execute
.text$mn:000083D8 _text$mn        segment para public 'CODE' use32
.text$mn:000083D8                 assume cs:_text$mn
.text$mn:000083D8                 ;org 83D8h
.text$mn:000083D8 ; COMDAT (pick any)
.text$mn:000083D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000083D8
.text$mn:000083D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000083D8
.text$mn:000083D8 ; Attributes: bp-based frame
.text$mn:000083D8
.text$mn:000083D8 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::assign(class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> const &, unsigned int, unsigned int)
.text$mn:000083D8                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:000083D8 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:000083D8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+4Fp
.text$mn:000083D8
.text$mn:000083D8 Size            = dword ptr -8
.text$mn:000083D8 var_4           = dword ptr -4
.text$mn:000083D8 arg_0           = dword ptr  8
.text$mn:000083D8 arg_4           = dword ptr  0Ch
.text$mn:000083D8 arg_8           = dword ptr  10h
.text$mn:000083D8
.text$mn:000083D8                 push    ebp
.text$mn:000083D9                 mov     ebp, esp
.text$mn:000083DB                 sub     esp, 8
.text$mn:000083DE                 mov     [ebp+var_4], ecx
.text$mn:000083E1                 mov     ecx, [ebp+arg_0]
.text$mn:000083E4                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:000083E9                 cmp     eax, [ebp+arg_4]
.text$mn:000083EC                 jnb     short loc_83F6
.text$mn:000083EE                 mov     ecx, [ebp+var_4]
.text$mn:000083F1                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:000083F6
.text$mn:000083F6 loc_83F6:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+14j
.text$mn:000083F6                 mov     ecx, [ebp+arg_0]
.text$mn:000083F9                 call    ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::size(void)
.text$mn:000083FE                 sub     eax, [ebp+arg_4]
.text$mn:00008401                 mov     [ebp+Size], eax
.text$mn:00008404                 mov     eax, [ebp+arg_8]
.text$mn:00008407                 cmp     eax, [ebp+Size]
.text$mn:0000840A                 jnb     short loc_8412
.text$mn:0000840C                 mov     ecx, [ebp+arg_8]
.text$mn:0000840F                 mov     [ebp+Size], ecx
.text$mn:00008412
.text$mn:00008412 loc_8412:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+32j
.text$mn:00008412                 mov     edx, [ebp+var_4]
.text$mn:00008415                 cmp     edx, [ebp+arg_0]
.text$mn:00008418                 jnz     short loc_8439
.text$mn:0000841A                 mov     eax, [ebp+arg_4]
.text$mn:0000841D                 add     eax, [ebp+Size]
.text$mn:00008420                 push    eax
.text$mn:00008421                 mov     ecx, [ebp+var_4]
.text$mn:00008424                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)
.text$mn:00008429                 mov     ecx, [ebp+arg_4]
.text$mn:0000842C                 push    ecx
.text$mn:0000842D                 push    0
.text$mn:0000842F                 mov     ecx, [ebp+var_4]
.text$mn:00008432                 call    ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)
.text$mn:00008437                 jmp     short loc_847B
.text$mn:00008439 ; ---------------------------------------------------------------------------
.text$mn:00008439
.text$mn:00008439 loc_8439:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+40j
.text$mn:00008439                 push    0
.text$mn:0000843B                 mov     edx, [ebp+Size]
.text$mn:0000843E                 push    edx
.text$mn:0000843F                 mov     ecx, [ebp+var_4]
.text$mn:00008442                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00008447                 movzx   eax, al
.text$mn:0000844A                 test    eax, eax
.text$mn:0000844C                 jz      short loc_847B
.text$mn:0000844E                 mov     ecx, [ebp+Size]
.text$mn:00008451                 push    ecx             ; Size
.text$mn:00008452                 mov     ecx, [ebp+arg_0]
.text$mn:00008455                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000845A                 add     eax, [ebp+arg_4]
.text$mn:0000845D                 push    eax             ; Src
.text$mn:0000845E                 mov     ecx, [ebp+var_4]
.text$mn:00008461                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008466                 push    eax             ; Dst
.text$mn:00008467                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:0000846C                 add     esp, 0Ch
.text$mn:0000846F                 mov     edx, [ebp+Size]
.text$mn:00008472                 push    edx
.text$mn:00008473                 mov     ecx, [ebp+var_4]
.text$mn:00008476                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:0000847B
.text$mn:0000847B loc_847B:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Fj
.text$mn:0000847B                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+74j
.text$mn:0000847B                 mov     eax, [ebp+var_4]
.text$mn:0000847E                 mov     esp, ebp
.text$mn:00008480                 pop     ebp
.text$mn:00008481                 retn    0Ch
.text$mn:00008481 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:00008481
.text$mn:00008481 _text$mn        ends
.text$mn:00008481
.text$mn:00008484 ; ===========================================================================
.text$mn:00008484
.text$mn:00008484 ; Segment type: Pure code
.text$mn:00008484 ; Segment permissions: Read/Execute
.text$mn:00008484 _text$mn        segment para public 'CODE' use32
.text$mn:00008484                 assume cs:_text$mn
.text$mn:00008484                 ;org 8484h
.text$mn:00008484 ; COMDAT (pick any)
.text$mn:00008484                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008484
.text$mn:00008484 ; =============== S U B R O U T I N E =======================================
.text$mn:00008484
.text$mn:00008484 ; Attributes: bp-based frame
.text$mn:00008484
.text$mn:00008484 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char *Str)
.text$mn:00008484                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z
.text$mn:00008484 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z proc near
.text$mn:00008484                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)+53p
.text$mn:00008484
.text$mn:00008484 var_4           = dword ptr -4
.text$mn:00008484 Str             = dword ptr  8
.text$mn:00008484
.text$mn:00008484                 push    ebp
.text$mn:00008485                 mov     ebp, esp
.text$mn:00008487                 push    ecx
.text$mn:00008488                 mov     [ebp+var_4], ecx
.text$mn:0000848B                 push    490h            ; unsigned int
.text$mn:00008490                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008495                 mov     eax, [ebp+Str]
.text$mn:00008498                 push    eax             ; int
.text$mn:00008499                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:0000849E                 add     esp, 0Ch
.text$mn:000084A1                 mov     ecx, [ebp+Str]
.text$mn:000084A4                 push    ecx             ; Str
.text$mn:000084A5                 call    ?length@?$char_traits@D@std@@SAIPBD@Z ; std::char_traits<char>::length(char const *)
.text$mn:000084AA                 add     esp, 4
.text$mn:000084AD                 push    eax             ; Size
.text$mn:000084AE                 mov     edx, [ebp+Str]
.text$mn:000084B1                 push    edx             ; Src
.text$mn:000084B2                 mov     ecx, [ebp+var_4]
.text$mn:000084B5                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)
.text$mn:000084BA                 mov     esp, ebp
.text$mn:000084BC                 pop     ebp
.text$mn:000084BD                 retn    4
.text$mn:000084BD ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBD@Z endp
.text$mn:000084BD
.text$mn:000084BD _text$mn        ends
.text$mn:000084BD
.text$mn:000084C0 ; ===========================================================================
.text$mn:000084C0
.text$mn:000084C0 ; Segment type: Pure code
.text$mn:000084C0 ; Segment permissions: Read/Execute
.text$mn:000084C0 _text$mn        segment para public 'CODE' use32
.text$mn:000084C0                 assume cs:_text$mn
.text$mn:000084C0                 ;org 84C0h
.text$mn:000084C0 ; COMDAT (pick any)
.text$mn:000084C0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000084C0
.text$mn:000084C0 ; =============== S U B R O U T I N E =======================================
.text$mn:000084C0
.text$mn:000084C0 ; Attributes: bp-based frame
.text$mn:000084C0
.text$mn:000084C0 ; int __stdcall std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(void *Src, size_t Size)
.text$mn:000084C0                 public ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z
.text$mn:000084C0 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z proc near
.text$mn:000084C0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+31p
.text$mn:000084C0
.text$mn:000084C0 var_4           = dword ptr -4
.text$mn:000084C0 Src             = dword ptr  8
.text$mn:000084C0 Size            = dword ptr  0Ch
.text$mn:000084C0
.text$mn:000084C0                 push    ebp
.text$mn:000084C1                 mov     ebp, esp
.text$mn:000084C3                 push    ecx
.text$mn:000084C4                 mov     [ebp+var_4], ecx
.text$mn:000084C7                 cmp     [ebp+Size], 0
.text$mn:000084CB                 jz      short loc_84E3
.text$mn:000084CD                 push    47Fh            ; unsigned int
.text$mn:000084D2                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000084D7                 mov     eax, [ebp+Src]
.text$mn:000084DA                 push    eax             ; int
.text$mn:000084DB                 call    ??$_Debug_pointer@D@std@@YAXPBDPB_WI@Z ; std::_Debug_pointer<char>(char const *,wchar_t const *,uint)
.text$mn:000084E0                 add     esp, 0Ch
.text$mn:000084E3
.text$mn:000084E3 loc_84E3:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+Bj
.text$mn:000084E3                 mov     ecx, [ebp+Src]
.text$mn:000084E6                 push    ecx
.text$mn:000084E7                 mov     ecx, [ebp+var_4]
.text$mn:000084EA                 call    ?_Inside@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NPBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Inside(char const *)
.text$mn:000084EF                 movzx   edx, al
.text$mn:000084F2                 test    edx, edx
.text$mn:000084F4                 jz      short loc_8516
.text$mn:000084F6                 mov     eax, [ebp+Size]
.text$mn:000084F9                 push    eax
.text$mn:000084FA                 mov     ecx, [ebp+var_4]
.text$mn:000084FD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008502                 mov     ecx, [ebp+Src]
.text$mn:00008505                 sub     ecx, eax
.text$mn:00008507                 push    ecx
.text$mn:00008508                 mov     edx, [ebp+var_4]
.text$mn:0000850B                 push    edx
.text$mn:0000850C                 mov     ecx, [ebp+var_4]
.text$mn:0000850F                 call    ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)
.text$mn:00008514                 jmp     short loc_8553
.text$mn:00008516 ; ---------------------------------------------------------------------------
.text$mn:00008516
.text$mn:00008516 loc_8516:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+34j
.text$mn:00008516                 push    0
.text$mn:00008518                 mov     eax, [ebp+Size]
.text$mn:0000851B                 push    eax
.text$mn:0000851C                 mov     ecx, [ebp+var_4]
.text$mn:0000851F                 call    ?_Grow@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE_NI_N@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Grow(uint,bool)
.text$mn:00008524                 movzx   ecx, al
.text$mn:00008527                 test    ecx, ecx
.text$mn:00008529                 jz      short loc_8550
.text$mn:0000852B                 mov     edx, [ebp+Size]
.text$mn:0000852E                 push    edx             ; Size
.text$mn:0000852F                 mov     eax, [ebp+Src]
.text$mn:00008532                 push    eax             ; Src
.text$mn:00008533                 mov     ecx, [ebp+var_4]
.text$mn:00008536                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:0000853B                 push    eax             ; Dst
.text$mn:0000853C                 call    ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::copy(char *,char const *,uint)
.text$mn:00008541                 add     esp, 0Ch
.text$mn:00008544                 mov     ecx, [ebp+Size]
.text$mn:00008547                 push    ecx
.text$mn:00008548                 mov     ecx, [ebp+var_4]
.text$mn:0000854B                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008550
.text$mn:00008550 loc_8550:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+69j
.text$mn:00008550                 mov     eax, [ebp+var_4]
.text$mn:00008553
.text$mn:00008553 loc_8553:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *,uint)+54j
.text$mn:00008553                 mov     esp, ebp
.text$mn:00008555                 pop     ebp
.text$mn:00008556                 retn    8
.text$mn:00008556 ?assign@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@PBDI@Z endp
.text$mn:00008556
.text$mn:00008556 ; ---------------------------------------------------------------------------
.text$mn:00008559                 align 4
.text$mn:00008559 _text$mn        ends
.text$mn:00008559
.text$mn:0000855C ; ===========================================================================
.text$mn:0000855C
.text$mn:0000855C ; Segment type: Pure code
.text$mn:0000855C ; Segment permissions: Read/Execute
.text$mn:0000855C _text$mn        segment para public 'CODE' use32
.text$mn:0000855C                 assume cs:_text$mn
.text$mn:0000855C                 ;org 855Ch
.text$mn:0000855C ; COMDAT (pick any)
.text$mn:0000855C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000855C
.text$mn:0000855C ; =============== S U B R O U T I N E =======================================
.text$mn:0000855C
.text$mn:0000855C ; Attributes: bp-based frame
.text$mn:0000855C
.text$mn:0000855C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
.text$mn:0000855C                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z
.text$mn:0000855C ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z proc near
.text$mn:0000855C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+66p
.text$mn:0000855C
.text$mn:0000855C var_4           = dword ptr -4
.text$mn:0000855C arg_0           = dword ptr  8
.text$mn:0000855C
.text$mn:0000855C                 push    ebp
.text$mn:0000855D                 mov     ebp, esp
.text$mn:0000855F                 push    ecx
.text$mn:00008560                 mov     [ebp+var_4], ecx
.text$mn:00008563                 mov     eax, ds:?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB ; uint const std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::npos
.text$mn:00008568                 push    eax
.text$mn:00008569                 push    0
.text$mn:0000856B                 mov     ecx, [ebp+arg_0]
.text$mn:0000856E                 push    ecx
.text$mn:0000856F                 mov     ecx, [ebp+var_4]
.text$mn:00008572                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00008577                 mov     esp, ebp
.text$mn:00008579                 pop     ebp
.text$mn:0000857A                 retn    4
.text$mn:0000857A ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@@Z endp
.text$mn:0000857A
.text$mn:0000857A ; ---------------------------------------------------------------------------
.text$mn:0000857D                 align 10h
.text$mn:0000857D _text$mn        ends
.text$mn:0000857D
.text$mn:00008580 ; ===========================================================================
.text$mn:00008580
.text$mn:00008580 ; Segment type: Pure code
.text$mn:00008580 ; Segment permissions: Read/Execute
.text$mn:00008580 _text$mn        segment para public 'CODE' use32
.text$mn:00008580                 assume cs:_text$mn
.text$mn:00008580                 ;org 8580h
.text$mn:00008580 ; COMDAT (pick any)
.text$mn:00008580                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008580
.text$mn:00008580 ; =============== S U B R O U T I N E =======================================
.text$mn:00008580
.text$mn:00008580 ; Attributes: bp-based frame
.text$mn:00008580
.text$mn:00008580 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::assign(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:00008580                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z
.text$mn:00008580 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z proc near
.text$mn:00008580                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+6Bp
.text$mn:00008580                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+16p ...
.text$mn:00008580
.text$mn:00008580 var_8           = dword ptr -8
.text$mn:00008580 var_4           = dword ptr -4
.text$mn:00008580 arg_0           = dword ptr  8
.text$mn:00008580 arg_4           = dword ptr  0Ch
.text$mn:00008580 arg_8           = dword ptr  10h
.text$mn:00008580
.text$mn:00008580                 push    ebp
.text$mn:00008581                 mov     ebp, esp
.text$mn:00008583                 sub     esp, 8
.text$mn:00008586                 mov     [ebp+var_4], ecx
.text$mn:00008589                 mov     ecx, [ebp+arg_0]
.text$mn:0000858C                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:00008591                 cmp     eax, [ebp+arg_4]
.text$mn:00008594                 jnb     short loc_859E
.text$mn:00008596                 mov     ecx, [ebp+var_4]
.text$mn:00008599                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:0000859E
.text$mn:0000859E loc_859E:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+14j
.text$mn:0000859E                 mov     ecx, [ebp+arg_0]
.text$mn:000085A1                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000085A6                 sub     eax, [ebp+arg_4]
.text$mn:000085A9                 mov     [ebp+var_8], eax
.text$mn:000085AC                 mov     eax, [ebp+arg_8]
.text$mn:000085AF                 cmp     eax, [ebp+var_8]
.text$mn:000085B2                 jnb     short loc_85BA
.text$mn:000085B4                 mov     ecx, [ebp+arg_8]
.text$mn:000085B7                 mov     [ebp+var_8], ecx
.text$mn:000085BA
.text$mn:000085BA loc_85BA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+32j
.text$mn:000085BA                 mov     edx, [ebp+var_4]
.text$mn:000085BD                 cmp     edx, [ebp+arg_0]
.text$mn:000085C0                 jnz     short loc_85E1
.text$mn:000085C2                 mov     eax, [ebp+arg_4]
.text$mn:000085C5                 add     eax, [ebp+var_8]
.text$mn:000085C8                 push    eax
.text$mn:000085C9                 mov     ecx, [ebp+var_4]
.text$mn:000085CC                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)
.text$mn:000085D1                 mov     ecx, [ebp+arg_4]
.text$mn:000085D4                 push    ecx
.text$mn:000085D5                 push    0
.text$mn:000085D7                 mov     ecx, [ebp+var_4]
.text$mn:000085DA                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:000085DF                 jmp     short loc_8626
.text$mn:000085E1 ; ---------------------------------------------------------------------------
.text$mn:000085E1
.text$mn:000085E1 loc_85E1:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+40j
.text$mn:000085E1                 push    0
.text$mn:000085E3                 mov     edx, [ebp+var_8]
.text$mn:000085E6                 push    edx
.text$mn:000085E7                 mov     ecx, [ebp+var_4]
.text$mn:000085EA                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:000085EF                 movzx   eax, al
.text$mn:000085F2                 test    eax, eax
.text$mn:000085F4                 jz      short loc_8626
.text$mn:000085F6                 mov     ecx, [ebp+var_8]
.text$mn:000085F9                 push    ecx             ; int
.text$mn:000085FA                 mov     ecx, [ebp+arg_0]
.text$mn:000085FD                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008602                 mov     edx, [ebp+arg_4]
.text$mn:00008605                 lea     eax, [eax+edx*2]
.text$mn:00008608                 push    eax             ; Src
.text$mn:00008609                 mov     ecx, [ebp+var_4]
.text$mn:0000860C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008611                 push    eax             ; Dst
.text$mn:00008612                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00008617                 add     esp, 0Ch
.text$mn:0000861A                 mov     ecx, [ebp+var_8]
.text$mn:0000861D                 push    ecx
.text$mn:0000861E                 mov     ecx, [ebp+var_4]
.text$mn:00008621                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00008626
.text$mn:00008626 loc_8626:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Fj
.text$mn:00008626                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+74j
.text$mn:00008626                 mov     eax, [ebp+var_4]
.text$mn:00008629                 mov     esp, ebp
.text$mn:0000862B                 pop     ebp
.text$mn:0000862C                 retn    0Ch
.text$mn:0000862C ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z endp
.text$mn:0000862C
.text$mn:0000862C ; ---------------------------------------------------------------------------
.text$mn:0000862F                 align 10h
.text$mn:0000862F _text$mn        ends
.text$mn:0000862F
.text$mn:00008630 ; ===========================================================================
.text$mn:00008630
.text$mn:00008630 ; Segment type: Pure code
.text$mn:00008630 ; Segment permissions: Read/Execute
.text$mn:00008630 _text$mn        segment para public 'CODE' use32
.text$mn:00008630                 assume cs:_text$mn
.text$mn:00008630                 ;org 8630h
.text$mn:00008630 ; COMDAT (pick any)
.text$mn:00008630                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008630
.text$mn:00008630 ; =============== S U B R O U T I N E =======================================
.text$mn:00008630
.text$mn:00008630 ; Attributes: bp-based frame
.text$mn:00008630
.text$mn:00008630 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t *Str)
.text$mn:00008630                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z
.text$mn:00008630 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z proc near
.text$mn:00008630                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)+53p
.text$mn:00008630                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(wchar_t const *)+Ep
.text$mn:00008630
.text$mn:00008630 var_4           = dword ptr -4
.text$mn:00008630 Str             = dword ptr  8
.text$mn:00008630
.text$mn:00008630                 push    ebp
.text$mn:00008631                 mov     ebp, esp
.text$mn:00008633                 push    ecx
.text$mn:00008634                 mov     [ebp+var_4], ecx
.text$mn:00008637                 push    490h            ; unsigned int
.text$mn:0000863C                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008641                 mov     eax, [ebp+Str]
.text$mn:00008644                 push    eax             ; int
.text$mn:00008645                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000864A                 add     esp, 0Ch
.text$mn:0000864D                 mov     ecx, [ebp+Str]
.text$mn:00008650                 push    ecx             ; Str
.text$mn:00008651                 call    ?length@?$char_traits@_W@std@@SAIPB_W@Z ; std::char_traits<wchar_t>::length(wchar_t const *)
.text$mn:00008656                 add     esp, 4
.text$mn:00008659                 push    eax             ; int
.text$mn:0000865A                 mov     edx, [ebp+Str]
.text$mn:0000865D                 push    edx             ; Src
.text$mn:0000865E                 mov     ecx, [ebp+var_4]
.text$mn:00008661                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)
.text$mn:00008666                 mov     esp, ebp
.text$mn:00008668                 pop     ebp
.text$mn:00008669                 retn    4
.text$mn:00008669 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_W@Z endp
.text$mn:00008669
.text$mn:00008669 _text$mn        ends
.text$mn:00008669
.text$mn:0000866C ; ===========================================================================
.text$mn:0000866C
.text$mn:0000866C ; Segment type: Pure code
.text$mn:0000866C ; Segment permissions: Read/Execute
.text$mn:0000866C _text$mn        segment para public 'CODE' use32
.text$mn:0000866C                 assume cs:_text$mn
.text$mn:0000866C                 ;org 866Ch
.text$mn:0000866C ; COMDAT (pick any)
.text$mn:0000866C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000866C
.text$mn:0000866C ; =============== S U B R O U T I N E =======================================
.text$mn:0000866C
.text$mn:0000866C ; Attributes: bp-based frame
.text$mn:0000866C
.text$mn:0000866C ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(void *Src, int)
.text$mn:0000866C                 public ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z
.text$mn:0000866C ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z proc near
.text$mn:0000866C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+31p
.text$mn:0000866C
.text$mn:0000866C var_4           = dword ptr -4
.text$mn:0000866C Src             = dword ptr  8
.text$mn:0000866C arg_4           = dword ptr  0Ch
.text$mn:0000866C
.text$mn:0000866C                 push    ebp
.text$mn:0000866D                 mov     ebp, esp
.text$mn:0000866F                 push    ecx
.text$mn:00008670                 mov     [ebp+var_4], ecx
.text$mn:00008673                 cmp     [ebp+arg_4], 0
.text$mn:00008677                 jz      short loc_868F
.text$mn:00008679                 push    47Fh            ; unsigned int
.text$mn:0000867E                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:00008683                 mov     eax, [ebp+Src]
.text$mn:00008686                 push    eax             ; int
.text$mn:00008687                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:0000868C                 add     esp, 0Ch
.text$mn:0000868F
.text$mn:0000868F loc_868F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+Bj
.text$mn:0000868F                 mov     ecx, [ebp+Src]
.text$mn:00008692                 push    ecx
.text$mn:00008693                 mov     ecx, [ebp+var_4]
.text$mn:00008696                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:0000869B                 movzx   edx, al
.text$mn:0000869E                 test    edx, edx
.text$mn:000086A0                 jz      short loc_86C4
.text$mn:000086A2                 mov     eax, [ebp+arg_4]
.text$mn:000086A5                 push    eax
.text$mn:000086A6                 mov     ecx, [ebp+var_4]
.text$mn:000086A9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000086AE                 mov     ecx, [ebp+Src]
.text$mn:000086B1                 sub     ecx, eax
.text$mn:000086B3                 sar     ecx, 1
.text$mn:000086B5                 push    ecx
.text$mn:000086B6                 mov     edx, [ebp+var_4]
.text$mn:000086B9                 push    edx
.text$mn:000086BA                 mov     ecx, [ebp+var_4]
.text$mn:000086BD                 call    ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@ABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:000086C2                 jmp     short loc_8701
.text$mn:000086C4 ; ---------------------------------------------------------------------------
.text$mn:000086C4
.text$mn:000086C4 loc_86C4:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+34j
.text$mn:000086C4                 push    0
.text$mn:000086C6                 mov     eax, [ebp+arg_4]
.text$mn:000086C9                 push    eax
.text$mn:000086CA                 mov     ecx, [ebp+var_4]
.text$mn:000086CD                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:000086D2                 movzx   ecx, al
.text$mn:000086D5                 test    ecx, ecx
.text$mn:000086D7                 jz      short loc_86FE
.text$mn:000086D9                 mov     edx, [ebp+arg_4]
.text$mn:000086DC                 push    edx             ; int
.text$mn:000086DD                 mov     eax, [ebp+Src]
.text$mn:000086E0                 push    eax             ; Src
.text$mn:000086E1                 mov     ecx, [ebp+var_4]
.text$mn:000086E4                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000086E9                 push    eax             ; Dst
.text$mn:000086EA                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000086EF                 add     esp, 0Ch
.text$mn:000086F2                 mov     ecx, [ebp+arg_4]
.text$mn:000086F5                 push    ecx
.text$mn:000086F6                 mov     ecx, [ebp+var_4]
.text$mn:000086F9                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:000086FE
.text$mn:000086FE loc_86FE:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+6Bj
.text$mn:000086FE                 mov     eax, [ebp+var_4]
.text$mn:00008701
.text$mn:00008701 loc_8701:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *,uint)+56j
.text$mn:00008701                 mov     esp, ebp
.text$mn:00008703                 pop     ebp
.text$mn:00008704                 retn    8
.text$mn:00008704 ?assign@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@PB_WI@Z endp
.text$mn:00008704
.text$mn:00008704 ; ---------------------------------------------------------------------------
.text$mn:00008707                 align 4
.text$mn:00008707 _text$mn        ends
.text$mn:00008707
.text$mn:00008708 ; ===========================================================================
.text$mn:00008708
.text$mn:00008708 ; Segment type: Pure code
.text$mn:00008708 ; Segment permissions: Read/Execute
.text$mn:00008708 _text$mn        segment para public 'CODE' use32
.text$mn:00008708                 assume cs:_text$mn
.text$mn:00008708                 ;org 8708h
.text$mn:00008708 ; COMDAT (pick any)
.text$mn:00008708                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008708
.text$mn:00008708 ; =============== S U B R O U T I N E =======================================
.text$mn:00008708
.text$mn:00008708 ; Attributes: bp-based frame
.text$mn:00008708
.text$mn:00008708 ; public: static void __cdecl std::char_traits<char>::assign(char &, char const &)
.text$mn:00008708                 public ?assign@?$char_traits@D@std@@SAXAADABD@Z
.text$mn:00008708 ?assign@?$char_traits@D@std@@SAXAADABD@Z proc near
.text$mn:00008708                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)+26p
.text$mn:00008708
.text$mn:00008708 arg_0           = dword ptr  8
.text$mn:00008708 arg_4           = dword ptr  0Ch
.text$mn:00008708
.text$mn:00008708                 push    ebp
.text$mn:00008709                 mov     ebp, esp
.text$mn:0000870B                 mov     eax, [ebp+arg_0]
.text$mn:0000870E                 mov     ecx, [ebp+arg_4]
.text$mn:00008711                 mov     dl, [ecx]
.text$mn:00008713                 mov     [eax], dl
.text$mn:00008715                 pop     ebp
.text$mn:00008716                 retn
.text$mn:00008716 ?assign@?$char_traits@D@std@@SAXAADABD@Z endp
.text$mn:00008716
.text$mn:00008716 ; ---------------------------------------------------------------------------
.text$mn:00008717                 align 4
.text$mn:00008717 _text$mn        ends
.text$mn:00008717
.text$mn:00008718 ; ===========================================================================
.text$mn:00008718
.text$mn:00008718 ; Segment type: Pure code
.text$mn:00008718 ; Segment permissions: Read/Execute
.text$mn:00008718 _text$mn        segment para public 'CODE' use32
.text$mn:00008718                 assume cs:_text$mn
.text$mn:00008718                 ;org 8718h
.text$mn:00008718 ; COMDAT (pick any)
.text$mn:00008718                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008718
.text$mn:00008718 ; =============== S U B R O U T I N E =======================================
.text$mn:00008718
.text$mn:00008718 ; Attributes: bp-based frame
.text$mn:00008718
.text$mn:00008718 ; public: static void __cdecl std::char_traits<wchar_t>::assign(wchar_t &, wchar_t const &)
.text$mn:00008718                 public ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z
.text$mn:00008718 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z proc near
.text$mn:00008718                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)+2Bp
.text$mn:00008718
.text$mn:00008718 arg_0           = dword ptr  8
.text$mn:00008718 arg_4           = dword ptr  0Ch
.text$mn:00008718
.text$mn:00008718                 push    ebp
.text$mn:00008719                 mov     ebp, esp
.text$mn:0000871B                 mov     eax, [ebp+arg_0]
.text$mn:0000871E                 mov     ecx, [ebp+arg_4]
.text$mn:00008721                 mov     dx, [ecx]
.text$mn:00008724                 mov     [eax], dx
.text$mn:00008727                 pop     ebp
.text$mn:00008728                 retn
.text$mn:00008728 ?assign@?$char_traits@_W@std@@SAXAA_WAB_W@Z endp
.text$mn:00008728
.text$mn:00008728 ; ---------------------------------------------------------------------------
.text$mn:00008729                 align 4
.text$mn:00008729 _text$mn        ends
.text$mn:00008729
.text$mn:0000872C ; ===========================================================================
.text$mn:0000872C
.text$mn:0000872C ; Segment type: Pure code
.text$mn:0000872C ; Segment permissions: Read/Execute
.text$mn:0000872C _text$mn        segment para public 'CODE' use32
.text$mn:0000872C                 assume cs:_text$mn
.text$mn:0000872C                 ;org 872Ch
.text$mn:0000872C ; COMDAT (pick any)
.text$mn:0000872C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000872C
.text$mn:0000872C ; =============== S U B R O U T I N E =======================================
.text$mn:0000872C
.text$mn:0000872C ; Attributes: bp-based frame
.text$mn:0000872C
.text$mn:0000872C ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::begin(void)
.text$mn:0000872C                 public ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:0000872C ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$mn:0000872C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+A9p
.text$mn:0000872C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+AFp ...
.text$mn:0000872C
.text$mn:0000872C var_14          = dword ptr -14h
.text$mn:0000872C var_10          = dword ptr -10h
.text$mn:0000872C var_C           = dword ptr -0Ch
.text$mn:0000872C var_4           = dword ptr -4
.text$mn:0000872C arg_0           = dword ptr  8
.text$mn:0000872C
.text$mn:0000872C                 push    ebp
.text$mn:0000872D                 mov     ebp, esp
.text$mn:0000872F                 push    0FFFFFFFFh
.text$mn:00008731                 push    offset __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:00008736                 mov     eax, large fs:0
.text$mn:0000873C                 push    eax
.text$mn:0000873D                 sub     esp, 8
.text$mn:00008740                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008745                 xor     eax, ebp
.text$mn:00008747                 push    eax
.text$mn:00008748                 lea     eax, [ebp+var_C]
.text$mn:0000874B                 mov     large fs:0, eax
.text$mn:00008751                 mov     [ebp+var_10], ecx
.text$mn:00008754                 mov     [ebp+var_14], 0
.text$mn:0000875B                 mov     eax, [ebp+var_10]
.text$mn:0000875E                 push    eax             ; struct std::_Container_base12 *
.text$mn:0000875F                 mov     ecx, [ebp+var_10]
.text$mn:00008762                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008767                 push    eax             ; int
.text$mn:00008768                 mov     ecx, [ebp+arg_0]
.text$mn:0000876B                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)
.text$mn:00008770                 mov     [ebp+var_4], 0
.text$mn:00008777                 mov     ecx, [ebp+var_14]
.text$mn:0000877A                 or      ecx, 1
.text$mn:0000877D                 mov     [ebp+var_14], ecx
.text$mn:00008780                 mov     eax, [ebp+arg_0]
.text$mn:00008783                 mov     ecx, [ebp+var_C]
.text$mn:00008786                 mov     large fs:0, ecx
.text$mn:0000878D                 pop     ecx
.text$mn:0000878E                 mov     esp, ebp
.text$mn:00008790                 pop     ebp
.text$mn:00008791                 retn    4
.text$mn:00008791 ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$mn:00008791
.text$mn:00008791 _text$mn        ends
.text$mn:00008791
.text$x:00008794 ; ===========================================================================
.text$x:00008794
.text$x:00008794 ; Segment type: Pure code
.text$x:00008794 ; Segment permissions: Read/Execute
.text$x:00008794 _text$x         segment para public 'CODE' use32
.text$x:00008794                 assume cs:_text$x
.text$x:00008794                 ;org 8794h
.text$x:00008794 ; COMDAT (pick associative to section at 872C)
.text$x:00008794                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008794
.text$x:00008794 ; =============== S U B R O U T I N E =======================================
.text$x:00008794
.text$x:00008794
.text$x:00008794 __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
.text$x:00008794                                         ; DATA XREF: .xdata$x:0000A198o
.text$x:00008794                 mov     eax, [ebp-14h]
.text$x:00008797                 and     eax, 1
.text$x:0000879A                 jz      $LN4
.text$x:000087A0                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:000087A4                 mov     ecx, [ebp+8]
.text$x:000087A7                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000087AC ; ---------------------------------------------------------------------------
.text$x:000087AC
.text$x:000087AC $LN4:                                   ; CODE XREF: __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0+6j
.text$x:000087AC                 retn
.text$x:000087AC __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 endp
.text$x:000087AC
.text$x:000087AD
.text$x:000087AD ; =============== S U B R O U T I N E =======================================
.text$x:000087AD
.text$x:000087AD
.text$x:000087AD __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$x:000087AD                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)+5o
.text$x:000087AD
.text$x:000087AD arg_4           = dword ptr  8
.text$x:000087AD
.text$x:000087AD                 mov     edx, [esp+arg_4]
.text$x:000087B1                 lea     eax, [edx+0Ch]
.text$x:000087B4                 mov     ecx, [edx-0Ch]
.text$x:000087B7                 xor     ecx, eax
.text$x:000087B9                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000087BE                 mov     eax, offset __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$x:000087C3                 jmp     ___CxxFrameHandler3
.text$x:000087C3 __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$x:000087C3
.text$x:000087C3 _text$x         ends
.text$x:000087C3
.text$mn:000087C8 ; ===========================================================================
.text$mn:000087C8
.text$mn:000087C8 ; Segment type: Pure code
.text$mn:000087C8 ; Segment permissions: Read/Execute
.text$mn:000087C8 _text$mn        segment para public 'CODE' use32
.text$mn:000087C8                 assume cs:_text$mn
.text$mn:000087C8                 ;org 87C8h
.text$mn:000087C8 ; COMDAT (pick any)
.text$mn:000087C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000087C8
.text$mn:000087C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000087C8
.text$mn:000087C8 ; Attributes: bp-based frame
.text$mn:000087C8
.text$mn:000087C8 ; public: char const * __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::c_str(void)const
.text$mn:000087C8                 public ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ
.text$mn:000087C8 ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ proc near
.text$mn:000087C8                                         ; CODE XREF: TiXmlDeclarationA::Encoding(void)+Dp
.text$mn:000087C8
.text$mn:000087C8 var_4           = dword ptr -4
.text$mn:000087C8
.text$mn:000087C8                 push    ebp
.text$mn:000087C9                 mov     ebp, esp
.text$mn:000087CB                 push    ecx
.text$mn:000087CC                 mov     [ebp+var_4], ecx
.text$mn:000087CF                 mov     ecx, [ebp+var_4]
.text$mn:000087D2                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QBEPBDXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:000087D7                 mov     esp, ebp
.text$mn:000087D9                 pop     ebp
.text$mn:000087DA                 retn
.text$mn:000087DA ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEPBDXZ endp
.text$mn:000087DA
.text$mn:000087DA ; ---------------------------------------------------------------------------
.text$mn:000087DB                 align 4
.text$mn:000087DB _text$mn        ends
.text$mn:000087DB
.text$mn:000087DC ; ===========================================================================
.text$mn:000087DC
.text$mn:000087DC ; Segment type: Pure code
.text$mn:000087DC ; Segment permissions: Read/Execute
.text$mn:000087DC _text$mn        segment para public 'CODE' use32
.text$mn:000087DC                 assume cs:_text$mn
.text$mn:000087DC                 ;org 87DCh
.text$mn:000087DC ; COMDAT (pick any)
.text$mn:000087DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000087DC
.text$mn:000087DC ; =============== S U B R O U T I N E =======================================
.text$mn:000087DC
.text$mn:000087DC ; Attributes: bp-based frame
.text$mn:000087DC
.text$mn:000087DC ; public: wchar_t const * __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::c_str(void)const
.text$mn:000087DC                 public ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ
.text$mn:000087DC ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ proc near
.text$mn:000087DC                                         ; CODE XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+191p
.text$mn:000087DC                                         ; NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+22Ep ...
.text$mn:000087DC
.text$mn:000087DC var_4           = dword ptr -4
.text$mn:000087DC
.text$mn:000087DC                 push    ebp
.text$mn:000087DD                 mov     ebp, esp
.text$mn:000087DF                 push    ecx
.text$mn:000087E0                 mov     [ebp+var_4], ecx
.text$mn:000087E3                 mov     ecx, [ebp+var_4]
.text$mn:000087E6                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000087EB                 mov     esp, ebp
.text$mn:000087ED                 pop     ebp
.text$mn:000087EE                 retn
.text$mn:000087EE ?c_str@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEPB_WXZ endp
.text$mn:000087EE
.text$mn:000087EE ; ---------------------------------------------------------------------------
.text$mn:000087EF                 align 10h
.text$mn:000087EF _text$mn        ends
.text$mn:000087EF
.text$mn:000087F0 ; ===========================================================================
.text$mn:000087F0
.text$mn:000087F0 ; Segment type: Pure code
.text$mn:000087F0 ; Segment permissions: Read/Execute
.text$mn:000087F0 _text$mn        segment para public 'CODE' use32
.text$mn:000087F0                 assume cs:_text$mn
.text$mn:000087F0                 ;org 87F0h
.text$mn:000087F0 ; COMDAT (pick any)
.text$mn:000087F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000087F0
.text$mn:000087F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000087F0
.text$mn:000087F0 ; Attributes: bp-based frame
.text$mn:000087F0
.text$mn:000087F0 ; const struct std::error_category *__thiscall std::error_code::category(std::error_code *__hidden this)
.text$mn:000087F0                 public ?category@error_code@std@@QBEABVerror_category@2@XZ
.text$mn:000087F0 ?category@error_code@std@@QBEABVerror_category@2@XZ proc near
.text$mn:000087F0                                         ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+Cp
.text$mn:000087F0
.text$mn:000087F0 var_4           = dword ptr -4
.text$mn:000087F0
.text$mn:000087F0                 push    ebp
.text$mn:000087F1                 mov     ebp, esp
.text$mn:000087F3                 push    ecx
.text$mn:000087F4                 mov     [ebp+var_4], ecx
.text$mn:000087F7                 mov     eax, [ebp+var_4]
.text$mn:000087FA                 mov     eax, [eax+4]
.text$mn:000087FD                 mov     esp, ebp
.text$mn:000087FF                 pop     ebp
.text$mn:00008800                 retn
.text$mn:00008800 ?category@error_code@std@@QBEABVerror_category@2@XZ endp
.text$mn:00008800
.text$mn:00008800 ; ---------------------------------------------------------------------------
.text$mn:00008801                 align 4
.text$mn:00008801 _text$mn        ends
.text$mn:00008801
.text$mn:00008804 ; ===========================================================================
.text$mn:00008804
.text$mn:00008804 ; Segment type: Pure code
.text$mn:00008804 ; Segment permissions: Read/Execute
.text$mn:00008804 _text$mn        segment para public 'CODE' use32
.text$mn:00008804                 assume cs:_text$mn
.text$mn:00008804                 ;org 8804h
.text$mn:00008804 ; COMDAT (pick any)
.text$mn:00008804                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008804
.text$mn:00008804 ; =============== S U B R O U T I N E =======================================
.text$mn:00008804
.text$mn:00008804 ; Attributes: bp-based frame
.text$mn:00008804
.text$mn:00008804 ; const struct std::error_category *__thiscall std::error_condition::category(std::error_condition *__hidden this)
.text$mn:00008804                 public ?category@error_condition@std@@QBEABVerror_category@2@XZ
.text$mn:00008804 ?category@error_condition@std@@QBEABVerror_category@2@XZ proc near
.text$mn:00008804                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+Dp
.text$mn:00008804                                         ; std::error_condition::operator==(std::error_condition const &)+16p
.text$mn:00008804
.text$mn:00008804 var_4           = dword ptr -4
.text$mn:00008804
.text$mn:00008804                 push    ebp
.text$mn:00008805                 mov     ebp, esp
.text$mn:00008807                 push    ecx
.text$mn:00008808                 mov     [ebp+var_4], ecx
.text$mn:0000880B                 mov     eax, [ebp+var_4]
.text$mn:0000880E                 mov     eax, [eax+4]
.text$mn:00008811                 mov     esp, ebp
.text$mn:00008813                 pop     ebp
.text$mn:00008814                 retn
.text$mn:00008814 ?category@error_condition@std@@QBEABVerror_category@2@XZ endp
.text$mn:00008814
.text$mn:00008814 ; ---------------------------------------------------------------------------
.text$mn:00008815                 align 4
.text$mn:00008815 _text$mn        ends
.text$mn:00008815
.text$mn:00008818 ; ===========================================================================
.text$mn:00008818
.text$mn:00008818 ; Segment type: Pure code
.text$mn:00008818 ; Segment permissions: Read/Execute
.text$mn:00008818 _text$mn        segment para public 'CODE' use32
.text$mn:00008818                 assume cs:_text$mn
.text$mn:00008818                 ;org 8818h
.text$mn:00008818 ; COMDAT (pick any)
.text$mn:00008818                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008818
.text$mn:00008818 ; =============== S U B R O U T I N E =======================================
.text$mn:00008818
.text$mn:00008818 ; Attributes: bp-based frame
.text$mn:00008818
.text$mn:00008818 ; public: void __thiscall FindReplaceDlg::changeTabName(enum  DIALOG_TYPE, wchar_t const *)
.text$mn:00008818                 public ?changeTabName@FindReplaceDlg@@QAEXW4DIALOG_TYPE@@PB_W@Z
.text$mn:00008818 ?changeTabName@FindReplaceDlg@@QAEXW4DIALOG_TYPE@@PB_W@Z proc near
.text$mn:00008818                                         ; CODE XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+19Cp
.text$mn:00008818                                         ; NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+239p ...
.text$mn:00008818
.text$mn:00008818 lParam          = dword ptr -20h
.text$mn:00008818 var_14          = dword ptr -14h
.text$mn:00008818 var_4           = dword ptr -4
.text$mn:00008818 wParam          = dword ptr  8
.text$mn:00008818 arg_4           = dword ptr  0Ch
.text$mn:00008818
.text$mn:00008818                 push    ebp
.text$mn:00008819                 mov     ebp, esp
.text$mn:0000881B                 sub     esp, 20h
.text$mn:0000881E                 mov     [ebp+var_4], ecx
.text$mn:00008821                 mov     [ebp+lParam], 1
.text$mn:00008828                 mov     eax, [ebp+arg_4]
.text$mn:0000882B                 mov     [ebp+var_14], eax
.text$mn:0000882E                 lea     ecx, [ebp+lParam]
.text$mn:00008831                 push    ecx             ; lParam
.text$mn:00008832                 mov     edx, [ebp+wParam]
.text$mn:00008835                 push    edx             ; wParam
.text$mn:00008836                 push    133Dh           ; Msg
.text$mn:0000883B                 mov     ecx, [ebp+var_4]
.text$mn:0000883E                 add     ecx, 86Ch       ; this
.text$mn:00008844                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00008849                 push    eax             ; hWnd
.text$mn:0000884A                 call    dword ptr ds:__imp__SendMessageW@16 ; SendMessageW(x,x,x,x)
.text$mn:00008850                 mov     esp, ebp
.text$mn:00008852                 pop     ebp
.text$mn:00008853                 retn    8
.text$mn:00008853 ?changeTabName@FindReplaceDlg@@QAEXW4DIALOG_TYPE@@PB_W@Z endp
.text$mn:00008853
.text$mn:00008853 ; ---------------------------------------------------------------------------
.text$mn:00008856                 align 4
.text$mn:00008856 _text$mn        ends
.text$mn:00008856
.text$mn:00008858 ; ===========================================================================
.text$mn:00008858
.text$mn:00008858 ; Segment type: Pure code
.text$mn:00008858 ; Segment permissions: Read/Execute
.text$mn:00008858 _text$mn        segment para public 'CODE' use32
.text$mn:00008858                 assume cs:_text$mn
.text$mn:00008858                 ;org 8858h
.text$mn:00008858 ; COMDAT (pick any)
.text$mn:00008858                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008858
.text$mn:00008858 ; =============== S U B R O U T I N E =======================================
.text$mn:00008858
.text$mn:00008858 ; Attributes: bp-based frame
.text$mn:00008858
.text$mn:00008858 ; int __cdecl std::char_traits<char>::copy(void *Dst, void *Src, size_t Size)
.text$mn:00008858                 public ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:00008858 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z proc near ; CODE XREF: $LN19+1Ep
.text$mn:00008858                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+5Dp ...
.text$mn:00008858
.text$mn:00008858 var_4           = dword ptr -4
.text$mn:00008858 Dst             = dword ptr  8
.text$mn:00008858 Src             = dword ptr  0Ch
.text$mn:00008858 Size            = dword ptr  10h
.text$mn:00008858
.text$mn:00008858                 push    ebp
.text$mn:00008859                 mov     ebp, esp
.text$mn:0000885B                 push    ecx
.text$mn:0000885C                 cmp     [ebp+Size], 0
.text$mn:00008860                 jnz     short loc_886A
.text$mn:00008862                 mov     eax, [ebp+Dst]
.text$mn:00008865                 mov     [ebp+var_4], eax
.text$mn:00008868                 jmp     short loc_8881
.text$mn:0000886A ; ---------------------------------------------------------------------------
.text$mn:0000886A
.text$mn:0000886A loc_886A:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+8j
.text$mn:0000886A                 mov     ecx, [ebp+Size]
.text$mn:0000886D                 push    ecx             ; Size
.text$mn:0000886E                 mov     edx, [ebp+Src]
.text$mn:00008871                 push    edx             ; Src
.text$mn:00008872                 mov     eax, [ebp+Dst]
.text$mn:00008875                 push    eax             ; Dst
.text$mn:00008876                 call    _memcpy
.text$mn:0000887B                 add     esp, 0Ch
.text$mn:0000887E                 mov     [ebp+var_4], eax
.text$mn:00008881
.text$mn:00008881 loc_8881:                               ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+10j
.text$mn:00008881                 mov     eax, [ebp+var_4]
.text$mn:00008884                 mov     esp, ebp
.text$mn:00008886                 pop     ebp
.text$mn:00008887                 retn
.text$mn:00008887 ?copy@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:00008887
.text$mn:00008887 _text$mn        ends
.text$mn:00008887
.text$mn:00008888 ; ===========================================================================
.text$mn:00008888
.text$mn:00008888 ; Segment type: Pure code
.text$mn:00008888 ; Segment permissions: Read/Execute
.text$mn:00008888 _text$mn        segment para public 'CODE' use32
.text$mn:00008888                 assume cs:_text$mn
.text$mn:00008888                 ;org 8888h
.text$mn:00008888 ; COMDAT (pick any)
.text$mn:00008888                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008888
.text$mn:00008888 ; =============== S U B R O U T I N E =======================================
.text$mn:00008888
.text$mn:00008888 ; Attributes: bp-based frame
.text$mn:00008888
.text$mn:00008888 ; int __cdecl std::char_traits<wchar_t>::copy(void *Dst, void *Src, int)
.text$mn:00008888                 public ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:00008888 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:00008888                                         ; CODE XREF: $LN19_0+1Ep
.text$mn:00008888                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+5Dp ...
.text$mn:00008888
.text$mn:00008888 var_4           = dword ptr -4
.text$mn:00008888 Dst             = dword ptr  8
.text$mn:00008888 Src             = dword ptr  0Ch
.text$mn:00008888 arg_8           = dword ptr  10h
.text$mn:00008888
.text$mn:00008888                 push    ebp
.text$mn:00008889                 mov     ebp, esp
.text$mn:0000888B                 push    ecx
.text$mn:0000888C                 cmp     [ebp+arg_8], 0
.text$mn:00008890                 jnz     short loc_889A
.text$mn:00008892                 mov     eax, [ebp+Dst]
.text$mn:00008895                 mov     [ebp+var_4], eax
.text$mn:00008898                 jmp     short loc_88B1
.text$mn:0000889A ; ---------------------------------------------------------------------------
.text$mn:0000889A
.text$mn:0000889A loc_889A:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000889A                 mov     ecx, [ebp+arg_8]
.text$mn:0000889D                 push    ecx             ; int
.text$mn:0000889E                 mov     edx, [ebp+Src]
.text$mn:000088A1                 push    edx             ; Src
.text$mn:000088A2                 mov     eax, [ebp+Dst]
.text$mn:000088A5                 push    eax             ; Dst
.text$mn:000088A6                 call    _wmemcpy
.text$mn:000088AB                 add     esp, 0Ch
.text$mn:000088AE                 mov     [ebp+var_4], eax
.text$mn:000088B1
.text$mn:000088B1 loc_88B1:                               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+10j
.text$mn:000088B1                 mov     eax, [ebp+var_4]
.text$mn:000088B4                 mov     esp, ebp
.text$mn:000088B6                 pop     ebp
.text$mn:000088B7                 retn
.text$mn:000088B7 ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:000088B7
.text$mn:000088B7 _text$mn        ends
.text$mn:000088B7
.text$mn:000088B8 ; ===========================================================================
.text$mn:000088B8
.text$mn:000088B8 ; Segment type: Pure code
.text$mn:000088B8 ; Segment permissions: Read/Execute
.text$mn:000088B8 _text$mn        segment para public 'CODE' use32
.text$mn:000088B8                 assume cs:_text$mn
.text$mn:000088B8                 ;org 88B8h
.text$mn:000088B8 ; COMDAT (pick any)
.text$mn:000088B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000088B8
.text$mn:000088B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000088B8
.text$mn:000088B8 ; Attributes: bp-based frame
.text$mn:000088B8
.text$mn:000088B8 ; int __stdcall std::_Wrap_alloc<std::allocator<char>>::deallocate(void *, int)
.text$mn:000088B8                 public ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z
.text$mn:000088B8 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z proc near
.text$mn:000088B8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Tidy(bool,uint)+81p
.text$mn:000088B8
.text$mn:000088B8 var_4           = dword ptr -4
.text$mn:000088B8 arg_0           = dword ptr  8
.text$mn:000088B8 arg_4           = dword ptr  0Ch
.text$mn:000088B8
.text$mn:000088B8                 push    ebp
.text$mn:000088B9                 mov     ebp, esp
.text$mn:000088BB                 push    ecx
.text$mn:000088BC                 mov     [ebp+var_4], ecx
.text$mn:000088BF                 mov     eax, [ebp+arg_4]
.text$mn:000088C2                 push    eax             ; int
.text$mn:000088C3                 mov     ecx, [ebp+arg_0]
.text$mn:000088C6                 push    ecx             ; void *
.text$mn:000088C7                 mov     ecx, [ebp+var_4]
.text$mn:000088CA                 call    ?deallocate@?$allocator@D@std@@QAEXPADI@Z ; std::allocator<char>::deallocate(char *,uint)
.text$mn:000088CF                 mov     esp, ebp
.text$mn:000088D1                 pop     ebp
.text$mn:000088D2                 retn    8
.text$mn:000088D2 ?deallocate@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QAEXPADI@Z endp
.text$mn:000088D2
.text$mn:000088D2 ; ---------------------------------------------------------------------------
.text$mn:000088D5                 align 4
.text$mn:000088D5 _text$mn        ends
.text$mn:000088D5
.text$mn:000088D8 ; ===========================================================================
.text$mn:000088D8
.text$mn:000088D8 ; Segment type: Pure code
.text$mn:000088D8 ; Segment permissions: Read/Execute
.text$mn:000088D8 _text$mn        segment para public 'CODE' use32
.text$mn:000088D8                 assume cs:_text$mn
.text$mn:000088D8                 ;org 88D8h
.text$mn:000088D8 ; COMDAT (pick any)
.text$mn:000088D8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000088D8
.text$mn:000088D8 ; =============== S U B R O U T I N E =======================================
.text$mn:000088D8
.text$mn:000088D8 ; Attributes: bp-based frame
.text$mn:000088D8
.text$mn:000088D8 ; int __stdcall std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(void *, int)
.text$mn:000088D8                 public ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z
.text$mn:000088D8 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z proc near
.text$mn:000088D8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Tidy(bool,uint)+81p
.text$mn:000088D8
.text$mn:000088D8 var_4           = dword ptr -4
.text$mn:000088D8 arg_0           = dword ptr  8
.text$mn:000088D8 arg_4           = dword ptr  0Ch
.text$mn:000088D8
.text$mn:000088D8                 push    ebp
.text$mn:000088D9                 mov     ebp, esp
.text$mn:000088DB                 push    ecx
.text$mn:000088DC                 mov     [ebp+var_4], ecx
.text$mn:000088DF                 mov     eax, [ebp+arg_4]
.text$mn:000088E2                 push    eax             ; int
.text$mn:000088E3                 mov     ecx, [ebp+arg_0]
.text$mn:000088E6                 push    ecx             ; void *
.text$mn:000088E7                 mov     ecx, [ebp+var_4]
.text$mn:000088EA                 call    ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z ; std::allocator<wchar_t>::deallocate(wchar_t *,uint)
.text$mn:000088EF                 mov     esp, ebp
.text$mn:000088F1                 pop     ebp
.text$mn:000088F2                 retn    8
.text$mn:000088F2 ?deallocate@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAEXPA_WI@Z endp
.text$mn:000088F2
.text$mn:000088F2 ; ---------------------------------------------------------------------------
.text$mn:000088F5                 align 4
.text$mn:000088F5 _text$mn        ends
.text$mn:000088F5
.text$mn:000088F8 ; ===========================================================================
.text$mn:000088F8
.text$mn:000088F8 ; Segment type: Pure code
.text$mn:000088F8 ; Segment permissions: Read/Execute
.text$mn:000088F8 _text$mn        segment para public 'CODE' use32
.text$mn:000088F8                 assume cs:_text$mn
.text$mn:000088F8                 ;org 88F8h
.text$mn:000088F8 ; COMDAT (pick any)
.text$mn:000088F8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000088F8
.text$mn:000088F8 ; =============== S U B R O U T I N E =======================================
.text$mn:000088F8
.text$mn:000088F8 ; Attributes: bp-based frame
.text$mn:000088F8
.text$mn:000088F8 ; int __stdcall std::allocator<char>::deallocate(void *, int)
.text$mn:000088F8                 public ?deallocate@?$allocator@D@std@@QAEXPADI@Z
.text$mn:000088F8 ?deallocate@?$allocator@D@std@@QAEXPADI@Z proc near
.text$mn:000088F8                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::deallocate(char *,uint)+12p
.text$mn:000088F8
.text$mn:000088F8 var_4           = dword ptr -4
.text$mn:000088F8 arg_0           = dword ptr  8
.text$mn:000088F8
.text$mn:000088F8                 push    ebp
.text$mn:000088F9                 mov     ebp, esp
.text$mn:000088FB                 push    ecx
.text$mn:000088FC                 mov     [ebp+var_4], ecx
.text$mn:000088FF                 mov     eax, [ebp+arg_0]
.text$mn:00008902                 push    eax             ; void *
.text$mn:00008903                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00008908                 add     esp, 4
.text$mn:0000890B                 mov     esp, ebp
.text$mn:0000890D                 pop     ebp
.text$mn:0000890E                 retn    8
.text$mn:0000890E ?deallocate@?$allocator@D@std@@QAEXPADI@Z endp
.text$mn:0000890E
.text$mn:0000890E ; ---------------------------------------------------------------------------
.text$mn:00008911                 align 4
.text$mn:00008911 _text$mn        ends
.text$mn:00008911
.text$mn:00008914 ; ===========================================================================
.text$mn:00008914
.text$mn:00008914 ; Segment type: Pure code
.text$mn:00008914 ; Segment permissions: Read/Execute
.text$mn:00008914 _text$mn        segment para public 'CODE' use32
.text$mn:00008914                 assume cs:_text$mn
.text$mn:00008914                 ;org 8914h
.text$mn:00008914 ; COMDAT (pick any)
.text$mn:00008914                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008914
.text$mn:00008914 ; =============== S U B R O U T I N E =======================================
.text$mn:00008914
.text$mn:00008914 ; Attributes: bp-based frame
.text$mn:00008914
.text$mn:00008914 ; int __stdcall std::allocator<std::_Container_proxy>::deallocate(void *, int)
.text$mn:00008914                 public ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z
.text$mn:00008914 ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z proc near
.text$mn:00008914                                         ; CODE XREF: std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Free_proxy(void)+32p
.text$mn:00008914                                         ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Free_proxy(void)+32p
.text$mn:00008914
.text$mn:00008914 var_4           = dword ptr -4
.text$mn:00008914 arg_0           = dword ptr  8
.text$mn:00008914
.text$mn:00008914                 push    ebp
.text$mn:00008915                 mov     ebp, esp
.text$mn:00008917                 push    ecx
.text$mn:00008918                 mov     [ebp+var_4], ecx
.text$mn:0000891B                 mov     eax, [ebp+arg_0]
.text$mn:0000891E                 push    eax             ; void *
.text$mn:0000891F                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00008924                 add     esp, 4
.text$mn:00008927                 mov     esp, ebp
.text$mn:00008929                 pop     ebp
.text$mn:0000892A                 retn    8
.text$mn:0000892A ?deallocate@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@2@I@Z endp
.text$mn:0000892A
.text$mn:0000892A ; ---------------------------------------------------------------------------
.text$mn:0000892D                 align 10h
.text$mn:0000892D _text$mn        ends
.text$mn:0000892D
.text$mn:00008930 ; ===========================================================================
.text$mn:00008930
.text$mn:00008930 ; Segment type: Pure code
.text$mn:00008930 ; Segment permissions: Read/Execute
.text$mn:00008930 _text$mn        segment para public 'CODE' use32
.text$mn:00008930                 assume cs:_text$mn
.text$mn:00008930                 ;org 8930h
.text$mn:00008930 ; COMDAT (pick any)
.text$mn:00008930                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008930
.text$mn:00008930 ; =============== S U B R O U T I N E =======================================
.text$mn:00008930
.text$mn:00008930 ; Attributes: bp-based frame
.text$mn:00008930
.text$mn:00008930 ; int __stdcall std::allocator<wchar_t>::deallocate(void *, int)
.text$mn:00008930                 public ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z
.text$mn:00008930 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z proc near
.text$mn:00008930                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::deallocate(wchar_t *,uint)+12p
.text$mn:00008930
.text$mn:00008930 var_4           = dword ptr -4
.text$mn:00008930 arg_0           = dword ptr  8
.text$mn:00008930
.text$mn:00008930                 push    ebp
.text$mn:00008931                 mov     ebp, esp
.text$mn:00008933                 push    ecx
.text$mn:00008934                 mov     [ebp+var_4], ecx
.text$mn:00008937                 mov     eax, [ebp+arg_0]
.text$mn:0000893A                 push    eax             ; void *
.text$mn:0000893B                 call    ??3@YAXPAX@Z    ; operator delete(void *)
.text$mn:00008940                 add     esp, 4
.text$mn:00008943                 mov     esp, ebp
.text$mn:00008945                 pop     ebp
.text$mn:00008946                 retn    8
.text$mn:00008946 ?deallocate@?$allocator@_W@std@@QAEXPA_WI@Z endp
.text$mn:00008946
.text$mn:00008946 ; ---------------------------------------------------------------------------
.text$mn:00008949                 align 4
.text$mn:00008949 _text$mn        ends
.text$mn:00008949
.text$mn:0000894C ; ===========================================================================
.text$mn:0000894C
.text$mn:0000894C ; Segment type: Pure code
.text$mn:0000894C ; Segment permissions: Read/Execute
.text$mn:0000894C _text$mn        segment para public 'CODE' use32
.text$mn:0000894C                 assume cs:_text$mn
.text$mn:0000894C                 ;org 894Ch
.text$mn:0000894C ; COMDAT (pick any)
.text$mn:0000894C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000894C
.text$mn:0000894C ; =============== S U B R O U T I N E =======================================
.text$mn:0000894C
.text$mn:0000894C ; Attributes: bp-based frame
.text$mn:0000894C
.text$mn:0000894C ; public: virtual class std::error_condition __thiscall std::_System_error_category::default_error_condition(int)const
.text$mn:0000894C                 public ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:0000894C ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:0000894C                                         ; DATA XREF: .rdata:0000A898o
.text$mn:0000894C
.text$mn:0000894C var_4           = dword ptr -4
.text$mn:0000894C arg_0           = dword ptr  8
.text$mn:0000894C arg_4           = dword ptr  0Ch
.text$mn:0000894C
.text$mn:0000894C                 push    ebp
.text$mn:0000894D                 mov     ebp, esp
.text$mn:0000894F                 push    ecx
.text$mn:00008950                 mov     [ebp+var_4], ecx
.text$mn:00008953                 mov     eax, [ebp+arg_4]
.text$mn:00008956                 push    eax             ; int
.text$mn:00008957                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:0000895C                 add     esp, 4
.text$mn:0000895F                 test    eax, eax
.text$mn:00008961                 jz      short loc_897C
.text$mn:00008963                 call    ?generic_category@std@@YAABVerror_category@1@XZ ; std::generic_category(void)
.text$mn:00008968                 push    eax             ; struct std::error_category *
.text$mn:00008969                 mov     ecx, [ebp+arg_4]
.text$mn:0000896C                 push    ecx             ; int
.text$mn:0000896D                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00008970                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:00008975                 mov     eax, [ebp+arg_0]
.text$mn:00008978                 jmp     short loc_8991
.text$mn:0000897A ; ---------------------------------------------------------------------------
.text$mn:0000897A                 jmp     short loc_8991
.text$mn:0000897C ; ---------------------------------------------------------------------------
.text$mn:0000897C
.text$mn:0000897C loc_897C:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+15j
.text$mn:0000897C                 call    ?system_category@std@@YAABVerror_category@1@XZ ; std::system_category(void)
.text$mn:00008981                 push    eax             ; struct std::error_category *
.text$mn:00008982                 mov     edx, [ebp+arg_4]
.text$mn:00008985                 push    edx             ; int
.text$mn:00008986                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00008989                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:0000898E                 mov     eax, [ebp+arg_0]
.text$mn:00008991
.text$mn:00008991 loc_8991:                               ; CODE XREF: std::_System_error_category::default_error_condition(int)+2Cj
.text$mn:00008991                                         ; std::_System_error_category::default_error_condition(int)+2Ej
.text$mn:00008991                 mov     esp, ebp
.text$mn:00008993                 pop     ebp
.text$mn:00008994                 retn    8
.text$mn:00008994 ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:00008994
.text$mn:00008994 ; ---------------------------------------------------------------------------
.text$mn:00008997                 align 4
.text$mn:00008997 _text$mn        ends
.text$mn:00008997
.text$mn:00008998 ; ===========================================================================
.text$mn:00008998
.text$mn:00008998 ; Segment type: Pure code
.text$mn:00008998 ; Segment permissions: Read/Execute
.text$mn:00008998 _text$mn        segment para public 'CODE' use32
.text$mn:00008998                 assume cs:_text$mn
.text$mn:00008998                 ;org 8998h
.text$mn:00008998 ; COMDAT (pick any)
.text$mn:00008998                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008998
.text$mn:00008998 ; =============== S U B R O U T I N E =======================================
.text$mn:00008998
.text$mn:00008998 ; Attributes: bp-based frame
.text$mn:00008998
.text$mn:00008998 ; public: virtual class std::error_condition __thiscall std::error_category::default_error_condition(int)const
.text$mn:00008998                 public ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z
.text$mn:00008998 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z proc near
.text$mn:00008998                                         ; DATA XREF: .rdata:0000A808o
.text$mn:00008998                                         ; .rdata:0000A824o ...
.text$mn:00008998
.text$mn:00008998 var_4           = dword ptr -4
.text$mn:00008998 arg_0           = dword ptr  8
.text$mn:00008998 arg_4           = dword ptr  0Ch
.text$mn:00008998
.text$mn:00008998                 push    ebp
.text$mn:00008999                 mov     ebp, esp
.text$mn:0000899B                 push    ecx
.text$mn:0000899C                 mov     [ebp+var_4], ecx
.text$mn:0000899F                 mov     eax, [ebp+var_4]
.text$mn:000089A2                 push    eax             ; struct std::error_category *
.text$mn:000089A3                 mov     ecx, [ebp+arg_4]
.text$mn:000089A6                 push    ecx             ; int
.text$mn:000089A7                 mov     ecx, [ebp+arg_0] ; this
.text$mn:000089AA                 call    ??0error_condition@std@@QAE@HABVerror_category@1@@Z ; std::error_condition::error_condition(int,std::error_category const &)
.text$mn:000089AF                 mov     eax, [ebp+arg_0]
.text$mn:000089B2                 mov     esp, ebp
.text$mn:000089B4                 pop     ebp
.text$mn:000089B5                 retn    8
.text$mn:000089B5 ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z endp
.text$mn:000089B5
.text$mn:000089B5 _text$mn        ends
.text$mn:000089B5
.text$mn:000089B8 ; ===========================================================================
.text$mn:000089B8
.text$mn:000089B8 ; Segment type: Pure code
.text$mn:000089B8 ; Segment permissions: Read/Execute
.text$mn:000089B8 _text$mn        segment para public 'CODE' use32
.text$mn:000089B8                 assume cs:_text$mn
.text$mn:000089B8                 ;org 89B8h
.text$mn:000089B8 ; COMDAT (pick any)
.text$mn:000089B8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000089B8
.text$mn:000089B8 ; =============== S U B R O U T I N E =======================================
.text$mn:000089B8
.text$mn:000089B8 ; Attributes: bp-based frame
.text$mn:000089B8
.text$mn:000089B8 ; public: class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>> __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::end(void)
.text$mn:000089B8                 public ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:000089B8 ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$mn:000089B8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+72p
.text$mn:000089B8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::operator=(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+8Ep
.text$mn:000089B8
.text$mn:000089B8 var_14          = dword ptr -14h
.text$mn:000089B8 var_10          = dword ptr -10h
.text$mn:000089B8 var_C           = dword ptr -0Ch
.text$mn:000089B8 var_4           = dword ptr -4
.text$mn:000089B8 arg_0           = dword ptr  8
.text$mn:000089B8
.text$mn:000089B8                 push    ebp
.text$mn:000089B9                 mov     ebp, esp
.text$mn:000089BB                 push    0FFFFFFFFh
.text$mn:000089BD                 push    offset __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$mn:000089C2                 mov     eax, large fs:0
.text$mn:000089C8                 push    eax
.text$mn:000089C9                 sub     esp, 8
.text$mn:000089CC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:000089D1                 xor     eax, ebp
.text$mn:000089D3                 push    eax
.text$mn:000089D4                 lea     eax, [ebp+var_C]
.text$mn:000089D7                 mov     large fs:0, eax
.text$mn:000089DD                 mov     [ebp+var_10], ecx
.text$mn:000089E0                 mov     [ebp+var_14], 0
.text$mn:000089E7                 mov     eax, [ebp+var_10]
.text$mn:000089EA                 push    eax             ; struct std::_Container_base12 *
.text$mn:000089EB                 mov     ecx, [ebp+var_10]
.text$mn:000089EE                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000089F3                 mov     ecx, [ebp+var_10]
.text$mn:000089F6                 mov     edx, [ecx+14h]
.text$mn:000089F9                 lea     eax, [eax+edx*2]
.text$mn:000089FC                 push    eax             ; int
.text$mn:000089FD                 mov     ecx, [ebp+arg_0]
.text$mn:00008A00                 call    ??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(wchar_t *,std::_Container_base12 const *)
.text$mn:00008A05                 mov     [ebp+var_4], 0
.text$mn:00008A0C                 mov     ecx, [ebp+var_14]
.text$mn:00008A0F                 or      ecx, 1
.text$mn:00008A12                 mov     [ebp+var_14], ecx
.text$mn:00008A15                 mov     eax, [ebp+arg_0]
.text$mn:00008A18                 mov     ecx, [ebp+var_C]
.text$mn:00008A1B                 mov     large fs:0, ecx
.text$mn:00008A22                 pop     ecx
.text$mn:00008A23                 mov     esp, ebp
.text$mn:00008A25                 pop     ebp
.text$mn:00008A26                 retn    4
.text$mn:00008A26 ?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$mn:00008A26
.text$mn:00008A26 ; ---------------------------------------------------------------------------
.text$mn:00008A29                 align 4
.text$mn:00008A29 _text$mn        ends
.text$mn:00008A29
.text$x:00008A2C ; ===========================================================================
.text$x:00008A2C
.text$x:00008A2C ; Segment type: Pure code
.text$x:00008A2C ; Segment permissions: Read/Execute
.text$x:00008A2C _text$x         segment para public 'CODE' use32
.text$x:00008A2C                 assume cs:_text$x
.text$x:00008A2C                 ;org 8A2Ch
.text$x:00008A2C ; COMDAT (pick associative to section at 89B8)
.text$x:00008A2C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008A2C
.text$x:00008A2C ; =============== S U B R O U T I N E =======================================
.text$x:00008A2C
.text$x:00008A2C
.text$x:00008A2C __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 proc near
.text$x:00008A2C                                         ; DATA XREF: .xdata$x:0000A1C4o
.text$x:00008A2C                 mov     eax, [ebp-14h]
.text$x:00008A2F                 and     eax, 1
.text$x:00008A32                 jz      $LN4_0
.text$x:00008A38                 and     dword ptr [ebp-14h], 0FFFFFFFEh
.text$x:00008A3C                 mov     ecx, [ebp+8]
.text$x:00008A3F                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00008A44 ; ---------------------------------------------------------------------------
.text$x:00008A44
.text$x:00008A44 $LN4_0:                                 ; CODE XREF: __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0+6j
.text$x:00008A44                 retn
.text$x:00008A44 __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0 endp
.text$x:00008A44
.text$x:00008A45
.text$x:00008A45 ; =============== S U B R O U T I N E =======================================
.text$x:00008A45
.text$x:00008A45
.text$x:00008A45 __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ proc near
.text$x:00008A45                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::end(void)+5o
.text$x:00008A45
.text$x:00008A45 arg_4           = dword ptr  8
.text$x:00008A45
.text$x:00008A45                 mov     edx, [esp+arg_4]
.text$x:00008A49                 lea     eax, [edx+0Ch]
.text$x:00008A4C                 mov     ecx, [edx-0Ch]
.text$x:00008A4F                 xor     ecx, eax
.text$x:00008A51                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008A56                 mov     eax, offset __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.text$x:00008A5B                 jmp     ___CxxFrameHandler3
.text$x:00008A5B __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ endp
.text$x:00008A5B
.text$x:00008A5B _text$x         ends
.text$x:00008A5B
.text$mn:00008A60 ; ===========================================================================
.text$mn:00008A60
.text$mn:00008A60 ; Segment type: Pure code
.text$mn:00008A60 ; Segment permissions: Read/Execute
.text$mn:00008A60 _text$mn        segment para public 'CODE' use32
.text$mn:00008A60                 assume cs:_text$mn
.text$mn:00008A60                 ;org 8A60h
.text$mn:00008A60 ; COMDAT (pick any)
.text$mn:00008A60                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008A60
.text$mn:00008A60 ; =============== S U B R O U T I N E =======================================
.text$mn:00008A60
.text$mn:00008A60 ; Attributes: bp-based frame
.text$mn:00008A60
.text$mn:00008A60 ; bool __thiscall std::error_category::equivalent(std::error_category *this, const struct std::error_code *, int)
.text$mn:00008A60                 public ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z
.text$mn:00008A60 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z proc near
.text$mn:00008A60                                         ; DATA XREF: .rdata:0000A80Co
.text$mn:00008A60                                         ; .rdata:0000A828o ...
.text$mn:00008A60
.text$mn:00008A60 var_8           = dword ptr -8
.text$mn:00008A60 var_4           = dword ptr -4
.text$mn:00008A60 arg_0           = dword ptr  8
.text$mn:00008A60 arg_4           = dword ptr  0Ch
.text$mn:00008A60
.text$mn:00008A60                 push    ebp
.text$mn:00008A61                 mov     ebp, esp
.text$mn:00008A63                 sub     esp, 8
.text$mn:00008A66                 mov     [ebp+var_8], ecx
.text$mn:00008A69                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00008A6C                 call    ?category@error_code@std@@QBEABVerror_category@2@XZ ; std::error_code::category(void)
.text$mn:00008A71                 push    eax
.text$mn:00008A72                 mov     ecx, [ebp+var_8]
.text$mn:00008A75                 call    ??8error_category@std@@QBE_NABV01@@Z ; std::error_category::operator==(std::error_category const &)
.text$mn:00008A7A                 movzx   eax, al
.text$mn:00008A7D                 test    eax, eax
.text$mn:00008A7F                 jz      short loc_8A97
.text$mn:00008A81                 mov     ecx, [ebp+arg_0] ; this
.text$mn:00008A84                 call    ?value@error_code@std@@QBEHXZ ; std::error_code::value(void)
.text$mn:00008A89                 cmp     eax, [ebp+arg_4]
.text$mn:00008A8C                 jnz     short loc_8A97
.text$mn:00008A8E                 mov     [ebp+var_4], 1
.text$mn:00008A95                 jmp     short loc_8A9E
.text$mn:00008A97 ; ---------------------------------------------------------------------------
.text$mn:00008A97
.text$mn:00008A97 loc_8A97:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+1Fj
.text$mn:00008A97                                         ; std::error_category::equivalent(std::error_code const &,int)+2Cj
.text$mn:00008A97                 mov     [ebp+var_4], 0
.text$mn:00008A9E
.text$mn:00008A9E loc_8A9E:                               ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+35j
.text$mn:00008A9E                 mov     al, byte ptr [ebp+var_4]
.text$mn:00008AA1                 mov     esp, ebp
.text$mn:00008AA3                 pop     ebp
.text$mn:00008AA4                 retn    8
.text$mn:00008AA4 ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z endp
.text$mn:00008AA4
.text$mn:00008AA4 ; ---------------------------------------------------------------------------
.text$mn:00008AA7                 align 4
.text$mn:00008AA7 _text$mn        ends
.text$mn:00008AA7
.text$mn:00008AA8 ; ===========================================================================
.text$mn:00008AA8
.text$mn:00008AA8 ; Segment type: Pure code
.text$mn:00008AA8 ; Segment permissions: Read/Execute
.text$mn:00008AA8 _text$mn        segment para public 'CODE' use32
.text$mn:00008AA8                 assume cs:_text$mn
.text$mn:00008AA8                 ;org 8AA8h
.text$mn:00008AA8 ; COMDAT (pick any)
.text$mn:00008AA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008AA8
.text$mn:00008AA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008AA8
.text$mn:00008AA8 ; Attributes: bp-based frame
.text$mn:00008AA8
.text$mn:00008AA8 ; bool __thiscall std::error_category::equivalent(std::error_category *this, int, const struct std::error_condition *)
.text$mn:00008AA8                 public ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z
.text$mn:00008AA8 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z proc near
.text$mn:00008AA8                                         ; DATA XREF: .rdata:0000A810o
.text$mn:00008AA8                                         ; .rdata:0000A82Co ...
.text$mn:00008AA8
.text$mn:00008AA8 var_C           = byte ptr -0Ch
.text$mn:00008AA8 var_4           = dword ptr -4
.text$mn:00008AA8 arg_0           = dword ptr  8
.text$mn:00008AA8 arg_4           = dword ptr  0Ch
.text$mn:00008AA8
.text$mn:00008AA8                 push    ebp
.text$mn:00008AA9                 mov     ebp, esp
.text$mn:00008AAB                 sub     esp, 0Ch
.text$mn:00008AAE                 mov     [ebp+var_4], ecx
.text$mn:00008AB1                 mov     eax, [ebp+arg_4]
.text$mn:00008AB4                 push    eax             ; std::error_condition *
.text$mn:00008AB5                 mov     ecx, [ebp+arg_0]
.text$mn:00008AB8                 push    ecx
.text$mn:00008AB9                 lea     edx, [ebp+var_C]
.text$mn:00008ABC                 push    edx
.text$mn:00008ABD                 mov     eax, [ebp+var_4]
.text$mn:00008AC0                 mov     edx, [eax]
.text$mn:00008AC2                 mov     ecx, [ebp+var_4]
.text$mn:00008AC5                 mov     eax, [edx+0Ch]
.text$mn:00008AC8                 call    eax
.text$mn:00008ACA                 mov     ecx, eax
.text$mn:00008ACC                 call    ??8error_condition@std@@QBE_NABV01@@Z ; std::error_condition::operator==(std::error_condition const &)
.text$mn:00008AD1                 mov     esp, ebp
.text$mn:00008AD3                 pop     ebp
.text$mn:00008AD4                 retn    8
.text$mn:00008AD4 ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z endp
.text$mn:00008AD4
.text$mn:00008AD4 ; ---------------------------------------------------------------------------
.text$mn:00008AD7                 align 4
.text$mn:00008AD7 _text$mn        ends
.text$mn:00008AD7
.text$mn:00008AD8 ; ===========================================================================
.text$mn:00008AD8
.text$mn:00008AD8 ; Segment type: Pure code
.text$mn:00008AD8 ; Segment permissions: Read/Execute
.text$mn:00008AD8 _text$mn        segment para public 'CODE' use32
.text$mn:00008AD8                 assume cs:_text$mn
.text$mn:00008AD8                 ;org 8AD8h
.text$mn:00008AD8 ; COMDAT (pick any)
.text$mn:00008AD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008AD8
.text$mn:00008AD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008AD8
.text$mn:00008AD8 ; Attributes: bp-based frame
.text$mn:00008AD8
.text$mn:00008AD8 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int)
.text$mn:00008AD8                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z
.text$mn:00008AD8 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z proc near
.text$mn:00008AD8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+4Cp
.text$mn:00008AD8
.text$mn:00008AD8 var_4           = dword ptr -4
.text$mn:00008AD8 arg_0           = dword ptr  8
.text$mn:00008AD8
.text$mn:00008AD8                 push    ebp
.text$mn:00008AD9                 mov     ebp, esp
.text$mn:00008ADB                 push    ecx
.text$mn:00008ADC                 mov     [ebp+var_4], ecx
.text$mn:00008ADF                 mov     eax, [ebp+var_4]
.text$mn:00008AE2                 mov     ecx, [eax+14h]
.text$mn:00008AE5                 cmp     ecx, [ebp+arg_0]
.text$mn:00008AE8                 jnb     short loc_8AF2
.text$mn:00008AEA                 mov     ecx, [ebp+var_4]
.text$mn:00008AED                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00008AF2
.text$mn:00008AF2 loc_8AF2:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint)+10j
.text$mn:00008AF2                 mov     edx, [ebp+arg_0]
.text$mn:00008AF5                 push    edx
.text$mn:00008AF6                 mov     ecx, [ebp+var_4]
.text$mn:00008AF9                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008AFE                 mov     eax, [ebp+var_4]
.text$mn:00008B01                 mov     esp, ebp
.text$mn:00008B03                 pop     ebp
.text$mn:00008B04                 retn    4
.text$mn:00008B04 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@I@Z endp
.text$mn:00008B04
.text$mn:00008B04 ; ---------------------------------------------------------------------------
.text$mn:00008B07                 align 4
.text$mn:00008B07 _text$mn        ends
.text$mn:00008B07
.text$mn:00008B08 ; ===========================================================================
.text$mn:00008B08
.text$mn:00008B08 ; Segment type: Pure code
.text$mn:00008B08 ; Segment permissions: Read/Execute
.text$mn:00008B08 _text$mn        segment para public 'CODE' use32
.text$mn:00008B08                 assume cs:_text$mn
.text$mn:00008B08                 ;org 8B08h
.text$mn:00008B08 ; COMDAT (pick any)
.text$mn:00008B08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B08
.text$mn:00008B08 ; =============== S U B R O U T I N E =======================================
.text$mn:00008B08
.text$mn:00008B08 ; Attributes: bp-based frame
.text$mn:00008B08
.text$mn:00008B08 ; public: class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> & __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::erase(unsigned int, unsigned int)
.text$mn:00008B08                 public ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z
.text$mn:00008B08 ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z proc near
.text$mn:00008B08                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+5Ap
.text$mn:00008B08
.text$mn:00008B08 var_C           = dword ptr -0Ch
.text$mn:00008B08 Dst             = dword ptr -8
.text$mn:00008B08 var_4           = dword ptr -4
.text$mn:00008B08 arg_0           = dword ptr  8
.text$mn:00008B08 arg_4           = dword ptr  0Ch
.text$mn:00008B08
.text$mn:00008B08                 push    ebp
.text$mn:00008B09                 mov     ebp, esp
.text$mn:00008B0B                 sub     esp, 0Ch
.text$mn:00008B0E                 mov     [ebp+var_4], ecx
.text$mn:00008B11                 mov     eax, [ebp+var_4]
.text$mn:00008B14                 mov     ecx, [eax+14h]
.text$mn:00008B17                 cmp     ecx, [ebp+arg_0]
.text$mn:00008B1A                 jnb     short loc_8B24
.text$mn:00008B1C                 mov     ecx, [ebp+var_4]
.text$mn:00008B1F                 call    ?_Xran@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEXXZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)
.text$mn:00008B24
.text$mn:00008B24 loc_8B24:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+12j
.text$mn:00008B24                 mov     edx, [ebp+var_4]
.text$mn:00008B27                 mov     eax, [edx+14h]
.text$mn:00008B2A                 sub     eax, [ebp+arg_0]
.text$mn:00008B2D                 cmp     eax, [ebp+arg_4]
.text$mn:00008B30                 ja      short loc_8B40
.text$mn:00008B32                 mov     ecx, [ebp+arg_0]
.text$mn:00008B35                 push    ecx
.text$mn:00008B36                 mov     ecx, [ebp+var_4]
.text$mn:00008B39                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008B3E                 jmp     short loc_8B86
.text$mn:00008B40 ; ---------------------------------------------------------------------------
.text$mn:00008B40
.text$mn:00008B40 loc_8B40:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+28j
.text$mn:00008B40                 cmp     [ebp+arg_4], 0
.text$mn:00008B44                 jbe     short loc_8B86
.text$mn:00008B46                 mov     ecx, [ebp+var_4]
.text$mn:00008B49                 call    ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QAEPADXZ ; std::_String_val<std::_Simple_types<char>>::_Myptr(void)
.text$mn:00008B4E                 add     eax, [ebp+arg_0]
.text$mn:00008B51                 mov     [ebp+Dst], eax
.text$mn:00008B54                 mov     edx, [ebp+var_4]
.text$mn:00008B57                 mov     eax, [edx+14h]
.text$mn:00008B5A                 sub     eax, [ebp+arg_4]
.text$mn:00008B5D                 mov     [ebp+var_C], eax
.text$mn:00008B60                 mov     ecx, [ebp+var_C]
.text$mn:00008B63                 sub     ecx, [ebp+arg_0]
.text$mn:00008B66                 push    ecx             ; Size
.text$mn:00008B67                 mov     edx, [ebp+Dst]
.text$mn:00008B6A                 add     edx, [ebp+arg_4]
.text$mn:00008B6D                 push    edx             ; Src
.text$mn:00008B6E                 mov     eax, [ebp+Dst]
.text$mn:00008B71                 push    eax             ; Dst
.text$mn:00008B72                 call    ?move@?$char_traits@D@std@@SAPADPADPBDI@Z ; std::char_traits<char>::move(char *,char const *,uint)
.text$mn:00008B77                 add     esp, 0Ch
.text$mn:00008B7A                 mov     ecx, [ebp+var_C]
.text$mn:00008B7D                 push    ecx
.text$mn:00008B7E                 mov     ecx, [ebp+var_4]
.text$mn:00008B81                 call    ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXI@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Eos(uint)
.text$mn:00008B86
.text$mn:00008B86 loc_8B86:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+36j
.text$mn:00008B86                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+3Cj
.text$mn:00008B86                 mov     eax, [ebp+var_4]
.text$mn:00008B89                 mov     esp, ebp
.text$mn:00008B8B                 pop     ebp
.text$mn:00008B8C                 retn    8
.text$mn:00008B8C ?erase@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEAAV12@II@Z endp
.text$mn:00008B8C
.text$mn:00008B8C ; ---------------------------------------------------------------------------
.text$mn:00008B8F                 align 10h
.text$mn:00008B8F _text$mn        ends
.text$mn:00008B8F
.text$mn:00008B90 ; ===========================================================================
.text$mn:00008B90
.text$mn:00008B90 ; Segment type: Pure code
.text$mn:00008B90 ; Segment permissions: Read/Execute
.text$mn:00008B90 _text$mn        segment para public 'CODE' use32
.text$mn:00008B90                 assume cs:_text$mn
.text$mn:00008B90                 ;org 8B90h
.text$mn:00008B90 ; COMDAT (pick any)
.text$mn:00008B90                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008B90
.text$mn:00008B90 ; =============== S U B R O U T I N E =======================================
.text$mn:00008B90
.text$mn:00008B90 ; Attributes: bp-based frame
.text$mn:00008B90
.text$mn:00008B90 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int)
.text$mn:00008B90                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z
.text$mn:00008B90 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z proc near
.text$mn:00008B90                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+4Cp
.text$mn:00008B90
.text$mn:00008B90 var_4           = dword ptr -4
.text$mn:00008B90 arg_0           = dword ptr  8
.text$mn:00008B90
.text$mn:00008B90                 push    ebp
.text$mn:00008B91                 mov     ebp, esp
.text$mn:00008B93                 push    ecx
.text$mn:00008B94                 mov     [ebp+var_4], ecx
.text$mn:00008B97                 mov     eax, [ebp+var_4]
.text$mn:00008B9A                 mov     ecx, [eax+14h]
.text$mn:00008B9D                 cmp     ecx, [ebp+arg_0]
.text$mn:00008BA0                 jnb     short loc_8BAA
.text$mn:00008BA2                 mov     ecx, [ebp+var_4]
.text$mn:00008BA5                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00008BAA
.text$mn:00008BAA loc_8BAA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint)+10j
.text$mn:00008BAA                 mov     edx, [ebp+arg_0]
.text$mn:00008BAD                 push    edx
.text$mn:00008BAE                 mov     ecx, [ebp+var_4]
.text$mn:00008BB1                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00008BB6                 mov     eax, [ebp+var_4]
.text$mn:00008BB9                 mov     esp, ebp
.text$mn:00008BBB                 pop     ebp
.text$mn:00008BBC                 retn    4
.text$mn:00008BBC ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@I@Z endp
.text$mn:00008BBC
.text$mn:00008BBC ; ---------------------------------------------------------------------------
.text$mn:00008BBF                 align 10h
.text$mn:00008BBF _text$mn        ends
.text$mn:00008BBF
.text$mn:00008BC0 ; ===========================================================================
.text$mn:00008BC0
.text$mn:00008BC0 ; Segment type: Pure code
.text$mn:00008BC0 ; Segment permissions: Read/Execute
.text$mn:00008BC0 _text$mn        segment para public 'CODE' use32
.text$mn:00008BC0                 assume cs:_text$mn
.text$mn:00008BC0                 ;org 8BC0h
.text$mn:00008BC0 ; COMDAT (pick any)
.text$mn:00008BC0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008BC0
.text$mn:00008BC0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008BC0
.text$mn:00008BC0 ; Attributes: bp-based frame
.text$mn:00008BC0
.text$mn:00008BC0 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::erase(unsigned int, unsigned int)
.text$mn:00008BC0                 public ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z
.text$mn:00008BC0 ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z proc near
.text$mn:00008BC0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+5Ap
.text$mn:00008BC0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+10Cp
.text$mn:00008BC0
.text$mn:00008BC0 var_C           = dword ptr -0Ch
.text$mn:00008BC0 Dst             = dword ptr -8
.text$mn:00008BC0 var_4           = dword ptr -4
.text$mn:00008BC0 arg_0           = dword ptr  8
.text$mn:00008BC0 arg_4           = dword ptr  0Ch
.text$mn:00008BC0
.text$mn:00008BC0                 push    ebp
.text$mn:00008BC1                 mov     ebp, esp
.text$mn:00008BC3                 sub     esp, 0Ch
.text$mn:00008BC6                 mov     [ebp+var_4], ecx
.text$mn:00008BC9                 mov     eax, [ebp+var_4]
.text$mn:00008BCC                 mov     ecx, [eax+14h]
.text$mn:00008BCF                 cmp     ecx, [ebp+arg_0]
.text$mn:00008BD2                 jnb     short loc_8BDC
.text$mn:00008BD4                 mov     ecx, [ebp+var_4]
.text$mn:00008BD7                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00008BDC
.text$mn:00008BDC loc_8BDC:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+12j
.text$mn:00008BDC                 mov     edx, [ebp+var_4]
.text$mn:00008BDF                 mov     eax, [edx+14h]
.text$mn:00008BE2                 sub     eax, [ebp+arg_0]
.text$mn:00008BE5                 cmp     eax, [ebp+arg_4]
.text$mn:00008BE8                 ja      short loc_8BF8
.text$mn:00008BEA                 mov     ecx, [ebp+arg_0]
.text$mn:00008BED                 push    ecx
.text$mn:00008BEE                 mov     ecx, [ebp+var_4]
.text$mn:00008BF1                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00008BF6                 jmp     short loc_8C44
.text$mn:00008BF8 ; ---------------------------------------------------------------------------
.text$mn:00008BF8
.text$mn:00008BF8 loc_8BF8:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+28j
.text$mn:00008BF8                 cmp     [ebp+arg_4], 0
.text$mn:00008BFC                 jbe     short loc_8C44
.text$mn:00008BFE                 mov     ecx, [ebp+var_4]
.text$mn:00008C01                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00008C06                 mov     edx, [ebp+arg_0]
.text$mn:00008C09                 lea     eax, [eax+edx*2]
.text$mn:00008C0C                 mov     [ebp+Dst], eax
.text$mn:00008C0F                 mov     ecx, [ebp+var_4]
.text$mn:00008C12                 mov     edx, [ecx+14h]
.text$mn:00008C15                 sub     edx, [ebp+arg_4]
.text$mn:00008C18                 mov     [ebp+var_C], edx
.text$mn:00008C1B                 mov     eax, [ebp+var_C]
.text$mn:00008C1E                 sub     eax, [ebp+arg_0]
.text$mn:00008C21                 push    eax             ; int
.text$mn:00008C22                 mov     ecx, [ebp+arg_4]
.text$mn:00008C25                 mov     edx, [ebp+Dst]
.text$mn:00008C28                 lea     eax, [edx+ecx*2]
.text$mn:00008C2B                 push    eax             ; Src
.text$mn:00008C2C                 mov     ecx, [ebp+Dst]
.text$mn:00008C2F                 push    ecx             ; Dst
.text$mn:00008C30                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00008C35                 add     esp, 0Ch
.text$mn:00008C38                 mov     edx, [ebp+var_C]
.text$mn:00008C3B                 push    edx
.text$mn:00008C3C                 mov     ecx, [ebp+var_4]
.text$mn:00008C3F                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:00008C44
.text$mn:00008C44 loc_8C44:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+36j
.text$mn:00008C44                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+3Cj
.text$mn:00008C44                 mov     eax, [ebp+var_4]
.text$mn:00008C47                 mov     esp, ebp
.text$mn:00008C49                 pop     ebp
.text$mn:00008C4A                 retn    8
.text$mn:00008C4A ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z endp
.text$mn:00008C4A
.text$mn:00008C4A ; ---------------------------------------------------------------------------
.text$mn:00008C4D                 align 10h
.text$mn:00008C4D _text$mn        ends
.text$mn:00008C4D
.text$mn:00008C50 ; ===========================================================================
.text$mn:00008C50
.text$mn:00008C50 ; Segment type: Pure code
.text$mn:00008C50 ; Segment permissions: Read/Execute
.text$mn:00008C50 _text$mn        segment para public 'CODE' use32
.text$mn:00008C50                 assume cs:_text$mn
.text$mn:00008C50                 ;org 8C50h
.text$mn:00008C50 ; COMDAT (pick any)
.text$mn:00008C50                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C50
.text$mn:00008C50 ; =============== S U B R O U T I N E =======================================
.text$mn:00008C50
.text$mn:00008C50 ; Attributes: bp-based frame
.text$mn:00008C50
.text$mn:00008C50 ; const struct std::error_category *__cdecl std::generic_category()
.text$mn:00008C50                 public ?generic_category@std@@YAABVerror_category@1@XZ
.text$mn:00008C50 ?generic_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:00008C50                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+17p
.text$mn:00008C50                 push    ebp
.text$mn:00008C51                 mov     ebp, esp
.text$mn:00008C53                 mov     eax, offset ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.text$mn:00008C58                 pop     ebp
.text$mn:00008C59                 retn
.text$mn:00008C59 ?generic_category@std@@YAABVerror_category@1@XZ endp
.text$mn:00008C59
.text$mn:00008C59 ; ---------------------------------------------------------------------------
.text$mn:00008C5A                 align 4
.text$mn:00008C5A _text$mn        ends
.text$mn:00008C5A
.text$mn:00008C5C ; ===========================================================================
.text$mn:00008C5C
.text$mn:00008C5C ; Segment type: Pure code
.text$mn:00008C5C ; Segment permissions: Read/Execute
.text$mn:00008C5C _text$mn        segment para public 'CODE' use32
.text$mn:00008C5C                 assume cs:_text$mn
.text$mn:00008C5C                 ;org 8C5Ch
.text$mn:00008C5C ; COMDAT (pick any)
.text$mn:00008C5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C5C
.text$mn:00008C5C ; =============== S U B R O U T I N E =======================================
.text$mn:00008C5C
.text$mn:00008C5C ; Attributes: bp-based frame
.text$mn:00008C5C
.text$mn:00008C5C ; HWND __thiscall UserDefineDialog::getCommentHandle(UserDefineDialog *__hidden this)
.text$mn:00008C5C                 public ?getCommentHandle@UserDefineDialog@@QBEPAUHWND__@@XZ
.text$mn:00008C5C ?getCommentHandle@UserDefineDialog@@QBEPAUHWND__@@XZ proc near
.text$mn:00008C5C                                         ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+2A8p
.text$mn:00008C5C
.text$mn:00008C5C var_4           = dword ptr -4
.text$mn:00008C5C
.text$mn:00008C5C                 push    ebp
.text$mn:00008C5D                 mov     ebp, esp
.text$mn:00008C5F                 push    ecx
.text$mn:00008C60                 mov     [ebp+var_4], ecx
.text$mn:00008C63                 mov     ecx, [ebp+var_4]
.text$mn:00008C66                 add     ecx, 0FCh ; 'n' ; this
.text$mn:00008C6C                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00008C71                 mov     esp, ebp
.text$mn:00008C73                 pop     ebp
.text$mn:00008C74                 retn
.text$mn:00008C74 ?getCommentHandle@UserDefineDialog@@QBEPAUHWND__@@XZ endp
.text$mn:00008C74
.text$mn:00008C74 ; ---------------------------------------------------------------------------
.text$mn:00008C75                 align 4
.text$mn:00008C75 _text$mn        ends
.text$mn:00008C75
.text$mn:00008C78 ; ===========================================================================
.text$mn:00008C78
.text$mn:00008C78 ; Segment type: Pure code
.text$mn:00008C78 ; Segment permissions: Read/Execute
.text$mn:00008C78 _text$mn        segment para public 'CODE' use32
.text$mn:00008C78                 assume cs:_text$mn
.text$mn:00008C78                 ;org 8C78h
.text$mn:00008C78 ; COMDAT (pick any)
.text$mn:00008C78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C78
.text$mn:00008C78 ; =============== S U B R O U T I N E =======================================
.text$mn:00008C78
.text$mn:00008C78 ; Attributes: bp-based frame
.text$mn:00008C78
.text$mn:00008C78 ; struct NppParameters::FindDlgTabTitiles *__thiscall NppParameters::getFindDlgTabTitiles(NppParameters *__hidden this)
.text$mn:00008C78                 public ?getFindDlgTabTitiles@NppParameters@@QAEAAUFindDlgTabTitiles@1@XZ
.text$mn:00008C78 ?getFindDlgTabTitiles@NppParameters@@QAEAAUFindDlgTabTitiles@1@XZ proc near
.text$mn:00008C78                                         ; CODE XREF: NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+178p
.text$mn:00008C78                                         ; NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+18Ap ...
.text$mn:00008C78
.text$mn:00008C78 var_4           = dword ptr -4
.text$mn:00008C78
.text$mn:00008C78                 push    ebp
.text$mn:00008C79                 mov     ebp, esp
.text$mn:00008C7B                 push    ecx
.text$mn:00008C7C                 mov     [ebp+var_4], ecx
.text$mn:00008C7F                 mov     eax, [ebp+var_4]
.text$mn:00008C82                 add     eax, 1CBA8h
.text$mn:00008C87                 mov     esp, ebp
.text$mn:00008C89                 pop     ebp
.text$mn:00008C8A                 retn
.text$mn:00008C8A ?getFindDlgTabTitiles@NppParameters@@QAEAAUFindDlgTabTitiles@1@XZ endp
.text$mn:00008C8A
.text$mn:00008C8A ; ---------------------------------------------------------------------------
.text$mn:00008C8B                 align 4
.text$mn:00008C8B _text$mn        ends
.text$mn:00008C8B
.text$mn:00008C8C ; ===========================================================================
.text$mn:00008C8C
.text$mn:00008C8C ; Segment type: Pure code
.text$mn:00008C8C ; Segment permissions: Read/Execute
.text$mn:00008C8C _text$mn        segment para public 'CODE' use32
.text$mn:00008C8C                 assume cs:_text$mn
.text$mn:00008C8C                 ;org 8C8Ch
.text$mn:00008C8C ; COMDAT (pick any)
.text$mn:00008C8C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008C8C
.text$mn:00008C8C ; =============== S U B R O U T I N E =======================================
.text$mn:00008C8C
.text$mn:00008C8C ; Attributes: bp-based frame
.text$mn:00008C8C
.text$mn:00008C8C ; HWND __thiscall UserDefineDialog::getFolderHandle(UserDefineDialog *__hidden this)
.text$mn:00008C8C                 public ?getFolderHandle@UserDefineDialog@@QBEPAUHWND__@@XZ
.text$mn:00008C8C ?getFolderHandle@UserDefineDialog@@QBEPAUHWND__@@XZ proc near
.text$mn:00008C8C                                         ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+280p
.text$mn:00008C8C
.text$mn:00008C8C var_4           = dword ptr -4
.text$mn:00008C8C
.text$mn:00008C8C                 push    ebp
.text$mn:00008C8D                 mov     ebp, esp
.text$mn:00008C8F                 push    ecx
.text$mn:00008C90                 mov     [ebp+var_4], ecx
.text$mn:00008C93                 mov     ecx, [ebp+var_4]
.text$mn:00008C96                 add     ecx, 70h ; 'p'  ; this
.text$mn:00008C99                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00008C9E                 mov     esp, ebp
.text$mn:00008CA0                 pop     ebp
.text$mn:00008CA1                 retn
.text$mn:00008CA1 ?getFolderHandle@UserDefineDialog@@QBEPAUHWND__@@XZ endp
.text$mn:00008CA1
.text$mn:00008CA1 ; ---------------------------------------------------------------------------
.text$mn:00008CA2                 align 4
.text$mn:00008CA2 _text$mn        ends
.text$mn:00008CA2
.text$mn:00008CA4 ; ===========================================================================
.text$mn:00008CA4
.text$mn:00008CA4 ; Segment type: Pure code
.text$mn:00008CA4 ; Segment permissions: Read/Execute
.text$mn:00008CA4 _text$mn        segment para public 'CODE' use32
.text$mn:00008CA4                 assume cs:_text$mn
.text$mn:00008CA4                 ;org 8CA4h
.text$mn:00008CA4 ; COMDAT (pick any)
.text$mn:00008CA4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CA4
.text$mn:00008CA4 ; =============== S U B R O U T I N E =======================================
.text$mn:00008CA4
.text$mn:00008CA4 ; Attributes: bp-based frame
.text$mn:00008CA4
.text$mn:00008CA4 ; HWND __thiscall Window::getHSelf(Window *__hidden this)
.text$mn:00008CA4                 public ?getHSelf@Window@@QBEPAUHWND__@@XZ
.text$mn:00008CA4 ?getHSelf@Window@@QBEPAUHWND__@@XZ proc near
.text$mn:00008CA4                                         ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+67p
.text$mn:00008CA4                                         ; NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+391p ...
.text$mn:00008CA4
.text$mn:00008CA4 var_4           = dword ptr -4
.text$mn:00008CA4
.text$mn:00008CA4                 push    ebp
.text$mn:00008CA5                 mov     ebp, esp
.text$mn:00008CA7                 push    ecx
.text$mn:00008CA8                 mov     [ebp+var_4], ecx
.text$mn:00008CAB                 mov     eax, [ebp+var_4]
.text$mn:00008CAE                 mov     eax, [eax+0Ch]
.text$mn:00008CB1                 mov     esp, ebp
.text$mn:00008CB3                 pop     ebp
.text$mn:00008CB4                 retn
.text$mn:00008CB4 ?getHSelf@Window@@QBEPAUHWND__@@XZ endp
.text$mn:00008CB4
.text$mn:00008CB4 ; ---------------------------------------------------------------------------
.text$mn:00008CB5                 align 4
.text$mn:00008CB5 _text$mn        ends
.text$mn:00008CB5
.text$mn:00008CB8 ; ===========================================================================
.text$mn:00008CB8
.text$mn:00008CB8 ; Segment type: Pure code
.text$mn:00008CB8 ; Segment permissions: Read/Execute
.text$mn:00008CB8 _text$mn        segment para public 'CODE' use32
.text$mn:00008CB8                 assume cs:_text$mn
.text$mn:00008CB8                 ;org 8CB8h
.text$mn:00008CB8 ; COMDAT (pick any)
.text$mn:00008CB8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CB8
.text$mn:00008CB8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008CB8
.text$mn:00008CB8 ; Attributes: bp-based frame
.text$mn:00008CB8
.text$mn:00008CB8 ; unsigned __int32 __thiscall CommandShortcut::getID(CommandShortcut *__hidden this)
.text$mn:00008CB8                 public ?getID@CommandShortcut@@QBEKXZ
.text$mn:00008CB8 ?getID@CommandShortcut@@QBEKXZ proc near
.text$mn:00008CB8                                         ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+12Ep
.text$mn:00008CB8
.text$mn:00008CB8 var_4           = dword ptr -4
.text$mn:00008CB8
.text$mn:00008CB8                 push    ebp
.text$mn:00008CB9                 mov     ebp, esp
.text$mn:00008CBB                 push    ecx
.text$mn:00008CBC                 mov     [ebp+var_4], ecx
.text$mn:00008CBF                 mov     eax, [ebp+var_4]
.text$mn:00008CC2                 mov     eax, [eax+128h]
.text$mn:00008CC8                 mov     esp, ebp
.text$mn:00008CCA                 pop     ebp
.text$mn:00008CCB                 retn
.text$mn:00008CCB ?getID@CommandShortcut@@QBEKXZ endp
.text$mn:00008CCB
.text$mn:00008CCB _text$mn        ends
.text$mn:00008CCB
.text$mn:00008CCC ; ===========================================================================
.text$mn:00008CCC
.text$mn:00008CCC ; Segment type: Pure code
.text$mn:00008CCC ; Segment permissions: Read/Execute
.text$mn:00008CCC _text$mn        segment para public 'CODE' use32
.text$mn:00008CCC                 assume cs:_text$mn
.text$mn:00008CCC                 ;org 8CCCh
.text$mn:00008CCC ; COMDAT (pick any)
.text$mn:00008CCC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CCC
.text$mn:00008CCC ; =============== S U B R O U T I N E =======================================
.text$mn:00008CCC
.text$mn:00008CCC ; Attributes: bp-based frame
.text$mn:00008CCC
.text$mn:00008CCC ; struct EncodingMapper *__cdecl EncodingMapper::getInstance()
.text$mn:00008CCC                 public ?getInstance@EncodingMapper@@SAPAV1@XZ
.text$mn:00008CCC ?getInstance@EncodingMapper@@SAPAV1@XZ proc near
.text$mn:00008CCC                                         ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+11Ep
.text$mn:00008CCC                 push    ebp
.text$mn:00008CCD                 mov     ebp, esp
.text$mn:00008CCF                 mov     eax, dword ptr ds:?_pSelf@EncodingMapper@@0PAV1@A ; EncodingMapper * EncodingMapper::_pSelf
.text$mn:00008CD4                 pop     ebp
.text$mn:00008CD5                 retn
.text$mn:00008CD5 ?getInstance@EncodingMapper@@SAPAV1@XZ endp
.text$mn:00008CD5
.text$mn:00008CD5 ; ---------------------------------------------------------------------------
.text$mn:00008CD6                 align 4
.text$mn:00008CD6 _text$mn        ends
.text$mn:00008CD6
.text$mn:00008CD8 ; ===========================================================================
.text$mn:00008CD8
.text$mn:00008CD8 ; Segment type: Pure code
.text$mn:00008CD8 ; Segment permissions: Read/Execute
.text$mn:00008CD8 _text$mn        segment para public 'CODE' use32
.text$mn:00008CD8                 assume cs:_text$mn
.text$mn:00008CD8                 ;org 8CD8h
.text$mn:00008CD8 ; COMDAT (pick any)
.text$mn:00008CD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CD8
.text$mn:00008CD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008CD8
.text$mn:00008CD8 ; Attributes: bp-based frame
.text$mn:00008CD8
.text$mn:00008CD8 ; struct NppParameters *__cdecl NppParameters::getInstance()
.text$mn:00008CD8                 public ?getInstance@NppParameters@@SAPAV1@XZ
.text$mn:00008CD8 ?getInstance@NppParameters@@SAPAV1@XZ proc near
.text$mn:00008CD8                                         ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void):loc_34F6p
.text$mn:00008CD8                                         ; NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+65p
.text$mn:00008CD8                 push    ebp
.text$mn:00008CD9                 mov     ebp, esp
.text$mn:00008CDB                 mov     eax, dword ptr ds:?_pSelf@NppParameters@@0PAV1@A ; NppParameters * NppParameters::_pSelf
.text$mn:00008CE0                 pop     ebp
.text$mn:00008CE1                 retn
.text$mn:00008CE1 ?getInstance@NppParameters@@SAPAV1@XZ endp
.text$mn:00008CE1
.text$mn:00008CE1 ; ---------------------------------------------------------------------------
.text$mn:00008CE2                 align 4
.text$mn:00008CE2 _text$mn        ends
.text$mn:00008CE2
.text$mn:00008CE4 ; ===========================================================================
.text$mn:00008CE4
.text$mn:00008CE4 ; Segment type: Pure code
.text$mn:00008CE4 ; Segment permissions: Read/Execute
.text$mn:00008CE4 _text$mn        segment para public 'CODE' use32
.text$mn:00008CE4                 assume cs:_text$mn
.text$mn:00008CE4                 ;org 8CE4h
.text$mn:00008CE4 ; COMDAT (pick any)
.text$mn:00008CE4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CE4
.text$mn:00008CE4 ; =============== S U B R O U T I N E =======================================
.text$mn:00008CE4
.text$mn:00008CE4 ; Attributes: bp-based frame
.text$mn:00008CE4
.text$mn:00008CE4 ; struct WcharMbcsConvertor *__cdecl WcharMbcsConvertor::getInstance()
.text$mn:00008CE4                 public ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ
.text$mn:00008CE4 ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ proc near
.text$mn:00008CE4                                         ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *):loc_25FEp
.text$mn:00008CE4                                         ; NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+4Bp ...
.text$mn:00008CE4                 push    ebp
.text$mn:00008CE5                 mov     ebp, esp
.text$mn:00008CE7                 mov     eax, dword ptr ds:?_pSelf@WcharMbcsConvertor@@1PAV1@A ; WcharMbcsConvertor * WcharMbcsConvertor::_pSelf
.text$mn:00008CEC                 pop     ebp
.text$mn:00008CED                 retn
.text$mn:00008CED ?getInstance@WcharMbcsConvertor@@SAPAV1@XZ endp
.text$mn:00008CED
.text$mn:00008CED ; ---------------------------------------------------------------------------
.text$mn:00008CEE                 align 10h
.text$mn:00008CEE _text$mn        ends
.text$mn:00008CEE
.text$mn:00008CF0 ; ===========================================================================
.text$mn:00008CF0
.text$mn:00008CF0 ; Segment type: Pure code
.text$mn:00008CF0 ; Segment permissions: Read/Execute
.text$mn:00008CF0 _text$mn        segment para public 'CODE' use32
.text$mn:00008CF0                 assume cs:_text$mn
.text$mn:00008CF0                 ;org 8CF0h
.text$mn:00008CF0 ; COMDAT (pick any)
.text$mn:00008CF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008CF0
.text$mn:00008CF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008CF0
.text$mn:00008CF0 ; Attributes: bp-based frame
.text$mn:00008CF0
.text$mn:00008CF0 ; HWND __thiscall UserDefineDialog::getKeywordsHandle(UserDefineDialog *__hidden this)
.text$mn:00008CF0                 public ?getKeywordsHandle@UserDefineDialog@@QBEPAUHWND__@@XZ
.text$mn:00008CF0 ?getKeywordsHandle@UserDefineDialog@@QBEPAUHWND__@@XZ proc near
.text$mn:00008CF0                                         ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+294p
.text$mn:00008CF0
.text$mn:00008CF0 var_4           = dword ptr -4
.text$mn:00008CF0
.text$mn:00008CF0                 push    ebp
.text$mn:00008CF1                 mov     ebp, esp
.text$mn:00008CF3                 push    ecx
.text$mn:00008CF4                 mov     [ebp+var_4], ecx
.text$mn:00008CF7                 mov     ecx, [ebp+var_4]
.text$mn:00008CFA                 add     ecx, 0DCh ; '_' ; this
.text$mn:00008D00                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00008D05                 mov     esp, ebp
.text$mn:00008D07                 pop     ebp
.text$mn:00008D08                 retn
.text$mn:00008D08 ?getKeywordsHandle@UserDefineDialog@@QBEPAUHWND__@@XZ endp
.text$mn:00008D08
.text$mn:00008D08 ; ---------------------------------------------------------------------------
.text$mn:00008D09                 align 4
.text$mn:00008D09 _text$mn        ends
.text$mn:00008D09
.text$mn:00008D0C ; ===========================================================================
.text$mn:00008D0C
.text$mn:00008D0C ; Segment type: Pure code
.text$mn:00008D0C ; Segment permissions: Read/Execute
.text$mn:00008D0C _text$mn        segment para public 'CODE' use32
.text$mn:00008D0C                 assume cs:_text$mn
.text$mn:00008D0C                 ;org 8D0Ch
.text$mn:00008D0C ; COMDAT (pick any)
.text$mn:00008D0C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D0C
.text$mn:00008D0C ; =============== S U B R O U T I N E =======================================
.text$mn:00008D0C
.text$mn:00008D0C ; Attributes: bp-based frame
.text$mn:00008D0C
.text$mn:00008D0C ; int __thiscall PreferenceDlg::getListSelectedIndex(PreferenceDlg *__hidden this)
.text$mn:00008D0C                 public ?getListSelectedIndex@PreferenceDlg@@QBEHXZ
.text$mn:00008D0C ?getListSelectedIndex@PreferenceDlg@@QBEHXZ proc near
.text$mn:00008D0C                                         ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+1Cp
.text$mn:00008D0C
.text$mn:00008D0C var_4           = dword ptr -4
.text$mn:00008D0C
.text$mn:00008D0C                 push    ebp
.text$mn:00008D0D                 mov     ebp, esp
.text$mn:00008D0F                 push    ecx
.text$mn:00008D10                 mov     [ebp+var_4], ecx
.text$mn:00008D13                 push    0               ; lParam
.text$mn:00008D15                 push    0               ; wParam
.text$mn:00008D17                 push    188h            ; Msg
.text$mn:00008D1C                 push    1772h           ; nIDDlgItem
.text$mn:00008D21                 mov     eax, [ebp+var_4]
.text$mn:00008D24                 mov     ecx, [eax+0Ch]
.text$mn:00008D27                 push    ecx             ; hDlg
.text$mn:00008D28                 call    dword ptr ds:__imp__SendDlgItemMessageW@20 ; SendDlgItemMessageW(x,x,x,x,x)
.text$mn:00008D2E                 mov     esp, ebp
.text$mn:00008D30                 pop     ebp
.text$mn:00008D31                 retn
.text$mn:00008D31 ?getListSelectedIndex@PreferenceDlg@@QBEHXZ endp
.text$mn:00008D31
.text$mn:00008D31 ; ---------------------------------------------------------------------------
.text$mn:00008D32                 align 4
.text$mn:00008D32 _text$mn        ends
.text$mn:00008D32
.text$mn:00008D34 ; ===========================================================================
.text$mn:00008D34
.text$mn:00008D34 ; Segment type: Pure code
.text$mn:00008D34 ; Segment permissions: Read/Execute
.text$mn:00008D34 _text$mn        segment para public 'CODE' use32
.text$mn:00008D34                 assume cs:_text$mn
.text$mn:00008D34                 ;org 8D34h
.text$mn:00008D34 ; COMDAT (pick any)
.text$mn:00008D34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D34
.text$mn:00008D34 ; =============== S U B R O U T I N E =======================================
.text$mn:00008D34
.text$mn:00008D34 ; Attributes: bp-based frame
.text$mn:00008D34
.text$mn:00008D34 ; public: class std::vector<class ScintillaKeyMap, class std::allocator<class ScintillaKeyMap>> & __thiscall NppParameters::getScintillaKeyList(void)
.text$mn:00008D34                 public ?getScintillaKeyList@NppParameters@@QAEAAV?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@XZ
.text$mn:00008D34 ?getScintillaKeyList@NppParameters@@QAEAAV?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@XZ proc near
.text$mn:00008D34                                         ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+2Cp
.text$mn:00008D34
.text$mn:00008D34 var_4           = dword ptr -4
.text$mn:00008D34
.text$mn:00008D34                 push    ebp
.text$mn:00008D35                 mov     ebp, esp
.text$mn:00008D37                 push    ecx
.text$mn:00008D38                 mov     [ebp+var_4], ecx
.text$mn:00008D3B                 mov     eax, [ebp+var_4]
.text$mn:00008D3E                 add     eax, 1C964h
.text$mn:00008D43                 mov     esp, ebp
.text$mn:00008D45                 pop     ebp
.text$mn:00008D46                 retn
.text$mn:00008D46 ?getScintillaKeyList@NppParameters@@QAEAAV?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@XZ endp
.text$mn:00008D46
.text$mn:00008D46 ; ---------------------------------------------------------------------------
.text$mn:00008D47                 align 4
.text$mn:00008D47 _text$mn        ends
.text$mn:00008D47
.text$mn:00008D48 ; ===========================================================================
.text$mn:00008D48
.text$mn:00008D48 ; Segment type: Pure code
.text$mn:00008D48 ; Segment permissions: Read/Execute
.text$mn:00008D48 _text$mn        segment para public 'CODE' use32
.text$mn:00008D48                 assume cs:_text$mn
.text$mn:00008D48                 ;org 8D48h
.text$mn:00008D48 ; COMDAT (pick any)
.text$mn:00008D48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D48
.text$mn:00008D48 ; =============== S U B R O U T I N E =======================================
.text$mn:00008D48
.text$mn:00008D48 ; Attributes: bp-based frame
.text$mn:00008D48
.text$mn:00008D48 ; HWND __thiscall UserDefineDialog::getSymbolHandle(UserDefineDialog *__hidden this)
.text$mn:00008D48                 public ?getSymbolHandle@UserDefineDialog@@QBEPAUHWND__@@XZ
.text$mn:00008D48 ?getSymbolHandle@UserDefineDialog@@QBEPAUHWND__@@XZ proc near
.text$mn:00008D48                                         ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+2BBp
.text$mn:00008D48
.text$mn:00008D48 var_4           = dword ptr -4
.text$mn:00008D48
.text$mn:00008D48                 push    ebp
.text$mn:00008D49                 mov     ebp, esp
.text$mn:00008D4B                 push    ecx
.text$mn:00008D4C                 mov     [ebp+var_4], ecx
.text$mn:00008D4F                 mov     ecx, [ebp+var_4]
.text$mn:00008D52                 add     ecx, 11Ch       ; this
.text$mn:00008D58                 call    ?getHSelf@Window@@QBEPAUHWND__@@XZ ; Window::getHSelf(void)
.text$mn:00008D5D                 mov     esp, ebp
.text$mn:00008D5F                 pop     ebp
.text$mn:00008D60                 retn
.text$mn:00008D60 ?getSymbolHandle@UserDefineDialog@@QBEPAUHWND__@@XZ endp
.text$mn:00008D60
.text$mn:00008D60 ; ---------------------------------------------------------------------------
.text$mn:00008D61                 align 4
.text$mn:00008D61 _text$mn        ends
.text$mn:00008D61
.text$mn:00008D64 ; ===========================================================================
.text$mn:00008D64
.text$mn:00008D64 ; Segment type: Pure code
.text$mn:00008D64 ; Segment permissions: Read/Execute
.text$mn:00008D64 _text$mn        segment para public 'CODE' use32
.text$mn:00008D64                 assume cs:_text$mn
.text$mn:00008D64                 ;org 8D64h
.text$mn:00008D64 ; COMDAT (pick any)
.text$mn:00008D64                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D64
.text$mn:00008D64 ; =============== S U B R O U T I N E =======================================
.text$mn:00008D64
.text$mn:00008D64 ; Attributes: bp-based frame
.text$mn:00008D64
.text$mn:00008D64 ; public: class std::vector<class CommandShortcut, class std::allocator<class CommandShortcut>> & __thiscall NppParameters::getUserShortcuts(void)
.text$mn:00008D64                 public ?getUserShortcuts@NppParameters@@QAEAAV?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@XZ
.text$mn:00008D64 ?getUserShortcuts@NppParameters@@QAEAAV?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@XZ proc near
.text$mn:00008D64                                         ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+21p
.text$mn:00008D64
.text$mn:00008D64 var_4           = dword ptr -4
.text$mn:00008D64
.text$mn:00008D64                 push    ebp
.text$mn:00008D65                 mov     ebp, esp
.text$mn:00008D67                 push    ecx
.text$mn:00008D68                 mov     [ebp+var_4], ecx
.text$mn:00008D6B                 mov     eax, [ebp+var_4]
.text$mn:00008D6E                 add     eax, 1C904h
.text$mn:00008D73                 mov     esp, ebp
.text$mn:00008D75                 pop     ebp
.text$mn:00008D76                 retn
.text$mn:00008D76 ?getUserShortcuts@NppParameters@@QAEAAV?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@XZ endp
.text$mn:00008D76
.text$mn:00008D76 ; ---------------------------------------------------------------------------
.text$mn:00008D77                 align 4
.text$mn:00008D77 _text$mn        ends
.text$mn:00008D77
.text$mn:00008D78 ; ===========================================================================
.text$mn:00008D78
.text$mn:00008D78 ; Segment type: Pure code
.text$mn:00008D78 ; Segment permissions: Read/Execute
.text$mn:00008D78 _text$mn        segment para public 'CODE' use32
.text$mn:00008D78                 assume cs:_text$mn
.text$mn:00008D78                 ;org 8D78h
.text$mn:00008D78 ; COMDAT (pick any)
.text$mn:00008D78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008D78
.text$mn:00008D78 ; =============== S U B R O U T I N E =======================================
.text$mn:00008D78
.text$mn:00008D78 ; Attributes: bp-based frame
.text$mn:00008D78
.text$mn:00008D78 ; int __cdecl std::char_traits<char>::length(char *Str)
.text$mn:00008D78                 public ?length@?$char_traits@D@std@@SAIPBD@Z
.text$mn:00008D78 ?length@?$char_traits@D@std@@SAIPBD@Z proc near
.text$mn:00008D78                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(char const *)+21p
.text$mn:00008D78
.text$mn:00008D78 var_4           = dword ptr -4
.text$mn:00008D78 Str             = dword ptr  8
.text$mn:00008D78
.text$mn:00008D78                 push    ebp
.text$mn:00008D79                 mov     ebp, esp
.text$mn:00008D7B                 push    ecx
.text$mn:00008D7C                 mov     eax, [ebp+Str]
.text$mn:00008D7F                 movsx   ecx, byte ptr [eax]
.text$mn:00008D82                 test    ecx, ecx
.text$mn:00008D84                 jnz     short loc_8D8F
.text$mn:00008D86                 mov     [ebp+var_4], 0
.text$mn:00008D8D                 jmp     short loc_8D9E
.text$mn:00008D8F ; ---------------------------------------------------------------------------
.text$mn:00008D8F
.text$mn:00008D8F loc_8D8F:                               ; CODE XREF: std::char_traits<char>::length(char const *)+Cj
.text$mn:00008D8F                 mov     edx, [ebp+Str]
.text$mn:00008D92                 push    edx             ; Str
.text$mn:00008D93                 call    _strlen
.text$mn:00008D98                 add     esp, 4
.text$mn:00008D9B                 mov     [ebp+var_4], eax
.text$mn:00008D9E
.text$mn:00008D9E loc_8D9E:                               ; CODE XREF: std::char_traits<char>::length(char const *)+15j
.text$mn:00008D9E                 mov     eax, [ebp+var_4]
.text$mn:00008DA1                 mov     esp, ebp
.text$mn:00008DA3                 pop     ebp
.text$mn:00008DA4                 retn
.text$mn:00008DA4 ?length@?$char_traits@D@std@@SAIPBD@Z endp
.text$mn:00008DA4
.text$mn:00008DA4 ; ---------------------------------------------------------------------------
.text$mn:00008DA5                 align 4
.text$mn:00008DA5 _text$mn        ends
.text$mn:00008DA5
.text$mn:00008DA8 ; ===========================================================================
.text$mn:00008DA8
.text$mn:00008DA8 ; Segment type: Pure code
.text$mn:00008DA8 ; Segment permissions: Read/Execute
.text$mn:00008DA8 _text$mn        segment para public 'CODE' use32
.text$mn:00008DA8                 assume cs:_text$mn
.text$mn:00008DA8                 ;org 8DA8h
.text$mn:00008DA8 ; COMDAT (pick any)
.text$mn:00008DA8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008DA8
.text$mn:00008DA8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008DA8
.text$mn:00008DA8 ; Attributes: bp-based frame
.text$mn:00008DA8
.text$mn:00008DA8 ; int __cdecl std::char_traits<wchar_t>::length(wchar_t *Str)
.text$mn:00008DA8                 public ?length@?$char_traits@_W@std@@SAIPB_W@Z
.text$mn:00008DA8 ?length@?$char_traits@_W@std@@SAIPB_W@Z proc near
.text$mn:00008DA8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(wchar_t const *)+21p
.text$mn:00008DA8
.text$mn:00008DA8 var_4           = dword ptr -4
.text$mn:00008DA8 Str             = dword ptr  8
.text$mn:00008DA8
.text$mn:00008DA8                 push    ebp
.text$mn:00008DA9                 mov     ebp, esp
.text$mn:00008DAB                 push    ecx
.text$mn:00008DAC                 mov     eax, [ebp+Str]
.text$mn:00008DAF                 movzx   ecx, word ptr [eax]
.text$mn:00008DB2                 test    ecx, ecx
.text$mn:00008DB4                 jnz     short loc_8DBF
.text$mn:00008DB6                 mov     [ebp+var_4], 0
.text$mn:00008DBD                 jmp     short loc_8DCE
.text$mn:00008DBF ; ---------------------------------------------------------------------------
.text$mn:00008DBF
.text$mn:00008DBF loc_8DBF:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+Cj
.text$mn:00008DBF                 mov     edx, [ebp+Str]
.text$mn:00008DC2                 push    edx             ; Str
.text$mn:00008DC3                 call    _wcslen
.text$mn:00008DC8                 add     esp, 4
.text$mn:00008DCB                 mov     [ebp+var_4], eax
.text$mn:00008DCE
.text$mn:00008DCE loc_8DCE:                               ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+15j
.text$mn:00008DCE                 mov     eax, [ebp+var_4]
.text$mn:00008DD1                 mov     esp, ebp
.text$mn:00008DD3                 pop     ebp
.text$mn:00008DD4                 retn
.text$mn:00008DD4 ?length@?$char_traits@_W@std@@SAIPB_W@Z endp
.text$mn:00008DD4
.text$mn:00008DD4 ; ---------------------------------------------------------------------------
.text$mn:00008DD5                 align 4
.text$mn:00008DD5 _text$mn        ends
.text$mn:00008DD5
.text$mn:00008DD8 ; ===========================================================================
.text$mn:00008DD8
.text$mn:00008DD8 ; Segment type: Pure code
.text$mn:00008DD8 ; Segment permissions: Read/Execute
.text$mn:00008DD8 _text$mn        segment para public 'CODE' use32
.text$mn:00008DD8                 assume cs:_text$mn
.text$mn:00008DD8                 ;org 8DD8h
.text$mn:00008DD8 ; COMDAT (pick any)
.text$mn:00008DD8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008DD8
.text$mn:00008DD8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008DD8
.text$mn:00008DD8 ; Attributes: bp-based frame
.text$mn:00008DD8
.text$mn:00008DD8 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<char>>::max_size(void)const
.text$mn:00008DD8                 public ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ
.text$mn:00008DD8 ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ proc near
.text$mn:00008DD8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+17p
.text$mn:00008DD8
.text$mn:00008DD8 var_4           = dword ptr -4
.text$mn:00008DD8
.text$mn:00008DD8                 push    ebp
.text$mn:00008DD9                 mov     ebp, esp
.text$mn:00008DDB                 push    ecx
.text$mn:00008DDC                 mov     [ebp+var_4], ecx
.text$mn:00008DDF                 mov     eax, [ebp+var_4]
.text$mn:00008DE2                 push    eax
.text$mn:00008DE3                 call    ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z ; std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)
.text$mn:00008DE8                 add     esp, 4
.text$mn:00008DEB                 mov     esp, ebp
.text$mn:00008DED                 pop     ebp
.text$mn:00008DEE                 retn
.text$mn:00008DEE ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ endp
.text$mn:00008DEE
.text$mn:00008DEE ; ---------------------------------------------------------------------------
.text$mn:00008DEF                 align 10h
.text$mn:00008DEF _text$mn        ends
.text$mn:00008DEF
.text$mn:00008DF0 ; ===========================================================================
.text$mn:00008DF0
.text$mn:00008DF0 ; Segment type: Pure code
.text$mn:00008DF0 ; Segment permissions: Read/Execute
.text$mn:00008DF0 _text$mn        segment para public 'CODE' use32
.text$mn:00008DF0                 assume cs:_text$mn
.text$mn:00008DF0                 ;org 8DF0h
.text$mn:00008DF0 ; COMDAT (pick any)
.text$mn:00008DF0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008DF0
.text$mn:00008DF0 ; =============== S U B R O U T I N E =======================================
.text$mn:00008DF0
.text$mn:00008DF0 ; Attributes: bp-based frame
.text$mn:00008DF0
.text$mn:00008DF0 ; public: unsigned int __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::max_size(void)const
.text$mn:00008DF0                 public ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ
.text$mn:00008DF0 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ proc near
.text$mn:00008DF0                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+17p
.text$mn:00008DF0
.text$mn:00008DF0 var_4           = dword ptr -4
.text$mn:00008DF0
.text$mn:00008DF0                 push    ebp
.text$mn:00008DF1                 mov     ebp, esp
.text$mn:00008DF3                 push    ecx
.text$mn:00008DF4                 mov     [ebp+var_4], ecx
.text$mn:00008DF7                 mov     eax, [ebp+var_4]
.text$mn:00008DFA                 push    eax
.text$mn:00008DFB                 call    ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z ; std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)
.text$mn:00008E00                 add     esp, 4
.text$mn:00008E03                 mov     esp, ebp
.text$mn:00008E05                 pop     ebp
.text$mn:00008E06                 retn
.text$mn:00008E06 ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ endp
.text$mn:00008E06
.text$mn:00008E06 ; ---------------------------------------------------------------------------
.text$mn:00008E07                 align 4
.text$mn:00008E07 _text$mn        ends
.text$mn:00008E07
.text$mn:00008E08 ; ===========================================================================
.text$mn:00008E08
.text$mn:00008E08 ; Segment type: Pure code
.text$mn:00008E08 ; Segment permissions: Read/Execute
.text$mn:00008E08 _text$mn        segment para public 'CODE' use32
.text$mn:00008E08                 assume cs:_text$mn
.text$mn:00008E08                 ;org 8E08h
.text$mn:00008E08 ; COMDAT (pick any)
.text$mn:00008E08                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E08
.text$mn:00008E08 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E08
.text$mn:00008E08 ; Attributes: bp-based frame
.text$mn:00008E08
.text$mn:00008E08 ; public: unsigned int __thiscall std::allocator<char>::max_size(void)const
.text$mn:00008E08                 public ?max_size@?$allocator@D@std@@QBEIXZ
.text$mn:00008E08 ?max_size@?$allocator@D@std@@QBEIXZ proc near
.text$mn:00008E08                                         ; CODE XREF: std::allocator_traits<std::allocator<char>>::max_size(std::allocator<char> const &)+6p
.text$mn:00008E08
.text$mn:00008E08 var_4           = dword ptr -4
.text$mn:00008E08
.text$mn:00008E08                 push    ebp
.text$mn:00008E09                 mov     ebp, esp
.text$mn:00008E0B                 push    ecx
.text$mn:00008E0C                 mov     [ebp+var_4], ecx
.text$mn:00008E0F                 or      eax, 0FFFFFFFFh
.text$mn:00008E12                 mov     esp, ebp
.text$mn:00008E14                 pop     ebp
.text$mn:00008E15                 retn
.text$mn:00008E15 ?max_size@?$allocator@D@std@@QBEIXZ endp
.text$mn:00008E15
.text$mn:00008E15 ; ---------------------------------------------------------------------------
.text$mn:00008E16                 align 4
.text$mn:00008E16 _text$mn        ends
.text$mn:00008E16
.text$mn:00008E18 ; ===========================================================================
.text$mn:00008E18
.text$mn:00008E18 ; Segment type: Pure code
.text$mn:00008E18 ; Segment permissions: Read/Execute
.text$mn:00008E18 _text$mn        segment para public 'CODE' use32
.text$mn:00008E18                 assume cs:_text$mn
.text$mn:00008E18                 ;org 8E18h
.text$mn:00008E18 ; COMDAT (pick any)
.text$mn:00008E18                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E18
.text$mn:00008E18 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E18
.text$mn:00008E18 ; Attributes: bp-based frame
.text$mn:00008E18
.text$mn:00008E18 ; public: unsigned int __thiscall std::allocator<wchar_t>::max_size(void)const
.text$mn:00008E18                 public ?max_size@?$allocator@_W@std@@QBEIXZ
.text$mn:00008E18 ?max_size@?$allocator@_W@std@@QBEIXZ proc near
.text$mn:00008E18                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::max_size(std::allocator<wchar_t> const &)+6p
.text$mn:00008E18
.text$mn:00008E18 var_4           = dword ptr -4
.text$mn:00008E18
.text$mn:00008E18                 push    ebp
.text$mn:00008E19                 mov     ebp, esp
.text$mn:00008E1B                 push    ecx
.text$mn:00008E1C                 mov     [ebp+var_4], ecx
.text$mn:00008E1F                 mov     eax, 7FFFFFFFh
.text$mn:00008E24                 mov     esp, ebp
.text$mn:00008E26                 pop     ebp
.text$mn:00008E27                 retn
.text$mn:00008E27 ?max_size@?$allocator@_W@std@@QBEIXZ endp
.text$mn:00008E27
.text$mn:00008E27 _text$mn        ends
.text$mn:00008E27
.text$mn:00008E28 ; ===========================================================================
.text$mn:00008E28
.text$mn:00008E28 ; Segment type: Pure code
.text$mn:00008E28 ; Segment permissions: Read/Execute
.text$mn:00008E28 _text$mn        segment para public 'CODE' use32
.text$mn:00008E28                 assume cs:_text$mn
.text$mn:00008E28                 ;org 8E28h
.text$mn:00008E28 ; COMDAT (pick any)
.text$mn:00008E28                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E28
.text$mn:00008E28 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E28
.text$mn:00008E28 ; Attributes: bp-based frame
.text$mn:00008E28
.text$mn:00008E28 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<char>>::max_size(class std::allocator<char> const &)
.text$mn:00008E28                 public ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z
.text$mn:00008E28 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z proc near
.text$mn:00008E28                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<char>>::max_size(void)+Bp
.text$mn:00008E28
.text$mn:00008E28 arg_0           = dword ptr  8
.text$mn:00008E28
.text$mn:00008E28                 push    ebp
.text$mn:00008E29                 mov     ebp, esp
.text$mn:00008E2B                 mov     ecx, [ebp+arg_0]
.text$mn:00008E2E                 call    ?max_size@?$allocator@D@std@@QBEIXZ ; std::allocator<char>::max_size(void)
.text$mn:00008E33                 pop     ebp
.text$mn:00008E34                 retn
.text$mn:00008E34 ?max_size@?$allocator_traits@V?$allocator@D@std@@@std@@SAIABV?$allocator@D@2@@Z endp
.text$mn:00008E34
.text$mn:00008E34 ; ---------------------------------------------------------------------------
.text$mn:00008E35                 align 4
.text$mn:00008E35 _text$mn        ends
.text$mn:00008E35
.text$mn:00008E38 ; ===========================================================================
.text$mn:00008E38
.text$mn:00008E38 ; Segment type: Pure code
.text$mn:00008E38 ; Segment permissions: Read/Execute
.text$mn:00008E38 _text$mn        segment para public 'CODE' use32
.text$mn:00008E38                 assume cs:_text$mn
.text$mn:00008E38                 ;org 8E38h
.text$mn:00008E38 ; COMDAT (pick any)
.text$mn:00008E38                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E38
.text$mn:00008E38 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E38
.text$mn:00008E38 ; Attributes: bp-based frame
.text$mn:00008E38
.text$mn:00008E38 ; public: static unsigned int __cdecl std::allocator_traits<class std::allocator<wchar_t>>::max_size(class std::allocator<wchar_t> const &)
.text$mn:00008E38                 public ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z
.text$mn:00008E38 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z proc near
.text$mn:00008E38                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)+Bp
.text$mn:00008E38
.text$mn:00008E38 arg_0           = dword ptr  8
.text$mn:00008E38
.text$mn:00008E38                 push    ebp
.text$mn:00008E39                 mov     ebp, esp
.text$mn:00008E3B                 mov     ecx, [ebp+arg_0]
.text$mn:00008E3E                 call    ?max_size@?$allocator@_W@std@@QBEIXZ ; std::allocator<wchar_t>::max_size(void)
.text$mn:00008E43                 pop     ebp
.text$mn:00008E44                 retn
.text$mn:00008E44 ?max_size@?$allocator_traits@V?$allocator@_W@std@@@std@@SAIABV?$allocator@_W@2@@Z endp
.text$mn:00008E44
.text$mn:00008E44 ; ---------------------------------------------------------------------------
.text$mn:00008E45                 align 4
.text$mn:00008E45 _text$mn        ends
.text$mn:00008E45
.text$mn:00008E48 ; ===========================================================================
.text$mn:00008E48
.text$mn:00008E48 ; Segment type: Pure code
.text$mn:00008E48 ; Segment permissions: Read/Execute
.text$mn:00008E48 _text$mn        segment para public 'CODE' use32
.text$mn:00008E48                 assume cs:_text$mn
.text$mn:00008E48                 ;org 8E48h
.text$mn:00008E48 ; COMDAT (pick any)
.text$mn:00008E48                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E48
.text$mn:00008E48 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E48
.text$mn:00008E48 ; Attributes: bp-based frame
.text$mn:00008E48
.text$mn:00008E48 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::max_size(void)const
.text$mn:00008E48                 public ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:00008E48 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:00008E48                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+3Bp
.text$mn:00008E48                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Copy(uint,uint)+6Ap ...
.text$mn:00008E48
.text$mn:00008E48 var_10          = dword ptr -10h
.text$mn:00008E48 var_C           = dword ptr -0Ch
.text$mn:00008E48 var_8           = dword ptr -8
.text$mn:00008E48 var_1           = byte ptr -1
.text$mn:00008E48
.text$mn:00008E48                 push    ebp
.text$mn:00008E49                 mov     ebp, esp
.text$mn:00008E4B                 sub     esp, 10h
.text$mn:00008E4E                 mov     [ebp+var_10], ecx
.text$mn:00008E51                 lea     eax, [ebp+var_1]
.text$mn:00008E54                 push    eax
.text$mn:00008E55                 mov     ecx, [ebp+var_10]
.text$mn:00008E58                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@D@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<char,std::allocator<char>>>::_Getal(void)
.text$mn:00008E5D                 mov     ecx, eax
.text$mn:00008E5F                 call    ?max_size@?$_Wrap_alloc@V?$allocator@D@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<char>>::max_size(void)
.text$mn:00008E64                 mov     [ebp+var_8], eax
.text$mn:00008E67                 cmp     [ebp+var_8], 1
.text$mn:00008E6B                 ja      short loc_8E76
.text$mn:00008E6D                 mov     [ebp+var_C], 1
.text$mn:00008E74                 jmp     short loc_8E7F
.text$mn:00008E76 ; ---------------------------------------------------------------------------
.text$mn:00008E76
.text$mn:00008E76 loc_8E76:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+23j
.text$mn:00008E76                 mov     ecx, [ebp+var_8]
.text$mn:00008E79                 sub     ecx, 1
.text$mn:00008E7C                 mov     [ebp+var_C], ecx
.text$mn:00008E7F
.text$mn:00008E7F loc_8E7F:                               ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::max_size(void)+2Cj
.text$mn:00008E7F                 mov     eax, [ebp+var_C]
.text$mn:00008E82                 mov     esp, ebp
.text$mn:00008E84                 pop     ebp
.text$mn:00008E85                 retn
.text$mn:00008E85 ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:00008E85
.text$mn:00008E85 ; ---------------------------------------------------------------------------
.text$mn:00008E86                 align 4
.text$mn:00008E86 _text$mn        ends
.text$mn:00008E86
.text$mn:00008E88 ; ===========================================================================
.text$mn:00008E88
.text$mn:00008E88 ; Segment type: Pure code
.text$mn:00008E88 ; Segment permissions: Read/Execute
.text$mn:00008E88 _text$mn        segment para public 'CODE' use32
.text$mn:00008E88                 assume cs:_text$mn
.text$mn:00008E88                 ;org 8E88h
.text$mn:00008E88 ; COMDAT (pick any)
.text$mn:00008E88                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008E88
.text$mn:00008E88 ; =============== S U B R O U T I N E =======================================
.text$mn:00008E88
.text$mn:00008E88 ; Attributes: bp-based frame
.text$mn:00008E88
.text$mn:00008E88 ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::max_size(void)const
.text$mn:00008E88                 public ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:00008E88 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:00008E88                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+3Bp
.text$mn:00008E88                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Copy(uint,uint)+6Ap ...
.text$mn:00008E88
.text$mn:00008E88 var_10          = dword ptr -10h
.text$mn:00008E88 var_C           = dword ptr -0Ch
.text$mn:00008E88 var_8           = dword ptr -8
.text$mn:00008E88 var_1           = byte ptr -1
.text$mn:00008E88
.text$mn:00008E88                 push    ebp
.text$mn:00008E89                 mov     ebp, esp
.text$mn:00008E8B                 sub     esp, 10h
.text$mn:00008E8E                 mov     [ebp+var_10], ecx
.text$mn:00008E91                 lea     eax, [ebp+var_1]
.text$mn:00008E94                 push    eax
.text$mn:00008E95                 mov     ecx, [ebp+var_10]
.text$mn:00008E98                 call    ?_Getal@?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QBE?AU?$_Wrap_alloc@V?$allocator@_W@std@@@2@XZ ; std::_String_alloc<0,std::_String_base_types<wchar_t,std::allocator<wchar_t>>>::_Getal(void)
.text$mn:00008E9D                 mov     ecx, eax
.text$mn:00008E9F                 call    ?max_size@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBEIXZ ; std::_Wrap_alloc<std::allocator<wchar_t>>::max_size(void)
.text$mn:00008EA4                 mov     [ebp+var_8], eax
.text$mn:00008EA7                 cmp     [ebp+var_8], 1
.text$mn:00008EAB                 ja      short loc_8EB6
.text$mn:00008EAD                 mov     [ebp+var_C], 1
.text$mn:00008EB4                 jmp     short loc_8EBF
.text$mn:00008EB6 ; ---------------------------------------------------------------------------
.text$mn:00008EB6
.text$mn:00008EB6 loc_8EB6:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+23j
.text$mn:00008EB6                 mov     ecx, [ebp+var_8]
.text$mn:00008EB9                 sub     ecx, 1
.text$mn:00008EBC                 mov     [ebp+var_C], ecx
.text$mn:00008EBF
.text$mn:00008EBF loc_8EBF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::max_size(void)+2Cj
.text$mn:00008EBF                 mov     eax, [ebp+var_C]
.text$mn:00008EC2                 mov     esp, ebp
.text$mn:00008EC4                 pop     ebp
.text$mn:00008EC5                 retn
.text$mn:00008EC5 ?max_size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:00008EC5
.text$mn:00008EC5 ; ---------------------------------------------------------------------------
.text$mn:00008EC6                 align 4
.text$mn:00008EC6 _text$mn        ends
.text$mn:00008EC6
.text$mn:00008EC8 ; ===========================================================================
.text$mn:00008EC8
.text$mn:00008EC8 ; Segment type: Pure code
.text$mn:00008EC8 ; Segment permissions: Read/Execute
.text$mn:00008EC8 _text$mn        segment para public 'CODE' use32
.text$mn:00008EC8                 assume cs:_text$mn
.text$mn:00008EC8                 ;org 8EC8h
.text$mn:00008EC8 ; COMDAT (pick any)
.text$mn:00008EC8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008EC8
.text$mn:00008EC8 ; =============== S U B R O U T I N E =======================================
.text$mn:00008EC8
.text$mn:00008EC8 ; Attributes: bp-based frame
.text$mn:00008EC8
.text$mn:00008EC8 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Generic_error_category::message(int)const
.text$mn:00008EC8                 public ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00008EC8 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00008EC8                                         ; CODE XREF: std::_Iostream_error_category::message(int)+64p
.text$mn:00008EC8                                         ; DATA XREF: .rdata:0000A820o
.text$mn:00008EC8
.text$mn:00008EC8 var_1C          = dword ptr -1Ch
.text$mn:00008EC8 var_18          = dword ptr -18h
.text$mn:00008EC8 Str             = dword ptr -14h
.text$mn:00008EC8 var_10          = dword ptr -10h
.text$mn:00008EC8 var_C           = dword ptr -0Ch
.text$mn:00008EC8 var_4           = dword ptr -4
.text$mn:00008EC8 arg_0           = dword ptr  8
.text$mn:00008EC8 arg_4           = dword ptr  0Ch
.text$mn:00008EC8
.text$mn:00008EC8                 push    ebp
.text$mn:00008EC9                 mov     ebp, esp
.text$mn:00008ECB                 push    0FFFFFFFFh
.text$mn:00008ECD                 push    offset __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00008ED2                 mov     eax, large fs:0
.text$mn:00008ED8                 push    eax
.text$mn:00008ED9                 sub     esp, 10h
.text$mn:00008EDC                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008EE1                 xor     eax, ebp
.text$mn:00008EE3                 push    eax
.text$mn:00008EE4                 lea     eax, [ebp+var_C]
.text$mn:00008EE7                 mov     large fs:0, eax
.text$mn:00008EED                 mov     [ebp+var_1C], ecx
.text$mn:00008EF0                 mov     [ebp+var_18], 0
.text$mn:00008EF7                 mov     eax, [ebp+arg_4]
.text$mn:00008EFA                 push    eax             ; int
.text$mn:00008EFB                 call    ?_Syserror_map@std@@YAPBDH@Z ; std::_Syserror_map(int)
.text$mn:00008F00                 add     esp, 4
.text$mn:00008F03                 mov     [ebp+var_10], eax
.text$mn:00008F06                 cmp     [ebp+var_10], 0
.text$mn:00008F0A                 jz      short loc_8F14
.text$mn:00008F0C                 mov     ecx, [ebp+var_10]
.text$mn:00008F0F                 mov     [ebp+Str], ecx
.text$mn:00008F12                 jmp     short loc_8F1B
.text$mn:00008F14 ; ---------------------------------------------------------------------------
.text$mn:00008F14
.text$mn:00008F14 loc_8F14:                               ; CODE XREF: std::_Generic_error_category::message(int)+42j
.text$mn:00008F14                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:00008F1B
.text$mn:00008F1B loc_8F1B:                               ; CODE XREF: std::_Generic_error_category::message(int)+4Aj
.text$mn:00008F1B                 mov     edx, [ebp+Str]
.text$mn:00008F1E                 push    edx             ; Str
.text$mn:00008F1F                 mov     ecx, [ebp+arg_0]
.text$mn:00008F22                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00008F27                 mov     [ebp+var_4], 0
.text$mn:00008F2E                 mov     eax, [ebp+var_18]
.text$mn:00008F31                 or      eax, 1
.text$mn:00008F34                 mov     [ebp+var_18], eax
.text$mn:00008F37                 mov     eax, [ebp+arg_0]
.text$mn:00008F3A                 mov     ecx, [ebp+var_C]
.text$mn:00008F3D                 mov     large fs:0, ecx
.text$mn:00008F44                 pop     ecx
.text$mn:00008F45                 mov     esp, ebp
.text$mn:00008F47                 pop     ebp
.text$mn:00008F48                 retn    8
.text$mn:00008F48 ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:00008F48
.text$mn:00008F48 ; ---------------------------------------------------------------------------
.text$mn:00008F4B                 align 4
.text$mn:00008F4B _text$mn        ends
.text$mn:00008F4B
.text$x:00008F4C ; ===========================================================================
.text$x:00008F4C
.text$x:00008F4C ; Segment type: Pure code
.text$x:00008F4C ; Segment permissions: Read/Execute
.text$x:00008F4C _text$x         segment para public 'CODE' use32
.text$x:00008F4C                 assume cs:_text$x
.text$x:00008F4C                 ;org 8F4Ch
.text$x:00008F4C ; COMDAT (pick associative to section at 8EC8)
.text$x:00008F4C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00008F4C
.text$x:00008F4C ; =============== S U B R O U T I N E =======================================
.text$x:00008F4C
.text$x:00008F4C
.text$x:00008F4C __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00008F4C                                         ; DATA XREF: .xdata$x:00009E10o
.text$x:00008F4C                 mov     eax, [ebp-18h]
.text$x:00008F4F                 and     eax, 1
.text$x:00008F52                 jz      $LN6
.text$x:00008F58                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:00008F5C                 mov     ecx, [ebp+8]
.text$x:00008F5F                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00008F64 ; ---------------------------------------------------------------------------
.text$x:00008F64
.text$x:00008F64 $LN6:                                   ; CODE XREF: __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00008F64                 retn
.text$x:00008F64 __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00008F64
.text$x:00008F65
.text$x:00008F65 ; =============== S U B R O U T I N E =======================================
.text$x:00008F65
.text$x:00008F65
.text$x:00008F65 __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00008F65                                         ; DATA XREF: std::_Generic_error_category::message(int)+5o
.text$x:00008F65
.text$x:00008F65 arg_4           = dword ptr  8
.text$x:00008F65
.text$x:00008F65                 mov     edx, [esp+arg_4]
.text$x:00008F69                 lea     eax, [edx+0Ch]
.text$x:00008F6C                 mov     ecx, [edx-14h]
.text$x:00008F6F                 xor     ecx, eax
.text$x:00008F71                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00008F76                 mov     eax, offset __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:00008F7B                 jmp     ___CxxFrameHandler3
.text$x:00008F7B __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:00008F7B
.text$x:00008F7B _text$x         ends
.text$x:00008F7B
.text$mn:00008F80 ; ===========================================================================
.text$mn:00008F80
.text$mn:00008F80 ; Segment type: Pure code
.text$mn:00008F80 ; Segment permissions: Read/Execute
.text$mn:00008F80 _text$mn        segment para public 'CODE' use32
.text$mn:00008F80                 assume cs:_text$mn
.text$mn:00008F80                 ;org 8F80h
.text$mn:00008F80 ; COMDAT (pick any)
.text$mn:00008F80                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00008F80
.text$mn:00008F80 ; =============== S U B R O U T I N E =======================================
.text$mn:00008F80
.text$mn:00008F80 ; Attributes: bp-based frame
.text$mn:00008F80
.text$mn:00008F80 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_Iostream_error_category::message(int)const
.text$mn:00008F80                 public ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00008F80 ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00008F80                                         ; DATA XREF: .rdata:0000A854o
.text$mn:00008F80
.text$mn:00008F80 var_14          = dword ptr -14h
.text$mn:00008F80 var_10          = dword ptr -10h
.text$mn:00008F80 var_C           = dword ptr -0Ch
.text$mn:00008F80 var_4           = dword ptr -4
.text$mn:00008F80 arg_0           = dword ptr  8
.text$mn:00008F80 arg_4           = dword ptr  0Ch
.text$mn:00008F80
.text$mn:00008F80                 push    ebp
.text$mn:00008F81                 mov     ebp, esp
.text$mn:00008F83                 push    0FFFFFFFFh
.text$mn:00008F85                 push    offset __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00008F8A                 mov     eax, large fs:0
.text$mn:00008F90                 push    eax
.text$mn:00008F91                 sub     esp, 8
.text$mn:00008F94                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00008F99                 xor     eax, ebp
.text$mn:00008F9B                 push    eax
.text$mn:00008F9C                 lea     eax, [ebp+var_C]
.text$mn:00008F9F                 mov     large fs:0, eax
.text$mn:00008FA5                 mov     [ebp+var_14], ecx
.text$mn:00008FA8                 mov     [ebp+var_10], 0
.text$mn:00008FAF                 cmp     [ebp+arg_4], 1
.text$mn:00008FB3                 jnz     short loc_8FD9
.text$mn:00008FB5                 push    offset ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ ; "iostream stream error"
.text$mn:00008FBA                 mov     ecx, [ebp+arg_0]
.text$mn:00008FBD                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:00008FC2                 mov     [ebp+var_4], 0
.text$mn:00008FC9                 mov     eax, [ebp+var_10]
.text$mn:00008FCC                 or      eax, 1
.text$mn:00008FCF                 mov     [ebp+var_10], eax
.text$mn:00008FD2                 mov     eax, [ebp+arg_0]
.text$mn:00008FD5                 jmp     short loc_8FFC
.text$mn:00008FD7 ; ---------------------------------------------------------------------------
.text$mn:00008FD7                 jmp     short loc_8FFC
.text$mn:00008FD9 ; ---------------------------------------------------------------------------
.text$mn:00008FD9
.text$mn:00008FD9 loc_8FD9:                               ; CODE XREF: std::_Iostream_error_category::message(int)+33j
.text$mn:00008FD9                 mov     ecx, [ebp+arg_4]
.text$mn:00008FDC                 push    ecx
.text$mn:00008FDD                 mov     edx, [ebp+arg_0]
.text$mn:00008FE0                 push    edx
.text$mn:00008FE1                 mov     ecx, [ebp+var_14]
.text$mn:00008FE4                 call    ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.text$mn:00008FE9                 mov     [ebp+var_4], 0
.text$mn:00008FF0                 mov     eax, [ebp+var_10]
.text$mn:00008FF3                 or      eax, 1
.text$mn:00008FF6                 mov     [ebp+var_10], eax
.text$mn:00008FF9                 mov     eax, [ebp+arg_0]
.text$mn:00008FFC
.text$mn:00008FFC loc_8FFC:                               ; CODE XREF: std::_Iostream_error_category::message(int)+55j
.text$mn:00008FFC                                         ; std::_Iostream_error_category::message(int)+57j
.text$mn:00008FFC                 mov     ecx, [ebp+var_C]
.text$mn:00008FFF                 mov     large fs:0, ecx
.text$mn:00009006                 pop     ecx
.text$mn:00009007                 mov     esp, ebp
.text$mn:00009009                 pop     ebp
.text$mn:0000900A                 retn    8
.text$mn:0000900A ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:0000900A
.text$mn:0000900A ; ---------------------------------------------------------------------------
.text$mn:0000900D                 align 10h
.text$mn:0000900D _text$mn        ends
.text$mn:0000900D
.text$x:00009010 ; ===========================================================================
.text$x:00009010
.text$x:00009010 ; Segment type: Pure code
.text$x:00009010 ; Segment permissions: Read/Execute
.text$x:00009010 _text$x         segment para public 'CODE' use32
.text$x:00009010                 assume cs:_text$x
.text$x:00009010                 ;org 9010h
.text$x:00009010 ; COMDAT (pick associative to section at 8F80)
.text$x:00009010                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009010
.text$x:00009010 ; =============== S U B R O U T I N E =======================================
.text$x:00009010
.text$x:00009010
.text$x:00009010 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:00009010                                         ; DATA XREF: .xdata$x:00009E94o
.text$x:00009010                 mov     eax, [ebp-10h]
.text$x:00009013                 and     eax, 1
.text$x:00009016                 jz      $LN6_0
.text$x:0000901C                 and     dword ptr [ebp-10h], 0FFFFFFFEh
.text$x:00009020                 mov     ecx, [ebp+8]
.text$x:00009023                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:00009028 ; ---------------------------------------------------------------------------
.text$x:00009028
.text$x:00009028 $LN6_0:                                 ; CODE XREF: __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:00009028                 retn
.text$x:00009028 __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:00009028
.text$x:00009029
.text$x:00009029 ; =============== S U B R O U T I N E =======================================
.text$x:00009029
.text$x:00009029
.text$x:00009029 __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:00009029                                         ; DATA XREF: std::_Iostream_error_category::message(int)+5o
.text$x:00009029
.text$x:00009029 arg_4           = dword ptr  8
.text$x:00009029
.text$x:00009029                 mov     edx, [esp+arg_4]
.text$x:0000902D                 lea     eax, [edx+0Ch]
.text$x:00009030                 mov     ecx, [edx-0Ch]
.text$x:00009033                 xor     ecx, eax
.text$x:00009035                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:0000903A                 mov     eax, offset __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:0000903F                 jmp     ___CxxFrameHandler3
.text$x:0000903F __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:0000903F
.text$x:0000903F _text$x         ends
.text$x:0000903F
.text$mn:00009044 ; ===========================================================================
.text$mn:00009044
.text$mn:00009044 ; Segment type: Pure code
.text$mn:00009044 ; Segment permissions: Read/Execute
.text$mn:00009044 _text$mn        segment para public 'CODE' use32
.text$mn:00009044                 assume cs:_text$mn
.text$mn:00009044                 ;org 9044h
.text$mn:00009044 ; COMDAT (pick any)
.text$mn:00009044                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009044
.text$mn:00009044 ; =============== S U B R O U T I N E =======================================
.text$mn:00009044
.text$mn:00009044 ; Attributes: bp-based frame
.text$mn:00009044
.text$mn:00009044 ; public: virtual class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>> __thiscall std::_System_error_category::message(int)const
.text$mn:00009044                 public ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:00009044 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$mn:00009044                                         ; DATA XREF: .rdata:0000A894o
.text$mn:00009044
.text$mn:00009044 var_1C          = dword ptr -1Ch
.text$mn:00009044 var_18          = dword ptr -18h
.text$mn:00009044 Str             = dword ptr -14h
.text$mn:00009044 var_10          = dword ptr -10h
.text$mn:00009044 var_C           = dword ptr -0Ch
.text$mn:00009044 var_4           = dword ptr -4
.text$mn:00009044 arg_0           = dword ptr  8
.text$mn:00009044 arg_4           = dword ptr  0Ch
.text$mn:00009044
.text$mn:00009044                 push    ebp
.text$mn:00009045                 mov     ebp, esp
.text$mn:00009047                 push    0FFFFFFFFh
.text$mn:00009049                 push    offset __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$mn:0000904E                 mov     eax, large fs:0
.text$mn:00009054                 push    eax
.text$mn:00009055                 sub     esp, 10h
.text$mn:00009058                 mov     eax, dword ptr ds:___security_cookie
.text$mn:0000905D                 xor     eax, ebp
.text$mn:0000905F                 push    eax
.text$mn:00009060                 lea     eax, [ebp+var_C]
.text$mn:00009063                 mov     large fs:0, eax
.text$mn:00009069                 mov     [ebp+var_1C], ecx
.text$mn:0000906C                 mov     [ebp+var_18], 0
.text$mn:00009073                 mov     eax, [ebp+arg_4]
.text$mn:00009076                 push    eax             ; int
.text$mn:00009077                 call    ?_Winerror_map@std@@YAPBDH@Z ; std::_Winerror_map(int)
.text$mn:0000907C                 add     esp, 4
.text$mn:0000907F                 mov     [ebp+var_10], eax
.text$mn:00009082                 cmp     [ebp+var_10], 0
.text$mn:00009086                 jz      short loc_9090
.text$mn:00009088                 mov     ecx, [ebp+var_10]
.text$mn:0000908B                 mov     [ebp+Str], ecx
.text$mn:0000908E                 jmp     short loc_9097
.text$mn:00009090 ; ---------------------------------------------------------------------------
.text$mn:00009090
.text$mn:00009090 loc_9090:                               ; CODE XREF: std::_System_error_category::message(int)+42j
.text$mn:00009090                 mov     [ebp+Str], offset ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ ; "unknown error"
.text$mn:00009097
.text$mn:00009097 loc_9097:                               ; CODE XREF: std::_System_error_category::message(int)+4Aj
.text$mn:00009097                 mov     edx, [ebp+Str]
.text$mn:0000909A                 push    edx             ; Str
.text$mn:0000909B                 mov     ecx, [ebp+arg_0]
.text$mn:0000909E                 call    ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::basic_string<char,std::char_traits<char>,std::allocator<char>>(char const *)
.text$mn:000090A3                 mov     [ebp+var_4], 0
.text$mn:000090AA                 mov     eax, [ebp+var_18]
.text$mn:000090AD                 or      eax, 1
.text$mn:000090B0                 mov     [ebp+var_18], eax
.text$mn:000090B3                 mov     eax, [ebp+arg_0]
.text$mn:000090B6                 mov     ecx, [ebp+var_C]
.text$mn:000090B9                 mov     large fs:0, ecx
.text$mn:000090C0                 pop     ecx
.text$mn:000090C1                 mov     esp, ebp
.text$mn:000090C3                 pop     ebp
.text$mn:000090C4                 retn    8
.text$mn:000090C4 ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$mn:000090C4
.text$mn:000090C4 ; ---------------------------------------------------------------------------
.text$mn:000090C7                 align 4
.text$mn:000090C7 _text$mn        ends
.text$mn:000090C7
.text$x:000090C8 ; ===========================================================================
.text$x:000090C8
.text$x:000090C8 ; Segment type: Pure code
.text$x:000090C8 ; Segment permissions: Read/Execute
.text$x:000090C8 _text$x         segment para public 'CODE' use32
.text$x:000090C8                 assume cs:_text$x
.text$x:000090C8                 ;org 90C8h
.text$x:000090C8 ; COMDAT (pick associative to section at 9044)
.text$x:000090C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000090C8
.text$x:000090C8 ; =============== S U B R O U T I N E =======================================
.text$x:000090C8
.text$x:000090C8
.text$x:000090C8 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 proc near
.text$x:000090C8                                         ; DATA XREF: .xdata$x:00009F18o
.text$x:000090C8                 mov     eax, [ebp-18h]
.text$x:000090CB                 and     eax, 1
.text$x:000090CE                 jz      $LN6_1
.text$x:000090D4                 and     dword ptr [ebp-18h], 0FFFFFFFEh
.text$x:000090D8                 mov     ecx, [ebp+8]
.text$x:000090DB                 jmp     ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::~basic_string<char,std::char_traits<char>,std::allocator<char>>(void)
.text$x:000090E0 ; ---------------------------------------------------------------------------
.text$x:000090E0
.text$x:000090E0 $LN6_1:                                 ; CODE XREF: __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0+6j
.text$x:000090E0                 retn
.text$x:000090E0 __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0 endp
.text$x:000090E0
.text$x:000090E1
.text$x:000090E1 ; =============== S U B R O U T I N E =======================================
.text$x:000090E1
.text$x:000090E1
.text$x:000090E1 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z proc near
.text$x:000090E1                                         ; DATA XREF: std::_System_error_category::message(int)+5o
.text$x:000090E1
.text$x:000090E1 arg_4           = dword ptr  8
.text$x:000090E1
.text$x:000090E1                 mov     edx, [esp+arg_4]
.text$x:000090E5                 lea     eax, [edx+0Ch]
.text$x:000090E8                 mov     ecx, [edx-14h]
.text$x:000090EB                 xor     ecx, eax
.text$x:000090ED                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:000090F2                 mov     eax, offset __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.text$x:000090F7                 jmp     ___CxxFrameHandler3
.text$x:000090F7 __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z endp
.text$x:000090F7
.text$x:000090F7 _text$x         ends
.text$x:000090F7
.text$mn:000090FC ; ===========================================================================
.text$mn:000090FC
.text$mn:000090FC ; Segment type: Pure code
.text$mn:000090FC ; Segment permissions: Read/Execute
.text$mn:000090FC _text$mn        segment para public 'CODE' use32
.text$mn:000090FC                 assume cs:_text$mn
.text$mn:000090FC                 ;org 90FCh
.text$mn:000090FC ; COMDAT (pick any)
.text$mn:000090FC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000090FC
.text$mn:000090FC ; =============== S U B R O U T I N E =======================================
.text$mn:000090FC
.text$mn:000090FC ; Attributes: bp-based frame
.text$mn:000090FC
.text$mn:000090FC ; int __cdecl std::char_traits<char>::move(void *Dst, void *Src, size_t Size)
.text$mn:000090FC                 public ?move@?$char_traits@D@std@@SAPADPADPBDI@Z
.text$mn:000090FC ?move@?$char_traits@D@std@@SAPADPADPBDI@Z proc near
.text$mn:000090FC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::erase(uint,uint)+6Ap
.text$mn:000090FC
.text$mn:000090FC var_4           = dword ptr -4
.text$mn:000090FC Dst             = dword ptr  8
.text$mn:000090FC Src             = dword ptr  0Ch
.text$mn:000090FC Size            = dword ptr  10h
.text$mn:000090FC
.text$mn:000090FC                 push    ebp
.text$mn:000090FD                 mov     ebp, esp
.text$mn:000090FF                 push    ecx
.text$mn:00009100                 cmp     [ebp+Size], 0
.text$mn:00009104                 jnz     short loc_910E
.text$mn:00009106                 mov     eax, [ebp+Dst]
.text$mn:00009109                 mov     [ebp+var_4], eax
.text$mn:0000910C                 jmp     short loc_9125
.text$mn:0000910E ; ---------------------------------------------------------------------------
.text$mn:0000910E
.text$mn:0000910E loc_910E:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+8j
.text$mn:0000910E                 mov     ecx, [ebp+Size]
.text$mn:00009111                 push    ecx             ; Size
.text$mn:00009112                 mov     edx, [ebp+Src]
.text$mn:00009115                 push    edx             ; Src
.text$mn:00009116                 mov     eax, [ebp+Dst]
.text$mn:00009119                 push    eax             ; Dst
.text$mn:0000911A                 call    _memmove
.text$mn:0000911F                 add     esp, 0Ch
.text$mn:00009122                 mov     [ebp+var_4], eax
.text$mn:00009125
.text$mn:00009125 loc_9125:                               ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+10j
.text$mn:00009125                 mov     eax, [ebp+var_4]
.text$mn:00009128                 mov     esp, ebp
.text$mn:0000912A                 pop     ebp
.text$mn:0000912B                 retn
.text$mn:0000912B ?move@?$char_traits@D@std@@SAPADPADPBDI@Z endp
.text$mn:0000912B
.text$mn:0000912B _text$mn        ends
.text$mn:0000912B
.text$mn:0000912C ; ===========================================================================
.text$mn:0000912C
.text$mn:0000912C ; Segment type: Pure code
.text$mn:0000912C ; Segment permissions: Read/Execute
.text$mn:0000912C _text$mn        segment para public 'CODE' use32
.text$mn:0000912C                 assume cs:_text$mn
.text$mn:0000912C                 ;org 912Ch
.text$mn:0000912C ; COMDAT (pick any)
.text$mn:0000912C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000912C
.text$mn:0000912C ; =============== S U B R O U T I N E =======================================
.text$mn:0000912C
.text$mn:0000912C ; Attributes: bp-based frame
.text$mn:0000912C
.text$mn:0000912C ; int __cdecl std::char_traits<wchar_t>::move(void *Dst, void *Src, int)
.text$mn:0000912C                 public ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z
.text$mn:0000912C ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z proc near
.text$mn:0000912C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Assign_rv(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &&)+2Ap
.text$mn:0000912C                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)+70p ...
.text$mn:0000912C
.text$mn:0000912C var_4           = dword ptr -4
.text$mn:0000912C Dst             = dword ptr  8
.text$mn:0000912C Src             = dword ptr  0Ch
.text$mn:0000912C arg_8           = dword ptr  10h
.text$mn:0000912C
.text$mn:0000912C                 push    ebp
.text$mn:0000912D                 mov     ebp, esp
.text$mn:0000912F                 push    ecx
.text$mn:00009130                 cmp     [ebp+arg_8], 0
.text$mn:00009134                 jnz     short loc_913E
.text$mn:00009136                 mov     eax, [ebp+Dst]
.text$mn:00009139                 mov     [ebp+var_4], eax
.text$mn:0000913C                 jmp     short loc_9155
.text$mn:0000913E ; ---------------------------------------------------------------------------
.text$mn:0000913E
.text$mn:0000913E loc_913E:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+8j
.text$mn:0000913E                 mov     ecx, [ebp+arg_8]
.text$mn:00009141                 push    ecx             ; int
.text$mn:00009142                 mov     edx, [ebp+Src]
.text$mn:00009145                 push    edx             ; Src
.text$mn:00009146                 mov     eax, [ebp+Dst]
.text$mn:00009149                 push    eax             ; Dst
.text$mn:0000914A                 call    _wmemmove
.text$mn:0000914F                 add     esp, 0Ch
.text$mn:00009152                 mov     [ebp+var_4], eax
.text$mn:00009155
.text$mn:00009155 loc_9155:                               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+10j
.text$mn:00009155                 mov     eax, [ebp+var_4]
.text$mn:00009158                 mov     esp, ebp
.text$mn:0000915A                 pop     ebp
.text$mn:0000915B                 retn
.text$mn:0000915B ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z endp
.text$mn:0000915B
.text$mn:0000915B _text$mn        ends
.text$mn:0000915B
.text$mn:0000915C ; ===========================================================================
.text$mn:0000915C
.text$mn:0000915C ; Segment type: Pure code
.text$mn:0000915C ; Segment permissions: Read/Execute
.text$mn:0000915C _text$mn        segment para public 'CODE' use32
.text$mn:0000915C                 assume cs:_text$mn
.text$mn:0000915C                 ;org 915Ch
.text$mn:0000915C ; COMDAT (pick any)
.text$mn:0000915C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000915C
.text$mn:0000915C ; =============== S U B R O U T I N E =======================================
.text$mn:0000915C
.text$mn:0000915C ; Attributes: bp-based frame
.text$mn:0000915C
.text$mn:0000915C ; const char *__thiscall std::_Generic_error_category::name(std::_Generic_error_category *__hidden this)
.text$mn:0000915C                 public ?name@_Generic_error_category@std@@UBEPBDXZ
.text$mn:0000915C ?name@_Generic_error_category@std@@UBEPBDXZ proc near
.text$mn:0000915C                                         ; DATA XREF: .rdata:0000A81Co
.text$mn:0000915C
.text$mn:0000915C var_4           = dword ptr -4
.text$mn:0000915C
.text$mn:0000915C                 push    ebp
.text$mn:0000915D                 mov     ebp, esp
.text$mn:0000915F                 push    ecx
.text$mn:00009160                 mov     [ebp+var_4], ecx
.text$mn:00009163                 mov     eax, offset ??_C@_07DCLBNMLN@generic?$AA@ ; "generic"
.text$mn:00009168                 mov     esp, ebp
.text$mn:0000916A                 pop     ebp
.text$mn:0000916B                 retn
.text$mn:0000916B ?name@_Generic_error_category@std@@UBEPBDXZ endp
.text$mn:0000916B
.text$mn:0000916B _text$mn        ends
.text$mn:0000916B
.text$mn:0000916C ; ===========================================================================
.text$mn:0000916C
.text$mn:0000916C ; Segment type: Pure code
.text$mn:0000916C ; Segment permissions: Read/Execute
.text$mn:0000916C _text$mn        segment para public 'CODE' use32
.text$mn:0000916C                 assume cs:_text$mn
.text$mn:0000916C                 ;org 916Ch
.text$mn:0000916C ; COMDAT (pick any)
.text$mn:0000916C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000916C
.text$mn:0000916C ; =============== S U B R O U T I N E =======================================
.text$mn:0000916C
.text$mn:0000916C ; Attributes: bp-based frame
.text$mn:0000916C
.text$mn:0000916C ; const char *__thiscall std::_Iostream_error_category::name(std::_Iostream_error_category *__hidden this)
.text$mn:0000916C                 public ?name@_Iostream_error_category@std@@UBEPBDXZ
.text$mn:0000916C ?name@_Iostream_error_category@std@@UBEPBDXZ proc near
.text$mn:0000916C                                         ; DATA XREF: .rdata:0000A850o
.text$mn:0000916C
.text$mn:0000916C var_4           = dword ptr -4
.text$mn:0000916C
.text$mn:0000916C                 push    ebp
.text$mn:0000916D                 mov     ebp, esp
.text$mn:0000916F                 push    ecx
.text$mn:00009170                 mov     [ebp+var_4], ecx
.text$mn:00009173                 mov     eax, offset ??_C@_08LLGCOLLL@iostream?$AA@ ; "iostream"
.text$mn:00009178                 mov     esp, ebp
.text$mn:0000917A                 pop     ebp
.text$mn:0000917B                 retn
.text$mn:0000917B ?name@_Iostream_error_category@std@@UBEPBDXZ endp
.text$mn:0000917B
.text$mn:0000917B _text$mn        ends
.text$mn:0000917B
.text$mn:0000917C ; ===========================================================================
.text$mn:0000917C
.text$mn:0000917C ; Segment type: Pure code
.text$mn:0000917C ; Segment permissions: Read/Execute
.text$mn:0000917C _text$mn        segment para public 'CODE' use32
.text$mn:0000917C                 assume cs:_text$mn
.text$mn:0000917C                 ;org 917Ch
.text$mn:0000917C ; COMDAT (pick any)
.text$mn:0000917C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000917C
.text$mn:0000917C ; =============== S U B R O U T I N E =======================================
.text$mn:0000917C
.text$mn:0000917C ; Attributes: bp-based frame
.text$mn:0000917C
.text$mn:0000917C ; const char *__thiscall std::_System_error_category::name(std::_System_error_category *__hidden this)
.text$mn:0000917C                 public ?name@_System_error_category@std@@UBEPBDXZ
.text$mn:0000917C ?name@_System_error_category@std@@UBEPBDXZ proc near
.text$mn:0000917C                                         ; DATA XREF: .rdata:0000A890o
.text$mn:0000917C
.text$mn:0000917C var_4           = dword ptr -4
.text$mn:0000917C
.text$mn:0000917C                 push    ebp
.text$mn:0000917D                 mov     ebp, esp
.text$mn:0000917F                 push    ecx
.text$mn:00009180                 mov     [ebp+var_4], ecx
.text$mn:00009183                 mov     eax, offset ??_C@_06FHFOAHML@system?$AA@ ; "system"
.text$mn:00009188                 mov     esp, ebp
.text$mn:0000918A                 pop     ebp
.text$mn:0000918B                 retn
.text$mn:0000918B ?name@_System_error_category@std@@UBEPBDXZ endp
.text$mn:0000918B
.text$mn:0000918B _text$mn        ends
.text$mn:0000918B
.text$mn:0000918C ; ===========================================================================
.text$mn:0000918C
.text$mn:0000918C ; Segment type: Pure code
.text$mn:0000918C ; Segment permissions: Read/Execute
.text$mn:0000918C _text$mn        segment para public 'CODE' use32
.text$mn:0000918C                 assume cs:_text$mn
.text$mn:0000918C                 ;org 918Ch
.text$mn:0000918C ; COMDAT (pick any)
.text$mn:0000918C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000918C
.text$mn:0000918C ; =============== S U B R O U T I N E =======================================
.text$mn:0000918C
.text$mn:0000918C ; Attributes: bp-based frame
.text$mn:0000918C
.text$mn:0000918C ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(unsigned int, unsigned int, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, unsigned int, unsigned int)
.text$mn:0000918C                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z
.text$mn:0000918C ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z proc near
.text$mn:0000918C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+5Bp
.text$mn:0000918C
.text$mn:0000918C var_10          = dword ptr -10h
.text$mn:0000918C var_C           = dword ptr -0Ch
.text$mn:0000918C var_8           = dword ptr -8
.text$mn:0000918C var_4           = dword ptr -4
.text$mn:0000918C arg_0           = dword ptr  8
.text$mn:0000918C arg_4           = dword ptr  0Ch
.text$mn:0000918C arg_8           = dword ptr  10h
.text$mn:0000918C arg_C           = dword ptr  14h
.text$mn:0000918C arg_10          = dword ptr  18h
.text$mn:0000918C
.text$mn:0000918C                 push    ebp
.text$mn:0000918D                 mov     ebp, esp
.text$mn:0000918F                 sub     esp, 10h
.text$mn:00009192                 mov     [ebp+var_4], ecx
.text$mn:00009195                 mov     eax, [ebp+var_4]
.text$mn:00009198                 mov     ecx, [eax+14h]
.text$mn:0000919B                 cmp     ecx, [ebp+arg_0]
.text$mn:0000919E                 jb      short loc_91AD
.text$mn:000091A0                 mov     ecx, [ebp+arg_8]
.text$mn:000091A3                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000091A8                 cmp     eax, [ebp+arg_C]
.text$mn:000091AB                 jnb     short loc_91B5
.text$mn:000091AD
.text$mn:000091AD loc_91AD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+12j
.text$mn:000091AD                 mov     ecx, [ebp+var_4]
.text$mn:000091B0                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:000091B5
.text$mn:000091B5 loc_91B5:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+1Fj
.text$mn:000091B5                 mov     edx, [ebp+var_4]
.text$mn:000091B8                 mov     eax, [edx+14h]
.text$mn:000091BB                 sub     eax, [ebp+arg_0]
.text$mn:000091BE                 cmp     eax, [ebp+arg_4]
.text$mn:000091C1                 jnb     short loc_91CF
.text$mn:000091C3                 mov     ecx, [ebp+var_4]
.text$mn:000091C6                 mov     edx, [ecx+14h]
.text$mn:000091C9                 sub     edx, [ebp+arg_0]
.text$mn:000091CC                 mov     [ebp+arg_4], edx
.text$mn:000091CF
.text$mn:000091CF loc_91CF:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+35j
.text$mn:000091CF                 mov     ecx, [ebp+arg_8]
.text$mn:000091D2                 call    ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::size(void)
.text$mn:000091D7                 sub     eax, [ebp+arg_C]
.text$mn:000091DA                 mov     [ebp+var_10], eax
.text$mn:000091DD                 mov     eax, [ebp+var_10]
.text$mn:000091E0                 cmp     eax, [ebp+arg_10]
.text$mn:000091E3                 jnb     short loc_91EB
.text$mn:000091E5                 mov     ecx, [ebp+var_10]
.text$mn:000091E8                 mov     [ebp+arg_10], ecx
.text$mn:000091EB
.text$mn:000091EB loc_91EB:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+57j
.text$mn:000091EB                 or      edx, 0FFFFFFFFh
.text$mn:000091EE                 sub     edx, [ebp+arg_10]
.text$mn:000091F1                 mov     eax, [ebp+var_4]
.text$mn:000091F4                 mov     ecx, [eax+14h]
.text$mn:000091F7                 sub     ecx, [ebp+arg_4]
.text$mn:000091FA                 cmp     edx, ecx
.text$mn:000091FC                 ja      short loc_9206
.text$mn:000091FE                 mov     ecx, [ebp+var_4]
.text$mn:00009201                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00009206
.text$mn:00009206 loc_9206:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+70j
.text$mn:00009206                 mov     edx, [ebp+var_4]
.text$mn:00009209                 mov     eax, [edx+14h]
.text$mn:0000920C                 sub     eax, [ebp+arg_4]
.text$mn:0000920F                 sub     eax, [ebp+arg_0]
.text$mn:00009212                 mov     [ebp+var_8], eax
.text$mn:00009215                 mov     ecx, [ebp+var_4]
.text$mn:00009218                 mov     edx, [ecx+14h]
.text$mn:0000921B                 add     edx, [ebp+arg_10]
.text$mn:0000921E                 sub     edx, [ebp+arg_4]
.text$mn:00009221                 mov     [ebp+var_C], edx
.text$mn:00009224                 mov     eax, [ebp+var_4]
.text$mn:00009227                 mov     ecx, [eax+14h]
.text$mn:0000922A                 cmp     ecx, [ebp+var_C]
.text$mn:0000922D                 jnb     short loc_923D
.text$mn:0000922F                 push    0
.text$mn:00009231                 mov     edx, [ebp+var_C]
.text$mn:00009234                 push    edx
.text$mn:00009235                 mov     ecx, [ebp+var_4]
.text$mn:00009238                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:0000923D
.text$mn:0000923D loc_923D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+A1j
.text$mn:0000923D                 mov     eax, [ebp+var_4]
.text$mn:00009240                 cmp     eax, [ebp+arg_8]
.text$mn:00009243                 jz      short loc_92AA
.text$mn:00009245                 mov     ecx, [ebp+var_8]
.text$mn:00009248                 push    ecx             ; int
.text$mn:00009249                 mov     ecx, [ebp+var_4]
.text$mn:0000924C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009251                 mov     edx, [ebp+arg_0]
.text$mn:00009254                 lea     eax, [eax+edx*2]
.text$mn:00009257                 mov     ecx, [ebp+arg_4]
.text$mn:0000925A                 lea     edx, [eax+ecx*2]
.text$mn:0000925D                 push    edx             ; Src
.text$mn:0000925E                 mov     ecx, [ebp+var_4]
.text$mn:00009261                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009266                 mov     ecx, [ebp+arg_0]
.text$mn:00009269                 lea     edx, [eax+ecx*2]
.text$mn:0000926C                 mov     eax, [ebp+arg_10]
.text$mn:0000926F                 lea     ecx, [edx+eax*2]
.text$mn:00009272                 push    ecx             ; Dst
.text$mn:00009273                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00009278                 add     esp, 0Ch
.text$mn:0000927B                 mov     edx, [ebp+arg_10]
.text$mn:0000927E                 push    edx             ; int
.text$mn:0000927F                 mov     ecx, [ebp+arg_8]
.text$mn:00009282                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QBEPB_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009287                 mov     ecx, [ebp+arg_C]
.text$mn:0000928A                 lea     edx, [eax+ecx*2]
.text$mn:0000928D                 push    edx             ; Src
.text$mn:0000928E                 mov     ecx, [ebp+var_4]
.text$mn:00009291                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009296                 mov     ecx, [ebp+arg_0]
.text$mn:00009299                 lea     edx, [eax+ecx*2]
.text$mn:0000929C                 push    edx             ; Dst
.text$mn:0000929D                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:000092A2                 add     esp, 0Ch
.text$mn:000092A5                 jmp     loc_9493
.text$mn:000092AA ; ---------------------------------------------------------------------------
.text$mn:000092AA
.text$mn:000092AA loc_92AA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+B7j
.text$mn:000092AA                 mov     eax, [ebp+arg_10]
.text$mn:000092AD                 cmp     eax, [ebp+arg_4]
.text$mn:000092B0                 ja      short loc_9317
.text$mn:000092B2                 mov     ecx, [ebp+arg_10]
.text$mn:000092B5                 push    ecx             ; int
.text$mn:000092B6                 mov     ecx, [ebp+var_4]
.text$mn:000092B9                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000092BE                 mov     edx, [ebp+arg_C]
.text$mn:000092C1                 lea     eax, [eax+edx*2]
.text$mn:000092C4                 push    eax             ; Src
.text$mn:000092C5                 mov     ecx, [ebp+var_4]
.text$mn:000092C8                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000092CD                 mov     ecx, [ebp+arg_0]
.text$mn:000092D0                 lea     edx, [eax+ecx*2]
.text$mn:000092D3                 push    edx             ; Dst
.text$mn:000092D4                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:000092D9                 add     esp, 0Ch
.text$mn:000092DC                 mov     eax, [ebp+var_8]
.text$mn:000092DF                 push    eax             ; int
.text$mn:000092E0                 mov     ecx, [ebp+var_4]
.text$mn:000092E3                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000092E8                 mov     ecx, [ebp+arg_0]
.text$mn:000092EB                 lea     edx, [eax+ecx*2]
.text$mn:000092EE                 mov     eax, [ebp+arg_4]
.text$mn:000092F1                 lea     ecx, [edx+eax*2]
.text$mn:000092F4                 push    ecx             ; Src
.text$mn:000092F5                 mov     ecx, [ebp+var_4]
.text$mn:000092F8                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000092FD                 mov     edx, [ebp+arg_0]
.text$mn:00009300                 lea     eax, [eax+edx*2]
.text$mn:00009303                 mov     ecx, [ebp+arg_10]
.text$mn:00009306                 lea     edx, [eax+ecx*2]
.text$mn:00009309                 push    edx             ; Dst
.text$mn:0000930A                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000930F                 add     esp, 0Ch
.text$mn:00009312                 jmp     loc_9493
.text$mn:00009317 ; ---------------------------------------------------------------------------
.text$mn:00009317
.text$mn:00009317 loc_9317:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+124j
.text$mn:00009317                 mov     eax, [ebp+arg_C]
.text$mn:0000931A                 cmp     eax, [ebp+arg_0]
.text$mn:0000931D                 ja      short loc_9384
.text$mn:0000931F                 mov     ecx, [ebp+var_8]
.text$mn:00009322                 push    ecx             ; int
.text$mn:00009323                 mov     ecx, [ebp+var_4]
.text$mn:00009326                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000932B                 mov     edx, [ebp+arg_0]
.text$mn:0000932E                 lea     eax, [eax+edx*2]
.text$mn:00009331                 mov     ecx, [ebp+arg_4]
.text$mn:00009334                 lea     edx, [eax+ecx*2]
.text$mn:00009337                 push    edx             ; Src
.text$mn:00009338                 mov     ecx, [ebp+var_4]
.text$mn:0000933B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009340                 mov     ecx, [ebp+arg_0]
.text$mn:00009343                 lea     edx, [eax+ecx*2]
.text$mn:00009346                 mov     eax, [ebp+arg_10]
.text$mn:00009349                 lea     ecx, [edx+eax*2]
.text$mn:0000934C                 push    ecx             ; Dst
.text$mn:0000934D                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00009352                 add     esp, 0Ch
.text$mn:00009355                 mov     edx, [ebp+arg_10]
.text$mn:00009358                 push    edx             ; int
.text$mn:00009359                 mov     ecx, [ebp+var_4]
.text$mn:0000935C                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009361                 mov     ecx, [ebp+arg_C]
.text$mn:00009364                 lea     edx, [eax+ecx*2]
.text$mn:00009367                 push    edx             ; Src
.text$mn:00009368                 mov     ecx, [ebp+var_4]
.text$mn:0000936B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009370                 mov     ecx, [ebp+arg_0]
.text$mn:00009373                 lea     edx, [eax+ecx*2]
.text$mn:00009376                 push    edx             ; Dst
.text$mn:00009377                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000937C                 add     esp, 0Ch
.text$mn:0000937F                 jmp     loc_9493
.text$mn:00009384 ; ---------------------------------------------------------------------------
.text$mn:00009384
.text$mn:00009384 loc_9384:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+191j
.text$mn:00009384                 mov     eax, [ebp+arg_0]
.text$mn:00009387                 add     eax, [ebp+arg_4]
.text$mn:0000938A                 cmp     eax, [ebp+arg_C]
.text$mn:0000938D                 ja      short loc_93FA
.text$mn:0000938F                 mov     ecx, [ebp+var_8]
.text$mn:00009392                 push    ecx             ; int
.text$mn:00009393                 mov     ecx, [ebp+var_4]
.text$mn:00009396                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000939B                 mov     edx, [ebp+arg_0]
.text$mn:0000939E                 lea     eax, [eax+edx*2]
.text$mn:000093A1                 mov     ecx, [ebp+arg_4]
.text$mn:000093A4                 lea     edx, [eax+ecx*2]
.text$mn:000093A7                 push    edx             ; Src
.text$mn:000093A8                 mov     ecx, [ebp+var_4]
.text$mn:000093AB                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000093B0                 mov     ecx, [ebp+arg_0]
.text$mn:000093B3                 lea     edx, [eax+ecx*2]
.text$mn:000093B6                 mov     eax, [ebp+arg_10]
.text$mn:000093B9                 lea     ecx, [edx+eax*2]
.text$mn:000093BC                 push    ecx             ; Dst
.text$mn:000093BD                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:000093C2                 add     esp, 0Ch
.text$mn:000093C5                 mov     edx, [ebp+arg_10]
.text$mn:000093C8                 push    edx             ; int
.text$mn:000093C9                 mov     ecx, [ebp+var_4]
.text$mn:000093CC                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000093D1                 mov     ecx, [ebp+arg_C]
.text$mn:000093D4                 add     ecx, [ebp+arg_10]
.text$mn:000093D7                 sub     ecx, [ebp+arg_4]
.text$mn:000093DA                 lea     edx, [eax+ecx*2]
.text$mn:000093DD                 push    edx             ; Src
.text$mn:000093DE                 mov     ecx, [ebp+var_4]
.text$mn:000093E1                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000093E6                 mov     ecx, [ebp+arg_0]
.text$mn:000093E9                 lea     edx, [eax+ecx*2]
.text$mn:000093EC                 push    edx             ; Dst
.text$mn:000093ED                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:000093F2                 add     esp, 0Ch
.text$mn:000093F5                 jmp     loc_9493
.text$mn:000093FA ; ---------------------------------------------------------------------------
.text$mn:000093FA
.text$mn:000093FA loc_93FA:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+201j
.text$mn:000093FA                 mov     eax, [ebp+arg_4]
.text$mn:000093FD                 push    eax             ; int
.text$mn:000093FE                 mov     ecx, [ebp+var_4]
.text$mn:00009401                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009406                 mov     ecx, [ebp+arg_C]
.text$mn:00009409                 lea     edx, [eax+ecx*2]
.text$mn:0000940C                 push    edx             ; Src
.text$mn:0000940D                 mov     ecx, [ebp+var_4]
.text$mn:00009410                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009415                 mov     ecx, [ebp+arg_0]
.text$mn:00009418                 lea     edx, [eax+ecx*2]
.text$mn:0000941B                 push    edx             ; Dst
.text$mn:0000941C                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00009421                 add     esp, 0Ch
.text$mn:00009424                 mov     eax, [ebp+var_8]
.text$mn:00009427                 push    eax             ; int
.text$mn:00009428                 mov     ecx, [ebp+var_4]
.text$mn:0000942B                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009430                 mov     ecx, [ebp+arg_0]
.text$mn:00009433                 lea     edx, [eax+ecx*2]
.text$mn:00009436                 mov     eax, [ebp+arg_4]
.text$mn:00009439                 lea     ecx, [edx+eax*2]
.text$mn:0000943C                 push    ecx             ; Src
.text$mn:0000943D                 mov     ecx, [ebp+var_4]
.text$mn:00009440                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009445                 mov     edx, [ebp+arg_0]
.text$mn:00009448                 lea     eax, [eax+edx*2]
.text$mn:0000944B                 mov     ecx, [ebp+arg_10]
.text$mn:0000944E                 lea     edx, [eax+ecx*2]
.text$mn:00009451                 push    edx             ; Dst
.text$mn:00009452                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00009457                 add     esp, 0Ch
.text$mn:0000945A                 mov     eax, [ebp+arg_10]
.text$mn:0000945D                 sub     eax, [ebp+arg_4]
.text$mn:00009460                 push    eax             ; int
.text$mn:00009461                 mov     ecx, [ebp+var_4]
.text$mn:00009464                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009469                 mov     ecx, [ebp+arg_C]
.text$mn:0000946C                 lea     edx, [eax+ecx*2]
.text$mn:0000946F                 mov     eax, [ebp+arg_10]
.text$mn:00009472                 lea     ecx, [edx+eax*2]
.text$mn:00009475                 push    ecx             ; Src
.text$mn:00009476                 mov     ecx, [ebp+var_4]
.text$mn:00009479                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000947E                 mov     edx, [ebp+arg_0]
.text$mn:00009481                 lea     eax, [eax+edx*2]
.text$mn:00009484                 mov     ecx, [ebp+arg_4]
.text$mn:00009487                 lea     edx, [eax+ecx*2]
.text$mn:0000948A                 push    edx             ; Dst
.text$mn:0000948B                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00009490                 add     esp, 0Ch
.text$mn:00009493
.text$mn:00009493 loc_9493:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+119j
.text$mn:00009493                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+186j ...
.text$mn:00009493                 mov     eax, [ebp+var_C]
.text$mn:00009496                 push    eax
.text$mn:00009497                 mov     ecx, [ebp+var_4]
.text$mn:0000949A                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000949F                 mov     eax, [ebp+var_4]
.text$mn:000094A2                 mov     esp, ebp
.text$mn:000094A4                 pop     ebp
.text$mn:000094A5                 retn    14h
.text$mn:000094A5 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z endp
.text$mn:000094A5
.text$mn:000094A5 _text$mn        ends
.text$mn:000094A5
.text$mn:000094A8 ; ===========================================================================
.text$mn:000094A8
.text$mn:000094A8 ; Segment type: Pure code
.text$mn:000094A8 ; Segment permissions: Read/Execute
.text$mn:000094A8 _text$mn        segment para public 'CODE' use32
.text$mn:000094A8                 assume cs:_text$mn
.text$mn:000094A8                 ;org 94A8h
.text$mn:000094A8 ; COMDAT (pick any)
.text$mn:000094A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000094A8
.text$mn:000094A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000094A8
.text$mn:000094A8 ; Attributes: bp-based frame
.text$mn:000094A8
.text$mn:000094A8 ; int __stdcall std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(int, int, void *Src, int)
.text$mn:000094A8                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z
.text$mn:000094A8 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z proc near
.text$mn:000094A8                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+201p
.text$mn:000094A8
.text$mn:000094A8 var_C           = dword ptr -0Ch
.text$mn:000094A8 var_8           = dword ptr -8
.text$mn:000094A8 var_4           = dword ptr -4
.text$mn:000094A8 arg_0           = dword ptr  8
.text$mn:000094A8 arg_4           = dword ptr  0Ch
.text$mn:000094A8 Src             = dword ptr  10h
.text$mn:000094A8 arg_C           = dword ptr  14h
.text$mn:000094A8
.text$mn:000094A8                 push    ebp
.text$mn:000094A9                 mov     ebp, esp
.text$mn:000094AB                 sub     esp, 0Ch
.text$mn:000094AE                 mov     [ebp+var_4], ecx
.text$mn:000094B1                 cmp     [ebp+arg_C], 0
.text$mn:000094B5                 jz      short loc_94CD
.text$mn:000094B7                 push    5A9h            ; unsigned int
.text$mn:000094BC                 push    offset ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@ ; "C:\\Program Files (x86)\\Microsoft Visu"...
.text$mn:000094C1                 mov     eax, [ebp+Src]
.text$mn:000094C4                 push    eax             ; int
.text$mn:000094C5                 call    ??$_Debug_pointer@_W@std@@YAXPB_W0I@Z ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)
.text$mn:000094CA                 add     esp, 0Ch
.text$mn:000094CD
.text$mn:000094CD loc_94CD:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+Dj
.text$mn:000094CD                 mov     ecx, [ebp+Src]
.text$mn:000094D0                 push    ecx
.text$mn:000094D1                 mov     ecx, [ebp+var_4]
.text$mn:000094D4                 call    ?_Inside@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NPB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Inside(wchar_t const *)
.text$mn:000094D9                 movzx   edx, al
.text$mn:000094DC                 test    edx, edx
.text$mn:000094DE                 jz      short loc_950D
.text$mn:000094E0                 mov     eax, [ebp+arg_C]
.text$mn:000094E3                 push    eax
.text$mn:000094E4                 mov     ecx, [ebp+var_4]
.text$mn:000094E7                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000094EC                 mov     ecx, [ebp+Src]
.text$mn:000094EF                 sub     ecx, eax
.text$mn:000094F1                 sar     ecx, 1
.text$mn:000094F3                 push    ecx
.text$mn:000094F4                 mov     edx, [ebp+var_4]
.text$mn:000094F7                 push    edx
.text$mn:000094F8                 mov     eax, [ebp+arg_4]
.text$mn:000094FB                 push    eax
.text$mn:000094FC                 mov     ecx, [ebp+arg_0]
.text$mn:000094FF                 push    ecx
.text$mn:00009500                 mov     ecx, [ebp+var_4]
.text$mn:00009503                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIABV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)
.text$mn:00009508                 jmp     loc_9642
.text$mn:0000950D ; ---------------------------------------------------------------------------
.text$mn:0000950D
.text$mn:0000950D loc_950D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+36j
.text$mn:0000950D                 mov     edx, [ebp+var_4]
.text$mn:00009510                 mov     eax, [edx+14h]
.text$mn:00009513                 cmp     eax, [ebp+arg_0]
.text$mn:00009516                 jnb     short loc_9520
.text$mn:00009518                 mov     ecx, [ebp+var_4]
.text$mn:0000951B                 call    ?_Xran@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)
.text$mn:00009520
.text$mn:00009520 loc_9520:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+6Ej
.text$mn:00009520                 mov     ecx, [ebp+var_4]
.text$mn:00009523                 mov     edx, [ecx+14h]
.text$mn:00009526                 sub     edx, [ebp+arg_0]
.text$mn:00009529                 cmp     edx, [ebp+arg_4]
.text$mn:0000952C                 jnb     short loc_953A
.text$mn:0000952E                 mov     eax, [ebp+var_4]
.text$mn:00009531                 mov     ecx, [eax+14h]
.text$mn:00009534                 sub     ecx, [ebp+arg_0]
.text$mn:00009537                 mov     [ebp+arg_4], ecx
.text$mn:0000953A
.text$mn:0000953A loc_953A:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+84j
.text$mn:0000953A                 or      edx, 0FFFFFFFFh
.text$mn:0000953D                 sub     edx, [ebp+arg_C]
.text$mn:00009540                 mov     eax, [ebp+var_4]
.text$mn:00009543                 mov     ecx, [eax+14h]
.text$mn:00009546                 sub     ecx, [ebp+arg_4]
.text$mn:00009549                 cmp     edx, ecx
.text$mn:0000954B                 ja      short loc_9555
.text$mn:0000954D                 mov     ecx, [ebp+var_4]
.text$mn:00009550                 call    ?_Xlen@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEXXZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)
.text$mn:00009555
.text$mn:00009555 loc_9555:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+A3j
.text$mn:00009555                 mov     edx, [ebp+var_4]
.text$mn:00009558                 mov     eax, [edx+14h]
.text$mn:0000955B                 sub     eax, [ebp+arg_4]
.text$mn:0000955E                 sub     eax, [ebp+arg_0]
.text$mn:00009561                 mov     [ebp+var_8], eax
.text$mn:00009564                 mov     ecx, [ebp+arg_C]
.text$mn:00009567                 cmp     ecx, [ebp+arg_4]
.text$mn:0000956A                 jnb     short loc_95A2
.text$mn:0000956C                 mov     edx, [ebp+var_8]
.text$mn:0000956F                 push    edx             ; int
.text$mn:00009570                 mov     ecx, [ebp+var_4]
.text$mn:00009573                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009578                 mov     ecx, [ebp+arg_0]
.text$mn:0000957B                 lea     edx, [eax+ecx*2]
.text$mn:0000957E                 mov     eax, [ebp+arg_4]
.text$mn:00009581                 lea     ecx, [edx+eax*2]
.text$mn:00009584                 push    ecx             ; Src
.text$mn:00009585                 mov     ecx, [ebp+var_4]
.text$mn:00009588                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:0000958D                 mov     edx, [ebp+arg_0]
.text$mn:00009590                 lea     eax, [eax+edx*2]
.text$mn:00009593                 mov     ecx, [ebp+arg_C]
.text$mn:00009596                 lea     edx, [eax+ecx*2]
.text$mn:00009599                 push    edx             ; Dst
.text$mn:0000959A                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:0000959F                 add     esp, 0Ch
.text$mn:000095A2
.text$mn:000095A2 loc_95A2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+C2j
.text$mn:000095A2                 cmp     [ebp+arg_C], 0
.text$mn:000095A6                 ja      short loc_95B2
.text$mn:000095A8                 cmp     [ebp+arg_4], 0
.text$mn:000095AC                 jbe     loc_963F
.text$mn:000095B2
.text$mn:000095B2 loc_95B2:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+FEj
.text$mn:000095B2                 mov     eax, [ebp+var_4]
.text$mn:000095B5                 mov     ecx, [eax+14h]
.text$mn:000095B8                 add     ecx, [ebp+arg_C]
.text$mn:000095BB                 sub     ecx, [ebp+arg_4]
.text$mn:000095BE                 mov     [ebp+var_C], ecx
.text$mn:000095C1                 push    0
.text$mn:000095C3                 mov     edx, [ebp+var_C]
.text$mn:000095C6                 push    edx
.text$mn:000095C7                 mov     ecx, [ebp+var_4]
.text$mn:000095CA                 call    ?_Grow@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE_NI_N@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Grow(uint,bool)
.text$mn:000095CF                 movzx   eax, al
.text$mn:000095D2                 test    eax, eax
.text$mn:000095D4                 jz      short loc_963F
.text$mn:000095D6                 mov     ecx, [ebp+arg_4]
.text$mn:000095D9                 cmp     ecx, [ebp+arg_C]
.text$mn:000095DC                 jnb     short loc_9614
.text$mn:000095DE                 mov     edx, [ebp+var_8]
.text$mn:000095E1                 push    edx             ; int
.text$mn:000095E2                 mov     ecx, [ebp+var_4]
.text$mn:000095E5                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000095EA                 mov     ecx, [ebp+arg_0]
.text$mn:000095ED                 lea     edx, [eax+ecx*2]
.text$mn:000095F0                 mov     eax, [ebp+arg_4]
.text$mn:000095F3                 lea     ecx, [edx+eax*2]
.text$mn:000095F6                 push    ecx             ; Src
.text$mn:000095F7                 mov     ecx, [ebp+var_4]
.text$mn:000095FA                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:000095FF                 mov     edx, [ebp+arg_0]
.text$mn:00009602                 lea     eax, [eax+edx*2]
.text$mn:00009605                 mov     ecx, [ebp+arg_C]
.text$mn:00009608                 lea     edx, [eax+ecx*2]
.text$mn:0000960B                 push    edx             ; Dst
.text$mn:0000960C                 call    ?move@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)
.text$mn:00009611                 add     esp, 0Ch
.text$mn:00009614
.text$mn:00009614 loc_9614:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+134j
.text$mn:00009614                 mov     eax, [ebp+arg_C]
.text$mn:00009617                 push    eax             ; int
.text$mn:00009618                 mov     ecx, [ebp+Src]
.text$mn:0000961B                 push    ecx             ; Src
.text$mn:0000961C                 mov     ecx, [ebp+var_4]
.text$mn:0000961F                 call    ?_Myptr@?$_String_val@U?$_Simple_types@_W@std@@@std@@QAEPA_WXZ ; std::_String_val<std::_Simple_types<wchar_t>>::_Myptr(void)
.text$mn:00009624                 mov     edx, [ebp+arg_0]
.text$mn:00009627                 lea     eax, [eax+edx*2]
.text$mn:0000962A                 push    eax             ; Dst
.text$mn:0000962B                 call    ?copy@?$char_traits@_W@std@@SAPA_WPA_WPB_WI@Z ; std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)
.text$mn:00009630                 add     esp, 0Ch
.text$mn:00009633                 mov     ecx, [ebp+var_C]
.text$mn:00009636                 push    ecx
.text$mn:00009637                 mov     ecx, [ebp+var_4]
.text$mn:0000963A                 call    ?_Eos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Eos(uint)
.text$mn:0000963F
.text$mn:0000963F loc_963F:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+104j
.text$mn:0000963F                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+12Cj
.text$mn:0000963F                 mov     eax, [ebp+var_4]
.text$mn:00009642
.text$mn:00009642 loc_9642:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)+60j
.text$mn:00009642                 mov     esp, ebp
.text$mn:00009644                 pop     ebp
.text$mn:00009645                 retn    10h
.text$mn:00009645 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z endp
.text$mn:00009645
.text$mn:00009645 _text$mn        ends
.text$mn:00009645
.text$mn:00009648 ; ===========================================================================
.text$mn:00009648
.text$mn:00009648 ; Segment type: Pure code
.text$mn:00009648 ; Segment permissions: Read/Execute
.text$mn:00009648 _text$mn        segment para public 'CODE' use32
.text$mn:00009648                 assume cs:_text$mn
.text$mn:00009648                 ;org 9648h
.text$mn:00009648 ; COMDAT (pick any)
.text$mn:00009648                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009648
.text$mn:00009648 ; =============== S U B R O U T I N E =======================================
.text$mn:00009648
.text$mn:00009648 ; Attributes: bp-based frame
.text$mn:00009648
.text$mn:00009648 ; public: class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> & __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::replace(class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_const_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>, class std::_String_iterator<class std::_String_val<struct std::_Simple_types<wchar_t>>>)
.text$mn:00009648                 public ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$mn:00009648 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z proc near
.text$mn:00009648                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign<std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>>(std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+E0p
.text$mn:00009648
.text$mn:00009648 var_AC          = byte ptr -0ACh
.text$mn:00009648 var_A0          = byte ptr -0A0h
.text$mn:00009648 var_94          = dword ptr -94h
.text$mn:00009648 var_90          = dword ptr -90h
.text$mn:00009648 var_8C          = dword ptr -8Ch
.text$mn:00009648 var_88          = dword ptr -88h
.text$mn:00009648 var_84          = dword ptr -84h
.text$mn:00009648 var_80          = dword ptr -80h
.text$mn:00009648 var_7C          = dword ptr -7Ch
.text$mn:00009648 var_78          = dword ptr -78h
.text$mn:00009648 var_74          = dword ptr -74h
.text$mn:00009648 var_70          = dword ptr -70h
.text$mn:00009648 var_6C          = dword ptr -6Ch
.text$mn:00009648 var_68          = dword ptr -68h
.text$mn:00009648 var_64          = dword ptr -64h
.text$mn:00009648 var_60          = dword ptr -60h
.text$mn:00009648 var_5C          = dword ptr -5Ch
.text$mn:00009648 var_58          = dword ptr -58h
.text$mn:00009648 var_54          = dword ptr -54h
.text$mn:00009648 var_50          = dword ptr -50h
.text$mn:00009648 var_4C          = dword ptr -4Ch
.text$mn:00009648 var_48          = dword ptr -48h
.text$mn:00009648 var_44          = dword ptr -44h
.text$mn:00009648 var_40          = dword ptr -40h
.text$mn:00009648 var_3C          = dword ptr -3Ch
.text$mn:00009648 var_38          = dword ptr -38h
.text$mn:00009648 var_34          = dword ptr -34h
.text$mn:00009648 var_30          = dword ptr -30h
.text$mn:00009648 var_2C          = dword ptr -2Ch
.text$mn:00009648 var_28          = dword ptr -28h
.text$mn:00009648 var_24          = dword ptr -24h
.text$mn:00009648 var_20          = dword ptr -20h
.text$mn:00009648 var_1C          = dword ptr -1Ch
.text$mn:00009648 var_18          = dword ptr -18h
.text$mn:00009648 var_14          = dword ptr -14h
.text$mn:00009648 var_10          = dword ptr -10h
.text$mn:00009648 var_C           = dword ptr -0Ch
.text$mn:00009648 var_4           = dword ptr -4
.text$mn:00009648 arg_0           = byte ptr  8
.text$mn:00009648 arg_C           = byte ptr  14h
.text$mn:00009648 arg_18          = byte ptr  20h
.text$mn:00009648 arg_24          = byte ptr  2Ch
.text$mn:00009648
.text$mn:00009648                 push    ebp
.text$mn:00009649                 mov     ebp, esp
.text$mn:0000964B                 push    0FFFFFFFFh
.text$mn:0000964D                 push    offset __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$mn:00009652                 mov     eax, large fs:0
.text$mn:00009658                 push    eax
.text$mn:00009659                 sub     esp, 0A0h
.text$mn:0000965F                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009664                 xor     eax, ebp
.text$mn:00009666                 push    eax
.text$mn:00009667                 lea     eax, [ebp+var_C]
.text$mn:0000966A                 mov     large fs:0, eax
.text$mn:00009670                 mov     [ebp+var_10], ecx
.text$mn:00009673                 mov     [ebp+var_4], 3
.text$mn:0000967A                 lea     eax, [ebp+arg_24]
.text$mn:0000967D                 push    eax             ; std::_Iterator_base12 *
.text$mn:0000967E                 lea     ecx, [ebp+arg_18]
.text$mn:00009681                 call    ??8?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBE_NABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator==(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00009686                 movzx   ecx, al
.text$mn:00009689                 test    ecx, ecx
.text$mn:0000968B                 jz      loc_976D
.text$mn:00009691                 sub     esp, 0Ch
.text$mn:00009694                 mov     ecx, esp
.text$mn:00009696                 mov     [ebp+var_58], esp
.text$mn:00009699                 lea     edx, [ebp+arg_0]
.text$mn:0000969C                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000969D                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000096A2                 mov     [ebp+var_54], eax
.text$mn:000096A5                 mov     eax, [ebp+var_54]
.text$mn:000096A8                 mov     [ebp+var_60], eax
.text$mn:000096AB                 mov     byte ptr [ebp+var_4], 4
.text$mn:000096AF                 sub     esp, 0Ch
.text$mn:000096B2                 mov     ecx, esp
.text$mn:000096B4                 mov     [ebp+var_80], esp
.text$mn:000096B7                 lea     edx, [ebp+arg_C]
.text$mn:000096BA                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:000096BB                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000096C0                 mov     [ebp+var_38], eax
.text$mn:000096C3                 mov     eax, [ebp+var_38]
.text$mn:000096C6                 mov     [ebp+var_68], eax
.text$mn:000096C9                 mov     byte ptr [ebp+var_4], 5
.text$mn:000096CD                 mov     byte ptr [ebp+var_4], 3
.text$mn:000096D1                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:000096D6                 add     esp, 18h
.text$mn:000096D9                 mov     [ebp+var_20], eax
.text$mn:000096DC                 mov     ecx, [ebp+var_20]
.text$mn:000096DF                 push    ecx
.text$mn:000096E0                 lea     edx, [ebp+var_A0]
.text$mn:000096E6                 push    edx
.text$mn:000096E7                 mov     ecx, [ebp+var_10]
.text$mn:000096EA                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:000096EF                 mov     [ebp+var_48], eax
.text$mn:000096F2                 mov     eax, [ebp+var_48]
.text$mn:000096F5                 mov     [ebp+var_28], eax
.text$mn:000096F8                 mov     byte ptr [ebp+var_4], 6
.text$mn:000096FC                 sub     esp, 0Ch
.text$mn:000096FF                 mov     ecx, esp
.text$mn:00009701                 mov     [ebp+var_90], esp
.text$mn:00009707                 mov     edx, [ebp+var_28]
.text$mn:0000970A                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000970B                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00009710                 mov     [ebp+var_40], eax
.text$mn:00009713                 mov     eax, [ebp+var_40]
.text$mn:00009716                 mov     [ebp+var_70], eax
.text$mn:00009719                 mov     byte ptr [ebp+var_4], 7
.text$mn:0000971D                 sub     esp, 0Ch
.text$mn:00009720                 mov     ecx, esp
.text$mn:00009722                 mov     [ebp+var_88], esp
.text$mn:00009728                 lea     edx, [ebp+arg_0]
.text$mn:0000972B                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000972C                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00009731                 mov     [ebp+var_30], eax
.text$mn:00009734                 mov     eax, [ebp+var_30]
.text$mn:00009737                 mov     [ebp+var_78], eax
.text$mn:0000973A                 mov     byte ptr [ebp+var_4], 8
.text$mn:0000973E                 mov     byte ptr [ebp+var_4], 6
.text$mn:00009742                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:00009747                 add     esp, 18h
.text$mn:0000974A                 mov     [ebp+var_50], eax
.text$mn:0000974D                 mov     ecx, [ebp+var_50]
.text$mn:00009750                 push    ecx
.text$mn:00009751                 mov     ecx, [ebp+var_10]
.text$mn:00009754                 call    ?erase@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@II@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::erase(uint,uint)
.text$mn:00009759                 mov     byte ptr [ebp+var_4], 3
.text$mn:0000975D                 lea     ecx, [ebp+var_A0]
.text$mn:00009763                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00009768                 jmp     loc_985D
.text$mn:0000976D ; ---------------------------------------------------------------------------
.text$mn:0000976D
.text$mn:0000976D loc_976D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+43j
.text$mn:0000976D                 lea     edx, [ebp+arg_18]
.text$mn:00009770                 push    edx             ; std::_Iterator_base12 *
.text$mn:00009771                 lea     ecx, [ebp+arg_24]
.text$mn:00009774                 call    ??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator-(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00009779                 push    eax             ; int
.text$mn:0000977A                 lea     ecx, [ebp+arg_18]
.text$mn:0000977D                 call    ??D?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEAA_WXZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)
.text$mn:00009782                 push    eax             ; Src
.text$mn:00009783                 sub     esp, 0Ch
.text$mn:00009786                 mov     ecx, esp
.text$mn:00009788                 mov     [ebp+var_94], esp
.text$mn:0000978E                 lea     eax, [ebp+arg_0]
.text$mn:00009791                 push    eax             ; struct std::_Iterator_base12 *
.text$mn:00009792                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00009797                 mov     [ebp+var_18], eax
.text$mn:0000979A                 mov     ecx, [ebp+var_18]
.text$mn:0000979D                 mov     [ebp+var_5C], ecx
.text$mn:000097A0                 mov     byte ptr [ebp+var_4], 9
.text$mn:000097A4                 sub     esp, 0Ch
.text$mn:000097A7                 mov     ecx, esp
.text$mn:000097A9                 mov     [ebp+var_64], esp
.text$mn:000097AC                 lea     edx, [ebp+arg_C]
.text$mn:000097AF                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:000097B0                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:000097B5                 mov     [ebp+var_1C], eax
.text$mn:000097B8                 mov     eax, [ebp+var_1C]
.text$mn:000097BB                 mov     [ebp+var_6C], eax
.text$mn:000097BE                 mov     byte ptr [ebp+var_4], 0Ah
.text$mn:000097C2                 mov     byte ptr [ebp+var_4], 3
.text$mn:000097C6                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:000097CB                 add     esp, 18h
.text$mn:000097CE                 mov     [ebp+var_24], eax
.text$mn:000097D1                 mov     ecx, [ebp+var_24]
.text$mn:000097D4                 push    ecx             ; int
.text$mn:000097D5                 lea     edx, [ebp+var_AC]
.text$mn:000097DB                 push    edx
.text$mn:000097DC                 mov     ecx, [ebp+var_10]
.text$mn:000097DF                 call    ?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::begin(void)
.text$mn:000097E4                 mov     [ebp+var_2C], eax
.text$mn:000097E7                 mov     eax, [ebp+var_2C]
.text$mn:000097EA                 mov     [ebp+var_34], eax
.text$mn:000097ED                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:000097F1                 sub     esp, 0Ch
.text$mn:000097F4                 mov     ecx, esp
.text$mn:000097F6                 mov     [ebp+var_74], esp
.text$mn:000097F9                 mov     edx, [ebp+var_34]
.text$mn:000097FC                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:000097FD                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00009802                 mov     [ebp+var_3C], eax
.text$mn:00009805                 mov     eax, [ebp+var_3C]
.text$mn:00009808                 mov     [ebp+var_7C], eax
.text$mn:0000980B                 mov     byte ptr [ebp+var_4], 0Ch
.text$mn:0000980F                 sub     esp, 0Ch
.text$mn:00009812                 mov     ecx, esp
.text$mn:00009814                 mov     [ebp+var_84], esp
.text$mn:0000981A                 lea     edx, [ebp+arg_0]
.text$mn:0000981D                 push    edx             ; struct std::_Iterator_base12 *
.text$mn:0000981E                 call    ??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)
.text$mn:00009823                 mov     [ebp+var_44], eax
.text$mn:00009826                 mov     eax, [ebp+var_44]
.text$mn:00009829                 mov     [ebp+var_8C], eax
.text$mn:0000982F                 mov     byte ptr [ebp+var_4], 0Dh
.text$mn:00009833                 mov     byte ptr [ebp+var_4], 0Bh
.text$mn:00009837                 call    ?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Pdif(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)
.text$mn:0000983C                 add     esp, 18h
.text$mn:0000983F                 mov     [ebp+var_4C], eax
.text$mn:00009842                 mov     ecx, [ebp+var_4C]
.text$mn:00009845                 push    ecx             ; int
.text$mn:00009846                 mov     ecx, [ebp+var_10]
.text$mn:00009849                 call    ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@IIPB_WI@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(uint,uint,wchar_t const *,uint)
.text$mn:0000984E                 mov     byte ptr [ebp+var_4], 3
.text$mn:00009852                 lea     ecx, [ebp+var_AC]
.text$mn:00009858                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000985D
.text$mn:0000985D loc_985D:                               ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+120j
.text$mn:0000985D                 mov     edx, [ebp+var_10]
.text$mn:00009860                 mov     [ebp+var_14], edx
.text$mn:00009863                 mov     byte ptr [ebp+var_4], 2
.text$mn:00009867                 lea     ecx, [ebp+arg_0]
.text$mn:0000986A                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000986F                 mov     byte ptr [ebp+var_4], 1
.text$mn:00009873                 lea     ecx, [ebp+arg_C]
.text$mn:00009876                 call    ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:0000987B                 mov     byte ptr [ebp+var_4], 0
.text$mn:0000987F                 lea     ecx, [ebp+arg_18]
.text$mn:00009882                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00009887                 mov     [ebp+var_4], 0FFFFFFFFh
.text$mn:0000988E                 lea     ecx, [ebp+arg_24]
.text$mn:00009891                 call    ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$mn:00009896                 mov     eax, [ebp+var_14]
.text$mn:00009899                 mov     ecx, [ebp+var_C]
.text$mn:0000989C                 mov     large fs:0, ecx
.text$mn:000098A3                 pop     ecx
.text$mn:000098A4                 mov     esp, ebp
.text$mn:000098A6                 pop     ebp
.text$mn:000098A7                 retn    30h
.text$mn:000098A7 ?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z endp
.text$mn:000098A7
.text$mn:000098A7 ; ---------------------------------------------------------------------------
.text$mn:000098AA                 align 4
.text$mn:000098AA _text$mn        ends
.text$mn:000098AA
.text$x:000098AC ; ===========================================================================
.text$x:000098AC
.text$x:000098AC ; Segment type: Pure code
.text$x:000098AC ; Segment permissions: Read/Execute
.text$x:000098AC _text$x         segment para public 'CODE' use32
.text$x:000098AC                 assume cs:_text$x
.text$x:000098AC                 ;org 98ACh
.text$x:000098AC ; COMDAT (pick associative to section at 9648)
.text$x:000098AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:000098AC
.text$x:000098AC ; =============== S U B R O U T I N E =======================================
.text$x:000098AC
.text$x:000098AC
.text$x:000098AC __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 proc near
.text$x:000098AC                                         ; DATA XREF: .xdata$x:0000A128o
.text$x:000098AC                 lea     ecx, [ebp+2Ch]
.text$x:000098AF                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000098AF __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0 endp
.text$x:000098AF
.text$x:000098B4
.text$x:000098B4 ; =============== S U B R O U T I N E =======================================
.text$x:000098B4
.text$x:000098B4
.text$x:000098B4 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 proc near
.text$x:000098B4                                         ; DATA XREF: .xdata$x:0000A130o
.text$x:000098B4                 lea     ecx, [ebp+20h]
.text$x:000098B7                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000098B7 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1 endp
.text$x:000098B7
.text$x:000098BC
.text$x:000098BC ; =============== S U B R O U T I N E =======================================
.text$x:000098BC
.text$x:000098BC
.text$x:000098BC __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 proc near
.text$x:000098BC                                         ; DATA XREF: .xdata$x:0000A138o
.text$x:000098BC                 lea     ecx, [ebp+14h]
.text$x:000098BF                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000098BF __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2 endp
.text$x:000098BF
.text$x:000098C4
.text$x:000098C4 ; =============== S U B R O U T I N E =======================================
.text$x:000098C4
.text$x:000098C4
.text$x:000098C4 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 proc near
.text$x:000098C4                                         ; DATA XREF: .xdata$x:0000A140o
.text$x:000098C4                 lea     ecx, [ebp+8]
.text$x:000098C7                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000098C7 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3 endp
.text$x:000098C7
.text$x:000098CC
.text$x:000098CC ; =============== S U B R O U T I N E =======================================
.text$x:000098CC
.text$x:000098CC
.text$x:000098CC __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 proc near
.text$x:000098CC                                         ; DATA XREF: .xdata$x:0000A148o
.text$x:000098CC                 mov     ecx, [ebp-58h]
.text$x:000098CF                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000098CF __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4 endp
.text$x:000098CF
.text$x:000098D4
.text$x:000098D4 ; =============== S U B R O U T I N E =======================================
.text$x:000098D4
.text$x:000098D4
.text$x:000098D4 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 proc near
.text$x:000098D4                                         ; DATA XREF: .xdata$x:0000A150o
.text$x:000098D4                 mov     ecx, [ebp-80h]
.text$x:000098D7                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000098D7 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5 endp
.text$x:000098D7
.text$x:000098DC
.text$x:000098DC ; =============== S U B R O U T I N E =======================================
.text$x:000098DC
.text$x:000098DC
.text$x:000098DC __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 proc near
.text$x:000098DC                                         ; DATA XREF: .xdata$x:0000A158o
.text$x:000098DC                 lea     ecx, [ebp-0A0h]
.text$x:000098E2                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000098E2 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6 endp
.text$x:000098E2
.text$x:000098E7
.text$x:000098E7 ; =============== S U B R O U T I N E =======================================
.text$x:000098E7
.text$x:000098E7
.text$x:000098E7 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 proc near
.text$x:000098E7                                         ; DATA XREF: .xdata$x:0000A160o
.text$x:000098E7                 mov     ecx, [ebp-90h]
.text$x:000098ED                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000098ED __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7 endp
.text$x:000098ED
.text$x:000098F2
.text$x:000098F2 ; =============== S U B R O U T I N E =======================================
.text$x:000098F2
.text$x:000098F2
.text$x:000098F2 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 proc near
.text$x:000098F2                                         ; DATA XREF: .xdata$x:0000A168o
.text$x:000098F2                 mov     ecx, [ebp-88h]
.text$x:000098F8                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:000098F8 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8 endp
.text$x:000098F8
.text$x:000098FD
.text$x:000098FD ; =============== S U B R O U T I N E =======================================
.text$x:000098FD
.text$x:000098FD
.text$x:000098FD __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 proc near
.text$x:000098FD                                         ; DATA XREF: .xdata$x:0000A170o
.text$x:000098FD                 mov     ecx, [ebp-94h]
.text$x:00009903                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00009903 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9 endp
.text$x:00009903
.text$x:00009908
.text$x:00009908 ; =============== S U B R O U T I N E =======================================
.text$x:00009908
.text$x:00009908
.text$x:00009908 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 proc near
.text$x:00009908                                         ; DATA XREF: .xdata$x:0000A178o
.text$x:00009908                 mov     ecx, [ebp-64h]
.text$x:0000990B                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000990B __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10 endp
.text$x:0000990B
.text$x:00009910
.text$x:00009910 ; =============== S U B R O U T I N E =======================================
.text$x:00009910
.text$x:00009910
.text$x:00009910 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 proc near
.text$x:00009910                                         ; DATA XREF: .xdata$x:0000A180o
.text$x:00009910                 lea     ecx, [ebp-0ACh]
.text$x:00009916                 jmp     ??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00009916 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11 endp
.text$x:00009916
.text$x:0000991B
.text$x:0000991B ; =============== S U B R O U T I N E =======================================
.text$x:0000991B
.text$x:0000991B
.text$x:0000991B __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 proc near
.text$x:0000991B                                         ; DATA XREF: .xdata$x:0000A188o
.text$x:0000991B                 mov     ecx, [ebp-74h]
.text$x:0000991E                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:0000991E __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12 endp
.text$x:0000991E
.text$x:00009923
.text$x:00009923 ; =============== S U B R O U T I N E =======================================
.text$x:00009923
.text$x:00009923
.text$x:00009923 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 proc near
.text$x:00009923                                         ; DATA XREF: .xdata$x:0000A190o
.text$x:00009923                 mov     ecx, [ebp-84h]
.text$x:00009929                 jmp     ??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::~_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>(void)
.text$x:00009929 __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13 endp
.text$x:00009929
.text$x:0000992E
.text$x:0000992E ; =============== S U B R O U T I N E =======================================
.text$x:0000992E
.text$x:0000992E
.text$x:0000992E __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z proc near
.text$x:0000992E                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::replace(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>,std::_String_iterator<std::_String_val<std::_Simple_types<wchar_t>>>)+5o
.text$x:0000992E
.text$x:0000992E arg_4           = dword ptr  8
.text$x:0000992E
.text$x:0000992E                 mov     edx, [esp+arg_4]
.text$x:00009932                 lea     eax, [edx+0Ch]
.text$x:00009935                 mov     ecx, [edx-0A4h]
.text$x:0000993B                 xor     ecx, eax
.text$x:0000993D                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009942                 mov     eax, offset __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.text$x:00009947                 jmp     ___CxxFrameHandler3
.text$x:00009947 __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z endp
.text$x:00009947
.text$x:00009947 _text$x         ends
.text$x:00009947
.text$mn:0000994C ; ===========================================================================
.text$mn:0000994C
.text$mn:0000994C ; Segment type: Pure code
.text$mn:0000994C ; Segment permissions: Read/Execute
.text$mn:0000994C _text$mn        segment para public 'CODE' use32
.text$mn:0000994C                 assume cs:_text$mn
.text$mn:0000994C                 ;org 994Ch
.text$mn:0000994C ; COMDAT (pick any)
.text$mn:0000994C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:0000994C
.text$mn:0000994C ; =============== S U B R O U T I N E =======================================
.text$mn:0000994C
.text$mn:0000994C ; Attributes: bp-based frame
.text$mn:0000994C
.text$mn:0000994C ; public: struct std::_Wrap_alloc<class std::allocator<wchar_t>> __thiscall std::_Wrap_alloc<class std::allocator<wchar_t>>::select_on_container_copy_construction(void)const
.text$mn:0000994C                 public ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ
.text$mn:0000994C ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ proc near
.text$mn:0000994C                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+3Ap
.text$mn:0000994C
.text$mn:0000994C var_8           = dword ptr -8
.text$mn:0000994C var_1           = byte ptr -1
.text$mn:0000994C arg_0           = dword ptr  8
.text$mn:0000994C
.text$mn:0000994C                 push    ebp
.text$mn:0000994D                 mov     ebp, esp
.text$mn:0000994F                 sub     esp, 8
.text$mn:00009952                 mov     [ebp+var_8], ecx
.text$mn:00009955                 mov     eax, [ebp+var_8]
.text$mn:00009958                 push    eax
.text$mn:00009959                 lea     ecx, [ebp+var_1]
.text$mn:0000995C                 push    ecx
.text$mn:0000995D                 call    ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z ; std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)
.text$mn:00009962                 add     esp, 8
.text$mn:00009965                 push    eax
.text$mn:00009966                 mov     ecx, [ebp+arg_0]
.text$mn:00009969                 call    ??0?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QAE@ABV?$allocator@_W@1@@Z ; std::_Wrap_alloc<std::allocator<wchar_t>>::_Wrap_alloc<std::allocator<wchar_t>>(std::allocator<wchar_t> const &)
.text$mn:0000996E                 mov     eax, [ebp+arg_0]
.text$mn:00009971                 mov     esp, ebp
.text$mn:00009973                 pop     ebp
.text$mn:00009974                 retn    4
.text$mn:00009974 ?select_on_container_copy_construction@?$_Wrap_alloc@V?$allocator@_W@std@@@std@@QBE?AU12@XZ endp
.text$mn:00009974
.text$mn:00009974 ; ---------------------------------------------------------------------------
.text$mn:00009977                 align 4
.text$mn:00009977 _text$mn        ends
.text$mn:00009977
.text$mn:00009978 ; ===========================================================================
.text$mn:00009978
.text$mn:00009978 ; Segment type: Pure code
.text$mn:00009978 ; Segment permissions: Read/Execute
.text$mn:00009978 _text$mn        segment para public 'CODE' use32
.text$mn:00009978                 assume cs:_text$mn
.text$mn:00009978                 ;org 9978h
.text$mn:00009978 ; COMDAT (pick any)
.text$mn:00009978                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009978
.text$mn:00009978 ; =============== S U B R O U T I N E =======================================
.text$mn:00009978
.text$mn:00009978 ; Attributes: bp-based frame
.text$mn:00009978
.text$mn:00009978 ; public: class std::allocator<wchar_t> __thiscall std::allocator<wchar_t>::select_on_container_copy_construction(void)const
.text$mn:00009978                 public ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ
.text$mn:00009978 ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ proc near
.text$mn:00009978                                         ; CODE XREF: std::allocator_traits<std::allocator<wchar_t>>::select_on_container_copy_construction(std::allocator<wchar_t> const &)+Ap
.text$mn:00009978
.text$mn:00009978 var_4           = dword ptr -4
.text$mn:00009978 arg_0           = dword ptr  8
.text$mn:00009978
.text$mn:00009978                 push    ebp
.text$mn:00009979                 mov     ebp, esp
.text$mn:0000997B                 push    ecx
.text$mn:0000997C                 mov     [ebp+var_4], ecx
.text$mn:0000997F                 mov     eax, [ebp+var_4]
.text$mn:00009982                 push    eax
.text$mn:00009983                 mov     ecx, [ebp+arg_0]
.text$mn:00009986                 call    ??0?$allocator@_W@std@@QAE@ABV01@@Z ; std::allocator<wchar_t>::allocator<wchar_t>(std::allocator<wchar_t> const &)
.text$mn:0000998B                 mov     eax, [ebp+arg_0]
.text$mn:0000998E                 mov     esp, ebp
.text$mn:00009990                 pop     ebp
.text$mn:00009991                 retn    4
.text$mn:00009991 ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ endp
.text$mn:00009991
.text$mn:00009991 _text$mn        ends
.text$mn:00009991
.text$mn:00009994 ; ===========================================================================
.text$mn:00009994
.text$mn:00009994 ; Segment type: Pure code
.text$mn:00009994 ; Segment permissions: Read/Execute
.text$mn:00009994 _text$mn        segment para public 'CODE' use32
.text$mn:00009994                 assume cs:_text$mn
.text$mn:00009994                 ;org 9994h
.text$mn:00009994 ; COMDAT (pick any)
.text$mn:00009994                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009994
.text$mn:00009994 ; =============== S U B R O U T I N E =======================================
.text$mn:00009994
.text$mn:00009994 ; Attributes: bp-based frame
.text$mn:00009994
.text$mn:00009994 ; public: static class std::allocator<wchar_t> __cdecl std::allocator_traits<class std::allocator<wchar_t>>::select_on_container_copy_construction(class std::allocator<wchar_t> const &)
.text$mn:00009994                 public ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z
.text$mn:00009994 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z proc near
.text$mn:00009994                                         ; CODE XREF: std::_Wrap_alloc<std::allocator<wchar_t>>::select_on_container_copy_construction(void)+11p
.text$mn:00009994
.text$mn:00009994 arg_0           = dword ptr  8
.text$mn:00009994 arg_4           = dword ptr  0Ch
.text$mn:00009994
.text$mn:00009994                 push    ebp
.text$mn:00009995                 mov     ebp, esp
.text$mn:00009997                 mov     eax, [ebp+arg_0]
.text$mn:0000999A                 push    eax
.text$mn:0000999B                 mov     ecx, [ebp+arg_4]
.text$mn:0000999E                 call    ?select_on_container_copy_construction@?$allocator@_W@std@@QBE?AV12@XZ ; std::allocator<wchar_t>::select_on_container_copy_construction(void)
.text$mn:000099A3                 mov     eax, [ebp+arg_0]
.text$mn:000099A6                 pop     ebp
.text$mn:000099A7                 retn
.text$mn:000099A7 ?select_on_container_copy_construction@?$allocator_traits@V?$allocator@_W@std@@@std@@SA?AV?$allocator@_W@2@ABV32@@Z endp
.text$mn:000099A7
.text$mn:000099A7 _text$mn        ends
.text$mn:000099A7
.text$mn:000099A8 ; ===========================================================================
.text$mn:000099A8
.text$mn:000099A8 ; Segment type: Pure code
.text$mn:000099A8 ; Segment permissions: Read/Execute
.text$mn:000099A8 _text$mn        segment para public 'CODE' use32
.text$mn:000099A8                 assume cs:_text$mn
.text$mn:000099A8                 ;org 99A8h
.text$mn:000099A8 ; COMDAT (pick any)
.text$mn:000099A8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000099A8
.text$mn:000099A8 ; =============== S U B R O U T I N E =======================================
.text$mn:000099A8
.text$mn:000099A8 ; Attributes: bp-based frame
.text$mn:000099A8
.text$mn:000099A8 ; void __thiscall UserDefineDialog::setTabName(UserDefineDialog *this, int, const wchar_t *)
.text$mn:000099A8                 public ?setTabName@UserDefineDialog@@QAEXHPB_W@Z
.text$mn:000099A8 ?setTabName@UserDefineDialog@@QAEXHPB_W@Z proc near
.text$mn:000099A8                                         ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+412p
.text$mn:000099A8
.text$mn:000099A8 var_4           = dword ptr -4
.text$mn:000099A8 arg_0           = dword ptr  8
.text$mn:000099A8 arg_4           = dword ptr  0Ch
.text$mn:000099A8
.text$mn:000099A8                 push    ebp
.text$mn:000099A9                 mov     ebp, esp
.text$mn:000099AB                 push    ecx
.text$mn:000099AC                 mov     [ebp+var_4], ecx
.text$mn:000099AF                 mov     eax, [ebp+arg_4]
.text$mn:000099B2                 push    eax             ; wchar_t *
.text$mn:000099B3                 mov     ecx, [ebp+arg_0]
.text$mn:000099B6                 push    ecx             ; int
.text$mn:000099B7                 mov     ecx, [ebp+var_4]
.text$mn:000099BA                 add     ecx, 20h ; ' '  ; this
.text$mn:000099BD                 call    ?renameTab@ControlsTab@@QAEXHPB_W@Z ; ControlsTab::renameTab(int,wchar_t const *)
.text$mn:000099C2                 mov     esp, ebp
.text$mn:000099C4                 pop     ebp
.text$mn:000099C5                 retn    8
.text$mn:000099C5 ?setTabName@UserDefineDialog@@QAEXHPB_W@Z endp
.text$mn:000099C5
.text$mn:000099C5 _text$mn        ends
.text$mn:000099C5
.text$mn:000099C8 ; ===========================================================================
.text$mn:000099C8
.text$mn:000099C8 ; Segment type: Pure code
.text$mn:000099C8 ; Segment permissions: Read/Execute
.text$mn:000099C8 _text$mn        segment para public 'CODE' use32
.text$mn:000099C8                 assume cs:_text$mn
.text$mn:000099C8                 ;org 99C8h
.text$mn:000099C8 ; COMDAT (pick any)
.text$mn:000099C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000099C8
.text$mn:000099C8 ; =============== S U B R O U T I N E =======================================
.text$mn:000099C8
.text$mn:000099C8 ; Attributes: bp-based frame
.text$mn:000099C8
.text$mn:000099C8 ; public: unsigned int __thiscall std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>::size(void)const
.text$mn:000099C8                 public ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ
.text$mn:000099C8 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ proc near
.text$mn:000099C8                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+Cp
.text$mn:000099C8                                         ; std::basic_string<char,std::char_traits<char>,std::allocator<char>>::assign(std::basic_string<char,std::char_traits<char>,std::allocator<char>> const &,uint,uint)+21p
.text$mn:000099C8
.text$mn:000099C8 var_4           = dword ptr -4
.text$mn:000099C8
.text$mn:000099C8                 push    ebp
.text$mn:000099C9                 mov     ebp, esp
.text$mn:000099CB                 push    ecx
.text$mn:000099CC                 mov     [ebp+var_4], ecx
.text$mn:000099CF                 mov     eax, [ebp+var_4]
.text$mn:000099D2                 mov     eax, [eax+14h]
.text$mn:000099D5                 mov     esp, ebp
.text$mn:000099D7                 pop     ebp
.text$mn:000099D8                 retn
.text$mn:000099D8 ?size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QBEIXZ endp
.text$mn:000099D8
.text$mn:000099D8 ; ---------------------------------------------------------------------------
.text$mn:000099D9                 align 4
.text$mn:000099D9 _text$mn        ends
.text$mn:000099D9
.text$mn:000099DC ; ===========================================================================
.text$mn:000099DC
.text$mn:000099DC ; Segment type: Pure code
.text$mn:000099DC ; Segment permissions: Read/Execute
.text$mn:000099DC _text$mn        segment para public 'CODE' use32
.text$mn:000099DC                 assume cs:_text$mn
.text$mn:000099DC                 ;org 99DCh
.text$mn:000099DC ; COMDAT (pick any)
.text$mn:000099DC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000099DC
.text$mn:000099DC ; =============== S U B R O U T I N E =======================================
.text$mn:000099DC
.text$mn:000099DC ; Attributes: bp-based frame
.text$mn:000099DC
.text$mn:000099DC ; public: unsigned int __thiscall std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::size(void)const
.text$mn:000099DC                 public ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ
.text$mn:000099DC ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ proc near
.text$mn:000099DC                                         ; CODE XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+Cp
.text$mn:000099DC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &,uint,uint)+21p ...
.text$mn:000099DC
.text$mn:000099DC var_4           = dword ptr -4
.text$mn:000099DC
.text$mn:000099DC                 push    ebp
.text$mn:000099DD                 mov     ebp, esp
.text$mn:000099DF                 push    ecx
.text$mn:000099E0                 mov     [ebp+var_4], ecx
.text$mn:000099E3                 mov     eax, [ebp+var_4]
.text$mn:000099E6                 mov     eax, [eax+14h]
.text$mn:000099E9                 mov     esp, ebp
.text$mn:000099EB                 pop     ebp
.text$mn:000099EC                 retn
.text$mn:000099EC ?size@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QBEIXZ endp
.text$mn:000099EC
.text$mn:000099EC ; ---------------------------------------------------------------------------
.text$mn:000099ED                 align 10h
.text$mn:000099ED _text$mn        ends
.text$mn:000099ED
.text$mn:000099F0 ; ===========================================================================
.text$mn:000099F0
.text$mn:000099F0 ; Segment type: Pure code
.text$mn:000099F0 ; Segment permissions: Read/Execute
.text$mn:000099F0 _text$mn        segment para public 'CODE' use32
.text$mn:000099F0                 assume cs:_text$mn
.text$mn:000099F0                 ;org 99F0h
.text$mn:000099F0 ; COMDAT (pick any)
.text$mn:000099F0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:000099F0
.text$mn:000099F0 ; =============== S U B R O U T I N E =======================================
.text$mn:000099F0
.text$mn:000099F0 ; Attributes: bp-based frame
.text$mn:000099F0
.text$mn:000099F0 ; public: unsigned int __thiscall std::vector<class CommandShortcut, class std::allocator<class CommandShortcut>>::size(void)const
.text$mn:000099F0                 public ?size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ
.text$mn:000099F0 ?size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ proc near
.text$mn:000099F0                                         ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+37p
.text$mn:000099F0                                         ; std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)+Ap
.text$mn:000099F0
.text$mn:000099F0 var_4           = dword ptr -4
.text$mn:000099F0
.text$mn:000099F0                 push    ebp
.text$mn:000099F1                 mov     ebp, esp
.text$mn:000099F3                 push    ecx
.text$mn:000099F4                 mov     [ebp+var_4], ecx
.text$mn:000099F7                 mov     eax, [ebp+var_4]
.text$mn:000099FA                 mov     ecx, [ebp+var_4]
.text$mn:000099FD                 mov     eax, [eax+8]
.text$mn:00009A00                 sub     eax, [ecx+4]
.text$mn:00009A03                 cdq
.text$mn:00009A04                 mov     ecx, 12Ch
.text$mn:00009A09                 idiv    ecx
.text$mn:00009A0B                 mov     esp, ebp
.text$mn:00009A0D                 pop     ebp
.text$mn:00009A0E                 retn
.text$mn:00009A0E ?size@?$vector@VCommandShortcut@@V?$allocator@VCommandShortcut@@@std@@@std@@QBEIXZ endp
.text$mn:00009A0E
.text$mn:00009A0E ; ---------------------------------------------------------------------------
.text$mn:00009A0F                 align 10h
.text$mn:00009A0F _text$mn        ends
.text$mn:00009A0F
.text$mn:00009A10 ; ===========================================================================
.text$mn:00009A10
.text$mn:00009A10 ; Segment type: Pure code
.text$mn:00009A10 ; Segment permissions: Read/Execute
.text$mn:00009A10 _text$mn        segment para public 'CODE' use32
.text$mn:00009A10                 assume cs:_text$mn
.text$mn:00009A10                 ;org 9A10h
.text$mn:00009A10 ; COMDAT (pick any)
.text$mn:00009A10                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009A10
.text$mn:00009A10 ; =============== S U B R O U T I N E =======================================
.text$mn:00009A10
.text$mn:00009A10 ; Attributes: bp-based frame
.text$mn:00009A10
.text$mn:00009A10 ; public: unsigned int __thiscall std::vector<class ScintillaKeyMap, class std::allocator<class ScintillaKeyMap>>::size(void)const
.text$mn:00009A10                 public ?size@?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QBEIXZ
.text$mn:00009A10 ?size@?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QBEIXZ proc near
.text$mn:00009A10                                         ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+42p
.text$mn:00009A10                                         ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::operator[](uint)+Ap
.text$mn:00009A10
.text$mn:00009A10 var_4           = dword ptr -4
.text$mn:00009A10
.text$mn:00009A10                 push    ebp
.text$mn:00009A11                 mov     ebp, esp
.text$mn:00009A13                 push    ecx
.text$mn:00009A14                 mov     [ebp+var_4], ecx
.text$mn:00009A17                 mov     eax, [ebp+var_4]
.text$mn:00009A1A                 mov     ecx, [ebp+var_4]
.text$mn:00009A1D                 mov     eax, [eax+8]
.text$mn:00009A20                 sub     eax, [ecx+4]
.text$mn:00009A23                 cdq
.text$mn:00009A24                 mov     ecx, 144h
.text$mn:00009A29                 idiv    ecx
.text$mn:00009A2B                 mov     esp, ebp
.text$mn:00009A2D                 pop     ebp
.text$mn:00009A2E                 retn
.text$mn:00009A2E ?size@?$vector@VScintillaKeyMap@@V?$allocator@VScintillaKeyMap@@@std@@@std@@QBEIXZ endp
.text$mn:00009A2E
.text$mn:00009A2E ; ---------------------------------------------------------------------------
.text$mn:00009A2F                 align 10h
.text$mn:00009A2F _text$mn        ends
.text$mn:00009A2F
.text$mn:00009A30 ; ===========================================================================
.text$mn:00009A30
.text$mn:00009A30 ; Segment type: Pure code
.text$mn:00009A30 ; Segment permissions: Read/Execute
.text$mn:00009A30 _text$mn        segment para public 'CODE' use32
.text$mn:00009A30                 assume cs:_text$mn
.text$mn:00009A30                 ;org 9A30h
.text$mn:00009A30 ; COMDAT (pick any)
.text$mn:00009A30                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009A30
.text$mn:00009A30 ; =============== S U B R O U T I N E =======================================
.text$mn:00009A30
.text$mn:00009A30 ; Attributes: bp-based frame
.text$mn:00009A30
.text$mn:00009A30 ; const struct std::error_category *__cdecl std::system_category()
.text$mn:00009A30                 public ?system_category@std@@YAABVerror_category@1@XZ
.text$mn:00009A30 ?system_category@std@@YAABVerror_category@1@XZ proc near
.text$mn:00009A30                                         ; CODE XREF: std::_System_error_category::default_error_condition(int):loc_897Cp
.text$mn:00009A30                 push    ebp
.text$mn:00009A31                 mov     ebp, esp
.text$mn:00009A33                 mov     eax, offset ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A ; std::_System_error_category std::_Error_objects<int>::_System_object
.text$mn:00009A38                 pop     ebp
.text$mn:00009A39                 retn
.text$mn:00009A39 ?system_category@std@@YAABVerror_category@1@XZ endp
.text$mn:00009A39
.text$mn:00009A39 ; ---------------------------------------------------------------------------
.text$mn:00009A3A                 align 4
.text$mn:00009A3A _text$mn        ends
.text$mn:00009A3A
.text$mn:00009A3C ; ===========================================================================
.text$mn:00009A3C
.text$mn:00009A3C ; Segment type: Pure code
.text$mn:00009A3C ; Segment permissions: Read/Execute
.text$mn:00009A3C _text$mn        segment para public 'CODE' use32
.text$mn:00009A3C                 assume cs:_text$mn
.text$mn:00009A3C                 ;org 9A3Ch
.text$mn:00009A3C ; COMDAT (pick any)
.text$mn:00009A3C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009A3C
.text$mn:00009A3C ; =============== S U B R O U T I N E =======================================
.text$mn:00009A3C
.text$mn:00009A3C ; Attributes: bp-based frame
.text$mn:00009A3C
.text$mn:00009A3C ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __cdecl std::to_wstring(int)
.text$mn:00009A3C                 public ?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z
.text$mn:00009A3C ?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z proc near
.text$mn:00009A3C                                         ; CODE XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+A1p
.text$mn:00009A3C                                         ; NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+17Bp
.text$mn:00009A3C
.text$mn:00009A3C var_94          = dword ptr -94h
.text$mn:00009A3C Dst             = word ptr -90h
.text$mn:00009A3C var_10          = dword ptr -10h
.text$mn:00009A3C var_C           = dword ptr -0Ch
.text$mn:00009A3C var_4           = dword ptr -4
.text$mn:00009A3C arg_0           = dword ptr  8
.text$mn:00009A3C arg_4           = dword ptr  0Ch
.text$mn:00009A3C
.text$mn:00009A3C                 push    ebp
.text$mn:00009A3D                 mov     ebp, esp
.text$mn:00009A3F                 push    0FFFFFFFFh
.text$mn:00009A41                 push    offset __ehhandler$?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z
.text$mn:00009A46                 mov     eax, large fs:0
.text$mn:00009A4C                 push    eax
.text$mn:00009A4D                 sub     esp, 88h
.text$mn:00009A53                 mov     eax, dword ptr ds:___security_cookie
.text$mn:00009A58                 xor     eax, ebp
.text$mn:00009A5A                 mov     [ebp+var_10], eax
.text$mn:00009A5D                 push    eax
.text$mn:00009A5E                 lea     eax, [ebp+var_C]
.text$mn:00009A61                 mov     large fs:0, eax
.text$mn:00009A67                 mov     [ebp+var_94], 0
.text$mn:00009A71                 mov     eax, [ebp+arg_4]
.text$mn:00009A74                 push    eax
.text$mn:00009A75                 push    offset ??_C@_15KNBIKKIN@?$AA?$CF?$AAd?$AA?$AA@ ; "%d"
.text$mn:00009A7A                 push    40h ; '@'       ; SizeInWords
.text$mn:00009A7C                 lea     ecx, [ebp+Dst]
.text$mn:00009A82                 push    ecx             ; Dst
.text$mn:00009A83                 call    _swprintf_s
.text$mn:00009A88                 add     esp, 10h
.text$mn:00009A8B                 lea     edx, [ebp+Dst]
.text$mn:00009A91                 push    edx             ; Str
.text$mn:00009A92                 mov     ecx, [ebp+arg_0]
.text$mn:00009A95                 call    ??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(wchar_t const *)
.text$mn:00009A9A                 mov     [ebp+var_4], 0
.text$mn:00009AA1                 mov     eax, [ebp+var_94]
.text$mn:00009AA7                 or      eax, 1
.text$mn:00009AAA                 mov     [ebp+var_94], eax
.text$mn:00009AB0                 mov     eax, [ebp+arg_0]
.text$mn:00009AB3                 mov     ecx, [ebp+var_C]
.text$mn:00009AB6                 mov     large fs:0, ecx
.text$mn:00009ABD                 pop     ecx
.text$mn:00009ABE                 mov     ecx, [ebp+var_10]
.text$mn:00009AC1                 xor     ecx, ebp
.text$mn:00009AC3                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$mn:00009AC8                 mov     esp, ebp
.text$mn:00009ACA                 pop     ebp
.text$mn:00009ACB                 retn
.text$mn:00009ACB ?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z endp
.text$mn:00009ACB
.text$mn:00009ACB _text$mn        ends
.text$mn:00009ACB
.text$x:00009ACC ; ===========================================================================
.text$x:00009ACC
.text$x:00009ACC ; Segment type: Pure code
.text$x:00009ACC ; Segment permissions: Read/Execute
.text$x:00009ACC _text$x         segment para public 'CODE' use32
.text$x:00009ACC                 assume cs:_text$x
.text$x:00009ACC                 ;org 9ACCh
.text$x:00009ACC ; COMDAT (pick associative to section at 9A3C)
.text$x:00009ACC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$x:00009ACC
.text$x:00009ACC ; =============== S U B R O U T I N E =======================================
.text$x:00009ACC
.text$x:00009ACC
.text$x:00009ACC __unwindfunclet$?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z$0 proc near
.text$x:00009ACC                                         ; DATA XREF: .xdata$x:0000A2B0o
.text$x:00009ACC                 mov     eax, [ebp-94h]
.text$x:00009AD2                 and     eax, 1
.text$x:00009AD5                 jz      $LN4_1
.text$x:00009ADB                 and     dword ptr [ebp-94h], 0FFFFFFFEh
.text$x:00009AE2                 mov     ecx, [ebp+8]
.text$x:00009AE5                 jmp     ??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::~basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(void)
.text$x:00009AEA ; ---------------------------------------------------------------------------
.text$x:00009AEA
.text$x:00009AEA $LN4_1:                                 ; CODE XREF: __unwindfunclet$?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z$0+9j
.text$x:00009AEA                 retn
.text$x:00009AEA __unwindfunclet$?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z$0 endp
.text$x:00009AEA
.text$x:00009AEB
.text$x:00009AEB ; =============== S U B R O U T I N E =======================================
.text$x:00009AEB
.text$x:00009AEB
.text$x:00009AEB __ehhandler$?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z proc near
.text$x:00009AEB                                         ; DATA XREF: std::to_wstring(int)+5o
.text$x:00009AEB
.text$x:00009AEB arg_4           = dword ptr  8
.text$x:00009AEB
.text$x:00009AEB                 mov     edx, [esp+arg_4]
.text$x:00009AEF                 lea     eax, [edx+0Ch]
.text$x:00009AF2                 mov     ecx, [edx-8Ch]
.text$x:00009AF8                 xor     ecx, eax
.text$x:00009AFA                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009AFF                 mov     ecx, [edx-4]
.text$x:00009B02                 xor     ecx, eax
.text$x:00009B04                 call    @__security_check_cookie@4 ; __security_check_cookie(x)
.text$x:00009B09                 mov     eax, offset __ehfuncinfo$?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z
.text$x:00009B0E                 jmp     ___CxxFrameHandler3
.text$x:00009B0E __ehhandler$?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z endp
.text$x:00009B0E
.text$x:00009B0E ; ---------------------------------------------------------------------------
.text$x:00009B13                 align 4
.text$x:00009B13 _text$x         ends
.text$x:00009B13
.text$mn:00009B14 ; ===========================================================================
.text$mn:00009B14
.text$mn:00009B14 ; Segment type: Pure code
.text$mn:00009B14 ; Segment permissions: Read/Execute
.text$mn:00009B14 _text$mn        segment para public 'CODE' use32
.text$mn:00009B14                 assume cs:_text$mn
.text$mn:00009B14                 ;org 9B14h
.text$mn:00009B14 ; COMDAT (pick any)
.text$mn:00009B14                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B14
.text$mn:00009B14 ; =============== S U B R O U T I N E =======================================
.text$mn:00009B14
.text$mn:00009B14 ; Attributes: bp-based frame
.text$mn:00009B14
.text$mn:00009B14 ; int __thiscall std::error_code::value(std::error_code *__hidden this)
.text$mn:00009B14                 public ?value@error_code@std@@QBEHXZ
.text$mn:00009B14 ?value@error_code@std@@QBEHXZ proc near ; CODE XREF: std::error_category::equivalent(std::error_code const &,int)+24p
.text$mn:00009B14
.text$mn:00009B14 var_4           = dword ptr -4
.text$mn:00009B14
.text$mn:00009B14                 push    ebp
.text$mn:00009B15                 mov     ebp, esp
.text$mn:00009B17                 push    ecx
.text$mn:00009B18                 mov     [ebp+var_4], ecx
.text$mn:00009B1B                 mov     eax, [ebp+var_4]
.text$mn:00009B1E                 mov     eax, [eax]
.text$mn:00009B20                 mov     esp, ebp
.text$mn:00009B22                 pop     ebp
.text$mn:00009B23                 retn
.text$mn:00009B23 ?value@error_code@std@@QBEHXZ endp
.text$mn:00009B23
.text$mn:00009B23 _text$mn        ends
.text$mn:00009B23
.text$mn:00009B24 ; ===========================================================================
.text$mn:00009B24
.text$mn:00009B24 ; Segment type: Pure code
.text$mn:00009B24 ; Segment permissions: Read/Execute
.text$mn:00009B24 _text$mn        segment para public 'CODE' use32
.text$mn:00009B24                 assume cs:_text$mn
.text$mn:00009B24                 ;org 9B24h
.text$mn:00009B24 ; COMDAT (pick any)
.text$mn:00009B24                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B24
.text$mn:00009B24 ; =============== S U B R O U T I N E =======================================
.text$mn:00009B24
.text$mn:00009B24 ; Attributes: bp-based frame
.text$mn:00009B24
.text$mn:00009B24 ; int __thiscall std::error_condition::value(std::error_condition *__hidden this)
.text$mn:00009B24                 public ?value@error_condition@std@@QBEHXZ
.text$mn:00009B24 ?value@error_condition@std@@QBEHXZ proc near
.text$mn:00009B24                                         ; CODE XREF: std::error_condition::operator==(std::error_condition const &)+2Cp
.text$mn:00009B24                                         ; std::error_condition::operator==(std::error_condition const &)+36p
.text$mn:00009B24
.text$mn:00009B24 var_4           = dword ptr -4
.text$mn:00009B24
.text$mn:00009B24                 push    ebp
.text$mn:00009B25                 mov     ebp, esp
.text$mn:00009B27                 push    ecx
.text$mn:00009B28                 mov     [ebp+var_4], ecx
.text$mn:00009B2B                 mov     eax, [ebp+var_4]
.text$mn:00009B2E                 mov     eax, [eax]
.text$mn:00009B30                 mov     esp, ebp
.text$mn:00009B32                 pop     ebp
.text$mn:00009B33                 retn
.text$mn:00009B33 ?value@error_condition@std@@QBEHXZ endp
.text$mn:00009B33
.text$mn:00009B33 _text$mn        ends
.text$mn:00009B33
.text$mn:00009B34 ; ===========================================================================
.text$mn:00009B34
.text$mn:00009B34 ; Segment type: Pure code
.text$mn:00009B34 ; Segment permissions: Read/Execute
.text$mn:00009B34 _text$mn        segment para public 'CODE' use32
.text$mn:00009B34                 assume cs:_text$mn
.text$mn:00009B34                 ;org 9B34h
.text$mn:00009B34 ; COMDAT (pick any)
.text$mn:00009B34                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B34
.text$mn:00009B34 ; =============== S U B R O U T I N E =======================================
.text$mn:00009B34
.text$mn:00009B34 ; Attributes: bp-based frame
.text$mn:00009B34
.text$mn:00009B34                 public _hypot
.text$mn:00009B34 _hypot          proc near
.text$mn:00009B34
.text$mn:00009B34 var_10          = qword ptr -10h
.text$mn:00009B34 var_8           = qword ptr -8
.text$mn:00009B34 arg_0           = qword ptr  8
.text$mn:00009B34 arg_8           = qword ptr  10h
.text$mn:00009B34
.text$mn:00009B34                 push    ebp
.text$mn:00009B35                 mov     ebp, esp
.text$mn:00009B37                 sub     esp, 8
.text$mn:00009B3A                 movsd   xmm0, [ebp+arg_8]
.text$mn:00009B3F                 movsd   [esp+8+var_8], xmm0
.text$mn:00009B44                 sub     esp, 8
.text$mn:00009B47                 movsd   xmm0, [ebp+arg_0]
.text$mn:00009B4C                 movsd   [esp+10h+var_10], xmm0
.text$mn:00009B51                 call    __hypot
.text$mn:00009B56                 add     esp, 10h
.text$mn:00009B59                 pop     ebp
.text$mn:00009B5A                 retn
.text$mn:00009B5A _hypot          endp
.text$mn:00009B5A
.text$mn:00009B5A ; ---------------------------------------------------------------------------
.text$mn:00009B5B                 align 4
.text$mn:00009B5B _text$mn        ends
.text$mn:00009B5B
.text$mn:00009B5C ; ===========================================================================
.text$mn:00009B5C
.text$mn:00009B5C ; Segment type: Pure code
.text$mn:00009B5C ; Segment permissions: Read/Execute
.text$mn:00009B5C _text$mn        segment para public 'CODE' use32
.text$mn:00009B5C                 assume cs:_text$mn
.text$mn:00009B5C                 ;org 9B5Ch
.text$mn:00009B5C ; COMDAT (pick any)
.text$mn:00009B5C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B5C
.text$mn:00009B5C ; =============== S U B R O U T I N E =======================================
.text$mn:00009B5C
.text$mn:00009B5C ; Attributes: bp-based frame
.text$mn:00009B5C
.text$mn:00009B5C ; int __cdecl wmemcpy(void *Dst, void *Src, int)
.text$mn:00009B5C                 public _wmemcpy
.text$mn:00009B5C _wmemcpy        proc near               ; CODE XREF: std::char_traits<wchar_t>::copy(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:00009B5C
.text$mn:00009B5C Dst             = dword ptr  8
.text$mn:00009B5C Src             = dword ptr  0Ch
.text$mn:00009B5C arg_8           = dword ptr  10h
.text$mn:00009B5C
.text$mn:00009B5C                 push    ebp
.text$mn:00009B5D                 mov     ebp, esp
.text$mn:00009B5F                 mov     eax, [ebp+arg_8]
.text$mn:00009B62                 shl     eax, 1
.text$mn:00009B64                 push    eax             ; Size
.text$mn:00009B65                 mov     ecx, [ebp+Src]
.text$mn:00009B68                 push    ecx             ; Src
.text$mn:00009B69                 mov     edx, [ebp+Dst]
.text$mn:00009B6C                 push    edx             ; Dst
.text$mn:00009B6D                 call    _memcpy
.text$mn:00009B72                 add     esp, 0Ch
.text$mn:00009B75                 pop     ebp
.text$mn:00009B76                 retn
.text$mn:00009B76 _wmemcpy        endp
.text$mn:00009B76
.text$mn:00009B76 ; ---------------------------------------------------------------------------
.text$mn:00009B77                 align 4
.text$mn:00009B77 _text$mn        ends
.text$mn:00009B77
.text$mn:00009B78 ; ===========================================================================
.text$mn:00009B78
.text$mn:00009B78 ; Segment type: Pure code
.text$mn:00009B78 ; Segment permissions: Read/Execute
.text$mn:00009B78 _text$mn        segment para public 'CODE' use32
.text$mn:00009B78                 assume cs:_text$mn
.text$mn:00009B78                 ;org 9B78h
.text$mn:00009B78 ; COMDAT (pick any)
.text$mn:00009B78                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.text$mn:00009B78
.text$mn:00009B78 ; =============== S U B R O U T I N E =======================================
.text$mn:00009B78
.text$mn:00009B78 ; Attributes: bp-based frame
.text$mn:00009B78
.text$mn:00009B78 ; int __cdecl wmemmove(void *Dst, void *Src, int)
.text$mn:00009B78                 public _wmemmove
.text$mn:00009B78 _wmemmove       proc near               ; CODE XREF: std::char_traits<wchar_t>::move(wchar_t *,wchar_t const *,uint)+1Ep
.text$mn:00009B78
.text$mn:00009B78 Dst             = dword ptr  8
.text$mn:00009B78 Src             = dword ptr  0Ch
.text$mn:00009B78 arg_8           = dword ptr  10h
.text$mn:00009B78
.text$mn:00009B78                 push    ebp
.text$mn:00009B79                 mov     ebp, esp
.text$mn:00009B7B                 mov     eax, [ebp+arg_8]
.text$mn:00009B7E                 shl     eax, 1
.text$mn:00009B80                 push    eax             ; Size
.text$mn:00009B81                 mov     ecx, [ebp+Src]
.text$mn:00009B84                 push    ecx             ; Src
.text$mn:00009B85                 mov     edx, [ebp+Dst]
.text$mn:00009B88                 push    edx             ; Dst
.text$mn:00009B89                 call    _memmove
.text$mn:00009B8E                 add     esp, 0Ch
.text$mn:00009B91                 pop     ebp
.text$mn:00009B92                 retn
.text$mn:00009B92 _wmemmove       endp
.text$mn:00009B92
.text$mn:00009B92 ; ---------------------------------------------------------------------------
.text$mn:00009B93                 align 4
.text$mn:00009B93 _text$mn        ends
.text$mn:00009B93
.xdata$x:00009B94 ; ===========================================================================
.xdata$x:00009B94
.xdata$x:00009B94 ; Segment type: Pure data
.xdata$x:00009B94 ; Segment permissions: Read
.xdata$x:00009B94 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009B94                 assume cs:_xdata$x
.xdata$x:00009B94                 ;org 9B94h
.xdata$x:00009B94 ; COMDAT (pick associative to section at 7FC4)
.xdata$x:00009B94 __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ db 0FFh
.xdata$x:00009B94                                         ; DATA XREF: .xdata$x:00009BA4o
.xdata$x:00009B95                 db 0FFh
.xdata$x:00009B96                 db 0FFh
.xdata$x:00009B97                 db 0FFh
.xdata$x:00009B98                 dd offset __unwindfunclet$?_Orphan_all@_Container_base12@std@@QAEXXZ$0
.xdata$x:00009B9C __ehfuncinfo$?_Orphan_all@_Container_base12@std@@QAEXXZ db  22h ; "
.xdata$x:00009B9C                                         ; DATA XREF: __ehhandler$?_Orphan_all@_Container_base12@std@@QAEXXZ+11o
.xdata$x:00009B9D                 db    5
.xdata$x:00009B9E                 db  93h ; ô
.xdata$x:00009B9F                 db  19h
.xdata$x:00009BA0                 db    1
.xdata$x:00009BA1                 db    0
.xdata$x:00009BA2                 db    0
.xdata$x:00009BA3                 db    0
.xdata$x:00009BA4                 dd offset __unwindtable$?_Orphan_all@_Container_base12@std@@QAEXXZ
.xdata$x:00009BA8                 align 20h
.xdata$x:00009BA8 _xdata$x        ends
.xdata$x:00009BA8
.xdata$x:00009BC0 ; ===========================================================================
.xdata$x:00009BC0
.xdata$x:00009BC0 ; Segment type: Pure data
.xdata$x:00009BC0 ; Segment permissions: Read
.xdata$x:00009BC0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009BC0                 assume cs:_xdata$x
.xdata$x:00009BC0                 ;org 9BC0h
.xdata$x:00009BC0 ; COMDAT (pick associative to section at 6EF8)
.xdata$x:00009BC0 __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db 0FFh
.xdata$x:00009BC0                                         ; DATA XREF: .xdata$x:00009BD0o
.xdata$x:00009BC1                 db 0FFh
.xdata$x:00009BC2                 db 0FFh
.xdata$x:00009BC3                 db 0FFh
.xdata$x:00009BC4                 dd offset __unwindfunclet$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z$0
.xdata$x:00009BC8 __ehfuncinfo$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z db  22h ; "
.xdata$x:00009BC8                                         ; DATA XREF: __ehhandler$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z+11o
.xdata$x:00009BC9                 db    5
.xdata$x:00009BCA                 db  93h ; ô
.xdata$x:00009BCB                 db  19h
.xdata$x:00009BCC                 db    1
.xdata$x:00009BCD                 db    0
.xdata$x:00009BCE                 db    0
.xdata$x:00009BCF                 db    0
.xdata$x:00009BD0                 dd offset __unwindtable$??4_Iterator_base12@std@@QAEAAU01@ABU01@@Z
.xdata$x:00009BD4                 db    0
.xdata$x:00009BD5                 db    0
.xdata$x:00009BD6                 db    0
.xdata$x:00009BD7                 db    0
.xdata$x:00009BD8                 db    0
.xdata$x:00009BD9                 db    0
.xdata$x:00009BDA                 db    0
.xdata$x:00009BDB                 db    0
.xdata$x:00009BDC                 db    0
.xdata$x:00009BDD                 db    0
.xdata$x:00009BDE                 db    0
.xdata$x:00009BDF                 db    0
.xdata$x:00009BE0                 db    0
.xdata$x:00009BE1                 db    0
.xdata$x:00009BE2                 db    0
.xdata$x:00009BE3                 db    0
.xdata$x:00009BE4                 db    0
.xdata$x:00009BE5                 db    0
.xdata$x:00009BE6                 db    0
.xdata$x:00009BE7                 db    0
.xdata$x:00009BE8                 db    0
.xdata$x:00009BE9                 db    0
.xdata$x:00009BEA                 db    0
.xdata$x:00009BEB                 db    0
.xdata$x:00009BEB _xdata$x        ends
.xdata$x:00009BEB
.xdata$x:00009BEC ; ===========================================================================
.xdata$x:00009BEC
.xdata$x:00009BEC ; Segment type: Pure data
.xdata$x:00009BEC ; Segment permissions: Read
.xdata$x:00009BEC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009BEC                 assume cs:_xdata$x
.xdata$x:00009BEC                 ;org 9BECh
.xdata$x:00009BEC ; COMDAT (pick associative to section at 6C28)
.xdata$x:00009BEC __unwindtable$??1_Iterator_base12@std@@QAE@XZ db 0FFh
.xdata$x:00009BEC                                         ; DATA XREF: .xdata$x:00009BFCo
.xdata$x:00009BED                 db 0FFh
.xdata$x:00009BEE                 db 0FFh
.xdata$x:00009BEF                 db 0FFh
.xdata$x:00009BF0                 dd offset __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0
.xdata$x:00009BF4 __ehfuncinfo$??1_Iterator_base12@std@@QAE@XZ db  22h ; "
.xdata$x:00009BF4                                         ; DATA XREF: __ehhandler$??1_Iterator_base12@std@@QAE@XZ+11o
.xdata$x:00009BF5                 db    5
.xdata$x:00009BF6                 db  93h ; ô
.xdata$x:00009BF7                 db  19h
.xdata$x:00009BF8                 db    1
.xdata$x:00009BF9                 db    0
.xdata$x:00009BFA                 db    0
.xdata$x:00009BFB                 db    0
.xdata$x:00009BFC                 dd offset __unwindtable$??1_Iterator_base12@std@@QAE@XZ
.xdata$x:00009C00                 db    0
.xdata$x:00009C01                 db    0
.xdata$x:00009C02                 db    0
.xdata$x:00009C03                 db    0
.xdata$x:00009C04                 db    0
.xdata$x:00009C05                 db    0
.xdata$x:00009C06                 db    0
.xdata$x:00009C07                 db    0
.xdata$x:00009C08                 db    0
.xdata$x:00009C09                 db    0
.xdata$x:00009C0A                 db    0
.xdata$x:00009C0B                 db    0
.xdata$x:00009C0C                 db    0
.xdata$x:00009C0D                 db    0
.xdata$x:00009C0E                 db    0
.xdata$x:00009C0F                 db    0
.xdata$x:00009C10                 db    0
.xdata$x:00009C11                 db    0
.xdata$x:00009C12                 db    0
.xdata$x:00009C13                 db    0
.xdata$x:00009C14                 db    0
.xdata$x:00009C15                 db    0
.xdata$x:00009C16                 db    0
.xdata$x:00009C17                 db    0
.xdata$x:00009C17 _xdata$x        ends
.xdata$x:00009C17
.xdata$x:00009C18 ; ===========================================================================
.xdata$x:00009C18
.xdata$x:00009C18 ; Segment type: Pure data
.xdata$x:00009C18 ; Segment permissions: Read
.xdata$x:00009C18 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009C18                 assume cs:_xdata$x
.xdata$x:00009C18                 ;org 9C18h
.xdata$x:00009C18 ; COMDAT (pick associative to section at 7590)
.xdata$x:00009C18 __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db 0FFh
.xdata$x:00009C18                                         ; DATA XREF: .xdata$x:00009C30o
.xdata$x:00009C19                 db 0FFh
.xdata$x:00009C1A                 db 0FFh
.xdata$x:00009C1B                 db 0FFh
.xdata$x:00009C1C                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$0
.xdata$x:00009C20                 db 0FFh
.xdata$x:00009C21                 db 0FFh
.xdata$x:00009C22                 db 0FFh
.xdata$x:00009C23                 db 0FFh
.xdata$x:00009C24                 dd offset __unwindfunclet$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z$1
.xdata$x:00009C28 __ehfuncinfo$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z db  22h ; "
.xdata$x:00009C28                                         ; DATA XREF: __ehhandler$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z+11o
.xdata$x:00009C29                 db    5
.xdata$x:00009C2A                 db  93h ; ô
.xdata$x:00009C2B                 db  19h
.xdata$x:00009C2C                 db    2
.xdata$x:00009C2D                 db    0
.xdata$x:00009C2E                 db    0
.xdata$x:00009C2F                 db    0
.xdata$x:00009C30                 dd offset __unwindtable$?_Adopt@_Iterator_base12@std@@QAEXPBU_Container_base12@2@@Z
.xdata$x:00009C34                 db    0
.xdata$x:00009C35                 db    0
.xdata$x:00009C36                 db    0
.xdata$x:00009C37                 db    0
.xdata$x:00009C38                 db    0
.xdata$x:00009C39                 db    0
.xdata$x:00009C3A                 db    0
.xdata$x:00009C3B                 db    0
.xdata$x:00009C3C                 db    0
.xdata$x:00009C3D                 db    0
.xdata$x:00009C3E                 db    0
.xdata$x:00009C3F                 db    0
.xdata$x:00009C40                 db    0
.xdata$x:00009C41                 db    0
.xdata$x:00009C42                 db    0
.xdata$x:00009C43                 db    0
.xdata$x:00009C44                 db    0
.xdata$x:00009C45                 db    0
.xdata$x:00009C46                 db    0
.xdata$x:00009C47                 db    0
.xdata$x:00009C48                 db    0
.xdata$x:00009C49                 db    0
.xdata$x:00009C4A                 db    0
.xdata$x:00009C4B                 db    0
.xdata$x:00009C4B _xdata$x        ends
.xdata$x:00009C4B
.xdata$x:00009C4C ; ===========================================================================
.xdata$x:00009C4C
.xdata$x:00009C4C ; Segment type: Pure data
.xdata$x:00009C4C ; Segment permissions: Read
.xdata$x:00009C4C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009C4C                 assume cs:_xdata$x
.xdata$x:00009C4C                 ;org 9C4Ch
.xdata$x:00009C4C ; COMDAT (pick associative to section at 60AC)
.xdata$x:00009C4C __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009C4C                                         ; DATA XREF: .xdata$x:00009C5Co
.xdata$x:00009C4D                 db 0FFh
.xdata$x:00009C4E                 db 0FFh
.xdata$x:00009C4F                 db 0FFh
.xdata$x:00009C50                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:00009C54 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009C54                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:00009C55                 db    5
.xdata$x:00009C56                 db  93h ; ô
.xdata$x:00009C57                 db  19h
.xdata$x:00009C58                 db    1
.xdata$x:00009C59                 db    0
.xdata$x:00009C5A                 db    0
.xdata$x:00009C5B                 db    0
.xdata$x:00009C5C                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:00009C60                 db    0
.xdata$x:00009C61                 db    0
.xdata$x:00009C62                 db    0
.xdata$x:00009C63                 db    0
.xdata$x:00009C64                 db    0
.xdata$x:00009C65                 db    0
.xdata$x:00009C66                 db    0
.xdata$x:00009C67                 db    0
.xdata$x:00009C68                 db    0
.xdata$x:00009C69                 db    0
.xdata$x:00009C6A                 db    0
.xdata$x:00009C6B                 db    0
.xdata$x:00009C6C                 db    0
.xdata$x:00009C6D                 db    0
.xdata$x:00009C6E                 db    0
.xdata$x:00009C6F                 db    0
.xdata$x:00009C70                 db    0
.xdata$x:00009C71                 db    0
.xdata$x:00009C72                 db    0
.xdata$x:00009C73                 db    0
.xdata$x:00009C74                 db    0
.xdata$x:00009C75                 db    0
.xdata$x:00009C76                 db    0
.xdata$x:00009C77                 db    0
.xdata$x:00009C77 _xdata$x        ends
.xdata$x:00009C77
.xdata$x:00009C78 ; ===========================================================================
.xdata$x:00009C78
.xdata$x:00009C78 ; Segment type: Pure data
.xdata$x:00009C78 ; Segment permissions: Read
.xdata$x:00009C78 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009C78                 assume cs:_xdata$x
.xdata$x:00009C78                 ;org 9C78h
.xdata$x:00009C78 ; COMDAT (pick associative to section at 695C)
.xdata$x:00009C78 __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009C78                                         ; DATA XREF: .xdata$x:00009C88o
.xdata$x:00009C79                 db 0FFh
.xdata$x:00009C7A                 db 0FFh
.xdata$x:00009C7B                 db 0FFh
.xdata$x:00009C7C                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ$0
.xdata$x:00009C80 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009C80                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ+11o
.xdata$x:00009C81                 db    5
.xdata$x:00009C82                 db  93h ; ô
.xdata$x:00009C83                 db  19h
.xdata$x:00009C84                 db    1
.xdata$x:00009C85                 db    0
.xdata$x:00009C86                 db    0
.xdata$x:00009C87                 db    0
.xdata$x:00009C88                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@D@std@@@std@@QAE@XZ
.xdata$x:00009C8C                 db    0
.xdata$x:00009C8D                 db    0
.xdata$x:00009C8E                 db    0
.xdata$x:00009C8F                 db    0
.xdata$x:00009C90                 db    0
.xdata$x:00009C91                 db    0
.xdata$x:00009C92                 db    0
.xdata$x:00009C93                 db    0
.xdata$x:00009C94                 db    0
.xdata$x:00009C95                 db    0
.xdata$x:00009C96                 db    0
.xdata$x:00009C97                 db    0
.xdata$x:00009C98                 db    0
.xdata$x:00009C99                 db    0
.xdata$x:00009C9A                 db    0
.xdata$x:00009C9B                 db    0
.xdata$x:00009C9C                 db    0
.xdata$x:00009C9D                 db    0
.xdata$x:00009C9E                 db    0
.xdata$x:00009C9F                 db    0
.xdata$x:00009CA0                 db    0
.xdata$x:00009CA1                 db    0
.xdata$x:00009CA2                 db    0
.xdata$x:00009CA3                 db    0
.xdata$x:00009CA3 _xdata$x        ends
.xdata$x:00009CA3
.xdata$x:00009CA4 ; ===========================================================================
.xdata$x:00009CA4
.xdata$x:00009CA4 ; Segment type: Pure data
.xdata$x:00009CA4 ; Segment permissions: Read
.xdata$x:00009CA4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009CA4                 assume cs:_xdata$x
.xdata$x:00009CA4                 ;org 9CA4h
.xdata$x:00009CA4 ; COMDAT (pick associative to section at 5DB0)
.xdata$x:00009CA4 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db 0FFh
.xdata$x:00009CA4                                         ; DATA XREF: .xdata$x:00009CB4o
.xdata$x:00009CA5                 db 0FFh
.xdata$x:00009CA6                 db 0FFh
.xdata$x:00009CA7                 db 0FFh
.xdata$x:00009CA8                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z$0
.xdata$x:00009CAC __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z db  22h ; "
.xdata$x:00009CAC                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z+11o
.xdata$x:00009CAD                 db    5
.xdata$x:00009CAE                 db  93h ; ô
.xdata$x:00009CAF                 db  19h
.xdata$x:00009CB0                 db    1
.xdata$x:00009CB1                 db    0
.xdata$x:00009CB2                 db    0
.xdata$x:00009CB3                 db    0
.xdata$x:00009CB4                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@ABV?$allocator@D@1@@Z
.xdata$x:00009CB8                 db    0
.xdata$x:00009CB9                 db    0
.xdata$x:00009CBA                 db    0
.xdata$x:00009CBB                 db    0
.xdata$x:00009CBC                 db    0
.xdata$x:00009CBD                 db    0
.xdata$x:00009CBE                 db    0
.xdata$x:00009CBF                 db    0
.xdata$x:00009CC0                 db    0
.xdata$x:00009CC1                 db    0
.xdata$x:00009CC2                 db    0
.xdata$x:00009CC3                 db    0
.xdata$x:00009CC4                 db    0
.xdata$x:00009CC5                 db    0
.xdata$x:00009CC6                 db    0
.xdata$x:00009CC7                 db    0
.xdata$x:00009CC8                 db    0
.xdata$x:00009CC9                 db    0
.xdata$x:00009CCA                 db    0
.xdata$x:00009CCB                 db    0
.xdata$x:00009CCC                 db    0
.xdata$x:00009CCD                 db    0
.xdata$x:00009CCE                 db    0
.xdata$x:00009CCF                 db    0
.xdata$x:00009CCF _xdata$x        ends
.xdata$x:00009CCF
.xdata$x:00009CD0 ; ===========================================================================
.xdata$x:00009CD0
.xdata$x:00009CD0 ; Segment type: Pure data
.xdata$x:00009CD0 ; Segment permissions: Read
.xdata$x:00009CD0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009CD0                 assume cs:_xdata$x
.xdata$x:00009CD0                 ;org 9CD0h
.xdata$x:00009CD0 ; COMDAT (pick associative to section at 678C)
.xdata$x:00009CD0 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009CD0                                         ; DATA XREF: .xdata$x:00009CE0o
.xdata$x:00009CD1                 db 0FFh
.xdata$x:00009CD2                 db 0FFh
.xdata$x:00009CD3                 db 0FFh
.xdata$x:00009CD4                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00009CD8 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009CD8                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00009CD9                 db    5
.xdata$x:00009CDA                 db  93h ; ô
.xdata$x:00009CDB                 db  19h
.xdata$x:00009CDC                 db    1
.xdata$x:00009CDD                 db    0
.xdata$x:00009CDE                 db    0
.xdata$x:00009CDF                 db    0
.xdata$x:00009CE0                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@DV?$allocator@D@std@@@std@@@std@@QAE@XZ
.xdata$x:00009CE4                 db    0
.xdata$x:00009CE5                 db    0
.xdata$x:00009CE6                 db    0
.xdata$x:00009CE7                 db    0
.xdata$x:00009CE8                 db    0
.xdata$x:00009CE9                 db    0
.xdata$x:00009CEA                 db    0
.xdata$x:00009CEB                 db    0
.xdata$x:00009CEC                 db    0
.xdata$x:00009CED                 db    0
.xdata$x:00009CEE                 db    0
.xdata$x:00009CEF                 db    0
.xdata$x:00009CF0                 db    0
.xdata$x:00009CF1                 db    0
.xdata$x:00009CF2                 db    0
.xdata$x:00009CF3                 db    0
.xdata$x:00009CF4                 db    0
.xdata$x:00009CF5                 db    0
.xdata$x:00009CF6                 db    0
.xdata$x:00009CF7                 db    0
.xdata$x:00009CF8                 db    0
.xdata$x:00009CF9                 db    0
.xdata$x:00009CFA                 db    0
.xdata$x:00009CFB                 db    0
.xdata$x:00009CFB _xdata$x        ends
.xdata$x:00009CFB
.xdata$x:00009CFC ; ===========================================================================
.xdata$x:00009CFC
.xdata$x:00009CFC ; Segment type: Pure data
.xdata$x:00009CFC ; Segment permissions: Read
.xdata$x:00009CFC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009CFC                 assume cs:_xdata$x
.xdata$x:00009CFC                 ;org 9CFCh
.xdata$x:00009CFC ; COMDAT (pick associative to section at 6248)
.xdata$x:00009CFC __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db 0FFh
.xdata$x:00009CFC                                         ; DATA XREF: .xdata$x:00009D0Co
.xdata$x:00009CFD                 db 0FFh
.xdata$x:00009CFE                 db 0FFh
.xdata$x:00009CFF                 db 0FFh
.xdata$x:00009D00                 dd offset __unwindfunclet$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z$0
.xdata$x:00009D04 __ehfuncinfo$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z db  22h ; "
.xdata$x:00009D04                                         ; DATA XREF: __ehhandler$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z+11o
.xdata$x:00009D05                 db    5
.xdata$x:00009D06                 db  93h ; ô
.xdata$x:00009D07                 db  19h
.xdata$x:00009D08                 db    1
.xdata$x:00009D09                 db    0
.xdata$x:00009D0A                 db    0
.xdata$x:00009D0B                 db    0
.xdata$x:00009D0C                 dd offset __unwindtable$??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@PBD@Z
.xdata$x:00009D10                 db    0
.xdata$x:00009D11                 db    0
.xdata$x:00009D12                 db    0
.xdata$x:00009D13                 db    0
.xdata$x:00009D14                 db    0
.xdata$x:00009D15                 db    0
.xdata$x:00009D16                 db    0
.xdata$x:00009D17                 db    0
.xdata$x:00009D18                 db    0
.xdata$x:00009D19                 db    0
.xdata$x:00009D1A                 db    0
.xdata$x:00009D1B                 db    0
.xdata$x:00009D1C                 db    0
.xdata$x:00009D1D                 db    0
.xdata$x:00009D1E                 db    0
.xdata$x:00009D1F                 db    0
.xdata$x:00009D20                 db    0
.xdata$x:00009D21                 db    0
.xdata$x:00009D22                 db    0
.xdata$x:00009D23                 db    0
.xdata$x:00009D24                 db    0
.xdata$x:00009D25                 db    0
.xdata$x:00009D26                 db    0
.xdata$x:00009D27                 db    0
.xdata$x:00009D27 _xdata$x        ends
.xdata$x:00009D27
.xdata$x:00009D28 ; ===========================================================================
.xdata$x:00009D28
.xdata$x:00009D28 ; Segment type: Pure data
.xdata$x:00009D28 ; Segment permissions: Read
.xdata$x:00009D28 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009D28                 assume cs:_xdata$x
.xdata$x:00009D28                 ;org 9D28h
.xdata$x:00009D28 ; COMDAT (pick associative to section at 6A3C)
.xdata$x:00009D28 __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db 0FFh
.xdata$x:00009D28                                         ; DATA XREF: .xdata$x:00009D38o
.xdata$x:00009D29                 db 0FFh
.xdata$x:00009D2A                 db 0FFh
.xdata$x:00009D2B                 db 0FFh
.xdata$x:00009D2C                 dd offset __unwindfunclet$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ$0
.xdata$x:00009D30 __ehfuncinfo$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ db  22h ; "
.xdata$x:00009D30                                         ; DATA XREF: __ehhandler$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ+11o
.xdata$x:00009D31                 db    5
.xdata$x:00009D32                 db  93h ; ô
.xdata$x:00009D33                 db  19h
.xdata$x:00009D34                 db    1
.xdata$x:00009D35                 db    0
.xdata$x:00009D36                 db    0
.xdata$x:00009D37                 db    0
.xdata$x:00009D38                 dd offset __unwindtable$??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAE@XZ
.xdata$x:00009D3C                 db    0
.xdata$x:00009D3D                 db    0
.xdata$x:00009D3E                 db    0
.xdata$x:00009D3F                 db    0
.xdata$x:00009D40                 db    0
.xdata$x:00009D41                 db    0
.xdata$x:00009D42                 db    0
.xdata$x:00009D43                 db    0
.xdata$x:00009D44                 db    0
.xdata$x:00009D45                 db    0
.xdata$x:00009D46                 db    0
.xdata$x:00009D47                 db    0
.xdata$x:00009D48                 db    0
.xdata$x:00009D49                 db    0
.xdata$x:00009D4A                 db    0
.xdata$x:00009D4B                 db    0
.xdata$x:00009D4C                 db    0
.xdata$x:00009D4D                 db    0
.xdata$x:00009D4E                 db    0
.xdata$x:00009D4F                 db    0
.xdata$x:00009D50                 db    0
.xdata$x:00009D51                 db    0
.xdata$x:00009D52                 db    0
.xdata$x:00009D53                 db    0
.xdata$x:00009D53 _xdata$x        ends
.xdata$x:00009D53
.xdata$x:00009D54 ; ===========================================================================
.xdata$x:00009D54
.xdata$x:00009D54 ; Segment type: Pure data
.xdata$x:00009D54 ; Segment permissions: Read
.xdata$x:00009D54 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009D54                 assume cs:_xdata$x
.xdata$x:00009D54                 ;org 9D54h
.xdata$x:00009D54 ; COMDAT (pick associative to section at 7844)
.xdata$x:00009D54 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5 db    0
.xdata$x:00009D54                                         ; DATA XREF: .xdata$x:00009DDCo
.xdata$x:00009D55                 db    0
.xdata$x:00009D56                 db    0
.xdata$x:00009D57                 db    0
.xdata$x:00009D58                 db    0
.xdata$x:00009D59                 db    0
.xdata$x:00009D5A                 db    0
.xdata$x:00009D5B                 db    0
.xdata$x:00009D5C                 db    0
.xdata$x:00009D5D                 db    0
.xdata$x:00009D5E                 db    0
.xdata$x:00009D5F                 db    0
.xdata$x:00009D60                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$0
.xdata$x:00009D64 __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4 db    0
.xdata$x:00009D64                                         ; DATA XREF: .xdata$x:00009DC8o
.xdata$x:00009D65                 db    0
.xdata$x:00009D66                 db    0
.xdata$x:00009D67                 db    0
.xdata$x:00009D68                 db    0
.xdata$x:00009D69                 db    0
.xdata$x:00009D6A                 db    0
.xdata$x:00009D6B                 db    0
.xdata$x:00009D6C                 db    0
.xdata$x:00009D6D                 db    0
.xdata$x:00009D6E                 db    0
.xdata$x:00009D6F                 db    0
.xdata$x:00009D70                 dd offset __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1
.xdata$x:00009D74 __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db 0FFh
.xdata$x:00009D74                                         ; DATA XREF: .xdata$x:00009D9Co
.xdata$x:00009D75                 db 0FFh
.xdata$x:00009D76                 db 0FFh
.xdata$x:00009D77                 db 0FFh
.xdata$x:00009D78                 db    0
.xdata$x:00009D79                 db    0
.xdata$x:00009D7A                 db    0
.xdata$x:00009D7B                 db    0
.xdata$x:00009D7C                 db 0FFh
.xdata$x:00009D7D                 db 0FFh
.xdata$x:00009D7E                 db 0FFh
.xdata$x:00009D7F                 db 0FFh
.xdata$x:00009D80                 db    0
.xdata$x:00009D81                 db    0
.xdata$x:00009D82                 db    0
.xdata$x:00009D83                 db    0
.xdata$x:00009D84                 db    1
.xdata$x:00009D85                 db    0
.xdata$x:00009D86                 db    0
.xdata$x:00009D87                 db    0
.xdata$x:00009D88                 db    0
.xdata$x:00009D89                 db    0
.xdata$x:00009D8A                 db    0
.xdata$x:00009D8B                 db    0
.xdata$x:00009D8C                 db    1
.xdata$x:00009D8D                 db    0
.xdata$x:00009D8E                 db    0
.xdata$x:00009D8F                 db    0
.xdata$x:00009D90                 db    0
.xdata$x:00009D91                 db    0
.xdata$x:00009D92                 db    0
.xdata$x:00009D93                 db    0
.xdata$x:00009D94 __ehfuncinfo$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:00009D94                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z+11o
.xdata$x:00009D95                 db    5
.xdata$x:00009D96                 db  93h ; ô
.xdata$x:00009D97                 db  19h
.xdata$x:00009D98                 db    4
.xdata$x:00009D99                 db    0
.xdata$x:00009D9A                 db    0
.xdata$x:00009D9B                 db    0
.xdata$x:00009D9C                 dd offset __unwindtable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:00009DA0                 db    2
.xdata$x:00009DA1                 db    0
.xdata$x:00009DA2                 db    0
.xdata$x:00009DA3                 db    0
.xdata$x:00009DA4                 dd offset __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z
.xdata$x:00009DA8                 db    0
.xdata$x:00009DA9                 db    0
.xdata$x:00009DAA                 db    0
.xdata$x:00009DAB                 db    0
.xdata$x:00009DAC                 db    0
.xdata$x:00009DAD                 db    0
.xdata$x:00009DAE                 db    0
.xdata$x:00009DAF                 db    0
.xdata$x:00009DB0                 db    0
.xdata$x:00009DB1                 db    0
.xdata$x:00009DB2                 db    0
.xdata$x:00009DB3                 db    0
.xdata$x:00009DB4                 db    0
.xdata$x:00009DB5                 db    0
.xdata$x:00009DB6                 db    0
.xdata$x:00009DB7                 db    0
.xdata$x:00009DB8 __tryblocktable$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z db    2
.xdata$x:00009DB8                                         ; DATA XREF: .xdata$x:00009DA4o
.xdata$x:00009DB9                 db    0
.xdata$x:00009DBA                 db    0
.xdata$x:00009DBB                 db    0
.xdata$x:00009DBC                 db    2
.xdata$x:00009DBD                 db    0
.xdata$x:00009DBE                 db    0
.xdata$x:00009DBF                 db    0
.xdata$x:00009DC0                 db    3
.xdata$x:00009DC1                 db    0
.xdata$x:00009DC2                 db    0
.xdata$x:00009DC3                 db    0
.xdata$x:00009DC4                 db    1
.xdata$x:00009DC5                 db    0
.xdata$x:00009DC6                 db    0
.xdata$x:00009DC7                 db    0
.xdata$x:00009DC8                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$4
.xdata$x:00009DCC                 db    0
.xdata$x:00009DCD                 db    0
.xdata$x:00009DCE                 db    0
.xdata$x:00009DCF                 db    0
.xdata$x:00009DD0                 db    0
.xdata$x:00009DD1                 db    0
.xdata$x:00009DD2                 db    0
.xdata$x:00009DD3                 db    0
.xdata$x:00009DD4                 db    3
.xdata$x:00009DD5                 db    0
.xdata$x:00009DD6                 db    0
.xdata$x:00009DD7                 db    0
.xdata$x:00009DD8                 db    1
.xdata$x:00009DD9                 db    0
.xdata$x:00009DDA                 db    0
.xdata$x:00009DDB                 db    0
.xdata$x:00009DDC                 dd offset __catchsym$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$5
.xdata$x:00009DDC _xdata$x        ends
.xdata$x:00009DDC
.xdata$x:00009DE0 ; ===========================================================================
.xdata$x:00009DE0
.xdata$x:00009DE0 ; Segment type: Pure data
.xdata$x:00009DE0 ; Segment permissions: Read
.xdata$x:00009DE0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009DE0                 assume cs:_xdata$x
.xdata$x:00009DE0                 ;org 9DE0h
.xdata$x:00009DE0 ; COMDAT (pick associative to section at 64F0)
.xdata$x:00009DE0 __unwindtable$??0_Generic_error_category@std@@QAE@XZ db 0FFh
.xdata$x:00009DE0                                         ; DATA XREF: .xdata$x:00009DF0o
.xdata$x:00009DE1                 db 0FFh
.xdata$x:00009DE2                 db 0FFh
.xdata$x:00009DE3                 db 0FFh
.xdata$x:00009DE4                 dd offset __unwindfunclet$??0_Generic_error_category@std@@QAE@XZ$0
.xdata$x:00009DE8 __ehfuncinfo$??0_Generic_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:00009DE8                                         ; DATA XREF: __ehhandler$??0_Generic_error_category@std@@QAE@XZ+11o
.xdata$x:00009DE9                 db    5
.xdata$x:00009DEA                 db  93h ; ô
.xdata$x:00009DEB                 db  19h
.xdata$x:00009DEC                 db    1
.xdata$x:00009DED                 db    0
.xdata$x:00009DEE                 db    0
.xdata$x:00009DEF                 db    0
.xdata$x:00009DF0                 dd offset __unwindtable$??0_Generic_error_category@std@@QAE@XZ
.xdata$x:00009DF4                 db    0
.xdata$x:00009DF5                 db    0
.xdata$x:00009DF6                 db    0
.xdata$x:00009DF7                 db    0
.xdata$x:00009DF8                 db    0
.xdata$x:00009DF9                 db    0
.xdata$x:00009DFA                 db    0
.xdata$x:00009DFB                 db    0
.xdata$x:00009DFC                 db    0
.xdata$x:00009DFD                 db    0
.xdata$x:00009DFE                 db    0
.xdata$x:00009DFF                 db    0
.xdata$x:00009E00                 db    0
.xdata$x:00009E01                 db    0
.xdata$x:00009E02                 db    0
.xdata$x:00009E03                 db    0
.xdata$x:00009E04                 db    0
.xdata$x:00009E05                 db    0
.xdata$x:00009E06                 db    0
.xdata$x:00009E07                 db    0
.xdata$x:00009E08                 db    0
.xdata$x:00009E09                 db    0
.xdata$x:00009E0A                 db    0
.xdata$x:00009E0B                 db    0
.xdata$x:00009E0B _xdata$x        ends
.xdata$x:00009E0B
.xdata$x:00009E0C ; ===========================================================================
.xdata$x:00009E0C
.xdata$x:00009E0C ; Segment type: Pure data
.xdata$x:00009E0C ; Segment permissions: Read
.xdata$x:00009E0C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009E0C                 assume cs:_xdata$x
.xdata$x:00009E0C                 ;org 9E0Ch
.xdata$x:00009E0C ; COMDAT (pick associative to section at 8EC8)
.xdata$x:00009E0C __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00009E0C                                         ; DATA XREF: .xdata$x:00009E1Co
.xdata$x:00009E0D                 db 0FFh
.xdata$x:00009E0E                 db 0FFh
.xdata$x:00009E0F                 db 0FFh
.xdata$x:00009E10                 dd offset __unwindfunclet$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00009E14 __ehfuncinfo$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00009E14                                         ; DATA XREF: __ehhandler$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00009E15                 db    5
.xdata$x:00009E16                 db  93h ; ô
.xdata$x:00009E17                 db  19h
.xdata$x:00009E18                 db    1
.xdata$x:00009E19                 db    0
.xdata$x:00009E1A                 db    0
.xdata$x:00009E1B                 db    0
.xdata$x:00009E1C                 dd offset __unwindtable$?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00009E20                 db    0
.xdata$x:00009E21                 db    0
.xdata$x:00009E22                 db    0
.xdata$x:00009E23                 db    0
.xdata$x:00009E24                 db    0
.xdata$x:00009E25                 db    0
.xdata$x:00009E26                 db    0
.xdata$x:00009E27                 db    0
.xdata$x:00009E28                 db    0
.xdata$x:00009E29                 db    0
.xdata$x:00009E2A                 db    0
.xdata$x:00009E2B                 db    0
.xdata$x:00009E2C                 db    0
.xdata$x:00009E2D                 db    0
.xdata$x:00009E2E                 db    0
.xdata$x:00009E2F                 db    0
.xdata$x:00009E30                 db    0
.xdata$x:00009E31                 db    0
.xdata$x:00009E32                 db    0
.xdata$x:00009E33                 db    0
.xdata$x:00009E34                 db    0
.xdata$x:00009E35                 db    0
.xdata$x:00009E36                 db    0
.xdata$x:00009E37                 db    0
.xdata$x:00009E37 _xdata$x        ends
.xdata$x:00009E37
.xdata$x:00009E38 ; ===========================================================================
.xdata$x:00009E38
.xdata$x:00009E38 ; Segment type: Pure data
.xdata$x:00009E38 ; Segment permissions: Read
.xdata$x:00009E38 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009E38                 assume cs:_xdata$x
.xdata$x:00009E38                 ;org 9E38h
.xdata$x:00009E38 ; COMDAT (pick associative to section at 6B48)
.xdata$x:00009E38 __unwindtable$??1_Generic_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00009E38                                         ; DATA XREF: .xdata$x:00009E48o
.xdata$x:00009E39                 db 0FFh
.xdata$x:00009E3A                 db 0FFh
.xdata$x:00009E3B                 db 0FFh
.xdata$x:00009E3C                 dd offset __unwindfunclet$??1_Generic_error_category@std@@UAE@XZ$0
.xdata$x:00009E40 __ehfuncinfo$??1_Generic_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00009E40                                         ; DATA XREF: __ehhandler$??1_Generic_error_category@std@@UAE@XZ+11o
.xdata$x:00009E41                 db    5
.xdata$x:00009E42                 db  93h ; ô
.xdata$x:00009E43                 db  19h
.xdata$x:00009E44                 db    1
.xdata$x:00009E45                 db    0
.xdata$x:00009E46                 db    0
.xdata$x:00009E47                 db    0
.xdata$x:00009E48                 dd offset __unwindtable$??1_Generic_error_category@std@@UAE@XZ
.xdata$x:00009E4C                 db    0
.xdata$x:00009E4D                 db    0
.xdata$x:00009E4E                 db    0
.xdata$x:00009E4F                 db    0
.xdata$x:00009E50                 db    0
.xdata$x:00009E51                 db    0
.xdata$x:00009E52                 db    0
.xdata$x:00009E53                 db    0
.xdata$x:00009E54                 db    0
.xdata$x:00009E55                 db    0
.xdata$x:00009E56                 db    0
.xdata$x:00009E57                 db    0
.xdata$x:00009E58                 db    0
.xdata$x:00009E59                 db    0
.xdata$x:00009E5A                 db    0
.xdata$x:00009E5B                 db    0
.xdata$x:00009E5C                 db    0
.xdata$x:00009E5D                 db    0
.xdata$x:00009E5E                 db    0
.xdata$x:00009E5F                 db    0
.xdata$x:00009E60                 db    0
.xdata$x:00009E61                 db    0
.xdata$x:00009E62                 db    0
.xdata$x:00009E63                 db    0
.xdata$x:00009E63 _xdata$x        ends
.xdata$x:00009E63
.xdata$x:00009E64 ; ===========================================================================
.xdata$x:00009E64
.xdata$x:00009E64 ; Segment type: Pure data
.xdata$x:00009E64 ; Segment permissions: Read
.xdata$x:00009E64 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009E64                 assume cs:_xdata$x
.xdata$x:00009E64                 ;org 9E64h
.xdata$x:00009E64 ; COMDAT (pick associative to section at 657C)
.xdata$x:00009E64 __unwindtable$??0_Iostream_error_category@std@@QAE@XZ db 0FFh
.xdata$x:00009E64                                         ; DATA XREF: .xdata$x:00009E74o
.xdata$x:00009E65                 db 0FFh
.xdata$x:00009E66                 db 0FFh
.xdata$x:00009E67                 db 0FFh
.xdata$x:00009E68                 dd offset __unwindfunclet$??0_Iostream_error_category@std@@QAE@XZ$0
.xdata$x:00009E6C __ehfuncinfo$??0_Iostream_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:00009E6C                                         ; DATA XREF: __ehhandler$??0_Iostream_error_category@std@@QAE@XZ+11o
.xdata$x:00009E6D                 db    5
.xdata$x:00009E6E                 db  93h ; ô
.xdata$x:00009E6F                 db  19h
.xdata$x:00009E70                 db    1
.xdata$x:00009E71                 db    0
.xdata$x:00009E72                 db    0
.xdata$x:00009E73                 db    0
.xdata$x:00009E74                 dd offset __unwindtable$??0_Iostream_error_category@std@@QAE@XZ
.xdata$x:00009E78                 db    0
.xdata$x:00009E79                 db    0
.xdata$x:00009E7A                 db    0
.xdata$x:00009E7B                 db    0
.xdata$x:00009E7C                 db    0
.xdata$x:00009E7D                 db    0
.xdata$x:00009E7E                 db    0
.xdata$x:00009E7F                 db    0
.xdata$x:00009E80                 db    0
.xdata$x:00009E81                 db    0
.xdata$x:00009E82                 db    0
.xdata$x:00009E83                 db    0
.xdata$x:00009E84                 db    0
.xdata$x:00009E85                 db    0
.xdata$x:00009E86                 db    0
.xdata$x:00009E87                 db    0
.xdata$x:00009E88                 db    0
.xdata$x:00009E89                 db    0
.xdata$x:00009E8A                 db    0
.xdata$x:00009E8B                 db    0
.xdata$x:00009E8C                 db    0
.xdata$x:00009E8D                 db    0
.xdata$x:00009E8E                 db    0
.xdata$x:00009E8F                 db    0
.xdata$x:00009E8F _xdata$x        ends
.xdata$x:00009E8F
.xdata$x:00009E90 ; ===========================================================================
.xdata$x:00009E90
.xdata$x:00009E90 ; Segment type: Pure data
.xdata$x:00009E90 ; Segment permissions: Read
.xdata$x:00009E90 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009E90                 assume cs:_xdata$x
.xdata$x:00009E90                 ;org 9E90h
.xdata$x:00009E90 ; COMDAT (pick associative to section at 8F80)
.xdata$x:00009E90 __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00009E90                                         ; DATA XREF: .xdata$x:00009EA0o
.xdata$x:00009E91                 db 0FFh
.xdata$x:00009E92                 db 0FFh
.xdata$x:00009E93                 db 0FFh
.xdata$x:00009E94                 dd offset __unwindfunclet$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00009E98 __ehfuncinfo$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00009E98                                         ; DATA XREF: __ehhandler$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00009E99                 db    5
.xdata$x:00009E9A                 db  93h ; ô
.xdata$x:00009E9B                 db  19h
.xdata$x:00009E9C                 db    1
.xdata$x:00009E9D                 db    0
.xdata$x:00009E9E                 db    0
.xdata$x:00009E9F                 db    0
.xdata$x:00009EA0                 dd offset __unwindtable$?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00009EA4                 db    0
.xdata$x:00009EA5                 db    0
.xdata$x:00009EA6                 db    0
.xdata$x:00009EA7                 db    0
.xdata$x:00009EA8                 db    0
.xdata$x:00009EA9                 db    0
.xdata$x:00009EAA                 db    0
.xdata$x:00009EAB                 db    0
.xdata$x:00009EAC                 db    0
.xdata$x:00009EAD                 db    0
.xdata$x:00009EAE                 db    0
.xdata$x:00009EAF                 db    0
.xdata$x:00009EB0                 db    0
.xdata$x:00009EB1                 db    0
.xdata$x:00009EB2                 db    0
.xdata$x:00009EB3                 db    0
.xdata$x:00009EB4                 db    0
.xdata$x:00009EB5                 db    0
.xdata$x:00009EB6                 db    0
.xdata$x:00009EB7                 db    0
.xdata$x:00009EB8                 db    0
.xdata$x:00009EB9                 db    0
.xdata$x:00009EBA                 db    0
.xdata$x:00009EBB                 db    0
.xdata$x:00009EBB _xdata$x        ends
.xdata$x:00009EBB
.xdata$x:00009EBC ; ===========================================================================
.xdata$x:00009EBC
.xdata$x:00009EBC ; Segment type: Pure data
.xdata$x:00009EBC ; Segment permissions: Read
.xdata$x:00009EBC _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009EBC                 assume cs:_xdata$x
.xdata$x:00009EBC                 ;org 9EBCh
.xdata$x:00009EBC ; COMDAT (pick associative to section at 6BB8)
.xdata$x:00009EBC __unwindtable$??1_Iostream_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00009EBC                                         ; DATA XREF: .xdata$x:00009ECCo
.xdata$x:00009EBD                 db 0FFh
.xdata$x:00009EBE                 db 0FFh
.xdata$x:00009EBF                 db 0FFh
.xdata$x:00009EC0                 dd offset __unwindfunclet$??1_Iostream_error_category@std@@UAE@XZ$0
.xdata$x:00009EC4 __ehfuncinfo$??1_Iostream_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00009EC4                                         ; DATA XREF: __ehhandler$??1_Iostream_error_category@std@@UAE@XZ+11o
.xdata$x:00009EC5                 db    5
.xdata$x:00009EC6                 db  93h ; ô
.xdata$x:00009EC7                 db  19h
.xdata$x:00009EC8                 db    1
.xdata$x:00009EC9                 db    0
.xdata$x:00009ECA                 db    0
.xdata$x:00009ECB                 db    0
.xdata$x:00009ECC                 dd offset __unwindtable$??1_Iostream_error_category@std@@UAE@XZ
.xdata$x:00009ED0                 db    0
.xdata$x:00009ED1                 db    0
.xdata$x:00009ED2                 db    0
.xdata$x:00009ED3                 db    0
.xdata$x:00009ED4                 db    0
.xdata$x:00009ED5                 db    0
.xdata$x:00009ED6                 db    0
.xdata$x:00009ED7                 db    0
.xdata$x:00009ED8                 db    0
.xdata$x:00009ED9                 db    0
.xdata$x:00009EDA                 db    0
.xdata$x:00009EDB                 db    0
.xdata$x:00009EDC                 db    0
.xdata$x:00009EDD                 db    0
.xdata$x:00009EDE                 db    0
.xdata$x:00009EDF                 db    0
.xdata$x:00009EE0                 db    0
.xdata$x:00009EE1                 db    0
.xdata$x:00009EE2                 db    0
.xdata$x:00009EE3                 db    0
.xdata$x:00009EE4                 db    0
.xdata$x:00009EE5                 db    0
.xdata$x:00009EE6                 db    0
.xdata$x:00009EE7                 db    0
.xdata$x:00009EE7 _xdata$x        ends
.xdata$x:00009EE7
.xdata$x:00009EE8 ; ===========================================================================
.xdata$x:00009EE8
.xdata$x:00009EE8 ; Segment type: Pure data
.xdata$x:00009EE8 ; Segment permissions: Read
.xdata$x:00009EE8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009EE8                 assume cs:_xdata$x
.xdata$x:00009EE8                 ;org 9EE8h
.xdata$x:00009EE8 ; COMDAT (pick associative to section at 664C)
.xdata$x:00009EE8 __unwindtable$??0_System_error_category@std@@QAE@XZ db 0FFh
.xdata$x:00009EE8                                         ; DATA XREF: .xdata$x:00009EF8o
.xdata$x:00009EE9                 db 0FFh
.xdata$x:00009EEA                 db 0FFh
.xdata$x:00009EEB                 db 0FFh
.xdata$x:00009EEC                 dd offset __unwindfunclet$??0_System_error_category@std@@QAE@XZ$0
.xdata$x:00009EF0 __ehfuncinfo$??0_System_error_category@std@@QAE@XZ db  22h ; "
.xdata$x:00009EF0                                         ; DATA XREF: __ehhandler$??0_System_error_category@std@@QAE@XZ+11o
.xdata$x:00009EF1                 db    5
.xdata$x:00009EF2                 db  93h ; ô
.xdata$x:00009EF3                 db  19h
.xdata$x:00009EF4                 db    1
.xdata$x:00009EF5                 db    0
.xdata$x:00009EF6                 db    0
.xdata$x:00009EF7                 db    0
.xdata$x:00009EF8                 dd offset __unwindtable$??0_System_error_category@std@@QAE@XZ
.xdata$x:00009EFC                 db    0
.xdata$x:00009EFD                 db    0
.xdata$x:00009EFE                 db    0
.xdata$x:00009EFF                 db    0
.xdata$x:00009F00                 db    0
.xdata$x:00009F01                 db    0
.xdata$x:00009F02                 db    0
.xdata$x:00009F03                 db    0
.xdata$x:00009F04                 db    0
.xdata$x:00009F05                 db    0
.xdata$x:00009F06                 db    0
.xdata$x:00009F07                 db    0
.xdata$x:00009F08                 db    0
.xdata$x:00009F09                 db    0
.xdata$x:00009F0A                 db    0
.xdata$x:00009F0B                 db    0
.xdata$x:00009F0C                 db    0
.xdata$x:00009F0D                 db    0
.xdata$x:00009F0E                 db    0
.xdata$x:00009F0F                 db    0
.xdata$x:00009F10                 db    0
.xdata$x:00009F11                 db    0
.xdata$x:00009F12                 db    0
.xdata$x:00009F13                 db    0
.xdata$x:00009F13 _xdata$x        ends
.xdata$x:00009F13
.xdata$x:00009F14 ; ===========================================================================
.xdata$x:00009F14
.xdata$x:00009F14 ; Segment type: Pure data
.xdata$x:00009F14 ; Segment permissions: Read
.xdata$x:00009F14 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009F14                 assume cs:_xdata$x
.xdata$x:00009F14                 ;org 9F14h
.xdata$x:00009F14 ; COMDAT (pick associative to section at 9044)
.xdata$x:00009F14 __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db 0FFh
.xdata$x:00009F14                                         ; DATA XREF: .xdata$x:00009F24o
.xdata$x:00009F15                 db 0FFh
.xdata$x:00009F16                 db 0FFh
.xdata$x:00009F17                 db 0FFh
.xdata$x:00009F18                 dd offset __unwindfunclet$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z$0
.xdata$x:00009F1C __ehfuncinfo$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z db  22h ; "
.xdata$x:00009F1C                                         ; DATA XREF: __ehhandler$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z+11o
.xdata$x:00009F1D                 db    5
.xdata$x:00009F1E                 db  93h ; ô
.xdata$x:00009F1F                 db  19h
.xdata$x:00009F20                 db    1
.xdata$x:00009F21                 db    0
.xdata$x:00009F22                 db    0
.xdata$x:00009F23                 db    0
.xdata$x:00009F24                 dd offset __unwindtable$?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z
.xdata$x:00009F28                 align 20h
.xdata$x:00009F28 _xdata$x        ends
.xdata$x:00009F28
.xdata$x:00009F40 ; ===========================================================================
.xdata$x:00009F40
.xdata$x:00009F40 ; Segment type: Pure data
.xdata$x:00009F40 ; Segment permissions: Read
.xdata$x:00009F40 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009F40                 assume cs:_xdata$x
.xdata$x:00009F40                 ;org 9F40h
.xdata$x:00009F40 ; COMDAT (pick associative to section at 6CAC)
.xdata$x:00009F40 __unwindtable$??1_System_error_category@std@@UAE@XZ db 0FFh
.xdata$x:00009F40                                         ; DATA XREF: .xdata$x:00009F50o
.xdata$x:00009F41                 db 0FFh
.xdata$x:00009F42                 db 0FFh
.xdata$x:00009F43                 db 0FFh
.xdata$x:00009F44                 dd offset __unwindfunclet$??1_System_error_category@std@@UAE@XZ$0
.xdata$x:00009F48 __ehfuncinfo$??1_System_error_category@std@@UAE@XZ db  22h ; "
.xdata$x:00009F48                                         ; DATA XREF: __ehhandler$??1_System_error_category@std@@UAE@XZ+11o
.xdata$x:00009F49                 db    5
.xdata$x:00009F4A                 db  93h ; ô
.xdata$x:00009F4B                 db  19h
.xdata$x:00009F4C                 db    1
.xdata$x:00009F4D                 db    0
.xdata$x:00009F4E                 db    0
.xdata$x:00009F4F                 db    0
.xdata$x:00009F50                 dd offset __unwindtable$??1_System_error_category@std@@UAE@XZ
.xdata$x:00009F54                 db    0
.xdata$x:00009F55                 db    0
.xdata$x:00009F56                 db    0
.xdata$x:00009F57                 db    0
.xdata$x:00009F58                 db    0
.xdata$x:00009F59                 db    0
.xdata$x:00009F5A                 db    0
.xdata$x:00009F5B                 db    0
.xdata$x:00009F5C                 db    0
.xdata$x:00009F5D                 db    0
.xdata$x:00009F5E                 db    0
.xdata$x:00009F5F                 db    0
.xdata$x:00009F60                 db    0
.xdata$x:00009F61                 db    0
.xdata$x:00009F62                 db    0
.xdata$x:00009F63                 db    0
.xdata$x:00009F64                 db    0
.xdata$x:00009F65                 db    0
.xdata$x:00009F66                 db    0
.xdata$x:00009F67                 db    0
.xdata$x:00009F68                 db    0
.xdata$x:00009F69                 db    0
.xdata$x:00009F6A                 db    0
.xdata$x:00009F6B                 db    0
.xdata$x:00009F6B _xdata$x        ends
.xdata$x:00009F6B
.xdata$x:00009F6C ; ===========================================================================
.xdata$x:00009F6C
.xdata$x:00009F6C ; Segment type: Pure data
.xdata$x:00009F6C ; Segment permissions: Read
.xdata$x:00009F6C _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009F6C                 assume cs:_xdata$x
.xdata$x:00009F6C                 ;org 9F6Ch
.xdata$x:00009F6C ; COMDAT (pick associative to section at 6134)
.xdata$x:00009F6C __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009F6C                                         ; DATA XREF: .xdata$x:00009F7Co
.xdata$x:00009F6D                 db 0FFh
.xdata$x:00009F6E                 db 0FFh
.xdata$x:00009F6F                 db 0FFh
.xdata$x:00009F70                 dd offset __unwindfunclet$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:00009F74 __ehfuncinfo$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009F74                                         ; DATA XREF: __ehhandler$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:00009F75                 db    5
.xdata$x:00009F76                 db  93h ; ô
.xdata$x:00009F77                 db  19h
.xdata$x:00009F78                 db    1
.xdata$x:00009F79                 db    0
.xdata$x:00009F7A                 db    0
.xdata$x:00009F7B                 db    0
.xdata$x:00009F7C                 dd offset __unwindtable$??0?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:00009F80                 db    0
.xdata$x:00009F81                 db    0
.xdata$x:00009F82                 db    0
.xdata$x:00009F83                 db    0
.xdata$x:00009F84                 db    0
.xdata$x:00009F85                 db    0
.xdata$x:00009F86                 db    0
.xdata$x:00009F87                 db    0
.xdata$x:00009F88                 db    0
.xdata$x:00009F89                 db    0
.xdata$x:00009F8A                 db    0
.xdata$x:00009F8B                 db    0
.xdata$x:00009F8C                 db    0
.xdata$x:00009F8D                 db    0
.xdata$x:00009F8E                 db    0
.xdata$x:00009F8F                 db    0
.xdata$x:00009F90                 db    0
.xdata$x:00009F91                 db    0
.xdata$x:00009F92                 db    0
.xdata$x:00009F93                 db    0
.xdata$x:00009F94                 db    0
.xdata$x:00009F95                 db    0
.xdata$x:00009F96                 db    0
.xdata$x:00009F97                 db    0
.xdata$x:00009F97 _xdata$x        ends
.xdata$x:00009F97
.xdata$x:00009F98 ; ===========================================================================
.xdata$x:00009F98
.xdata$x:00009F98 ; Segment type: Pure data
.xdata$x:00009F98 ; Segment permissions: Read
.xdata$x:00009F98 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009F98                 assume cs:_xdata$x
.xdata$x:00009F98                 ;org 9F98h
.xdata$x:00009F98 ; COMDAT (pick associative to section at 69CC)
.xdata$x:00009F98 __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009F98                                         ; DATA XREF: .xdata$x:00009FA8o
.xdata$x:00009F99                 db 0FFh
.xdata$x:00009F9A                 db 0FFh
.xdata$x:00009F9B                 db 0FFh
.xdata$x:00009F9C                 dd offset __unwindfunclet$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ$0
.xdata$x:00009FA0 __ehfuncinfo$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009FA0                                         ; DATA XREF: __ehhandler$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ+11o
.xdata$x:00009FA1                 db    5
.xdata$x:00009FA2                 db  93h ; ô
.xdata$x:00009FA3                 db  19h
.xdata$x:00009FA4                 db    1
.xdata$x:00009FA5                 db    0
.xdata$x:00009FA6                 db    0
.xdata$x:00009FA7                 db    0
.xdata$x:00009FA8                 dd offset __unwindtable$??1?$_String_val@U?$_Simple_types@_W@std@@@std@@QAE@XZ
.xdata$x:00009FAC                 db    0
.xdata$x:00009FAD                 db    0
.xdata$x:00009FAE                 db    0
.xdata$x:00009FAF                 db    0
.xdata$x:00009FB0                 db    0
.xdata$x:00009FB1                 db    0
.xdata$x:00009FB2                 db    0
.xdata$x:00009FB3                 db    0
.xdata$x:00009FB4                 db    0
.xdata$x:00009FB5                 db    0
.xdata$x:00009FB6                 db    0
.xdata$x:00009FB7                 db    0
.xdata$x:00009FB8                 db    0
.xdata$x:00009FB9                 db    0
.xdata$x:00009FBA                 db    0
.xdata$x:00009FBB                 db    0
.xdata$x:00009FBC                 db    0
.xdata$x:00009FBD                 db    0
.xdata$x:00009FBE                 db    0
.xdata$x:00009FBF                 db    0
.xdata$x:00009FC0                 db    0
.xdata$x:00009FC1                 db    0
.xdata$x:00009FC2                 db    0
.xdata$x:00009FC3                 db    0
.xdata$x:00009FC3 _xdata$x        ends
.xdata$x:00009FC3
.xdata$x:00009FC4 ; ===========================================================================
.xdata$x:00009FC4
.xdata$x:00009FC4 ; Segment type: Pure data
.xdata$x:00009FC4 ; Segment permissions: Read
.xdata$x:00009FC4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009FC4                 assume cs:_xdata$x
.xdata$x:00009FC4                 ;org 9FC4h
.xdata$x:00009FC4 ; COMDAT (pick associative to section at 5E2C)
.xdata$x:00009FC4 __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db 0FFh
.xdata$x:00009FC4                                         ; DATA XREF: .xdata$x:00009FD4o
.xdata$x:00009FC5                 db 0FFh
.xdata$x:00009FC6                 db 0FFh
.xdata$x:00009FC7                 db 0FFh
.xdata$x:00009FC8                 dd offset __unwindfunclet$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z$0
.xdata$x:00009FCC __ehfuncinfo$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z db  22h ; "
.xdata$x:00009FCC                                         ; DATA XREF: __ehhandler$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z+11o
.xdata$x:00009FCD                 db    5
.xdata$x:00009FCE                 db  93h ; ô
.xdata$x:00009FCF                 db  19h
.xdata$x:00009FD0                 db    1
.xdata$x:00009FD1                 db    0
.xdata$x:00009FD2                 db    0
.xdata$x:00009FD3                 db    0
.xdata$x:00009FD4                 dd offset __unwindtable$??0?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@ABV?$allocator@_W@1@@Z
.xdata$x:00009FD8                 db    0
.xdata$x:00009FD9                 db    0
.xdata$x:00009FDA                 db    0
.xdata$x:00009FDB                 db    0
.xdata$x:00009FDC                 db    0
.xdata$x:00009FDD                 db    0
.xdata$x:00009FDE                 db    0
.xdata$x:00009FDF                 db    0
.xdata$x:00009FE0                 db    0
.xdata$x:00009FE1                 db    0
.xdata$x:00009FE2                 db    0
.xdata$x:00009FE3                 db    0
.xdata$x:00009FE4                 db    0
.xdata$x:00009FE5                 db    0
.xdata$x:00009FE6                 db    0
.xdata$x:00009FE7                 db    0
.xdata$x:00009FE8                 db    0
.xdata$x:00009FE9                 db    0
.xdata$x:00009FEA                 db    0
.xdata$x:00009FEB                 db    0
.xdata$x:00009FEC                 db    0
.xdata$x:00009FED                 db    0
.xdata$x:00009FEE                 db    0
.xdata$x:00009FEF                 db    0
.xdata$x:00009FEF _xdata$x        ends
.xdata$x:00009FEF
.xdata$x:00009FF0 ; ===========================================================================
.xdata$x:00009FF0
.xdata$x:00009FF0 ; Segment type: Pure data
.xdata$x:00009FF0 ; Segment permissions: Read
.xdata$x:00009FF0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:00009FF0                 assume cs:_xdata$x
.xdata$x:00009FF0                 ;org 9FF0h
.xdata$x:00009FF0 ; COMDAT (pick associative to section at 6804)
.xdata$x:00009FF0 __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:00009FF0                                         ; DATA XREF: .xdata$x:0000A000o
.xdata$x:00009FF1                 db 0FFh
.xdata$x:00009FF2                 db 0FFh
.xdata$x:00009FF3                 db 0FFh
.xdata$x:00009FF4                 dd offset __unwindfunclet$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:00009FF8 __ehfuncinfo$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:00009FF8                                         ; DATA XREF: __ehhandler$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:00009FF9                 db    5
.xdata$x:00009FFA                 db  93h ; ô
.xdata$x:00009FFB                 db  19h
.xdata$x:00009FFC                 db    1
.xdata$x:00009FFD                 db    0
.xdata$x:00009FFE                 db    0
.xdata$x:00009FFF                 db    0
.xdata$x:0000A000                 dd offset __unwindtable$??1?$_String_alloc@$0A@U?$_String_base_types@_WV?$allocator@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000A004                 db    0
.xdata$x:0000A005                 db    0
.xdata$x:0000A006                 db    0
.xdata$x:0000A007                 db    0
.xdata$x:0000A008                 db    0
.xdata$x:0000A009                 db    0
.xdata$x:0000A00A                 db    0
.xdata$x:0000A00B                 db    0
.xdata$x:0000A00C                 db    0
.xdata$x:0000A00D                 db    0
.xdata$x:0000A00E                 db    0
.xdata$x:0000A00F                 db    0
.xdata$x:0000A010                 db    0
.xdata$x:0000A011                 db    0
.xdata$x:0000A012                 db    0
.xdata$x:0000A013                 db    0
.xdata$x:0000A014                 db    0
.xdata$x:0000A015                 db    0
.xdata$x:0000A016                 db    0
.xdata$x:0000A017                 db    0
.xdata$x:0000A018                 db    0
.xdata$x:0000A019                 db    0
.xdata$x:0000A01A                 db    0
.xdata$x:0000A01B                 db    0
.xdata$x:0000A01B _xdata$x        ends
.xdata$x:0000A01B
.xdata$x:0000A01C ; ===========================================================================
.xdata$x:0000A01C
.xdata$x:0000A01C ; Segment type: Pure data
.xdata$x:0000A01C ; Segment permissions: Read
.xdata$x:0000A01C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A01C                 assume cs:_xdata$x
.xdata$x:0000A01C                 ;org 0A01Ch
.xdata$x:0000A01C ; COMDAT (pick associative to section at 62E0)
.xdata$x:0000A01C __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000A01C                                         ; DATA XREF: .xdata$x:0000A02Co
.xdata$x:0000A01D                 db 0FFh
.xdata$x:0000A01E                 db 0FFh
.xdata$x:0000A01F                 db 0FFh
.xdata$x:0000A020                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z$0
.xdata$x:0000A024 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000A024                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000A025                 db    5
.xdata$x:0000A026                 db  93h ; ô
.xdata$x:0000A027                 db  19h
.xdata$x:0000A028                 db    1
.xdata$x:0000A029                 db    0
.xdata$x:0000A02A                 db    0
.xdata$x:0000A02B                 db    0
.xdata$x:0000A02C                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@ABV01@@Z
.xdata$x:0000A030                 db    0
.xdata$x:0000A031                 db    0
.xdata$x:0000A032                 db    0
.xdata$x:0000A033                 db    0
.xdata$x:0000A034                 db    0
.xdata$x:0000A035                 db    0
.xdata$x:0000A036                 db    0
.xdata$x:0000A037                 db    0
.xdata$x:0000A038                 db    0
.xdata$x:0000A039                 db    0
.xdata$x:0000A03A                 db    0
.xdata$x:0000A03B                 db    0
.xdata$x:0000A03C                 db    0
.xdata$x:0000A03D                 db    0
.xdata$x:0000A03E                 db    0
.xdata$x:0000A03F                 db    0
.xdata$x:0000A040                 db    0
.xdata$x:0000A041                 db    0
.xdata$x:0000A042                 db    0
.xdata$x:0000A043                 db    0
.xdata$x:0000A044                 db    0
.xdata$x:0000A045                 db    0
.xdata$x:0000A046                 db    0
.xdata$x:0000A047                 db    0
.xdata$x:0000A047 _xdata$x        ends
.xdata$x:0000A047
.xdata$x:0000A048 ; ===========================================================================
.xdata$x:0000A048
.xdata$x:0000A048 ; Segment type: Pure data
.xdata$x:0000A048 ; Segment permissions: Read
.xdata$x:0000A048 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A048                 assume cs:_xdata$x
.xdata$x:0000A048                 ;org 0A048h
.xdata$x:0000A048 ; COMDAT (pick associative to section at 6428)
.xdata$x:0000A048 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000A048                                         ; DATA XREF: .xdata$x:0000A058o
.xdata$x:0000A049                 db 0FFh
.xdata$x:0000A04A                 db 0FFh
.xdata$x:0000A04B                 db 0FFh
.xdata$x:0000A04C                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000A050 __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000A050                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000A051                 db    5
.xdata$x:0000A052                 db  93h ; ô
.xdata$x:0000A053                 db  19h
.xdata$x:0000A054                 db    1
.xdata$x:0000A055                 db    0
.xdata$x:0000A056                 db    0
.xdata$x:0000A057                 db    0
.xdata$x:0000A058                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000A05C                 db    0
.xdata$x:0000A05D                 db    0
.xdata$x:0000A05E                 db    0
.xdata$x:0000A05F                 db    0
.xdata$x:0000A060                 db    0
.xdata$x:0000A061                 db    0
.xdata$x:0000A062                 db    0
.xdata$x:0000A063                 db    0
.xdata$x:0000A064                 db    0
.xdata$x:0000A065                 db    0
.xdata$x:0000A066                 db    0
.xdata$x:0000A067                 db    0
.xdata$x:0000A068                 db    0
.xdata$x:0000A069                 db    0
.xdata$x:0000A06A                 db    0
.xdata$x:0000A06B                 db    0
.xdata$x:0000A06C                 db    0
.xdata$x:0000A06D                 db    0
.xdata$x:0000A06E                 db    0
.xdata$x:0000A06F                 db    0
.xdata$x:0000A070                 db    0
.xdata$x:0000A071                 db    0
.xdata$x:0000A072                 db    0
.xdata$x:0000A073                 db    0
.xdata$x:0000A073 _xdata$x        ends
.xdata$x:0000A073
.xdata$x:0000A074 ; ===========================================================================
.xdata$x:0000A074
.xdata$x:0000A074 ; Segment type: Pure data
.xdata$x:0000A074 ; Segment permissions: Read
.xdata$x:0000A074 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A074                 assume cs:_xdata$x
.xdata$x:0000A074                 ;org 0A074h
.xdata$x:0000A074 ; COMDAT (pick associative to section at 6390)
.xdata$x:0000A074 __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db 0FFh
.xdata$x:0000A074                                         ; DATA XREF: .xdata$x:0000A084o
.xdata$x:0000A075                 db 0FFh
.xdata$x:0000A076                 db 0FFh
.xdata$x:0000A077                 db 0FFh
.xdata$x:0000A078                 dd offset __unwindfunclet$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z$0
.xdata$x:0000A07C __ehfuncinfo$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z db  22h ; "
.xdata$x:0000A07C                                         ; DATA XREF: __ehhandler$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z+11o
.xdata$x:0000A07D                 db    5
.xdata$x:0000A07E                 db  93h ; ô
.xdata$x:0000A07F                 db  19h
.xdata$x:0000A080                 db    1
.xdata$x:0000A081                 db    0
.xdata$x:0000A082                 db    0
.xdata$x:0000A083                 db    0
.xdata$x:0000A084                 dd offset __unwindtable$??0?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@PB_W@Z
.xdata$x:0000A088                 align 20h
.xdata$x:0000A088 _xdata$x        ends
.xdata$x:0000A088
.xdata$x:0000A0A0 ; ===========================================================================
.xdata$x:0000A0A0
.xdata$x:0000A0A0 ; Segment type: Pure data
.xdata$x:0000A0A0 ; Segment permissions: Read
.xdata$x:0000A0A0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A0A0                 assume cs:_xdata$x
.xdata$x:0000A0A0                 ;org 0A0A0h
.xdata$x:0000A0A0 ; COMDAT (pick associative to section at 6D40)
.xdata$x:0000A0A0 __unwindtable$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z db 0FFh
.xdata$x:0000A0A0                                         ; DATA XREF: .xdata$x:0000A0B8o
.xdata$x:0000A0A1                 db 0FFh
.xdata$x:0000A0A2                 db 0FFh
.xdata$x:0000A0A3                 db 0FFh
.xdata$x:0000A0A4                 dd offset __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$0
.xdata$x:0000A0A8                 db    0
.xdata$x:0000A0A9                 db    0
.xdata$x:0000A0AA                 db    0
.xdata$x:0000A0AB                 db    0
.xdata$x:0000A0AC                 dd offset __unwindfunclet$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z$1
.xdata$x:0000A0B0 __ehfuncinfo$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z db  22h ; "
.xdata$x:0000A0B0                                         ; DATA XREF: __ehhandler$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z+11o
.xdata$x:0000A0B1                 db    5
.xdata$x:0000A0B2                 db  93h ; ô
.xdata$x:0000A0B3                 db  19h
.xdata$x:0000A0B4                 db    2
.xdata$x:0000A0B5                 db    0
.xdata$x:0000A0B6                 db    0
.xdata$x:0000A0B7                 db    0
.xdata$x:0000A0B8                 dd offset __unwindtable$??4?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@$$QAV01@@Z
.xdata$x:0000A0BC                 db    0
.xdata$x:0000A0BD                 db    0
.xdata$x:0000A0BE                 db    0
.xdata$x:0000A0BF                 db    0
.xdata$x:0000A0C0                 db    0
.xdata$x:0000A0C1                 db    0
.xdata$x:0000A0C2                 db    0
.xdata$x:0000A0C3                 db    0
.xdata$x:0000A0C4                 db    0
.xdata$x:0000A0C5                 db    0
.xdata$x:0000A0C6                 db    0
.xdata$x:0000A0C7                 db    0
.xdata$x:0000A0C8                 db    0
.xdata$x:0000A0C9                 db    0
.xdata$x:0000A0CA                 db    0
.xdata$x:0000A0CB                 db    0
.xdata$x:0000A0CC                 db    0
.xdata$x:0000A0CD                 db    0
.xdata$x:0000A0CE                 db    0
.xdata$x:0000A0CF                 db    0
.xdata$x:0000A0D0                 db    0
.xdata$x:0000A0D1                 db    0
.xdata$x:0000A0D2                 db    0
.xdata$x:0000A0D3                 db    0
.xdata$x:0000A0D3 _xdata$x        ends
.xdata$x:0000A0D3
.xdata$x:0000A0D4 ; ===========================================================================
.xdata$x:0000A0D4
.xdata$x:0000A0D4 ; Segment type: Pure data
.xdata$x:0000A0D4 ; Segment permissions: Read
.xdata$x:0000A0D4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A0D4                 assume cs:_xdata$x
.xdata$x:0000A0D4                 ;org 0A0D4h
.xdata$x:0000A0D4 ; COMDAT (pick associative to section at 6AB8)
.xdata$x:0000A0D4 __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000A0D4                                         ; DATA XREF: .xdata$x:0000A0E4o
.xdata$x:0000A0D5                 db 0FFh
.xdata$x:0000A0D6                 db 0FFh
.xdata$x:0000A0D7                 db 0FFh
.xdata$x:0000A0D8                 dd offset __unwindfunclet$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ$0
.xdata$x:0000A0DC __ehfuncinfo$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000A0DC                                         ; DATA XREF: __ehhandler$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ+11o
.xdata$x:0000A0DD                 db    5
.xdata$x:0000A0DE                 db  93h ; ô
.xdata$x:0000A0DF                 db  19h
.xdata$x:0000A0E0                 db    1
.xdata$x:0000A0E1                 db    0
.xdata$x:0000A0E2                 db    0
.xdata$x:0000A0E3                 db    0
.xdata$x:0000A0E4                 dd offset __unwindtable$??1?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE@XZ
.xdata$x:0000A0E8                 align 20h
.xdata$x:0000A0E8 _xdata$x        ends
.xdata$x:0000A0E8
.xdata$x:0000A100 ; ===========================================================================
.xdata$x:0000A100
.xdata$x:0000A100 ; Segment type: Pure data
.xdata$x:0000A100 ; Segment permissions: Read
.xdata$x:0000A100 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A100                 assume cs:_xdata$x
.xdata$x:0000A100                 ;org 0A100h
.xdata$x:0000A100 ; COMDAT (pick associative to section at 9648)
.xdata$x:0000A100 __ehfuncinfo$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z db  22h ; "
.xdata$x:0000A100                                         ; DATA XREF: __ehhandler$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z+14o
.xdata$x:0000A101                 db    5
.xdata$x:0000A102                 db  93h ; ô
.xdata$x:0000A103                 db  19h
.xdata$x:0000A104                 db  0Eh
.xdata$x:0000A105                 db    0
.xdata$x:0000A106                 db    0
.xdata$x:0000A107                 db    0
.xdata$x:0000A108                 dd offset __unwindtable$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z
.xdata$x:0000A10C                 db    0
.xdata$x:0000A10D                 db    0
.xdata$x:0000A10E                 db    0
.xdata$x:0000A10F                 db    0
.xdata$x:0000A110                 db    0
.xdata$x:0000A111                 db    0
.xdata$x:0000A112                 db    0
.xdata$x:0000A113                 db    0
.xdata$x:0000A114                 db    0
.xdata$x:0000A115                 db    0
.xdata$x:0000A116                 db    0
.xdata$x:0000A117                 db    0
.xdata$x:0000A118                 db    0
.xdata$x:0000A119                 db    0
.xdata$x:0000A11A                 db    0
.xdata$x:0000A11B                 db    0
.xdata$x:0000A11C                 db    0
.xdata$x:0000A11D                 db    0
.xdata$x:0000A11E                 db    0
.xdata$x:0000A11F                 db    0
.xdata$x:0000A120                 db    0
.xdata$x:0000A121                 db    0
.xdata$x:0000A122                 db    0
.xdata$x:0000A123                 db    0
.xdata$x:0000A124 __unwindtable$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z db 0FFh
.xdata$x:0000A124                                         ; DATA XREF: .xdata$x:0000A108o
.xdata$x:0000A125                 db 0FFh
.xdata$x:0000A126                 db 0FFh
.xdata$x:0000A127                 db 0FFh
.xdata$x:0000A128                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$0
.xdata$x:0000A12C                 align 10h
.xdata$x:0000A130                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$1
.xdata$x:0000A134                 db    1
.xdata$x:0000A135                 db    0
.xdata$x:0000A136                 db    0
.xdata$x:0000A137                 db    0
.xdata$x:0000A138                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$2
.xdata$x:0000A13C                 db    2
.xdata$x:0000A13D                 db    0
.xdata$x:0000A13E                 db    0
.xdata$x:0000A13F                 db    0
.xdata$x:0000A140                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$3
.xdata$x:0000A144                 db    3
.xdata$x:0000A145                 db    0
.xdata$x:0000A146                 db    0
.xdata$x:0000A147                 db    0
.xdata$x:0000A148                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$4
.xdata$x:0000A14C                 db    4
.xdata$x:0000A14D                 db    0
.xdata$x:0000A14E                 db    0
.xdata$x:0000A14F                 db    0
.xdata$x:0000A150                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$5
.xdata$x:0000A154                 db    3
.xdata$x:0000A155                 db    0
.xdata$x:0000A156                 db    0
.xdata$x:0000A157                 db    0
.xdata$x:0000A158                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$6
.xdata$x:0000A15C                 db    6
.xdata$x:0000A15D                 db    0
.xdata$x:0000A15E                 db    0
.xdata$x:0000A15F                 db    0
.xdata$x:0000A160                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$7
.xdata$x:0000A164                 db    7
.xdata$x:0000A165                 db    0
.xdata$x:0000A166                 db    0
.xdata$x:0000A167                 db    0
.xdata$x:0000A168                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$8
.xdata$x:0000A16C                 db    3
.xdata$x:0000A16D                 db    0
.xdata$x:0000A16E                 db    0
.xdata$x:0000A16F                 db    0
.xdata$x:0000A170                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$9
.xdata$x:0000A174                 db    9
.xdata$x:0000A175                 db    0
.xdata$x:0000A176                 db    0
.xdata$x:0000A177                 db    0
.xdata$x:0000A178                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$10
.xdata$x:0000A17C                 db    3
.xdata$x:0000A17D                 db    0
.xdata$x:0000A17E                 db    0
.xdata$x:0000A17F                 db    0
.xdata$x:0000A180                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$11
.xdata$x:0000A184                 db  0Bh
.xdata$x:0000A185                 db    0
.xdata$x:0000A186                 db    0
.xdata$x:0000A187                 db    0
.xdata$x:0000A188                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$12
.xdata$x:0000A18C                 db  0Ch
.xdata$x:0000A18D                 db    0
.xdata$x:0000A18E                 db    0
.xdata$x:0000A18F                 db    0
.xdata$x:0000A190                 dd offset __unwindfunclet$?replace@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV12@V?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@1@Z$13
.xdata$x:0000A190 _xdata$x        ends
.xdata$x:0000A190
.xdata$x:0000A194 ; ===========================================================================
.xdata$x:0000A194
.xdata$x:0000A194 ; Segment type: Pure data
.xdata$x:0000A194 ; Segment permissions: Read
.xdata$x:0000A194 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A194                 assume cs:_xdata$x
.xdata$x:0000A194                 ;org 0A194h
.xdata$x:0000A194 ; COMDAT (pick associative to section at 872C)
.xdata$x:0000A194 __unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000A194                                         ; DATA XREF: .xdata$x:0000A1A4o
.xdata$x:0000A195                 db 0FFh
.xdata$x:0000A196                 db 0FFh
.xdata$x:0000A197                 db 0FFh
.xdata$x:0000A198                 dd offset __unwindfunclet$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
.xdata$x:0000A19C __ehfuncinfo$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000A19C                                         ; DATA XREF: __ehhandler$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ+11o
.xdata$x:0000A19D                 db    5
.xdata$x:0000A19E                 db  93h ; ô
.xdata$x:0000A19F                 db  19h
.xdata$x:0000A1A0                 db    1
.xdata$x:0000A1A1                 db    0
.xdata$x:0000A1A2                 db    0
.xdata$x:0000A1A3                 db    0
.xdata$x:0000A1A4                 dd offset __unwindtable$?begin@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.xdata$x:0000A1A8                 align 20h
.xdata$x:0000A1A8 _xdata$x        ends
.xdata$x:0000A1A8
.xdata$x:0000A1C0 ; ===========================================================================
.xdata$x:0000A1C0
.xdata$x:0000A1C0 ; Segment type: Pure data
.xdata$x:0000A1C0 ; Segment permissions: Read
.xdata$x:0000A1C0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A1C0                 assume cs:_xdata$x
.xdata$x:0000A1C0                 ;org 0A1C0h
.xdata$x:0000A1C0 ; COMDAT (pick associative to section at 89B8)
.xdata$x:0000A1C0 __unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db 0FFh
.xdata$x:0000A1C0                                         ; DATA XREF: .xdata$x:0000A1D0o
.xdata$x:0000A1C1                 db 0FFh
.xdata$x:0000A1C2                 db 0FFh
.xdata$x:0000A1C3                 db 0FFh
.xdata$x:0000A1C4                 dd offset __unwindfunclet$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ$0
.xdata$x:0000A1C8 __ehfuncinfo$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ db  22h ; "
.xdata$x:0000A1C8                                         ; DATA XREF: __ehhandler$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ+11o
.xdata$x:0000A1C9                 db    5
.xdata$x:0000A1CA                 db  93h ; ô
.xdata$x:0000A1CB                 db  19h
.xdata$x:0000A1CC                 db    1
.xdata$x:0000A1CD                 db    0
.xdata$x:0000A1CE                 db    0
.xdata$x:0000A1CF                 db    0
.xdata$x:0000A1D0                 dd offset __unwindtable$?end@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAE?AV?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@XZ
.xdata$x:0000A1D4                 db    0
.xdata$x:0000A1D5                 db    0
.xdata$x:0000A1D6                 db    0
.xdata$x:0000A1D7                 db    0
.xdata$x:0000A1D8                 db    0
.xdata$x:0000A1D9                 db    0
.xdata$x:0000A1DA                 db    0
.xdata$x:0000A1DB                 db    0
.xdata$x:0000A1DC                 db    0
.xdata$x:0000A1DD                 db    0
.xdata$x:0000A1DE                 db    0
.xdata$x:0000A1DF                 db    0
.xdata$x:0000A1E0                 db    0
.xdata$x:0000A1E1                 db    0
.xdata$x:0000A1E2                 db    0
.xdata$x:0000A1E3                 db    0
.xdata$x:0000A1E4                 db    0
.xdata$x:0000A1E5                 db    0
.xdata$x:0000A1E6                 db    0
.xdata$x:0000A1E7                 db    0
.xdata$x:0000A1E8                 db    0
.xdata$x:0000A1E9                 db    0
.xdata$x:0000A1EA                 db    0
.xdata$x:0000A1EB                 db    0
.xdata$x:0000A1EB _xdata$x        ends
.xdata$x:0000A1EB
.xdata$x:0000A1EC ; ===========================================================================
.xdata$x:0000A1EC
.xdata$x:0000A1EC ; Segment type: Pure data
.xdata$x:0000A1EC ; Segment permissions: Read
.xdata$x:0000A1EC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A1EC                 assume cs:_xdata$x
.xdata$x:0000A1EC                 ;org 0A1ECh
.xdata$x:0000A1EC ; COMDAT (pick associative to section at 7A04)
.xdata$x:0000A1EC __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5 db    0
.xdata$x:0000A1EC                                         ; DATA XREF: .xdata$x:0000A274o
.xdata$x:0000A1ED                 db    0
.xdata$x:0000A1EE                 db    0
.xdata$x:0000A1EF                 db    0
.xdata$x:0000A1F0                 db    0
.xdata$x:0000A1F1                 db    0
.xdata$x:0000A1F2                 db    0
.xdata$x:0000A1F3                 db    0
.xdata$x:0000A1F4                 db    0
.xdata$x:0000A1F5                 db    0
.xdata$x:0000A1F6                 db    0
.xdata$x:0000A1F7                 db    0
.xdata$x:0000A1F8                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$0
.xdata$x:0000A1FC __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4 db    0
.xdata$x:0000A1FC                                         ; DATA XREF: .xdata$x:0000A260o
.xdata$x:0000A1FD                 db    0
.xdata$x:0000A1FE                 db    0
.xdata$x:0000A1FF                 db    0
.xdata$x:0000A200                 db    0
.xdata$x:0000A201                 db    0
.xdata$x:0000A202                 db    0
.xdata$x:0000A203                 db    0
.xdata$x:0000A204                 db    0
.xdata$x:0000A205                 db    0
.xdata$x:0000A206                 db    0
.xdata$x:0000A207                 db    0
.xdata$x:0000A208                 dd offset __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1
.xdata$x:0000A20C __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db 0FFh
.xdata$x:0000A20C                                         ; DATA XREF: .xdata$x:0000A234o
.xdata$x:0000A20D                 db 0FFh
.xdata$x:0000A20E                 db 0FFh
.xdata$x:0000A20F                 db 0FFh
.xdata$x:0000A210                 db    0
.xdata$x:0000A211                 db    0
.xdata$x:0000A212                 db    0
.xdata$x:0000A213                 db    0
.xdata$x:0000A214                 db 0FFh
.xdata$x:0000A215                 db 0FFh
.xdata$x:0000A216                 db 0FFh
.xdata$x:0000A217                 db 0FFh
.xdata$x:0000A218                 db    0
.xdata$x:0000A219                 db    0
.xdata$x:0000A21A                 db    0
.xdata$x:0000A21B                 db    0
.xdata$x:0000A21C                 db    1
.xdata$x:0000A21D                 db    0
.xdata$x:0000A21E                 db    0
.xdata$x:0000A21F                 db    0
.xdata$x:0000A220                 db    0
.xdata$x:0000A221                 db    0
.xdata$x:0000A222                 db    0
.xdata$x:0000A223                 db    0
.xdata$x:0000A224                 db    1
.xdata$x:0000A225                 db    0
.xdata$x:0000A226                 db    0
.xdata$x:0000A227                 db    0
.xdata$x:0000A228                 db    0
.xdata$x:0000A229                 db    0
.xdata$x:0000A22A                 db    0
.xdata$x:0000A22B                 db    0
.xdata$x:0000A22C __ehfuncinfo$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db  22h ; "
.xdata$x:0000A22C                                         ; DATA XREF: __ehhandler$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z+11o
.xdata$x:0000A22D                 db    5
.xdata$x:0000A22E                 db  93h ; ô
.xdata$x:0000A22F                 db  19h
.xdata$x:0000A230                 db    4
.xdata$x:0000A231                 db    0
.xdata$x:0000A232                 db    0
.xdata$x:0000A233                 db    0
.xdata$x:0000A234                 dd offset __unwindtable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000A238                 db    2
.xdata$x:0000A239                 db    0
.xdata$x:0000A23A                 db    0
.xdata$x:0000A23B                 db    0
.xdata$x:0000A23C                 dd offset __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z
.xdata$x:0000A240                 db    0
.xdata$x:0000A241                 db    0
.xdata$x:0000A242                 db    0
.xdata$x:0000A243                 db    0
.xdata$x:0000A244                 db    0
.xdata$x:0000A245                 db    0
.xdata$x:0000A246                 db    0
.xdata$x:0000A247                 db    0
.xdata$x:0000A248                 db    0
.xdata$x:0000A249                 db    0
.xdata$x:0000A24A                 db    0
.xdata$x:0000A24B                 db    0
.xdata$x:0000A24C                 db    0
.xdata$x:0000A24D                 db    0
.xdata$x:0000A24E                 db    0
.xdata$x:0000A24F                 db    0
.xdata$x:0000A250 __tryblocktable$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z db    2
.xdata$x:0000A250                                         ; DATA XREF: .xdata$x:0000A23Co
.xdata$x:0000A251                 db    0
.xdata$x:0000A252                 db    0
.xdata$x:0000A253                 db    0
.xdata$x:0000A254                 db    2
.xdata$x:0000A255                 db    0
.xdata$x:0000A256                 db    0
.xdata$x:0000A257                 db    0
.xdata$x:0000A258                 db    3
.xdata$x:0000A259                 db    0
.xdata$x:0000A25A                 db    0
.xdata$x:0000A25B                 db    0
.xdata$x:0000A25C                 db    1
.xdata$x:0000A25D                 db    0
.xdata$x:0000A25E                 db    0
.xdata$x:0000A25F                 db    0
.xdata$x:0000A260                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$4
.xdata$x:0000A264                 db    0
.xdata$x:0000A265                 db    0
.xdata$x:0000A266                 db    0
.xdata$x:0000A267                 db    0
.xdata$x:0000A268                 db    0
.xdata$x:0000A269                 db    0
.xdata$x:0000A26A                 db    0
.xdata$x:0000A26B                 db    0
.xdata$x:0000A26C                 db    3
.xdata$x:0000A26D                 db    0
.xdata$x:0000A26E                 db    0
.xdata$x:0000A26F                 db    0
.xdata$x:0000A270                 db    1
.xdata$x:0000A271                 db    0
.xdata$x:0000A272                 db    0
.xdata$x:0000A273                 db    0
.xdata$x:0000A274                 dd offset __catchsym$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$5
.xdata$x:0000A274 _xdata$x        ends
.xdata$x:0000A274
.xdata$x:0000A278 ; ===========================================================================
.xdata$x:0000A278
.xdata$x:0000A278 ; Segment type: Pure data
.xdata$x:0000A278 ; Segment permissions: Read
.xdata$x:0000A278 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A278                 assume cs:_xdata$x
.xdata$x:0000A278                 ;org 0A278h
.xdata$x:0000A278 ; COMDAT (pick associative to section at 80F8)
.xdata$x:0000A278 __unwindtable$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z db 0FFh
.xdata$x:0000A278                                         ; DATA XREF: .xdata$x:0000A290o
.xdata$x:0000A279                 db 0FFh
.xdata$x:0000A27A                 db 0FFh
.xdata$x:0000A27B                 db 0FFh
.xdata$x:0000A27C                 dd offset __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$0
.xdata$x:0000A280                 db    0
.xdata$x:0000A281                 db    0
.xdata$x:0000A282                 db    0
.xdata$x:0000A283                 db    0
.xdata$x:0000A284                 dd offset __unwindfunclet$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z$1
.xdata$x:0000A288 __ehfuncinfo$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z db  22h ; "
.xdata$x:0000A288                                         ; DATA XREF: __ehhandler$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z+11o
.xdata$x:0000A289                 db    5
.xdata$x:0000A28A                 db  93h ; ô
.xdata$x:0000A28B                 db  19h
.xdata$x:0000A28C                 db    2
.xdata$x:0000A28D                 db    0
.xdata$x:0000A28E                 db    0
.xdata$x:0000A28F                 db    0
.xdata$x:0000A290                 dd offset __unwindtable$?_Pdif@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@SAIV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@2@0@Z
.xdata$x:0000A294                 db    0
.xdata$x:0000A295                 db    0
.xdata$x:0000A296                 db    0
.xdata$x:0000A297                 db    0
.xdata$x:0000A298                 db    0
.xdata$x:0000A299                 db    0
.xdata$x:0000A29A                 db    0
.xdata$x:0000A29B                 db    0
.xdata$x:0000A29C                 db    0
.xdata$x:0000A29D                 db    0
.xdata$x:0000A29E                 db    0
.xdata$x:0000A29F                 db    0
.xdata$x:0000A2A0                 db    0
.xdata$x:0000A2A1                 db    0
.xdata$x:0000A2A2                 db    0
.xdata$x:0000A2A3                 db    0
.xdata$x:0000A2A4                 db    0
.xdata$x:0000A2A5                 db    0
.xdata$x:0000A2A6                 db    0
.xdata$x:0000A2A7                 db    0
.xdata$x:0000A2A8                 db    0
.xdata$x:0000A2A9                 db    0
.xdata$x:0000A2AA                 db    0
.xdata$x:0000A2AB                 db    0
.xdata$x:0000A2AB _xdata$x        ends
.xdata$x:0000A2AB
.xdata$x:0000A2AC ; ===========================================================================
.xdata$x:0000A2AC
.xdata$x:0000A2AC ; Segment type: Pure data
.xdata$x:0000A2AC ; Segment permissions: Read
.xdata$x:0000A2AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A2AC                 assume cs:_xdata$x
.xdata$x:0000A2AC                 ;org 0A2ACh
.xdata$x:0000A2AC ; COMDAT (pick associative to section at 9A3C)
.xdata$x:0000A2AC __unwindtable$?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z db 0FFh
.xdata$x:0000A2AC                                         ; DATA XREF: .xdata$x:0000A2BCo
.xdata$x:0000A2AD                 db 0FFh
.xdata$x:0000A2AE                 db 0FFh
.xdata$x:0000A2AF                 db 0FFh
.xdata$x:0000A2B0                 dd offset __unwindfunclet$?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z$0
.xdata$x:0000A2B4 __ehfuncinfo$?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z db  22h ; "
.xdata$x:0000A2B4                                         ; DATA XREF: __ehhandler$?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z+1Eo
.xdata$x:0000A2B5                 db    5
.xdata$x:0000A2B6                 db  93h ; ô
.xdata$x:0000A2B7                 db  19h
.xdata$x:0000A2B8                 db    1
.xdata$x:0000A2B9                 db    0
.xdata$x:0000A2BA                 db    0
.xdata$x:0000A2BB                 db    0
.xdata$x:0000A2BC                 dd offset __unwindtable$?to_wstring@std@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@1@H@Z
.xdata$x:0000A2C0                 db    0
.xdata$x:0000A2C1                 db    0
.xdata$x:0000A2C2                 db    0
.xdata$x:0000A2C3                 db    0
.xdata$x:0000A2C4                 db    0
.xdata$x:0000A2C5                 db    0
.xdata$x:0000A2C6                 db    0
.xdata$x:0000A2C7                 db    0
.xdata$x:0000A2C8                 db    0
.xdata$x:0000A2C9                 db    0
.xdata$x:0000A2CA                 db    0
.xdata$x:0000A2CB                 db    0
.xdata$x:0000A2CC                 db    0
.xdata$x:0000A2CD                 db    0
.xdata$x:0000A2CE                 db    0
.xdata$x:0000A2CF                 db    0
.xdata$x:0000A2D0                 db    0
.xdata$x:0000A2D1                 db    0
.xdata$x:0000A2D2                 db    0
.xdata$x:0000A2D3                 db    0
.xdata$x:0000A2D4                 db    0
.xdata$x:0000A2D5                 db    0
.xdata$x:0000A2D6                 db    0
.xdata$x:0000A2D7                 db    0
.xdata$x:0000A2D7 _xdata$x        ends
.xdata$x:0000A2D7
.xdata$x:0000A2D8 ; ===========================================================================
.xdata$x:0000A2D8
.xdata$x:0000A2D8 ; Segment type: Pure data
.xdata$x:0000A2D8 ; Segment permissions: Read
.xdata$x:0000A2D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A2D8                 assume cs:_xdata$x
.xdata$x:0000A2D8                 ;org 0A2D8h
.xdata$x:0000A2D8 __unwindtable$?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z db 0FFh
.xdata$x:0000A2D8                                         ; DATA XREF: .xdata$x:0000A344o
.xdata$x:0000A2D9                 db 0FFh
.xdata$x:0000A2DA                 db 0FFh
.xdata$x:0000A2DB                 db 0FFh
.xdata$x:0000A2DC                 dd offset __unwindfunclet$?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z$0
.xdata$x:0000A2E0 __unwindtable$?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z db 0FFh
.xdata$x:0000A2E0                                         ; DATA XREF: .xdata$x:0000A368o
.xdata$x:0000A2E1                 db 0FFh
.xdata$x:0000A2E2                 db 0FFh
.xdata$x:0000A2E3                 db 0FFh
.xdata$x:0000A2E4                 dd offset __unwindfunclet$?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z$0
.xdata$x:0000A2E8 __unwindtable$?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z db 0FFh
.xdata$x:0000A2E8                                         ; DATA XREF: .xdata$x:0000A3B0o
.xdata$x:0000A2E9                 db 0FFh
.xdata$x:0000A2EA                 db 0FFh
.xdata$x:0000A2EB                 db 0FFh
.xdata$x:0000A2EC                 dd offset __unwindfunclet$?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z$0
.xdata$x:0000A2F0 __unwindtable$?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z db 0FFh
.xdata$x:0000A2F0                                         ; DATA XREF: .xdata$x:0000A3D4o
.xdata$x:0000A2F1                 db 0FFh
.xdata$x:0000A2F2                 db 0FFh
.xdata$x:0000A2F3                 db 0FFh
.xdata$x:0000A2F4                 dd offset __unwindfunclet$?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z$0
.xdata$x:0000A2F8 __unwindtable$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z db 0FFh
.xdata$x:0000A2F8                                         ; DATA XREF: .xdata$x:0000A38Co
.xdata$x:0000A2F9                 db 0FFh
.xdata$x:0000A2FA                 db 0FFh
.xdata$x:0000A2FB                 db 0FFh
.xdata$x:0000A2FC                 dd offset __unwindfunclet$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z$0
.xdata$x:0000A300                 db 0FFh
.xdata$x:0000A301                 db 0FFh
.xdata$x:0000A302                 db 0FFh
.xdata$x:0000A303                 db 0FFh
.xdata$x:0000A304                 dd offset __unwindfunclet$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z$1
.xdata$x:0000A308                 db 0FFh
.xdata$x:0000A309                 db 0FFh
.xdata$x:0000A30A                 db 0FFh
.xdata$x:0000A30B                 db 0FFh
.xdata$x:0000A30C                 dd offset __unwindfunclet$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z$2
.xdata$x:0000A310                 db 0FFh
.xdata$x:0000A311                 db 0FFh
.xdata$x:0000A312                 db 0FFh
.xdata$x:0000A313                 db 0FFh
.xdata$x:0000A314                 dd offset __unwindfunclet$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z$3
.xdata$x:0000A318 __ehfuncinfo$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z db  22h ; "
.xdata$x:0000A318                                         ; DATA XREF: __ehhandler$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z+1Eo
.xdata$x:0000A319                 db    5
.xdata$x:0000A31A                 db  93h ; ô
.xdata$x:0000A31B                 db  19h
.xdata$x:0000A31C                 db  12h
.xdata$x:0000A31D                 db    0
.xdata$x:0000A31E                 db    0
.xdata$x:0000A31F                 db    0
.xdata$x:0000A320                 dd offset __unwindtable$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z
.xdata$x:0000A324                 db    0
.xdata$x:0000A325                 db    0
.xdata$x:0000A326                 db    0
.xdata$x:0000A327                 db    0
.xdata$x:0000A328                 db    0
.xdata$x:0000A329                 db    0
.xdata$x:0000A32A                 db    0
.xdata$x:0000A32B                 db    0
.xdata$x:0000A32C                 db    0
.xdata$x:0000A32D                 db    0
.xdata$x:0000A32E                 db    0
.xdata$x:0000A32F                 db    0
.xdata$x:0000A330                 db    0
.xdata$x:0000A331                 db    0
.xdata$x:0000A332                 db    0
.xdata$x:0000A333                 db    0
.xdata$x:0000A334                 db    0
.xdata$x:0000A335                 db    0
.xdata$x:0000A336                 db    0
.xdata$x:0000A337                 db    0
.xdata$x:0000A338                 db    0
.xdata$x:0000A339                 db    0
.xdata$x:0000A33A                 db    0
.xdata$x:0000A33B                 db    0
.xdata$x:0000A33C __ehfuncinfo$?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z db  22h ; "
.xdata$x:0000A33C                                         ; DATA XREF: __ehhandler$?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z+11o
.xdata$x:0000A33D                 db    5
.xdata$x:0000A33E                 db  93h ; ô
.xdata$x:0000A33F                 db  19h
.xdata$x:0000A340                 db    1
.xdata$x:0000A341                 db    0
.xdata$x:0000A342                 db    0
.xdata$x:0000A343                 db    0
.xdata$x:0000A344                 dd offset __unwindtable$?getAttrNameStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PB_WPBD1@Z
.xdata$x:0000A348                 align 20h
.xdata$x:0000A360 __ehfuncinfo$?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z db  22h ; "
.xdata$x:0000A360                                         ; DATA XREF: __ehhandler$?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z+11o
.xdata$x:0000A361                 db    5
.xdata$x:0000A362                 db  93h ; ô
.xdata$x:0000A363                 db  19h
.xdata$x:0000A364                 db    1
.xdata$x:0000A365                 db    0
.xdata$x:0000A366                 db    0
.xdata$x:0000A367                 db    0
.xdata$x:0000A368                 dd offset __unwindtable$?getProjectPanelLangMenuStr@NativeLangSpeaker@@QBE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBDHPB_W@Z
.xdata$x:0000A36C                 db    0
.xdata$x:0000A36D                 db    0
.xdata$x:0000A36E                 db    0
.xdata$x:0000A36F                 db    0
.xdata$x:0000A370                 db    0
.xdata$x:0000A371                 db    0
.xdata$x:0000A372                 db    0
.xdata$x:0000A373                 db    0
.xdata$x:0000A374                 db    0
.xdata$x:0000A375                 db    0
.xdata$x:0000A376                 db    0
.xdata$x:0000A377                 db    0
.xdata$x:0000A378                 db    0
.xdata$x:0000A379                 db    0
.xdata$x:0000A37A                 db    0
.xdata$x:0000A37B                 db    0
.xdata$x:0000A37C                 db    0
.xdata$x:0000A37D                 db    0
.xdata$x:0000A37E                 db    0
.xdata$x:0000A37F                 db    0
.xdata$x:0000A380                 db    0
.xdata$x:0000A381                 db    0
.xdata$x:0000A382                 db    0
.xdata$x:0000A383                 db    0
.xdata$x:0000A384 __ehfuncinfo$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z db  22h ; "
.xdata$x:0000A384                                         ; DATA XREF: __ehhandler$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z+1Eo
.xdata$x:0000A385                 db    5
.xdata$x:0000A386                 db  93h ; ô
.xdata$x:0000A387                 db  19h
.xdata$x:0000A388                 db    4
.xdata$x:0000A389                 db    0
.xdata$x:0000A38A                 db    0
.xdata$x:0000A38B                 db    0
.xdata$x:0000A38C                 dd offset __unwindtable$?changeFindReplaceDlgLang@NativeLangSpeaker@@QAEXAAVFindReplaceDlg@@@Z
.xdata$x:0000A390                 db    0
.xdata$x:0000A391                 db    0
.xdata$x:0000A392                 db    0
.xdata$x:0000A393                 db    0
.xdata$x:0000A394                 db    0
.xdata$x:0000A395                 db    0
.xdata$x:0000A396                 db    0
.xdata$x:0000A397                 db    0
.xdata$x:0000A398                 db    0
.xdata$x:0000A399                 db    0
.xdata$x:0000A39A                 db    0
.xdata$x:0000A39B                 db    0
.xdata$x:0000A39C                 db    0
.xdata$x:0000A39D                 db    0
.xdata$x:0000A39E                 db    0
.xdata$x:0000A39F                 db    0
.xdata$x:0000A3A0                 db    0
.xdata$x:0000A3A1                 db    0
.xdata$x:0000A3A2                 db    0
.xdata$x:0000A3A3                 db    0
.xdata$x:0000A3A4                 db    0
.xdata$x:0000A3A5                 db    0
.xdata$x:0000A3A6                 db    0
.xdata$x:0000A3A7                 db    0
.xdata$x:0000A3A8 __ehfuncinfo$?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z db  22h ; "
.xdata$x:0000A3A8                                         ; DATA XREF: __ehhandler$?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z+11o
.xdata$x:0000A3A9                 db    5
.xdata$x:0000A3AA                 db  93h ; ô
.xdata$x:0000A3AB                 db  19h
.xdata$x:0000A3AC                 db    1
.xdata$x:0000A3AD                 db    0
.xdata$x:0000A3AE                 db    0
.xdata$x:0000A3AF                 db    0
.xdata$x:0000A3B0                 dd offset __unwindtable$?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z
.xdata$x:0000A3B4                 db    0
.xdata$x:0000A3B5                 db    0
.xdata$x:0000A3B6                 db    0
.xdata$x:0000A3B7                 db    0
.xdata$x:0000A3B8                 db    0
.xdata$x:0000A3B9                 db    0
.xdata$x:0000A3BA                 db    0
.xdata$x:0000A3BB                 db    0
.xdata$x:0000A3BC                 db    0
.xdata$x:0000A3BD                 db    0
.xdata$x:0000A3BE                 db    0
.xdata$x:0000A3BF                 db    0
.xdata$x:0000A3C0                 db    0
.xdata$x:0000A3C1                 db    0
.xdata$x:0000A3C2                 db    0
.xdata$x:0000A3C3                 db    0
.xdata$x:0000A3C4                 db    0
.xdata$x:0000A3C5                 db    0
.xdata$x:0000A3C6                 db    0
.xdata$x:0000A3C7                 db    0
.xdata$x:0000A3C8                 db    0
.xdata$x:0000A3C9                 db    0
.xdata$x:0000A3CA                 db    0
.xdata$x:0000A3CB                 db    0
.xdata$x:0000A3CC __ehfuncinfo$?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z db  22h ; "
.xdata$x:0000A3CC                                         ; DATA XREF: __ehhandler$?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z+11o
.xdata$x:0000A3CD                 db    5
.xdata$x:0000A3CE                 db  93h ; ô
.xdata$x:0000A3CF                 db  19h
.xdata$x:0000A3D0                 db    1
.xdata$x:0000A3D1                 db    0
.xdata$x:0000A3D2                 db    0
.xdata$x:0000A3D3                 db    0
.xdata$x:0000A3D4                 dd offset __unwindtable$?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z
.xdata$x:0000A3D8                 db    0
.xdata$x:0000A3D9                 db    0
.xdata$x:0000A3DA                 db    0
.xdata$x:0000A3DB                 db    0
.xdata$x:0000A3DC                 db    0
.xdata$x:0000A3DD                 db    0
.xdata$x:0000A3DE                 db    0
.xdata$x:0000A3DF                 db    0
.xdata$x:0000A3E0                 db    0
.xdata$x:0000A3E1                 db    0
.xdata$x:0000A3E2                 db    0
.xdata$x:0000A3E3                 db    0
.xdata$x:0000A3E4                 db    0
.xdata$x:0000A3E5                 db    0
.xdata$x:0000A3E6                 db    0
.xdata$x:0000A3E7                 db    0
.xdata$x:0000A3E8                 db    0
.xdata$x:0000A3E9                 db    0
.xdata$x:0000A3EA                 db    0
.xdata$x:0000A3EB                 db    0
.xdata$x:0000A3EC                 db    0
.xdata$x:0000A3ED                 db    0
.xdata$x:0000A3EE                 db    0
.xdata$x:0000A3EF                 db    0
.xdata$x:0000A3F0 __unwindtable$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z db 0FFh
.xdata$x:0000A3F0                                         ; DATA XREF: .xdata$x:0000A320o
.xdata$x:0000A3F1                 db 0FFh
.xdata$x:0000A3F2                 db 0FFh
.xdata$x:0000A3F3                 db 0FFh
.xdata$x:0000A3F4                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$0
.xdata$x:0000A3F8                 db    0
.xdata$x:0000A3F9                 db    0
.xdata$x:0000A3FA                 db    0
.xdata$x:0000A3FB                 db    0
.xdata$x:0000A3FC                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$1
.xdata$x:0000A400                 db    1
.xdata$x:0000A401                 db    0
.xdata$x:0000A402                 db    0
.xdata$x:0000A403                 db    0
.xdata$x:0000A404                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$2
.xdata$x:0000A408                 db    2
.xdata$x:0000A409                 db    0
.xdata$x:0000A40A                 db    0
.xdata$x:0000A40B                 db    0
.xdata$x:0000A40C                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$3
.xdata$x:0000A410                 db    3
.xdata$x:0000A411                 db    0
.xdata$x:0000A412                 db    0
.xdata$x:0000A413                 db    0
.xdata$x:0000A414                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$4
.xdata$x:0000A418                 db    3
.xdata$x:0000A419                 db    0
.xdata$x:0000A41A                 db    0
.xdata$x:0000A41B                 db    0
.xdata$x:0000A41C                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$5
.xdata$x:0000A420                 db    1
.xdata$x:0000A421                 db    0
.xdata$x:0000A422                 db    0
.xdata$x:0000A423                 db    0
.xdata$x:0000A424                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$6
.xdata$x:0000A428                 db    6
.xdata$x:0000A429                 db    0
.xdata$x:0000A42A                 db    0
.xdata$x:0000A42B                 db    0
.xdata$x:0000A42C                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$7
.xdata$x:0000A430                 db    7
.xdata$x:0000A431                 db    0
.xdata$x:0000A432                 db    0
.xdata$x:0000A433                 db    0
.xdata$x:0000A434                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$8
.xdata$x:0000A438                 db    7
.xdata$x:0000A439                 db    0
.xdata$x:0000A43A                 db    0
.xdata$x:0000A43B                 db    0
.xdata$x:0000A43C                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$9
.xdata$x:0000A440                 db    1
.xdata$x:0000A441                 db    0
.xdata$x:0000A442                 db    0
.xdata$x:0000A443                 db    0
.xdata$x:0000A444                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$10
.xdata$x:0000A448                 db  0Ah
.xdata$x:0000A449                 db    0
.xdata$x:0000A44A                 db    0
.xdata$x:0000A44B                 db    0
.xdata$x:0000A44C                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$11
.xdata$x:0000A450                 db  0Bh
.xdata$x:0000A451                 db    0
.xdata$x:0000A452                 db    0
.xdata$x:0000A453                 db    0
.xdata$x:0000A454                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$12
.xdata$x:0000A458                 db  0Bh
.xdata$x:0000A459                 db    0
.xdata$x:0000A45A                 db    0
.xdata$x:0000A45B                 db    0
.xdata$x:0000A45C                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$13
.xdata$x:0000A460                 db    1
.xdata$x:0000A461                 db    0
.xdata$x:0000A462                 db    0
.xdata$x:0000A463                 db    0
.xdata$x:0000A464                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$14
.xdata$x:0000A468                 db  0Eh
.xdata$x:0000A469                 db    0
.xdata$x:0000A46A                 db    0
.xdata$x:0000A46B                 db    0
.xdata$x:0000A46C                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$15
.xdata$x:0000A470                 db  0Fh
.xdata$x:0000A471                 db    0
.xdata$x:0000A472                 db    0
.xdata$x:0000A473                 db    0
.xdata$x:0000A474                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$16
.xdata$x:0000A478                 db  0Fh
.xdata$x:0000A479                 db    0
.xdata$x:0000A47A                 db    0
.xdata$x:0000A47B                 db    0
.xdata$x:0000A47C                 dd offset __unwindfunclet$?messageBox@NativeLangSpeaker@@QAEHPBDPAUHWND__@@PB_W2HH2@Z$17
.xdata$x:0000A47C _xdata$x        ends
.xdata$x:0000A47C
.xdata$x:0000A480 ; ===========================================================================
.xdata$x:0000A480
.xdata$x:0000A480 ; Segment type: Pure data
.xdata$x:0000A480 ; Segment permissions: Read
.xdata$x:0000A480 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A480                 assume cs:_xdata$x
.xdata$x:0000A480                 ;org 0A480h
.xdata$x:0000A480 ; COMDAT (pick associative to section at 5D3C)
.xdata$x:0000A480 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000A480                                         ; DATA XREF: .xdata$x:0000A490o
.xdata$x:0000A481                 db 0FFh
.xdata$x:0000A482                 db 0FFh
.xdata$x:0000A483                 db 0FFh
.xdata$x:0000A484                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0000A488 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000A488                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0000A489                 db    5
.xdata$x:0000A48A                 db  93h ; ô
.xdata$x:0000A48B                 db  19h
.xdata$x:0000A48C                 db    1
.xdata$x:0000A48D                 db    0
.xdata$x:0000A48E                 db    0
.xdata$x:0000A48F                 db    0
.xdata$x:0000A490                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0000A494                 db    0
.xdata$x:0000A495                 db    0
.xdata$x:0000A496                 db    0
.xdata$x:0000A497                 db    0
.xdata$x:0000A498                 db    0
.xdata$x:0000A499                 db    0
.xdata$x:0000A49A                 db    0
.xdata$x:0000A49B                 db    0
.xdata$x:0000A49C                 db    0
.xdata$x:0000A49D                 db    0
.xdata$x:0000A49E                 db    0
.xdata$x:0000A49F                 db    0
.xdata$x:0000A4A0                 db    0
.xdata$x:0000A4A1                 db    0
.xdata$x:0000A4A2                 db    0
.xdata$x:0000A4A3                 db    0
.xdata$x:0000A4A4                 db    0
.xdata$x:0000A4A5                 db    0
.xdata$x:0000A4A6                 db    0
.xdata$x:0000A4A7                 db    0
.xdata$x:0000A4A8                 db    0
.xdata$x:0000A4A9                 db    0
.xdata$x:0000A4AA                 db    0
.xdata$x:0000A4AB                 db    0
.xdata$x:0000A4AB _xdata$x        ends
.xdata$x:0000A4AB
.xdata$x:0000A4AC ; ===========================================================================
.xdata$x:0000A4AC
.xdata$x:0000A4AC ; Segment type: Pure data
.xdata$x:0000A4AC ; Segment permissions: Read
.xdata$x:0000A4AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A4AC                 assume cs:_xdata$x
.xdata$x:0000A4AC                 ;org 0A4ACh
.xdata$x:0000A4AC ; COMDAT (pick associative to section at 671C)
.xdata$x:0000A4AC __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db 0FFh
.xdata$x:0000A4AC                                         ; DATA XREF: .xdata$x:0000A4BCo
.xdata$x:0000A4AD                 db 0FFh
.xdata$x:0000A4AE                 db 0FFh
.xdata$x:0000A4AF                 db 0FFh
.xdata$x:0000A4B0                 dd offset __unwindfunclet$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ$0
.xdata$x:0000A4B4 __ehfuncinfo$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ db  22h ; "
.xdata$x:0000A4B4                                         ; DATA XREF: __ehhandler$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ+11o
.xdata$x:0000A4B5                 db    5
.xdata$x:0000A4B6                 db  93h ; ô
.xdata$x:0000A4B7                 db  19h
.xdata$x:0000A4B8                 db    1
.xdata$x:0000A4B9                 db    0
.xdata$x:0000A4BA                 db    0
.xdata$x:0000A4BB                 db    0
.xdata$x:0000A4BC                 dd offset __unwindtable$??1?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@XZ
.xdata$x:0000A4C0                 db    0
.xdata$x:0000A4C1                 db    0
.xdata$x:0000A4C2                 db    0
.xdata$x:0000A4C3                 db    0
.xdata$x:0000A4C4                 db    0
.xdata$x:0000A4C5                 db    0
.xdata$x:0000A4C6                 db    0
.xdata$x:0000A4C7                 db    0
.xdata$x:0000A4C8                 db    0
.xdata$x:0000A4C9                 db    0
.xdata$x:0000A4CA                 db    0
.xdata$x:0000A4CB                 db    0
.xdata$x:0000A4CC                 db    0
.xdata$x:0000A4CD                 db    0
.xdata$x:0000A4CE                 db    0
.xdata$x:0000A4CF                 db    0
.xdata$x:0000A4D0                 db    0
.xdata$x:0000A4D1                 db    0
.xdata$x:0000A4D2                 db    0
.xdata$x:0000A4D3                 db    0
.xdata$x:0000A4D4                 db    0
.xdata$x:0000A4D5                 db    0
.xdata$x:0000A4D6                 db    0
.xdata$x:0000A4D7                 db    0
.xdata$x:0000A4D7 _xdata$x        ends
.xdata$x:0000A4D7
.xdata$x:0000A4D8 ; ===========================================================================
.xdata$x:0000A4D8
.xdata$x:0000A4D8 ; Segment type: Pure data
.xdata$x:0000A4D8 ; Segment permissions: Read
.xdata$x:0000A4D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A4D8                 assume cs:_xdata$x
.xdata$x:0000A4D8                 ;org 0A4D8h
.xdata$x:0000A4D8 ; COMDAT (pick associative to section at 5CC4)
.xdata$x:0000A4D8 __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db 0FFh
.xdata$x:0000A4D8                                         ; DATA XREF: .xdata$x:0000A4E8o
.xdata$x:0000A4D9                 db 0FFh
.xdata$x:0000A4DA                 db 0FFh
.xdata$x:0000A4DB                 db 0FFh
.xdata$x:0000A4DC                 dd offset __unwindfunclet$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z$0
.xdata$x:0000A4E0 __ehfuncinfo$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z db  22h ; "
.xdata$x:0000A4E0                                         ; DATA XREF: __ehhandler$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z+11o
.xdata$x:0000A4E1                 db    5
.xdata$x:0000A4E2                 db  93h ; ô
.xdata$x:0000A4E3                 db  19h
.xdata$x:0000A4E4                 db    1
.xdata$x:0000A4E5                 db    0
.xdata$x:0000A4E6                 db    0
.xdata$x:0000A4E7                 db    0
.xdata$x:0000A4E8                 dd offset __unwindtable$??0?$_Iterator012@Urandom_access_iterator_tag@std@@_WHPB_WAB_WU_Iterator_base12@2@@std@@QAE@ABU01@@Z
.xdata$x:0000A4EC                 db    0
.xdata$x:0000A4ED                 db    0
.xdata$x:0000A4EE                 db    0
.xdata$x:0000A4EF                 db    0
.xdata$x:0000A4F0                 db    0
.xdata$x:0000A4F1                 db    0
.xdata$x:0000A4F2                 db    0
.xdata$x:0000A4F3                 db    0
.xdata$x:0000A4F4                 db    0
.xdata$x:0000A4F5                 db    0
.xdata$x:0000A4F6                 db    0
.xdata$x:0000A4F7                 db    0
.xdata$x:0000A4F8                 db    0
.xdata$x:0000A4F9                 db    0
.xdata$x:0000A4FA                 db    0
.xdata$x:0000A4FB                 db    0
.xdata$x:0000A4FC                 db    0
.xdata$x:0000A4FD                 db    0
.xdata$x:0000A4FE                 db    0
.xdata$x:0000A4FF                 db    0
.xdata$x:0000A500                 db    0
.xdata$x:0000A501                 db    0
.xdata$x:0000A502                 db    0
.xdata$x:0000A503                 db    0
.xdata$x:0000A503 _xdata$x        ends
.xdata$x:0000A503
.xdata$x:0000A504 ; ===========================================================================
.xdata$x:0000A504
.xdata$x:0000A504 ; Segment type: Pure data
.xdata$x:0000A504 ; Segment permissions: Read
.xdata$x:0000A504 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A504                 assume cs:_xdata$x
.xdata$x:0000A504                 ;org 0A504h
.xdata$x:0000A504 ; COMDAT (pick associative to section at 5F2C)
.xdata$x:0000A504 __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:0000A504                                         ; DATA XREF: .xdata$x:0000A514o
.xdata$x:0000A505                 db 0FFh
.xdata$x:0000A506                 db 0FFh
.xdata$x:0000A507                 db 0FFh
.xdata$x:0000A508                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z$0
.xdata$x:0000A50C __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:0000A50C                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z+11o
.xdata$x:0000A50D                 db    5
.xdata$x:0000A50E                 db  93h ; ô
.xdata$x:0000A50F                 db  19h
.xdata$x:0000A510                 db    1
.xdata$x:0000A511                 db    0
.xdata$x:0000A512                 db    0
.xdata$x:0000A513                 db    0
.xdata$x:0000A514                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PB_WPBU_Container_base12@1@@Z
.xdata$x:0000A518                 db    0
.xdata$x:0000A519                 db    0
.xdata$x:0000A51A                 db    0
.xdata$x:0000A51B                 db    0
.xdata$x:0000A51C                 db    0
.xdata$x:0000A51D                 db    0
.xdata$x:0000A51E                 db    0
.xdata$x:0000A51F                 db    0
.xdata$x:0000A520                 db    0
.xdata$x:0000A521                 db    0
.xdata$x:0000A522                 db    0
.xdata$x:0000A523                 db    0
.xdata$x:0000A524                 db    0
.xdata$x:0000A525                 db    0
.xdata$x:0000A526                 db    0
.xdata$x:0000A527                 db    0
.xdata$x:0000A528                 db    0
.xdata$x:0000A529                 db    0
.xdata$x:0000A52A                 db    0
.xdata$x:0000A52B                 db    0
.xdata$x:0000A52C                 db    0
.xdata$x:0000A52D                 db    0
.xdata$x:0000A52E                 db    0
.xdata$x:0000A52F                 db    0
.xdata$x:0000A52F _xdata$x        ends
.xdata$x:0000A52F
.xdata$x:0000A530 ; ===========================================================================
.xdata$x:0000A530
.xdata$x:0000A530 ; Segment type: Pure data
.xdata$x:0000A530 ; Segment permissions: Read
.xdata$x:0000A530 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A530                 assume cs:_xdata$x
.xdata$x:0000A530                 ;org 0A530h
.xdata$x:0000A530 ; COMDAT (pick associative to section at 687C)
.xdata$x:0000A530 __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000A530                                         ; DATA XREF: .xdata$x:0000A540o
.xdata$x:0000A531                 db 0FFh
.xdata$x:0000A532                 db 0FFh
.xdata$x:0000A533                 db 0FFh
.xdata$x:0000A534                 dd offset __unwindfunclet$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000A538 __ehfuncinfo$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000A538                                         ; DATA XREF: __ehhandler$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000A539                 db    5
.xdata$x:0000A53A                 db  93h ; ô
.xdata$x:0000A53B                 db  19h
.xdata$x:0000A53C                 db    1
.xdata$x:0000A53D                 db    0
.xdata$x:0000A53E                 db    0
.xdata$x:0000A53F                 db    0
.xdata$x:0000A540                 dd offset __unwindtable$??1?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000A544                 db    0
.xdata$x:0000A545                 db    0
.xdata$x:0000A546                 db    0
.xdata$x:0000A547                 db    0
.xdata$x:0000A548                 db    0
.xdata$x:0000A549                 db    0
.xdata$x:0000A54A                 db    0
.xdata$x:0000A54B                 db    0
.xdata$x:0000A54C                 db    0
.xdata$x:0000A54D                 db    0
.xdata$x:0000A54E                 db    0
.xdata$x:0000A54F                 db    0
.xdata$x:0000A550                 db    0
.xdata$x:0000A551                 db    0
.xdata$x:0000A552                 db    0
.xdata$x:0000A553                 db    0
.xdata$x:0000A554                 db    0
.xdata$x:0000A555                 db    0
.xdata$x:0000A556                 db    0
.xdata$x:0000A557                 db    0
.xdata$x:0000A558                 db    0
.xdata$x:0000A559                 db    0
.xdata$x:0000A55A                 db    0
.xdata$x:0000A55B                 db    0
.xdata$x:0000A55B _xdata$x        ends
.xdata$x:0000A55B
.xdata$x:0000A55C ; ===========================================================================
.xdata$x:0000A55C
.xdata$x:0000A55C ; Segment type: Pure data
.xdata$x:0000A55C ; Segment permissions: Read
.xdata$x:0000A55C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A55C                 assume cs:_xdata$x
.xdata$x:0000A55C                 ;org 0A55Ch
.xdata$x:0000A55C ; COMDAT (pick associative to section at 5EA8)
.xdata$x:0000A55C __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000A55C                                         ; DATA XREF: .xdata$x:0000A56Co
.xdata$x:0000A55D                 db 0FFh
.xdata$x:0000A55E                 db 0FFh
.xdata$x:0000A55F                 db 0FFh
.xdata$x:0000A560                 dd offset __unwindfunclet$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0000A564 __ehfuncinfo$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000A564                                         ; DATA XREF: __ehhandler$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000A565                 db    5
.xdata$x:0000A566                 db  93h ; ô
.xdata$x:0000A567                 db  19h
.xdata$x:0000A568                 db    1
.xdata$x:0000A569                 db    0
.xdata$x:0000A56A                 db    0
.xdata$x:0000A56B                 db    0
.xdata$x:0000A56C                 dd offset __unwindtable$??0?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000A570                 db    0
.xdata$x:0000A571                 db    0
.xdata$x:0000A572                 db    0
.xdata$x:0000A573                 db    0
.xdata$x:0000A574                 db    0
.xdata$x:0000A575                 db    0
.xdata$x:0000A576                 db    0
.xdata$x:0000A577                 db    0
.xdata$x:0000A578                 db    0
.xdata$x:0000A579                 db    0
.xdata$x:0000A57A                 db    0
.xdata$x:0000A57B                 db    0
.xdata$x:0000A57C                 db    0
.xdata$x:0000A57D                 db    0
.xdata$x:0000A57E                 db    0
.xdata$x:0000A57F                 db    0
.xdata$x:0000A580                 db    0
.xdata$x:0000A581                 db    0
.xdata$x:0000A582                 db    0
.xdata$x:0000A583                 db    0
.xdata$x:0000A584                 db    0
.xdata$x:0000A585                 db    0
.xdata$x:0000A586                 db    0
.xdata$x:0000A587                 db    0
.xdata$x:0000A587 _xdata$x        ends
.xdata$x:0000A587
.xdata$x:0000A588 ; ===========================================================================
.xdata$x:0000A588
.xdata$x:0000A588 ; Segment type: Pure data
.xdata$x:0000A588 ; Segment permissions: Read
.xdata$x:0000A588 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A588                 assume cs:_xdata$x
.xdata$x:0000A588                 ;org 0A588h
.xdata$x:0000A588 ; COMDAT (pick associative to section at 6030)
.xdata$x:0000A588 __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z db 0FFh
.xdata$x:0000A588                                         ; DATA XREF: .xdata$x:0000A598o
.xdata$x:0000A589                 db 0FFh
.xdata$x:0000A58A                 db 0FFh
.xdata$x:0000A58B                 db 0FFh
.xdata$x:0000A58C                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z$0
.xdata$x:0000A590 __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z db  22h ; "
.xdata$x:0000A590                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z+11o
.xdata$x:0000A591                 db    5
.xdata$x:0000A592                 db  93h ; ô
.xdata$x:0000A593                 db  19h
.xdata$x:0000A594                 db    1
.xdata$x:0000A595                 db    0
.xdata$x:0000A596                 db    0
.xdata$x:0000A597                 db    0
.xdata$x:0000A598                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@PA_WPBU_Container_base12@1@@Z
.xdata$x:0000A59C                 db    0
.xdata$x:0000A59D                 db    0
.xdata$x:0000A59E                 db    0
.xdata$x:0000A59F                 db    0
.xdata$x:0000A5A0                 db    0
.xdata$x:0000A5A1                 db    0
.xdata$x:0000A5A2                 db    0
.xdata$x:0000A5A3                 db    0
.xdata$x:0000A5A4                 db    0
.xdata$x:0000A5A5                 db    0
.xdata$x:0000A5A6                 db    0
.xdata$x:0000A5A7                 db    0
.xdata$x:0000A5A8                 db    0
.xdata$x:0000A5A9                 db    0
.xdata$x:0000A5AA                 db    0
.xdata$x:0000A5AB                 db    0
.xdata$x:0000A5AC                 db    0
.xdata$x:0000A5AD                 db    0
.xdata$x:0000A5AE                 db    0
.xdata$x:0000A5AF                 db    0
.xdata$x:0000A5B0                 db    0
.xdata$x:0000A5B1                 db    0
.xdata$x:0000A5B2                 db    0
.xdata$x:0000A5B3                 db    0
.xdata$x:0000A5B3 _xdata$x        ends
.xdata$x:0000A5B3
.xdata$x:0000A5B4 ; ===========================================================================
.xdata$x:0000A5B4
.xdata$x:0000A5B4 ; Segment type: Pure data
.xdata$x:0000A5B4 ; Segment permissions: Read
.xdata$x:0000A5B4 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A5B4                 assume cs:_xdata$x
.xdata$x:0000A5B4                 ;org 0A5B4h
.xdata$x:0000A5B4 ; COMDAT (pick associative to section at 7290)
.xdata$x:0000A5B4 __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z db 0FFh
.xdata$x:0000A5B4                                         ; DATA XREF: .xdata$x:0000A5C4o
.xdata$x:0000A5B5                 db 0FFh
.xdata$x:0000A5B6                 db 0FFh
.xdata$x:0000A5B7                 db 0FFh
.xdata$x:0000A5B8                 dd offset __unwindfunclet$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z$0
.xdata$x:0000A5BC __ehfuncinfo$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z db  22h ; "
.xdata$x:0000A5BC                                         ; DATA XREF: __ehhandler$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z+11o
.xdata$x:0000A5BD                 db    5
.xdata$x:0000A5BE                 db  93h ; ô
.xdata$x:0000A5BF                 db  19h
.xdata$x:0000A5C0                 db    1
.xdata$x:0000A5C1                 db    0
.xdata$x:0000A5C2                 db    0
.xdata$x:0000A5C3                 db    0
.xdata$x:0000A5C4                 dd offset __unwindtable$??G?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QBEHABV?$_String_const_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@@Z
.xdata$x:0000A5C8                 align 20h
.xdata$x:0000A5C8 _xdata$x        ends
.xdata$x:0000A5C8
.xdata$x:0000A5E0 ; ===========================================================================
.xdata$x:0000A5E0
.xdata$x:0000A5E0 ; Segment type: Pure data
.xdata$x:0000A5E0 ; Segment permissions: Read
.xdata$x:0000A5E0 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A5E0                 assume cs:_xdata$x
.xdata$x:0000A5E0                 ;org 0A5E0h
.xdata$x:0000A5E0 ; COMDAT (pick associative to section at 68EC)
.xdata$x:0000A5E0 __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db 0FFh
.xdata$x:0000A5E0                                         ; DATA XREF: .xdata$x:0000A5F0o
.xdata$x:0000A5E1                 db 0FFh
.xdata$x:0000A5E2                 db 0FFh
.xdata$x:0000A5E3                 db 0FFh
.xdata$x:0000A5E4                 dd offset __unwindfunclet$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ$0
.xdata$x:0000A5E8 __ehfuncinfo$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ db  22h ; "
.xdata$x:0000A5E8                                         ; DATA XREF: __ehhandler$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ+11o
.xdata$x:0000A5E9                 db    5
.xdata$x:0000A5EA                 db  93h ; ô
.xdata$x:0000A5EB                 db  19h
.xdata$x:0000A5EC                 db    1
.xdata$x:0000A5ED                 db    0
.xdata$x:0000A5EE                 db    0
.xdata$x:0000A5EF                 db    0
.xdata$x:0000A5F0                 dd offset __unwindtable$??1?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@XZ
.xdata$x:0000A5F4                 db    0
.xdata$x:0000A5F5                 db    0
.xdata$x:0000A5F6                 db    0
.xdata$x:0000A5F7                 db    0
.xdata$x:0000A5F8                 db    0
.xdata$x:0000A5F9                 db    0
.xdata$x:0000A5FA                 db    0
.xdata$x:0000A5FB                 db    0
.xdata$x:0000A5FC                 db    0
.xdata$x:0000A5FD                 db    0
.xdata$x:0000A5FE                 db    0
.xdata$x:0000A5FF                 db    0
.xdata$x:0000A600                 db    0
.xdata$x:0000A601                 db    0
.xdata$x:0000A602                 db    0
.xdata$x:0000A603                 db    0
.xdata$x:0000A604                 db    0
.xdata$x:0000A605                 db    0
.xdata$x:0000A606                 db    0
.xdata$x:0000A607                 db    0
.xdata$x:0000A608                 db    0
.xdata$x:0000A609                 db    0
.xdata$x:0000A60A                 db    0
.xdata$x:0000A60B                 db    0
.xdata$x:0000A60B _xdata$x        ends
.xdata$x:0000A60B
.xdata$x:0000A60C ; ===========================================================================
.xdata$x:0000A60C
.xdata$x:0000A60C ; Segment type: Pure data
.xdata$x:0000A60C ; Segment permissions: Read
.xdata$x:0000A60C _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A60C                 assume cs:_xdata$x
.xdata$x:0000A60C                 ;org 0A60Ch
.xdata$x:0000A60C ; COMDAT (pick associative to section at 5FB8)
.xdata$x:0000A60C __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db 0FFh
.xdata$x:0000A60C                                         ; DATA XREF: .xdata$x:0000A61Co
.xdata$x:0000A60D                 db 0FFh
.xdata$x:0000A60E                 db 0FFh
.xdata$x:0000A60F                 db 0FFh
.xdata$x:0000A610                 dd offset __unwindfunclet$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z$0
.xdata$x:0000A614 __ehfuncinfo$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z db  22h ; "
.xdata$x:0000A614                                         ; DATA XREF: __ehhandler$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z+11o
.xdata$x:0000A615                 db    5
.xdata$x:0000A616                 db  93h ; ô
.xdata$x:0000A617                 db  19h
.xdata$x:0000A618                 db    1
.xdata$x:0000A619                 db    0
.xdata$x:0000A61A                 db    0
.xdata$x:0000A61B                 db    0
.xdata$x:0000A61C                 dd offset __unwindtable$??0?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@QAE@ABV01@@Z
.xdata$x:0000A620                 db    0
.xdata$x:0000A621                 db    0
.xdata$x:0000A622                 db    0
.xdata$x:0000A623                 db    0
.xdata$x:0000A624                 db    0
.xdata$x:0000A625                 db    0
.xdata$x:0000A626                 db    0
.xdata$x:0000A627                 db    0
.xdata$x:0000A628                 db    0
.xdata$x:0000A629                 db    0
.xdata$x:0000A62A                 db    0
.xdata$x:0000A62B                 db    0
.xdata$x:0000A62C                 db    0
.xdata$x:0000A62D                 db    0
.xdata$x:0000A62E                 db    0
.xdata$x:0000A62F                 db    0
.xdata$x:0000A630                 db    0
.xdata$x:0000A631                 db    0
.xdata$x:0000A632                 db    0
.xdata$x:0000A633                 db    0
.xdata$x:0000A634                 db    0
.xdata$x:0000A635                 db    0
.xdata$x:0000A636                 db    0
.xdata$x:0000A637                 db    0
.xdata$x:0000A637 _xdata$x        ends
.xdata$x:0000A637
.xdata$x:0000A638 ; ===========================================================================
.xdata$x:0000A638
.xdata$x:0000A638 ; Segment type: Pure data
.xdata$x:0000A638 ; Segment permissions: Read
.xdata$x:0000A638 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A638                 assume cs:_xdata$x
.xdata$x:0000A638                 ;org 0A638h
.xdata$x:0000A638 ; COMDAT (pick associative to section at 57C0)
.xdata$x:0000A638 __ehfuncinfo$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z db  22h ; "
.xdata$x:0000A638                                         ; DATA XREF: __ehhandler$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z+11o
.xdata$x:0000A639                 db    5
.xdata$x:0000A63A                 db  93h ; ô
.xdata$x:0000A63B                 db  19h
.xdata$x:0000A63C                 db  0Ah
.xdata$x:0000A63D                 db    0
.xdata$x:0000A63E                 db    0
.xdata$x:0000A63F                 db    0
.xdata$x:0000A640                 dd offset __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z
.xdata$x:0000A644                 db    0
.xdata$x:0000A645                 db    0
.xdata$x:0000A646                 db    0
.xdata$x:0000A647                 db    0
.xdata$x:0000A648                 db    0
.xdata$x:0000A649                 db    0
.xdata$x:0000A64A                 db    0
.xdata$x:0000A64B                 db    0
.xdata$x:0000A64C                 db    0
.xdata$x:0000A64D                 db    0
.xdata$x:0000A64E                 db    0
.xdata$x:0000A64F                 db    0
.xdata$x:0000A650                 db    0
.xdata$x:0000A651                 db    0
.xdata$x:0000A652                 db    0
.xdata$x:0000A653                 db    0
.xdata$x:0000A654                 db    0
.xdata$x:0000A655                 db    0
.xdata$x:0000A656                 db    0
.xdata$x:0000A657                 db    0
.xdata$x:0000A658                 db    0
.xdata$x:0000A659                 db    0
.xdata$x:0000A65A                 db    0
.xdata$x:0000A65B                 db    0
.xdata$x:0000A65C __unwindtable$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z db 0FFh
.xdata$x:0000A65C                                         ; DATA XREF: .xdata$x:0000A640o
.xdata$x:0000A65D                 db 0FFh
.xdata$x:0000A65E                 db 0FFh
.xdata$x:0000A65F                 db 0FFh
.xdata$x:0000A660                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$0
.xdata$x:0000A664                 db    0
.xdata$x:0000A665                 db    0
.xdata$x:0000A666                 db    0
.xdata$x:0000A667                 db    0
.xdata$x:0000A668                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$1
.xdata$x:0000A66C                 db    1
.xdata$x:0000A66D                 db    0
.xdata$x:0000A66E                 db    0
.xdata$x:0000A66F                 db    0
.xdata$x:0000A670                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$2
.xdata$x:0000A674                 db    2
.xdata$x:0000A675                 db    0
.xdata$x:0000A676                 db    0
.xdata$x:0000A677                 db    0
.xdata$x:0000A678                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$3
.xdata$x:0000A67C                 db    3
.xdata$x:0000A67D                 db    0
.xdata$x:0000A67E                 db    0
.xdata$x:0000A67F                 db    0
.xdata$x:0000A680                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
.xdata$x:0000A684                 db    4
.xdata$x:0000A685                 db    0
.xdata$x:0000A686                 db    0
.xdata$x:0000A687                 db    0
.xdata$x:0000A688                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$5
.xdata$x:0000A68C                 db    5
.xdata$x:0000A68D                 db    0
.xdata$x:0000A68E                 db    0
.xdata$x:0000A68F                 db    0
.xdata$x:0000A690                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6
.xdata$x:0000A694                 db    6
.xdata$x:0000A695                 db    0
.xdata$x:0000A696                 db    0
.xdata$x:0000A697                 db    0
.xdata$x:0000A698                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$7
.xdata$x:0000A69C                 db    1
.xdata$x:0000A69D                 db    0
.xdata$x:0000A69E                 db    0
.xdata$x:0000A69F                 db    0
.xdata$x:0000A6A0                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$4
.xdata$x:0000A6A4                 db    8
.xdata$x:0000A6A5                 db    0
.xdata$x:0000A6A6                 db    0
.xdata$x:0000A6A7                 db    0
.xdata$x:0000A6A8                 dd offset __unwindfunclet$??$assign@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@std@@@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEAAV01@V?$_String_iterator@V?$_String_val@U?$_Simple_types@_W@std@@@std@@@1@0@Z$6
.xdata$x:0000A6A8 _xdata$x        ends
.xdata$x:0000A6A8
.xdata$x:0000A6AC ; ===========================================================================
.xdata$x:0000A6AC
.xdata$x:0000A6AC ; Segment type: Pure data
.xdata$x:0000A6AC ; Segment permissions: Read
.xdata$x:0000A6AC _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A6AC                 assume cs:_xdata$x
.xdata$x:0000A6AC                 ;org 0A6ACh
.xdata$x:0000A6AC ; COMDAT (pick associative to section at 5B54)
.xdata$x:0000A6AC __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db 0FFh
.xdata$x:0000A6AC                                         ; DATA XREF: .xdata$x:0000A6BCo
.xdata$x:0000A6AD                 db 0FFh
.xdata$x:0000A6AE                 db 0FFh
.xdata$x:0000A6AF                 db 0FFh
.xdata$x:0000A6B0                 dd offset __unwindfunclet$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z$0
.xdata$x:0000A6B4 __ehfuncinfo$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z db  22h ; "
.xdata$x:0000A6B4                                         ; DATA XREF: __ehhandler$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z+11o
.xdata$x:0000A6B5                 db    5
.xdata$x:0000A6B6                 db  93h ; ô
.xdata$x:0000A6B7                 db  19h
.xdata$x:0000A6B8                 db    1
.xdata$x:0000A6B9                 db    0
.xdata$x:0000A6BA                 db    0
.xdata$x:0000A6BB                 db    0
.xdata$x:0000A6BC                 dd offset __unwindtable$??$construct@U_Container_proxy@std@@U12@@?$allocator@U_Container_proxy@std@@@std@@QAEXPAU_Container_proxy@1@$$QAU21@@Z
.xdata$x:0000A6C0                 db    0
.xdata$x:0000A6C1                 db    0
.xdata$x:0000A6C2                 db    0
.xdata$x:0000A6C3                 db    0
.xdata$x:0000A6C4                 db    0
.xdata$x:0000A6C5                 db    0
.xdata$x:0000A6C6                 db    0
.xdata$x:0000A6C7                 db    0
.xdata$x:0000A6C8                 db    0
.xdata$x:0000A6C9                 db    0
.xdata$x:0000A6CA                 db    0
.xdata$x:0000A6CB                 db    0
.xdata$x:0000A6CC                 db    0
.xdata$x:0000A6CD                 db    0
.xdata$x:0000A6CE                 db    0
.xdata$x:0000A6CF                 db    0
.xdata$x:0000A6D0                 db    0
.xdata$x:0000A6D1                 db    0
.xdata$x:0000A6D2                 db    0
.xdata$x:0000A6D3                 db    0
.xdata$x:0000A6D4                 db    0
.xdata$x:0000A6D5                 db    0
.xdata$x:0000A6D6                 db    0
.xdata$x:0000A6D7                 db    0
.xdata$x:0000A6D7 _xdata$x        ends
.xdata$x:0000A6D7
.xdata$x:0000A6D8 ; ===========================================================================
.xdata$x:0000A6D8
.xdata$x:0000A6D8 ; Segment type: Pure data
.xdata$x:0000A6D8 ; Segment permissions: Read
.xdata$x:0000A6D8 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A6D8                 assume cs:_xdata$x
.xdata$x:0000A6D8                 ;org 0A6D8h
.xdata$x:0000A6D8 ; COMDAT (pick associative to section at 5980)
.xdata$x:0000A6D8 __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db 0FFh
.xdata$x:0000A6D8                                         ; DATA XREF: .xdata$x:0000A6E8o
.xdata$x:0000A6D9                 db 0FFh
.xdata$x:0000A6DA                 db 0FFh
.xdata$x:0000A6DB                 db 0FFh
.xdata$x:0000A6DC                 dd offset __unwindfunclet$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z$0
.xdata$x:0000A6E0 __ehfuncinfo$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z db  22h ; "
.xdata$x:0000A6E0                                         ; DATA XREF: __ehhandler$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z+11o
.xdata$x:0000A6E1                 db    5
.xdata$x:0000A6E2                 db  93h ; ô
.xdata$x:0000A6E3                 db  19h
.xdata$x:0000A6E4                 db    1
.xdata$x:0000A6E5                 db    0
.xdata$x:0000A6E6                 db    0
.xdata$x:0000A6E7                 db    0
.xdata$x:0000A6E8                 dd offset __unwindtable$??$construct@PADAAPAD@?$allocator@D@std@@QAEXPAPADAAPAD@Z
.xdata$x:0000A6EC                 db    0
.xdata$x:0000A6ED                 db    0
.xdata$x:0000A6EE                 db    0
.xdata$x:0000A6EF                 db    0
.xdata$x:0000A6F0                 db    0
.xdata$x:0000A6F1                 db    0
.xdata$x:0000A6F2                 db    0
.xdata$x:0000A6F3                 db    0
.xdata$x:0000A6F4                 db    0
.xdata$x:0000A6F5                 db    0
.xdata$x:0000A6F6                 db    0
.xdata$x:0000A6F7                 db    0
.xdata$x:0000A6F8                 db    0
.xdata$x:0000A6F9                 db    0
.xdata$x:0000A6FA                 db    0
.xdata$x:0000A6FB                 db    0
.xdata$x:0000A6FC                 db    0
.xdata$x:0000A6FD                 db    0
.xdata$x:0000A6FE                 db    0
.xdata$x:0000A6FF                 db    0
.xdata$x:0000A700                 db    0
.xdata$x:0000A701                 db    0
.xdata$x:0000A702                 db    0
.xdata$x:0000A703                 db    0
.xdata$x:0000A703 _xdata$x        ends
.xdata$x:0000A703
.xdata$x:0000A704 ; ===========================================================================
.xdata$x:0000A704
.xdata$x:0000A704 ; Segment type: Pure data
.xdata$x:0000A704 ; Segment permissions: Read
.xdata$x:0000A704 _xdata$x        segment dword public 'DATA' use32
.xdata$x:0000A704                 assume cs:_xdata$x
.xdata$x:0000A704                 ;org 0A704h
.xdata$x:0000A704 ; COMDAT (pick associative to section at 5A80)
.xdata$x:0000A704 __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db 0FFh
.xdata$x:0000A704                                         ; DATA XREF: .xdata$x:0000A714o
.xdata$x:0000A705                 db 0FFh
.xdata$x:0000A706                 db 0FFh
.xdata$x:0000A707                 db 0FFh
.xdata$x:0000A708                 dd offset __unwindfunclet$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z$0
.xdata$x:0000A70C __ehfuncinfo$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z db  22h ; "
.xdata$x:0000A70C                                         ; DATA XREF: __ehhandler$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z+11o
.xdata$x:0000A70D                 db    5
.xdata$x:0000A70E                 db  93h ; ô
.xdata$x:0000A70F                 db  19h
.xdata$x:0000A710                 db    1
.xdata$x:0000A711                 db    0
.xdata$x:0000A712                 db    0
.xdata$x:0000A713                 db    0
.xdata$x:0000A714                 dd offset __unwindtable$??$construct@PA_WAAPA_W@?$allocator@_W@std@@QAEXPAPA_WAAPA_W@Z
.xdata$x:0000A718                 db    0
.xdata$x:0000A719                 db    0
.xdata$x:0000A71A                 db    0
.xdata$x:0000A71B                 db    0
.xdata$x:0000A71C                 db    0
.xdata$x:0000A71D                 db    0
.xdata$x:0000A71E                 db    0
.xdata$x:0000A71F                 db    0
.xdata$x:0000A720                 db    0
.xdata$x:0000A721                 db    0
.xdata$x:0000A722                 db    0
.xdata$x:0000A723                 db    0
.xdata$x:0000A724                 db    0
.xdata$x:0000A725                 db    0
.xdata$x:0000A726                 db    0
.xdata$x:0000A727                 db    0
.xdata$x:0000A728                 db    0
.xdata$x:0000A729                 db    0
.xdata$x:0000A72A                 db    0
.xdata$x:0000A72B                 db    0
.xdata$x:0000A72C                 db    0
.xdata$x:0000A72D                 db    0
.xdata$x:0000A72E                 db    0
.xdata$x:0000A72F                 db    0
.xdata$x:0000A72F _xdata$x        ends
.xdata$x:0000A72F
.bss:0000A730 ; ===========================================================================
.bss:0000A730
.bss:0000A730 ; Segment type: Uninitialized
.bss:0000A730 ; Segment permissions: Read/Write
.bss:0000A730 _bss            segment byte public 'BSS' use32
.bss:0000A730                 assume cs:_bss
.bss:0000A730                 ;org 0A730h
.bss:0000A730                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A730 __Tuple_alloc   db    ? ;
.bss:0000A731 ; std::_Ignore ignore
.bss:0000A731 _ignore         db    ? ;               ; DATA XREF: std::`dynamic initializer for 'ignore''(void)+3o
.bss:0000A732 _allocator_arg  db    ? ;
.bss:0000A733 _piecewise_construct db    ? ;
.bss:0000A733 _bss            ends
.bss:0000A733
.rdata:0000A734 ; ===========================================================================
.rdata:0000A734
.rdata:0000A734 ; Segment type: Pure data
.rdata:0000A734 ; Segment permissions: Read
.rdata:0000A734 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A734 _rdata          segment para public 'DATA' use32
.rdata:0000A734                 assume cs:_rdata
.rdata:0000A734                 ;org 0A734h
.rdata:0000A734 ; COMDAT (pick any)
.rdata:0000A734                 public ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000A734 ; wchar_t `string'
.rdata:0000A734 ??_C@_1JA@EADLBAJ@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000A734                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+48o
.rdata:0000A734                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000A734                 unicode 0, <clude\xutility>,0
.rdata:0000A734 _rdata          ends
.rdata:0000A734
.rdata:0000A7C4 ; ===========================================================================
.rdata:0000A7C4
.rdata:0000A7C4 ; Segment type: Pure data
.rdata:0000A7C4 ; Segment permissions: Read
.rdata:0000A7C4 _rdata          segment dword public 'DATA' use32
.rdata:0000A7C4                 assume cs:_rdata
.rdata:0000A7C4                 ;org 0A7C4h
.rdata:0000A7C4 ; COMDAT (pick any)
.rdata:0000A7C4                 public ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@
.rdata:0000A7C4 ; wchar_t `string'
.rdata:0000A7C4 ??_C@_1DC@POOIKBAO@?$AAI?$AAT?$AAE?$AAR?$AAA?$AAT?$AAO?$AAR?$AA?5?$AAL?$AAI?$AAS?$AAT?$AA?5?$AAC?$AAO?$AAR?$AAR?$AAU?$AAP?$AAT?$AAE?$AAD?$AA?$CB?$AA?$AA@:
.rdata:0000A7C4                                         ; DATA XREF: std::_Iterator_base12::_Orphan_me(void)+4Do
.rdata:0000A7C4                 unicode 0, <ITERATOR LIST CORRUPTED!>,0
.rdata:0000A7F6                 align 4
.rdata:0000A7F6 _rdata          ends
.rdata:0000A7F6
.rdata:0000A7F8 ; ===========================================================================
.rdata:0000A7F8
.rdata:0000A7F8 ; Segment type: Pure data
.rdata:0000A7F8 ; Segment permissions: Read
.rdata:0000A7F8 _rdata          segment dword public 'DATA' use32
.rdata:0000A7F8                 assume cs:_rdata
.rdata:0000A7F8                 ;org 0A7F8h
.rdata:0000A7F8 ; COMDAT (pick largest)
.rdata:0000A7F8                 dd offset ??_R4error_category@std@@6B@ ; const std::error_category::`RTTI Complete Object Locator'
.rdata:0000A7FC                 public ??_7error_category@std@@6B@
.rdata:0000A7FC ; const std::error_category::`vftable'
.rdata:0000A7FC ??_7error_category@std@@6B@ dd offset ??_Eerror_category@std@@UAEPAXI@Z
.rdata:0000A7FC                                         ; DATA XREF: std::error_category::error_category(void)+Ao
.rdata:0000A7FC                                         ; std::error_category::~error_category(void)+Ao
.rdata:0000A7FC                                         ; std::error_category::`vector deleting destructor'(uint)
.rdata:0000A800                 dd offset __purecall
.rdata:0000A804                 dd offset __purecall
.rdata:0000A808                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000A80C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000A810                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000A810 _rdata          ends
.rdata:0000A810
.rdata:0000A814 ; ===========================================================================
.rdata:0000A814
.rdata:0000A814 ; Segment type: Pure data
.rdata:0000A814 ; Segment permissions: Read
.rdata:0000A814 _rdata          segment dword public 'DATA' use32
.rdata:0000A814                 assume cs:_rdata
.rdata:0000A814                 ;org 0A814h
.rdata:0000A814 ; COMDAT (pick largest)
.rdata:0000A814                 dd offset ??_R4_Generic_error_category@std@@6B@ ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata:0000A818                 public ??_7_Generic_error_category@std@@6B@
.rdata:0000A818 ; const std::_Generic_error_category::`vftable'
.rdata:0000A818 ??_7_Generic_error_category@std@@6B@ dd offset ??_E_Generic_error_category@std@@UAEPAXI@Z
.rdata:0000A818                                         ; DATA XREF: std::_Generic_error_category::_Generic_error_category(void)+38o
.rdata:0000A818                                         ; std::_Generic_error_category::`vector deleting destructor'(uint)
.rdata:0000A81C                 dd offset ?name@_Generic_error_category@std@@UBEPBDXZ ; std::_Generic_error_category::name(void)
.rdata:0000A820                 dd offset ?message@_Generic_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Generic_error_category::message(int)
.rdata:0000A824                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000A828                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000A82C                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000A82C _rdata          ends
.rdata:0000A82C
.rdata:0000A830 ; ===========================================================================
.rdata:0000A830
.rdata:0000A830 ; Segment type: Pure data
.rdata:0000A830 ; Segment permissions: Read
.rdata:0000A830 _rdata          segment dword public 'DATA' use32
.rdata:0000A830                 assume cs:_rdata
.rdata:0000A830                 ;org 0A830h
.rdata:0000A830 ; COMDAT (pick any)
.rdata:0000A830                 public ??_C@_07DCLBNMLN@generic?$AA@
.rdata:0000A830 ; `string'
.rdata:0000A830 ??_C@_07DCLBNMLN@generic?$AA@ db 'generic',0
.rdata:0000A830                                         ; DATA XREF: std::_Generic_error_category::name(void)+7o
.rdata:0000A830 _rdata          ends
.rdata:0000A830
.rdata:0000A838 ; ===========================================================================
.rdata:0000A838
.rdata:0000A838 ; Segment type: Pure data
.rdata:0000A838 ; Segment permissions: Read
.rdata:0000A838 _rdata          segment dword public 'DATA' use32
.rdata:0000A838                 assume cs:_rdata
.rdata:0000A838                 ;org 0A838h
.rdata:0000A838 ; COMDAT (pick any)
.rdata:0000A838                 public ??_C@_0O@BFJCFAAK@unknown?5error?$AA@
.rdata:0000A838 ; `string'
.rdata:0000A838 ??_C@_0O@BFJCFAAK@unknown?5error?$AA@ db 'unknown error',0
.rdata:0000A838                                         ; DATA XREF: std::_Generic_error_category::message(int):loc_8F14o
.rdata:0000A838                                         ; std::_System_error_category::message(int):loc_9090o
.rdata:0000A846                 align 4
.rdata:0000A846 _rdata          ends
.rdata:0000A846
.rdata:0000A848 ; ===========================================================================
.rdata:0000A848
.rdata:0000A848 ; Segment type: Pure data
.rdata:0000A848 ; Segment permissions: Read
.rdata:0000A848 _rdata          segment dword public 'DATA' use32
.rdata:0000A848                 assume cs:_rdata
.rdata:0000A848                 ;org 0A848h
.rdata:0000A848 ; COMDAT (pick largest)
.rdata:0000A848                 dd offset ??_R4_Iostream_error_category@std@@6B@ ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata:0000A84C                 public ??_7_Iostream_error_category@std@@6B@
.rdata:0000A84C ; const std::_Iostream_error_category::`vftable'
.rdata:0000A84C ??_7_Iostream_error_category@std@@6B@ dd offset ??_E_Iostream_error_category@std@@UAEPAXI@Z
.rdata:0000A84C                                         ; DATA XREF: std::_Iostream_error_category::_Iostream_error_category(void)+38o
.rdata:0000A84C                                         ; std::_Iostream_error_category::`vector deleting destructor'(uint)
.rdata:0000A850                 dd offset ?name@_Iostream_error_category@std@@UBEPBDXZ ; std::_Iostream_error_category::name(void)
.rdata:0000A854                 dd offset ?message@_Iostream_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_Iostream_error_category::message(int)
.rdata:0000A858                 dd offset ?default_error_condition@error_category@std@@UBE?AVerror_condition@2@H@Z ; std::error_category::default_error_condition(int)
.rdata:0000A85C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000A860                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000A860 _rdata          ends
.rdata:0000A860
.rdata:0000A864 ; ===========================================================================
.rdata:0000A864
.rdata:0000A864 ; Segment type: Pure data
.rdata:0000A864 ; Segment permissions: Read
.rdata:0000A864 _rdata          segment dword public 'DATA' use32
.rdata:0000A864                 assume cs:_rdata
.rdata:0000A864                 ;org 0A864h
.rdata:0000A864 ; COMDAT (pick any)
.rdata:0000A864                 public ??_C@_08LLGCOLLL@iostream?$AA@
.rdata:0000A864 ; `string'
.rdata:0000A864 ??_C@_08LLGCOLLL@iostream?$AA@ db 'iostream',0
.rdata:0000A864                                         ; DATA XREF: std::_Iostream_error_category::name(void)+7o
.rdata:0000A86D                 align 10h
.rdata:0000A86D _rdata          ends
.rdata:0000A86D
.rdata:0000A870 ; ===========================================================================
.rdata:0000A870
.rdata:0000A870 ; Segment type: Pure data
.rdata:0000A870 ; Segment permissions: Read
.rdata:0000A870 _rdata          segment dword public 'DATA' use32
.rdata:0000A870                 assume cs:_rdata
.rdata:0000A870                 ;org 0A870h
.rdata:0000A870 ; COMDAT (pick any)
.rdata:0000A870                 public ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@
.rdata:0000A870 ; char `string'[]
.rdata:0000A870 ??_C@_0BG@PADBLCHM@iostream?5stream?5error?$AA@ db 'iostream stream error',0
.rdata:0000A870                                         ; DATA XREF: std::_Iostream_error_category::message(int)+35o
.rdata:0000A886                 align 4
.rdata:0000A886 _rdata          ends
.rdata:0000A886
.rdata:0000A888 ; ===========================================================================
.rdata:0000A888
.rdata:0000A888 ; Segment type: Pure data
.rdata:0000A888 ; Segment permissions: Read
.rdata:0000A888 _rdata          segment dword public 'DATA' use32
.rdata:0000A888                 assume cs:_rdata
.rdata:0000A888                 ;org 0A888h
.rdata:0000A888 ; COMDAT (pick largest)
.rdata:0000A888                 dd offset ??_R4_System_error_category@std@@6B@ ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata:0000A88C                 public ??_7_System_error_category@std@@6B@
.rdata:0000A88C ; const std::_System_error_category::`vftable'
.rdata:0000A88C ??_7_System_error_category@std@@6B@ dd offset ??_E_System_error_category@std@@UAEPAXI@Z
.rdata:0000A88C                                         ; DATA XREF: std::_System_error_category::_System_error_category(void)+38o
.rdata:0000A88C                                         ; std::_System_error_category::`vector deleting destructor'(uint)
.rdata:0000A890                 dd offset ?name@_System_error_category@std@@UBEPBDXZ ; std::_System_error_category::name(void)
.rdata:0000A894                 dd offset ?message@_System_error_category@std@@UBE?AV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@2@H@Z ; std::_System_error_category::message(int)
.rdata:0000A898                 dd offset ?default_error_condition@_System_error_category@std@@UBE?AVerror_condition@2@H@Z ; std::_System_error_category::default_error_condition(int)
.rdata:0000A89C                 dd offset ?equivalent@error_category@std@@UBE_NABVerror_code@2@H@Z ; std::error_category::equivalent(std::error_code const &,int)
.rdata:0000A8A0                 dd offset ?equivalent@error_category@std@@UBE_NHABVerror_condition@2@@Z ; std::error_category::equivalent(int,std::error_condition const &)
.rdata:0000A8A0 _rdata          ends
.rdata:0000A8A0
.rdata:0000A8A4 ; ===========================================================================
.rdata:0000A8A4
.rdata:0000A8A4 ; Segment type: Pure data
.rdata:0000A8A4 ; Segment permissions: Read
.rdata:0000A8A4 _rdata          segment dword public 'DATA' use32
.rdata:0000A8A4                 assume cs:_rdata
.rdata:0000A8A4                 ;org 0A8A4h
.rdata:0000A8A4 ; COMDAT (pick any)
.rdata:0000A8A4                 public ??_C@_06FHFOAHML@system?$AA@
.rdata:0000A8A4 ; `string'
.rdata:0000A8A4 ??_C@_06FHFOAHML@system?$AA@ db 'system',0
.rdata:0000A8A4                                         ; DATA XREF: std::_System_error_category::name(void)+7o
.rdata:0000A8AB                 align 4
.rdata:0000A8AB _rdata          ends
.rdata:0000A8AB
.bss:0000A8AC ; ===========================================================================
.bss:0000A8AC
.bss:0000A8AC ; Segment type: Uninitialized
.bss:0000A8AC ; Segment permissions: Read/Write
.bss:0000A8AC _bss            segment dword public 'BSS' use32
.bss:0000A8AC                 assume cs:_bss
.bss:0000A8AC                 ;org 0A8ACh
.bss:0000A8AC ; COMDAT (pick any)
.bss:0000A8AC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A8AC                 public ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A
.bss:0000A8AC ; std::_Generic_error_category std::_Error_objects<int>::_Generic_object
.bss:0000A8AC ?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A db    ? ;
.bss:0000A8AC                                         ; DATA XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o
.bss:0000A8AC                                         ; `dynamic atexit destructor for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+3o ...
.bss:0000A8AD                 db    ? ;
.bss:0000A8AE                 db    ? ;
.bss:0000A8AF                 db    ? ;
.bss:0000A8AF _bss            ends
.bss:0000A8AF
.bss:0000A8B0 ; ===========================================================================
.bss:0000A8B0
.bss:0000A8B0 ; Segment type: Uninitialized
.bss:0000A8B0 ; Segment permissions: Read/Write
.bss:0000A8B0 _bss            segment dword public 'BSS' use32
.bss:0000A8B0                 assume cs:_bss
.bss:0000A8B0                 ;org 0A8B0h
.bss:0000A8B0 ; COMDAT (pick any)
.bss:0000A8B0                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A8B0                 public ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A
.bss:0000A8B0 ; std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object
.bss:0000A8B0 ?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A db    ? ;
.bss:0000A8B0                                         ; DATA XREF: `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:0000A8B0                                         ; `dynamic atexit destructor for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+3o
.bss:0000A8B1                 db    ? ;
.bss:0000A8B2                 db    ? ;
.bss:0000A8B3                 db    ? ;
.bss:0000A8B3 _bss            ends
.bss:0000A8B3
.bss:0000A8B4 ; ===========================================================================
.bss:0000A8B4
.bss:0000A8B4 ; Segment type: Uninitialized
.bss:0000A8B4 ; Segment permissions: Read/Write
.bss:0000A8B4 _bss            segment dword public 'BSS' use32
.bss:0000A8B4                 assume cs:_bss
.bss:0000A8B4                 ;org 0A8B4h
.bss:0000A8B4 ; COMDAT (pick any)
.bss:0000A8B4                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A8B4                 public ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A
.bss:0000A8B4 ; std::_System_error_category std::_Error_objects<int>::_System_object
.bss:0000A8B4 ?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A db    ? ;
.bss:0000A8B4                                         ; DATA XREF: `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o
.bss:0000A8B4                                         ; `dynamic atexit destructor for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)+3o ...
.bss:0000A8B5                 db    ? ;
.bss:0000A8B6                 db    ? ;
.bss:0000A8B7                 db    ? ;
.bss:0000A8B7 _bss            ends
.bss:0000A8B7
.rdata:0000A8B8 ; ===========================================================================
.rdata:0000A8B8
.rdata:0000A8B8 ; Segment type: Pure data
.rdata:0000A8B8 ; Segment permissions: Read
.rdata:0000A8B8 _rdata          segment dword public 'DATA' use32
.rdata:0000A8B8                 assume cs:_rdata
.rdata:0000A8B8                 ;org 0A8B8h
.rdata:0000A8B8 ; COMDAT (pick any)
.rdata:0000A8B8                 public ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB
.rdata:0000A8B8 ; public: static unsigned int const std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>::npos
.rdata:0000A8B8 ?npos@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@2IB dd 0FFFFFFFFh
.rdata:0000A8B8                                         ; DATA XREF: std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+5Br
.rdata:0000A8B8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::assign(std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> const &)+7r
.rdata:0000A8B8 _rdata          ends
.rdata:0000A8B8
.bss:0000A8BC ; ===========================================================================
.bss:0000A8BC
.bss:0000A8BC ; Segment type: Uninitialized
.bss:0000A8BC ; Segment permissions: Read/Write
.bss:0000A8BC _bss            segment dword public 'BSS' use32
.bss:0000A8BC                 assume cs:_bss
.bss:0000A8BC                 ;org 0A8BCh
.bss:0000A8BC ; COMDAT (pick any)
.bss:0000A8BC                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A8BC                 public ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000A8BC ; std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id
.bss:0000A8BC ?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000A8BC                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)+5o
.bss:0000A8BD                 db    ? ;
.bss:0000A8BE                 db    ? ;
.bss:0000A8BF                 db    ? ;
.bss:0000A8BF _bss            ends
.bss:0000A8BF
.rdata:0000A8C0 ; ===========================================================================
.rdata:0000A8C0
.rdata:0000A8C0 ; Segment type: Pure data
.rdata:0000A8C0 ; Segment permissions: Read
.rdata:0000A8C0 _rdata          segment dword public 'DATA' use32
.rdata:0000A8C0                 assume cs:_rdata
.rdata:0000A8C0                 ;org 0A8C0h
.rdata:0000A8C0 ; COMDAT (pick any)
.rdata:0000A8C0                 public ??_C@_15KNBIKKIN@?$AA?$CF?$AAd?$AA?$AA@
.rdata:0000A8C0 ; wchar_t `string'
.rdata:0000A8C0 ??_C@_15KNBIKKIN@?$AA?$CF?$AAd?$AA?$AA@:
.rdata:0000A8C0                                         ; DATA XREF: std::to_wstring(int)+39o
.rdata:0000A8C0                 unicode 0, <%d>,0
.rdata:0000A8C6                 align 4
.rdata:0000A8C6 _rdata          ends
.rdata:0000A8C6
.bss:0000A8C8 ; ===========================================================================
.bss:0000A8C8
.bss:0000A8C8 ; Segment type: Uninitialized
.bss:0000A8C8 ; Segment permissions: Read/Write
.bss:0000A8C8 _bss            segment dword public 'BSS' use32
.bss:0000A8C8                 assume cs:_bss
.bss:0000A8C8                 ;org 0A8C8h
.bss:0000A8C8 ; COMDAT (pick any)
.bss:0000A8C8                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A8C8                 public ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A
.bss:0000A8C8 ; std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id
.bss:0000A8C8 ?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A db    ? ;
.bss:0000A8C8                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)+5o
.bss:0000A8C9                 db    ? ;
.bss:0000A8CA                 db    ? ;
.bss:0000A8CB                 db    ? ;
.bss:0000A8CB _bss            ends
.bss:0000A8CB
.rdata:0000A8CC ; ===========================================================================
.rdata:0000A8CC
.rdata:0000A8CC ; Segment type: Pure data
.rdata:0000A8CC ; Segment permissions: Read
.rdata:0000A8CC ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A8CC _rdata          segment para public 'DATA' use32
.rdata:0000A8CC                 assume cs:_rdata
.rdata:0000A8CC                 ;org 0A8CCh
.rdata:0000A8CC ; COMDAT (pick any)
.rdata:0000A8CC                 public ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000A8CC ; wchar_t `string'
.rdata:0000A8CC ??_C@_1IO@FEAPGJBD@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000A8CC                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+5Do
.rdata:0000A8CC                                         ; std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+8Ao ...
.rdata:0000A8CC                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000A8CC                 unicode 0, <clude\xstring>,0
.rdata:0000A95A                 align 4
.rdata:0000A95A _rdata          ends
.rdata:0000A95A
.bss:0000A95C ; ===========================================================================
.bss:0000A95C
.bss:0000A95C ; Segment type: Uninitialized
.bss:0000A95C ; Segment permissions: Read/Write
.bss:0000A95C _bss            segment dword public 'BSS' use32
.bss:0000A95C                 assume cs:_bss
.bss:0000A95C                 ;org 0A95Ch
.bss:0000A95C ; COMDAT (pick any)
.bss:0000A95C                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A95C                 public ?id@?$numpunct@D@std@@2V0locale@2@A
.bss:0000A95C ; std::locale::id std::numpunct<char>::id
.bss:0000A95C ?id@?$numpunct@D@std@@2V0locale@2@A db    ? ;
.bss:0000A95C                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)+5o
.bss:0000A95D                 db    ? ;
.bss:0000A95E                 db    ? ;
.bss:0000A95F                 db    ? ;
.bss:0000A95F _bss            ends
.bss:0000A95F
.bss:0000A960 ; ===========================================================================
.bss:0000A960
.bss:0000A960 ; Segment type: Uninitialized
.bss:0000A960 ; Segment permissions: Read/Write
.bss:0000A960 _bss            segment dword public 'BSS' use32
.bss:0000A960                 assume cs:_bss
.bss:0000A960                 ;org 0A960h
.bss:0000A960 ; COMDAT (pick any)
.bss:0000A960                 assume es:nothing, ss:nothing, ds:_rdata, fs:nothing, gs:nothing
.bss:0000A960                 public ?id@?$numpunct@_W@std@@2V0locale@2@A
.bss:0000A960 ; std::locale::id std::numpunct<wchar_t>::id
.bss:0000A960 ?id@?$numpunct@_W@std@@2V0locale@2@A db    ? ;
.bss:0000A960                                         ; DATA XREF: `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)+5o
.bss:0000A961                 db    ? ;
.bss:0000A962                 db    ? ;
.bss:0000A963                 db    ? ;
.bss:0000A963 _bss            ends
.bss:0000A963
.rdata:0000A964 ; ===========================================================================
.rdata:0000A964
.rdata:0000A964 ; Segment type: Pure data
.rdata:0000A964 ; Segment permissions: Read
.rdata:0000A964 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000A964 _rdata          segment para public 'DATA' use32
.rdata:0000A964                 assume cs:_rdata
.rdata:0000A964                 ;org 0A964h
.rdata:0000A964 ; COMDAT (pick any)
.rdata:0000A964                 public ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@
.rdata:0000A964 ; wchar_t `string'
.rdata:0000A964 ??_C@_1IM@EINEHPHE@?$AAC?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AA?5?$AAF?$AAi?$AAl?$AAe?$AAs?$AA?5?$AA?$CI?$AAx?$AA8?$AA6?$AA?$CJ?$AA?2?$AAM?$AAi?$AAc?$AAr?$AAo?$AAs?$AAo?$AAf?$AAt@:
.rdata:0000A964                                         ; DATA XREF: std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)+19o
.rdata:0000A964                                         ; std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)+49o ...
.rdata:0000A964                 unicode 0, <C:\Program Files (x86)\Microsoft Visual Studio 12.0\VC\in>
.rdata:0000A964                 unicode 0, <clude\vector>,0
.rdata:0000A964 _rdata          ends
.rdata:0000A964
.rdata:0000A9F0 ; ===========================================================================
.rdata:0000A9F0
.rdata:0000A9F0 ; Segment type: Pure data
.rdata:0000A9F0 ; Segment permissions: Read
.rdata:0000A9F0 _rdata          segment dword public 'DATA' use32
.rdata:0000A9F0                 assume cs:_rdata
.rdata:0000A9F0                 ;org 0A9F0h
.rdata:0000A9F0 ; COMDAT (pick any)
.rdata:0000A9F0                 public ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@
.rdata:0000A9F0 ; wchar_t `string'
.rdata:0000A9F0 ??_C@_1DM@LHGCHCBA@?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?5?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$AA@:
.rdata:0000A9F0                                         ; DATA XREF: std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)+1Eo
.rdata:0000A9F0                                         ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::operator[](uint)+1Eo
.rdata:0000A9F0                 unicode 0, <vector subscript out of range>,0
.rdata:0000A9F0 _rdata          ends
.rdata:0000A9F0
.rdata:0000AA2C ; ===========================================================================
.rdata:0000AA2C
.rdata:0000AA2C ; Segment type: Pure data
.rdata:0000AA2C ; Segment permissions: Read
.rdata:0000AA2C _rdata          segment dword public 'DATA' use32
.rdata:0000AA2C                 assume cs:_rdata
.rdata:0000AA2C                 ;org 0AA2Ch
.rdata:0000AA2C ; COMDAT (pick any)
.rdata:0000AA2C                 public ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@
.rdata:0000AA2C ; `string'
.rdata:0000AA2C ??_C@_0CE@OFMIGAMM@Standard?5C?$CL?$CL?5Libraries?5Out?5of?5Ra@ db 'Standard C++ Libraries Out of Range',0
.rdata:0000AA2C                                         ; DATA XREF: std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)+2Bo
.rdata:0000AA2C                                         ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::operator[](uint)+2Bo ...
.rdata:0000AA2C _rdata          ends
.rdata:0000AA2C
.rdata:0000AA50 ; ===========================================================================
.rdata:0000AA50
.rdata:0000AA50 ; Segment type: Pure data
.rdata:0000AA50 ; Segment permissions: Read
.rdata:0000AA50 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000AA50 _rdata          segment para public 'DATA' use32
.rdata:0000AA50                 assume cs:_rdata
.rdata:0000AA50                 ;org 0AA50h
.rdata:0000AA50 ; COMDAT (pick any)
.rdata:0000AA50                 public ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@
.rdata:0000AA50 ; `string'
.rdata:0000AA50 ??_C@_1FG@IBPIFFN@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAO?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAR@:
.rdata:0000AA50                                         ; DATA XREF: std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint):loc_70A4o
.rdata:0000AA50                                         ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::operator[](uint):loc_7134o ...
.rdata:0000AA50                 unicode 0, <"Standard C++ Libraries Out of Range" && 0>,0
.rdata:0000AAA6                 align 4
.rdata:0000AAA6 _rdata          ends
.rdata:0000AAA6
.rdata:0000AAA8 ; ===========================================================================
.rdata:0000AAA8
.rdata:0000AAA8 ; Segment type: Pure data
.rdata:0000AAA8 ; Segment permissions: Read
.rdata:0000AAA8 _rdata          segment dword public 'DATA' use32
.rdata:0000AAA8                 assume cs:_rdata
.rdata:0000AAA8                 ;org 0AAA8h
.rdata:0000AAA8 ; COMDAT (pick any)
.rdata:0000AAA8                 public ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@
.rdata:0000AAA8 ; `string'
.rdata:0000AAA8 ??_C@_15GANGMFKL@?$AA?$CF?$AAs?$AA?$AA@:
.rdata:0000AAA8                                         ; DATA XREF: std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)+3Do
.rdata:0000AAA8                                         ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::operator[](uint)+3Do ...
.rdata:0000AAA8                 unicode 0, <%s>,0
.rdata:0000AAAE                 align 10h
.rdata:0000AAAE _rdata          ends
.rdata:0000AAAE
.rdata:0000AAB0 ; ===========================================================================
.rdata:0000AAB0
.rdata:0000AAB0 ; Segment type: Pure data
.rdata:0000AAB0 ; Segment permissions: Read
.rdata:0000AAB0 _rdata          segment dword public 'DATA' use32
.rdata:0000AAB0                 assume cs:_rdata
.rdata:0000AAB0                 ;org 0AAB0h
.rdata:0000AAB0 ; COMDAT (pick any)
.rdata:0000AAB0                 public ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@
.rdata:0000AAB0 ; `string'
.rdata:0000AAB0 ??_C@_1BO@MEPPHOO@?$AA?$CC?$AAo?$AAu?$AAt?$AA?5?$AAo?$AAf?$AA?5?$AAr?$AAa?$AAn?$AAg?$AAe?$AA?$CC?$AA?$AA@:
.rdata:0000AAB0                                         ; DATA XREF: std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)+6Fo
.rdata:0000AAB0                                         ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::operator[](uint)+6Fo ...
.rdata:0000AAB0                 unicode 0, <"out of range">,0
.rdata:0000AACE                 align 10h
.rdata:0000AACE _rdata          ends
.rdata:0000AACE
.rdata:0000AAD0 ; ===========================================================================
.rdata:0000AAD0
.rdata:0000AAD0 ; Segment type: Pure data
.rdata:0000AAD0 ; Segment permissions: Read
.rdata:0000AAD0 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000AAD0 _rdata          segment para public 'DATA' use32
.rdata:0000AAD0                 assume cs:_rdata
.rdata:0000AAD0                 ;org 0AAD0h
.rdata:0000AAD0 ; COMDAT (pick any)
.rdata:0000AAD0                 public ??_C@_1LK@BFNMKIGH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAS?$AAh?$AAo?$AAr?$AAt?$AAc?$AAu@
.rdata:0000AAD0 ; `string'
.rdata:0000AAD0 ??_C@_1LK@BFNMKIGH@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAC?$AAo?$AAm?$AAm?$AAa?$AAn?$AAd?$AAS?$AAh?$AAo?$AAr?$AAt?$AAc?$AAu@:
.rdata:0000AAD0                                         ; DATA XREF: std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)+6Ao
.rdata:0000AAD0                 unicode 0, <std::vector>
.rdata:0000AAD0                 dw 3Ch
.rdata:0000AAD0                 unicode 0, <class CommandShortcut,class std::allocator>
.rdata:0000AAD0                 dw 3Ch
.rdata:0000AAD0                 unicode 0, <class CommandShortcut>
.rdata:0000AAD0                 dw 3Eh
.rdata:0000AAD0                 unicode 0, < >
.rdata:0000AAD0                 dw 3Eh
.rdata:0000AAD0                 unicode 0, <::operator []>,0
.rdata:0000AB8A                 align 4
.rdata:0000AB8A _rdata          ends
.rdata:0000AB8A
.rdata:0000AB8C ; ===========================================================================
.rdata:0000AB8C
.rdata:0000AB8C ; Segment type: Pure data
.rdata:0000AB8C ; Segment permissions: Read
.rdata:0000AB8C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000AB8C _rdata          segment para public 'DATA' use32
.rdata:0000AB8C                 assume cs:_rdata
.rdata:0000AB8C                 ;org 0AB8Ch
.rdata:0000AB8C ; COMDAT (pick any)
.rdata:0000AB8C                 public ??_C@_1LK@EFECNNFA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAS?$AAc?$AAi?$AAn?$AAt?$AAi?$AAl?$AAl?$AAa?$AAK?$AAe?$AAy?$AAM?$AAa@
.rdata:0000AB8C ; `string'
.rdata:0000AB8C ??_C@_1LK@EFECNNFA@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AAv?$AAe?$AAc?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AAS?$AAc?$AAi?$AAn?$AAt?$AAi?$AAl?$AAl?$AAa?$AAK?$AAe?$AAy?$AAM?$AAa@:
.rdata:0000AB8C                                         ; DATA XREF: std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::operator[](uint)+6Ao
.rdata:0000AB8C                 unicode 0, <std::vector>
.rdata:0000AB8C                 dw 3Ch
.rdata:0000AB8C                 unicode 0, <class ScintillaKeyMap,class std::allocator>
.rdata:0000AB8C                 dw 3Ch
.rdata:0000AB8C                 unicode 0, <class ScintillaKeyMap>
.rdata:0000AB8C                 dw 3Eh
.rdata:0000AB8C                 unicode 0, < >
.rdata:0000AB8C                 dw 3Eh
.rdata:0000AB8C                 unicode 0, <::operator []>,0
.rdata:0000AC46                 align 4
.rdata:0000AC46 _rdata          ends
.rdata:0000AC46
.rdata:0000AC48 ; ===========================================================================
.rdata:0000AC48
.rdata:0000AC48 ; Segment type: Pure data
.rdata:0000AC48 ; Segment permissions: Read
.rdata:0000AC48 _rdata          segment dword public 'DATA' use32
.rdata:0000AC48                 assume cs:_rdata
.rdata:0000AC48                 ;org 0AC48h
.rdata:0000AC48 ; COMDAT (pick any)
.rdata:0000AC48                 public ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@
.rdata:0000AC48 ; `string'
.rdata:0000AC48 ??_C@_0CI@FNPHFCCM@Standard?5C?$CL?$CL?5Libraries?5Invalid?5A@ db 'Standard C++ Libraries Invalid Argument',0
.rdata:0000AC48                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+41o
.rdata:0000AC48 _rdata          ends
.rdata:0000AC48
.rdata:0000AC70 ; ===========================================================================
.rdata:0000AC70
.rdata:0000AC70 ; Segment type: Pure data
.rdata:0000AC70 ; Segment permissions: Read
.rdata:0000AC70 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000AC70 _rdata          segment para public 'DATA' use32
.rdata:0000AC70                 assume cs:_rdata
.rdata:0000AC70                 ;org 0AC70h
.rdata:0000AC70 ; COMDAT (pick any)
.rdata:0000AC70                 public ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@
.rdata:0000AC70 ; `string'
.rdata:0000AC70 ??_C@_1FO@GJIHNDLM@?$AA?$CC?$AAS?$AAt?$AAa?$AAn?$AAd?$AAa?$AAr?$AAd?$AA?5?$AAC?$AA?$CL?$AA?$CL?$AA?5?$AAL?$AAi?$AAb?$AAr?$AAa?$AAr?$AAi?$AAe?$AAs?$AA?5?$AAI?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5@:
.rdata:0000AC70                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &):loc_77F6o
.rdata:0000AC70                 unicode 0, <"Standard C++ Libraries Invalid Argument" && 0>,0
.rdata:0000ACCE                 align 10h
.rdata:0000ACCE _rdata          ends
.rdata:0000ACCE
.rdata:0000ACD0 ; ===========================================================================
.rdata:0000ACD0
.rdata:0000ACD0 ; Segment type: Pure data
.rdata:0000ACD0 ; Segment permissions: Read
.rdata:0000ACD0 _rdata          segment dword public 'DATA' use32
.rdata:0000ACD0                 assume cs:_rdata
.rdata:0000ACD0                 ;org 0ACD0h
.rdata:0000ACD0 ; COMDAT (pick any)
.rdata:0000ACD0                 public ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@
.rdata:0000ACD0 ; `string'
.rdata:0000ACD0 ??_C@_1CG@JNLFBNGN@?$AA?$CC?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAa?$AAr?$AAg?$AAu?$AAm?$AAe?$AAn?$AAt?$AA?$CC?$AA?$AA@:
.rdata:0000ACD0                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+85o
.rdata:0000ACD0                 unicode 0, <"invalid argument">,0
.rdata:0000ACF6                 align 4
.rdata:0000ACF6 _rdata          ends
.rdata:0000ACF6
.rdata:0000ACF8 ; ===========================================================================
.rdata:0000ACF8
.rdata:0000ACF8 ; Segment type: Pure data
.rdata:0000ACF8 ; Segment permissions: Read
.rdata:0000ACF8 _rdata          segment dword public 'DATA' use32
.rdata:0000ACF8                 assume cs:_rdata
.rdata:0000ACF8                 ;org 0ACF8h
.rdata:0000ACF8 ; COMDAT (pick any)
.rdata:0000ACF8                 public ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@
.rdata:0000ACF8 ; char `string'[]
.rdata:0000ACF8 ??_C@_0BA@JFNIOLAK@string?5too?5long?$AA@ db 'string too long',0
.rdata:0000ACF8                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+7o
.rdata:0000ACF8                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+7o
.rdata:0000ACF8 _rdata          ends
.rdata:0000ACF8
.rdata:0000AD08 ; ===========================================================================
.rdata:0000AD08
.rdata:0000AD08 ; Segment type: Pure data
.rdata:0000AD08 ; Segment permissions: Read
.rdata:0000AD08 _rdata          segment dword public 'DATA' use32
.rdata:0000AD08                 assume cs:_rdata
.rdata:0000AD08                 ;org 0AD08h
.rdata:0000AD08 ; COMDAT (pick any)
.rdata:0000AD08                 public ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@
.rdata:0000AD08 ; char `string'[]
.rdata:0000AD08 ??_C@_0BI@CFPLBAOH@invalid?5string?5position?$AA@ db 'invalid string position',0
.rdata:0000AD08                                         ; DATA XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+7o
.rdata:0000AD08                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+7o
.rdata:0000AD08 _rdata          ends
.rdata:0000AD08
.rdata:0000AD20 ; ===========================================================================
.rdata:0000AD20
.rdata:0000AD20 ; Segment type: Pure data
.rdata:0000AD20 ; Segment permissions: Read
.rdata:0000AD20 _rdata          segment dword public 'DATA' use32
.rdata:0000AD20                 assume cs:_rdata
.rdata:0000AD20                 ;org 0AD20h
.rdata:0000AD20 ; COMDAT (pick any)
.rdata:0000AD20                 public ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@
.rdata:0000AD20 ; wchar_t `string'
.rdata:0000AD20 ??_C@_1DM@KDEKGMPF@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AAs?$AA?5?$AAi?$AAn?$AAc?$AAo?$AAm?$AAp?$AAa?$AAt?$AAi?$AAb?$AAl?$AAe?$AA?$AA@:
.rdata:0000AD20                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+34o
.rdata:0000AD20                 unicode 0, <string iterators incompatible>,0
.rdata:0000AD20 _rdata          ends
.rdata:0000AD20
.rdata:0000AD5C ; ===========================================================================
.rdata:0000AD5C
.rdata:0000AD5C ; Segment type: Pure data
.rdata:0000AD5C ; Segment permissions: Read
.rdata:0000AD5C ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000AD5C _rdata          segment para public 'DATA' use32
.rdata:0000AD5C                 assume cs:_rdata
.rdata:0000AD5C                 ;org 0AD5Ch
.rdata:0000AD5C ; COMDAT (pick any)
.rdata:0000AD5C                 public ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:0000AD5C ; `string'
.rdata:0000AD5C ??_C@_1MG@CLNEOJNJ@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:0000AD5C                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::_Compat(std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>> const &)+80o
.rdata:0000AD5C                 unicode 0, <std::_String_const_iterator>
.rdata:0000AD5C                 dw 3Ch
.rdata:0000AD5C                 unicode 0, <class std::_String_val>
.rdata:0000AD5C                 dw 3Ch
.rdata:0000AD5C                 unicode 0, <struct std::_Simple_types>
.rdata:0000AD5C                 dw 3Ch
.rdata:0000AD5C                 unicode 0, <wchar_t>
.rdata:0000AD5C                 dw 3Eh
.rdata:0000AD5C                 unicode 0, < >
.rdata:0000AD5C                 dw 3Eh
.rdata:0000AD5C                 unicode 0, < >
.rdata:0000AD5C                 dw 3Eh
.rdata:0000AD5C                 unicode 0, <::_Compat>,0
.rdata:0000AE22                 align 4
.rdata:0000AE22 _rdata          ends
.rdata:0000AE22
.rdata:0000AE24 ; ===========================================================================
.rdata:0000AE24
.rdata:0000AE24 ; Segment type: Pure data
.rdata:0000AE24 ; Segment permissions: Read
.rdata:0000AE24 _rdata          segment dword public 'DATA' use32
.rdata:0000AE24                 assume cs:_rdata
.rdata:0000AE24                 ;org 0AE24h
.rdata:0000AE24 ; COMDAT (pick any)
.rdata:0000AE24                 public ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@
.rdata:0000AE24 ; wchar_t `string'
.rdata:0000AE24 ??_C@_1CK@EOPGIILJ@?$AAi?$AAn?$AAv?$AAa?$AAl?$AAi?$AAd?$AA?5?$AAn?$AAu?$AAl?$AAl?$AA?5?$AAp?$AAo?$AAi?$AAn?$AAt?$AAe?$AAr?$AA?$AA@:
.rdata:0000AE24                                         ; DATA XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+11o
.rdata:0000AE24                                         ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+11o
.rdata:0000AE24                 unicode 0, <invalid null pointer>,0
.rdata:0000AE4E                 align 10h
.rdata:0000AE4E _rdata          ends
.rdata:0000AE4E
.rdata:0000AE50 ; ===========================================================================
.rdata:0000AE50
.rdata:0000AE50 ; Segment type: Pure data
.rdata:0000AE50 ; Segment permissions: Read
.rdata:0000AE50 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000AE50 _rdata          segment para public 'DATA' use32
.rdata:0000AE50                 assume cs:_rdata
.rdata:0000AE50                 ;org 0AE50h
.rdata:0000AE50 ; COMDAT (pick any)
.rdata:0000AE50                 public ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@
.rdata:0000AE50 ; wchar_t `string'
.rdata:0000AE50 ??_C@_1EG@CNCHLAOB@?$AAs?$AAt?$AAr?$AAi?$AAn?$AAg?$AA?5?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?5?$AAn?$AAo?$AAt?$AA?5?$AAd?$AAe?$AAr?$AAe?$AAf?$AAe?$AAr?$AAe?$AAn?$AAc?$AAa?$AAb@:
.rdata:0000AE50                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+62o
.rdata:0000AE50                 unicode 0, <string iterator not dereferencable>,0
.rdata:0000AE96                 align 4
.rdata:0000AE96 _rdata          ends
.rdata:0000AE96
.rdata:0000AE98 ; ===========================================================================
.rdata:0000AE98
.rdata:0000AE98 ; Segment type: Pure data
.rdata:0000AE98 ; Segment permissions: Read
.rdata:0000AE98 ; Segment alignment 'qword' can not be represented in assembly
.rdata:0000AE98 _rdata          segment para public 'DATA' use32
.rdata:0000AE98                 assume cs:_rdata
.rdata:0000AE98                 ;org 0AE98h
.rdata:0000AE98 ; COMDAT (pick any)
.rdata:0000AE98                 public ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@
.rdata:0000AE98 ; `string'
.rdata:0000AE98 ??_C@_1MM@BFHGHMKD@?$AAs?$AAt?$AAd?$AA?3?$AA?3?$AA_?$AAS?$AAt?$AAr?$AAi?$AAn?$AAg?$AA_?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$DM?$AAc?$AAl?$AAa?$AAs@:
.rdata:0000AE98                                         ; DATA XREF: std::_String_const_iterator<std::_String_val<std::_Simple_types<wchar_t>>>::operator*(void)+A8o
.rdata:0000AE98                 unicode 0, <std::_String_const_iterator>
.rdata:0000AE98                 dw 3Ch
.rdata:0000AE98                 unicode 0, <class std::_String_val>
.rdata:0000AE98                 dw 3Ch
.rdata:0000AE98                 unicode 0, <struct std::_Simple_types>
.rdata:0000AE98                 dw 3Ch
.rdata:0000AE98                 unicode 0, <wchar_t>
.rdata:0000AE98                 dw 3Eh
.rdata:0000AE98                 unicode 0, < >
.rdata:0000AE98                 dw 3Eh
.rdata:0000AE98                 unicode 0, < >
.rdata:0000AE98                 dw 3Eh
.rdata:0000AE98                 unicode 0, <::operator *>,0
.rdata:0000AE98 _rdata          ends
.rdata:0000AE98
.rdata$r:0000AF64 ; ===========================================================================
.rdata$r:0000AF64
.rdata$r:0000AF64 ; Segment type: Pure data
.rdata$r:0000AF64 ; Segment permissions: Read
.rdata$r:0000AF64 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AF64                 assume cs:_rdata$r
.rdata$r:0000AF64                 ;org 0AF64h
.rdata$r:0000AF64 ; COMDAT (pick any)
.rdata$r:0000AF64                 public ??_R4error_category@std@@6B@
.rdata$r:0000AF64 ; const std::error_category::`RTTI Complete Object Locator'
.rdata$r:0000AF64 ??_R4error_category@std@@6B@ db    0    ; DATA XREF: .rdata:0000A7F8o
.rdata$r:0000AF65                 db    0
.rdata$r:0000AF66                 db    0
.rdata$r:0000AF67                 db    0
.rdata$r:0000AF68                 db    0
.rdata$r:0000AF69                 db    0
.rdata$r:0000AF6A                 db    0
.rdata$r:0000AF6B                 db    0
.rdata$r:0000AF6C                 db    0
.rdata$r:0000AF6D                 db    0
.rdata$r:0000AF6E                 db    0
.rdata$r:0000AF6F                 db    0
.rdata$r:0000AF70                 dd offset ??_R0?AVerror_category@std@@@8 ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000AF74                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AF74 _rdata$r        ends
.rdata$r:0000AF74
.data$r:0000AF78 ; ===========================================================================
.data$r:0000AF78
.data$r:0000AF78 ; Segment type: Pure data
.data$r:0000AF78 ; Segment permissions: Read/Write
.data$r:0000AF78 _data$r         segment dword public 'DATA' use32
.data$r:0000AF78                 assume cs:_data$r
.data$r:0000AF78                 ;org 0AF78h
.data$r:0000AF78 ; COMDAT (pick any)
.data$r:0000AF78                 public ??_R0?AVerror_category@std@@@8
.data$r:0000AF78 ; class std::error_category `RTTI Type Descriptor'
.data$r:0000AF78 ??_R0?AVerror_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000AF78                                         ; DATA XREF: .rdata$r:0000AF70o
.data$r:0000AF78                                         ; .rdata$r:std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000AF78                                         ; const type_info::`vftable'
.data$r:0000AF7C                 align 10h
.data$r:0000AF80 a_?averror_cate db '.?AVerror_category@std@@',0
.data$r:0000AF99                 align 4
.data$r:0000AF99 _data$r         ends
.data$r:0000AF99
.rdata$r:0000AF9C ; ===========================================================================
.rdata$r:0000AF9C
.rdata$r:0000AF9C ; Segment type: Pure data
.rdata$r:0000AF9C ; Segment permissions: Read
.rdata$r:0000AF9C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AF9C                 assume cs:_rdata$r
.rdata$r:0000AF9C                 ;org 0AF9Ch
.rdata$r:0000AF9C ; COMDAT (pick any)
.rdata$r:0000AF9C                 public ??_R3error_category@std@@8
.rdata$r:0000AF9C ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AF9C ??_R3error_category@std@@8 db    0      ; DATA XREF: .rdata$r:0000AF74o
.rdata$r:0000AF9C                                         ; .rdata$r:0000AFCCo
.rdata$r:0000AF9D                 db    0
.rdata$r:0000AF9E                 db    0
.rdata$r:0000AF9F                 db    0
.rdata$r:0000AFA0                 db    0
.rdata$r:0000AFA1                 db    0
.rdata$r:0000AFA2                 db    0
.rdata$r:0000AFA3                 db    0
.rdata$r:0000AFA4                 db    1
.rdata$r:0000AFA5                 db    0
.rdata$r:0000AFA6                 db    0
.rdata$r:0000AFA7                 db    0
.rdata$r:0000AFA8                 dd offset ??_R2error_category@std@@8 ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000AFA8 _rdata$r        ends
.rdata$r:0000AFA8
.rdata$r:0000AFAC ; ===========================================================================
.rdata$r:0000AFAC
.rdata$r:0000AFAC ; Segment type: Pure data
.rdata$r:0000AFAC ; Segment permissions: Read
.rdata$r:0000AFAC _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AFAC                 assume cs:_rdata$r
.rdata$r:0000AFAC                 ;org 0AFACh
.rdata$r:0000AFAC ; COMDAT (pick any)
.rdata$r:0000AFAC                 public ??_R2error_category@std@@8
.rdata$r:0000AFAC ; std::error_category::`RTTI Base Class Array'
.rdata$r:0000AFAC ??_R2error_category@std@@8 dd offset ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000AFAC                                         ; DATA XREF: .rdata$r:0000AFA8o
.rdata$r:0000AFAC                                         ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000AFB0                 db    0
.rdata$r:0000AFB1                 align 4
.rdata$r:0000AFB1 _rdata$r        ends
.rdata$r:0000AFB1
.rdata$r:0000AFB4 ; ===========================================================================
.rdata$r:0000AFB4
.rdata$r:0000AFB4 ; Segment type: Pure data
.rdata$r:0000AFB4 ; Segment permissions: Read
.rdata$r:0000AFB4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AFB4                 assume cs:_rdata$r
.rdata$r:0000AFB4                 ;org 0AFB4h
.rdata$r:0000AFB4 ; COMDAT (pick any)
.rdata$r:0000AFB4                 public ??_R1A@?0A@EA@error_category@std@@8
.rdata$r:0000AFB4 ; std::error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000AFB4 ??_R1A@?0A@EA@error_category@std@@8 dd offset ??_R0?AVerror_category@std@@@8
.rdata$r:0000AFB4                                         ; DATA XREF: .rdata$r:std::error_category::`RTTI Base Class Array'o
.rdata$r:0000AFB4                                         ; .rdata$r:0000B024o ...
.rdata$r:0000AFB4                                         ; std::error_category `RTTI Type Descriptor'
.rdata$r:0000AFB8                 align 10h
.rdata$r:0000AFC0                 db 0FFh
.rdata$r:0000AFC1                 db 0FFh
.rdata$r:0000AFC2                 db 0FFh
.rdata$r:0000AFC3                 db 0FFh
.rdata$r:0000AFC4                 db    0
.rdata$r:0000AFC5                 db    0
.rdata$r:0000AFC6                 db    0
.rdata$r:0000AFC7                 db    0
.rdata$r:0000AFC8                 db  40h ; @
.rdata$r:0000AFC9                 db    0
.rdata$r:0000AFCA                 db    0
.rdata$r:0000AFCB                 db    0
.rdata$r:0000AFCC                 dd offset ??_R3error_category@std@@8 ; std::error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AFCC _rdata$r        ends
.rdata$r:0000AFCC
.rdata$r:0000AFD0 ; ===========================================================================
.rdata$r:0000AFD0
.rdata$r:0000AFD0 ; Segment type: Pure data
.rdata$r:0000AFD0 ; Segment permissions: Read
.rdata$r:0000AFD0 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000AFD0                 assume cs:_rdata$r
.rdata$r:0000AFD0                 ;org 0AFD0h
.rdata$r:0000AFD0 ; COMDAT (pick any)
.rdata$r:0000AFD0                 public ??_R4_Generic_error_category@std@@6B@
.rdata$r:0000AFD0 ; const std::_Generic_error_category::`RTTI Complete Object Locator'
.rdata$r:0000AFD0 ??_R4_Generic_error_category@std@@6B@ db    0
.rdata$r:0000AFD0                                         ; DATA XREF: .rdata:0000A814o
.rdata$r:0000AFD1                 db    0
.rdata$r:0000AFD2                 db    0
.rdata$r:0000AFD3                 db    0
.rdata$r:0000AFD4                 db    0
.rdata$r:0000AFD5                 db    0
.rdata$r:0000AFD6                 db    0
.rdata$r:0000AFD7                 db    0
.rdata$r:0000AFD8                 db    0
.rdata$r:0000AFD9                 db    0
.rdata$r:0000AFDA                 db    0
.rdata$r:0000AFDB                 db    0
.rdata$r:0000AFDC                 dd offset ??_R0?AV_Generic_error_category@std@@@8 ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000AFE0                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000AFE0 _rdata$r        ends
.rdata$r:0000AFE0
.data$r:0000AFE4 ; ===========================================================================
.data$r:0000AFE4
.data$r:0000AFE4 ; Segment type: Pure data
.data$r:0000AFE4 ; Segment permissions: Read/Write
.data$r:0000AFE4 _data$r         segment dword public 'DATA' use32
.data$r:0000AFE4                 assume cs:_data$r
.data$r:0000AFE4                 ;org 0AFE4h
.data$r:0000AFE4 ; COMDAT (pick any)
.data$r:0000AFE4                 public ??_R0?AV_Generic_error_category@std@@@8
.data$r:0000AFE4 ; class std::_Generic_error_category `RTTI Type Descriptor'
.data$r:0000AFE4 ??_R0?AV_Generic_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000AFE4                                         ; DATA XREF: .rdata$r:0000AFDCo
.data$r:0000AFE4                                         ; .rdata$r:std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000AFE4                                         ; const type_info::`vftable'
.data$r:0000AFE8                 db    0
.data$r:0000AFE9                 db    0
.data$r:0000AFEA                 db    0
.data$r:0000AFEB                 db    0
.data$r:0000AFEC                 db  2Eh ; .
.data$r:0000AFED                 db  3Fh ; ?
.data$r:0000AFEE                 db  41h ; A
.data$r:0000AFEF                 db  56h ; V
.data$r:0000AFF0                 db  5Fh ; _
.data$r:0000AFF1                 db  47h ; G
.data$r:0000AFF2                 db  65h ; e
.data$r:0000AFF3                 db  6Eh ; n
.data$r:0000AFF4                 db  65h ; e
.data$r:0000AFF5                 db  72h ; r
.data$r:0000AFF6                 db  69h ; i
.data$r:0000AFF7                 db  63h ; c
.data$r:0000AFF8                 db  5Fh ; _
.data$r:0000AFF9                 db  65h ; e
.data$r:0000AFFA                 db  72h ; r
.data$r:0000AFFB                 db  72h ; r
.data$r:0000AFFC                 db  6Fh ; o
.data$r:0000AFFD                 db  72h ; r
.data$r:0000AFFE                 db  5Fh ; _
.data$r:0000AFFF                 db  63h ; c
.data$r:0000B000                 db  61h ; a
.data$r:0000B001                 db  74h ; t
.data$r:0000B002                 db  65h ; e
.data$r:0000B003                 db  67h ; g
.data$r:0000B004                 db  6Fh ; o
.data$r:0000B005                 db  72h ; r
.data$r:0000B006                 db  79h ; y
.data$r:0000B007                 db  40h ; @
.data$r:0000B008                 db  73h ; s
.data$r:0000B009                 db  74h ; t
.data$r:0000B00A                 db  64h ; d
.data$r:0000B00B                 db  40h ; @
.data$r:0000B00C                 db  40h ; @
.data$r:0000B00D                 db    0
.data$r:0000B00E                 align 10h
.data$r:0000B00E _data$r         ends
.data$r:0000B00E
.rdata$r:0000B010 ; ===========================================================================
.rdata$r:0000B010
.rdata$r:0000B010 ; Segment type: Pure data
.rdata$r:0000B010 ; Segment permissions: Read
.rdata$r:0000B010 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B010                 assume cs:_rdata$r
.rdata$r:0000B010                 ;org 0B010h
.rdata$r:0000B010 ; COMDAT (pick any)
.rdata$r:0000B010                 public ??_R3_Generic_error_category@std@@8
.rdata$r:0000B010 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B010 ??_R3_Generic_error_category@std@@8 db    0
.rdata$r:0000B010                                         ; DATA XREF: .rdata$r:0000AFE0o
.rdata$r:0000B010                                         ; .rdata$r:0000B044o
.rdata$r:0000B011                 db    0
.rdata$r:0000B012                 db    0
.rdata$r:0000B013                 db    0
.rdata$r:0000B014                 db    0
.rdata$r:0000B015                 db    0
.rdata$r:0000B016                 db    0
.rdata$r:0000B017                 db    0
.rdata$r:0000B018                 db    2
.rdata$r:0000B019                 db    0
.rdata$r:0000B01A                 db    0
.rdata$r:0000B01B                 db    0
.rdata$r:0000B01C                 dd offset ??_R2_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000B01C _rdata$r        ends
.rdata$r:0000B01C
.rdata$r:0000B020 ; ===========================================================================
.rdata$r:0000B020
.rdata$r:0000B020 ; Segment type: Pure data
.rdata$r:0000B020 ; Segment permissions: Read
.rdata$r:0000B020 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B020                 assume cs:_rdata$r
.rdata$r:0000B020                 ;org 0B020h
.rdata$r:0000B020 ; COMDAT (pick any)
.rdata$r:0000B020                 public ??_R2_Generic_error_category@std@@8
.rdata$r:0000B020 ; std::_Generic_error_category::`RTTI Base Class Array'
.rdata$r:0000B020 ??_R2_Generic_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000B020                                         ; DATA XREF: .rdata$r:0000B01Co
.rdata$r:0000B020                                         ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B024                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B028                 db    0
.rdata$r:0000B029                 align 4
.rdata$r:0000B029 _rdata$r        ends
.rdata$r:0000B029
.rdata$r:0000B02C ; ===========================================================================
.rdata$r:0000B02C
.rdata$r:0000B02C ; Segment type: Pure data
.rdata$r:0000B02C ; Segment permissions: Read
.rdata$r:0000B02C _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B02C                 assume cs:_rdata$r
.rdata$r:0000B02C                 ;org 0B02Ch
.rdata$r:0000B02C ; COMDAT (pick any)
.rdata$r:0000B02C                 public ??_R1A@?0A@EA@_Generic_error_category@std@@8
.rdata$r:0000B02C ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000B02C ??_R1A@?0A@EA@_Generic_error_category@std@@8 dd offset ??_R0?AV_Generic_error_category@std@@@8
.rdata$r:0000B02C                                         ; DATA XREF: .rdata$r:std::_Generic_error_category::`RTTI Base Class Array'o
.rdata$r:0000B02C                                         ; .rdata$r:0000B09Co ...
.rdata$r:0000B02C                                         ; std::_Generic_error_category `RTTI Type Descriptor'
.rdata$r:0000B030                 db    1
.rdata$r:0000B031                 db    0
.rdata$r:0000B032                 db    0
.rdata$r:0000B033                 db    0
.rdata$r:0000B034                 db    0
.rdata$r:0000B035                 db    0
.rdata$r:0000B036                 db    0
.rdata$r:0000B037                 db    0
.rdata$r:0000B038                 db 0FFh
.rdata$r:0000B039                 db 0FFh
.rdata$r:0000B03A                 db 0FFh
.rdata$r:0000B03B                 db 0FFh
.rdata$r:0000B03C                 db    0
.rdata$r:0000B03D                 db    0
.rdata$r:0000B03E                 db    0
.rdata$r:0000B03F                 db    0
.rdata$r:0000B040                 db  40h ; @
.rdata$r:0000B041                 db    0
.rdata$r:0000B042                 db    0
.rdata$r:0000B043                 db    0
.rdata$r:0000B044                 dd offset ??_R3_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B044 _rdata$r        ends
.rdata$r:0000B044
.rdata$r:0000B048 ; ===========================================================================
.rdata$r:0000B048
.rdata$r:0000B048 ; Segment type: Pure data
.rdata$r:0000B048 ; Segment permissions: Read
.rdata$r:0000B048 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B048                 assume cs:_rdata$r
.rdata$r:0000B048                 ;org 0B048h
.rdata$r:0000B048 ; COMDAT (pick any)
.rdata$r:0000B048                 public ??_R4_Iostream_error_category@std@@6B@
.rdata$r:0000B048 ; const std::_Iostream_error_category::`RTTI Complete Object Locator'
.rdata$r:0000B048 ??_R4_Iostream_error_category@std@@6B@ db    0
.rdata$r:0000B048                                         ; DATA XREF: .rdata:0000A848o
.rdata$r:0000B049                 db    0
.rdata$r:0000B04A                 db    0
.rdata$r:0000B04B                 db    0
.rdata$r:0000B04C                 db    0
.rdata$r:0000B04D                 db    0
.rdata$r:0000B04E                 db    0
.rdata$r:0000B04F                 db    0
.rdata$r:0000B050                 db    0
.rdata$r:0000B051                 db    0
.rdata$r:0000B052                 db    0
.rdata$r:0000B053                 db    0
.rdata$r:0000B054                 dd offset ??_R0?AV_Iostream_error_category@std@@@8 ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000B058                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B058 _rdata$r        ends
.rdata$r:0000B058
.data$r:0000B05C ; ===========================================================================
.data$r:0000B05C
.data$r:0000B05C ; Segment type: Pure data
.data$r:0000B05C ; Segment permissions: Read/Write
.data$r:0000B05C _data$r         segment dword public 'DATA' use32
.data$r:0000B05C                 assume cs:_data$r
.data$r:0000B05C                 ;org 0B05Ch
.data$r:0000B05C ; COMDAT (pick any)
.data$r:0000B05C                 public ??_R0?AV_Iostream_error_category@std@@@8
.data$r:0000B05C ; class std::_Iostream_error_category `RTTI Type Descriptor'
.data$r:0000B05C ??_R0?AV_Iostream_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000B05C                                         ; DATA XREF: .rdata$r:0000B054o
.data$r:0000B05C                                         ; .rdata$r:std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000B05C                                         ; const type_info::`vftable'
.data$r:0000B060                 db    0
.data$r:0000B061                 db    0
.data$r:0000B062                 db    0
.data$r:0000B063                 db    0
.data$r:0000B064                 db  2Eh ; .
.data$r:0000B065                 db  3Fh ; ?
.data$r:0000B066                 db  41h ; A
.data$r:0000B067                 db  56h ; V
.data$r:0000B068                 db  5Fh ; _
.data$r:0000B069                 db  49h ; I
.data$r:0000B06A                 db  6Fh ; o
.data$r:0000B06B                 db  73h ; s
.data$r:0000B06C                 db  74h ; t
.data$r:0000B06D                 db  72h ; r
.data$r:0000B06E                 db  65h ; e
.data$r:0000B06F                 db  61h ; a
.data$r:0000B070                 db  6Dh ; m
.data$r:0000B071                 db  5Fh ; _
.data$r:0000B072                 db  65h ; e
.data$r:0000B073                 db  72h ; r
.data$r:0000B074                 db  72h ; r
.data$r:0000B075                 db  6Fh ; o
.data$r:0000B076                 db  72h ; r
.data$r:0000B077                 db  5Fh ; _
.data$r:0000B078                 db  63h ; c
.data$r:0000B079                 db  61h ; a
.data$r:0000B07A                 db  74h ; t
.data$r:0000B07B                 db  65h ; e
.data$r:0000B07C                 db  67h ; g
.data$r:0000B07D                 db  6Fh ; o
.data$r:0000B07E                 db  72h ; r
.data$r:0000B07F                 db  79h ; y
.data$r:0000B080                 db  40h ; @
.data$r:0000B081                 db  73h ; s
.data$r:0000B082                 db  74h ; t
.data$r:0000B083                 db  64h ; d
.data$r:0000B084                 db  40h ; @
.data$r:0000B085                 db  40h ; @
.data$r:0000B086                 db    0
.data$r:0000B087                 align 4
.data$r:0000B087 _data$r         ends
.data$r:0000B087
.rdata$r:0000B088 ; ===========================================================================
.rdata$r:0000B088
.rdata$r:0000B088 ; Segment type: Pure data
.rdata$r:0000B088 ; Segment permissions: Read
.rdata$r:0000B088 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B088                 assume cs:_rdata$r
.rdata$r:0000B088                 ;org 0B088h
.rdata$r:0000B088 ; COMDAT (pick any)
.rdata$r:0000B088                 public ??_R3_Iostream_error_category@std@@8
.rdata$r:0000B088 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B088 ??_R3_Iostream_error_category@std@@8 db    0
.rdata$r:0000B088                                         ; DATA XREF: .rdata$r:0000B058o
.rdata$r:0000B088                                         ; .rdata$r:0000B0C0o
.rdata$r:0000B089                 db    0
.rdata$r:0000B08A                 db    0
.rdata$r:0000B08B                 db    0
.rdata$r:0000B08C                 db    0
.rdata$r:0000B08D                 db    0
.rdata$r:0000B08E                 db    0
.rdata$r:0000B08F                 db    0
.rdata$r:0000B090                 db    3
.rdata$r:0000B091                 db    0
.rdata$r:0000B092                 db    0
.rdata$r:0000B093                 db    0
.rdata$r:0000B094                 dd offset ??_R2_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000B094 _rdata$r        ends
.rdata$r:0000B094
.rdata$r:0000B098 ; ===========================================================================
.rdata$r:0000B098
.rdata$r:0000B098 ; Segment type: Pure data
.rdata$r:0000B098 ; Segment permissions: Read
.rdata$r:0000B098 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B098                 assume cs:_rdata$r
.rdata$r:0000B098                 ;org 0B098h
.rdata$r:0000B098 ; COMDAT (pick any)
.rdata$r:0000B098                 public ??_R2_Iostream_error_category@std@@8
.rdata$r:0000B098 ; std::_Iostream_error_category::`RTTI Base Class Array'
.rdata$r:0000B098 ??_R2_Iostream_error_category@std@@8 dd offset ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000B098                                         ; DATA XREF: .rdata$r:0000B094o
.rdata$r:0000B098                                         ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B09C                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B0A0                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B0A4                 db    0
.rdata$r:0000B0A5                 align 4
.rdata$r:0000B0A5 _rdata$r        ends
.rdata$r:0000B0A5
.rdata$r:0000B0A8 ; ===========================================================================
.rdata$r:0000B0A8
.rdata$r:0000B0A8 ; Segment type: Pure data
.rdata$r:0000B0A8 ; Segment permissions: Read
.rdata$r:0000B0A8 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B0A8                 assume cs:_rdata$r
.rdata$r:0000B0A8                 ;org 0B0A8h
.rdata$r:0000B0A8 ; COMDAT (pick any)
.rdata$r:0000B0A8                 public ??_R1A@?0A@EA@_Iostream_error_category@std@@8
.rdata$r:0000B0A8 ; std::_Iostream_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000B0A8 ??_R1A@?0A@EA@_Iostream_error_category@std@@8 dd offset ??_R0?AV_Iostream_error_category@std@@@8
.rdata$r:0000B0A8                                         ; DATA XREF: .rdata$r:std::_Iostream_error_category::`RTTI Base Class Array'o
.rdata$r:0000B0A8                                         ; std::_Iostream_error_category `RTTI Type Descriptor'
.rdata$r:0000B0AC                 db    2
.rdata$r:0000B0AD                 db    0
.rdata$r:0000B0AE                 db    0
.rdata$r:0000B0AF                 db    0
.rdata$r:0000B0B0                 db    0
.rdata$r:0000B0B1                 db    0
.rdata$r:0000B0B2                 db    0
.rdata$r:0000B0B3                 db    0
.rdata$r:0000B0B4                 db 0FFh
.rdata$r:0000B0B5                 db 0FFh
.rdata$r:0000B0B6                 db 0FFh
.rdata$r:0000B0B7                 db 0FFh
.rdata$r:0000B0B8                 db    0
.rdata$r:0000B0B9                 db    0
.rdata$r:0000B0BA                 db    0
.rdata$r:0000B0BB                 db    0
.rdata$r:0000B0BC                 db  40h ; @
.rdata$r:0000B0BD                 db    0
.rdata$r:0000B0BE                 db    0
.rdata$r:0000B0BF                 db    0
.rdata$r:0000B0C0                 dd offset ??_R3_Iostream_error_category@std@@8 ; std::_Iostream_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B0C0 _rdata$r        ends
.rdata$r:0000B0C0
.rdata$r:0000B0C4 ; ===========================================================================
.rdata$r:0000B0C4
.rdata$r:0000B0C4 ; Segment type: Pure data
.rdata$r:0000B0C4 ; Segment permissions: Read
.rdata$r:0000B0C4 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B0C4                 assume cs:_rdata$r
.rdata$r:0000B0C4                 ;org 0B0C4h
.rdata$r:0000B0C4 ; COMDAT (pick any)
.rdata$r:0000B0C4                 public ??_R4_System_error_category@std@@6B@
.rdata$r:0000B0C4 ; const std::_System_error_category::`RTTI Complete Object Locator'
.rdata$r:0000B0C4 ??_R4_System_error_category@std@@6B@ db    0 ; DATA XREF: .rdata:0000A888o
.rdata$r:0000B0C5                 db    0
.rdata$r:0000B0C6                 db    0
.rdata$r:0000B0C7                 db    0
.rdata$r:0000B0C8                 db    0
.rdata$r:0000B0C9                 db    0
.rdata$r:0000B0CA                 db    0
.rdata$r:0000B0CB                 db    0
.rdata$r:0000B0CC                 db    0
.rdata$r:0000B0CD                 db    0
.rdata$r:0000B0CE                 db    0
.rdata$r:0000B0CF                 db    0
.rdata$r:0000B0D0                 dd offset ??_R0?AV_System_error_category@std@@@8 ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000B0D4                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B0D4 _rdata$r        ends
.rdata$r:0000B0D4
.data$r:0000B0D8 ; ===========================================================================
.data$r:0000B0D8
.data$r:0000B0D8 ; Segment type: Pure data
.data$r:0000B0D8 ; Segment permissions: Read/Write
.data$r:0000B0D8 _data$r         segment dword public 'DATA' use32
.data$r:0000B0D8                 assume cs:_data$r
.data$r:0000B0D8                 ;org 0B0D8h
.data$r:0000B0D8 ; COMDAT (pick any)
.data$r:0000B0D8                 public ??_R0?AV_System_error_category@std@@@8
.data$r:0000B0D8 ; class std::_System_error_category `RTTI Type Descriptor'
.data$r:0000B0D8 ??_R0?AV_System_error_category@std@@@8 dd offset ??_7type_info@@6B@
.data$r:0000B0D8                                         ; DATA XREF: .rdata$r:0000B0D0o
.data$r:0000B0D8                                         ; .rdata$r:std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'o
.data$r:0000B0D8                                         ; const type_info::`vftable'
.data$r:0000B0DC                 align 10h
.data$r:0000B0E0 a_?av_system_er db '.?AV_System_error_category@std@@',0
.data$r:0000B101                 align 4
.data$r:0000B101 _data$r         ends
.data$r:0000B101
.rdata$r:0000B104 ; ===========================================================================
.rdata$r:0000B104
.rdata$r:0000B104 ; Segment type: Pure data
.rdata$r:0000B104 ; Segment permissions: Read
.rdata$r:0000B104 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B104                 assume cs:_rdata$r
.rdata$r:0000B104                 ;org 0B104h
.rdata$r:0000B104 ; COMDAT (pick any)
.rdata$r:0000B104                 public ??_R3_System_error_category@std@@8
.rdata$r:0000B104 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B104 ??_R3_System_error_category@std@@8 db    0 ; DATA XREF: .rdata$r:0000B0D4o
.rdata$r:0000B104                                         ; .rdata$r:0000B13Co
.rdata$r:0000B105                 db    0
.rdata$r:0000B106                 db    0
.rdata$r:0000B107                 db    0
.rdata$r:0000B108                 db    0
.rdata$r:0000B109                 db    0
.rdata$r:0000B10A                 db    0
.rdata$r:0000B10B                 db    0
.rdata$r:0000B10C                 db    3
.rdata$r:0000B10D                 db    0
.rdata$r:0000B10E                 db    0
.rdata$r:0000B10F                 db    0
.rdata$r:0000B110                 dd offset ??_R2_System_error_category@std@@8 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000B110 _rdata$r        ends
.rdata$r:0000B110
.rdata$r:0000B114 ; ===========================================================================
.rdata$r:0000B114
.rdata$r:0000B114 ; Segment type: Pure data
.rdata$r:0000B114 ; Segment permissions: Read
.rdata$r:0000B114 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B114                 assume cs:_rdata$r
.rdata$r:0000B114                 ;org 0B114h
.rdata$r:0000B114 ; COMDAT (pick any)
.rdata$r:0000B114                 public ??_R2_System_error_category@std@@8
.rdata$r:0000B114 ; std::_System_error_category::`RTTI Base Class Array'
.rdata$r:0000B114 ??_R2_System_error_category@std@@8 dd offset ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000B114                                         ; DATA XREF: .rdata$r:0000B110o
.rdata$r:0000B114                                         ; std::_System_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B118                 dd offset ??_R1A@?0A@EA@_Generic_error_category@std@@8 ; std::_Generic_error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B11C                 dd offset ??_R1A@?0A@EA@error_category@std@@8 ; std::error_category::`RTTI Base Class Descriptor at (0,-1,0,64)'
.rdata$r:0000B120                 db    0
.rdata$r:0000B121                 align 4
.rdata$r:0000B121 _rdata$r        ends
.rdata$r:0000B121
.rdata$r:0000B124 ; ===========================================================================
.rdata$r:0000B124
.rdata$r:0000B124 ; Segment type: Pure data
.rdata$r:0000B124 ; Segment permissions: Read
.rdata$r:0000B124 _rdata$r        segment dword public 'DATA' use32
.rdata$r:0000B124                 assume cs:_rdata$r
.rdata$r:0000B124                 ;org 0B124h
.rdata$r:0000B124 ; COMDAT (pick any)
.rdata$r:0000B124                 public ??_R1A@?0A@EA@_System_error_category@std@@8
.rdata$r:0000B124 ; std::_System_error_category::`RTTI Base Class Descriptor at (0, -1, 0, 64)'
.rdata$r:0000B124 ??_R1A@?0A@EA@_System_error_category@std@@8 dd offset ??_R0?AV_System_error_category@std@@@8
.rdata$r:0000B124                                         ; DATA XREF: .rdata$r:std::_System_error_category::`RTTI Base Class Array'o
.rdata$r:0000B124                                         ; std::_System_error_category `RTTI Type Descriptor'
.rdata$r:0000B128                 db    2
.rdata$r:0000B129                 db    0
.rdata$r:0000B12A                 db    0
.rdata$r:0000B12B                 db    0
.rdata$r:0000B12C                 db    0
.rdata$r:0000B12D                 db    0
.rdata$r:0000B12E                 db    0
.rdata$r:0000B12F                 db    0
.rdata$r:0000B130                 db 0FFh
.rdata$r:0000B131                 db 0FFh
.rdata$r:0000B132                 db 0FFh
.rdata$r:0000B133                 db 0FFh
.rdata$r:0000B134                 db    0
.rdata$r:0000B135                 db    0
.rdata$r:0000B136                 db    0
.rdata$r:0000B137                 db    0
.rdata$r:0000B138                 db  40h ; @
.rdata$r:0000B139                 db    0
.rdata$r:0000B13A                 db    0
.rdata$r:0000B13B                 db    0
.rdata$r:0000B13C                 dd offset ??_R3_System_error_category@std@@8 ; std::_System_error_category::`RTTI Class Hierarchy Descriptor'
.rdata$r:0000B13C _rdata$r        ends
.rdata$r:0000B13C
.CRT$XCU:0000B140 ; ===========================================================================
.CRT$XCU:0000B140
.CRT$XCU:0000B140 ; Segment type: Pure data
.CRT$XCU:0000B140 ; Segment permissions: Read
.CRT$XCU:0000B140 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B140                 assume cs:_CRT$XCU
.CRT$XCU:0000B140                 ;org 0B140h
.CRT$XCU:0000B140 _piecewise_construct$initializer$ dd offset ??__Epiecewise_construct@std@@YAXXZ ; std::`dynamic initializer for 'piecewise_construct''(void)
.CRT$XCU:0000B144 _allocator_arg$initializer$ dd offset ??__Eallocator_arg@std@@YAXXZ ; std::`dynamic initializer for 'allocator_arg''(void)
.CRT$XCU:0000B148 _ignore$initializer$ dd offset ??__Eignore@std@@YAXXZ ; std::`dynamic initializer for 'ignore''(void)
.CRT$XCU:0000B14C __Tuple_alloc$initializer$ dd offset ??__E_Tuple_alloc@std@@YAXXZ ; std::`dynamic initializer for '_Tuple_alloc''(void)
.CRT$XCU:0000B14C _CRT$XCU        ends
.CRT$XCU:0000B14C
.CRT$XCU:0000B150 ; ===========================================================================
.CRT$XCU:0000B150
.CRT$XCU:0000B150 ; Segment type: Pure data
.CRT$XCU:0000B150 ; Segment permissions: Read
.CRT$XCU:0000B150 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B150                 assume cs:_CRT$XCU
.CRT$XCU:0000B150                 ;org 0B150h
.CRT$XCU:0000B150 ; COMDAT (pick associative to section at A8AC)
.CRT$XCU:0000B150 ; public: static void (__cdecl *std::_Error_objects<int>::_Generic_object$initializer$)(void)
.CRT$XCU:0000B150 ?_Generic_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Generic_object@?$_Error_objects@H@std@@2V_Generic_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)
.CRT$XCU:0000B150 _CRT$XCU        ends
.CRT$XCU:0000B150
.CRT$XCU:0000B154 ; ===========================================================================
.CRT$XCU:0000B154
.CRT$XCU:0000B154 ; Segment type: Pure data
.CRT$XCU:0000B154 ; Segment permissions: Read
.CRT$XCU:0000B154 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B154                 assume cs:_CRT$XCU
.CRT$XCU:0000B154                 ;org 0B154h
.CRT$XCU:0000B154 ; COMDAT (pick associative to section at A8B0)
.CRT$XCU:0000B154 ; public: static void (__cdecl *std::_Error_objects<int>::_Iostream_object$initializer$)(void)
.CRT$XCU:0000B154 ?_Iostream_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_Iostream_object@?$_Error_objects@H@std@@2V_Iostream_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)
.CRT$XCU:0000B154 _CRT$XCU        ends
.CRT$XCU:0000B154
.CRT$XCU:0000B158 ; ===========================================================================
.CRT$XCU:0000B158
.CRT$XCU:0000B158 ; Segment type: Pure data
.CRT$XCU:0000B158 ; Segment permissions: Read
.CRT$XCU:0000B158 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B158                 assume cs:_CRT$XCU
.CRT$XCU:0000B158                 ;org 0B158h
.CRT$XCU:0000B158 ; COMDAT (pick associative to section at A8B4)
.CRT$XCU:0000B158 ; public: static void (__cdecl *std::_Error_objects<int>::_System_object$initializer$)(void)
.CRT$XCU:0000B158 ?_System_object$initializer$@?$_Error_objects@H@std@@2P6AXXZA dd offset ??__E?_System_object@?$_Error_objects@H@std@@2V_System_error_category@2@A@@YAXXZ ; `dynamic initializer for 'std::_System_error_category std::_Error_objects<int>::_System_object''(void)
.CRT$XCU:0000B158 _CRT$XCU        ends
.CRT$XCU:0000B158
.CRT$XCU:0000B15C ; ===========================================================================
.CRT$XCU:0000B15C
.CRT$XCU:0000B15C ; Segment type: Pure data
.CRT$XCU:0000B15C ; Segment permissions: Read
.CRT$XCU:0000B15C _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B15C                 assume cs:_CRT$XCU
.CRT$XCU:0000B15C                 ;org 0B15Ch
.CRT$XCU:0000B15C ; COMDAT (pick associative to section at A8BC)
.CRT$XCU:0000B15C ; public: static void (__cdecl *std::num_put<char, class std::back_insert_iterator<class std::basic_string<char, struct std::char_traits<char>, class std::allocator<char>>>>::id$initializer$)(void)
.CRT$XCU:0000B15C ?id$initializer$@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@DV?$back_insert_iterator@V?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<char,std::back_insert_iterator<std::basic_string<char,std::char_traits<char>,std::allocator<char>>>>::id''(void)
.CRT$XCU:0000B15C _CRT$XCU        ends
.CRT$XCU:0000B15C
.CRT$XCU:0000B160 ; ===========================================================================
.CRT$XCU:0000B160
.CRT$XCU:0000B160 ; Segment type: Pure data
.CRT$XCU:0000B160 ; Segment permissions: Read
.CRT$XCU:0000B160 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B160                 assume cs:_CRT$XCU
.CRT$XCU:0000B160                 ;org 0B160h
.CRT$XCU:0000B160 ; COMDAT (pick associative to section at A8C8)
.CRT$XCU:0000B160 ; public: static void (__cdecl *std::num_put<wchar_t, class std::back_insert_iterator<class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>>>::id$initializer$)(void)
.CRT$XCU:0000B160 ?id$initializer$@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2P6AXXZA dd offset ??__E?id@?$num_put@_WV?$back_insert_iterator@V?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@@std@@@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::num_put<wchar_t,std::back_insert_iterator<std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>>>::id''(void)
.CRT$XCU:0000B160 _CRT$XCU        ends
.CRT$XCU:0000B160
.CRT$XCU:0000B164 ; ===========================================================================
.CRT$XCU:0000B164
.CRT$XCU:0000B164 ; Segment type: Pure data
.CRT$XCU:0000B164 ; Segment permissions: Read
.CRT$XCU:0000B164 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B164                 assume cs:_CRT$XCU
.CRT$XCU:0000B164                 ;org 0B164h
.CRT$XCU:0000B164 ; COMDAT (pick associative to section at A95C)
.CRT$XCU:0000B164 ; public: static void (__cdecl *std::numpunct<char>::id$initializer$)(void)
.CRT$XCU:0000B164 ?id$initializer$@?$numpunct@D@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@D@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<char>::id''(void)
.CRT$XCU:0000B164 _CRT$XCU        ends
.CRT$XCU:0000B164
.CRT$XCU:0000B168 ; ===========================================================================
.CRT$XCU:0000B168
.CRT$XCU:0000B168 ; Segment type: Pure data
.CRT$XCU:0000B168 ; Segment permissions: Read
.CRT$XCU:0000B168 _CRT$XCU        segment dword public 'DATA' use32
.CRT$XCU:0000B168                 assume cs:_CRT$XCU
.CRT$XCU:0000B168                 ;org 0B168h
.CRT$XCU:0000B168 ; COMDAT (pick associative to section at A960)
.CRT$XCU:0000B168 ; public: static void (__cdecl *std::numpunct<wchar_t>::id$initializer$)(void)
.CRT$XCU:0000B168 ?id$initializer$@?$numpunct@_W@std@@2P6AXXZA dd offset ??__E?id@?$numpunct@_W@std@@2V0locale@2@A@@YAXXZ ; `dynamic initializer for 'std::locale::id std::numpunct<wchar_t>::id''(void)
.CRT$XCU:0000B168 _CRT$XCU        ends
.CRT$XCU:0000B168
UNDEF:0000B170 ; ===========================================================================
UNDEF:0000B170
UNDEF:0000B170 ; Segment type: Externs
UNDEF:0000B170 ; UNDEF
UNDEF:0000B170                 extrn __purecall:near   ; DATA XREF: .rdata:0000A800o
UNDEF:0000B170                                         ; .rdata:0000A804o
UNDEF:0000B174 ; void *__cdecl operator new(unsigned int)
UNDEF:0000B174                 extrn ??2@YAPAXI@Z:near ; CODE XREF: std::_Allocate<char>(uint,char *)+1Dp
UNDEF:0000B174                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *)+23p ...
UNDEF:0000B178 ; void __cdecl operator delete(void *)
UNDEF:0000B178                 extrn ??3@YAXPAX@Z:near ; CODE XREF: std::_Generic_error_category::`scalar deleting destructor'(uint)+1Bp
UNDEF:0000B178                                         ; std::_Iostream_error_category::`scalar deleting destructor'(uint)+1Bp ...
UNDEF:0000B17C ; int __cdecl atexit(void (__cdecl *)())
UNDEF:0000B17C                 extrn _atexit:near      ; CODE XREF: `dynamic initializer for 'std::_Generic_error_category std::_Error_objects<int>::_Generic_object''(void)+12p
UNDEF:0000B17C                                         ; `dynamic initializer for 'std::_Iostream_error_category std::_Error_objects<int>::_Iostream_object''(void)+12p ...
UNDEF:0000B180                 extrn __invalid_parameter:near
UNDEF:0000B180                                         ; CODE XREF: std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)+74p
UNDEF:0000B180                                         ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::operator[](uint)+74p ...
UNDEF:0000B184 ; void *__cdecl memcpy(void *Dst, const void *Src, size_t Size)
UNDEF:0000B184                 extrn _memcpy:near      ; CODE XREF: std::char_traits<char>::copy(char *,char const *,uint)+1Ep
UNDEF:0000B184                                         ; _wmemcpy+11p
UNDEF:0000B188 ; char *__cdecl strcpy(char *Dest, const char *Source)
UNDEF:0000B188                 extrn _strcpy:near      ; CODE XREF: NativeLangSpeaker::changeDlgLang(HWND__ *,char const *,char *)+E2p
UNDEF:0000B18C ; int __cdecl strcmp(const char *Str1, const char *Str2)
UNDEF:0000B18C                 extrn _strcmp:near      ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+7Dp
UNDEF:0000B18C                                         ; NativeLangSpeaker::getSpecialMenuEntryName(char const *)+17Cp ...
UNDEF:0000B190 ; size_t __cdecl strlen(const char *Str)
UNDEF:0000B190                 extrn _strlen:near      ; CODE XREF: std::char_traits<char>::length(char const *)+1Bp
UNDEF:0000B194 ; void *__cdecl memmove(void *Dst, const void *Src, size_t Size)
UNDEF:0000B194                 extrn _memmove:near     ; CODE XREF: std::char_traits<char>::move(char *,char const *,uint)+1Ep
UNDEF:0000B194                                         ; _wmemmove+11p
UNDEF:0000B198 ; int __cdecl stricmp(const char *Str1, const char *Str2)
UNDEF:0000B198                 extrn _stricmp:near     ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+DBp
UNDEF:0000B19C ; size_t __cdecl wcslen(const wchar_t *Str)
UNDEF:0000B19C                 extrn _wcslen:near      ; CODE XREF: std::char_traits<wchar_t>::length(wchar_t const *)+1Bp
UNDEF:0000B1A0 ; LRESULT __stdcall SendMessageW(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:0000B1A0                 extrn __imp__SendMessageW@16:near
UNDEF:0000B1A0                                         ; CODE XREF: FindReplaceDlg::changeTabName(DIALOG_TYPE,wchar_t const *)+32p
UNDEF:0000B1A0                                         ; DATA XREF: FindReplaceDlg::changeTabName(DIALOG_TYPE,wchar_t const *)+32r
UNDEF:0000B1A4 ; HWND __stdcall GetDlgItem(HWND hDlg, int nIDDlgItem)
UNDEF:0000B1A4                 extrn __imp__GetDlgItem@8:near
UNDEF:0000B1A4                                         ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+138p
UNDEF:0000B1A4                                         ; NativeLangSpeaker::changeConfigLang(HWND__ *)+208p ...
UNDEF:0000B1A8 ; LRESULT __stdcall SendDlgItemMessageW(HWND hDlg, int nIDDlgItem, UINT Msg, WPARAM wParam, LPARAM lParam)
UNDEF:0000B1A8                 extrn __imp__SendDlgItemMessageW@20:near
UNDEF:0000B1A8                                         ; CODE XREF: PreferenceDlg::getListSelectedIndex(void)+1Cp
UNDEF:0000B1A8                                         ; DATA XREF: PreferenceDlg::getListSelectedIndex(void)+1Cr
UNDEF:0000B1AC ; HMENU __stdcall GetSubMenu(HMENU hMenu, int nPos)
UNDEF:0000B1AC                 extrn __imp__GetSubMenu@8:near
UNDEF:0000B1AC                                         ; CODE XREF: NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+31Cp
UNDEF:0000B1AC                                         ; NativeLangSpeaker::changeMenuLang(HMENU__ *,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &,std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>> &)+338p ...
UNDEF:0000B1B0 ; UINT __stdcall GetMenuItemID(HMENU hMenu, int nPos)
UNDEF:0000B1B0                 extrn __imp__GetMenuItemID@8:near
UNDEF:0000B1B0                                         ; CODE XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+105p
UNDEF:0000B1B0                                         ; NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+116p ...
UNDEF:0000B1B4 ; BOOL __stdcall ModifyMenuW(HMENU hMnu, UINT uPosition, UINT uFlags, UINT_PTR uIDNewItem, LPCWSTR lpNewItem)
UNDEF:0000B1B4                 extrn __imp__ModifyMenuW@20:near
UNDEF:0000B1B4                                         ; CODE XREF: NativeLangSpeaker::changeLangTabContextMenu(HMENU__ *)+123p
UNDEF:0000B1B4                                         ; NativeLangSpeaker::changeLangTabDrapContextMenu(HMENU__ *)+132p ...
UNDEF:0000B1B8 ; BOOL __stdcall SetWindowTextW(HWND hWnd, LPCWSTR lpString)
UNDEF:0000B1B8                 extrn __imp__SetWindowTextW@8:near
UNDEF:0000B1B8                                         ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+B0p
UNDEF:0000B1B8                                         ; NativeLangSpeaker::changeConfigLang(HWND__ *)+16Bp ...
UNDEF:0000B1BC ; int __stdcall MessageBoxW(HWND hWnd, LPCWSTR lpText, LPCWSTR lpCaption, UINT uType)
UNDEF:0000B1BC                 extrn __imp__MessageBoxW@16:near
UNDEF:0000B1BC                                         ; CODE XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+3D0p
UNDEF:0000B1BC                                         ; DATA XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+3D0r
UNDEF:0000B1C0 ; int swprintf_s(wchar_t *Dst, size_t SizeInWords, const wchar_t *Format, ...)
UNDEF:0000B1C0                 extrn _swprintf_s:near  ; CODE XREF: std::to_wstring(int)+47p
UNDEF:0000B1C4 ; _DWORD __thiscall std::_Lockit::_Lockit(std::_Lockit *__hidden this, int)
UNDEF:0000B1C4                 extrn ??0_Lockit@std@@QAE@H@Z:near
UNDEF:0000B1C4                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+2Dp
UNDEF:0000B1C4                                         ; std::_Iterator_base12::operator=(std::_Iterator_base12 const &)+55p ...
UNDEF:0000B1C8 ; _DWORD __thiscall std::_Lockit::~_Lockit(std::_Lockit *__hidden this)
UNDEF:0000B1C8                 extrn ??1_Lockit@std@@QAE@XZ:near
UNDEF:0000B1C8                                         ; CODE XREF: std::_Iterator_base12::~_Iterator_base12(void)+4Bp
UNDEF:0000B1C8                                         ; __unwindfunclet$??1_Iterator_base12@std@@QAE@XZ$0+3j ...
UNDEF:0000B1CC                 extrn __hypot:near      ; CODE XREF: _hypot+1Dp
UNDEF:0000B1D0                 extrn __CrtDbgReportW:near
UNDEF:0000B1D0                                         ; CODE XREF: std::vector<CommandShortcut,std::allocator<CommandShortcut>>::operator[](uint)+50p
UNDEF:0000B1D0                                         ; std::vector<ScintillaKeyMap,std::allocator<ScintillaKeyMap>>::operator[](uint)+50p ...
UNDEF:0000B1D4 ; void __cdecl std::_Debug_message(const wchar_t *, const wchar_t *, unsigned int)
UNDEF:0000B1D4                 extrn ?_Debug_message@std@@YAXPB_W0I@Z:near
UNDEF:0000B1D4                                         ; CODE XREF: std::_Debug_pointer<char>(char const *,wchar_t const *,uint)+16p
UNDEF:0000B1D4                                         ; std::_Debug_pointer<wchar_t>(wchar_t const *,wchar_t const *,uint)+16p ...
UNDEF:0000B1D8 ; void __cdecl std::_Xbad_alloc()
UNDEF:0000B1D8                 extrn ?_Xbad_alloc@std@@YAXXZ:near
UNDEF:0000B1D8                                         ; CODE XREF: std::_Allocate<char>(uint,char *):loc_56E2p
UNDEF:0000B1D8                                         ; std::_Allocate<std::_Container_proxy>(uint,std::_Container_proxy *):loc_5724p ...
UNDEF:0000B1DC ; void __cdecl std::_Xlength_error(const char *)
UNDEF:0000B1DC                 extrn ?_Xlength_error@std@@YAXPBD@Z:near
UNDEF:0000B1DC                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xlen(void)+Cp
UNDEF:0000B1DC                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xlen(void)+Cp
UNDEF:0000B1E0 ; void __cdecl std::_Xout_of_range(const char *)
UNDEF:0000B1E0                 extrn ?_Xout_of_range@std@@YAXPBD@Z:near
UNDEF:0000B1E0                                         ; CODE XREF: std::basic_string<char,std::char_traits<char>,std::allocator<char>>::_Xran(void)+Cp
UNDEF:0000B1E0                                         ; std::basic_string<wchar_t,std::char_traits<wchar_t>,std::allocator<wchar_t>>::_Xran(void)+Cp
UNDEF:0000B1E4 ; public: virtual void * __thiscall std::error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000B1E4                 extrn ??_Eerror_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000B1E4                                         ; DATA XREF: .rdata:const std::error_category::`vftable'o
UNDEF:0000B1E8 ; const char *__cdecl std::_Syserror_map(int)
UNDEF:0000B1E8                 extrn ?_Syserror_map@std@@YAPBDH@Z:near
UNDEF:0000B1E8                                         ; CODE XREF: std::_System_error_category::default_error_condition(int)+Bp
UNDEF:0000B1E8                                         ; std::_Generic_error_category::message(int)+33p
UNDEF:0000B1EC ; const char *__cdecl std::_Winerror_map(int)
UNDEF:0000B1EC                 extrn ?_Winerror_map@std@@YAPBDH@Z:near
UNDEF:0000B1EC                                         ; CODE XREF: std::_System_error_category::message(int)+33p
UNDEF:0000B1F0 ; public: virtual void * __thiscall std::_Generic_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000B1F0                 extrn ??_E_Generic_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000B1F0                                         ; DATA XREF: .rdata:const std::_Generic_error_category::`vftable'o
UNDEF:0000B1F4 ; public: virtual void * __thiscall std::_Iostream_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000B1F4                 extrn ??_E_Iostream_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000B1F4                                         ; DATA XREF: .rdata:const std::_Iostream_error_category::`vftable'o
UNDEF:0000B1F8 ; public: virtual void * __thiscall std::_System_error_category::`vector deleting destructor'(unsigned int)
UNDEF:0000B1F8                 extrn ??_E_System_error_category@std@@UAEPAXI@Z:near ; weak
UNDEF:0000B1F8                                         ; DATA XREF: .rdata:const std::_System_error_category::`vftable'o
UNDEF:0000B1FC ; struct TiXmlNodeA *__thiscall TiXmlNodeA::FirstChild(TiXmlNodeA *__hidden this, const char *)
UNDEF:0000B1FC                 extrn ?FirstChild@TiXmlNodeA@@QBEPAV1@PBD@Z:near
UNDEF:0000B1FC                                         ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+1Bp
UNDEF:0000B1FC                                         ; NativeLangSpeaker::init(TiXmlDocumentA *,bool)+3Bp ...
UNDEF:0000B200 ; struct TiXmlNodeA *__thiscall TiXmlNodeA::NextSibling(TiXmlNodeA *__hidden this, const char *)
UNDEF:0000B200                 extrn ?NextSibling@TiXmlNodeA@@QBEPAV1@PBD@Z:near
UNDEF:0000B200                                         ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+D0p
UNDEF:0000B200                                         ; NativeLangSpeaker::changeConfigLang(HWND__ *)+1A0p ...
UNDEF:0000B204 ; struct TiXmlElementA *__thiscall TiXmlNodeA::FirstChildElement(TiXmlNodeA *__hidden this)
UNDEF:0000B204                 extrn ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@XZ:near
UNDEF:0000B204                                         ; CODE XREF: NativeLangSpeaker::searchDlgNode(TiXmlNodeA *,char const *)+26p
UNDEF:0000B208 ; struct TiXmlElementA *__thiscall TiXmlNodeA::FirstChildElement(TiXmlNodeA *__hidden this, const char *)
UNDEF:0000B208                 extrn ?FirstChildElement@TiXmlNodeA@@QBEPAVTiXmlElementA@@PBD@Z:near
UNDEF:0000B208                                         ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+BEp
UNDEF:0000B208                                         ; NativeLangSpeaker::changeConfigLang(HWND__ *)+18Ep ...
UNDEF:0000B20C ; struct TiXmlDocumentA *__thiscall TiXmlNodeA::GetDocument(TiXmlNodeA *__hidden this)
UNDEF:0000B20C                 extrn ?GetDocument@TiXmlNodeA@@QBEPAVTiXmlDocumentA@@XZ:near
UNDEF:0000B20C                                         ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+F7p
UNDEF:0000B210 ; const char *__thiscall TiXmlElementA::Attribute(TiXmlElementA *__hidden this, const char *)
UNDEF:0000B210                 extrn ?Attribute@TiXmlElementA@@QBEPBDPBD@Z:near
UNDEF:0000B210                                         ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+66p
UNDEF:0000B210                                         ; NativeLangSpeaker::init(TiXmlDocumentA *,bool)+B3p ...
UNDEF:0000B214 ; const char *__thiscall TiXmlElementA::Attribute(TiXmlElementA *__hidden this, const char *, int *)
UNDEF:0000B214                 extrn ?Attribute@TiXmlElementA@@QBEPBDPBDPAH@Z:near
UNDEF:0000B214                                         ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+F9p
UNDEF:0000B214                                         ; NativeLangSpeaker::changeConfigLang(HWND__ *)+1C9p ...
UNDEF:0000B218 ; const wchar_t *__thiscall WcharMbcsConvertor::char2wchar(WcharMbcsConvertor *__hidden this, const char *, unsigned int, int, int *, int *)
UNDEF:0000B218                 extrn ?char2wchar@WcharMbcsConvertor@@QAEPB_WPBDIHPAH1@Z:near
UNDEF:0000B218                                         ; CODE XREF: NativeLangSpeaker::changeConfigLang(HWND__ *)+A0p
UNDEF:0000B218                                         ; NativeLangSpeaker::changeConfigLang(HWND__ *)+15Bp ...
UNDEF:0000B21C ; class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> __cdecl stringReplace(class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>>, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &, class std::basic_string<wchar_t, struct std::char_traits<wchar_t>, class std::allocator<wchar_t>> const &)
UNDEF:0000B21C                 extrn ?stringReplace@@YA?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@V12@ABV12@1@Z:near
UNDEF:0000B21C                                         ; CODE XREF: NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+102p
UNDEF:0000B21C                                         ; NativeLangSpeaker::messageBox(char const *,HWND__ *,wchar_t const *,wchar_t const *,int,int,wchar_t const *)+1DCp ...
UNDEF:0000B220 ; void __thiscall Shortcut::setName(Shortcut *__hidden this, const wchar_t *)
UNDEF:0000B220                 extrn ?setName@Shortcut@@QAEXPB_W@Z:near
UNDEF:0000B220                                         ; CODE XREF: NativeLangSpeaker::changeShortcutLang(void)+163p
UNDEF:0000B220                                         ; NativeLangSpeaker::changeShortcutLang(void)+264p
UNDEF:0000B224 ; void __thiscall ControlsTab::renameTab(ControlsTab *__hidden this, int, const wchar_t *)
UNDEF:0000B224                 extrn ?renameTab@ControlsTab@@QAEXHPB_W@Z:near
UNDEF:0000B224                                         ; CODE XREF: UserDefineDialog::setTabName(int,wchar_t const *)+15p
UNDEF:0000B228 ; bool __thiscall PreferenceDlg::renameDialogTitle(PreferenceDlg *__hidden this, const wchar_t *, const wchar_t *)
UNDEF:0000B228                 extrn ?renameDialogTitle@PreferenceDlg@@QAE_NPB_W0@Z:near
UNDEF:0000B228                                         ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+BBp
UNDEF:0000B228                                         ; NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+12Ep ...
UNDEF:0000B22C ; void __thiscall PreferenceDlg::setListSelection(PreferenceDlg *__hidden this, unsigned int)
UNDEF:0000B22C                 extrn ?setListSelection@PreferenceDlg@@QBEXI@Z:near
UNDEF:0000B22C                                         ; CODE XREF: NativeLangSpeaker::changePrefereceDlgLang(PreferenceDlg &)+73Bp
UNDEF:0000B230 ; void __thiscall ShortcutMapper::translateTab(ShortcutMapper *__hidden this, int, const wchar_t *)
UNDEF:0000B230                 extrn ?translateTab@ShortcutMapper@@QAEXHPB_W@Z:near
UNDEF:0000B230                                         ; CODE XREF: NativeLangSpeaker::changeShortcutmapperLang(ShortcutMapper *)+E1p
UNDEF:0000B234 ; int __thiscall EncodingMapper::getEncodingFromString(EncodingMapper *__hidden this, const char *)
UNDEF:0000B234                 extrn ?getEncodingFromString@EncodingMapper@@QBEHPBD@Z:near
UNDEF:0000B234                                         ; CODE XREF: NativeLangSpeaker::init(TiXmlDocumentA *,bool)+12Dp
UNDEF:0000B238 ; __fastcall __security_check_cookie(x)
UNDEF:0000B238                 extrn @__security_check_cookie@4:near
UNDEF:0000B238                                         ; CODE XREF: NativeLangSpeaker::changeUserDefineLang(UserDefineDialog *)+534p
UNDEF:0000B238                                         ; NativeLangSpeaker::changeFindReplaceDlgLang(FindReplaceDlg &)+3B2p ...
UNDEF:0000B23C ; __stdcall _CxxThrowException(x, x)
UNDEF:0000B23C                 extrn __CxxThrowException@8:near
UNDEF:0000B23C                                         ; CODE XREF: __catch$?_Copy@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QAEXII@Z$1+10p
UNDEF:0000B23C                                         ; __catch$?_Copy@?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@QAEXII@Z$1+10p
UNDEF:0000B240                 extrn ___CxxFrameHandler3:near
UNDEF:0000B240                                         ; CODE XREF: __ehhandler$?getSpecialMenuEntryName@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@PBD@Z+16j
UNDEF:0000B240                                         ; __ehhandler$?getNativeLangMenuString@NativeLangSpeaker@@QAE?AV?$basic_string@_WU?$char_traits@_W@std@@V?$allocator@_W@2@@std@@H@Z+16j ...
UNDEF:0000B244 ; const type_info::`vftable'
UNDEF:0000B244                 extrn ??_7type_info@@6B@:near
UNDEF:0000B244                                         ; DATA XREF: .data$r:std::error_category `RTTI Type Descriptor'o
UNDEF:0000B244                                         ; .data$r:std::_Generic_error_category `RTTI Type Descriptor'o ...
UNDEF:0000B248 ; protected: static class WcharMbcsConvertor * WcharMbcsConvertor::_pSelf
UNDEF:0000B248                 extrn ?_pSelf@WcharMbcsConvertor@@1PAV1@A:near
UNDEF:0000B248                                         ; DATA XREF: WcharMbcsConvertor::getInstance(void)+3r
UNDEF:0000B24C ; private: static class NppParameters * NppParameters::_pSelf
UNDEF:0000B24C                 extrn ?_pSelf@NppParameters@@0PAV1@A:near
UNDEF:0000B24C                                         ; DATA XREF: NppParameters::getInstance(void)+3r
UNDEF:0000B250 ; private: static class EncodingMapper * EncodingMapper::_pSelf
UNDEF:0000B250                 extrn ?_pSelf@EncodingMapper@@0PAV1@A:near
UNDEF:0000B250                                         ; DATA XREF: EncodingMapper::getInstance(void)+3r
UNDEF:0000B254                 extrn ___security_cookie:near
UNDEF:0000B254                                         ; DATA XREF: NativeLangSpeaker::getSpecialMenuEntryName(char const *)+14r
UNDEF:0000B254                                         ; NativeLangSpeaker::getNativeLangMenuString(int)+14r ...
UNDEF:0000B258                 extrn __fltused:near
UNDEF:0000B258
UNDEF:0000B258
UNDEF:0000B258                 end